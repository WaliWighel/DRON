
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4f0  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801e7c0  0801e7c0  000247c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080205e8  080205e8  000265e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080205f0  080205f0  000265f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080205f4  080205f4  000265f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  080205f8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020670  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020670  000278ac  2**0
                  ALLOC
  9 .IRAM         000041e6  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031eb5  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005efb  00000000  00000000  0007b5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002468  00000000  00000000  000814f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c33  00000000  00000000  00083958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9c6  00000000  00000000  0008558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038667  00000000  00000000  000c1f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1ab  00000000  00000000  000fa5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268763  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fc8  00000000  00000000  002687a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e7a8 	.word	0x0801e7a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e7a8 	.word	0x0801e7a8

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e f8ae 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e f878 	bl	800e81c <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e f855 	bl	800e81c <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d fef6 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d fede 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e f8f6 	bl	800ea50 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e f8e0 	bl	800ea50 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00d ffa5 	bl	800e81c <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fa2b 	bl	80091dc <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fa15 	bl	80091dc <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d802      	bhi.n	8000e4e <ESC_1_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e48:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e4c:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d902      	bls.n	8000e5e <ESC_1_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000e5c:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine2_balance)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <ESC_2_SPEED+0x1a>
	  {
		  a = min_speed - Engine2_balance;
 8000e8c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e90:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine2_balance)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <ESC_2_SPEED+0x2a>
	  {
		  a =  max_speed - Engine2_balance;
 8000e9c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ea0:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a - Engine2_balance);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine3_balance)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d802      	bhi.n	8000ed6 <ESC_3_SPEED+0x1a>
	  {
		  a = min_speed - Engine3_balance;
 8000ed0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed4:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine3_balance)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d902      	bls.n	8000ee6 <ESC_3_SPEED+0x2a>
	  {
		  a =  max_speed - Engine3_balance;
 8000ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ee4:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a - Engine3_balance);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine4_balance)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d802      	bhi.n	8000f1a <ESC_4_SPEED+0x1a>
	  {
		  a = min_speed - Engine4_balance;
 8000f14:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f18:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a > max_speed - Engine4_balance)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d902      	bls.n	8000f2a <ESC_4_SPEED+0x2a>
	  {
		  a = max_speed - Engine4_balance;
 8000f24:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000f28:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a - Engine4_balance);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 f9c7 	bl	80162ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 f9c1 	bl	80162ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 f9bb 	bl	80162ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 f9b5 	bl	80162ec <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fa4b 	bl	800e454 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 f90b 	bl	80091dc <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d faf5 	bl	800e5f4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fae5 	bl	800e5f4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fad5 	bl	800e5f4 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fbd9 	bl	800e81c <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 f8ae 	bl	80091dc <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fbb4 	bl	800e81c <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d fd3a 	bl	800eb64 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041d5 	.word	0x000041d5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 f833 	bl	80091dc <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f801 	bl	80091dc <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d f9e8 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d f9cd 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d f9b1 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d f995 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d f97c 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d f964 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 fec9 	bl	80091dc <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fc5c 	bl	801dde0 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c fc4a 	bl	801dde0 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fc36 	bl	801ddd8 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fc2a 	bl	801ddd8 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00d f8f7 	bl	800e81c <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d f9fc 	bl	800eb64 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	00000048 	.word	0x00000048
 8001780:	000041d4 	.word	0x000041d4

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	00000048 	.word	0x00000048

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c ff6e 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c ff56 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c ff3e 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c ff26 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c ff0e 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c fef6 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c fede 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00c fec6 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00c feae 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00c fe96 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c fe7e 	bl	800e81c <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c fdfa 	bl	800e81c <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fccc 	bl	800e5f4 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801e834 	.word	0x0801e834

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 fa34 	bl	80091dc <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fcb9 	bl	801470c <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f012 fe91 	bl	8014ae8 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c fb34 	bl	800e454 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c fb24 	bl	800e454 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c fb0d 	bl	800e454 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c fafe 	bl	800e454 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c fae4 	bl	800e454 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c fad9 	bl	800e454 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c fac0 	bl	800e454 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c fab1 	bl	800e454 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c fa87 	bl	800e454 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c fa76 	bl	800e454 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c f9dc 	bl	800e454 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c f9d2 	bl	800e454 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c f9c2 	bl	800e454 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c f9b8 	bl	800e454 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00b ffaa 	bl	800e454 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00b ffa2 	bl	800e454 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00b ff42 	bl	800e454 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00b ff3d 	bl	800e454 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 fdfe 	bl	80091dc <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 fdd5 	bl	80091dc <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fdc9 	bl	80091dc <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <__NVIC_SystemReset+0x24>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <__NVIC_SystemReset+0x24>)
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_SystemReset+0x28>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800268a:	f3bf 8f4f 	dsb	sy
}
 800268e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <__NVIC_SystemReset+0x20>
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	05fa0004 	.word	0x05fa0004

0800269c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
 80026a6:	2300      	movs	r3, #0
 80026a8:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <interpretcommand+0x8c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e02e      	b.n	8002714 <interpretcommand+0x78>

		if(words[j] == ' '){
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <interpretcommand+0x90>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d102      	bne.n	80026c8 <interpretcommand+0x2c>
			vcount++;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	3301      	adds	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <interpretcommand+0x44>
			command[j] = words[j];
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	7819      	ldrb	r1, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <interpretcommand+0x94>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <interpretcommand+0x72>
			value1[J1] = words[j];
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	4910      	ldr	r1, [pc, #64]	@ (800272c <interpretcommand+0x90>)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	3318      	adds	r3, #24
 80026f2:	443b      	add	r3, r7
 80026f4:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80026f8:	7dba      	ldrb	r2, [r7, #22]
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
 80026fc:	3218      	adds	r2, #24
 80026fe:	443a      	add	r2, r7
 8002700:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <interpretcommand+0x98>)
 8002706:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	3301      	adds	r3, #1
 800270c:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b4f      	cmp	r3, #79	@ 0x4f
 8002718:	ddcd      	ble.n	80026b6 <interpretcommand+0x1a>
		}
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	000041be 	.word	0x000041be
 800272c:	000041b4 	.word	0x000041b4
 8002730:	000041b0 	.word	0x000041b0
 8002734:	000041a0 	.word	0x000041a0

08002738 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d14c      	bne.n	80027e4 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800274a:	4bd5      	ldr	r3, [pc, #852]	@ (8002aa0 <executecommand+0x368>)
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002aa4 <executecommand+0x36c>
 800275a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002aa8 <executecommand+0x370>
 8002762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002766:	4bce      	ldr	r3, [pc, #824]	@ (8002aa0 <executecommand+0x368>)
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002aa4 <executecommand+0x36c>
 8002776:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800277a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800277e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002786:	4bc6      	ldr	r3, [pc, #792]	@ (8002aa0 <executecommand+0x368>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002aa4 <executecommand+0x36c>
 8002796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa0 <executecommand+0x368>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002aa4 <executecommand+0x36c>
 80027ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027b2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	4bb8      	ldr	r3, [pc, #736]	@ (8002aa0 <executecommand+0x368>)
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002aa4 <executecommand+0x36c>
 80027ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027d2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002aa8 <executecommand+0x370>
 80027d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	4bb3      	ldr	r3, [pc, #716]	@ (8002aac <executecommand+0x374>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b49      	cmp	r3, #73	@ 0x49
 80027ea:	d14f      	bne.n	800288c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ec:	4bac      	ldr	r3, [pc, #688]	@ (8002aa0 <executecommand+0x368>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002aa4 <executecommand+0x36c>
 80027fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002800:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002aa8 <executecommand+0x370>
 8002804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002808:	4ba5      	ldr	r3, [pc, #660]	@ (8002aa0 <executecommand+0x368>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002aa4 <executecommand+0x36c>
 8002818:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa0 <executecommand+0x368>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002834:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002aa4 <executecommand+0x36c>
 8002838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b97      	ldr	r3, [pc, #604]	@ (8002aa0 <executecommand+0x368>)
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002aa4 <executecommand+0x36c>
 8002850:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002854:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002858:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <executecommand+0x368>)
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002aa4 <executecommand+0x36c>
 8002870:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002874:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002aa8 <executecommand+0x370>
 8002878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <executecommand+0x378>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002886:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab4 <executecommand+0x37c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b44      	cmp	r3, #68	@ 0x44
 8002892:	d14c      	bne.n	800292e <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002894:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <executecommand+0x368>)
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002aa4 <executecommand+0x36c>
 80028a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ab8 <executecommand+0x380>
 80028ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b0:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <executecommand+0x368>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028bc:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002aa4 <executecommand+0x36c>
 80028c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028c4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002aa8 <executecommand+0x370>
 80028c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <executecommand+0x368>)
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002aa4 <executecommand+0x36c>
 80028e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <executecommand+0x368>)
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002aa4 <executecommand+0x36c>
 8002900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <executecommand+0x368>)
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002aa4 <executecommand+0x36c>
 8002918:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800291c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <executecommand+0x384>)
 800292a:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b70      	cmp	r3, #112	@ 0x70
 8002934:	d14c      	bne.n	80029d0 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002936:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <executecommand+0x368>)
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002aa4 <executecommand+0x36c>
 8002946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002aa8 <executecommand+0x370>
 800294e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002952:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <executecommand+0x368>)
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002aa4 <executecommand+0x36c>
 8002962:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002966:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800296a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <executecommand+0x368>)
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002aa4 <executecommand+0x36c>
 8002982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <executecommand+0x368>)
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002aa4 <executecommand+0x36c>
 800299a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800299e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <executecommand+0x368>)
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002aa4 <executecommand+0x36c>
 80029ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029be:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002aa8 <executecommand+0x370>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <executecommand+0x388>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b69      	cmp	r3, #105	@ 0x69
 80029d6:	d14f      	bne.n	8002a78 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <executecommand+0x368>)
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002aa4 <executecommand+0x36c>
 80029e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002aa8 <executecommand+0x370>
 80029f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <executecommand+0x368>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002aa4 <executecommand+0x36c>
 8002a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a08:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <executecommand+0x368>)
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002aa4 <executecommand+0x36c>
 8002a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002aa4 <executecommand+0x36c>
 8002a3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a40:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <executecommand+0x368>)
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002aa4 <executecommand+0x36c>
 8002a5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a60:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002aa8 <executecommand+0x370>
 8002a64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <executecommand+0x38c>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <executecommand+0x390>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d164      	bne.n	8002b4a <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <executecommand+0x368>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002aa4 <executecommand+0x36c>
 8002a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a94:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ab8 <executecommand+0x380>
 8002a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9c:	e016      	b.n	8002acc <executecommand+0x394>
 8002a9e:	bf00      	nop
 8002aa0:	000041a0 	.word	0x000041a0
 8002aa4:	42400000 	.word	0x42400000
 8002aa8:	42c80000 	.word	0x42c80000
 8002aac:	000040cc 	.word	0x000040cc
 8002ab0:	000040d8 	.word	0x000040d8
 8002ab4:	0000409c 	.word	0x0000409c
 8002ab8:	447a0000 	.word	0x447a0000
 8002abc:	000040e4 	.word	0x000040e4
 8002ac0:	0000412c 	.word	0x0000412c
 8002ac4:	00004138 	.word	0x00004138
 8002ac8:	000040a8 	.word	0x000040a8
 8002acc:	4bd3      	ldr	r3, [pc, #844]	@ (8002e1c <executecommand+0x6e4>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e20 <executecommand+0x6e8>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e24 <executecommand+0x6ec>
 8002ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	4bcb      	ldr	r3, [pc, #812]	@ (8002e1c <executecommand+0x6e4>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e20 <executecommand+0x6e8>
 8002afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b00:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e1c <executecommand+0x6e4>)
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b18:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e20 <executecommand+0x6e8>
 8002b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bbd      	ldr	r3, [pc, #756]	@ (8002e1c <executecommand+0x6e4>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e20 <executecommand+0x6e8>
 8002b34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b38:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4bb8      	ldr	r3, [pc, #736]	@ (8002e28 <executecommand+0x6f0>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b46      	cmp	r3, #70	@ 0x46
 8002b50:	d150      	bne.n	8002bf4 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b52:	4bb2      	ldr	r3, [pc, #712]	@ (8002e1c <executecommand+0x6e4>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e20 <executecommand+0x6e8>
 8002b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b66:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e2c <executecommand+0x6f4>
 8002b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6e:	4bab      	ldr	r3, [pc, #684]	@ (8002e1c <executecommand+0x6e4>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e20 <executecommand+0x6e8>
 8002b7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b82:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e24 <executecommand+0x6ec>
 8002b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	@ (8002e1c <executecommand+0x6e4>)
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e20 <executecommand+0x6e8>
 8002b9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	4b9b      	ldr	r3, [pc, #620]	@ (8002e1c <executecommand+0x6e4>)
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e20 <executecommand+0x6e8>
 8002bbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b95      	ldr	r3, [pc, #596]	@ (8002e1c <executecommand+0x6e4>)
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e20 <executecommand+0x6e8>
 8002bd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bda:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <executecommand+0x6f8>)
 8002bf2:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b66      	cmp	r3, #102	@ 0x66
 8002bfa:	d150      	bne.n	8002c9e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <executecommand+0x6e4>)
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e20 <executecommand+0x6e8>
 8002c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c10:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e2c <executecommand+0x6f4>
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	4b80      	ldr	r3, [pc, #512]	@ (8002e1c <executecommand+0x6e4>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e20 <executecommand+0x6e8>
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e24 <executecommand+0x6ec>
 8002c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <executecommand+0x6e4>)
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c44:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e20 <executecommand+0x6e8>
 8002c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	4b70      	ldr	r3, [pc, #448]	@ (8002e1c <executecommand+0x6e4>)
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e20 <executecommand+0x6e8>
 8002c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <executecommand+0x6e4>)
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e20 <executecommand+0x6e8>
 8002c80:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c84:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c94:	ee17 3a90 	vmov	r3, s15
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <executecommand+0x6fc>)
 8002c9c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b61      	cmp	r3, #97	@ 0x61
 8002ca4:	d14c      	bne.n	8002d40 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <executecommand+0x6e4>)
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e20 <executecommand+0x6e8>
 8002cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e24 <executecommand+0x6ec>
 8002cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc2:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <executecommand+0x6e4>)
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e20 <executecommand+0x6e8>
 8002cd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <executecommand+0x6e4>)
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e20 <executecommand+0x6e8>
 8002cf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <executecommand+0x6e4>)
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e20 <executecommand+0x6e8>
 8002d0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d0e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <executecommand+0x6e4>)
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e20 <executecommand+0x6e8>
 8002d2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d2e:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e24 <executecommand+0x6ec>
 8002d32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <executecommand+0x700>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b62      	cmp	r3, #98	@ 0x62
 8002d46:	d14f      	bne.n	8002de8 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d48:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <executecommand+0x6e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d54:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e20 <executecommand+0x6e8>
 8002d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e24 <executecommand+0x6ec>
 8002d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d64:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <executecommand+0x6e4>)
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e20 <executecommand+0x6e8>
 8002d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <executecommand+0x6e4>)
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d90:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e20 <executecommand+0x6e8>
 8002d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <executecommand+0x6e4>)
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e20 <executecommand+0x6e8>
 8002dac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002db0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002db4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <executecommand+0x6e4>)
 8002dbe:	795b      	ldrb	r3, [r3, #5]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e20 <executecommand+0x6e8>
 8002dcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dd0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e24 <executecommand+0x6ec>
 8002dd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <executecommand+0x704>)
 8002dde:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <executecommand+0x708>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b63      	cmp	r3, #99	@ 0x63
 8002dee:	d166      	bne.n	8002ebe <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <executecommand+0x6e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e20 <executecommand+0x6e8>
 8002e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e2c <executecommand+0x6f4>
 8002e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <executecommand+0x6e4>)
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	e018      	b.n	8002e4c <executecommand+0x714>
 8002e1a:	bf00      	nop
 8002e1c:	000041a0 	.word	0x000041a0
 8002e20:	42400000 	.word	0x42400000
 8002e24:	42c80000 	.word	0x42c80000
 8002e28:	00004144 	.word	0x00004144
 8002e2c:	447a0000 	.word	0x447a0000
 8002e30:	00004074 	.word	0x00004074
 8002e34:	00004076 	.word	0x00004076
 8002e38:	000040d0 	.word	0x000040d0
 8002e3c:	000040dc 	.word	0x000040dc
 8002e40:	000040a0 	.word	0x000040a0
 8002e44:	42400000 	.word	0x42400000
 8002e48:	42c80000 	.word	0x42c80000
 8002e4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e44 <executecommand+0x70c>
 8002e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e54:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e48 <executecommand+0x710>
 8002e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	4bd5      	ldr	r3, [pc, #852]	@ (80031b8 <executecommand+0xa80>)
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031bc <executecommand+0xa84>
 8002e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e74:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	4bcd      	ldr	r3, [pc, #820]	@ (80031b8 <executecommand+0xa80>)
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031bc <executecommand+0xa84>
 8002e90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bc7      	ldr	r3, [pc, #796]	@ (80031b8 <executecommand+0xa80>)
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031bc <executecommand+0xa84>
 8002ea8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002eac:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002eb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4bc1      	ldr	r3, [pc, #772]	@ (80031c0 <executecommand+0xa88>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b65      	cmp	r3, #101	@ 0x65
 8002ec4:	d14c      	bne.n	8002f60 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80031b8 <executecommand+0xa80>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031bc <executecommand+0xa84>
 8002ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eda:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031c4 <executecommand+0xa8c>
 8002ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee2:	4bb5      	ldr	r3, [pc, #724]	@ (80031b8 <executecommand+0xa80>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031bc <executecommand+0xa84>
 8002ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002efa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f02:	4bad      	ldr	r3, [pc, #692]	@ (80031b8 <executecommand+0xa80>)
 8002f04:	78db      	ldrb	r3, [r3, #3]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031bc <executecommand+0xa84>
 8002f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80031b8 <executecommand+0xa80>)
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031bc <executecommand+0xa84>
 8002f2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f2e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80031b8 <executecommand+0xa80>)
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031bc <executecommand+0xa84>
 8002f4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f4e:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031c4 <executecommand+0xa8c>
 8002f52:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <executecommand+0xa90>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b67      	cmp	r3, #103	@ 0x67
 8002f66:	d14f      	bne.n	8003008 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f68:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <executecommand+0xa80>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031bc <executecommand+0xa84>
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031c4 <executecommand+0xa8c>
 8002f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <executecommand+0xa80>)
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031bc <executecommand+0xa84>
 8002f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f98:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <executecommand+0xa80>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031bc <executecommand+0xa84>
 8002fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <executecommand+0xa80>)
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031bc <executecommand+0xa84>
 8002fcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fd0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <executecommand+0xa80>)
 8002fde:	795b      	ldrb	r3, [r3, #5]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031bc <executecommand+0xa84>
 8002fec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ff0:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031c4 <executecommand+0xa8c>
 8002ff4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <executecommand+0xa94>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 8003002:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <executecommand+0xa98>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b68      	cmp	r3, #104	@ 0x68
 800300e:	d14c      	bne.n	80030aa <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003010:	4b69      	ldr	r3, [pc, #420]	@ (80031b8 <executecommand+0xa80>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031bc <executecommand+0xa84>
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031d4 <executecommand+0xa9c>
 8003028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <executecommand+0xa80>)
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003038:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031bc <executecommand+0xa84>
 800303c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003040:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031c4 <executecommand+0xa8c>
 8003044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <executecommand+0xa80>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031bc <executecommand+0xa84>
 800305c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <executecommand+0xa80>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031bc <executecommand+0xa84>
 800307c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <executecommand+0xa80>)
 8003086:	795b      	ldrb	r3, [r3, #5]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031bc <executecommand+0xa84>
 8003094:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003098:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800309c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <executecommand+0xaa0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b6a      	cmp	r3, #106	@ 0x6a
 80030b0:	d14c      	bne.n	800314c <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <executecommand+0xa80>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031bc <executecommand+0xa84>
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031c4 <executecommand+0xa8c>
 80030ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <executecommand+0xa80>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <executecommand+0xa84>
 80030de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <executecommand+0xa80>)
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031bc <executecommand+0xa84>
 80030fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <executecommand+0xa80>)
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031bc <executecommand+0xa84>
 8003116:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800311a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800311e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <executecommand+0xa80>)
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031bc <executecommand+0xa84>
 8003136:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800313a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031c4 <executecommand+0xa8c>
 800313e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <executecommand+0xaa4>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b6b      	cmp	r3, #107	@ 0x6b
 8003152:	d167      	bne.n	8003224 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <executecommand+0xa80>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031bc <executecommand+0xa84>
 8003164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003168:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031c4 <executecommand+0xa8c>
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <executecommand+0xa80>)
 8003172:	789b      	ldrb	r3, [r3, #2]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031bc <executecommand+0xa84>
 8003180:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003184:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <executecommand+0xa80>)
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031bc <executecommand+0xa84>
 80031a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <executecommand+0xa80>)
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	e016      	b.n	80031e4 <executecommand+0xaac>
 80031b6:	bf00      	nop
 80031b8:	000041a0 	.word	0x000041a0
 80031bc:	42400000 	.word	0x42400000
 80031c0:	000040e8 	.word	0x000040e8
 80031c4:	42c80000 	.word	0x42c80000
 80031c8:	00004130 	.word	0x00004130
 80031cc:	0000413c 	.word	0x0000413c
 80031d0:	000040ac 	.word	0x000040ac
 80031d4:	447a0000 	.word	0x447a0000
 80031d8:	00004148 	.word	0x00004148
 80031dc:	000040d4 	.word	0x000040d4
 80031e0:	42400000 	.word	0x42400000
 80031e4:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031e0 <executecommand+0xaa8>
 80031e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ec:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f8:	4bba      	ldr	r3, [pc, #744]	@ (80034e4 <executecommand+0xdac>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003204:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80034e8 <executecommand+0xdb0>
 8003208:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320c:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80034ec <executecommand+0xdb4>
 8003210:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	4bb5      	ldr	r3, [pc, #724]	@ (80034f0 <executecommand+0xdb8>)
 800321a:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800321e:	4bb5      	ldr	r3, [pc, #724]	@ (80034f4 <executecommand+0xdbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b6c      	cmp	r3, #108	@ 0x6c
 800322a:	d14c      	bne.n	80032c6 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800322c:	4bad      	ldr	r3, [pc, #692]	@ (80034e4 <executecommand+0xdac>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80034e8 <executecommand+0xdb0>
 800323c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003240:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80034f8 <executecommand+0xdc0>
 8003244:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003248:	4ba6      	ldr	r3, [pc, #664]	@ (80034e4 <executecommand+0xdac>)
 800324a:	789b      	ldrb	r3, [r3, #2]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003254:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80034e8 <executecommand+0xdb0>
 8003258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800325c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80034ec <executecommand+0xdb4>
 8003260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	4b9e      	ldr	r3, [pc, #632]	@ (80034e4 <executecommand+0xdac>)
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80034e8 <executecommand+0xdb0>
 8003278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800327c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <executecommand+0xdac>)
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80034e8 <executecommand+0xdb0>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b90      	ldr	r3, [pc, #576]	@ (80034e4 <executecommand+0xdac>)
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80034e8 <executecommand+0xdb0>
 80032b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032b4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	4b8e      	ldr	r3, [pc, #568]	@ (80034fc <executecommand+0xdc4>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b6d      	cmp	r3, #109	@ 0x6d
 80032cc:	d14c      	bne.n	8003368 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <executecommand+0xdac>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034e8 <executecommand+0xdb0>
 80032de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80034ec <executecommand+0xdb4>
 80032e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ea:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <executecommand+0xdac>)
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80034e8 <executecommand+0xdb0>
 80032fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <executecommand+0xdac>)
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80034e8 <executecommand+0xdb0>
 800331a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <executecommand+0xdac>)
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80034e8 <executecommand+0xdb0>
 8003332:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003336:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800333a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003342:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <executecommand+0xdac>)
 8003344:	795b      	ldrb	r3, [r3, #5]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80034e8 <executecommand+0xdb0>
 8003352:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003356:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80034ec <executecommand+0xdb4>
 800335a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <executecommand+0xdc8>)
 8003364:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b6e      	cmp	r3, #110	@ 0x6e
 800336e:	d14f      	bne.n	8003410 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003370:	4b5c      	ldr	r3, [pc, #368]	@ (80034e4 <executecommand+0xdac>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034e8 <executecommand+0xdb0>
 8003380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003384:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80034ec <executecommand+0xdb4>
 8003388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <executecommand+0xdac>)
 800338e:	789b      	ldrb	r3, [r3, #2]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003398:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80034e8 <executecommand+0xdb0>
 800339c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <executecommand+0xdac>)
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80034e8 <executecommand+0xdb0>
 80033bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <executecommand+0xdac>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80034e8 <executecommand+0xdb0>
 80033d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033d8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <executecommand+0xdac>)
 80033e6:	795b      	ldrb	r3, [r3, #5]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80034e8 <executecommand+0xdb0>
 80033f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f8:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80034ec <executecommand+0xdb4>
 80033fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <executecommand+0xdcc>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <executecommand+0xdd0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b6f      	cmp	r3, #111	@ 0x6f
 8003416:	d14c      	bne.n	80034b2 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <executecommand+0xdac>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80034e8 <executecommand+0xdb0>
 8003428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800342c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80034f8 <executecommand+0xdc0>
 8003430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <executecommand+0xdac>)
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80034e8 <executecommand+0xdb0>
 8003444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003448:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80034ec <executecommand+0xdb4>
 800344c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <executecommand+0xdac>)
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80034e8 <executecommand+0xdb0>
 8003464:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003468:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <executecommand+0xdac>)
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003480:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80034e8 <executecommand+0xdb0>
 8003484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <executecommand+0xdac>)
 800348e:	795b      	ldrb	r3, [r3, #5]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80034e8 <executecommand+0xdb0>
 800349c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	4b17      	ldr	r3, [pc, #92]	@ (800350c <executecommand+0xdd4>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b72      	cmp	r3, #114	@ 0x72
 80034b8:	d101      	bne.n	80034be <executecommand+0xd86>
		NVIC_SystemReset();
 80034ba:	f7ff f8d9 	bl	8002670 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e007      	b.n	80034d4 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <executecommand+0xdac>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	ddf4      	ble.n	80034c4 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	000041a0 	.word	0x000041a0
 80034e8:	42400000 	.word	0x42400000
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	000040e0 	.word	0x000040e0
 80034f4:	000040a4 	.word	0x000040a4
 80034f8:	447a0000 	.word	0x447a0000
 80034fc:	000040ec 	.word	0x000040ec
 8003500:	00004134 	.word	0x00004134
 8003504:	00004140 	.word	0x00004140
 8003508:	000040b0 	.word	0x000040b0
 800350c:	0000414c 	.word	0x0000414c

08003510 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f01a fc29 	bl	801dd74 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <MX_ADC2_Init+0xd0>)
 8003526:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003528:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800352a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800352e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003532:	2208      	movs	r2, #8
 8003534:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800353c:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800353e:	2204      	movs	r2, #4
 8003540:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003544:	2200      	movs	r2, #0
 8003546:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800354a:	2200      	movs	r2, #0
 800354c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003550:	2201      	movs	r2, #1
 8003552:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800355e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003564:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800356e:	2203      	movs	r2, #3
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003580:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800358a:	2201      	movs	r2, #1
 800358c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800358e:	4813      	ldr	r0, [pc, #76]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003590:	f006 f96e 	bl	8009870 <HAL_ADC_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800359a:	f004 fab5 	bl	8007b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_ADC2_Init+0xd4>)
 80035a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a2:	2306      	movs	r3, #6
 80035a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035a6:	2307      	movs	r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035b0:	2304      	movs	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_ADC2_Init+0xcc>)
 80035c4:	f006 fe9a 	bl	800a2fc <HAL_ADC_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035ce:	f004 fa9b 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	@ 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	240000ac 	.word	0x240000ac
 80035e0:	40022100 	.word	0x40022100
 80035e4:	19200040 	.word	0x19200040

080035e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_ADC_MspInit+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d162      	bne.n	80036d0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800360c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800361c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	2303      	movs	r3, #3
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	4821      	ldr	r0, [pc, #132]	@ (80036e0 <HAL_ADC_MspInit+0xf8>)
 800365c:	f00a fd3a 	bl	800e0d4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003660:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_ADC_MspInit+0x100>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003668:	220a      	movs	r2, #10
 800366a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800368a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800368e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003690:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003696:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036a4:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a6:	f007 fec3 	bl	800b430 <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036b0:	f004 fa2a 	bl	8007b08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f007 fe06 	bl	800b2d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f007 fe1d 	bl	800b30a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022100 	.word	0x40022100
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58021400 	.word	0x58021400
 80036e4:	2400011c 	.word	0x2400011c
 80036e8:	40020410 	.word	0x40020410

080036ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036f2:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003716:	4a10      	ldr	r2, [pc, #64]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	200b      	movs	r0, #11
 8003734:	f007 fdcf 	bl	800b2d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003738:	200b      	movs	r0, #11
 800373a:	f007 fde6 	bl	800b30a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2038      	movs	r0, #56	@ 0x38
 8003744:	f007 fdc7 	bl	800b2d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003748:	2038      	movs	r0, #56	@ 0x38
 800374a:	f007 fdde 	bl	800b30a <HAL_NVIC_EnableIRQ>

}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
 800375c:	00000000 	.word	0x00000000

08003760 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 800377c:	4b8c      	ldr	r3, [pc, #560]	@ (80039b0 <Thrust_filter+0x250>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b8c      	ldr	r3, [pc, #560]	@ (80039b4 <Thrust_filter+0x254>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x258>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <Thrust_filter+0x25c>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037a8:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	f003 fce0 	bl	800717c <WartoscBezwgledna>
 80037bc:	eef0 7a40 	vmov.f32	s15, s0
 80037c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c4:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f003 fcd2 	bl	800717c <WartoscBezwgledna>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e0:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e4:	ed97 6b08 	vldr	d6, [r7, #32]
 80037e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f8:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80037fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003800:	f01a fb42 	bl	801de88 <pow>
 8003804:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003808:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <Thrust_filter+0x260>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003812:	4293      	cmp	r3, r2
 8003814:	dd03      	ble.n	800381e <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <Thrust_filter+0x260>)
 8003818:	f642 1204 	movw	r2, #10500	@ 0x2904
 800381c:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 800381e:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <Thrust_filter+0x260>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <Thrust_filter+0x264>)
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003830:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	da13      	bge.n	8003860 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003838:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003844:	eeb0 0a67 	vmov.f32	s0, s15
 8003848:	f003 fc98 	bl	800717c <WartoscBezwgledna>
 800384c:	eef0 7a40 	vmov.f32	s15, s0
 8003850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003860:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003876:	eeb0 0b47 	vmov.f64	d0, d7
 800387a:	f01a fab1 	bl	801dde0 <sqrt>
 800387e:	eeb0 7b40 	vmov.f64	d7, d0
 8003882:	eeb0 0b47 	vmov.f64	d0, d7
 8003886:	f01a faab 	bl	801dde0 <sqrt>
 800388a:	eeb0 7b40 	vmov.f64	d7, d0
 800388e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80039a0 <Thrust_filter+0x240>
 8003892:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003896:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389a:	ed97 7b00 	vldr	d7, [r7]
 800389e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 80039a8 <Thrust_filter+0x248>
 80038a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80038aa:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 80038c2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038c6:	eeb1 7b47 	vneg.f64	d7, d7
 80038ca:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038ce:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d513      	bpl.n	8003908 <Thrust_filter+0x1a8>
 80038e0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	dd0a      	ble.n	8003908 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 80038f2:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <Thrust_filter+0x268>)
 80038f4:	ed93 6b00 	vldr	d6, [r3]
 80038f8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <Thrust_filter+0x268>)
 8003902:	ed83 7b00 	vstr	d7, [r3]
 8003906:	e010      	b.n	800392a <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003908:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <Thrust_filter+0x264>)
 800390a:	885b      	ldrh	r3, [r3, #2]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003914:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800391c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <Thrust_filter+0x264>)
 8003928:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <Thrust_filter+0x268>)
 800392c:	ed93 7b00 	vldr	d7, [r3]
 8003930:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003934:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	da09      	bge.n	8003952 <Thrust_filter+0x1f2>
 800393e:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <Thrust_filter+0x268>)
 8003940:	ed93 7b00 	vldr	d7, [r3]
 8003944:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d818      	bhi.n	8003984 <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <Thrust_filter+0x264>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <Thrust_filter+0x268>)
 8003960:	ed93 7b00 	vldr	d7, [r3]
 8003964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003968:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <Thrust_filter+0x264>)
 8003974:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003976:	4914      	ldr	r1, [pc, #80]	@ (80039c8 <Thrust_filter+0x268>)
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <Thrust_filter+0x264>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	f242 7210 	movw	r2, #10000	@ 0x2710
 800398c:	4293      	cmp	r3, r2
 800398e:	d903      	bls.n	8003998 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <Thrust_filter+0x264>)
 8003992:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003996:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003998:	bf00      	nop
 800399a:	3738      	adds	r7, #56	@ 0x38
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00000000 	.word	0x00000000
 80039a4:	409f4000 	.word	0x409f4000
 80039a8:	30553261 	.word	0x30553261
 80039ac:	3f33a92a 	.word	0x3f33a92a
 80039b0:	00004068 	.word	0x00004068
 80039b4:	00004078 	.word	0x00004078
 80039b8:	0000406c 	.word	0x0000406c
 80039bc:	0000407c 	.word	0x0000407c
 80039c0:	0000405c 	.word	0x0000405c
 80039c4:	00000178 	.word	0x00000178
 80039c8:	00004060 	.word	0x00004060

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 821e 	bhi.w	8003e20 <PID_cal+0x454>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003aa9 	.word	0x08003aa9
 80039f4:	08003b4d 	.word	0x08003b4d
 80039f8:	08003bf1 	.word	0x08003bf1
 80039fc:	08003cd9 	.word	0x08003cd9
 8003a00:	08003d7d 	.word	0x08003d7d
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4ba2      	ldr	r3, [pc, #648]	@ (8003c94 <PID_cal+0x2c8>)
 8003a0c:	edd3 6a00 	vldr	s13, [r3]
 8003a10:	4ba1      	ldr	r3, [pc, #644]	@ (8003c98 <PID_cal+0x2cc>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	ed93 7a00 	vldr	s14, [r3]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	edd3 6a00 	vldr	s13, [r3]
 8003a32:	4b9a      	ldr	r3, [pc, #616]	@ (8003c9c <PID_cal+0x2d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a42:	4b97      	ldr	r3, [pc, #604]	@ (8003ca0 <PID_cal+0x2d4>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c94 <PID_cal+0x2c8>)
 8003a60:	edd3 6a00 	vldr	s13, [r3]
 8003a64:	4b8c      	ldr	r3, [pc, #560]	@ (8003c98 <PID_cal+0x2cc>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca4 <PID_cal+0x2d8>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3310      	adds	r3, #16
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	68d2      	ldr	r2, [r2, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	ed93 7a00 	vldr	s14, [r3]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	330c      	adds	r3, #12
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003aa6:	e1bc      	b.n	8003e22 <PID_cal+0x456>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	ed93 7a00 	vldr	s14, [r3]
 8003aae:	4b7e      	ldr	r3, [pc, #504]	@ (8003ca8 <PID_cal+0x2dc>)
 8003ab0:	edd3 6a00 	vldr	s13, [r3]
 8003ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8003cac <PID_cal+0x2e0>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	ed93 7a00 	vldr	s14, [r3]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	edd3 6a00 	vldr	s13, [r3]
 8003ad6:	4b76      	ldr	r3, [pc, #472]	@ (8003cb0 <PID_cal+0x2e4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ca0 <PID_cal+0x2d4>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3308      	adds	r3, #8
 8003afe:	ed93 7a00 	vldr	s14, [r3]
 8003b02:	4b69      	ldr	r3, [pc, #420]	@ (8003ca8 <PID_cal+0x2dc>)
 8003b04:	edd3 6a00 	vldr	s13, [r3]
 8003b08:	4b68      	ldr	r3, [pc, #416]	@ (8003cac <PID_cal+0x2e0>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b12:	4b68      	ldr	r3, [pc, #416]	@ (8003cb4 <PID_cal+0x2e8>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	3310      	adds	r3, #16
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	68d2      	ldr	r2, [r2, #12]
 8003b30:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003b4a:	e16a      	b.n	8003e22 <PID_cal+0x456>

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	ed93 7a00 	vldr	s14, [r3]
 8003b52:	4b59      	ldr	r3, [pc, #356]	@ (8003cb8 <PID_cal+0x2ec>)
 8003b54:	edd3 6a00 	vldr	s13, [r3]
 8003b58:	4b58      	ldr	r3, [pc, #352]	@ (8003cbc <PID_cal+0x2f0>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	ed93 7a00 	vldr	s14, [r3]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3304      	adds	r3, #4
 8003b76:	edd3 6a00 	vldr	s13, [r3]
 8003b7a:	4b51      	ldr	r3, [pc, #324]	@ (8003cc0 <PID_cal+0x2f4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ca0 <PID_cal+0x2d4>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
 8003ba6:	4b44      	ldr	r3, [pc, #272]	@ (8003cb8 <PID_cal+0x2ec>)
 8003ba8:	edd3 6a00 	vldr	s13, [r3]
 8003bac:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <PID_cal+0x2f0>)
 8003bae:	edd3 7a00 	vldr	s15, [r3]
 8003bb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bb6:	4b43      	ldr	r3, [pc, #268]	@ (8003cc4 <PID_cal+0x2f8>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	3310      	adds	r3, #16
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68d2      	ldr	r2, [r2, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	330c      	adds	r3, #12
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003bee:	e118      	b.n	8003e22 <PID_cal+0x456>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	ed93 7a00 	vldr	s14, [r3]
 8003bf6:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <PID_cal+0x2fc>)
 8003bf8:	edd3 6a00 	vldr	s13, [r3]
 8003bfc:	4b33      	ldr	r3, [pc, #204]	@ (8003ccc <PID_cal+0x300>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	ed93 7a00 	vldr	s14, [r3]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	edd3 6a00 	vldr	s13, [r3]
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd0 <PID_cal+0x304>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca0 <PID_cal+0x2d4>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3308      	adds	r3, #8
 8003c46:	ed93 7a00 	vldr	s14, [r3]
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc8 <PID_cal+0x2fc>)
 8003c4c:	edd3 6a00 	vldr	s13, [r3]
 8003c50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <PID_cal+0x300>)
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd4 <PID_cal+0x308>)
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	330c      	adds	r3, #12
 8003c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3310      	adds	r3, #16
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	68d2      	ldr	r2, [r2, #12]
 8003c78:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	ed93 7a00 	vldr	s14, [r3]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	330c      	adds	r3, #12
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003c92:	e0c6      	b.n	8003e22 <PID_cal+0x456>
 8003c94:	00004068 	.word	0x00004068
 8003c98:	00004078 	.word	0x00004078
 8003c9c:	0000409c 	.word	0x0000409c
 8003ca0:	0801e834 	.word	0x0801e834
 8003ca4:	00004084 	.word	0x00004084
 8003ca8:	0000406c 	.word	0x0000406c
 8003cac:	0000407c 	.word	0x0000407c
 8003cb0:	000040a0 	.word	0x000040a0
 8003cb4:	00004088 	.word	0x00004088
 8003cb8:	00004070 	.word	0x00004070
 8003cbc:	00004080 	.word	0x00004080
 8003cc0:	000040a4 	.word	0x000040a4
 8003cc4:	0000408c 	.word	0x0000408c
 8003cc8:	000040b4 	.word	0x000040b4
 8003ccc:	0000000c 	.word	0x0000000c
 8003cd0:	000040a8 	.word	0x000040a8
 8003cd4:	00004090 	.word	0x00004090

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	ed93 7a00 	vldr	s14, [r3]
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <PID_cal+0x464>)
 8003ce0:	edd3 6a00 	vldr	s13, [r3]
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <PID_cal+0x468>)
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3304      	adds	r3, #4
 8003d02:	edd3 6a00 	vldr	s13, [r3]
 8003d06:	4b4c      	ldr	r3, [pc, #304]	@ (8003e38 <PID_cal+0x46c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d16:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <PID_cal+0x470>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	ed93 7a00 	vldr	s14, [r3]
 8003d32:	4b3f      	ldr	r3, [pc, #252]	@ (8003e30 <PID_cal+0x464>)
 8003d34:	edd3 6a00 	vldr	s13, [r3]
 8003d38:	4b3e      	ldr	r3, [pc, #248]	@ (8003e34 <PID_cal+0x468>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d42:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <PID_cal+0x474>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d54:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68d2      	ldr	r2, [r2, #12]
 8003d60:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	ed93 7a00 	vldr	s14, [r3]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003d7a:	e052      	b.n	8003e22 <PID_cal+0x456>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	ed93 7a00 	vldr	s14, [r3]
 8003d82:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <PID_cal+0x478>)
 8003d84:	edd3 6a00 	vldr	s13, [r3]
 8003d88:	4b2f      	ldr	r3, [pc, #188]	@ (8003e48 <PID_cal+0x47c>)
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	ed93 7a00 	vldr	s14, [r3]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3304      	adds	r3, #4
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <PID_cal+0x480>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dba:	4b20      	ldr	r3, [pc, #128]	@ (8003e3c <PID_cal+0x470>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	ed93 7a00 	vldr	s14, [r3]
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <PID_cal+0x478>)
 8003dd8:	edd3 6a00 	vldr	s13, [r3]
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <PID_cal+0x47c>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003de6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <PID_cal+0x484>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	330c      	adds	r3, #12
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3310      	adds	r3, #16
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68d2      	ldr	r2, [r2, #12]
 8003e04:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	ed93 7a00 	vldr	s14, [r3]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003e1e:	e000      	b.n	8003e22 <PID_cal+0x456>
		default:
			break;
 8003e20:	bf00      	nop
	}
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	000040bc 	.word	0x000040bc
 8003e34:	00000010 	.word	0x00000010
 8003e38:	000040ac 	.word	0x000040ac
 8003e3c:	0801e834 	.word	0x0801e834
 8003e40:	00004094 	.word	0x00004094
 8003e44:	000040b8 	.word	0x000040b8
 8003e48:	00000014 	.word	0x00000014
 8003e4c:	000040b0 	.word	0x000040b0
 8003e50:	00004098 	.word	0x00004098
 8003e54:	00000000 	.word	0x00000000

08003e58 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <Get_batteryvalue+0x78>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003e6c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003ec8 <Get_batteryvalue+0x70>
 8003e70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e78:	ee17 3a90 	vmov	r3, s15
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003e80:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	2b63      	cmp	r3, #99	@ 0x63
 8003e88:	d902      	bls.n	8003e90 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8003e8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003e8c:	2264      	movs	r2, #100	@ 0x64
 8003e8e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8003e90:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	2b18      	cmp	r3, #24
 8003e96:	d802      	bhi.n	8003e9e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8003e98:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	2b0a      	cmp	r3, #10
 8003ea4:	d802      	bhi.n	8003eac <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003ea8:	2209      	movs	r2, #9
 8003eaa:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 8003eac:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	2b18      	cmp	r3, #24
 8003eb2:	d902      	bls.n	8003eba <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8003eb4:	4b07      	ldr	r3, [pc, #28]	@ (8003ed4 <Get_batteryvalue+0x7c>)
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	829a      	strh	r2, [r3, #20]
	}
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	7ae147ae 	.word	0x7ae147ae
 8003ecc:	401dae14 	.word	0x401dae14
 8003ed0:	24000eb0 	.word	0x24000eb0
 8003ed4:	00000178 	.word	0x00000178

08003ed8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003edc:	2200      	movs	r2, #0
 8003ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ee2:	4802      	ldr	r0, [pc, #8]	@ (8003eec <SELECT+0x14>)
 8003ee4:	f00a fab6 	bl	800e454 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58020c00 	.word	0x58020c00

08003ef0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003efa:	4802      	ldr	r0, [pc, #8]	@ (8003f04 <DESELECT+0x14>)
 8003efc:	f00a faaa 	bl	800e454 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	58020c00 	.word	0x58020c00

08003f08 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003f12:	bf00      	nop
 8003f14:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <SPI_TxByte+0x2c>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d1f9      	bne.n	8003f14 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003f20:	1df9      	adds	r1, r7, #7
 8003f22:	2364      	movs	r3, #100	@ 0x64
 8003f24:	2201      	movs	r2, #1
 8003f26:	4804      	ldr	r0, [pc, #16]	@ (8003f38 <SPI_TxByte+0x30>)
 8003f28:	f010 fbf0 	bl	801470c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40020010 	.word	0x40020010
 8003f38:	240001ec 	.word	0x240001ec

08003f3c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003f48:	bf00      	nop
 8003f4a:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <SPI_TxBuffer+0x30>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d1f9      	bne.n	8003f4a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4804      	ldr	r0, [pc, #16]	@ (8003f70 <SPI_TxBuffer+0x34>)
 8003f5e:	f011 fb6f 	bl	8015640 <HAL_SPI_Transmit_DMA>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40020010 	.word	0x40020010
 8003f70:	240001ec 	.word	0x240001ec

08003f74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003f7a:	23ff      	movs	r3, #255	@ 0xff
 8003f7c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003f7e:	bf00      	nop
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <SPI_RxByte+0x34>)
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d1f9      	bne.n	8003f80 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003f8c:	1dba      	adds	r2, r7, #6
 8003f8e:	1df9      	adds	r1, r7, #7
 8003f90:	2364      	movs	r3, #100	@ 0x64
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2301      	movs	r3, #1
 8003f96:	4805      	ldr	r0, [pc, #20]	@ (8003fac <SPI_RxByte+0x38>)
 8003f98:	f011 f818 	bl	8014fcc <HAL_SPI_TransmitReceive>

	return data;
 8003f9c:	79bb      	ldrb	r3, [r7, #6]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40020010 	.word	0x40020010
 8003fac:	240001ec 	.word	0x240001ec

08003fb0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003fb8:	f7ff ffdc 	bl	8003f74 <SPI_RxByte>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	701a      	strb	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <SD_ReadyWait+0x30>)
 8003fd4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003fd8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003fda:	f7ff ffcb 	bl	8003f74 <SPI_RxByte>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2bff      	cmp	r3, #255	@ 0xff
 8003fe6:	d004      	beq.n	8003ff2 <SD_ReadyWait+0x26>
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <SD_ReadyWait+0x30>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f3      	bne.n	8003fda <SD_ReadyWait+0xe>

	return res;
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2400037c 	.word	0x2400037c

08004000 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004006:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800400a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800400c:	f7ff ff70 	bl	8003ef0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	e005      	b.n	8004022 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004016:	20ff      	movs	r0, #255	@ 0xff
 8004018:	f7ff ff76 	bl	8003f08 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3301      	adds	r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b09      	cmp	r3, #9
 8004026:	ddf6      	ble.n	8004016 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004028:	f7ff ff56 	bl	8003ed8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800402c:	2340      	movs	r3, #64	@ 0x40
 800402e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004040:	2395      	movs	r3, #149	@ 0x95
 8004042:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004044:	463b      	mov	r3, r7
 8004046:	2106      	movs	r1, #6
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff77 	bl	8003f3c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800404e:	e002      	b.n	8004056 <SD_PowerOn+0x56>
	{
		cnt--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004056:	f7ff ff8d 	bl	8003f74 <SPI_RxByte>
 800405a:	4603      	mov	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d002      	beq.n	8004066 <SD_PowerOn+0x66>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f4      	bne.n	8004050 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004066:	f7ff ff43 	bl	8003ef0 <DESELECT>
	SPI_TxByte(0XFF);
 800406a:	20ff      	movs	r0, #255	@ 0xff
 800406c:	f7ff ff4c 	bl	8003f08 <SPI_TxByte>

	PowerFlag = 1;
 8004070:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <SD_PowerOn+0x80>)
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	24000195 	.word	0x24000195

08004084 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <SD_PowerOff+0x14>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	24000195 	.word	0x24000195

0800409c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80040a0:	4b03      	ldr	r3, [pc, #12]	@ (80040b0 <SD_CheckPower+0x14>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	24000195 	.word	0x24000195

080040b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 80040be:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <SD_RxDataBlock+0x5c>)
 80040c0:	220a      	movs	r2, #10
 80040c2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80040c4:	f7ff ff56 	bl	8003f74 <SPI_RxByte>
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2bff      	cmp	r3, #255	@ 0xff
 80040d0:	d104      	bne.n	80040dc <SD_RxDataBlock+0x28>
 80040d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <SD_RxDataBlock+0x5c>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f3      	bne.n	80040c4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2bfe      	cmp	r3, #254	@ 0xfe
 80040e0:	d001      	beq.n	80040e6 <SD_RxDataBlock+0x32>
 80040e2:	2300      	movs	r3, #0
 80040e4:	e00f      	b.n	8004106 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff5f 	bl	8003fb0 <SPI_RxBytePtr>
	} while(len--);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	1e5a      	subs	r2, r3, #1
 80040f6:	603a      	str	r2, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f4      	bne.n	80040e6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80040fc:	f7ff ff3a 	bl	8003f74 <SPI_RxByte>
	SPI_RxByte();
 8004100:	f7ff ff38 	bl	8003f74 <SPI_RxByte>

	return TRUE;
 8004104:	2301      	movs	r3, #1
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	24000378 	.word	0x24000378

08004114 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004124:	f7ff ff52 	bl	8003fcc <SD_ReadyWait>
 8004128:	4603      	mov	r3, r0
 800412a:	2bff      	cmp	r3, #255	@ 0xff
 800412c:	d001      	beq.n	8004132 <SD_TxDataBlock+0x1e>
 800412e:	2300      	movs	r3, #0
 8004130:	e02f      	b.n	8004192 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fee7 	bl	8003f08 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	2bfd      	cmp	r3, #253	@ 0xfd
 800413e:	d020      	beq.n	8004182 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004140:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fef9 	bl	8003f3c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800414a:	f7ff ff13 	bl	8003f74 <SPI_RxByte>
		SPI_RxByte();
 800414e:	f7ff ff11 	bl	8003f74 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004152:	e00b      	b.n	800416c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004154:	f7ff ff0e 	bl	8003f74 <SPI_RxByte>
 8004158:	4603      	mov	r3, r0
 800415a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2b05      	cmp	r3, #5
 8004164:	d006      	beq.n	8004174 <SD_TxDataBlock+0x60>
			i++;
 8004166:	7bbb      	ldrb	r3, [r7, #14]
 8004168:	3301      	adds	r3, #1
 800416a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d9f0      	bls.n	8004154 <SD_TxDataBlock+0x40>
 8004172:	e000      	b.n	8004176 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004174:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004176:	bf00      	nop
 8004178:	f7ff fefc 	bl	8003f74 <SPI_RxByte>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0fa      	beq.n	8004178 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b05      	cmp	r3, #5
 800418a:	d101      	bne.n	8004190 <SD_TxDataBlock+0x7c>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	6039      	str	r1, [r7, #0]
 80041a4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80041a6:	f7ff ff11 	bl	8003fcc <SD_ReadyWait>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2bff      	cmp	r3, #255	@ 0xff
 80041ae:	d001      	beq.n	80041b4 <SD_SendCmd+0x1a>
 80041b0:	23ff      	movs	r3, #255	@ 0xff
 80041b2:	e042      	b.n	800423a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fea6 	bl	8003f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	0e1b      	lsrs	r3, r3, #24
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fea0 	bl	8003f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fe9a 	bl	8003f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fe94 	bl	8003f08 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fe8f 	bl	8003f08 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d102      	bne.n	80041f6 <SD_SendCmd+0x5c>
 80041f0:	2395      	movs	r3, #149	@ 0x95
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e007      	b.n	8004206 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2b48      	cmp	r3, #72	@ 0x48
 80041fa:	d102      	bne.n	8004202 <SD_SendCmd+0x68>
 80041fc:	2387      	movs	r3, #135	@ 0x87
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e001      	b.n	8004206 <SD_SendCmd+0x6c>
	else crc = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fe7d 	bl	8003f08 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b4c      	cmp	r3, #76	@ 0x4c
 8004212:	d101      	bne.n	8004218 <SD_SendCmd+0x7e>
 8004214:	f7ff feae 	bl	8003f74 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004218:	230a      	movs	r3, #10
 800421a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800421c:	f7ff feaa 	bl	8003f74 <SPI_RxByte>
 8004220:	4603      	mov	r3, r0
 8004222:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004224:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da05      	bge.n	8004238 <SD_SendCmd+0x9e>
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	3b01      	subs	r3, #1
 8004230:	73bb      	strb	r3, [r7, #14]
 8004232:	7bbb      	ldrb	r3, [r7, #14]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f1      	bne.n	800421c <SD_SendCmd+0x82>

	return res;
 8004238:	7b7b      	ldrb	r3, [r7, #13]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <SD_disk_initialize+0x14>
 8004254:	2301      	movs	r3, #1
 8004256:	e0d6      	b.n	8004406 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004258:	4b6d      	ldr	r3, [pc, #436]	@ (8004410 <SD_disk_initialize+0x1cc>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <SD_disk_initialize+0x2a>
 8004266:	4b6a      	ldr	r3, [pc, #424]	@ (8004410 <SD_disk_initialize+0x1cc>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e0cb      	b.n	8004406 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800426e:	f7ff fec7 	bl	8004000 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004272:	f7ff fe31 	bl	8003ed8 <SELECT>

	/* check disk type */
	type = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800427a:	2100      	movs	r1, #0
 800427c:	2040      	movs	r0, #64	@ 0x40
 800427e:	f7ff ff8c 	bl	800419a <SD_SendCmd>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 80a6 	bne.w	80043d6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800428a:	4b62      	ldr	r3, [pc, #392]	@ (8004414 <SD_disk_initialize+0x1d0>)
 800428c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004290:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004292:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004296:	2048      	movs	r0, #72	@ 0x48
 8004298:	f7ff ff7f 	bl	800419a <SD_SendCmd>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d158      	bne.n	8004354 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e00c      	b.n	80042c2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80042a8:	7bfc      	ldrb	r4, [r7, #15]
 80042aa:	f7ff fe63 	bl	8003f74 <SPI_RxByte>
 80042ae:	4603      	mov	r3, r0
 80042b0:	461a      	mov	r2, r3
 80042b2:	f104 0310 	add.w	r3, r4, #16
 80042b6:	443b      	add	r3, r7
 80042b8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	3301      	adds	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d9ef      	bls.n	80042a8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80042c8:	7abb      	ldrb	r3, [r7, #10]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f040 8083 	bne.w	80043d6 <SD_disk_initialize+0x192>
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	2baa      	cmp	r3, #170	@ 0xaa
 80042d4:	d17f      	bne.n	80043d6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80042d6:	2100      	movs	r1, #0
 80042d8:	2077      	movs	r0, #119	@ 0x77
 80042da:	f7ff ff5e 	bl	800419a <SD_SendCmd>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d807      	bhi.n	80042f4 <SD_disk_initialize+0xb0>
 80042e4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80042e8:	2069      	movs	r0, #105	@ 0x69
 80042ea:	f7ff ff56 	bl	800419a <SD_SendCmd>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80042f4:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <SD_disk_initialize+0x1d0>)
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1eb      	bne.n	80042d6 <SD_disk_initialize+0x92>
 80042fe:	e000      	b.n	8004302 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004300:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004302:	4b44      	ldr	r3, [pc, #272]	@ (8004414 <SD_disk_initialize+0x1d0>)
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d064      	beq.n	80043d6 <SD_disk_initialize+0x192>
 800430c:	2100      	movs	r1, #0
 800430e:	207a      	movs	r0, #122	@ 0x7a
 8004310:	f7ff ff43 	bl	800419a <SD_SendCmd>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d15d      	bne.n	80043d6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
 800431e:	e00c      	b.n	800433a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004320:	7bfc      	ldrb	r4, [r7, #15]
 8004322:	f7ff fe27 	bl	8003f74 <SPI_RxByte>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	f104 0310 	add.w	r3, r4, #16
 800432e:	443b      	add	r3, r7
 8004330:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	3301      	adds	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d9ef      	bls.n	8004320 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004340:	7a3b      	ldrb	r3, [r7, #8]
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <SD_disk_initialize+0x10a>
 800434a:	230c      	movs	r3, #12
 800434c:	e000      	b.n	8004350 <SD_disk_initialize+0x10c>
 800434e:	2304      	movs	r3, #4
 8004350:	73bb      	strb	r3, [r7, #14]
 8004352:	e040      	b.n	80043d6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004354:	2100      	movs	r1, #0
 8004356:	2077      	movs	r0, #119	@ 0x77
 8004358:	f7ff ff1f 	bl	800419a <SD_SendCmd>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d808      	bhi.n	8004374 <SD_disk_initialize+0x130>
 8004362:	2100      	movs	r1, #0
 8004364:	2069      	movs	r0, #105	@ 0x69
 8004366:	f7ff ff18 	bl	800419a <SD_SendCmd>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d801      	bhi.n	8004374 <SD_disk_initialize+0x130>
 8004370:	2302      	movs	r3, #2
 8004372:	e000      	b.n	8004376 <SD_disk_initialize+0x132>
 8004374:	2301      	movs	r3, #1
 8004376:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004378:	7bbb      	ldrb	r3, [r7, #14]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d10e      	bne.n	800439c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800437e:	2100      	movs	r1, #0
 8004380:	2077      	movs	r0, #119	@ 0x77
 8004382:	f7ff ff0a 	bl	800419a <SD_SendCmd>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d80e      	bhi.n	80043aa <SD_disk_initialize+0x166>
 800438c:	2100      	movs	r1, #0
 800438e:	2069      	movs	r0, #105	@ 0x69
 8004390:	f7ff ff03 	bl	800419a <SD_SendCmd>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d107      	bne.n	80043aa <SD_disk_initialize+0x166>
 800439a:	e00d      	b.n	80043b8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800439c:	2100      	movs	r1, #0
 800439e:	2041      	movs	r0, #65	@ 0x41
 80043a0:	f7ff fefb 	bl	800419a <SD_SendCmd>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80043aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <SD_disk_initialize+0x1d0>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e1      	bne.n	8004378 <SD_disk_initialize+0x134>
 80043b4:	e000      	b.n	80043b8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80043b6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80043b8:	4b16      	ldr	r3, [pc, #88]	@ (8004414 <SD_disk_initialize+0x1d0>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <SD_disk_initialize+0x18e>
 80043c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043c6:	2050      	movs	r0, #80	@ 0x50
 80043c8:	f7ff fee7 	bl	800419a <SD_SendCmd>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <SD_disk_initialize+0x192>
 80043d2:	2300      	movs	r3, #0
 80043d4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80043d6:	4a10      	ldr	r2, [pc, #64]	@ (8004418 <SD_disk_initialize+0x1d4>)
 80043d8:	7bbb      	ldrb	r3, [r7, #14]
 80043da:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80043dc:	f7ff fd88 	bl	8003ef0 <DESELECT>
	SPI_RxByte();
 80043e0:	f7ff fdc8 	bl	8003f74 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80043e4:	7bbb      	ldrb	r3, [r7, #14]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <SD_disk_initialize+0x1cc>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <SD_disk_initialize+0x1cc>)
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e001      	b.n	8004400 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80043fc:	f7ff fe42 	bl	8004084 <SD_PowerOff>
	}

	return Stat;
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <SD_disk_initialize+0x1cc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bd90      	pop	{r4, r7, pc}
 800440e:	bf00      	nop
 8004410:	24000000 	.word	0x24000000
 8004414:	24000378 	.word	0x24000378
 8004418:	24000194 	.word	0x24000194

0800441c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <SD_disk_status+0x14>
 800442c:	2301      	movs	r3, #1
 800442e:	e002      	b.n	8004436 <SD_disk_status+0x1a>
	return Stat;
 8004430:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <SD_disk_status+0x28>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	24000000 	.word	0x24000000

08004448 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <SD_disk_read+0x1c>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <SD_disk_read+0x20>
 8004464:	2304      	movs	r3, #4
 8004466:	e051      	b.n	800450c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004468:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <SD_disk_read+0xcc>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <SD_disk_read+0x32>
 8004476:	2303      	movs	r3, #3
 8004478:	e048      	b.n	800450c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800447a:	4b27      	ldr	r3, [pc, #156]	@ (8004518 <SD_disk_read+0xd0>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <SD_disk_read+0x44>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	025b      	lsls	r3, r3, #9
 800448a:	607b      	str	r3, [r7, #4]

	SELECT();
 800448c:	f7ff fd24 	bl	8003ed8 <SELECT>

	if (count == 1)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d111      	bne.n	80044ba <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	2051      	movs	r0, #81	@ 0x51
 800449a:	f7ff fe7e 	bl	800419a <SD_SendCmd>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d129      	bne.n	80044f8 <SD_disk_read+0xb0>
 80044a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044a8:	68b8      	ldr	r0, [r7, #8]
 80044aa:	f7ff fe03 	bl	80040b4 <SD_RxDataBlock>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d021      	beq.n	80044f8 <SD_disk_read+0xb0>
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	e01e      	b.n	80044f8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	2052      	movs	r0, #82	@ 0x52
 80044be:	f7ff fe6c 	bl	800419a <SD_SendCmd>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d117      	bne.n	80044f8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80044c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044cc:	68b8      	ldr	r0, [r7, #8]
 80044ce:	f7ff fdf1 	bl	80040b4 <SD_RxDataBlock>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <SD_disk_read+0xa6>
				buff += 512;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80044de:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ed      	bne.n	80044c8 <SD_disk_read+0x80>
 80044ec:	e000      	b.n	80044f0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80044ee:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80044f0:	2100      	movs	r1, #0
 80044f2:	204c      	movs	r0, #76	@ 0x4c
 80044f4:	f7ff fe51 	bl	800419a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80044f8:	f7ff fcfa 	bl	8003ef0 <DESELECT>
	SPI_RxByte();
 80044fc:	f7ff fd3a 	bl	8003f74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	24000000 	.word	0x24000000
 8004518:	24000194 	.word	0x24000194

0800451c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <SD_disk_write+0x1c>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <SD_disk_write+0x20>
 8004538:	2304      	movs	r3, #4
 800453a:	e06b      	b.n	8004614 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800453c:	4b37      	ldr	r3, [pc, #220]	@ (800461c <SD_disk_write+0x100>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <SD_disk_write+0x32>
 800454a:	2303      	movs	r3, #3
 800454c:	e062      	b.n	8004614 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800454e:	4b33      	ldr	r3, [pc, #204]	@ (800461c <SD_disk_write+0x100>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <SD_disk_write+0x44>
 800455c:	2302      	movs	r3, #2
 800455e:	e059      	b.n	8004614 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004560:	4b2f      	ldr	r3, [pc, #188]	@ (8004620 <SD_disk_write+0x104>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <SD_disk_write+0x56>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	025b      	lsls	r3, r3, #9
 8004570:	607b      	str	r3, [r7, #4]

	SELECT();
 8004572:	f7ff fcb1 	bl	8003ed8 <SELECT>

	if (count == 1)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	2058      	movs	r0, #88	@ 0x58
 8004580:	f7ff fe0b 	bl	800419a <SD_SendCmd>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d13a      	bne.n	8004600 <SD_disk_write+0xe4>
 800458a:	21fe      	movs	r1, #254	@ 0xfe
 800458c:	68b8      	ldr	r0, [r7, #8]
 800458e:	f7ff fdc1 	bl	8004114 <SD_TxDataBlock>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d033      	beq.n	8004600 <SD_disk_write+0xe4>
			count = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	e030      	b.n	8004600 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800459e:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <SD_disk_write+0x104>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80045aa:	2100      	movs	r1, #0
 80045ac:	2077      	movs	r0, #119	@ 0x77
 80045ae:	f7ff fdf4 	bl	800419a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	2057      	movs	r0, #87	@ 0x57
 80045b6:	f7ff fdf0 	bl	800419a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	2059      	movs	r0, #89	@ 0x59
 80045be:	f7ff fdec 	bl	800419a <SD_SendCmd>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11b      	bne.n	8004600 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80045c8:	21fc      	movs	r1, #252	@ 0xfc
 80045ca:	68b8      	ldr	r0, [r7, #8]
 80045cc:	f7ff fda2 	bl	8004114 <SD_TxDataBlock>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <SD_disk_write+0xd0>
				buff += 512;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80045dc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ee      	bne.n	80045c8 <SD_disk_write+0xac>
 80045ea:	e000      	b.n	80045ee <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80045ec:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80045ee:	21fd      	movs	r1, #253	@ 0xfd
 80045f0:	2000      	movs	r0, #0
 80045f2:	f7ff fd8f 	bl	8004114 <SD_TxDataBlock>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <SD_disk_write+0xe4>
			{
				count = 1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004600:	f7ff fc76 	bl	8003ef0 <DESELECT>
	SPI_RxByte();
 8004604:	f7ff fcb6 	bl	8003f74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	24000000 	.word	0x24000000
 8004620:	24000194 	.word	0x24000194

08004624 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b08b      	sub	sp, #44	@ 0x2c
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	603a      	str	r2, [r7, #0]
 800462e:	71fb      	strb	r3, [r7, #7]
 8004630:	460b      	mov	r3, r1
 8004632:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <SD_disk_ioctl+0x1e>
 800463e:	2304      	movs	r3, #4
 8004640:	e113      	b.n	800486a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004648:	79bb      	ldrb	r3, [r7, #6]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d124      	bne.n	8004698 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d012      	beq.n	800467c <SD_disk_ioctl+0x58>
 8004656:	2b02      	cmp	r3, #2
 8004658:	dc1a      	bgt.n	8004690 <SD_disk_ioctl+0x6c>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <SD_disk_ioctl+0x40>
 800465e:	2b01      	cmp	r3, #1
 8004660:	d006      	beq.n	8004670 <SD_disk_ioctl+0x4c>
 8004662:	e015      	b.n	8004690 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004664:	f7ff fd0e 	bl	8004084 <SD_PowerOff>
			res = RES_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800466e:	e0fa      	b.n	8004866 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004670:	f7ff fcc6 	bl	8004000 <SD_PowerOn>
			res = RES_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800467a:	e0f4      	b.n	8004866 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	1c5c      	adds	r4, r3, #1
 8004680:	f7ff fd0c 	bl	800409c <SD_CheckPower>
 8004684:	4603      	mov	r3, r0
 8004686:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800468e:	e0ea      	b.n	8004866 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004690:	2304      	movs	r3, #4
 8004692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004696:	e0e6      	b.n	8004866 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004698:	4b76      	ldr	r3, [pc, #472]	@ (8004874 <SD_disk_ioctl+0x250>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <SD_disk_ioctl+0x86>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0df      	b.n	800486a <SD_disk_ioctl+0x246>

		SELECT();
 80046aa:	f7ff fc15 	bl	8003ed8 <SELECT>

		switch (ctrl)
 80046ae:	79bb      	ldrb	r3, [r7, #6]
 80046b0:	2b0d      	cmp	r3, #13
 80046b2:	f200 80c9 	bhi.w	8004848 <SD_disk_ioctl+0x224>
 80046b6:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <SD_disk_ioctl+0x98>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080047b3 	.word	0x080047b3
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	080047a3 	.word	0x080047a3
 80046c8:	08004849 	.word	0x08004849
 80046cc:	08004849 	.word	0x08004849
 80046d0:	08004849 	.word	0x08004849
 80046d4:	08004849 	.word	0x08004849
 80046d8:	08004849 	.word	0x08004849
 80046dc:	08004849 	.word	0x08004849
 80046e0:	08004849 	.word	0x08004849
 80046e4:	08004849 	.word	0x08004849
 80046e8:	080047c5 	.word	0x080047c5
 80046ec:	080047e9 	.word	0x080047e9
 80046f0:	0800480d 	.word	0x0800480d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80046f4:	2100      	movs	r1, #0
 80046f6:	2049      	movs	r0, #73	@ 0x49
 80046f8:	f7ff fd4f 	bl	800419a <SD_SendCmd>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 80a6 	bne.w	8004850 <SD_disk_ioctl+0x22c>
 8004704:	f107 030c 	add.w	r3, r7, #12
 8004708:	2110      	movs	r1, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fcd2 	bl	80040b4 <SD_RxDataBlock>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 809c 	beq.w	8004850 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004718:	7b3b      	ldrb	r3, [r7, #12]
 800471a:	099b      	lsrs	r3, r3, #6
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d10d      	bne.n	800473e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004722:	7d7b      	ldrb	r3, [r7, #21]
 8004724:	461a      	mov	r2, r3
 8004726:	7d3b      	ldrb	r3, [r7, #20]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	b29b      	uxth	r3, r3
 800472c:	4413      	add	r3, r2
 800472e:	b29b      	uxth	r3, r3
 8004730:	3301      	adds	r3, #1
 8004732:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	029a      	lsls	r2, r3, #10
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e02d      	b.n	800479a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800473e:	7c7b      	ldrb	r3, [r7, #17]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	b2da      	uxtb	r2, r3
 8004746:	7dbb      	ldrb	r3, [r7, #22]
 8004748:	09db      	lsrs	r3, r3, #7
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4413      	add	r3, r2
 800474e:	b2da      	uxtb	r2, r3
 8004750:	7d7b      	ldrb	r3, [r7, #21]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 0306 	and.w	r3, r3, #6
 800475a:	b2db      	uxtb	r3, r3
 800475c:	4413      	add	r3, r2
 800475e:	b2db      	uxtb	r3, r3
 8004760:	3302      	adds	r3, #2
 8004762:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004766:	7d3b      	ldrb	r3, [r7, #20]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	b29b      	uxth	r3, r3
 8004774:	4413      	add	r3, r2
 8004776:	b29a      	uxth	r2, r3
 8004778:	7cbb      	ldrb	r3, [r7, #18]
 800477a:	029b      	lsls	r3, r3, #10
 800477c:	b29b      	uxth	r3, r3
 800477e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004782:	b29b      	uxth	r3, r3
 8004784:	4413      	add	r3, r2
 8004786:	b29b      	uxth	r3, r3
 8004788:	3301      	adds	r3, #1
 800478a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800478c:	8bfa      	ldrh	r2, [r7, #30]
 800478e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004792:	3b09      	subs	r3, #9
 8004794:	409a      	lsls	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80047a0:	e056      	b.n	8004850 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047a8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80047b0:	e055      	b.n	800485e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80047b2:	f7ff fc0b 	bl	8003fcc <SD_ReadyWait>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2bff      	cmp	r3, #255	@ 0xff
 80047ba:	d14b      	bne.n	8004854 <SD_disk_ioctl+0x230>
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80047c2:	e047      	b.n	8004854 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80047c4:	2100      	movs	r1, #0
 80047c6:	2049      	movs	r0, #73	@ 0x49
 80047c8:	f7ff fce7 	bl	800419a <SD_SendCmd>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d142      	bne.n	8004858 <SD_disk_ioctl+0x234>
 80047d2:	2110      	movs	r1, #16
 80047d4:	6a38      	ldr	r0, [r7, #32]
 80047d6:	f7ff fc6d 	bl	80040b4 <SD_RxDataBlock>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03b      	beq.n	8004858 <SD_disk_ioctl+0x234>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80047e6:	e037      	b.n	8004858 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80047e8:	2100      	movs	r1, #0
 80047ea:	204a      	movs	r0, #74	@ 0x4a
 80047ec:	f7ff fcd5 	bl	800419a <SD_SendCmd>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d132      	bne.n	800485c <SD_disk_ioctl+0x238>
 80047f6:	2110      	movs	r1, #16
 80047f8:	6a38      	ldr	r0, [r7, #32]
 80047fa:	f7ff fc5b 	bl	80040b4 <SD_RxDataBlock>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02b      	beq.n	800485c <SD_disk_ioctl+0x238>
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800480a:	e027      	b.n	800485c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800480c:	2100      	movs	r1, #0
 800480e:	207a      	movs	r0, #122	@ 0x7a
 8004810:	f7ff fcc3 	bl	800419a <SD_SendCmd>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d116      	bne.n	8004848 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004820:	e00b      	b.n	800483a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004822:	6a3c      	ldr	r4, [r7, #32]
 8004824:	1c63      	adds	r3, r4, #1
 8004826:	623b      	str	r3, [r7, #32]
 8004828:	f7ff fba4 	bl	8003f74 <SPI_RxByte>
 800482c:	4603      	mov	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004830:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004834:	3301      	adds	r3, #1
 8004836:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800483a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800483e:	2b03      	cmp	r3, #3
 8004840:	d9ef      	bls.n	8004822 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800484e:	e006      	b.n	800485e <SD_disk_ioctl+0x23a>
			break;
 8004850:	bf00      	nop
 8004852:	e004      	b.n	800485e <SD_disk_ioctl+0x23a>
			break;
 8004854:	bf00      	nop
 8004856:	e002      	b.n	800485e <SD_disk_ioctl+0x23a>
			break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <SD_disk_ioctl+0x23a>
			break;
 800485c:	bf00      	nop
		}

		DESELECT();
 800485e:	f7ff fb47 	bl	8003ef0 <DESELECT>
		SPI_RxByte();
 8004862:	f7ff fb87 	bl	8003f74 <SPI_RxByte>
	}

	return res;
 8004866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800486a:	4618      	mov	r0, r3
 800486c:	372c      	adds	r7, #44	@ 0x2c
 800486e:	46bd      	mov	sp, r7
 8004870:	bd90      	pop	{r4, r7, pc}
 8004872:	bf00      	nop
 8004874:	24000000 	.word	0x24000000

08004878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08e      	sub	sp, #56	@ 0x38
 800487c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800488e:	4b8b      	ldr	r3, [pc, #556]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004894:	4a89      	ldr	r2, [pc, #548]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004896:	f043 0310 	orr.w	r3, r3, #16
 800489a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800489e:	4b87      	ldr	r3, [pc, #540]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048ac:	4b83      	ldr	r3, [pc, #524]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048b2:	4a82      	ldr	r2, [pc, #520]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048bc:	4b7f      	ldr	r3, [pc, #508]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ca:	4b7c      	ldr	r3, [pc, #496]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048d0:	4a7a      	ldr	r2, [pc, #488]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048da:	4b78      	ldr	r3, [pc, #480]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048e8:	4b74      	ldr	r3, [pc, #464]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ee:	4a73      	ldr	r2, [pc, #460]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048f0:	f043 0320 	orr.w	r3, r3, #32
 80048f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048f8:	4b70      	ldr	r3, [pc, #448]	@ (8004abc <MX_GPIO_Init+0x244>)
 80048fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004906:	4b6d      	ldr	r3, [pc, #436]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490c:	4a6b      	ldr	r2, [pc, #428]	@ (8004abc <MX_GPIO_Init+0x244>)
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004916:	4b69      	ldr	r3, [pc, #420]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004924:	4b65      	ldr	r3, [pc, #404]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800492a:	4a64      	ldr	r2, [pc, #400]	@ (8004abc <MX_GPIO_Init+0x244>)
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004934:	4b61      	ldr	r3, [pc, #388]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004942:	4b5e      	ldr	r3, [pc, #376]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004948:	4a5c      	ldr	r2, [pc, #368]	@ (8004abc <MX_GPIO_Init+0x244>)
 800494a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800494e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004952:	4b5a      	ldr	r3, [pc, #360]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004960:	4b56      	ldr	r3, [pc, #344]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004966:	4a55      	ldr	r2, [pc, #340]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004970:	4b52      	ldr	r3, [pc, #328]	@ (8004abc <MX_GPIO_Init+0x244>)
 8004972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800497e:	2200      	movs	r2, #0
 8004980:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004984:	484e      	ldr	r0, [pc, #312]	@ (8004ac0 <MX_GPIO_Init+0x248>)
 8004986:	f009 fd65 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800498a:	2200      	movs	r2, #0
 800498c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004990:	484c      	ldr	r0, [pc, #304]	@ (8004ac4 <MX_GPIO_Init+0x24c>)
 8004992:	f009 fd5f 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004996:	2200      	movs	r2, #0
 8004998:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 800499c:	484a      	ldr	r0, [pc, #296]	@ (8004ac8 <MX_GPIO_Init+0x250>)
 800499e:	f009 fd59 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 80049a2:	2200      	movs	r2, #0
 80049a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049a8:	4848      	ldr	r0, [pc, #288]	@ (8004acc <MX_GPIO_Init+0x254>)
 80049aa:	f009 fd53 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 80049ae:	2200      	movs	r2, #0
 80049b0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80049b4:	4846      	ldr	r0, [pc, #280]	@ (8004ad0 <MX_GPIO_Init+0x258>)
 80049b6:	f009 fd4d 	bl	800e454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 80049ba:	f248 0308 	movw	r3, #32776	@ 0x8008
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c0:	2301      	movs	r3, #1
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c8:	2300      	movs	r3, #0
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d0:	4619      	mov	r1, r3
 80049d2:	483b      	ldr	r0, [pc, #236]	@ (8004ac0 <MX_GPIO_Init+0x248>)
 80049d4:	f009 fb7e 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 80049d8:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049de:	2301      	movs	r3, #1
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e6:	2300      	movs	r3, #0
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049ee:	4619      	mov	r1, r3
 80049f0:	4834      	ldr	r0, [pc, #208]	@ (8004ac4 <MX_GPIO_Init+0x24c>)
 80049f2:	f009 fb6f 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 80049f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a08:	4619      	mov	r1, r3
 8004a0a:	482e      	ldr	r0, [pc, #184]	@ (8004ac4 <MX_GPIO_Init+0x24c>)
 8004a0c:	f009 fb62 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004a10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a26:	4619      	mov	r1, r3
 8004a28:	4827      	ldr	r0, [pc, #156]	@ (8004ac8 <MX_GPIO_Init+0x250>)
 8004a2a:	f009 fb53 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a34:	2301      	movs	r3, #1
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a44:	4619      	mov	r1, r3
 8004a46:	4820      	ldr	r0, [pc, #128]	@ (8004ac8 <MX_GPIO_Init+0x250>)
 8004a48:	f009 fb44 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a52:	2301      	movs	r3, #1
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a62:	4619      	mov	r1, r3
 8004a64:	4819      	ldr	r0, [pc, #100]	@ (8004acc <MX_GPIO_Init+0x254>)
 8004a66:	f009 fb35 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004a6a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a70:	2301      	movs	r3, #1
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a80:	4619      	mov	r1, r3
 8004a82:	4813      	ldr	r0, [pc, #76]	@ (8004ad0 <MX_GPIO_Init+0x258>)
 8004a84:	f009 fb26 	bl	800e0d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480b      	ldr	r0, [pc, #44]	@ (8004acc <MX_GPIO_Init+0x254>)
 8004aa0:	f009 fb18 	bl	800e0d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2028      	movs	r0, #40	@ 0x28
 8004aaa:	f006 fc14 	bl	800b2d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004aae:	2028      	movs	r0, #40	@ 0x28
 8004ab0:	f006 fc2b 	bl	800b30a <HAL_NVIC_EnableIRQ>

}
 8004ab4:	bf00      	nop
 8004ab6:	3738      	adds	r7, #56	@ 0x38
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	58021000 	.word	0x58021000
 8004ac4:	58020400 	.word	0x58020400
 8004ac8:	58020c00 	.word	0x58020c00
 8004acc:	58021800 	.word	0x58021800
 8004ad0:	58020000 	.word	0x58020000

08004ad4 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004ada:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <MX_I2C5_Init+0x80>)
 8004adc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004ade:	4b1c      	ldr	r3, [pc, #112]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004aea:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004af0:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004af6:	4b16      	ldr	r3, [pc, #88]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004afc:	4b14      	ldr	r3, [pc, #80]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b02:	4b13      	ldr	r3, [pc, #76]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b08:	4b11      	ldr	r3, [pc, #68]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004b0e:	4810      	ldr	r0, [pc, #64]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004b10:	f009 fcd4 	bl	800e4bc <HAL_I2C_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004b1a:	f002 fff5 	bl	8007b08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b1e:	2100      	movs	r1, #0
 8004b20:	480b      	ldr	r0, [pc, #44]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004b22:	f00c f88d 	bl	8010c40 <HAL_I2CEx_ConfigAnalogFilter>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004b2c:	f002 ffec 	bl	8007b08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004b30:	2100      	movs	r1, #0
 8004b32:	4807      	ldr	r0, [pc, #28]	@ (8004b50 <MX_I2C5_Init+0x7c>)
 8004b34:	f00c f8cf 	bl	8010cd6 <HAL_I2CEx_ConfigDigitalFilter>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004b3e:	f002 ffe3 	bl	8007b08 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004b42:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004b46:	f00c f913 	bl	8010d70 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	24000198 	.word	0x24000198
 8004b54:	40006400 	.word	0x40006400

08004b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b0b8      	sub	sp, #224	@ 0xe0
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b60:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	22b8      	movs	r2, #184	@ 0xb8
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f019 f8fb 	bl	801dd74 <memset>
  if(i2cHandle->Instance==I2C5)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2b      	ldr	r2, [pc, #172]	@ (8004c30 <HAL_I2C_MspInit+0xd8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d14f      	bne.n	8004c28 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004b88:	f04f 0208 	mov.w	r2, #8
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004b94:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004b98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b9c:	f107 0310 	add.w	r3, r7, #16
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f00d f8a9 	bl	8011cf8 <HAL_RCCEx_PeriphCLKConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004bac:	f002 ffac 	bl	8007b08 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bb0:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <HAL_I2C_MspInit+0xdc>)
 8004bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c34 <HAL_I2C_MspInit+0xdc>)
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c34 <HAL_I2C_MspInit+0xdc>)
 8004bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004bce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bd6:	2312      	movs	r3, #18
 8004bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004be8:	2304      	movs	r3, #4
 8004bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4810      	ldr	r0, [pc, #64]	@ (8004c38 <HAL_I2C_MspInit+0xe0>)
 8004bf6:	f009 fa6d 	bl	800e0d4 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <HAL_I2C_MspInit+0xdc>)
 8004bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c00:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <HAL_I2C_MspInit+0xdc>)
 8004c02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <HAL_I2C_MspInit+0xdc>)
 8004c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	209d      	movs	r0, #157	@ 0x9d
 8004c1e:	f006 fb5a 	bl	800b2d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004c22:	209d      	movs	r0, #157	@ 0x9d
 8004c24:	f006 fb71 	bl	800b30a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004c28:	bf00      	nop
 8004c2a:	37e0      	adds	r7, #224	@ 0xe0
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40006400 	.word	0x40006400
 8004c34:	58024400 	.word	0x58024400
 8004c38:	58020800 	.word	0x58020800

08004c3c <__NVIC_SystemReset>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c40:	f3bf 8f4f 	dsb	sy
}
 8004c44:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <__NVIC_SystemReset+0x24>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c4e:	4904      	ldr	r1, [pc, #16]	@ (8004c60 <__NVIC_SystemReset+0x24>)
 8004c50:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <__NVIC_SystemReset+0x28>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c56:	f3bf 8f4f 	dsb	sy
}
 8004c5a:	bf00      	nop
    __NOP();
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <__NVIC_SystemReset+0x20>
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	05fa0004 	.word	0x05fa0004

08004c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	@ 0x28
 8004c6c:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004c6e:	f002 ff1f 	bl	8007ab0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c72:	f004 fa21 	bl	80090b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c76:	f000 ffa5 	bl	8005bc4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004c7a:	f001 f815 	bl	8005ca8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c7e:	f7ff fdfb 	bl	8004878 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c82:	f7fe fd33 	bl	80036ec <MX_DMA_Init>
  MX_I2C5_Init();
 8004c86:	f7ff ff25 	bl	8004ad4 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004c8a:	f002 ff99 	bl	8007bc0 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004c8e:	f7fe fc3f 	bl	8003510 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004c92:	f002 ff3f 	bl	8007b14 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004c96:	f004 f927 	bl	8008ee8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004c9a:	f003 fe45 	bl	8008928 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004c9e:	f003 ffbb 	bl	8008c18 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004ca2:	f003 ff3d 	bl	8008b20 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004ca6:	f015 feb1 	bl	801aa0c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004caa:	f003 fee5 	bl	8008a78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cb4:	489a      	ldr	r0, [pc, #616]	@ (8004f20 <main+0x2b8>)
 8004cb6:	f009 fbcd 	bl	800e454 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8004cba:	4b9a      	ldr	r3, [pc, #616]	@ (8004f24 <main+0x2bc>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004cc0:	4b99      	ldr	r3, [pc, #612]	@ (8004f28 <main+0x2c0>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004cc6:	4b99      	ldr	r3, [pc, #612]	@ (8004f2c <main+0x2c4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a99      	ldr	r2, [pc, #612]	@ (8004f30 <main+0x2c8>)
 8004ccc:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004cce:	4b99      	ldr	r3, [pc, #612]	@ (8004f34 <main+0x2cc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a97      	ldr	r2, [pc, #604]	@ (8004f30 <main+0x2c8>)
 8004cd4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004cd6:	4b98      	ldr	r3, [pc, #608]	@ (8004f38 <main+0x2d0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a95      	ldr	r2, [pc, #596]	@ (8004f30 <main+0x2c8>)
 8004cdc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004cde:	4b94      	ldr	r3, [pc, #592]	@ (8004f30 <main+0x2c8>)
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004ce6:	4b95      	ldr	r3, [pc, #596]	@ (8004f3c <main+0x2d4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a95      	ldr	r2, [pc, #596]	@ (8004f40 <main+0x2d8>)
 8004cec:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004cee:	4b95      	ldr	r3, [pc, #596]	@ (8004f44 <main+0x2dc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a93      	ldr	r2, [pc, #588]	@ (8004f40 <main+0x2d8>)
 8004cf4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004cf6:	4b94      	ldr	r3, [pc, #592]	@ (8004f48 <main+0x2e0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a91      	ldr	r2, [pc, #580]	@ (8004f40 <main+0x2d8>)
 8004cfc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004cfe:	4b90      	ldr	r3, [pc, #576]	@ (8004f40 <main+0x2d8>)
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004d06:	4b91      	ldr	r3, [pc, #580]	@ (8004f4c <main+0x2e4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a91      	ldr	r2, [pc, #580]	@ (8004f50 <main+0x2e8>)
 8004d0c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004d0e:	4b91      	ldr	r3, [pc, #580]	@ (8004f54 <main+0x2ec>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a8f      	ldr	r2, [pc, #572]	@ (8004f50 <main+0x2e8>)
 8004d14:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004d16:	4b90      	ldr	r3, [pc, #576]	@ (8004f58 <main+0x2f0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a8d      	ldr	r2, [pc, #564]	@ (8004f50 <main+0x2e8>)
 8004d1c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004d1e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f50 <main+0x2e8>)
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004d26:	4b8d      	ldr	r3, [pc, #564]	@ (8004f5c <main+0x2f4>)
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f60 <main+0x2f8>)
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4b8b      	ldr	r3, [pc, #556]	@ (8004f64 <main+0x2fc>)
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	4b8a      	ldr	r3, [pc, #552]	@ (8004f68 <main+0x300>)
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	4b89      	ldr	r3, [pc, #548]	@ (8004f6c <main+0x304>)
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <main+0x308>)
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8004d56:	4b87      	ldr	r3, [pc, #540]	@ (8004f74 <main+0x30c>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004d5e:	4b86      	ldr	r3, [pc, #536]	@ (8004f78 <main+0x310>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	4b85      	ldr	r3, [pc, #532]	@ (8004f7c <main+0x314>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004d6a:	4b85      	ldr	r3, [pc, #532]	@ (8004f80 <main+0x318>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8004d70:	4b84      	ldr	r3, [pc, #528]	@ (8004f84 <main+0x31c>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	4b83      	ldr	r3, [pc, #524]	@ (8004f88 <main+0x320>)
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	4b82      	ldr	r3, [pc, #520]	@ (8004f8c <main+0x324>)
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	4b81      	ldr	r3, [pc, #516]	@ (8004f90 <main+0x328>)
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8004d90:	4b80      	ldr	r3, [pc, #512]	@ (8004f94 <main+0x32c>)
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8004d98:	4b7f      	ldr	r3, [pc, #508]	@ (8004f98 <main+0x330>)
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8004da0:	4b7e      	ldr	r3, [pc, #504]	@ (8004f9c <main+0x334>)
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8004da8:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa0 <main+0x338>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8004dae:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa4 <main+0x33c>)
 8004db0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004db4:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain_AR = 100;
 8004db6:	4b7c      	ldr	r3, [pc, #496]	@ (8004fa8 <main+0x340>)
 8004db8:	2264      	movs	r2, #100	@ 0x64
 8004dba:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 100;
 8004dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8004fac <main+0x344>)
 8004dbe:	2264      	movs	r2, #100	@ 0x64
 8004dc0:	801a      	strh	r2, [r3, #0]
  	old_error_pitch = 0;// ruznica
 8004dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8004fb0 <main+0x348>)
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8004dca:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb4 <main+0x34c>)
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8004dd2:	4b79      	ldr	r3, [pc, #484]	@ (8004fb8 <main+0x350>)
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8004dda:	4b78      	ldr	r3, [pc, #480]	@ (8004fbc <main+0x354>)
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8004de2:	4b77      	ldr	r3, [pc, #476]	@ (8004fc0 <main+0x358>)
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8004dea:	4b76      	ldr	r3, [pc, #472]	@ (8004fc4 <main+0x35c>)
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 8004df2:	4b75      	ldr	r3, [pc, #468]	@ (8004fc8 <main+0x360>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8004df8:	4b74      	ldr	r3, [pc, #464]	@ (8004fcc <main+0x364>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8004dfe:	4b74      	ldr	r3, [pc, #464]	@ (8004fd0 <main+0x368>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8004e04:	4b73      	ldr	r3, [pc, #460]	@ (8004fd4 <main+0x36c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8004e0a:	4b73      	ldr	r3, [pc, #460]	@ (8004fd8 <main+0x370>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8004e10:	4b72      	ldr	r3, [pc, #456]	@ (8004fdc <main+0x374>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8004e16:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <main+0x378>)
 8004e18:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e1c:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8004e1e:	4b71      	ldr	r3, [pc, #452]	@ (8004fe4 <main+0x37c>)
 8004e20:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e24:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 8004e26:	4b70      	ldr	r3, [pc, #448]	@ (8004fe8 <main+0x380>)
 8004e28:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e2c:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8004e2e:	4b6f      	ldr	r3, [pc, #444]	@ (8004fec <main+0x384>)
 8004e30:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e34:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 8004e36:	4b6e      	ldr	r3, [pc, #440]	@ (8004ff0 <main+0x388>)
 8004e38:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e3c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff4 <main+0x38c>)
 8004e40:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e44:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8004e46:	4b6c      	ldr	r3, [pc, #432]	@ (8004ff8 <main+0x390>)
 8004e48:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e4c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8004e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8004ffc <main+0x394>)
 8004e50:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004e54:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8004e56:	4b6a      	ldr	r3, [pc, #424]	@ (8005000 <main+0x398>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004e5c:	4b69      	ldr	r3, [pc, #420]	@ (8005004 <main+0x39c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004e62:	4b69      	ldr	r3, [pc, #420]	@ (8005008 <main+0x3a0>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004e68:	4b68      	ldr	r3, [pc, #416]	@ (800500c <main+0x3a4>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004e6e:	4b68      	ldr	r3, [pc, #416]	@ (8005010 <main+0x3a8>)
 8004e70:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004e74:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8004e76:	4b67      	ldr	r3, [pc, #412]	@ (8005014 <main+0x3ac>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	4b66      	ldr	r3, [pc, #408]	@ (8005018 <main+0x3b0>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	4b66      	ldr	r3, [pc, #408]	@ (800501c <main+0x3b4>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8004e88:	4b65      	ldr	r3, [pc, #404]	@ (8005020 <main+0x3b8>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	4b65      	ldr	r3, [pc, #404]	@ (8005024 <main+0x3bc>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 8004e94:	4964      	ldr	r1, [pc, #400]	@ (8005028 <main+0x3c0>)
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9c1 2300 	strd	r2, r3, [r1]

	  p_angular_rate_pitchfactor = 14;
 8004ea2:	4b62      	ldr	r3, [pc, #392]	@ (800502c <main+0x3c4>)
 8004ea4:	4a62      	ldr	r2, [pc, #392]	@ (8005030 <main+0x3c8>)
 8004ea6:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 12;
 8004ea8:	4b62      	ldr	r3, [pc, #392]	@ (8005034 <main+0x3cc>)
 8004eaa:	4a63      	ldr	r2, [pc, #396]	@ (8005038 <main+0x3d0>)
 8004eac:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 5;// -> 10
 8004eae:	4b63      	ldr	r3, [pc, #396]	@ (800503c <main+0x3d4>)
 8004eb0:	4a63      	ldr	r2, [pc, #396]	@ (8005040 <main+0x3d8>)
 8004eb2:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 10;
 8004eb4:	4b63      	ldr	r3, [pc, #396]	@ (8005044 <main+0x3dc>)
 8004eb6:	4a64      	ldr	r2, [pc, #400]	@ (8005048 <main+0x3e0>)
 8004eb8:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 10;
 8004eba:	4b64      	ldr	r3, [pc, #400]	@ (800504c <main+0x3e4>)
 8004ebc:	4a62      	ldr	r2, [pc, #392]	@ (8005048 <main+0x3e0>)
 8004ebe:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 8004ec0:	4b63      	ldr	r3, [pc, #396]	@ (8005050 <main+0x3e8>)
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8004ec8:	4b62      	ldr	r3, [pc, #392]	@ (8005054 <main+0x3ec>)
 8004eca:	4a63      	ldr	r2, [pc, #396]	@ (8005058 <main+0x3f0>)
 8004ecc:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8004ece:	4b63      	ldr	r3, [pc, #396]	@ (800505c <main+0x3f4>)
 8004ed0:	4a63      	ldr	r2, [pc, #396]	@ (8005060 <main+0x3f8>)
 8004ed2:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8004ed4:	4b63      	ldr	r3, [pc, #396]	@ (8005064 <main+0x3fc>)
 8004ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8005040 <main+0x3d8>)
 8004ed8:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 5.5;
 8004eda:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <main+0x2c4>)
 8004edc:	4a62      	ldr	r2, [pc, #392]	@ (8005068 <main+0x400>)
 8004ede:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 6;//5
 8004ee0:	4b16      	ldr	r3, [pc, #88]	@ (8004f3c <main+0x2d4>)
 8004ee2:	4a62      	ldr	r2, [pc, #392]	@ (800506c <main+0x404>)
 8004ee4:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 5;
 8004ee6:	4b19      	ldr	r3, [pc, #100]	@ (8004f4c <main+0x2e4>)
 8004ee8:	4a55      	ldr	r2, [pc, #340]	@ (8005040 <main+0x3d8>)
 8004eea:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 9;//8
 8004eec:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <main+0x2cc>)
 8004eee:	4a60      	ldr	r2, [pc, #384]	@ (8005070 <main+0x408>)
 8004ef0:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 8;//10
 8004ef2:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <main+0x2dc>)
 8004ef4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004ef8:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8004efa:	4b16      	ldr	r3, [pc, #88]	@ (8004f54 <main+0x2ec>)
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 30;//25
 8004f02:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <main+0x2d0>)
 8004f04:	4a54      	ldr	r2, [pc, #336]	@ (8005058 <main+0x3f0>)
 8004f06:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 20;
 8004f08:	4b0f      	ldr	r3, [pc, #60]	@ (8004f48 <main+0x2e0>)
 8004f0a:	4a55      	ldr	r2, [pc, #340]	@ (8005060 <main+0x3f8>)
 8004f0c:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 8004f0e:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <main+0x2f0>)
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8004f16:	4b45      	ldr	r3, [pc, #276]	@ (800502c <main+0x3c4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a56      	ldr	r2, [pc, #344]	@ (8005074 <main+0x40c>)
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e0ab      	b.n	8005078 <main+0x410>
 8004f20:	58021800 	.word	0x58021800
 8004f24:	00000074 	.word	0x00000074
 8004f28:	0000419c 	.word	0x0000419c
 8004f2c:	000040cc 	.word	0x000040cc
 8004f30:	000040f0 	.word	0x000040f0
 8004f34:	000040d8 	.word	0x000040d8
 8004f38:	000040e4 	.word	0x000040e4
 8004f3c:	000040d0 	.word	0x000040d0
 8004f40:	00004104 	.word	0x00004104
 8004f44:	000040dc 	.word	0x000040dc
 8004f48:	000040e8 	.word	0x000040e8
 8004f4c:	000040d4 	.word	0x000040d4
 8004f50:	00004118 	.word	0x00004118
 8004f54:	000040e0 	.word	0x000040e0
 8004f58:	000040ec 	.word	0x000040ec
 8004f5c:	00000018 	.word	0x00000018
 8004f60:	0000001c 	.word	0x0000001c
 8004f64:	00000020 	.word	0x00000020
 8004f68:	00000024 	.word	0x00000024
 8004f6c:	00000028 	.word	0x00000028
 8004f70:	0000002c 	.word	0x0000002c
 8004f74:	00000058 	.word	0x00000058
 8004f78:	0000006c 	.word	0x0000006c
 8004f7c:	00000070 	.word	0x00000070
 8004f80:	00000078 	.word	0x00000078
 8004f84:	000000dc 	.word	0x000000dc
 8004f88:	000000e0 	.word	0x000000e0
 8004f8c:	000000e4 	.word	0x000000e4
 8004f90:	000000e8 	.word	0x000000e8
 8004f94:	00004050 	.word	0x00004050
 8004f98:	00004054 	.word	0x00004054
 8004f9c:	00004058 	.word	0x00004058
 8004fa0:	0000405c 	.word	0x0000405c
 8004fa4:	0000405e 	.word	0x0000405e
 8004fa8:	00004074 	.word	0x00004074
 8004fac:	00004076 	.word	0x00004076
 8004fb0:	00004084 	.word	0x00004084
 8004fb4:	00004088 	.word	0x00004088
 8004fb8:	0000408c 	.word	0x0000408c
 8004fbc:	00004090 	.word	0x00004090
 8004fc0:	00004094 	.word	0x00004094
 8004fc4:	00004098 	.word	0x00004098
 8004fc8:	0000409c 	.word	0x0000409c
 8004fcc:	000040a0 	.word	0x000040a0
 8004fd0:	000040a4 	.word	0x000040a4
 8004fd4:	000040a8 	.word	0x000040a8
 8004fd8:	000040ac 	.word	0x000040ac
 8004fdc:	000040b0 	.word	0x000040b0
 8004fe0:	0000418c 	.word	0x0000418c
 8004fe4:	0000418e 	.word	0x0000418e
 8004fe8:	00004190 	.word	0x00004190
 8004fec:	00004192 	.word	0x00004192
 8004ff0:	00004194 	.word	0x00004194
 8004ff4:	00004196 	.word	0x00004196
 8004ff8:	00004198 	.word	0x00004198
 8004ffc:	0000419a 	.word	0x0000419a
 8005000:	000041be 	.word	0x000041be
 8005004:	000041bf 	.word	0x000041bf
 8005008:	000041c4 	.word	0x000041c4
 800500c:	000041c8 	.word	0x000041c8
 8005010:	000041d0 	.word	0x000041d0
 8005014:	000041d4 	.word	0x000041d4
 8005018:	000041d5 	.word	0x000041d5
 800501c:	000041d6 	.word	0x000041d6
 8005020:	000041d8 	.word	0x000041d8
 8005024:	000041dc 	.word	0x000041dc
 8005028:	00004060 	.word	0x00004060
 800502c:	0000412c 	.word	0x0000412c
 8005030:	41600000 	.word	0x41600000
 8005034:	00004130 	.word	0x00004130
 8005038:	41400000 	.word	0x41400000
 800503c:	00004134 	.word	0x00004134
 8005040:	40a00000 	.word	0x40a00000
 8005044:	00004138 	.word	0x00004138
 8005048:	41200000 	.word	0x41200000
 800504c:	0000413c 	.word	0x0000413c
 8005050:	00004140 	.word	0x00004140
 8005054:	00004144 	.word	0x00004144
 8005058:	41f00000 	.word	0x41f00000
 800505c:	00004148 	.word	0x00004148
 8005060:	41a00000 	.word	0x41a00000
 8005064:	0000414c 	.word	0x0000414c
 8005068:	40b00000 	.word	0x40b00000
 800506c:	40c00000 	.word	0x40c00000
 8005070:	41100000 	.word	0x41100000
 8005074:	00004150 	.word	0x00004150
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005078:	4ba8      	ldr	r3, [pc, #672]	@ (800531c <main+0x6b4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4aa8      	ldr	r2, [pc, #672]	@ (8005320 <main+0x6b8>)
 800507e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005080:	4ba8      	ldr	r3, [pc, #672]	@ (8005324 <main+0x6bc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4aa6      	ldr	r2, [pc, #664]	@ (8005320 <main+0x6b8>)
 8005086:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005088:	4ba7      	ldr	r3, [pc, #668]	@ (8005328 <main+0x6c0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4aa7      	ldr	r2, [pc, #668]	@ (800532c <main+0x6c4>)
 800508e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005090:	4ba7      	ldr	r3, [pc, #668]	@ (8005330 <main+0x6c8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4aa5      	ldr	r2, [pc, #660]	@ (800532c <main+0x6c4>)
 8005096:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005098:	4ba6      	ldr	r3, [pc, #664]	@ (8005334 <main+0x6cc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4aa3      	ldr	r2, [pc, #652]	@ (800532c <main+0x6c4>)
 800509e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 80050a0:	4ba5      	ldr	r3, [pc, #660]	@ (8005338 <main+0x6d0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4aa5      	ldr	r2, [pc, #660]	@ (800533c <main+0x6d4>)
 80050a6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80050a8:	4ba5      	ldr	r3, [pc, #660]	@ (8005340 <main+0x6d8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4aa3      	ldr	r2, [pc, #652]	@ (800533c <main+0x6d4>)
 80050ae:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80050b0:	4ba4      	ldr	r3, [pc, #656]	@ (8005344 <main+0x6dc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4aa1      	ldr	r2, [pc, #644]	@ (800533c <main+0x6d4>)
 80050b6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80050b8:	4ba3      	ldr	r3, [pc, #652]	@ (8005348 <main+0x6e0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4aa3      	ldr	r2, [pc, #652]	@ (800534c <main+0x6e4>)
 80050be:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80050c0:	4ba3      	ldr	r3, [pc, #652]	@ (8005350 <main+0x6e8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4aa1      	ldr	r2, [pc, #644]	@ (800534c <main+0x6e4>)
 80050c6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80050c8:	4ba2      	ldr	r3, [pc, #648]	@ (8005354 <main+0x6ec>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a9f      	ldr	r2, [pc, #636]	@ (800534c <main+0x6e4>)
 80050ce:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80050d0:	4ba1      	ldr	r3, [pc, #644]	@ (8005358 <main+0x6f0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4aa1      	ldr	r2, [pc, #644]	@ (800535c <main+0x6f4>)
 80050d6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80050d8:	4ba1      	ldr	r3, [pc, #644]	@ (8005360 <main+0x6f8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a9f      	ldr	r2, [pc, #636]	@ (800535c <main+0x6f4>)
 80050de:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80050e0:	4ba0      	ldr	r3, [pc, #640]	@ (8005364 <main+0x6fc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a9d      	ldr	r2, [pc, #628]	@ (800535c <main+0x6f4>)
 80050e6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 80050e8:	4b9f      	ldr	r3, [pc, #636]	@ (8005368 <main+0x700>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a9f      	ldr	r2, [pc, #636]	@ (800536c <main+0x704>)
 80050ee:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 80050f0:	4b9f      	ldr	r3, [pc, #636]	@ (8005370 <main+0x708>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a9d      	ldr	r2, [pc, #628]	@ (800536c <main+0x704>)
 80050f6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80050f8:	4b9e      	ldr	r3, [pc, #632]	@ (8005374 <main+0x70c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a9b      	ldr	r2, [pc, #620]	@ (800536c <main+0x704>)
 80050fe:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 8005100:	4b9d      	ldr	r3, [pc, #628]	@ (8005378 <main+0x710>)
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 8005106:	4b9d      	ldr	r3, [pc, #628]	@ (800537c <main+0x714>)
 8005108:	2200      	movs	r2, #0
 800510a:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 800510c:	4b9c      	ldr	r3, [pc, #624]	@ (8005380 <main+0x718>)
 800510e:	2200      	movs	r2, #0
 8005110:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005112:	4b9c      	ldr	r3, [pc, #624]	@ (8005384 <main+0x71c>)
 8005114:	2200      	movs	r2, #0
 8005116:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005118:	4b9b      	ldr	r3, [pc, #620]	@ (8005388 <main+0x720>)
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005120:	4b99      	ldr	r3, [pc, #612]	@ (8005388 <main+0x720>)
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005128:	4b97      	ldr	r3, [pc, #604]	@ (8005388 <main+0x720>)
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005130:	4b95      	ldr	r3, [pc, #596]	@ (8005388 <main+0x720>)
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005138:	4b93      	ldr	r3, [pc, #588]	@ (8005388 <main+0x720>)
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005140:	4b91      	ldr	r3, [pc, #580]	@ (8005388 <main+0x720>)
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 8005148:	4b90      	ldr	r3, [pc, #576]	@ (800538c <main+0x724>)
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005150:	4b8f      	ldr	r3, [pc, #572]	@ (8005390 <main+0x728>)
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005158:	4b8e      	ldr	r3, [pc, #568]	@ (8005394 <main+0x72c>)
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005160:	4b8d      	ldr	r3, [pc, #564]	@ (8005398 <main+0x730>)
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005168:	4b8c      	ldr	r3, [pc, #560]	@ (800539c <main+0x734>)
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005170:	4b8b      	ldr	r3, [pc, #556]	@ (80053a0 <main+0x738>)
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 8005178:	4b8a      	ldr	r3, [pc, #552]	@ (80053a4 <main+0x73c>)
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 8005180:	4b88      	ldr	r3, [pc, #544]	@ (80053a4 <main+0x73c>)
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 8005188:	4b86      	ldr	r3, [pc, #536]	@ (80053a4 <main+0x73c>)
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 8005190:	4b85      	ldr	r3, [pc, #532]	@ (80053a8 <main+0x740>)
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	4b84      	ldr	r3, [pc, #528]	@ (80053ac <main+0x744>)
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	4b83      	ldr	r3, [pc, #524]	@ (80053b0 <main+0x748>)
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	4b82      	ldr	r3, [pc, #520]	@ (80053b4 <main+0x74c>)
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	4b81      	ldr	r3, [pc, #516]	@ (80053b8 <main+0x750>)
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	4b80      	ldr	r3, [pc, #512]	@ (80053bc <main+0x754>)
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 80051c0:	4b7f      	ldr	r3, [pc, #508]	@ (80053c0 <main+0x758>)
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	4b7e      	ldr	r3, [pc, #504]	@ (80053c4 <main+0x75c>)
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	4b7d      	ldr	r3, [pc, #500]	@ (80053c8 <main+0x760>)
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	4b7c      	ldr	r3, [pc, #496]	@ (80053cc <main+0x764>)
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	4b7b      	ldr	r3, [pc, #492]	@ (80053d0 <main+0x768>)
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	4b7a      	ldr	r3, [pc, #488]	@ (80053d4 <main+0x76c>)
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 80051f0:	4b79      	ldr	r3, [pc, #484]	@ (80053d8 <main+0x770>)
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	4b78      	ldr	r3, [pc, #480]	@ (80053dc <main+0x774>)
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	4b77      	ldr	r3, [pc, #476]	@ (80053e0 <main+0x778>)
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4b76      	ldr	r3, [pc, #472]	@ (80053e4 <main+0x77c>)
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	4b75      	ldr	r3, [pc, #468]	@ (80053e8 <main+0x780>)
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	4b74      	ldr	r3, [pc, #464]	@ (80053ec <main+0x784>)
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 8005220:	4b73      	ldr	r3, [pc, #460]	@ (80053f0 <main+0x788>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 8005226:	4b73      	ldr	r3, [pc, #460]	@ (80053f4 <main+0x78c>)
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 800522e:	4b72      	ldr	r3, [pc, #456]	@ (80053f8 <main+0x790>)
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 8005236:	4b71      	ldr	r3, [pc, #452]	@ (80053fc <main+0x794>)
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 800523e:	4b70      	ldr	r3, [pc, #448]	@ (8005400 <main+0x798>)
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005246:	4a6f      	ldr	r2, [pc, #444]	@ (8005404 <main+0x79c>)
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	4611      	mov	r1, r2
 8005250:	8019      	strh	r1, [r3, #0]
 8005252:	3302      	adds	r3, #2
 8005254:	0c12      	lsrs	r2, r2, #16
 8005256:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8005258:	4a6b      	ldr	r2, [pc, #428]	@ (8005408 <main+0x7a0>)
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	4611      	mov	r1, r2
 8005260:	8019      	strh	r1, [r3, #0]
 8005262:	3302      	adds	r3, #2
 8005264:	0c12      	lsrs	r2, r2, #16
 8005266:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8005268:	2201      	movs	r2, #1
 800526a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800526e:	4867      	ldr	r0, [pc, #412]	@ (800540c <main+0x7a4>)
 8005270:	f009 f8f0 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005274:	2201      	movs	r2, #1
 8005276:	2108      	movs	r1, #8
 8005278:	4865      	ldr	r0, [pc, #404]	@ (8005410 <main+0x7a8>)
 800527a:	f009 f8eb 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_7_1;
 800527e:	2201      	movs	r2, #1
 8005280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005284:	4861      	ldr	r0, [pc, #388]	@ (800540c <main+0x7a4>)
 8005286:	f009 f8e5 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800528a:	2201      	movs	r2, #1
 800528c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005290:	4860      	ldr	r0, [pc, #384]	@ (8005414 <main+0x7ac>)
 8005292:	f009 f8df 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005296:	2201      	movs	r2, #1
 8005298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800529c:	485c      	ldr	r0, [pc, #368]	@ (8005410 <main+0x7a8>)
 800529e:	f009 f8d9 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_Y_1;
 80052a2:	2201      	movs	r2, #1
 80052a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052a8:	485b      	ldr	r0, [pc, #364]	@ (8005418 <main+0x7b0>)
 80052aa:	f009 f8d3 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_R_1;
 80052ae:	2201      	movs	r2, #1
 80052b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052b4:	4858      	ldr	r0, [pc, #352]	@ (8005418 <main+0x7b0>)
 80052b6:	f009 f8cd 	bl	800e454 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80052ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052be:	f003 ff8d 	bl	80091dc <HAL_Delay>
  	LED_G_0;
 80052c2:	2200      	movs	r2, #0
 80052c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052c8:	4851      	ldr	r0, [pc, #324]	@ (8005410 <main+0x7a8>)
 80052ca:	f009 f8c3 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_Y_0;
 80052ce:	2200      	movs	r2, #0
 80052d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052d4:	4850      	ldr	r0, [pc, #320]	@ (8005418 <main+0x7b0>)
 80052d6:	f009 f8bd 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_R_0;
 80052da:	2200      	movs	r2, #0
 80052dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052e0:	484d      	ldr	r0, [pc, #308]	@ (8005418 <main+0x7b0>)
 80052e2:	f009 f8b7 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_5_0;
 80052e6:	2200      	movs	r2, #0
 80052e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052ec:	4847      	ldr	r0, [pc, #284]	@ (800540c <main+0x7a4>)
 80052ee:	f009 f8b1 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_6_0;
 80052f2:	2200      	movs	r2, #0
 80052f4:	2108      	movs	r1, #8
 80052f6:	4846      	ldr	r0, [pc, #280]	@ (8005410 <main+0x7a8>)
 80052f8:	f009 f8ac 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_7_0;
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005302:	4842      	ldr	r0, [pc, #264]	@ (800540c <main+0x7a4>)
 8005304:	f009 f8a6 	bl	800e454 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800530e:	4841      	ldr	r0, [pc, #260]	@ (8005414 <main+0x7ac>)
 8005310:	f009 f8a0 	bl	800e454 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e08a      	b.n	8005430 <main+0x7c8>
 800531a:	bf00      	nop
 800531c:	00004138 	.word	0x00004138
 8005320:	00004150 	.word	0x00004150
 8005324:	00004144 	.word	0x00004144
 8005328:	00004130 	.word	0x00004130
 800532c:	00004164 	.word	0x00004164
 8005330:	0000413c 	.word	0x0000413c
 8005334:	00004148 	.word	0x00004148
 8005338:	00004134 	.word	0x00004134
 800533c:	00004178 	.word	0x00004178
 8005340:	00004140 	.word	0x00004140
 8005344:	0000414c 	.word	0x0000414c
 8005348:	000040cc 	.word	0x000040cc
 800534c:	000040f0 	.word	0x000040f0
 8005350:	000040d8 	.word	0x000040d8
 8005354:	000040e4 	.word	0x000040e4
 8005358:	000040d0 	.word	0x000040d0
 800535c:	00004104 	.word	0x00004104
 8005360:	000040dc 	.word	0x000040dc
 8005364:	000040e8 	.word	0x000040e8
 8005368:	000040d4 	.word	0x000040d4
 800536c:	00004118 	.word	0x00004118
 8005370:	000040e0 	.word	0x000040e0
 8005374:	000040ec 	.word	0x000040ec
 8005378:	00004048 	.word	0x00004048
 800537c:	0000404a 	.word	0x0000404a
 8005380:	0000404c 	.word	0x0000404c
 8005384:	0000404e 	.word	0x0000404e
 8005388:	0000007c 	.word	0x0000007c
 800538c:	000040b4 	.word	0x000040b4
 8005390:	000040b8 	.word	0x000040b8
 8005394:	000040bc 	.word	0x000040bc
 8005398:	000040c0 	.word	0x000040c0
 800539c:	000040c4 	.word	0x000040c4
 80053a0:	000040c8 	.word	0x000040c8
 80053a4:	00000178 	.word	0x00000178
 80053a8:	00000000 	.word	0x00000000
 80053ac:	00000004 	.word	0x00000004
 80053b0:	00000008 	.word	0x00000008
 80053b4:	0000000c 	.word	0x0000000c
 80053b8:	00000010 	.word	0x00000010
 80053bc:	00000014 	.word	0x00000014
 80053c0:	00000018 	.word	0x00000018
 80053c4:	0000001c 	.word	0x0000001c
 80053c8:	00000020 	.word	0x00000020
 80053cc:	00000024 	.word	0x00000024
 80053d0:	00000028 	.word	0x00000028
 80053d4:	0000002c 	.word	0x0000002c
 80053d8:	00000030 	.word	0x00000030
 80053dc:	00000034 	.word	0x00000034
 80053e0:	00000038 	.word	0x00000038
 80053e4:	0000003c 	.word	0x0000003c
 80053e8:	00000040 	.word	0x00000040
 80053ec:	00000044 	.word	0x00000044
 80053f0:	00000174 	.word	0x00000174
 80053f4:	00004078 	.word	0x00004078
 80053f8:	0000407c 	.word	0x0000407c
 80053fc:	00004080 	.word	0x00004080
 8005400:	00004068 	.word	0x00004068
 8005404:	0801e7dc 	.word	0x0801e7dc
 8005408:	0801e7e0 	.word	0x0801e7e0
 800540c:	58020000 	.word	0x58020000
 8005410:	58021000 	.word	0x58021000
 8005414:	58020c00 	.word	0x58020c00
 8005418:	58020400 	.word	0x58020400
  		Old_Data_stack.olddata[i] = 0;
 800541c:	4a9b      	ldr	r2, [pc, #620]	@ (800568c <main+0xa24>)
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005436:	dbf1      	blt.n	800541c <main+0x7b4>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005438:	4b94      	ldr	r3, [pc, #592]	@ (800568c <main+0xa24>)
 800543a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800543e:	2200      	movs	r2, #0
 8005440:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005444:	4b91      	ldr	r3, [pc, #580]	@ (800568c <main+0xa24>)
 8005446:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800544a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800544e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005452:	4b8f      	ldr	r3, [pc, #572]	@ (8005690 <main+0xa28>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005458:	488e      	ldr	r0, [pc, #568]	@ (8005694 <main+0xa2c>)
 800545a:	f010 fdeb 	bl	8016034 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 800545e:	2201      	movs	r2, #1
 8005460:	498b      	ldr	r1, [pc, #556]	@ (8005690 <main+0xa28>)
 8005462:	488d      	ldr	r0, [pc, #564]	@ (8005698 <main+0xa30>)
 8005464:	f004 fc0c 	bl	8009c80 <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005468:	2201      	movs	r2, #1
 800546a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800546e:	488b      	ldr	r0, [pc, #556]	@ (800569c <main+0xa34>)
 8005470:	f008 fff0 	bl	800e454 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 8005474:	bf00      	nop
 8005476:	4b86      	ldr	r3, [pc, #536]	@ (8005690 <main+0xa28>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0fb      	beq.n	8005476 <main+0x80e>

  	}
  	LED_R_0;
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005484:	4885      	ldr	r0, [pc, #532]	@ (800569c <main+0xa34>)
 8005486:	f008 ffe5 	bl	800e454 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 800548a:	f7fe fce5 	bl	8003e58 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 800548e:	2104      	movs	r1, #4
 8005490:	4883      	ldr	r0, [pc, #524]	@ (80056a0 <main+0xa38>)
 8005492:	f010 ff2b 	bl	80162ec <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005496:	2108      	movs	r1, #8
 8005498:	4881      	ldr	r0, [pc, #516]	@ (80056a0 <main+0xa38>)
 800549a:	f010 ff27 	bl	80162ec <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800549e:	210c      	movs	r1, #12
 80054a0:	487f      	ldr	r0, [pc, #508]	@ (80056a0 <main+0xa38>)
 80054a2:	f010 ff23 	bl	80162ec <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 80054a6:	4b7f      	ldr	r3, [pc, #508]	@ (80056a4 <main+0xa3c>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fe9f 	bl	80071f0 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80054b2:	4b7c      	ldr	r3, [pc, #496]	@ (80056a4 <main+0xa3c>)
 80054b4:	8a9b      	ldrh	r3, [r3, #20]
 80054b6:	2b07      	cmp	r3, #7
 80054b8:	d107      	bne.n	80054ca <main+0x862>
  	{
  		LED_R_1;
 80054ba:	2201      	movs	r2, #1
 80054bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054c0:	4876      	ldr	r0, [pc, #472]	@ (800569c <main+0xa34>)
 80054c2:	f008 ffc7 	bl	800e454 <HAL_GPIO_WritePin>
  		while(1){
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <main+0x85e>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80054ca:	4b76      	ldr	r3, [pc, #472]	@ (80056a4 <main+0xa3c>)
 80054cc:	8a9b      	ldrh	r3, [r3, #20]
 80054ce:	2b09      	cmp	r3, #9
 80054d0:	d107      	bne.n	80054e2 <main+0x87a>
  		LED_R_1;
 80054d2:	2201      	movs	r2, #1
 80054d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054d8:	4870      	ldr	r0, [pc, #448]	@ (800569c <main+0xa34>)
 80054da:	f008 ffbb 	bl	800e454 <HAL_GPIO_WritePin>
  		while(1){
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <main+0x876>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80054e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054e6:	486d      	ldr	r0, [pc, #436]	@ (800569c <main+0xa34>)
 80054e8:	f008 ff9c 	bl	800e424 <HAL_GPIO_ReadPin>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	4b6d      	ldr	r3, [pc, #436]	@ (80056a8 <main+0xa40>)
 80054f2:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80054f4:	4b6c      	ldr	r3, [pc, #432]	@ (80056a8 <main+0xa40>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d103      	bne.n	8005504 <main+0x89c>
		SD_enable_Flag = 0;
 80054fc:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <main+0xa40>)
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e002      	b.n	800550a <main+0x8a2>
	}
	else{
		SD_enable_Flag = 1;
 8005504:	4b68      	ldr	r3, [pc, #416]	@ (80056a8 <main+0xa40>)
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 800550a:	4b67      	ldr	r3, [pc, #412]	@ (80056a8 <main+0xa40>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d15f      	bne.n	80055d2 <main+0x96a>
		LED_uSD_1;
 8005512:	2201      	movs	r2, #1
 8005514:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005518:	4864      	ldr	r0, [pc, #400]	@ (80056ac <main+0xa44>)
 800551a:	f008 ff9b 	bl	800e454 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 800551e:	2201      	movs	r2, #1
 8005520:	4963      	ldr	r1, [pc, #396]	@ (80056b0 <main+0xa48>)
 8005522:	4864      	ldr	r0, [pc, #400]	@ (80056b4 <main+0xa4c>)
 8005524:	f017 fe0e 	bl	801d144 <f_mount>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	4b62      	ldr	r3, [pc, #392]	@ (80056b8 <main+0xa50>)
 800552e:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005530:	4862      	ldr	r0, [pc, #392]	@ (80056bc <main+0xa54>)
 8005532:	f018 fa51 	bl	801d9d8 <f_unlink>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	4b5f      	ldr	r3, [pc, #380]	@ (80056b8 <main+0xa50>)
 800553c:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 800553e:	2201      	movs	r2, #1
 8005540:	495b      	ldr	r1, [pc, #364]	@ (80056b0 <main+0xa48>)
 8005542:	485c      	ldr	r0, [pc, #368]	@ (80056b4 <main+0xa4c>)
 8005544:	f017 fdfe 	bl	801d144 <f_mount>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	4b5a      	ldr	r3, [pc, #360]	@ (80056b8 <main+0xa50>)
 800554e:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005550:	220a      	movs	r2, #10
 8005552:	495b      	ldr	r1, [pc, #364]	@ (80056c0 <main+0xa58>)
 8005554:	485b      	ldr	r0, [pc, #364]	@ (80056c4 <main+0xa5c>)
 8005556:	f017 fe3b 	bl	801d1d0 <f_open>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	4b56      	ldr	r3, [pc, #344]	@ (80056b8 <main+0xa50>)
 8005560:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005562:	2200      	movs	r2, #0
 8005564:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005568:	4850      	ldr	r0, [pc, #320]	@ (80056ac <main+0xa44>)
 800556a:	f008 ff73 	bl	800e454 <HAL_GPIO_WritePin>

		LED_uSD_1;
 800556e:	2201      	movs	r2, #1
 8005570:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005574:	484d      	ldr	r0, [pc, #308]	@ (80056ac <main+0xa44>)
 8005576:	f008 ff6d 	bl	800e454 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e007      	b.n	8005590 <main+0x928>
			DataToSendBuffer[i] = 49;
 8005580:	4a51      	ldr	r2, [pc, #324]	@ (80056c8 <main+0xa60>)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	2231      	movs	r2, #49	@ 0x31
 8005588:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	3301      	adds	r3, #1
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	4a4e      	ldr	r2, [pc, #312]	@ (80056cc <main+0xa64>)
 8005594:	4293      	cmp	r3, r2
 8005596:	ddf3      	ble.n	8005580 <main+0x918>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005598:	4b4d      	ldr	r3, [pc, #308]	@ (80056d0 <main+0xa68>)
 800559a:	2281      	movs	r2, #129	@ 0x81
 800559c:	494a      	ldr	r1, [pc, #296]	@ (80056c8 <main+0xa60>)
 800559e:	4849      	ldr	r0, [pc, #292]	@ (80056c4 <main+0xa5c>)
 80055a0:	f017 ffde 	bl	801d560 <f_write>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b43      	ldr	r3, [pc, #268]	@ (80056b8 <main+0xa50>)
 80055aa:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 80055ac:	4845      	ldr	r0, [pc, #276]	@ (80056c4 <main+0xa5c>)
 80055ae:	f018 f9e9 	bl	801d984 <f_close>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b40      	ldr	r3, [pc, #256]	@ (80056b8 <main+0xa50>)
 80055b8:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80055ba:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <main+0xa50>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <main+0x95e>
			while(1){
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <main+0x95a>

			}
		}
		LED_uSD_0;
 80055c6:	2200      	movs	r2, #0
 80055c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055cc:	4837      	ldr	r0, [pc, #220]	@ (80056ac <main+0xa44>)
 80055ce:	f008 ff41 	bl	800e454 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80055d2:	2201      	movs	r2, #1
 80055d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055d8:	483e      	ldr	r0, [pc, #248]	@ (80056d4 <main+0xa6c>)
 80055da:	f008 ff3b 	bl	800e454 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80055de:	483e      	ldr	r0, [pc, #248]	@ (80056d8 <main+0xa70>)
 80055e0:	f7fb fde0 	bl	80011a4 <MPU6050_INIT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d107      	bne.n	80055fa <main+0x992>
			LED_R_1;
 80055ea:	2201      	movs	r2, #1
 80055ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055f0:	482a      	ldr	r0, [pc, #168]	@ (800569c <main+0xa34>)
 80055f2:	f008 ff2f 	bl	800e454 <HAL_GPIO_WritePin>
			while(1){
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <main+0x98e>
			}
		}
		LED_Y_1;
 80055fa:	2201      	movs	r2, #1
 80055fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005600:	4826      	ldr	r0, [pc, #152]	@ (800569c <main+0xa34>)
 8005602:	f008 ff27 	bl	800e454 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 8005606:	eddf 7a35 	vldr	s15, [pc, #212]	@ 80056dc <main+0xa74>
 800560a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80056e0 <main+0xa78>
 800560e:	4b35      	ldr	r3, [pc, #212]	@ (80056e4 <main+0xa7c>)
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	4b35      	ldr	r3, [pc, #212]	@ (80056e8 <main+0xa80>)
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	eef0 0a47 	vmov.f32	s1, s14
 800561a:	eeb0 0a67 	vmov.f32	s0, s15
 800561e:	4b33      	ldr	r3, [pc, #204]	@ (80056ec <main+0xa84>)
 8005620:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <main+0xa88>)
 8005622:	4934      	ldr	r1, [pc, #208]	@ (80056f4 <main+0xa8c>)
 8005624:	4834      	ldr	r0, [pc, #208]	@ (80056f8 <main+0xa90>)
 8005626:	f7fb fe87 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005630:	481a      	ldr	r0, [pc, #104]	@ (800569c <main+0xa34>)
 8005632:	f008 ff0f 	bl	800e454 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005636:	4828      	ldr	r0, [pc, #160]	@ (80056d8 <main+0xa70>)
 8005638:	f7fb f84a 	bl	80006d0 <BMP180_init>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <main+0x9ea>
			LED_R_1;
 8005642:	2201      	movs	r2, #1
 8005644:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005648:	4814      	ldr	r0, [pc, #80]	@ (800569c <main+0xa34>)
 800564a:	f008 ff03 	bl	800e454 <HAL_GPIO_WritePin>
			while(1){
 800564e:	bf00      	nop
 8005650:	e7fd      	b.n	800564e <main+0x9e6>
			}
		}
		LED_Y_1;
 8005652:	2201      	movs	r2, #1
 8005654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005658:	4810      	ldr	r0, [pc, #64]	@ (800569c <main+0xa34>)
 800565a:	f008 fefb 	bl	800e454 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 800565e:	4827      	ldr	r0, [pc, #156]	@ (80056fc <main+0xa94>)
 8005660:	f7fb fb88 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005664:	2200      	movs	r2, #0
 8005666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800566a:	480c      	ldr	r0, [pc, #48]	@ (800569c <main+0xa34>)
 800566c:	f008 fef2 	bl	800e454 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005670:	4819      	ldr	r0, [pc, #100]	@ (80056d8 <main+0xa70>)
 8005672:	f7fb fcb1 	bl	8000fd8 <HMC5883L_Init>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d141      	bne.n	8005700 <main+0xa98>
			LED_R_1;
 800567c:	2201      	movs	r2, #1
 800567e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005682:	4806      	ldr	r0, [pc, #24]	@ (800569c <main+0xa34>)
 8005684:	f008 fee6 	bl	800e454 <HAL_GPIO_WritePin>
			while(1){
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <main+0xa20>
 800568c:	0000019c 	.word	0x0000019c
 8005690:	24000eb0 	.word	0x24000eb0
 8005694:	24000464 	.word	0x24000464
 8005698:	240000ac 	.word	0x240000ac
 800569c:	58020400 	.word	0x58020400
 80056a0:	24000380 	.word	0x24000380
 80056a4:	00000178 	.word	0x00000178
 80056a8:	000041cc 	.word	0x000041cc
 80056ac:	58020c00 	.word	0x58020c00
 80056b0:	0801e7c0 	.word	0x0801e7c0
 80056b4:	24000eb4 	.word	0x24000eb4
 80056b8:	24001eec 	.word	0x24001eec
 80056bc:	0801e7c4 	.word	0x0801e7c4
 80056c0:	0801e7d0 	.word	0x0801e7d0
 80056c4:	24001ef0 	.word	0x24001ef0
 80056c8:	24002f28 	.word	0x24002f28
 80056cc:	0001f7e7 	.word	0x0001f7e7
 80056d0:	24002f24 	.word	0x24002f24
 80056d4:	58020000 	.word	0x58020000
 80056d8:	24000198 	.word	0x24000198
 80056dc:	42830000 	.word	0x42830000
 80056e0:	46000000 	.word	0x46000000
 80056e4:	00000044 	.word	0x00000044
 80056e8:	00000040 	.word	0x00000040
 80056ec:	0000003c 	.word	0x0000003c
 80056f0:	00000038 	.word	0x00000038
 80056f4:	00000034 	.word	0x00000034
 80056f8:	00000030 	.word	0x00000030
 80056fc:	000000e4 	.word	0x000000e4
			}
		}
		LED_Y_1;
 8005700:	2201      	movs	r2, #1
 8005702:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005706:	488c      	ldr	r0, [pc, #560]	@ (8005938 <main+0xcd0>)
 8005708:	f008 fea4 	bl	800e454 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 800570c:	f7fb fd14 	bl	8001138 <HMC5883L_Calibration>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	4b89      	ldr	r3, [pc, #548]	@ (800593c <main+0xcd4>)
 8005716:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800571e:	4886      	ldr	r0, [pc, #536]	@ (8005938 <main+0xcd0>)
 8005720:	f008 fe98 	bl	800e454 <HAL_GPIO_WritePin>

		LED_5_0;
 8005724:	2200      	movs	r2, #0
 8005726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800572a:	4885      	ldr	r0, [pc, #532]	@ (8005940 <main+0xcd8>)
 800572c:	f008 fe92 	bl	800e454 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005730:	4b84      	ldr	r3, [pc, #528]	@ (8005944 <main+0xcdc>)
 8005732:	2201      	movs	r2, #1
 8005734:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005736:	4b83      	ldr	r3, [pc, #524]	@ (8005944 <main+0xcdc>)
 8005738:	220c      	movs	r2, #12
 800573a:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 800573c:	4b81      	ldr	r3, [pc, #516]	@ (8005944 <main+0xcdc>)
 800573e:	2200      	movs	r2, #0
 8005740:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005742:	4b80      	ldr	r3, [pc, #512]	@ (8005944 <main+0xcdc>)
 8005744:	2200      	movs	r2, #0
 8005746:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005748:	4b7e      	ldr	r3, [pc, #504]	@ (8005944 <main+0xcdc>)
 800574a:	2200      	movs	r2, #0
 800574c:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 800574e:	4b7d      	ldr	r3, [pc, #500]	@ (8005944 <main+0xcdc>)
 8005750:	2200      	movs	r2, #0
 8005752:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005754:	2201      	movs	r2, #1
 8005756:	2108      	movs	r1, #8
 8005758:	487b      	ldr	r0, [pc, #492]	@ (8005948 <main+0xce0>)
 800575a:	f008 fe7b 	bl	800e454 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 800575e:	487b      	ldr	r0, [pc, #492]	@ (800594c <main+0xce4>)
 8005760:	f7fc ff2a 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	4619      	mov	r1, r3
 800576a:	2000      	movs	r0, #0
 800576c:	f7fc fdc9 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc fdfe 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005778:	f7fc ff72 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 800577c:	f7fc fbec 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e007      	b.n	8005796 <main+0xb2e>
			Txcode[i] = 0;
 8005786:	4a72      	ldr	r2, [pc, #456]	@ (8005950 <main+0xce8>)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3301      	adds	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b1f      	cmp	r3, #31
 800579a:	ddf4      	ble.n	8005786 <main+0xb1e>
		}
		Txcode[22] = 'd';
 800579c:	4b6c      	ldr	r3, [pc, #432]	@ (8005950 <main+0xce8>)
 800579e:	2264      	movs	r2, #100	@ 0x64
 80057a0:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 80057a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <main+0xce8>)
 80057a4:	2272      	movs	r2, #114	@ 0x72
 80057a6:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 80057a8:	4b69      	ldr	r3, [pc, #420]	@ (8005950 <main+0xce8>)
 80057aa:	226f      	movs	r2, #111	@ 0x6f
 80057ac:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 80057ae:	4b68      	ldr	r3, [pc, #416]	@ (8005950 <main+0xce8>)
 80057b0:	226e      	movs	r2, #110	@ 0x6e
 80057b2:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 80057b4:	4b66      	ldr	r3, [pc, #408]	@ (8005950 <main+0xce8>)
 80057b6:	2232      	movs	r2, #50	@ 0x32
 80057b8:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 80057ba:	4b65      	ldr	r3, [pc, #404]	@ (8005950 <main+0xce8>)
 80057bc:	2263      	movs	r2, #99	@ 0x63
 80057be:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 80057c0:	4b63      	ldr	r3, [pc, #396]	@ (8005950 <main+0xce8>)
 80057c2:	2231      	movs	r2, #49	@ 0x31
 80057c4:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 80057c6:	4b62      	ldr	r3, [pc, #392]	@ (8005950 <main+0xce8>)
 80057c8:	227a      	movs	r2, #122	@ 0x7a
 80057ca:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 80057cc:	4b60      	ldr	r3, [pc, #384]	@ (8005950 <main+0xce8>)
 80057ce:	2261      	movs	r2, #97	@ 0x61
 80057d0:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 80057d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005950 <main+0xce8>)
 80057d4:	2237      	movs	r2, #55	@ 0x37
 80057d6:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 80057d8:	485d      	ldr	r0, [pc, #372]	@ (8005950 <main+0xce8>)
 80057da:	f7fc fe7b 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 80057de:	f7fc fe87 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 80057e2:	f7fc fb8d 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80057ea:	e022      	b.n	8005832 <main+0xbca>
			LED_G_1;
 80057ec:	2201      	movs	r2, #1
 80057ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057f2:	4855      	ldr	r0, [pc, #340]	@ (8005948 <main+0xce0>)
 80057f4:	f008 fe2e 	bl	800e454 <HAL_GPIO_WritePin>
			LED_Y_1;
 80057f8:	2201      	movs	r2, #1
 80057fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057fe:	484e      	ldr	r0, [pc, #312]	@ (8005938 <main+0xcd0>)
 8005800:	f008 fe28 	bl	800e454 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005804:	2001      	movs	r0, #1
 8005806:	f003 fce9 	bl	80091dc <HAL_Delay>
			LED_G_0;
 800580a:	2200      	movs	r2, #0
 800580c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005810:	484d      	ldr	r0, [pc, #308]	@ (8005948 <main+0xce0>)
 8005812:	f008 fe1f 	bl	800e454 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005816:	2200      	movs	r2, #0
 8005818:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800581c:	4846      	ldr	r0, [pc, #280]	@ (8005938 <main+0xcd0>)
 800581e:	f008 fe19 	bl	800e454 <HAL_GPIO_WritePin>

			cunter++;
 8005822:	7cfb      	ldrb	r3, [r7, #19]
 8005824:	3301      	adds	r3, #1
 8005826:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b64      	cmp	r3, #100	@ 0x64
 800582c:	d101      	bne.n	8005832 <main+0xbca>
				NVIC_SystemReset();
 800582e:	f7ff fa05 	bl	8004c3c <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005832:	2000      	movs	r0, #0
 8005834:	f7fc fea0 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d0d6      	beq.n	80057ec <main+0xb84>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 800583e:	4845      	ldr	r0, [pc, #276]	@ (8005954 <main+0xcec>)
 8005840:	f7fc fe7e 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005844:	2200      	movs	r2, #0
 8005846:	2108      	movs	r1, #8
 8005848:	483f      	ldr	r0, [pc, #252]	@ (8005948 <main+0xce0>)
 800584a:	f008 fe03 	bl	800e454 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 800584e:	230c      	movs	r3, #12
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e00b      	b.n	800586c <main+0xc04>
			Rxcode[i] = RxData[i];
 8005854:	4a3f      	ldr	r2, [pc, #252]	@ (8005954 <main+0xcec>)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	7819      	ldrb	r1, [r3, #0]
 800585c:	4a3e      	ldr	r2, [pc, #248]	@ (8005958 <main+0xcf0>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	460a      	mov	r2, r1
 8005864:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b15      	cmp	r3, #21
 8005870:	ddf0      	ble.n	8005854 <main+0xbec>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005872:	483a      	ldr	r0, [pc, #232]	@ (800595c <main+0xcf4>)
 8005874:	f7fb fb66 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005878:	2201      	movs	r2, #1
 800587a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800587e:	4830      	ldr	r0, [pc, #192]	@ (8005940 <main+0xcd8>)
 8005880:	f008 fde8 	bl	800e454 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005884:	2201      	movs	r2, #1
 8005886:	4936      	ldr	r1, [pc, #216]	@ (8005960 <main+0xcf8>)
 8005888:	4836      	ldr	r0, [pc, #216]	@ (8005964 <main+0xcfc>)
 800588a:	f012 faad 	bl	8017de8 <HAL_UART_Receive_IT>
		LED_7_0;
 800588e:	2200      	movs	r2, #0
 8005890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005894:	482a      	ldr	r0, [pc, #168]	@ (8005940 <main+0xcd8>)
 8005896:	f008 fddd 	bl	800e454 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 800589a:	4833      	ldr	r0, [pc, #204]	@ (8005968 <main+0xd00>)
 800589c:	f010 fc48 	bl	8016130 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 80058a0:	4b28      	ldr	r3, [pc, #160]	@ (8005944 <main+0xcdc>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 fca2 	bl	80071f0 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80058ac:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <main+0xcdc>)
 80058ae:	8a9b      	ldrh	r3, [r3, #20]
 80058b0:	2b07      	cmp	r3, #7
 80058b2:	d107      	bne.n	80058c4 <main+0xc5c>
	  	{
	  		LED_R_1;
 80058b4:	2201      	movs	r2, #1
 80058b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058ba:	481f      	ldr	r0, [pc, #124]	@ (8005938 <main+0xcd0>)
 80058bc:	f008 fdca 	bl	800e454 <HAL_GPIO_WritePin>
	  		while(1){
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <main+0xc58>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80058c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005944 <main+0xcdc>)
 80058c6:	8a9b      	ldrh	r3, [r3, #20]
 80058c8:	2b09      	cmp	r3, #9
 80058ca:	d107      	bne.n	80058dc <main+0xc74>
	  		LED_R_1;
 80058cc:	2201      	movs	r2, #1
 80058ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058d2:	4819      	ldr	r0, [pc, #100]	@ (8005938 <main+0xcd0>)
 80058d4:	f008 fdbe 	bl	800e454 <HAL_GPIO_WritePin>
	  		while(1){
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <main+0xc70>
	  		}
	  	}



		STARTUP = 0;
 80058dc:	4b23      	ldr	r3, [pc, #140]	@ (800596c <main+0xd04>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 80058e2:	4b18      	ldr	r3, [pc, #96]	@ (8005944 <main+0xcdc>)
 80058e4:	8a9b      	ldrh	r3, [r3, #20]
 80058e6:	2b07      	cmp	r3, #7
 80058e8:	d10a      	bne.n	8005900 <main+0xc98>
	  			LED_R_1;
 80058ea:	2201      	movs	r2, #1
 80058ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058f0:	4811      	ldr	r0, [pc, #68]	@ (8005938 <main+0xcd0>)
 80058f2:	f008 fdaf 	bl	800e454 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 80058f6:	4b13      	ldr	r3, [pc, #76]	@ (8005944 <main+0xcdc>)
 80058f8:	885b      	ldrh	r3, [r3, #2]
 80058fa:	b21a      	sxth	r2, r3
 80058fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005970 <main+0xd08>)
 80058fe:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <main+0xcdc>)
 8005902:	8a9b      	ldrh	r3, [r3, #20]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d103      	bne.n	8005910 <main+0xca8>
	  			thrust_limit = 10000;
 8005908:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <main+0xd08>)
 800590a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800590e:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <main+0xcdc>)
 8005912:	8a9b      	ldrh	r3, [r3, #20]
 8005914:	2b09      	cmp	r3, #9
 8005916:	d13a      	bne.n	800598e <main+0xd26>
	  			ESC_POWER_1;
 8005918:	2201      	movs	r2, #1
 800591a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800591e:	4815      	ldr	r0, [pc, #84]	@ (8005974 <main+0xd0c>)
 8005920:	f008 fd98 	bl	800e454 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005924:	2201      	movs	r2, #1
 8005926:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800592a:	4803      	ldr	r0, [pc, #12]	@ (8005938 <main+0xcd0>)
 800592c:	f008 fd92 	bl	800e454 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005930:	4811      	ldr	r0, [pc, #68]	@ (8005978 <main+0xd10>)
 8005932:	f018 f827 	bl	801d984 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005936:	e026      	b.n	8005986 <main+0xd1e>
 8005938:	58020400 	.word	0x58020400
 800593c:	00000060 	.word	0x00000060
 8005940:	58020000 	.word	0x58020000
 8005944:	00000178 	.word	0x00000178
 8005948:	58021000 	.word	0x58021000
 800594c:	24000274 	.word	0x24000274
 8005950:	00000114 	.word	0x00000114
 8005954:	000000f4 	.word	0x000000f4
 8005958:	00000154 	.word	0x00000154
 800595c:	24000418 	.word	0x24000418
 8005960:	000041c0 	.word	0x000041c0
 8005964:	240004b0 	.word	0x240004b0
 8005968:	240003cc 	.word	0x240003cc
 800596c:	00000074 	.word	0x00000074
 8005970:	0000405e 	.word	0x0000405e
 8005974:	58021800 	.word	0x58021800
 8005978:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 800597c:	200a      	movs	r0, #10
 800597e:	f003 fc2d 	bl	80091dc <HAL_Delay>
	  				Get_batteryvalue();
 8005982:	f7fe fa69 	bl	8003e58 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005986:	4b65      	ldr	r3, [pc, #404]	@ (8005b1c <main+0xeb4>)
 8005988:	8a9b      	ldrh	r3, [r3, #20]
 800598a:	2b09      	cmp	r3, #9
 800598c:	d0f6      	beq.n	800597c <main+0xd14>
	  			}
	  		}

	  		if(commandready == 1){
 800598e:	4b64      	ldr	r3, [pc, #400]	@ (8005b20 <main+0xeb8>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d159      	bne.n	8005a4a <main+0xde2>
	  			LED_7_1;
 8005996:	2201      	movs	r2, #1
 8005998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800599c:	4861      	ldr	r0, [pc, #388]	@ (8005b24 <main+0xebc>)
 800599e:	f008 fd59 	bl	800e454 <HAL_GPIO_WritePin>
	  			interpretcommand();
 80059a2:	f7fc fe7b 	bl	800269c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 80059a6:	4960      	ldr	r1, [pc, #384]	@ (8005b28 <main+0xec0>)
 80059a8:	4860      	ldr	r0, [pc, #384]	@ (8005b2c <main+0xec4>)
 80059aa:	f7fc fec5 	bl	8002738 <executecommand>
	  			LED_7_0;
 80059ae:	2200      	movs	r2, #0
 80059b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059b4:	485b      	ldr	r0, [pc, #364]	@ (8005b24 <main+0xebc>)
 80059b6:	f008 fd4d 	bl	800e454 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 80059ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005b30 <main+0xec8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a5d      	ldr	r2, [pc, #372]	@ (8005b34 <main+0xecc>)
 80059c0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 80059c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b38 <main+0xed0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b34 <main+0xecc>)
 80059c8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 80059ca:	4b5c      	ldr	r3, [pc, #368]	@ (8005b3c <main+0xed4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a59      	ldr	r2, [pc, #356]	@ (8005b34 <main+0xecc>)
 80059d0:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 80059d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b40 <main+0xed8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b44 <main+0xedc>)
 80059d8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80059da:	4b5b      	ldr	r3, [pc, #364]	@ (8005b48 <main+0xee0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a59      	ldr	r2, [pc, #356]	@ (8005b44 <main+0xedc>)
 80059e0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 80059e2:	4b5a      	ldr	r3, [pc, #360]	@ (8005b4c <main+0xee4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a57      	ldr	r2, [pc, #348]	@ (8005b44 <main+0xedc>)
 80059e8:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 80059ea:	4b59      	ldr	r3, [pc, #356]	@ (8005b50 <main+0xee8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a59      	ldr	r2, [pc, #356]	@ (8005b54 <main+0xeec>)
 80059f0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 80059f2:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <main+0xef0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a57      	ldr	r2, [pc, #348]	@ (8005b54 <main+0xeec>)
 80059f8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 80059fa:	4b58      	ldr	r3, [pc, #352]	@ (8005b5c <main+0xef4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a55      	ldr	r2, [pc, #340]	@ (8005b54 <main+0xeec>)
 8005a00:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005a02:	4b57      	ldr	r3, [pc, #348]	@ (8005b60 <main+0xef8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a57      	ldr	r2, [pc, #348]	@ (8005b64 <main+0xefc>)
 8005a08:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005a0a:	4b57      	ldr	r3, [pc, #348]	@ (8005b68 <main+0xf00>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a55      	ldr	r2, [pc, #340]	@ (8005b64 <main+0xefc>)
 8005a10:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005a12:	4b56      	ldr	r3, [pc, #344]	@ (8005b6c <main+0xf04>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a53      	ldr	r2, [pc, #332]	@ (8005b64 <main+0xefc>)
 8005a18:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005a1a:	4b55      	ldr	r3, [pc, #340]	@ (8005b70 <main+0xf08>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a55      	ldr	r2, [pc, #340]	@ (8005b74 <main+0xf0c>)
 8005a20:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005a22:	4b55      	ldr	r3, [pc, #340]	@ (8005b78 <main+0xf10>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a53      	ldr	r2, [pc, #332]	@ (8005b74 <main+0xf0c>)
 8005a28:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005a2a:	4b54      	ldr	r3, [pc, #336]	@ (8005b7c <main+0xf14>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a51      	ldr	r2, [pc, #324]	@ (8005b74 <main+0xf0c>)
 8005a30:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005a32:	4b53      	ldr	r3, [pc, #332]	@ (8005b80 <main+0xf18>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a53      	ldr	r2, [pc, #332]	@ (8005b84 <main+0xf1c>)
 8005a38:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005a3a:	4b53      	ldr	r3, [pc, #332]	@ (8005b88 <main+0xf20>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a51      	ldr	r2, [pc, #324]	@ (8005b84 <main+0xf1c>)
 8005a40:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005a42:	4b52      	ldr	r3, [pc, #328]	@ (8005b8c <main+0xf24>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4f      	ldr	r2, [pc, #316]	@ (8005b84 <main+0xf1c>)
 8005a48:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005a4a:	4b51      	ldr	r3, [pc, #324]	@ (8005b90 <main+0xf28>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d14f      	bne.n	8005af2 <main+0xe8a>
 8005a52:	4b50      	ldr	r3, [pc, #320]	@ (8005b94 <main+0xf2c>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d14b      	bne.n	8005af2 <main+0xe8a>
 8005a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b98 <main+0xf30>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d147      	bne.n	8005af2 <main+0xe8a>
	  			TIM_inte_SD = 0;
 8005a62:	4b4b      	ldr	r3, [pc, #300]	@ (8005b90 <main+0xf28>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005a68:	4b4c      	ldr	r3, [pc, #304]	@ (8005b9c <main+0xf34>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fd55 	bl	800751c <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005a72:	4b4a      	ldr	r3, [pc, #296]	@ (8005b9c <main+0xf34>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d12b      	bne.n	8005ad6 <main+0xe6e>
	  				SD_In_Use = 1;
 8005a7e:	4b48      	ldr	r3, [pc, #288]	@ (8005ba0 <main+0xf38>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005a84:	2201      	movs	r2, #1
 8005a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a8a:	4846      	ldr	r0, [pc, #280]	@ (8005ba4 <main+0xf3c>)
 8005a8c:	f008 fce2 	bl	800e454 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005a90:	2232      	movs	r2, #50	@ 0x32
 8005a92:	4945      	ldr	r1, [pc, #276]	@ (8005ba8 <main+0xf40>)
 8005a94:	4845      	ldr	r0, [pc, #276]	@ (8005bac <main+0xf44>)
 8005a96:	f017 fb9b 	bl	801d1d0 <f_open>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b94 <main+0xf2c>)
 8005aa0:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005aa2:	4b43      	ldr	r3, [pc, #268]	@ (8005bb0 <main+0xf48>)
 8005aa4:	4a43      	ldr	r2, [pc, #268]	@ (8005bb4 <main+0xf4c>)
 8005aa6:	4944      	ldr	r1, [pc, #272]	@ (8005bb8 <main+0xf50>)
 8005aa8:	4840      	ldr	r0, [pc, #256]	@ (8005bac <main+0xf44>)
 8005aaa:	f017 fd59 	bl	801d560 <f_write>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b38      	ldr	r3, [pc, #224]	@ (8005b94 <main+0xf2c>)
 8005ab4:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005ab6:	483d      	ldr	r0, [pc, #244]	@ (8005bac <main+0xf44>)
 8005ab8:	f017 ff64 	bl	801d984 <f_close>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4b34      	ldr	r3, [pc, #208]	@ (8005b94 <main+0xf2c>)
 8005ac2:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005aca:	4836      	ldr	r0, [pc, #216]	@ (8005ba4 <main+0xf3c>)
 8005acc:	f008 fcc2 	bl	800e454 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005ad0:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <main+0xf38>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005ad6:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <main+0xf34>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ade:	d205      	bcs.n	8005aec <main+0xe84>
	  				Mainloop_Number++;
 8005ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b9c <main+0xf34>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b9c <main+0xf34>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e002      	b.n	8005af2 <main+0xe8a>
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005aec:	4b2b      	ldr	r3, [pc, #172]	@ (8005b9c <main+0xf34>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005af2:	4b32      	ldr	r3, [pc, #200]	@ (8005bbc <main+0xf54>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	f47f aef3 	bne.w	80058e2 <main+0xc7a>
	  			LED_R_0;
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b02:	482f      	ldr	r0, [pc, #188]	@ (8005bc0 <main+0xf58>)
 8005b04:	f008 fca6 	bl	800e454 <HAL_GPIO_WritePin>
	  			RGB_LED_For_BAT(MYDRON.batterysize);
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <main+0xeb4>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fb6e 	bl	80071f0 <RGB_LED_For_BAT>
	  			TIM_inte = 0;
 8005b14:	4b29      	ldr	r3, [pc, #164]	@ (8005bbc <main+0xf54>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005b1a:	e6e2      	b.n	80058e2 <main+0xc7a>
 8005b1c:	00000178 	.word	0x00000178
 8005b20:	000041be 	.word	0x000041be
 8005b24:	58020000 	.word	0x58020000
 8005b28:	000041a0 	.word	0x000041a0
 8005b2c:	000041b0 	.word	0x000041b0
 8005b30:	000040cc 	.word	0x000040cc
 8005b34:	000040f0 	.word	0x000040f0
 8005b38:	000040d8 	.word	0x000040d8
 8005b3c:	000040e4 	.word	0x000040e4
 8005b40:	0000412c 	.word	0x0000412c
 8005b44:	00004150 	.word	0x00004150
 8005b48:	00004138 	.word	0x00004138
 8005b4c:	00004144 	.word	0x00004144
 8005b50:	000040d0 	.word	0x000040d0
 8005b54:	00004104 	.word	0x00004104
 8005b58:	000040dc 	.word	0x000040dc
 8005b5c:	000040e8 	.word	0x000040e8
 8005b60:	00004130 	.word	0x00004130
 8005b64:	00004164 	.word	0x00004164
 8005b68:	0000413c 	.word	0x0000413c
 8005b6c:	00004148 	.word	0x00004148
 8005b70:	000040d4 	.word	0x000040d4
 8005b74:	00004118 	.word	0x00004118
 8005b78:	000040e0 	.word	0x000040e0
 8005b7c:	000040ec 	.word	0x000040ec
 8005b80:	00004134 	.word	0x00004134
 8005b84:	00004178 	.word	0x00004178
 8005b88:	00004140 	.word	0x00004140
 8005b8c:	0000414c 	.word	0x0000414c
 8005b90:	0000006c 	.word	0x0000006c
 8005b94:	24001eec 	.word	0x24001eec
 8005b98:	000041cc 	.word	0x000041cc
 8005b9c:	000041c4 	.word	0x000041c4
 8005ba0:	000041c8 	.word	0x000041c8
 8005ba4:	58020c00 	.word	0x58020c00
 8005ba8:	0801e7d0 	.word	0x0801e7d0
 8005bac:	24001ef0 	.word	0x24001ef0
 8005bb0:	24002f24 	.word	0x24002f24
 8005bb4:	0001f7e8 	.word	0x0001f7e8
 8005bb8:	24002f28 	.word	0x24002f28
 8005bbc:	00000070 	.word	0x00000070
 8005bc0:	58020400 	.word	0x58020400

08005bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b09c      	sub	sp, #112	@ 0x70
 8005bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bce:	224c      	movs	r2, #76	@ 0x4c
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f018 f8ce 	bl	801dd74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	2220      	movs	r2, #32
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f018 f8c8 	bl	801dd74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005be4:	2002      	movs	r0, #2
 8005be6:	f00b f8e7 	bl	8010db8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005bea:	2300      	movs	r3, #0
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <SystemClock_Config+0xe0>)
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <SystemClock_Config+0xe0>)
 8005bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005bf8:	6193      	str	r3, [r2, #24]
 8005bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005ca4 <SystemClock_Config+0xe0>)
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005c06:	bf00      	nop
 8005c08:	4b26      	ldr	r3, [pc, #152]	@ (8005ca4 <SystemClock_Config+0xe0>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c14:	d1f8      	bne.n	8005c08 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005c16:	2311      	movs	r3, #17
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005c20:	2380      	movs	r3, #128	@ 0x80
 8005c22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005c24:	2310      	movs	r3, #16
 8005c26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005c30:	2303      	movs	r3, #3
 8005c32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005c34:	2344      	movs	r3, #68	@ 0x44
 8005c36:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005c40:	2302      	movs	r3, #2
 8005c42:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005c44:	230c      	movs	r3, #12
 8005c46:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005c4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f00b f8e8 	bl	8010e2c <HAL_RCC_OscConfig>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005c62:	f001 ff51 	bl	8007b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c66:	233f      	movs	r3, #63	@ 0x3f
 8005c68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005c72:	2308      	movs	r3, #8
 8005c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005c76:	2340      	movs	r3, #64	@ 0x40
 8005c78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005c7a:	2340      	movs	r3, #64	@ 0x40
 8005c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005c84:	2340      	movs	r3, #64	@ 0x40
 8005c86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	2103      	movs	r1, #3
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f00b fca7 	bl	80115e0 <HAL_RCC_ClockConfig>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005c98:	f001 ff36 	bl	8007b08 <Error_Handler>
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3770      	adds	r7, #112	@ 0x70
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	58024800 	.word	0x58024800

08005ca8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b0ae      	sub	sp, #184	@ 0xb8
 8005cac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cae:	463b      	mov	r3, r7
 8005cb0:	22b8      	movs	r2, #184	@ 0xb8
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f018 f85d 	bl	801dd74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005cba:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005cc6:	2316      	movs	r3, #22
 8005cc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005cca:	23c0      	movs	r3, #192	@ 0xc0
 8005ccc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005cde:	2320      	movs	r3, #32
 8005ce0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f00b ffff 	bl	8011cf8 <HAL_RCCEx_PeriphCLKConfig>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005d00:	f001 ff02 	bl	8007b08 <Error_Handler>
  }
}
 8005d04:	bf00      	nop
 8005d06:	37b8      	adds	r7, #184	@ 0xb8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a87      	ldr	r2, [pc, #540]	@ (8005f34 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	f040 8107 	bne.w	8005f2c <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		TIM_inte_SD = 1;
 8005d1e:	4b86      	ldr	r3, [pc, #536]	@ (8005f38 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005d24:	4b85      	ldr	r3, [pc, #532]	@ (8005f3c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005d2a:	4b85      	ldr	r3, [pc, #532]	@ (8005f40 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4a83      	ldr	r2, [pc, #524]	@ (8005f40 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005d32:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 50ms
 8005d34:	4b83      	ldr	r3, [pc, #524]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10d      	bne.n	8005d58 <HAL_TIM_PeriodElapsedCallback+0x4c>
			LED_5_1;
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d42:	4881      	ldr	r0, [pc, #516]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d44:	f008 fb86 	bl	800e454 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005d48:	f7fa fd92 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d52:	487d      	ldr	r0, [pc, #500]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d54:	f008 fb7e 	bl	800e454 <HAL_GPIO_WritePin>
		}

		if(i == 10){//2
 8005d58:	4b7a      	ldr	r3, [pc, #488]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b0a      	cmp	r3, #10
 8005d5e:	d10d      	bne.n	8005d7c <HAL_TIM_PeriodElapsedCallback+0x70>
			LED_5_1;
 8005d60:	2201      	movs	r2, #1
 8005d62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d66:	4878      	ldr	r0, [pc, #480]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d68:	f008 fb74 	bl	800e454 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005d6c:	f7fa fd6a 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005d70:	2200      	movs	r2, #0
 8005d72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d76:	4874      	ldr	r0, [pc, #464]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d78:	f008 fb6c 	bl	800e454 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8005d7c:	4b71      	ldr	r3, [pc, #452]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b24      	cmp	r3, #36	@ 0x24
 8005d82:	d10d      	bne.n	8005da0 <HAL_TIM_PeriodElapsedCallback+0x94>
			LED_5_1;
 8005d84:	2201      	movs	r2, #1
 8005d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d8a:	486f      	ldr	r0, [pc, #444]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d8c:	f008 fb62 	bl	800e454 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005d90:	f7fb f9a0 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005d94:	2200      	movs	r2, #0
 8005d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d9a:	486b      	ldr	r0, [pc, #428]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d9c:	f008 fb5a 	bl	800e454 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8005da0:	4b68      	ldr	r3, [pc, #416]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b26      	cmp	r3, #38	@ 0x26
 8005da6:	d10e      	bne.n	8005dc6 <HAL_TIM_PeriodElapsedCallback+0xba>
			LED_6_1;
 8005da8:	2201      	movs	r2, #1
 8005daa:	2108      	movs	r1, #8
 8005dac:	4867      	ldr	r0, [pc, #412]	@ (8005f4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005dae:	f008 fb51 	bl	800e454 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8005db2:	f7fc f8d1 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8005db6:	4b66      	ldr	r3, [pc, #408]	@ (8005f50 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2108      	movs	r1, #8
 8005dc0:	4862      	ldr	r0, [pc, #392]	@ (8005f4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005dc2:	f008 fb47 	bl	800e454 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b28      	cmp	r3, #40	@ 0x28
 8005dcc:	d14c      	bne.n	8005e68 <HAL_TIM_PeriodElapsedCallback+0x15c>
			ampritude = startpres - pres;
 8005dce:	4b61      	ldr	r3, [pc, #388]	@ (8005f54 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005dd0:	ed93 7a00 	vldr	s14, [r3]
 8005dd4:	4b60      	ldr	r3, [pc, #384]	@ (8005f58 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005dd6:	edd3 7a00 	vldr	s15, [r3]
 8005dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dde:	4b5f      	ldr	r3, [pc, #380]	@ (8005f5c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005de0:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8005de4:	f7fb f806 	bl	8000df4 <BMP180_GET_height>
 8005de8:	eef0 7a40 	vmov.f32	s15, s0
 8005dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df0:	ee17 3a90 	vmov	r3, s15
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	b21a      	sxth	r2, r3
 8005df8:	4b59      	ldr	r3, [pc, #356]	@ (8005f60 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005dfa:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8005dfc:	4b58      	ldr	r3, [pc, #352]	@ (8005f60 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005dfe:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8005e02:	2303      	movs	r3, #3
 8005e04:	2200      	movs	r2, #0
 8005e06:	4957      	ldr	r1, [pc, #348]	@ (8005f64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e08:	f001 f919 	bl	800703e <convert_value_to_array>

			Get_batteryvalue();
 8005e0c:	f7fe f824 	bl	8003e58 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8005e10:	4b53      	ldr	r3, [pc, #332]	@ (8005f60 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b218      	sxth	r0, r3
 8005e16:	2306      	movs	r3, #6
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4952      	ldr	r1, [pc, #328]	@ (8005f64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e1c:	f001 f90f 	bl	800703e <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e00b      	b.n	8005e3e <HAL_TIM_PeriodElapsedCallback+0x132>
				TxData[22+i] = Txcode[22+i];
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f103 0216 	add.w	r2, r3, #22
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3316      	adds	r3, #22
 8005e30:	494d      	ldr	r1, [pc, #308]	@ (8005f68 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005e32:	5c89      	ldrb	r1, [r1, r2]
 8005e34:	4a4b      	ldr	r2, [pc, #300]	@ (8005f64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e36:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	ddf0      	ble.n	8005e26 <HAL_TIM_PeriodElapsedCallback+0x11a>
			}
			LED_6_1;
 8005e44:	2201      	movs	r2, #1
 8005e46:	2108      	movs	r1, #8
 8005e48:	4840      	ldr	r0, [pc, #256]	@ (8005f4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e4a:	f008 fb03 	bl	800e454 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8005e4e:	4845      	ldr	r0, [pc, #276]	@ (8005f64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e50:	f7fc fb40 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8005e54:	2201      	movs	r2, #1
 8005e56:	2140      	movs	r1, #64	@ 0x40
 8005e58:	4844      	ldr	r0, [pc, #272]	@ (8005f6c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005e5a:	f008 fafb 	bl	800e454 <HAL_GPIO_WritePin>
			LED_6_0;
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2108      	movs	r1, #8
 8005e62:	483a      	ldr	r0, [pc, #232]	@ (8005f4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e64:	f008 faf6 	bl	800e454 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8005e68:	4b36      	ldr	r3, [pc, #216]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b29      	cmp	r3, #41	@ 0x29
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PeriodElapsedCallback+0x16e>
			NRF24_CE_LOW;
 8005e70:	2200      	movs	r2, #0
 8005e72:	2140      	movs	r1, #64	@ 0x40
 8005e74:	483d      	ldr	r0, [pc, #244]	@ (8005f6c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005e76:	f008 faed 	bl	800e454 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8005e7a:	4b32      	ldr	r3, [pc, #200]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b29      	cmp	r3, #41	@ 0x29
 8005e80:	dd16      	ble.n	8005eb0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
			if(nRF24_Rx_Mode != 1){
 8005e82:	4b33      	ldr	r3, [pc, #204]	@ (8005f50 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d012      	beq.n	8005eb0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8005e8a:	f7fc f8e6 	bl	800205a <nRF24_ReadStatus>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8005e98:	f7fc f8df 	bl	800205a <nRF24_ReadStatus>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIM_PeriodElapsedCallback+0x1a4>
					nRF24_RX_Mode();
 8005ea6:	f7fc f82b 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8005eaa:	4b29      	ldr	r3, [pc, #164]	@ (8005f50 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005eb6:	4824      	ldr	r0, [pc, #144]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005eb8:	f008 facc 	bl	800e454 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005ebc:	f7fb fc48 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ec6:	4820      	ldr	r0, [pc, #128]	@ (8005f48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005ec8:	f008 fac4 	bl	800e454 <HAL_GPIO_WritePin>

		if(i == 100){
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b64      	cmp	r3, #100	@ 0x64
 8005ed2:	d103      	bne.n	8005edc <HAL_TIM_PeriodElapsedCallback+0x1d0>
			i = 0;
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e004      	b.n	8005ee6 <HAL_TIM_PeriodElapsedCallback+0x1da>
		}
		else{
			i++;
 8005edc:	4b19      	ldr	r3, [pc, #100]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a18      	ldr	r2, [pc, #96]	@ (8005f44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ee4:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8005ee6:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eee:	d308      	bcc.n	8005f02 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			LED_R_1;
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ef6:	481d      	ldr	r0, [pc, #116]	@ (8005f6c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005ef8:	f008 faac 	bl	800e454 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8005efc:	4b18      	ldr	r3, [pc, #96]	@ (8005f60 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005efe:	2202      	movs	r2, #2
 8005f00:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8005f02:	4b17      	ldr	r3, [pc, #92]	@ (8005f60 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f04:	8a5b      	ldrh	r3, [r3, #18]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d110      	bne.n	8005f2c <HAL_TIM_PeriodElapsedCallback+0x220>
			wanted_rool = 0;
 8005f0a:	4b19      	ldr	r3, [pc, #100]	@ (8005f70 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8005f1a:	4b17      	ldr	r3, [pc, #92]	@ (8005f78 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8005f22:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	4b14      	ldr	r3, [pc, #80]	@ (8005f7c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005f2a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	240003cc 	.word	0x240003cc
 8005f38:	0000006c 	.word	0x0000006c
 8005f3c:	00000070 	.word	0x00000070
 8005f40:	00000078 	.word	0x00000078
 8005f44:	000041d8 	.word	0x000041d8
 8005f48:	58020000 	.word	0x58020000
 8005f4c:	58021000 	.word	0x58021000
 8005f50:	00000174 	.word	0x00000174
 8005f54:	000000e4 	.word	0x000000e4
 8005f58:	000000e0 	.word	0x000000e0
 8005f5c:	000000e8 	.word	0x000000e8
 8005f60:	00000178 	.word	0x00000178
 8005f64:	00000134 	.word	0x00000134
 8005f68:	00000114 	.word	0x00000114
 8005f6c:	58020400 	.word	0x58020400
 8005f70:	0000406c 	.word	0x0000406c
 8005f74:	00004068 	.word	0x00004068
 8005f78:	00004070 	.word	0x00004070
 8005f7c:	0000405c 	.word	0x0000405c

08005f80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f90:	f040 812c 	bne.w	80061ec <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8005f94:	4b97      	ldr	r3, [pc, #604]	@ (80061f4 <HAL_GPIO_EXTI_Callback+0x274>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8127 	bne.w	80061ec <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	2108      	movs	r1, #8
 8005fa2:	4895      	ldr	r0, [pc, #596]	@ (80061f8 <HAL_GPIO_EXTI_Callback+0x278>)
 8005fa4:	f008 fa56 	bl	800e454 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8005fa8:	4894      	ldr	r0, [pc, #592]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 8005faa:	f7fc fac9 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2108      	movs	r1, #8
 8005fb2:	4891      	ldr	r0, [pc, #580]	@ (80061f8 <HAL_GPIO_EXTI_Callback+0x278>)
 8005fb4:	f008 fa4e 	bl	800e454 <HAL_GPIO_WritePin>


			LED_Y_1;
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005fbe:	4890      	ldr	r0, [pc, #576]	@ (8006200 <HAL_GPIO_EXTI_Callback+0x280>)
 8005fc0:	f008 fa48 	bl	800e454 <HAL_GPIO_WritePin>

			loopnum = 0;
 8005fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e011      	b.n	8005ff4 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	4a89      	ldr	r2, [pc, #548]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 8005fd6:	5cd2      	ldrb	r2, [r2, r3]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	498a      	ldr	r1, [pc, #552]	@ (8006208 <HAL_GPIO_EXTI_Callback+0x288>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d104      	bne.n	8005fee <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8005fe4:	4b87      	ldr	r3, [pc, #540]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4a86      	ldr	r2, [pc, #536]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fec:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b09      	cmp	r3, #9
 8005ff8:	ddea      	ble.n	8005fd0 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8005ffa:	4b82      	ldr	r3, [pc, #520]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x284>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b0a      	cmp	r3, #10
 8006000:	f040 80e3 	bne.w	80061ca <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006004:	2302      	movs	r3, #2
 8006006:	2200      	movs	r2, #0
 8006008:	4980      	ldr	r1, [pc, #512]	@ (800620c <HAL_GPIO_EXTI_Callback+0x28c>)
 800600a:	487c      	ldr	r0, [pc, #496]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 800600c:	f000 ffc6 	bl	8006f9c <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006010:	2305      	movs	r3, #5
 8006012:	2203      	movs	r2, #3
 8006014:	497e      	ldr	r1, [pc, #504]	@ (8006210 <HAL_GPIO_EXTI_Callback+0x290>)
 8006016:	4879      	ldr	r0, [pc, #484]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 8006018:	f000 ffc0 	bl	8006f9c <convert_array_to_value>
				if(wobble_strenght == 1){
 800601c:	4b7d      	ldr	r3, [pc, #500]	@ (8006214 <HAL_GPIO_EXTI_Callback+0x294>)
 800601e:	edd3 7a00 	vldr	s15, [r3]
 8006022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006026:	eef4 7a47 	vcmp.f32	s15, s14
 800602a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602e:	d105      	bne.n	800603c <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 8006030:	2308      	movs	r3, #8
 8006032:	2206      	movs	r2, #6
 8006034:	4978      	ldr	r1, [pc, #480]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 8006036:	4871      	ldr	r0, [pc, #452]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 8006038:	f000 ffb0 	bl	8006f9c <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 800603c:	230b      	movs	r3, #11
 800603e:	2209      	movs	r2, #9
 8006040:	4976      	ldr	r1, [pc, #472]	@ (800621c <HAL_GPIO_EXTI_Callback+0x29c>)
 8006042:	486e      	ldr	r0, [pc, #440]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 8006044:	f000 ffaa 	bl	8006f9c <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 8006048:	4b75      	ldr	r3, [pc, #468]	@ (8006220 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800604a:	2201      	movs	r2, #1
 800604c:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 800604e:	4b6b      	ldr	r3, [pc, #428]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x27c>)
 8006050:	7ddb      	ldrb	r3, [r3, #23]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d11b      	bne.n	800608e <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 8006056:	2201      	movs	r2, #1
 8006058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800605c:	4871      	ldr	r0, [pc, #452]	@ (8006224 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800605e:	f008 f9f9 	bl	800e454 <HAL_GPIO_WritePin>
					LED_R_1;
 8006062:	2201      	movs	r2, #1
 8006064:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006068:	4865      	ldr	r0, [pc, #404]	@ (8006200 <HAL_GPIO_EXTI_Callback+0x280>)
 800606a:	f008 f9f3 	bl	800e454 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 800606e:	4b6e      	ldr	r3, [pc, #440]	@ (8006228 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10b      	bne.n	800608e <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 8006076:	486d      	ldr	r0, [pc, #436]	@ (800622c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006078:	f017 fc84 	bl	801d984 <f_close>
						fresult = f_mount(NULL, "/", 1);
 800607c:	2201      	movs	r2, #1
 800607e:	496c      	ldr	r1, [pc, #432]	@ (8006230 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8006080:	2000      	movs	r0, #0
 8006082:	f017 f85f 	bl	801d144 <f_mount>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	4b6a      	ldr	r3, [pc, #424]	@ (8006234 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800608c:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 800608e:	4b62      	ldr	r3, [pc, #392]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 8006090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006094:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006098:	4293      	cmp	r3, r2
 800609a:	d103      	bne.n	80060a4 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 800609c:	4b60      	ldr	r3, [pc, #384]	@ (8006220 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800609e:	2210      	movs	r2, #16
 80060a0:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 80060a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 80060a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	0092      	lsls	r2, r2, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	b21a      	sxth	r2, r3
 80060b8:	4b57      	ldr	r3, [pc, #348]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 80060ba:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 80060bc:	4b56      	ldr	r3, [pc, #344]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 80060be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006238 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80060c6:	4413      	add	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	b21a      	sxth	r2, r3
 80060cc:	4b52      	ldr	r3, [pc, #328]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 80060ce:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 80060d0:	4b51      	ldr	r3, [pc, #324]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 80060d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da02      	bge.n	80060e0 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 80060da:	4b4f      	ldr	r3, [pc, #316]	@ (8006218 <HAL_GPIO_EXTI_Callback+0x298>)
 80060dc:	2200      	movs	r2, #0
 80060de:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 80060e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006210 <HAL_GPIO_EXTI_Callback+0x290>)
 80060e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060e6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060f2:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800623c <HAL_GPIO_EXTI_Callback+0x2bc>
 80060f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060fe:	ee17 3a90 	vmov	r3, s15
 8006102:	b21a      	sxth	r2, r3
 8006104:	4b4e      	ldr	r3, [pc, #312]	@ (8006240 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006106:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006108:	4b40      	ldr	r3, [pc, #256]	@ (800620c <HAL_GPIO_EXTI_Callback+0x28c>)
 800610a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800610e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800611a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006244 <HAL_GPIO_EXTI_Callback+0x2c4>
 800611e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006126:	ee17 3a90 	vmov	r3, s15
 800612a:	b21a      	sxth	r2, r3
 800612c:	4b46      	ldr	r3, [pc, #280]	@ (8006248 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800612e:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 8006130:	4b3a      	ldr	r3, [pc, #232]	@ (800621c <HAL_GPIO_EXTI_Callback+0x29c>)
 8006132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006136:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006142:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800624c <HAL_GPIO_EXTI_Callback+0x2cc>
 8006146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800614a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800614e:	ee17 3a90 	vmov	r3, s15
 8006152:	b21a      	sxth	r2, r3
 8006154:	4b3e      	ldr	r3, [pc, #248]	@ (8006250 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006156:	801a      	strh	r2, [r3, #0]

				if(wanted_rool_rx >= 30){
 8006158:	4b39      	ldr	r3, [pc, #228]	@ (8006240 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800615a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800615e:	2b1d      	cmp	r3, #29
 8006160:	dd02      	ble.n	8006168 <HAL_GPIO_EXTI_Callback+0x1e8>
					wanted_rool_rx = 30;
 8006162:	4b37      	ldr	r3, [pc, #220]	@ (8006240 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006164:	221e      	movs	r2, #30
 8006166:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_rool_rx <= -30){
 8006168:	4b35      	ldr	r3, [pc, #212]	@ (8006240 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800616a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800616e:	f113 0f1d 	cmn.w	r3, #29
 8006172:	da03      	bge.n	800617c <HAL_GPIO_EXTI_Callback+0x1fc>
					wanted_rool_rx = -30;
 8006174:	4b32      	ldr	r3, [pc, #200]	@ (8006240 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006176:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800617a:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx >= 30){
 800617c:	4b32      	ldr	r3, [pc, #200]	@ (8006248 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800617e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006182:	2b1d      	cmp	r3, #29
 8006184:	dd02      	ble.n	800618c <HAL_GPIO_EXTI_Callback+0x20c>
					wanted_pitch_rx = 30;
 8006186:	4b30      	ldr	r3, [pc, #192]	@ (8006248 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006188:	221e      	movs	r2, #30
 800618a:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx <= -30){
 800618c:	4b2e      	ldr	r3, [pc, #184]	@ (8006248 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800618e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006192:	f113 0f1d 	cmn.w	r3, #29
 8006196:	da03      	bge.n	80061a0 <HAL_GPIO_EXTI_Callback+0x220>
					wanted_pitch_rx = -30;
 8006198:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800619a:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800619e:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx >= 30){
 80061a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006250 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80061a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061a6:	2b1d      	cmp	r3, #29
 80061a8:	dd02      	ble.n	80061b0 <HAL_GPIO_EXTI_Callback+0x230>
					wanted_yaw_rx = 30;
 80061aa:	4b29      	ldr	r3, [pc, #164]	@ (8006250 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80061ac:	221e      	movs	r2, #30
 80061ae:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx <= -30){
 80061b0:	4b27      	ldr	r3, [pc, #156]	@ (8006250 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80061b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061b6:	f113 0f1d 	cmn.w	r3, #29
 80061ba:	da03      	bge.n	80061c4 <HAL_GPIO_EXTI_Callback+0x244>
					wanted_yaw_rx = -30;
 80061bc:	4b24      	ldr	r3, [pc, #144]	@ (8006250 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80061be:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 80061c2:	801a      	strh	r2, [r3, #0]
				}


				NRF_TIM_Inte = 0;
 80061c4:	4b23      	ldr	r3, [pc, #140]	@ (8006254 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 80061ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x284>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd06      	ble.n	80061e0 <HAL_GPIO_EXTI_Callback+0x260>
 80061d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x284>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b09      	cmp	r3, #9
 80061d8:	dc02      	bgt.n	80061e0 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 80061da:	4b11      	ldr	r3, [pc, #68]	@ (8006220 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80061dc:	2203      	movs	r2, #3
 80061de:	825a      	strh	r2, [r3, #18]
	  			}


	  			LED_Y_0;
 80061e0:	2200      	movs	r2, #0
 80061e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061e6:	4806      	ldr	r0, [pc, #24]	@ (8006200 <HAL_GPIO_EXTI_Callback+0x280>)
 80061e8:	f008 f934 	bl	800e454 <HAL_GPIO_WritePin>
		}
	}
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	00000074 	.word	0x00000074
 80061f8:	58021000 	.word	0x58021000
 80061fc:	000000f4 	.word	0x000000f4
 8006200:	58020400 	.word	0x58020400
 8006204:	000041dc 	.word	0x000041dc
 8006208:	00000154 	.word	0x00000154
 800620c:	000041e2 	.word	0x000041e2
 8006210:	000041e0 	.word	0x000041e0
 8006214:	000041d0 	.word	0x000041d0
 8006218:	0000405c 	.word	0x0000405c
 800621c:	000041e4 	.word	0x000041e4
 8006220:	00000178 	.word	0x00000178
 8006224:	58021800 	.word	0x58021800
 8006228:	000041cc 	.word	0x000041cc
 800622c:	24001ef0 	.word	0x24001ef0
 8006230:	0801e7c0 	.word	0x0801e7c0
 8006234:	24001eec 	.word	0x24001eec
 8006238:	ffffd8f0 	.word	0xffffd8f0
 800623c:	3f266666 	.word	0x3f266666
 8006240:	0000404a 	.word	0x0000404a
 8006244:	3f28f5c3 	.word	0x3f28f5c3
 8006248:	00004048 	.word	0x00004048
 800624c:	3f19999a 	.word	0x3f19999a
 8006250:	0000404c 	.word	0x0000404c
 8006254:	00000078 	.word	0x00000078

08006258 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8006260:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <HAL_UART_RxCpltCallback+0xa0>)
 8006268:	7819      	ldrb	r1, [r3, #0]
 800626a:	4b24      	ldr	r3, [pc, #144]	@ (80062fc <HAL_UART_RxCpltCallback+0xa4>)
 800626c:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 800626e:	4b21      	ldr	r3, [pc, #132]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	4b21      	ldr	r3, [pc, #132]	@ (80062fc <HAL_UART_RxCpltCallback+0xa4>)
 8006276:	5c9b      	ldrb	r3, [r3, r2]
 8006278:	2b0d      	cmp	r3, #13
 800627a:	d11a      	bne.n	80062b2 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 800627c:	230a      	movs	r3, #10
 800627e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006280:	f107 010f 	add.w	r1, r7, #15
 8006284:	2364      	movs	r3, #100	@ 0x64
 8006286:	2201      	movs	r2, #1
 8006288:	481d      	ldr	r0, [pc, #116]	@ (8006300 <HAL_UART_RxCpltCallback+0xa8>)
 800628a:	f011 fc8b 	bl	8017ba4 <HAL_UART_Transmit>
		Y = '\r';
 800628e:	230d      	movs	r3, #13
 8006290:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006292:	f107 010f 	add.w	r1, r7, #15
 8006296:	2364      	movs	r3, #100	@ 0x64
 8006298:	2201      	movs	r2, #1
 800629a:	4819      	ldr	r0, [pc, #100]	@ (8006300 <HAL_UART_RxCpltCallback+0xa8>)
 800629c:	f011 fc82 	bl	8017ba4 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 80062a0:	4b14      	ldr	r3, [pc, #80]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b15      	ldr	r3, [pc, #84]	@ (80062fc <HAL_UART_RxCpltCallback+0xa4>)
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 80062ac:	4b15      	ldr	r3, [pc, #84]	@ (8006304 <HAL_UART_RxCpltCallback+0xac>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 80062b2:	4b10      	ldr	r3, [pc, #64]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	4b10      	ldr	r3, [pc, #64]	@ (80062fc <HAL_UART_RxCpltCallback+0xa4>)
 80062ba:	4413      	add	r3, r2
 80062bc:	2201      	movs	r2, #1
 80062be:	4619      	mov	r1, r3
 80062c0:	480f      	ldr	r0, [pc, #60]	@ (8006300 <HAL_UART_RxCpltCallback+0xa8>)
 80062c2:	f011 fcfd 	bl	8017cc0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 80062c6:	2201      	movs	r2, #1
 80062c8:	490b      	ldr	r1, [pc, #44]	@ (80062f8 <HAL_UART_RxCpltCallback+0xa0>)
 80062ca:	480d      	ldr	r0, [pc, #52]	@ (8006300 <HAL_UART_RxCpltCallback+0xa8>)
 80062cc:	f011 fd8c 	bl	8017de8 <HAL_UART_Receive_IT>
	command_ch_num++;
 80062d0:	4b08      	ldr	r3, [pc, #32]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 80062da:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 80062dc:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <HAL_UART_RxCpltCallback+0xac>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d102      	bne.n	80062ea <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <HAL_UART_RxCpltCallback+0x9c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
	}
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	000041bf 	.word	0x000041bf
 80062f8:	000041c0 	.word	0x000041c0
 80062fc:	000041b4 	.word	0x000041b4
 8006300:	240004b0 	.word	0x240004b0
 8006304:	000041be 	.word	0x000041be

08006308 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af02      	add	r7, sp, #8
 800630e:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006310:	4bbc      	ldr	r3, [pc, #752]	@ (8006604 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 8595 	bne.w	8006e44 <HAL_I2C_MemRxCpltCallback+0xb3c>
			MPU6050_IRQ = 0;
 800631a:	4bba      	ldr	r3, [pc, #744]	@ (8006604 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006320:	2201      	movs	r2, #1
 8006322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006326:	48b8      	ldr	r0, [pc, #736]	@ (8006608 <HAL_I2C_MemRxCpltCallback+0x300>)
 8006328:	f008 f894 	bl	800e454 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 800632c:	4bb7      	ldr	r3, [pc, #732]	@ (800660c <HAL_I2C_MemRxCpltCallback+0x304>)
 800632e:	edd3 7a00 	vldr	s15, [r3]
 8006332:	4bb7      	ldr	r3, [pc, #732]	@ (8006610 <HAL_I2C_MemRxCpltCallback+0x308>)
 8006334:	ed93 7a00 	vldr	s14, [r3]
 8006338:	4bb6      	ldr	r3, [pc, #728]	@ (8006614 <HAL_I2C_MemRxCpltCallback+0x30c>)
 800633a:	edd3 6a00 	vldr	s13, [r3]
 800633e:	4bb6      	ldr	r3, [pc, #728]	@ (8006618 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006340:	ed93 6a00 	vldr	s12, [r3]
 8006344:	4bb5      	ldr	r3, [pc, #724]	@ (800661c <HAL_I2C_MemRxCpltCallback+0x314>)
 8006346:	edd3 5a00 	vldr	s11, [r3]
 800634a:	4bb5      	ldr	r3, [pc, #724]	@ (8006620 <HAL_I2C_MemRxCpltCallback+0x318>)
 800634c:	ed93 5a00 	vldr	s10, [r3]
 8006350:	eddf 4ab4 	vldr	s9, [pc, #720]	@ 8006624 <HAL_I2C_MemRxCpltCallback+0x31c>
 8006354:	ed9f 4ab4 	vldr	s8, [pc, #720]	@ 8006628 <HAL_I2C_MemRxCpltCallback+0x320>
 8006358:	4bb4      	ldr	r3, [pc, #720]	@ (800662c <HAL_I2C_MemRxCpltCallback+0x324>)
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	4bb4      	ldr	r3, [pc, #720]	@ (8006630 <HAL_I2C_MemRxCpltCallback+0x328>)
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	eef0 3a44 	vmov.f32	s7, s8
 8006364:	eeb0 3a64 	vmov.f32	s6, s9
 8006368:	eef0 2a45 	vmov.f32	s5, s10
 800636c:	eeb0 2a65 	vmov.f32	s4, s11
 8006370:	eef0 1a46 	vmov.f32	s3, s12
 8006374:	eeb0 1a66 	vmov.f32	s2, s13
 8006378:	eef0 0a47 	vmov.f32	s1, s14
 800637c:	eeb0 0a67 	vmov.f32	s0, s15
 8006380:	4bac      	ldr	r3, [pc, #688]	@ (8006634 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8006382:	4aad      	ldr	r2, [pc, #692]	@ (8006638 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006384:	49ad      	ldr	r1, [pc, #692]	@ (800663c <HAL_I2C_MemRxCpltCallback+0x334>)
 8006386:	48ae      	ldr	r0, [pc, #696]	@ (8006640 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006388:	f7fb f9fc 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800638c:	4bac      	ldr	r3, [pc, #688]	@ (8006640 <HAL_I2C_MemRxCpltCallback+0x338>)
 800638e:	edd3 7a00 	vldr	s15, [r3]
 8006392:	4baa      	ldr	r3, [pc, #680]	@ (800663c <HAL_I2C_MemRxCpltCallback+0x334>)
 8006394:	ed93 7a00 	vldr	s14, [r3]
 8006398:	4ba7      	ldr	r3, [pc, #668]	@ (8006638 <HAL_I2C_MemRxCpltCallback+0x330>)
 800639a:	edd3 6a00 	vldr	s13, [r3]
 800639e:	49a9      	ldr	r1, [pc, #676]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80063a0:	48a9      	ldr	r0, [pc, #676]	@ (8006648 <HAL_I2C_MemRxCpltCallback+0x340>)
 80063a2:	eeb0 1a66 	vmov.f32	s2, s13
 80063a6:	eef0 0a47 	vmov.f32	s1, s14
 80063aa:	eeb0 0a67 	vmov.f32	s0, s15
 80063ae:	f7fb f89b 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 80063b2:	4ba5      	ldr	r3, [pc, #660]	@ (8006648 <HAL_I2C_MemRxCpltCallback+0x340>)
 80063b4:	edd3 7a00 	vldr	s15, [r3]
 80063b8:	4ba2      	ldr	r3, [pc, #648]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80063ba:	ed93 7a00 	vldr	s14, [r3]
 80063be:	4ba3      	ldr	r3, [pc, #652]	@ (800664c <HAL_I2C_MemRxCpltCallback+0x344>)
 80063c0:	edd3 6a00 	vldr	s13, [r3]
 80063c4:	4b9b      	ldr	r3, [pc, #620]	@ (8006634 <HAL_I2C_MemRxCpltCallback+0x32c>)
 80063c6:	ed93 6a00 	vldr	s12, [r3]
 80063ca:	4b99      	ldr	r3, [pc, #612]	@ (8006630 <HAL_I2C_MemRxCpltCallback+0x328>)
 80063cc:	edd3 5a00 	vldr	s11, [r3]
 80063d0:	4b96      	ldr	r3, [pc, #600]	@ (800662c <HAL_I2C_MemRxCpltCallback+0x324>)
 80063d2:	ed93 5a00 	vldr	s10, [r3]
 80063d6:	eef0 2a45 	vmov.f32	s5, s10
 80063da:	eeb0 2a65 	vmov.f32	s4, s11
 80063de:	eef0 1a46 	vmov.f32	s3, s12
 80063e2:	eeb0 1a66 	vmov.f32	s2, s13
 80063e6:	eef0 0a47 	vmov.f32	s1, s14
 80063ea:	eeb0 0a67 	vmov.f32	s0, s15
 80063ee:	4898      	ldr	r0, [pc, #608]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x348>)
 80063f0:	f7fb fa72 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 80063f4:	4b96      	ldr	r3, [pc, #600]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x348>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a96      	ldr	r2, [pc, #600]	@ (8006654 <HAL_I2C_MemRxCpltCallback+0x34c>)
 80063fa:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80063fc:	4b94      	ldr	r3, [pc, #592]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x348>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4a95      	ldr	r2, [pc, #596]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006402:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006404:	4b92      	ldr	r3, [pc, #584]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	4a94      	ldr	r2, [pc, #592]	@ (800665c <HAL_I2C_MemRxCpltCallback+0x354>)
 800640a:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 800640c:	4b94      	ldr	r3, [pc, #592]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x358>)
 800640e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800641a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800641e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006422:	4b90      	ldr	r3, [pc, #576]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006424:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006428:	4b8f      	ldr	r3, [pc, #572]	@ (8006668 <HAL_I2C_MemRxCpltCallback+0x360>)
 800642a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006436:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800643a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800643e:	4b8b      	ldr	r3, [pc, #556]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x364>)
 8006440:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 8006444:	4b8a      	ldr	r3, [pc, #552]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 800644c:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006450:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006454:	4b83      	ldr	r3, [pc, #524]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006456:	edd3 7a00 	vldr	s15, [r3]
 800645a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800645e:	eddf 7a85 	vldr	s15, [pc, #532]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006462:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800646a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800647a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006482:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006486:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800648a:	4b7b      	ldr	r3, [pc, #492]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x370>)
 800648c:	edd3 7a00 	vldr	s15, [r3]
 8006490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006498:	4b72      	ldr	r3, [pc, #456]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800649a:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800649e:	eddf 7a75 	vldr	s15, [pc, #468]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064a6:	4b71      	ldr	r3, [pc, #452]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x364>)
 80064a8:	edd3 7a00 	vldr	s15, [r3]
 80064ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064b0:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c4:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80064d8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80064dc:	4b67      	ldr	r3, [pc, #412]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x374>)
 80064de:	edd3 7a00 	vldr	s15, [r3]
 80064e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ea:	4b60      	ldr	r3, [pc, #384]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x364>)
 80064ec:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 80064f0:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x368>)
 80064fa:	edd3 7a00 	vldr	s15, [r3]
 80064fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006502:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800650a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800650e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006516:	eddf 7a57 	vldr	s15, [pc, #348]	@ 8006674 <HAL_I2C_MemRxCpltCallback+0x36c>
 800651a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800652a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800652e:	4b54      	ldr	r3, [pc, #336]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006530:	edd3 7a00 	vldr	s15, [r3]
 8006534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800653c:	4b4c      	ldr	r3, [pc, #304]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x368>)
 800653e:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 8006542:	4b48      	ldr	r3, [pc, #288]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a4c      	ldr	r2, [pc, #304]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006548:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 800654a:	4b48      	ldr	r3, [pc, #288]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x364>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a4b      	ldr	r2, [pc, #300]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x374>)
 8006550:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 8006552:	4b47      	ldr	r3, [pc, #284]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a4a      	ldr	r2, [pc, #296]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006558:	6013      	str	r3, [r2, #0]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (wanted_pitch - now_pitch);
 800655a:	4b4a      	ldr	r3, [pc, #296]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x37c>)
 800655c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <HAL_I2C_MemRxCpltCallback+0x26e>
 8006564:	4b48      	ldr	r3, [pc, #288]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	ee07 3a90 	vmov	s15, r3
 800656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006574:	e011      	b.n	800659a <HAL_I2C_MemRxCpltCallback+0x292>
 8006576:	4b44      	ldr	r3, [pc, #272]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006582:	4b3a      	ldr	r3, [pc, #232]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x364>)
 8006584:	edd3 6a00 	vldr	s13, [r3]
 8006588:	4b32      	ldr	r3, [pc, #200]	@ (8006654 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800658a:	edd3 7a00 	vldr	s15, [r3]
 800658e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800659a:	4b3b      	ldr	r3, [pc, #236]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x380>)
 800659c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (wanted_rool - now_rool);
 80065a0:	4b38      	ldr	r3, [pc, #224]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80065a2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_I2C_MemRxCpltCallback+0x2b4>
 80065aa:	4b38      	ldr	r3, [pc, #224]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x384>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ba:	e011      	b.n	80065e0 <HAL_I2C_MemRxCpltCallback+0x2d8>
 80065bc:	4b33      	ldr	r3, [pc, #204]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x384>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065c8:	4b26      	ldr	r3, [pc, #152]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80065ca:	edd3 6a00 	vldr	s13, [r3]
 80065ce:	4b22      	ldr	r3, [pc, #136]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x350>)
 80065d0:	edd3 7a00 	vldr	s15, [r3]
 80065d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065e0:	4b2a      	ldr	r3, [pc, #168]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x384>)
 80065e2:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (wanted_yaw - now_yaw);
 80065e6:	4b27      	ldr	r3, [pc, #156]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80065e8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d051      	beq.n	8006694 <HAL_I2C_MemRxCpltCallback+0x38c>
 80065f0:	4b27      	ldr	r3, [pc, #156]	@ (8006690 <HAL_I2C_MemRxCpltCallback+0x388>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006600:	e05a      	b.n	80066b8 <HAL_I2C_MemRxCpltCallback+0x3b0>
 8006602:	bf00      	nop
 8006604:	000041d4 	.word	0x000041d4
 8006608:	58021000 	.word	0x58021000
 800660c:	00000030 	.word	0x00000030
 8006610:	00000034 	.word	0x00000034
 8006614:	00000038 	.word	0x00000038
 8006618:	0000003c 	.word	0x0000003c
 800661c:	00000040 	.word	0x00000040
 8006620:	00000044 	.word	0x00000044
 8006624:	42830000 	.word	0x42830000
 8006628:	46000000 	.word	0x46000000
 800662c:	00000014 	.word	0x00000014
 8006630:	00000010 	.word	0x00000010
 8006634:	0000000c 	.word	0x0000000c
 8006638:	00000008 	.word	0x00000008
 800663c:	00000004 	.word	0x00000004
 8006640:	00000000 	.word	0x00000000
 8006644:	0000001c 	.word	0x0000001c
 8006648:	00000018 	.word	0x00000018
 800664c:	00000058 	.word	0x00000058
 8006650:	0000007c 	.word	0x0000007c
 8006654:	00004078 	.word	0x00004078
 8006658:	0000407c 	.word	0x0000407c
 800665c:	00004080 	.word	0x00004080
 8006660:	0000404a 	.word	0x0000404a
 8006664:	0000406c 	.word	0x0000406c
 8006668:	00004048 	.word	0x00004048
 800666c:	00004068 	.word	0x00004068
 8006670:	00004070 	.word	0x00004070
 8006674:	3a83126f 	.word	0x3a83126f
 8006678:	00004054 	.word	0x00004054
 800667c:	00004050 	.word	0x00004050
 8006680:	00004058 	.word	0x00004058
 8006684:	00000178 	.word	0x00000178
 8006688:	0000409c 	.word	0x0000409c
 800668c:	000040a0 	.word	0x000040a0
 8006690:	000040a4 	.word	0x000040a4
 8006694:	4ba1      	ldr	r3, [pc, #644]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x614>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066a0:	4b9f      	ldr	r3, [pc, #636]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x618>)
 80066a2:	edd3 6a00 	vldr	s13, [r3]
 80066a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x61c>)
 80066a8:	edd3 7a00 	vldr	s15, [r3]
 80066ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066b8:	4b98      	ldr	r3, [pc, #608]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x614>)
 80066ba:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pid_pitch - gx);
 80066be:	4b9a      	ldr	r3, [pc, #616]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x620>)
 80066c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_I2C_MemRxCpltCallback+0x3d2>
 80066c8:	4b98      	ldr	r3, [pc, #608]	@ (800692c <HAL_I2C_MemRxCpltCallback+0x624>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066d8:	e011      	b.n	80066fe <HAL_I2C_MemRxCpltCallback+0x3f6>
 80066da:	4b94      	ldr	r3, [pc, #592]	@ (800692c <HAL_I2C_MemRxCpltCallback+0x624>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e6:	4b92      	ldr	r3, [pc, #584]	@ (8006930 <HAL_I2C_MemRxCpltCallback+0x628>)
 80066e8:	edd3 6a00 	vldr	s13, [r3]
 80066ec:	4b91      	ldr	r3, [pc, #580]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x62c>)
 80066ee:	edd3 7a00 	vldr	s15, [r3]
 80066f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066fe:	4b8b      	ldr	r3, [pc, #556]	@ (800692c <HAL_I2C_MemRxCpltCallback+0x624>)
 8006700:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (pid_rool - gy);
 8006704:	4b88      	ldr	r3, [pc, #544]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006706:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_I2C_MemRxCpltCallback+0x418>
 800670e:	4b8a      	ldr	r3, [pc, #552]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800671a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800671e:	e011      	b.n	8006744 <HAL_I2C_MemRxCpltCallback+0x43c>
 8006720:	4b85      	ldr	r3, [pc, #532]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800672c:	4b83      	ldr	r3, [pc, #524]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x634>)
 800672e:	edd3 6a00 	vldr	s13, [r3]
 8006732:	4b83      	ldr	r3, [pc, #524]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006734:	edd3 7a00 	vldr	s15, [r3]
 8006738:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800673c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006744:	4b7c      	ldr	r3, [pc, #496]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006746:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (pid_yaw - gz);
 800674a:	4b77      	ldr	r3, [pc, #476]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x620>)
 800674c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <HAL_I2C_MemRxCpltCallback+0x45e>
 8006754:	4b7b      	ldr	r3, [pc, #492]	@ (8006944 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006764:	e011      	b.n	800678a <HAL_I2C_MemRxCpltCallback+0x482>
 8006766:	4b77      	ldr	r3, [pc, #476]	@ (8006944 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006772:	4b75      	ldr	r3, [pc, #468]	@ (8006948 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006774:	edd3 6a00 	vldr	s13, [r3]
 8006778:	4b74      	ldr	r3, [pc, #464]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x644>)
 800677a:	edd3 7a00 	vldr	s15, [r3]
 800677e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800678a:	4b6e      	ldr	r3, [pc, #440]	@ (8006944 <HAL_I2C_MemRxCpltCallback+0x63c>)
 800678c:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006790:	2201      	movs	r2, #1
 8006792:	496f      	ldr	r1, [pc, #444]	@ (8006950 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006794:	4866      	ldr	r0, [pc, #408]	@ (8006930 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006796:	f7fd f919 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800679a:	2202      	movs	r2, #2
 800679c:	496d      	ldr	r1, [pc, #436]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x64c>)
 800679e:	4867      	ldr	r0, [pc, #412]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x634>)
 80067a0:	f7fd f914 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 80067a4:	2203      	movs	r2, #3
 80067a6:	496c      	ldr	r1, [pc, #432]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x650>)
 80067a8:	4867      	ldr	r0, [pc, #412]	@ (8006948 <HAL_I2C_MemRxCpltCallback+0x640>)
 80067aa:	f7fd f90f 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80067ae:	2204      	movs	r2, #4
 80067b0:	496a      	ldr	r1, [pc, #424]	@ (800695c <HAL_I2C_MemRxCpltCallback+0x654>)
 80067b2:	486b      	ldr	r0, [pc, #428]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x658>)
 80067b4:	f7fd f90a 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80067b8:	2205      	movs	r2, #5
 80067ba:	496a      	ldr	r1, [pc, #424]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x65c>)
 80067bc:	486a      	ldr	r0, [pc, #424]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x660>)
 80067be:	f7fd f905 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80067c2:	2206      	movs	r2, #6
 80067c4:	4969      	ldr	r1, [pc, #420]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x664>)
 80067c6:	486a      	ldr	r0, [pc, #424]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x668>)
 80067c8:	f7fd f900 	bl	80039cc <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 80067cc:	4b69      	ldr	r3, [pc, #420]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x66c>)
 80067ce:	ed93 7a00 	vldr	s14, [r3]
 80067d2:	4b69      	ldr	r3, [pc, #420]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x670>)
 80067d4:	edd3 7a00 	vldr	s15, [r3]
 80067d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067dc:	4b67      	ldr	r3, [pc, #412]	@ (800697c <HAL_I2C_MemRxCpltCallback+0x674>)
 80067de:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 80067e2:	4b67      	ldr	r3, [pc, #412]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0x678>)
 80067e4:	ed93 7a00 	vldr	s14, [r3]
 80067e8:	4b66      	ldr	r3, [pc, #408]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x67c>)
 80067ea:	edd3 7a00 	vldr	s15, [r3]
 80067ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f2:	4b65      	ldr	r3, [pc, #404]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0x680>)
 80067f4:	edc3 7a00 	vstr	s15, [r3]
			old_error_yaw = wanted_yaw - now_yaw;
 80067f8:	4b49      	ldr	r3, [pc, #292]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x618>)
 80067fa:	ed93 7a00 	vldr	s14, [r3]
 80067fe:	4b49      	ldr	r3, [pc, #292]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006800:	edd3 7a00 	vldr	s15, [r3]
 8006804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006808:	4b60      	ldr	r3, [pc, #384]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x684>)
 800680a:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 800680e:	4b48      	ldr	r3, [pc, #288]	@ (8006930 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006810:	ed93 7a00 	vldr	s14, [r3]
 8006814:	4b47      	ldr	r3, [pc, #284]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x62c>)
 8006816:	edd3 7a00 	vldr	s15, [r3]
 800681a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800681e:	4b5c      	ldr	r3, [pc, #368]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006820:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 8006824:	4b45      	ldr	r3, [pc, #276]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x634>)
 8006826:	ed93 7a00 	vldr	s14, [r3]
 800682a:	4b45      	ldr	r3, [pc, #276]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x638>)
 800682c:	edd3 7a00 	vldr	s15, [r3]
 8006830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006834:	4b57      	ldr	r3, [pc, #348]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006836:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 800683a:	4b39      	ldr	r3, [pc, #228]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x618>)
 800683c:	ed93 7a00 	vldr	s14, [r3]
 8006840:	4b42      	ldr	r3, [pc, #264]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x644>)
 8006842:	edd3 7a00 	vldr	s15, [r3]
 8006846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800684a:	4b53      	ldr	r3, [pc, #332]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x690>)
 800684c:	edc3 7a00 	vstr	s15, [r3]


			//MYDRON.ROOL 	= ((pid_angular_rate_rool > -5000) && (pid_angular_rate_rool < 5000)) ? pid_angular_rate_rool: (pid_angular_rate_rool > 0) ? 5000: -5000;
			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006850:	4b45      	ldr	r3, [pc, #276]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006852:	edd3 7a00 	vldr	s15, [r3]
 8006856:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800699c <HAL_I2C_MemRxCpltCallback+0x694>
 800685a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	dd04      	ble.n	800686e <HAL_I2C_MemRxCpltCallback+0x566>
 8006864:	f001 f87c 	bl	8007960 <ROOL_MAX_VAL>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	e012      	b.n	8006894 <HAL_I2C_MemRxCpltCallback+0x58c>
 800686e:	4b3e      	ldr	r3, [pc, #248]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006870:	edd3 7a00 	vldr	s15, [r3]
 8006874:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80069a0 <HAL_I2C_MemRxCpltCallback+0x698>
 8006878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006880:	d504      	bpl.n	800688c <HAL_I2C_MemRxCpltCallback+0x584>
 8006882:	f001 f87d 	bl	8007980 <ROOL_MIN_VAL>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	e003      	b.n	8006894 <HAL_I2C_MemRxCpltCallback+0x58c>
 800688c:	f001 f8c8 	bl	8007a20 <ROOL_GOOD_VAL>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	4b24      	ldr	r3, [pc, #144]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006896:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006898:	4b31      	ldr	r3, [pc, #196]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x658>)
 800689a:	edd3 7a00 	vldr	s15, [r3]
 800689e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800699c <HAL_I2C_MemRxCpltCallback+0x694>
 80068a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068aa:	dd04      	ble.n	80068b6 <HAL_I2C_MemRxCpltCallback+0x5ae>
 80068ac:	f001 f878 	bl	80079a0 <PITCH_MAX_VAL>
 80068b0:	4603      	mov	r3, r0
 80068b2:	461a      	mov	r2, r3
 80068b4:	e012      	b.n	80068dc <HAL_I2C_MemRxCpltCallback+0x5d4>
 80068b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x658>)
 80068b8:	edd3 7a00 	vldr	s15, [r3]
 80068bc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80069a0 <HAL_I2C_MemRxCpltCallback+0x698>
 80068c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c8:	d504      	bpl.n	80068d4 <HAL_I2C_MemRxCpltCallback+0x5cc>
 80068ca:	f001 f879 	bl	80079c0 <PITCH_MIN_VAL>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	e003      	b.n	80068dc <HAL_I2C_MemRxCpltCallback+0x5d4>
 80068d4:	f001 f8bc 	bl	8007a50 <PITCH_GOOD_VAL>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x620>)
 80068de:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 80068e0:	4b23      	ldr	r3, [pc, #140]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x668>)
 80068e2:	edd3 7a00 	vldr	s15, [r3]
 80068e6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800699c <HAL_I2C_MemRxCpltCallback+0x694>
 80068ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f2:	dd04      	ble.n	80068fe <HAL_I2C_MemRxCpltCallback+0x5f6>
 80068f4:	f001 f874 	bl	80079e0 <YAW_MAX_VAL>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	e056      	b.n	80069ac <HAL_I2C_MemRxCpltCallback+0x6a4>
 80068fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006900:	edd3 7a00 	vldr	s15, [r3]
 8006904:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80069a0 <HAL_I2C_MemRxCpltCallback+0x698>
 8006908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	d548      	bpl.n	80069a4 <HAL_I2C_MemRxCpltCallback+0x69c>
 8006912:	f001 f875 	bl	8007a00 <YAW_MIN_VAL>
 8006916:	4603      	mov	r3, r0
 8006918:	461a      	mov	r2, r3
 800691a:	e047      	b.n	80069ac <HAL_I2C_MemRxCpltCallback+0x6a4>
 800691c:	000040a4 	.word	0x000040a4
 8006920:	00004070 	.word	0x00004070
 8006924:	00004080 	.word	0x00004080
 8006928:	00000178 	.word	0x00000178
 800692c:	000040a8 	.word	0x000040a8
 8006930:	000040b4 	.word	0x000040b4
 8006934:	0000000c 	.word	0x0000000c
 8006938:	000040ac 	.word	0x000040ac
 800693c:	000040bc 	.word	0x000040bc
 8006940:	00000010 	.word	0x00000010
 8006944:	000040b0 	.word	0x000040b0
 8006948:	000040b8 	.word	0x000040b8
 800694c:	00000014 	.word	0x00000014
 8006950:	000040f0 	.word	0x000040f0
 8006954:	00004104 	.word	0x00004104
 8006958:	00004118 	.word	0x00004118
 800695c:	00004150 	.word	0x00004150
 8006960:	000040c0 	.word	0x000040c0
 8006964:	00004164 	.word	0x00004164
 8006968:	000040c8 	.word	0x000040c8
 800696c:	00004178 	.word	0x00004178
 8006970:	000040c4 	.word	0x000040c4
 8006974:	00004068 	.word	0x00004068
 8006978:	00004078 	.word	0x00004078
 800697c:	00004084 	.word	0x00004084
 8006980:	0000406c 	.word	0x0000406c
 8006984:	0000407c 	.word	0x0000407c
 8006988:	00004088 	.word	0x00004088
 800698c:	0000408c 	.word	0x0000408c
 8006990:	00004090 	.word	0x00004090
 8006994:	00004094 	.word	0x00004094
 8006998:	00004098 	.word	0x00004098
 800699c:	459c4000 	.word	0x459c4000
 80069a0:	c59c4000 	.word	0xc59c4000
 80069a4:	f001 f86c 	bl	8007a80 <YAW_GOOD_VAL>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	4bc4      	ldr	r3, [pc, #784]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 80069ae:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 80069b0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80069b4:	f7fc fed4 	bl	8003760 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 80069b8:	4bc1      	ldr	r3, [pc, #772]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 80069ba:	885b      	ldrh	r3, [r3, #2]
 80069bc:	461a      	mov	r2, r3
 80069be:	4bc1      	ldr	r3, [pc, #772]	@ (8006cc4 <HAL_I2C_MemRxCpltCallback+0x9bc>)
 80069c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	dd05      	ble.n	80069d4 <HAL_I2C_MemRxCpltCallback+0x6cc>
				MYDRON.THRUST = thrust_limit;
 80069c8:	4bbe      	ldr	r3, [pc, #760]	@ (8006cc4 <HAL_I2C_MemRxCpltCallback+0x9bc>)
 80069ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	4bbb      	ldr	r3, [pc, #748]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 80069d2:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 80069d4:	4bbc      	ldr	r3, [pc, #752]	@ (8006cc8 <HAL_I2C_MemRxCpltCallback+0x9c0>)
 80069d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80069da:	eeb0 0a67 	vmov.f32	s0, s15
 80069de:	f000 fbcd 	bl	800717c <WartoscBezwgledna>
 80069e2:	eef0 7a40 	vmov.f32	s15, s0
 80069e6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ea:	f000 ff6d 	bl	80078c8 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 80069ee:	4bb7      	ldr	r3, [pc, #732]	@ (8006ccc <HAL_I2C_MemRxCpltCallback+0x9c4>)
 80069f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80069f4:	eeb0 0a67 	vmov.f32	s0, s15
 80069f8:	f000 fbc0 	bl	800717c <WartoscBezwgledna>
 80069fc:	eef0 7a40 	vmov.f32	s15, s0
 8006a00:	eeb0 0a67 	vmov.f32	s0, s15
 8006a04:	f000 ff60 	bl	80078c8 <Stack_Push>
			Stack_Push(now_pitch);
 8006a08:	4bb1      	ldr	r3, [pc, #708]	@ (8006cd0 <HAL_I2C_MemRxCpltCallback+0x9c8>)
 8006a0a:	edd3 7a00 	vldr	s15, [r3]
 8006a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a12:	f000 ff59 	bl	80078c8 <Stack_Push>
			Stack_Push(now_rool);
 8006a16:	4baf      	ldr	r3, [pc, #700]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x9cc>)
 8006a18:	edd3 7a00 	vldr	s15, [r3]
 8006a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a20:	f000 ff52 	bl	80078c8 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//trust 7000 max
 8006a24:	4ba6      	ldr	r3, [pc, #664]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a26:	885b      	ldrh	r3, [r3, #2]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a30:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8006ca8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006a34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a38:	4ba1      	ldr	r3, [pc, #644]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a46:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a58:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006a5c:	4b98      	ldr	r3, [pc, #608]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a6e:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006cb0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006a72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a76:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006cb8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006a7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a82:	ee17 2a90 	vmov	r2, s15
 8006a86:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d832      	bhi.n	8006af4 <HAL_I2C_MemRxCpltCallback+0x7ec>
 8006a8e:	4b8c      	ldr	r3, [pc, #560]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a90:	885b      	ldrh	r3, [r3, #2]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a9a:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8006ca8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006a9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006aa2:	4b87      	ldr	r3, [pc, #540]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006aa4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ab0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ab4:	4b82      	ldr	r3, [pc, #520]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ac2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ac8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ad4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ad8:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006cb0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006adc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ae0:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006cb8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006ae4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ae8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006aec:	ee17 3a90 	vmov	r3, s15
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	e001      	b.n	8006af8 <HAL_I2C_MemRxCpltCallback+0x7f0>
 8006af4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006af8:	4a77      	ldr	r2, [pc, #476]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x9d0>)
 8006afa:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006afc:	4b70      	ldr	r3, [pc, #448]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006afe:	885b      	ldrh	r3, [r3, #2]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b08:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8006ca8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006b0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b10:	4b6b      	ldr	r3, [pc, #428]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b22:	4b67      	ldr	r3, [pc, #412]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b30:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b34:	4b62      	ldr	r3, [pc, #392]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006b46:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006cb0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006b4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b4e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006cb8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006b52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b5a:	ee17 2a90 	vmov	r2, s15
 8006b5e:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d832      	bhi.n	8006bcc <HAL_I2C_MemRxCpltCallback+0x8c4>
 8006b66:	4b56      	ldr	r3, [pc, #344]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b68:	885b      	ldrh	r3, [r3, #2]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b72:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8006ca8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006b76:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b7a:	4b51      	ldr	r3, [pc, #324]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b9a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b9e:	4b48      	ldr	r3, [pc, #288]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ba0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bb0:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006cb0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bb8:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006cb8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006bbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bc4:	ee17 3a90 	vmov	r3, s15
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	e001      	b.n	8006bd0 <HAL_I2C_MemRxCpltCallback+0x8c8>
 8006bcc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006bd0:	4a42      	ldr	r2, [pc, #264]	@ (8006cdc <HAL_I2C_MemRxCpltCallback+0x9d4>)
 8006bd2:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bd6:	885b      	ldrh	r3, [r3, #2]
 8006bd8:	ee07 3a90 	vmov	s15, r3
 8006bdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006be0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006ca8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006be4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006be8:	4b35      	ldr	r3, [pc, #212]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bf6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006bfa:	4b31      	ldr	r3, [pc, #196]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c1e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006cb0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006c22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c26:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006cb8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006c2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c32:	ee17 2a90 	vmov	r2, s15
 8006c36:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d850      	bhi.n	8006ce0 <HAL_I2C_MemRxCpltCallback+0x9d8>
 8006c3e:	4b20      	ldr	r3, [pc, #128]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c4a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006ca8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006c4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c52:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c64:	4b16      	ldr	r3, [pc, #88]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c72:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c76:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c88:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006cb0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006c8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c90:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006cb8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006c94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c9c:	ee17 3a90 	vmov	r3, s15
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	e01f      	b.n	8006ce4 <HAL_I2C_MemRxCpltCallback+0x9dc>
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	66666666 	.word	0x66666666
 8006cac:	3fe66666 	.word	0x3fe66666
 8006cb0:	00000000 	.word	0x00000000
 8006cb4:	40c48200 	.word	0x40c48200
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	407f4000 	.word	0x407f4000
 8006cc0:	00000178 	.word	0x00000178
 8006cc4:	0000405e 	.word	0x0000405e
 8006cc8:	000040f0 	.word	0x000040f0
 8006ccc:	00004104 	.word	0x00004104
 8006cd0:	00004078 	.word	0x00004078
 8006cd4:	0000407c 	.word	0x0000407c
 8006cd8:	0000418c 	.word	0x0000418c
 8006cdc:	0000418e 	.word	0x0000418e
 8006ce0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006ce4:	4a9a      	ldr	r2, [pc, #616]	@ (8006f50 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006ce6:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//
 8006ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006cea:	885b      	ldrh	r3, [r3, #2]
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cf4:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8006f20 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006cf8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cfc:	4b95      	ldr	r3, [pc, #596]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006cfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d0e:	4b91      	ldr	r3, [pc, #580]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d20:	4b8c      	ldr	r3, [pc, #560]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d32:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006f28 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006d36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d3a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006d3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d46:	ee17 2a90 	vmov	r2, s15
 8006d4a:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d832      	bhi.n	8006db8 <HAL_I2C_MemRxCpltCallback+0xab0>
 8006d52:	4b80      	ldr	r3, [pc, #512]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d54:	885b      	ldrh	r3, [r3, #2]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d5e:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8006f20 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006d62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d66:	4b7b      	ldr	r3, [pc, #492]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d78:	4b76      	ldr	r3, [pc, #472]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d86:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d8a:	4b72      	ldr	r3, [pc, #456]	@ (8006f54 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d9c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8006f28 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006da0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006da4:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8006f30 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006da8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006dac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006db0:	ee17 3a90 	vmov	r3, s15
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	e001      	b.n	8006dbc <HAL_I2C_MemRxCpltCallback+0xab4>
 8006db8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006dbc:	4a66      	ldr	r2, [pc, #408]	@ (8006f58 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006dbe:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8006dc0:	4b66      	ldr	r3, [pc, #408]	@ (8006f5c <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	4b66      	ldr	r3, [pc, #408]	@ (8006f60 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d004      	beq.n	8006dd6 <HAL_I2C_MemRxCpltCallback+0xace>
				ESC_1_SPEED(SPEED1);
 8006dcc:	4b63      	ldr	r3, [pc, #396]	@ (8006f5c <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fa f82f 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006dd6:	4b63      	ldr	r3, [pc, #396]	@ (8006f64 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	4b63      	ldr	r3, [pc, #396]	@ (8006f68 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d004      	beq.n	8006dec <HAL_I2C_MemRxCpltCallback+0xae4>
				ESC_2_SPEED(SPEED2);
 8006de2:	4b60      	ldr	r3, [pc, #384]	@ (8006f64 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fa f846 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006dec:	4b58      	ldr	r3, [pc, #352]	@ (8006f50 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006dee:	881a      	ldrh	r2, [r3, #0]
 8006df0:	4b5e      	ldr	r3, [pc, #376]	@ (8006f6c <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d004      	beq.n	8006e02 <HAL_I2C_MemRxCpltCallback+0xafa>
				ESC_3_SPEED(SPEED3);
 8006df8:	4b55      	ldr	r3, [pc, #340]	@ (8006f50 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fa f85d 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006e02:	4b55      	ldr	r3, [pc, #340]	@ (8006f58 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	4b5a      	ldr	r3, [pc, #360]	@ (8006f70 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d004      	beq.n	8006e18 <HAL_I2C_MemRxCpltCallback+0xb10>
				ESC_4_SPEED(SPEED4);
 8006e0e:	4b52      	ldr	r3, [pc, #328]	@ (8006f58 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fa f874 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006e18:	4b50      	ldr	r3, [pc, #320]	@ (8006f5c <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	4b50      	ldr	r3, [pc, #320]	@ (8006f60 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e1e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8006e20:	4b50      	ldr	r3, [pc, #320]	@ (8006f64 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e22:	881a      	ldrh	r2, [r3, #0]
 8006e24:	4b50      	ldr	r3, [pc, #320]	@ (8006f68 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006e26:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8006e28:	4b49      	ldr	r3, [pc, #292]	@ (8006f50 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006e2a:	881a      	ldrh	r2, [r3, #0]
 8006e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f6c <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006e2e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8006e30:	4b49      	ldr	r3, [pc, #292]	@ (8006f58 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e32:	881a      	ldrh	r2, [r3, #0]
 8006e34:	4b4e      	ldr	r3, [pc, #312]	@ (8006f70 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006e36:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e3e:	484d      	ldr	r0, [pc, #308]	@ (8006f74 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8006e40:	f007 fb08 	bl	800e454 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006e44:	4b4c      	ldr	r3, [pc, #304]	@ (8006f78 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d132      	bne.n	8006eb2 <HAL_I2C_MemRxCpltCallback+0xbaa>
		HMC583L_IRQ = 0;
 8006e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8006f78 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8006e52:	f7fa f959 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4b48      	ldr	r3, [pc, #288]	@ (8006f7c <HAL_I2C_MemRxCpltCallback+0xc74>)
 8006e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e6a:	4b45      	ldr	r3, [pc, #276]	@ (8006f80 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006e6c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006e70:	4b43      	ldr	r3, [pc, #268]	@ (8006f80 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006e72:	edd3 7a00 	vldr	s15, [r3]
 8006e76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e7a:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8006f38 <HAL_I2C_MemRxCpltCallback+0xc30>
 8006e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e82:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8006f40 <HAL_I2C_MemRxCpltCallback+0xc38>
 8006e86:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f84 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8006e8c:	edd3 7a00 	vldr	s15, [r3]
 8006e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e94:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8006f48 <HAL_I2C_MemRxCpltCallback+0xc40>
 8006e98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006ea4:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006ea6:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8006eaa:	4b35      	ldr	r3, [pc, #212]	@ (8006f80 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a35      	ldr	r2, [pc, #212]	@ (8006f84 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8006eb0:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006eb2:	4b35      	ldr	r3, [pc, #212]	@ (8006f88 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d113      	bne.n	8006ee2 <HAL_I2C_MemRxCpltCallback+0xbda>
		temperature = BMP180_GET_temp_IT();
 8006eba:	f7f9 fc69 	bl	8000790 <BMP180_GET_temp_IT>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4b32      	ldr	r3, [pc, #200]	@ (8006f8c <HAL_I2C_MemRxCpltCallback+0xc84>)
 8006ec4:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8006ec6:	4b31      	ldr	r3, [pc, #196]	@ (8006f8c <HAL_I2C_MemRxCpltCallback+0xc84>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7f9 fd83 	bl	80009d8 <BMP180_GET_temp>
 8006ed2:	eef0 7a40 	vmov.f32	s15, s0
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8006f90 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8006ed8:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006edc:	4b2a      	ldr	r3, [pc, #168]	@ (8006f88 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8006ee2:	4b29      	ldr	r3, [pc, #164]	@ (8006f88 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d113      	bne.n	8006f12 <HAL_I2C_MemRxCpltCallback+0xc0a>
		pressure = BMP180_GET_pres_IT();
 8006eea:	f7f9 fc67 	bl	80007bc <BMP180_GET_pres_IT>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4b28      	ldr	r3, [pc, #160]	@ (8006f94 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8006ef4:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8006ef6:	4b27      	ldr	r3, [pc, #156]	@ (8006f94 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7f9 fdc7 	bl	8000a90 <BMP180_GET_pres>
 8006f02:	eef0 7a40 	vmov.f32	s15, s0
 8006f06:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <HAL_I2C_MemRxCpltCallback+0xc90>)
 8006f08:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f88 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
	}
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w
 8006f20:	66666666 	.word	0x66666666
 8006f24:	3fe66666 	.word	0x3fe66666
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	40c48200 	.word	0x40c48200
 8006f30:	00000000 	.word	0x00000000
 8006f34:	407f4000 	.word	0x407f4000
 8006f38:	9999999a 	.word	0x9999999a
 8006f3c:	3fc99999 	.word	0x3fc99999
 8006f40:	33333333 	.word	0x33333333
 8006f44:	3ff33333 	.word	0x3ff33333
 8006f48:	aaaaaaab 	.word	0xaaaaaaab
 8006f4c:	3feaaaaa 	.word	0x3feaaaaa
 8006f50:	00004190 	.word	0x00004190
 8006f54:	00000178 	.word	0x00000178
 8006f58:	00004192 	.word	0x00004192
 8006f5c:	0000418c 	.word	0x0000418c
 8006f60:	00004194 	.word	0x00004194
 8006f64:	0000418e 	.word	0x0000418e
 8006f68:	00004196 	.word	0x00004196
 8006f6c:	00004198 	.word	0x00004198
 8006f70:	0000419a 	.word	0x0000419a
 8006f74:	58021000 	.word	0x58021000
 8006f78:	000041d5 	.word	0x000041d5
 8006f7c:	00000060 	.word	0x00000060
 8006f80:	00000058 	.word	0x00000058
 8006f84:	0000005c 	.word	0x0000005c
 8006f88:	000041d6 	.word	0x000041d6
 8006f8c:	000000b8 	.word	0x000000b8
 8006f90:	000000dc 	.word	0x000000dc
 8006f94:	000000bc 	.word	0x000000bc
 8006f98:	000000e0 	.word	0x000000e0

08006f9c <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	ed2d 8b04 	vpush	{d8-d9}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	460b      	mov	r3, r1
 8006fb0:	71fb      	strb	r3, [r7, #7]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006fbc:	79ba      	ldrb	r2, [r7, #6]
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e02e      	b.n	8007028 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fd0:	ee07 3a90 	vmov	s15, r3
 8006fd4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006fd8:	79fa      	ldrb	r2, [r7, #7]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	4413      	add	r3, r2
 8006fde:	461a      	mov	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ffc:	eeb0 1b47 	vmov.f64	d1, d7
 8007000:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007004:	f016 ff40 	bl	801de88 <pow>
 8007008:	eeb0 7b40 	vmov.f64	d7, d0
 800700c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007010:	ee38 7b07 	vadd.f64	d7, d8, d7
 8007014:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007018:	ee17 3a90 	vmov	r3, s15
 800701c:	b21a      	sxth	r2, r3
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	3301      	adds	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	dacc      	bge.n	8006fca <convert_array_to_value+0x2e>
	}

}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	ecbd 8b04 	vpop	{d8-d9}
 800703c:	bd80      	pop	{r7, pc}

0800703e <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 800703e:	b590      	push	{r4, r7, lr}
 8007040:	b087      	sub	sp, #28
 8007042:	af00      	add	r7, sp, #0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	4611      	mov	r1, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4603      	mov	r3, r0
 800704c:	80fb      	strh	r3, [r7, #6]
 800704e:	460b      	mov	r3, r1
 8007050:	717b      	strb	r3, [r7, #5]
 8007052:	4613      	mov	r3, r2
 8007054:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 800705e:	793a      	ldrb	r2, [r7, #4]
 8007060:	797b      	ldrb	r3, [r7, #5]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e03e      	b.n	80070ea <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 800706c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d028      	beq.n	80070c6 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	4619      	mov	r1, r3
 800707c:	200a      	movs	r0, #10
 800707e:	f000 f83d 	bl	80070fc <potenga>
 8007082:	4603      	mov	r3, r0
 8007084:	b29b      	uxth	r3, r3
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	80fb      	strh	r3, [r7, #6]
			x++;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8007094:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a6:	eeb0 1b47 	vmov.f64	d1, d7
 80070aa:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80070ae:	f016 feeb 	bl	801de88 <pow>
 80070b2:	eeb0 7b40 	vmov.f64	d7, d0
 80070b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070ba:	ee17 3a90 	vmov	r3, s15
 80070be:	b29b      	uxth	r3, r3
 80070c0:	429c      	cmp	r4, r3
 80070c2:	dad3      	bge.n	800706c <convert_value_to_array+0x2e>
 80070c4:	e000      	b.n	80070c8 <convert_value_to_array+0x8a>
				break;
 80070c6:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 80070c8:	797a      	ldrb	r2, [r7, #5]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	4413      	add	r3, r2
 80070ce:	461a      	mov	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	4413      	add	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3301      	adds	r3, #1
 80070de:	613b      	str	r3, [r7, #16]
		x = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	dad0      	bge.n	8007094 <convert_value_to_array+0x56>
	}
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd90      	pop	{r4, r7, pc}

080070fc <potenga>:
uint32_t potenga(int a, int b){
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <potenga+0x18>
		return 1;
 8007110:	2301      	movs	r3, #1
 8007112:	e02d      	b.n	8007170 <potenga+0x74>
	}
	if(b == 1){
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <potenga+0x22>
		return a;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	e028      	b.n	8007170 <potenga+0x74>
	}
	if(b > 1){
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	dd10      	ble.n	8007146 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e007      	b.n	800713a <potenga+0x3e>
			a = a*c;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3301      	adds	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	dbf3      	blt.n	800712a <potenga+0x2e>
		}
		return a;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	e014      	b.n	8007170 <potenga+0x74>
	}
	if(b < 0){
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	da10      	bge.n	800716e <potenga+0x72>
		for(int i = 0; i < b; i++){
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	e007      	b.n	8007162 <potenga+0x66>
			a = a/c;
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	fb92 f3f3 	sdiv	r3, r2, r3
 800715a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	3301      	adds	r3, #1
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	dbf3      	blt.n	8007152 <potenga+0x56>
		}
		return a;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	e000      	b.n	8007170 <potenga+0x74>
	}
	return a;
 800716e:	687b      	ldr	r3, [r7, #4]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 8007186:	edd7 7a01 	vldr	s15, [r7, #4]
 800718a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	d504      	bpl.n	800719e <WartoscBezwgledna+0x22>
		return a*(-1);
 8007194:	edd7 7a01 	vldr	s15, [r7, #4]
 8007198:	eef1 7a67 	vneg.f32	s15, s15
 800719c:	e001      	b.n	80071a2 <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 800719e:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 80071a2:	eeb0 0a67 	vmov.f32	s0, s15
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
 80071ba:	460b      	mov	r3, r1
 80071bc:	71bb      	strb	r3, [r7, #6]
 80071be:	4613      	mov	r3, r2
 80071c0:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 80071c2:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <RGB_LED_Set_color+0x38>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	797a      	ldrb	r2, [r7, #5]
 80071c8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 80071ca:	4b07      	ldr	r3, [pc, #28]	@ (80071e8 <RGB_LED_Set_color+0x38>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	79fa      	ldrb	r2, [r7, #7]
 80071d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 80071d2:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <RGB_LED_Set_color+0x38>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	79ba      	ldrb	r2, [r7, #6]
 80071d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	24000380 	.word	0x24000380
 80071ec:	00000000 	.word	0x00000000

080071f0 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007208:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007258 <RGB_LED_For_BAT+0x68>
 800720c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007210:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007260 <RGB_LED_For_BAT+0x70>
 8007214:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007218:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800721c:	edc7 7a00 	vstr	s15, [r7]
 8007220:	783b      	ldrb	r3, [r7, #0]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	79fa      	ldrb	r2, [r7, #7]
 8007226:	ee07 2a90 	vmov	s15, r2
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007232:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007258 <RGB_LED_For_BAT+0x68>
 8007236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800723a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800723e:	edc7 7a00 	vstr	s15, [r7]
 8007242:	783a      	ldrb	r2, [r7, #0]
 8007244:	b2d1      	uxtb	r1, r2
 8007246:	2200      	movs	r2, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff ffb1 	bl	80071b0 <RGB_LED_Set_color>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	66666666 	.word	0x66666666
 800725c:	40046666 	.word	0x40046666
 8007260:	00000000 	.word	0x00000000
 8007264:	406fe000 	.word	0x406fe000

08007268 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6039      	str	r1, [r7, #0]
 8007270:	4611      	mov	r1, r2
 8007272:	461a      	mov	r2, r3
 8007274:	4603      	mov	r3, r0
 8007276:	80fb      	strh	r3, [r7, #6]
 8007278:	460b      	mov	r3, r1
 800727a:	717b      	strb	r3, [r7, #5]
 800727c:	4613      	mov	r3, r2
 800727e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007288:	793a      	ldrb	r2, [r7, #4]
 800728a:	797b      	ldrb	r3, [r7, #5]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007294:	2b00      	cmp	r3, #0
 8007296:	da04      	bge.n	80072a2 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007298:	797b      	ldrb	r3, [r7, #5]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	4413      	add	r3, r2
 800729e:	222d      	movs	r2, #45	@ 0x2d
 80072a0:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 80072a2:	2301      	movs	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	e035      	b.n	8007314 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 80072a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01d      	beq.n	80072ec <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	4619      	mov	r1, r3
 80072b8:	200a      	movs	r0, #10
 80072ba:	f7ff ff1f 	bl	80070fc <potenga>
 80072be:	4603      	mov	r3, r0
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	80fb      	strh	r3, [r7, #6]
			x++;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	3301      	adds	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 80072d0:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	4619      	mov	r1, r3
 80072dc:	200a      	movs	r0, #10
 80072de:	f7ff ff0d 	bl	80070fc <potenga>
 80072e2:	4603      	mov	r3, r0
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	429c      	cmp	r4, r3
 80072e8:	dade      	bge.n	80072a8 <convert_value_to_array2+0x40>
 80072ea:	e000      	b.n	80072ee <convert_value_to_array2+0x86>
				break;
 80072ec:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	7979      	ldrb	r1, [r7, #5]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	440b      	add	r3, r1
 80072f8:	4619      	mov	r1, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	440b      	add	r3, r1
 80072fe:	3230      	adds	r2, #48	@ 0x30
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	3301      	adds	r3, #1
 8007308:	613b      	str	r3, [r7, #16]
		x = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	429a      	cmp	r2, r3
 800731a:	dad9      	bge.n	80072d0 <convert_value_to_array2+0x68>
	}
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}

08007326 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007326:	b580      	push	{r7, lr}
 8007328:	ed2d 8b02 	vpush	{d8}
 800732c:	b08c      	sub	sp, #48	@ 0x30
 800732e:	af00      	add	r7, sp, #0
 8007330:	ed87 0a03 	vstr	s0, [r7, #12]
 8007334:	60b8      	str	r0, [r7, #8]
 8007336:	460b      	mov	r3, r1
 8007338:	71fb      	strb	r3, [r7, #7]
 800733a:	4613      	mov	r3, r2
 800733c:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8007346:	79ba      	ldrb	r2, [r7, #6]
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8007352:	edd7 7a03 	vldr	s15, [r7, #12]
 8007356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735e:	d50a      	bpl.n	8007376 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007360:	79fb      	ldrb	r3, [r7, #7]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	222d      	movs	r2, #45	@ 0x2d
 8007368:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 800736a:	edd7 7a03 	vldr	s15, [r7, #12]
 800736e:	eef1 7a67 	vneg.f32	s15, s15
 8007372:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007376:	2301      	movs	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	e021      	b.n	80073c0 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800738a:	eeb0 1b47 	vmov.f64	d1, d7
 800738e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007392:	f016 fd79 	bl	801de88 <pow>
 8007396:	eeb0 7b40 	vmov.f64	d7, d0
 800739a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800739e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 80073a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80073a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80073aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	da0b      	bge.n	80073cc <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	3301      	adds	r3, #1
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3301      	adds	r3, #1
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	dbd8      	blt.n	800737c <convert_value_to_array3+0x56>
 80073ca:	e000      	b.n	80073ce <convert_value_to_array3+0xa8>
			break;
 80073cc:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dc07      	bgt.n	80073ee <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	3301      	adds	r3, #1
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4413      	add	r3, r2
 80073e6:	222e      	movs	r2, #46	@ 0x2e
 80073e8:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dd0a      	ble.n	800740a <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 80073f4:	79fa      	ldrb	r2, [r7, #7]
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	4413      	add	r3, r2
 80073fa:	3301      	adds	r3, #1
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	4413      	add	r3, r2
 8007400:	222e      	movs	r2, #46	@ 0x2e
 8007402:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	3301      	adds	r3, #1
 8007408:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 800740a:	edd7 7a03 	vldr	s15, [r7, #12]
 800740e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	1e5a      	subs	r2, r3, #1
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007422:	eeb0 1b47 	vmov.f64	d1, d7
 8007426:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800742a:	f016 fd2d 	bl	801de88 <pow>
 800742e:	eeb0 7b40 	vmov.f64	d7, d0
 8007432:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007436:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800743a:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800743e:	2300      	movs	r3, #0
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	e05f      	b.n	8007504 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 8007444:	edd7 7a03 	vldr	s15, [r7, #12]
 8007448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	d93d      	bls.n	80074ce <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 8007452:	edd7 7a03 	vldr	s15, [r7, #12]
 8007456:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800746a:	eeb0 1b47 	vmov.f64	d1, d7
 800746e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007472:	f016 fd09 	bl	801de88 <pow>
 8007476:	eeb0 7b40 	vmov.f64	d7, d0
 800747a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800747e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007482:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007488:	3301      	adds	r3, #1
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	1e5a      	subs	r2, r3, #1
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800749c:	eeb0 1b47 	vmov.f64	d1, d7
 80074a0:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80074a4:	f016 fcf0 	bl	801de88 <pow>
 80074a8:	eeb0 7b40 	vmov.f64	d7, d0
 80074ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80074b0:	ee17 3a90 	vmov	r3, s15
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074be:	ed97 7a03 	vldr	s14, [r7, #12]
 80074c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	dabb      	bge.n	8007444 <convert_value_to_array3+0x11e>
 80074cc:	e000      	b.n	80074d0 <convert_value_to_array3+0x1aa>
				break;
 80074ce:	bf00      	nop
		}

        if(loopnum == kropka){
 80074d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d102      	bne.n	80074de <convert_value_to_array3+0x1b8>
            loopnum++;
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	3301      	adds	r3, #1
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80074de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	79f9      	ldrb	r1, [r7, #7]
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	440b      	add	r3, r1
 80074e8:	4619      	mov	r1, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	440b      	add	r3, r1
 80074ee:	3230      	adds	r2, #48	@ 0x30
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	3301      	adds	r3, #1
 80074f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	3301      	adds	r3, #1
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	3b02      	subs	r3, #2
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	429a      	cmp	r2, r3
 800750c:	dbbe      	blt.n	800748c <convert_value_to_array3+0x166>
	}
}
 800750e:	bf00      	nop
 8007510:	bf00      	nop
 8007512:	3730      	adds	r7, #48	@ 0x30
 8007514:	46bd      	mov	sp, r7
 8007516:	ecbd 8b02 	vpop	{d8}
 800751a:	bd80      	pop	{r7, pc}

0800751c <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007524:	4ba6      	ldr	r3, [pc, #664]	@ (80077c0 <uSD_Card_SendData_To_Buffer+0x2a4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	b218      	sxth	r0, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	01db      	lsls	r3, r3, #7
 8007530:	b2da      	uxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	b2db      	uxtb	r3, r3
 800753a:	3308      	adds	r3, #8
 800753c:	b2db      	uxtb	r3, r3
 800753e:	49a1      	ldr	r1, [pc, #644]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007540:	f7ff fe92 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	01db      	lsls	r3, r3, #7
 8007548:	3308      	adds	r3, #8
 800754a:	4a9e      	ldr	r2, [pc, #632]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800754c:	2120      	movs	r1, #32
 800754e:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007550:	4b9d      	ldr	r3, [pc, #628]	@ (80077c8 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b218      	sxth	r0, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	01db      	lsls	r3, r3, #7
 800755c:	b2db      	uxtb	r3, r3
 800755e:	3309      	adds	r3, #9
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	01db      	lsls	r3, r3, #7
 8007568:	b2db      	uxtb	r3, r3
 800756a:	330f      	adds	r3, #15
 800756c:	b2db      	uxtb	r3, r3
 800756e:	4995      	ldr	r1, [pc, #596]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007570:	f7ff fe7a 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	330f      	adds	r3, #15
 800757a:	4a92      	ldr	r2, [pc, #584]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800757c:	2120      	movs	r1, #32
 800757e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007580:	4b92      	ldr	r3, [pc, #584]	@ (80077cc <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b218      	sxth	r0, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	b2db      	uxtb	r3, r3
 800758e:	3310      	adds	r3, #16
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	b2db      	uxtb	r3, r3
 800759a:	3316      	adds	r3, #22
 800759c:	b2db      	uxtb	r3, r3
 800759e:	4989      	ldr	r1, [pc, #548]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075a0:	f7ff fe62 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	3316      	adds	r3, #22
 80075aa:	4a86      	ldr	r2, [pc, #536]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075ac:	2120      	movs	r1, #32
 80075ae:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 80075b0:	4b87      	ldr	r3, [pc, #540]	@ (80077d0 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b218      	sxth	r0, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	3317      	adds	r3, #23
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	01db      	lsls	r3, r3, #7
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	331d      	adds	r3, #29
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	497d      	ldr	r1, [pc, #500]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075d0:	f7ff fe4a 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	331d      	adds	r3, #29
 80075da:	4a7a      	ldr	r2, [pc, #488]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075dc:	2120      	movs	r1, #32
 80075de:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 80075e0:	4b7c      	ldr	r3, [pc, #496]	@ (80077d4 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b218      	sxth	r0, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	331e      	adds	r3, #30
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	3324      	adds	r3, #36	@ 0x24
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	4971      	ldr	r1, [pc, #452]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007600:	f7ff fe32 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	01db      	lsls	r3, r3, #7
 8007608:	3324      	adds	r3, #36	@ 0x24
 800760a:	4a6e      	ldr	r2, [pc, #440]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800760c:	2120      	movs	r1, #32
 800760e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007610:	4b71      	ldr	r3, [pc, #452]	@ (80077d8 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007612:	edd3 7a00 	vldr	s15, [r3]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	01db      	lsls	r3, r3, #7
 800761c:	b2db      	uxtb	r3, r3
 800761e:	3325      	adds	r3, #37	@ 0x25
 8007620:	b2d9      	uxtb	r1, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	b2db      	uxtb	r3, r3
 800762a:	332d      	adds	r3, #45	@ 0x2d
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	4864      	ldr	r0, [pc, #400]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007632:	eeb0 0a67 	vmov.f32	s0, s15
 8007636:	f7ff fe76 	bl	8007326 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	01db      	lsls	r3, r3, #7
 800763e:	332d      	adds	r3, #45	@ 0x2d
 8007640:	4a60      	ldr	r2, [pc, #384]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007642:	2120      	movs	r1, #32
 8007644:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007646:	4b65      	ldr	r3, [pc, #404]	@ (80077dc <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007648:	edd3 7a00 	vldr	s15, [r3]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	01db      	lsls	r3, r3, #7
 8007652:	b2db      	uxtb	r3, r3
 8007654:	332e      	adds	r3, #46	@ 0x2e
 8007656:	b2d9      	uxtb	r1, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	01db      	lsls	r3, r3, #7
 800765e:	b2db      	uxtb	r3, r3
 8007660:	3336      	adds	r3, #54	@ 0x36
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	4857      	ldr	r0, [pc, #348]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007668:	eeb0 0a67 	vmov.f32	s0, s15
 800766c:	f7ff fe5b 	bl	8007326 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	01db      	lsls	r3, r3, #7
 8007674:	3336      	adds	r3, #54	@ 0x36
 8007676:	4a53      	ldr	r2, [pc, #332]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007678:	2120      	movs	r1, #32
 800767a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800767c:	4b58      	ldr	r3, [pc, #352]	@ (80077e0 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800767e:	edd3 7a00 	vldr	s15, [r3]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	01db      	lsls	r3, r3, #7
 8007688:	b2db      	uxtb	r3, r3
 800768a:	3337      	adds	r3, #55	@ 0x37
 800768c:	b2d9      	uxtb	r1, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	b2db      	uxtb	r3, r3
 8007696:	333f      	adds	r3, #63	@ 0x3f
 8007698:	b2db      	uxtb	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	4849      	ldr	r0, [pc, #292]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800769e:	eeb0 0a67 	vmov.f32	s0, s15
 80076a2:	f7ff fe40 	bl	8007326 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	01db      	lsls	r3, r3, #7
 80076aa:	333f      	adds	r3, #63	@ 0x3f
 80076ac:	4a45      	ldr	r2, [pc, #276]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076ae:	2120      	movs	r1, #32
 80076b0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 80076b2:	4b4c      	ldr	r3, [pc, #304]	@ (80077e4 <uSD_Card_SendData_To_Buffer+0x2c8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	b218      	sxth	r0, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	01db      	lsls	r3, r3, #7
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	3340      	adds	r3, #64	@ 0x40
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	01db      	lsls	r3, r3, #7
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	3348      	adds	r3, #72	@ 0x48
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	493c      	ldr	r1, [pc, #240]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076d2:	f7ff fdc9 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	01db      	lsls	r3, r3, #7
 80076da:	3348      	adds	r3, #72	@ 0x48
 80076dc:	4a39      	ldr	r2, [pc, #228]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076de:	2120      	movs	r1, #32
 80076e0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 80076e2:	4b41      	ldr	r3, [pc, #260]	@ (80077e8 <uSD_Card_SendData_To_Buffer+0x2cc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	b218      	sxth	r0, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	01db      	lsls	r3, r3, #7
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	3349      	adds	r3, #73	@ 0x49
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	01db      	lsls	r3, r3, #7
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	3351      	adds	r3, #81	@ 0x51
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	4930      	ldr	r1, [pc, #192]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007702:	f7ff fdb1 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	01db      	lsls	r3, r3, #7
 800770a:	3351      	adds	r3, #81	@ 0x51
 800770c:	4a2d      	ldr	r2, [pc, #180]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800770e:	2120      	movs	r1, #32
 8007710:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007712:	4b36      	ldr	r3, [pc, #216]	@ (80077ec <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	b218      	sxth	r0, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	01db      	lsls	r3, r3, #7
 800771e:	b2db      	uxtb	r3, r3
 8007720:	3352      	adds	r3, #82	@ 0x52
 8007722:	b2da      	uxtb	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	01db      	lsls	r3, r3, #7
 800772a:	b2db      	uxtb	r3, r3
 800772c:	335a      	adds	r3, #90	@ 0x5a
 800772e:	b2db      	uxtb	r3, r3
 8007730:	4924      	ldr	r1, [pc, #144]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007732:	f7ff fd99 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	01db      	lsls	r3, r3, #7
 800773a:	335a      	adds	r3, #90	@ 0x5a
 800773c:	4a21      	ldr	r2, [pc, #132]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800773e:	2120      	movs	r1, #32
 8007740:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007742:	4b2b      	ldr	r3, [pc, #172]	@ (80077f0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007744:	edd3 7a00 	vldr	s15, [r3]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	01db      	lsls	r3, r3, #7
 800774e:	b2db      	uxtb	r3, r3
 8007750:	335b      	adds	r3, #91	@ 0x5b
 8007752:	b2d9      	uxtb	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	01db      	lsls	r3, r3, #7
 800775a:	b2db      	uxtb	r3, r3
 800775c:	3362      	adds	r3, #98	@ 0x62
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	4818      	ldr	r0, [pc, #96]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007764:	eeb0 0a67 	vmov.f32	s0, s15
 8007768:	f7ff fddd 	bl	8007326 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	01db      	lsls	r3, r3, #7
 8007770:	3362      	adds	r3, #98	@ 0x62
 8007772:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007774:	2120      	movs	r1, #32
 8007776:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007778:	4b1d      	ldr	r3, [pc, #116]	@ (80077f0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 800777a:	edd3 7a01 	vldr	s15, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	01db      	lsls	r3, r3, #7
 8007784:	b2db      	uxtb	r3, r3
 8007786:	3363      	adds	r3, #99	@ 0x63
 8007788:	b2d9      	uxtb	r1, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	01db      	lsls	r3, r3, #7
 8007790:	b2db      	uxtb	r3, r3
 8007792:	336a      	adds	r3, #106	@ 0x6a
 8007794:	b2db      	uxtb	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	480a      	ldr	r0, [pc, #40]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800779a:	eeb0 0a67 	vmov.f32	s0, s15
 800779e:	f7ff fdc2 	bl	8007326 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	01db      	lsls	r3, r3, #7
 80077a6:	336a      	adds	r3, #106	@ 0x6a
 80077a8:	4a06      	ldr	r2, [pc, #24]	@ (80077c4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077aa:	2120      	movs	r1, #32
 80077ac:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 80077ae:	4b10      	ldr	r3, [pc, #64]	@ (80077f0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80077b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	01db      	lsls	r3, r3, #7
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	336b      	adds	r3, #107	@ 0x6b
 80077be:	e019      	b.n	80077f4 <uSD_Card_SendData_To_Buffer+0x2d8>
 80077c0:	000041c4 	.word	0x000041c4
 80077c4:	24002f28 	.word	0x24002f28
 80077c8:	0000418c 	.word	0x0000418c
 80077cc:	0000418e 	.word	0x0000418e
 80077d0:	00004190 	.word	0x00004190
 80077d4:	00004192 	.word	0x00004192
 80077d8:	0000406c 	.word	0x0000406c
 80077dc:	00004068 	.word	0x00004068
 80077e0:	00004070 	.word	0x00004070
 80077e4:	0000409c 	.word	0x0000409c
 80077e8:	000040a0 	.word	0x000040a0
 80077ec:	000040a4 	.word	0x000040a4
 80077f0:	0000007c 	.word	0x0000007c
 80077f4:	b2d9      	uxtb	r1, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	01db      	lsls	r3, r3, #7
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	3372      	adds	r3, #114	@ 0x72
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	482d      	ldr	r0, [pc, #180]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007806:	eeb0 0a67 	vmov.f32	s0, s15
 800780a:	f7ff fd8c 	bl	8007326 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	01db      	lsls	r3, r3, #7
 8007812:	3372      	adds	r3, #114	@ 0x72
 8007814:	4a29      	ldr	r2, [pc, #164]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007816:	2120      	movs	r1, #32
 8007818:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 800781a:	4b29      	ldr	r3, [pc, #164]	@ (80078c0 <uSD_Card_SendData_To_Buffer+0x3a4>)
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b218      	sxth	r0, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	01db      	lsls	r3, r3, #7
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3373      	adds	r3, #115	@ 0x73
 800782a:	b2da      	uxtb	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	01db      	lsls	r3, r3, #7
 8007832:	b2db      	uxtb	r3, r3
 8007834:	3377      	adds	r3, #119	@ 0x77
 8007836:	b2db      	uxtb	r3, r3
 8007838:	4920      	ldr	r1, [pc, #128]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 800783a:	f7ff fd15 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	01db      	lsls	r3, r3, #7
 8007842:	3377      	adds	r3, #119	@ 0x77
 8007844:	4a1d      	ldr	r2, [pc, #116]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007846:	2120      	movs	r1, #32
 8007848:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 800784a:	4b1d      	ldr	r3, [pc, #116]	@ (80078c0 <uSD_Card_SendData_To_Buffer+0x3a4>)
 800784c:	8a5b      	ldrh	r3, [r3, #18]
 800784e:	b218      	sxth	r0, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	01db      	lsls	r3, r3, #7
 8007856:	b2db      	uxtb	r3, r3
 8007858:	3378      	adds	r3, #120	@ 0x78
 800785a:	b2da      	uxtb	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	01db      	lsls	r3, r3, #7
 8007862:	b2db      	uxtb	r3, r3
 8007864:	337a      	adds	r3, #122	@ 0x7a
 8007866:	b2db      	uxtb	r3, r3
 8007868:	4914      	ldr	r1, [pc, #80]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 800786a:	f7ff fcfd 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	01db      	lsls	r3, r3, #7
 8007872:	337a      	adds	r3, #122	@ 0x7a
 8007874:	4a11      	ldr	r2, [pc, #68]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007876:	2120      	movs	r1, #32
 8007878:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 800787a:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <uSD_Card_SendData_To_Buffer+0x3a8>)
 800787c:	edd3 7a00 	vldr	s15, [r3]
 8007880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007884:	ee17 3a90 	vmov	r3, s15
 8007888:	b218      	sxth	r0, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	01db      	lsls	r3, r3, #7
 8007890:	b2db      	uxtb	r3, r3
 8007892:	337b      	adds	r3, #123	@ 0x7b
 8007894:	b2da      	uxtb	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	01db      	lsls	r3, r3, #7
 800789c:	b2db      	uxtb	r3, r3
 800789e:	337f      	adds	r3, #127	@ 0x7f
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	4906      	ldr	r1, [pc, #24]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078a4:	f7ff fce0 	bl	8007268 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3301      	adds	r3, #1
 80078ac:	01db      	lsls	r3, r3, #7
 80078ae:	4a03      	ldr	r2, [pc, #12]	@ (80078bc <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078b0:	210a      	movs	r1, #10
 80078b2:	54d1      	strb	r1, [r2, r3]
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	24002f28 	.word	0x24002f28
 80078c0:	00000178 	.word	0x00000178
 80078c4:	00000058 	.word	0x00000058

080078c8 <Stack_Push>:

void Stack_Push(float data){
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 80078d2:	4b22      	ldr	r3, [pc, #136]	@ (800795c <Stack_Push+0x94>)
 80078d4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078d8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80078dc:	3301      	adds	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	4b1e      	ldr	r3, [pc, #120]	@ (800795c <Stack_Push+0x94>)
 80078e2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078e6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 80078ea:	4b1c      	ldr	r3, [pc, #112]	@ (800795c <Stack_Push+0x94>)
 80078ec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078f0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80078f4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80078f8:	d105      	bne.n	8007906 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 80078fa:	4b18      	ldr	r3, [pc, #96]	@ (800795c <Stack_Push+0x94>)
 80078fc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007900:	2200      	movs	r2, #0
 8007902:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007906:	4b15      	ldr	r3, [pc, #84]	@ (800795c <Stack_Push+0x94>)
 8007908:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800790c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007910:	4a12      	ldr	r2, [pc, #72]	@ (800795c <Stack_Push+0x94>)
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 800791a:	4b10      	ldr	r3, [pc, #64]	@ (800795c <Stack_Push+0x94>)
 800791c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007920:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007924:	3301      	adds	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	4b0c      	ldr	r3, [pc, #48]	@ (800795c <Stack_Push+0x94>)
 800792a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800792e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007932:	4b0a      	ldr	r3, [pc, #40]	@ (800795c <Stack_Push+0x94>)
 8007934:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007938:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800793c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007940:	d105      	bne.n	800794e <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007942:	4b06      	ldr	r3, [pc, #24]	@ (800795c <Stack_Push+0x94>)
 8007944:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007948:	2200      	movs	r2, #0
 800794a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	0000019c 	.word	0x0000019c

08007960 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007964:	4b05      	ldr	r3, [pc, #20]	@ (800797c <ROOL_MAX_VAL+0x1c>)
 8007966:	2202      	movs	r2, #2
 8007968:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 800796c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007970:	4618      	mov	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	00000178 	.word	0x00000178

08007980 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007984:	4b04      	ldr	r3, [pc, #16]	@ (8007998 <ROOL_MIN_VAL+0x18>)
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 800798c:	4b03      	ldr	r3, [pc, #12]	@ (800799c <ROOL_MIN_VAL+0x1c>)
}
 800798e:	4618      	mov	r0, r3
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	00000178 	.word	0x00000178
 800799c:	ffffec78 	.word	0xffffec78

080079a0 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 80079a4:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <PITCH_MAX_VAL+0x1c>)
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 80079ac:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	00000178 	.word	0x00000178

080079c0 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <PITCH_MIN_VAL+0x18>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 80079cc:	4b03      	ldr	r3, [pc, #12]	@ (80079dc <PITCH_MIN_VAL+0x1c>)
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	00000178 	.word	0x00000178
 80079dc:	ffffec78 	.word	0xffffec78

080079e0 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 80079e4:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <YAW_MAX_VAL+0x1c>)
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 80079ec:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	00000178 	.word	0x00000178

08007a00 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007a04:	4b04      	ldr	r3, [pc, #16]	@ (8007a18 <YAW_MIN_VAL+0x18>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007a0c:	4b03      	ldr	r3, [pc, #12]	@ (8007a1c <YAW_MIN_VAL+0x1c>)
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	00000178 	.word	0x00000178
 8007a1c:	ffffec78 	.word	0xffffec78

08007a20 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007a24:	4b08      	ldr	r3, [pc, #32]	@ (8007a48 <ROOL_GOOD_VAL+0x28>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007a2c:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <ROOL_GOOD_VAL+0x2c>)
 8007a2e:	edd3 7a00 	vldr	s15, [r3]
 8007a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a36:	ee17 3a90 	vmov	r3, s15
 8007a3a:	b21b      	sxth	r3, r3
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	00000178 	.word	0x00000178
 8007a4c:	000040c8 	.word	0x000040c8

08007a50 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007a54:	4b08      	ldr	r3, [pc, #32]	@ (8007a78 <PITCH_GOOD_VAL+0x28>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007a5c:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <PITCH_GOOD_VAL+0x2c>)
 8007a5e:	edd3 7a00 	vldr	s15, [r3]
 8007a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a66:	ee17 3a90 	vmov	r3, s15
 8007a6a:	b21b      	sxth	r3, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	00000178 	.word	0x00000178
 8007a7c:	000040c0 	.word	0x000040c0

08007a80 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007a84:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <YAW_GOOD_VAL+0x28>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007a8c:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <YAW_GOOD_VAL+0x2c>)
 8007a8e:	edd3 7a00 	vldr	s15, [r3]
 8007a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a96:	ee17 3a90 	vmov	r3, s15
 8007a9a:	b21b      	sxth	r3, r3
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	00000178 	.word	0x00000178
 8007aac:	000040c4 	.word	0x000040c4

08007ab0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007ac2:	f003 fc3d 	bl	800b340 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007ad2:	231f      	movs	r3, #31
 8007ad4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007ad6:	2387      	movs	r3, #135	@ 0x87
 8007ad8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007af2:	463b      	mov	r3, r7
 8007af4:	4618      	mov	r0, r3
 8007af6:	f003 fc5b 	bl	800b3b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007afa:	2004      	movs	r0, #4
 8007afc:	f003 fc38 	bl	800b370 <HAL_MPU_Enable>

}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b0c:	b672      	cpsid	i
}
 8007b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b10:	bf00      	nop
 8007b12:	e7fd      	b.n	8007b10 <Error_Handler+0x8>

08007b14 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007b18:	4b27      	ldr	r3, [pc, #156]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b1a:	4a28      	ldr	r2, [pc, #160]	@ (8007bbc <MX_SPI2_Init+0xa8>)
 8007b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007b1e:	4b26      	ldr	r3, [pc, #152]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007b24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007b26:	4b24      	ldr	r3, [pc, #144]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b2c:	4b22      	ldr	r3, [pc, #136]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b2e:	2207      	movs	r2, #7
 8007b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b32:	4b21      	ldr	r3, [pc, #132]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007b38:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b46:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b52:	4b19      	ldr	r3, [pc, #100]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b58:	4b17      	ldr	r3, [pc, #92]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007b5e:	4b16      	ldr	r3, [pc, #88]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007b64:	4b14      	ldr	r3, [pc, #80]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007b6c:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007b72:	4b11      	ldr	r3, [pc, #68]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007b78:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007b90:	4b09      	ldr	r3, [pc, #36]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007b96:	4b08      	ldr	r3, [pc, #32]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007ba2:	4805      	ldr	r0, [pc, #20]	@ (8007bb8 <MX_SPI2_Init+0xa4>)
 8007ba4:	f00c fc8e 	bl	80144c4 <HAL_SPI_Init>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007bae:	f7ff ffab 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007bb2:	bf00      	nop
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	240001ec 	.word	0x240001ec
 8007bbc:	40003800 	.word	0x40003800

08007bc0 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007bc4:	4b27      	ldr	r3, [pc, #156]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bc6:	4a28      	ldr	r2, [pc, #160]	@ (8007c68 <MX_SPI6_Init+0xa8>)
 8007bc8:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007bca:	4b26      	ldr	r3, [pc, #152]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bcc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007bd0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007bd2:	4b24      	ldr	r3, [pc, #144]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007bd8:	4b22      	ldr	r3, [pc, #136]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bda:	2207      	movs	r2, #7
 8007bdc:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bde:	4b21      	ldr	r3, [pc, #132]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007be4:	4b1f      	ldr	r3, [pc, #124]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007bea:	4b1e      	ldr	r3, [pc, #120]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007bf0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bfe:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c04:	4b17      	ldr	r3, [pc, #92]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c10:	4b14      	ldr	r3, [pc, #80]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007c16:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007c18:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007c1e:	4b11      	ldr	r3, [pc, #68]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007c24:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007c30:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007c3c:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007c42:	4b08      	ldr	r3, [pc, #32]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007c48:	4b06      	ldr	r3, [pc, #24]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007c4e:	4805      	ldr	r0, [pc, #20]	@ (8007c64 <MX_SPI6_Init+0xa4>)
 8007c50:	f00c fc38 	bl	80144c4 <HAL_SPI_Init>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007c5a:	f7ff ff55 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007c5e:	bf00      	nop
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	24000274 	.word	0x24000274
 8007c68:	58001400 	.word	0x58001400

08007c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b0ba      	sub	sp, #232	@ 0xe8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c84:	f107 0318 	add.w	r3, r7, #24
 8007c88:	22b8      	movs	r2, #184	@ 0xb8
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f016 f871 	bl	801dd74 <memset>
  if(spiHandle->Instance==SPI2)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a77      	ldr	r2, [pc, #476]	@ (8007e74 <HAL_SPI_MspInit+0x208>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	f040 8089 	bne.w	8007db0 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007c9e:	4b76      	ldr	r3, [pc, #472]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ca4:	4a74      	ldr	r2, [pc, #464]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007caa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007cae:	4b72      	ldr	r3, [pc, #456]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cbc:	4b6e      	ldr	r3, [pc, #440]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cc2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007cf4:	2305      	movs	r3, #5
 8007cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007cfe:	4619      	mov	r1, r3
 8007d00:	485e      	ldr	r0, [pc, #376]	@ (8007e7c <HAL_SPI_MspInit+0x210>)
 8007d02:	f006 f9e7 	bl	800e0d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007d06:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d20:	2305      	movs	r3, #5
 8007d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4853      	ldr	r0, [pc, #332]	@ (8007e7c <HAL_SPI_MspInit+0x210>)
 8007d2e:	f006 f9d1 	bl	800e0d4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007d32:	4b53      	ldr	r3, [pc, #332]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d34:	4a53      	ldr	r2, [pc, #332]	@ (8007e84 <HAL_SPI_MspInit+0x218>)
 8007d36:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007d38:	4b51      	ldr	r3, [pc, #324]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d3a:	2228      	movs	r2, #40	@ 0x28
 8007d3c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d3e:	4b50      	ldr	r3, [pc, #320]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d40:	2240      	movs	r2, #64	@ 0x40
 8007d42:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d44:	4b4e      	ldr	r3, [pc, #312]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d50:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d52:	4b4b      	ldr	r3, [pc, #300]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d58:	4b49      	ldr	r3, [pc, #292]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007d5e:	4b48      	ldr	r3, [pc, #288]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d64:	4b46      	ldr	r3, [pc, #280]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007d6a:	4b45      	ldr	r3, [pc, #276]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007d70:	4b43      	ldr	r3, [pc, #268]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d72:	2203      	movs	r2, #3
 8007d74:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007d76:	4b42      	ldr	r3, [pc, #264]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007d7c:	4b40      	ldr	r3, [pc, #256]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007d82:	483f      	ldr	r0, [pc, #252]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d84:	f003 fb54 	bl	800b430 <HAL_DMA_Init>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8007d8e:	f7ff febb 	bl	8007b08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a3a      	ldr	r2, [pc, #232]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d96:	679a      	str	r2, [r3, #120]	@ 0x78
 8007d98:	4a39      	ldr	r2, [pc, #228]	@ (8007e80 <HAL_SPI_MspInit+0x214>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2100      	movs	r1, #0
 8007da2:	2024      	movs	r0, #36	@ 0x24
 8007da4:	f003 fa97 	bl	800b2d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007da8:	2024      	movs	r0, #36	@ 0x24
 8007daa:	f003 faae 	bl	800b30a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8007dae:	e05c      	b.n	8007e6a <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a34      	ldr	r2, [pc, #208]	@ (8007e88 <HAL_SPI_MspInit+0x21c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d157      	bne.n	8007e6a <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8007dba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8007dc6:	2318      	movs	r3, #24
 8007dc8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8007dca:	23c8      	movs	r3, #200	@ 0xc8
 8007dcc:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8007dd2:	230a      	movs	r3, #10
 8007dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8007dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007de2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8007de8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007dec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007df0:	f107 0318 	add.w	r3, r7, #24
 8007df4:	4618      	mov	r0, r3
 8007df6:	f009 ff7f 	bl	8011cf8 <HAL_RCCEx_PeriphCLKConfig>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8007e00:	f7ff fe82 	bl	8007b08 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8007e04:	4b1c      	ldr	r3, [pc, #112]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007e0c:	f043 0320 	orr.w	r3, r3, #32
 8007e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e14:	4b18      	ldr	r3, [pc, #96]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e22:	4b15      	ldr	r3, [pc, #84]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e28:	4a13      	ldr	r2, [pc, #76]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007e2a:	f043 0302 	orr.w	r3, r3, #2
 8007e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e32:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <HAL_SPI_MspInit+0x20c>)
 8007e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007e40:	2338      	movs	r3, #56	@ 0x38
 8007e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e46:	2302      	movs	r3, #2
 8007e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e52:	2300      	movs	r3, #0
 8007e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4805      	ldr	r0, [pc, #20]	@ (8007e7c <HAL_SPI_MspInit+0x210>)
 8007e66:	f006 f935 	bl	800e0d4 <HAL_GPIO_Init>
}
 8007e6a:	bf00      	nop
 8007e6c:	37e8      	adds	r7, #232	@ 0xe8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	40003800 	.word	0x40003800
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	58020400 	.word	0x58020400
 8007e80:	240002fc 	.word	0x240002fc
 8007e84:	40020010 	.word	0x40020010
 8007e88:	58001400 	.word	0x58001400

08007e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e92:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <HAL_MspInit+0x30>)
 8007e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e98:	4a08      	ldr	r2, [pc, #32]	@ (8007ebc <HAL_MspInit+0x30>)
 8007e9a:	f043 0302 	orr.w	r3, r3, #2
 8007e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007ea2:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <HAL_MspInit+0x30>)
 8007ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	58024400 	.word	0x58024400

08007ec0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <SDTimer_Handler+0x34>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <SDTimer_Handler+0x16>
    Timer1--;
 8007ecc:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <SDTimer_Handler+0x34>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	4a08      	ldr	r2, [pc, #32]	@ (8007ef4 <SDTimer_Handler+0x34>)
 8007ed4:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007ed6:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <SDTimer_Handler+0x38>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <SDTimer_Handler+0x28>
    Timer2--;
 8007ede:	4b06      	ldr	r3, [pc, #24]	@ (8007ef8 <SDTimer_Handler+0x38>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4a04      	ldr	r2, [pc, #16]	@ (8007ef8 <SDTimer_Handler+0x38>)
 8007ee6:	6013      	str	r3, [r2, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	24000378 	.word	0x24000378
 8007ef8:	2400037c 	.word	0x2400037c
 8007efc:	00000000 	.word	0x00000000

08007f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007f06:	2200      	movs	r2, #0
 8007f08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f0c:	48bc      	ldr	r0, [pc, #752]	@ (8008200 <NMI_Handler+0x300>)
 8007f0e:	f006 faa1 	bl	800e454 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007f12:	2200      	movs	r2, #0
 8007f14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f18:	48ba      	ldr	r0, [pc, #744]	@ (8008204 <NMI_Handler+0x304>)
 8007f1a:	f006 fa9b 	bl	800e454 <HAL_GPIO_WritePin>
	LED_R_1;
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007f24:	48b7      	ldr	r0, [pc, #732]	@ (8008204 <NMI_Handler+0x304>)
 8007f26:	f006 fa95 	bl	800e454 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007f2a:	48b7      	ldr	r0, [pc, #732]	@ (8008208 <NMI_Handler+0x308>)
 8007f2c:	f015 fd2a 	bl	801d984 <f_close>

	wanted_rool = 0;
 8007f30:	4bb6      	ldr	r3, [pc, #728]	@ (800820c <NMI_Handler+0x30c>)
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8007f38:	4bb5      	ldr	r3, [pc, #724]	@ (8008210 <NMI_Handler+0x310>)
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8007f40:	4bb4      	ldr	r3, [pc, #720]	@ (8008214 <NMI_Handler+0x314>)
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8007f48:	4bb3      	ldr	r3, [pc, #716]	@ (8008218 <NMI_Handler+0x318>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b21a      	sxth	r2, r3
 8007f4e:	4bb3      	ldr	r3, [pc, #716]	@ (800821c <NMI_Handler+0x31c>)
 8007f50:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8007f52:	2001      	movs	r0, #1
 8007f54:	f001 f942 	bl	80091dc <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8007f58:	4bb1      	ldr	r3, [pc, #708]	@ (8008220 <NMI_Handler+0x320>)
 8007f5a:	edd3 7a00 	vldr	s15, [r3]
 8007f5e:	4bb1      	ldr	r3, [pc, #708]	@ (8008224 <NMI_Handler+0x324>)
 8007f60:	ed93 7a00 	vldr	s14, [r3]
 8007f64:	4bb0      	ldr	r3, [pc, #704]	@ (8008228 <NMI_Handler+0x328>)
 8007f66:	edd3 6a00 	vldr	s13, [r3]
 8007f6a:	4bb0      	ldr	r3, [pc, #704]	@ (800822c <NMI_Handler+0x32c>)
 8007f6c:	ed93 6a00 	vldr	s12, [r3]
 8007f70:	4baf      	ldr	r3, [pc, #700]	@ (8008230 <NMI_Handler+0x330>)
 8007f72:	edd3 5a00 	vldr	s11, [r3]
 8007f76:	4baf      	ldr	r3, [pc, #700]	@ (8008234 <NMI_Handler+0x334>)
 8007f78:	ed93 5a00 	vldr	s10, [r3]
 8007f7c:	4bae      	ldr	r3, [pc, #696]	@ (8008238 <NMI_Handler+0x338>)
 8007f7e:	edd3 4a00 	vldr	s9, [r3]
 8007f82:	4bae      	ldr	r3, [pc, #696]	@ (800823c <NMI_Handler+0x33c>)
 8007f84:	ed93 4a00 	vldr	s8, [r3]
 8007f88:	4bad      	ldr	r3, [pc, #692]	@ (8008240 <NMI_Handler+0x340>)
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	4bad      	ldr	r3, [pc, #692]	@ (8008244 <NMI_Handler+0x344>)
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	eef0 3a44 	vmov.f32	s7, s8
 8007f94:	eeb0 3a64 	vmov.f32	s6, s9
 8007f98:	eef0 2a45 	vmov.f32	s5, s10
 8007f9c:	eeb0 2a65 	vmov.f32	s4, s11
 8007fa0:	eef0 1a46 	vmov.f32	s3, s12
 8007fa4:	eeb0 1a66 	vmov.f32	s2, s13
 8007fa8:	eef0 0a47 	vmov.f32	s1, s14
 8007fac:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb0:	4ba5      	ldr	r3, [pc, #660]	@ (8008248 <NMI_Handler+0x348>)
 8007fb2:	4aa6      	ldr	r2, [pc, #664]	@ (800824c <NMI_Handler+0x34c>)
 8007fb4:	49a6      	ldr	r1, [pc, #664]	@ (8008250 <NMI_Handler+0x350>)
 8007fb6:	48a7      	ldr	r0, [pc, #668]	@ (8008254 <NMI_Handler+0x354>)
 8007fb8:	f7f9 fb14 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8007fbc:	4ba5      	ldr	r3, [pc, #660]	@ (8008254 <NMI_Handler+0x354>)
 8007fbe:	edd3 7a00 	vldr	s15, [r3]
 8007fc2:	4ba3      	ldr	r3, [pc, #652]	@ (8008250 <NMI_Handler+0x350>)
 8007fc4:	ed93 7a00 	vldr	s14, [r3]
 8007fc8:	4ba0      	ldr	r3, [pc, #640]	@ (800824c <NMI_Handler+0x34c>)
 8007fca:	edd3 6a00 	vldr	s13, [r3]
 8007fce:	49a2      	ldr	r1, [pc, #648]	@ (8008258 <NMI_Handler+0x358>)
 8007fd0:	48a2      	ldr	r0, [pc, #648]	@ (800825c <NMI_Handler+0x35c>)
 8007fd2:	eeb0 1a66 	vmov.f32	s2, s13
 8007fd6:	eef0 0a47 	vmov.f32	s1, s14
 8007fda:	eeb0 0a67 	vmov.f32	s0, s15
 8007fde:	f7f9 fa83 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8007fe2:	4b9e      	ldr	r3, [pc, #632]	@ (800825c <NMI_Handler+0x35c>)
 8007fe4:	edd3 7a00 	vldr	s15, [r3]
 8007fe8:	4b9b      	ldr	r3, [pc, #620]	@ (8008258 <NMI_Handler+0x358>)
 8007fea:	ed93 7a00 	vldr	s14, [r3]
 8007fee:	4b9c      	ldr	r3, [pc, #624]	@ (8008260 <NMI_Handler+0x360>)
 8007ff0:	edd3 6a00 	vldr	s13, [r3]
 8007ff4:	4b94      	ldr	r3, [pc, #592]	@ (8008248 <NMI_Handler+0x348>)
 8007ff6:	ed93 6a00 	vldr	s12, [r3]
 8007ffa:	4b92      	ldr	r3, [pc, #584]	@ (8008244 <NMI_Handler+0x344>)
 8007ffc:	edd3 5a00 	vldr	s11, [r3]
 8008000:	4b8f      	ldr	r3, [pc, #572]	@ (8008240 <NMI_Handler+0x340>)
 8008002:	ed93 5a00 	vldr	s10, [r3]
 8008006:	eef0 2a45 	vmov.f32	s5, s10
 800800a:	eeb0 2a65 	vmov.f32	s4, s11
 800800e:	eef0 1a46 	vmov.f32	s3, s12
 8008012:	eeb0 1a66 	vmov.f32	s2, s13
 8008016:	eef0 0a47 	vmov.f32	s1, s14
 800801a:	eeb0 0a67 	vmov.f32	s0, s15
 800801e:	4891      	ldr	r0, [pc, #580]	@ (8008264 <NMI_Handler+0x364>)
 8008020:	f7f9 fc5a 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8008024:	4b8f      	ldr	r3, [pc, #572]	@ (8008264 <NMI_Handler+0x364>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a8f      	ldr	r2, [pc, #572]	@ (8008268 <NMI_Handler+0x368>)
 800802a:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 800802c:	4b8d      	ldr	r3, [pc, #564]	@ (8008264 <NMI_Handler+0x364>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a8e      	ldr	r2, [pc, #568]	@ (800826c <NMI_Handler+0x36c>)
 8008032:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8008034:	4b8b      	ldr	r3, [pc, #556]	@ (8008264 <NMI_Handler+0x364>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a8d      	ldr	r2, [pc, #564]	@ (8008270 <NMI_Handler+0x370>)
 800803a:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 800803c:	4b73      	ldr	r3, [pc, #460]	@ (800820c <NMI_Handler+0x30c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a8c      	ldr	r2, [pc, #560]	@ (8008274 <NMI_Handler+0x374>)
 8008042:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8008044:	4b72      	ldr	r3, [pc, #456]	@ (8008210 <NMI_Handler+0x310>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a8b      	ldr	r2, [pc, #556]	@ (8008278 <NMI_Handler+0x378>)
 800804a:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 800804c:	4b71      	ldr	r3, [pc, #452]	@ (8008214 <NMI_Handler+0x314>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a8a      	ldr	r2, [pc, #552]	@ (800827c <NMI_Handler+0x37c>)
 8008052:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8008054:	4b8a      	ldr	r3, [pc, #552]	@ (8008280 <NMI_Handler+0x380>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008060:	4b6b      	ldr	r3, [pc, #428]	@ (8008210 <NMI_Handler+0x310>)
 8008062:	edd3 6a00 	vldr	s13, [r3]
 8008066:	4b80      	ldr	r3, [pc, #512]	@ (8008268 <NMI_Handler+0x368>)
 8008068:	edd3 7a00 	vldr	s15, [r3]
 800806c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008078:	ee17 2a90 	vmov	r2, s15
 800807c:	4b80      	ldr	r3, [pc, #512]	@ (8008280 <NMI_Handler+0x380>)
 800807e:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008080:	4b80      	ldr	r3, [pc, #512]	@ (8008284 <NMI_Handler+0x384>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800808c:	4b5f      	ldr	r3, [pc, #380]	@ (800820c <NMI_Handler+0x30c>)
 800808e:	edd3 6a00 	vldr	s13, [r3]
 8008092:	4b76      	ldr	r3, [pc, #472]	@ (800826c <NMI_Handler+0x36c>)
 8008094:	edd3 7a00 	vldr	s15, [r3]
 8008098:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800809c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080a4:	ee17 2a90 	vmov	r2, s15
 80080a8:	4b76      	ldr	r3, [pc, #472]	@ (8008284 <NMI_Handler+0x384>)
 80080aa:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 80080ac:	4b76      	ldr	r3, [pc, #472]	@ (8008288 <NMI_Handler+0x388>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080b8:	4b56      	ldr	r3, [pc, #344]	@ (8008214 <NMI_Handler+0x314>)
 80080ba:	edd3 6a00 	vldr	s13, [r3]
 80080be:	4b6c      	ldr	r3, [pc, #432]	@ (8008270 <NMI_Handler+0x370>)
 80080c0:	edd3 7a00 	vldr	s15, [r3]
 80080c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80080c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080d0:	ee17 2a90 	vmov	r2, s15
 80080d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008288 <NMI_Handler+0x388>)
 80080d6:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 80080d8:	4b6c      	ldr	r3, [pc, #432]	@ (800828c <NMI_Handler+0x38c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	ee07 3a90 	vmov	s15, r3
 80080e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008290 <NMI_Handler+0x390>)
 80080e6:	edd3 6a00 	vldr	s13, [r3]
 80080ea:	4b57      	ldr	r3, [pc, #348]	@ (8008248 <NMI_Handler+0x348>)
 80080ec:	edd3 7a00 	vldr	s15, [r3]
 80080f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80080f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080fc:	ee17 2a90 	vmov	r2, s15
 8008100:	4b62      	ldr	r3, [pc, #392]	@ (800828c <NMI_Handler+0x38c>)
 8008102:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 8008104:	4b63      	ldr	r3, [pc, #396]	@ (8008294 <NMI_Handler+0x394>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	ee07 3a90 	vmov	s15, r3
 800810c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008110:	4b61      	ldr	r3, [pc, #388]	@ (8008298 <NMI_Handler+0x398>)
 8008112:	edd3 6a00 	vldr	s13, [r3]
 8008116:	4b4b      	ldr	r3, [pc, #300]	@ (8008244 <NMI_Handler+0x344>)
 8008118:	edd3 7a00 	vldr	s15, [r3]
 800811c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008128:	ee17 2a90 	vmov	r2, s15
 800812c:	4b59      	ldr	r3, [pc, #356]	@ (8008294 <NMI_Handler+0x394>)
 800812e:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8008130:	4b5a      	ldr	r3, [pc, #360]	@ (800829c <NMI_Handler+0x39c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800813c:	4b58      	ldr	r3, [pc, #352]	@ (80082a0 <NMI_Handler+0x3a0>)
 800813e:	edd3 6a00 	vldr	s13, [r3]
 8008142:	4b3f      	ldr	r3, [pc, #252]	@ (8008240 <NMI_Handler+0x340>)
 8008144:	edd3 7a00 	vldr	s15, [r3]
 8008148:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800814c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008154:	ee17 2a90 	vmov	r2, s15
 8008158:	4b50      	ldr	r3, [pc, #320]	@ (800829c <NMI_Handler+0x39c>)
 800815a:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 800815c:	2201      	movs	r2, #1
 800815e:	4951      	ldr	r1, [pc, #324]	@ (80082a4 <NMI_Handler+0x3a4>)
 8008160:	484b      	ldr	r0, [pc, #300]	@ (8008290 <NMI_Handler+0x390>)
 8008162:	f7fb fc33 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8008166:	2202      	movs	r2, #2
 8008168:	494f      	ldr	r1, [pc, #316]	@ (80082a8 <NMI_Handler+0x3a8>)
 800816a:	484b      	ldr	r0, [pc, #300]	@ (8008298 <NMI_Handler+0x398>)
 800816c:	f7fb fc2e 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008170:	2204      	movs	r2, #4
 8008172:	494e      	ldr	r1, [pc, #312]	@ (80082ac <NMI_Handler+0x3ac>)
 8008174:	484e      	ldr	r0, [pc, #312]	@ (80082b0 <NMI_Handler+0x3b0>)
 8008176:	f7fb fc29 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 800817a:	2205      	movs	r2, #5
 800817c:	494d      	ldr	r1, [pc, #308]	@ (80082b4 <NMI_Handler+0x3b4>)
 800817e:	484e      	ldr	r0, [pc, #312]	@ (80082b8 <NMI_Handler+0x3b8>)
 8008180:	f7fb fc24 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8008184:	2206      	movs	r2, #6
 8008186:	494d      	ldr	r1, [pc, #308]	@ (80082bc <NMI_Handler+0x3bc>)
 8008188:	484d      	ldr	r0, [pc, #308]	@ (80082c0 <NMI_Handler+0x3c0>)
 800818a:	f7fb fc1f 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 800818e:	4b20      	ldr	r3, [pc, #128]	@ (8008210 <NMI_Handler+0x310>)
 8008190:	ed93 7a00 	vldr	s14, [r3]
 8008194:	4b34      	ldr	r3, [pc, #208]	@ (8008268 <NMI_Handler+0x368>)
 8008196:	edd3 7a00 	vldr	s15, [r3]
 800819a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800819e:	4b49      	ldr	r3, [pc, #292]	@ (80082c4 <NMI_Handler+0x3c4>)
 80081a0:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 80081a4:	4b19      	ldr	r3, [pc, #100]	@ (800820c <NMI_Handler+0x30c>)
 80081a6:	ed93 7a00 	vldr	s14, [r3]
 80081aa:	4b30      	ldr	r3, [pc, #192]	@ (800826c <NMI_Handler+0x36c>)
 80081ac:	edd3 7a00 	vldr	s15, [r3]
 80081b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081b4:	4b44      	ldr	r3, [pc, #272]	@ (80082c8 <NMI_Handler+0x3c8>)
 80081b6:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 80081ba:	4b35      	ldr	r3, [pc, #212]	@ (8008290 <NMI_Handler+0x390>)
 80081bc:	ed93 7a00 	vldr	s14, [r3]
 80081c0:	4b21      	ldr	r3, [pc, #132]	@ (8008248 <NMI_Handler+0x348>)
 80081c2:	edd3 7a00 	vldr	s15, [r3]
 80081c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081ca:	4b40      	ldr	r3, [pc, #256]	@ (80082cc <NMI_Handler+0x3cc>)
 80081cc:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 80081d0:	4b31      	ldr	r3, [pc, #196]	@ (8008298 <NMI_Handler+0x398>)
 80081d2:	ed93 7a00 	vldr	s14, [r3]
 80081d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008244 <NMI_Handler+0x344>)
 80081d8:	edd3 7a00 	vldr	s15, [r3]
 80081dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081e0:	4b3b      	ldr	r3, [pc, #236]	@ (80082d0 <NMI_Handler+0x3d0>)
 80081e2:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 80081e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008214 <NMI_Handler+0x314>)
 80081e8:	ed93 7a00 	vldr	s14, [r3]
 80081ec:	4b14      	ldr	r3, [pc, #80]	@ (8008240 <NMI_Handler+0x340>)
 80081ee:	edd3 7a00 	vldr	s15, [r3]
 80081f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081f6:	4b37      	ldr	r3, [pc, #220]	@ (80082d4 <NMI_Handler+0x3d4>)
 80081f8:	edc3 7a00 	vstr	s15, [r3]
 80081fc:	e06c      	b.n	80082d8 <NMI_Handler+0x3d8>
 80081fe:	bf00      	nop
 8008200:	58021000 	.word	0x58021000
 8008204:	58020400 	.word	0x58020400
 8008208:	24001ef0 	.word	0x24001ef0
 800820c:	0000406c 	.word	0x0000406c
 8008210:	00004068 	.word	0x00004068
 8008214:	00004070 	.word	0x00004070
 8008218:	0801e838 	.word	0x0801e838
 800821c:	0000405c 	.word	0x0000405c
 8008220:	00000030 	.word	0x00000030
 8008224:	00000034 	.word	0x00000034
 8008228:	00000038 	.word	0x00000038
 800822c:	0000003c 	.word	0x0000003c
 8008230:	00000040 	.word	0x00000040
 8008234:	00000044 	.word	0x00000044
 8008238:	0801e82c 	.word	0x0801e82c
 800823c:	0801e830 	.word	0x0801e830
 8008240:	00000014 	.word	0x00000014
 8008244:	00000010 	.word	0x00000010
 8008248:	0000000c 	.word	0x0000000c
 800824c:	00000008 	.word	0x00000008
 8008250:	00000004 	.word	0x00000004
 8008254:	00000000 	.word	0x00000000
 8008258:	0000001c 	.word	0x0000001c
 800825c:	00000018 	.word	0x00000018
 8008260:	00000058 	.word	0x00000058
 8008264:	0000007c 	.word	0x0000007c
 8008268:	00004078 	.word	0x00004078
 800826c:	0000407c 	.word	0x0000407c
 8008270:	00004080 	.word	0x00004080
 8008274:	00004054 	.word	0x00004054
 8008278:	00004050 	.word	0x00004050
 800827c:	00004058 	.word	0x00004058
 8008280:	0000409c 	.word	0x0000409c
 8008284:	000040a0 	.word	0x000040a0
 8008288:	000040a4 	.word	0x000040a4
 800828c:	000040a8 	.word	0x000040a8
 8008290:	000040b4 	.word	0x000040b4
 8008294:	000040ac 	.word	0x000040ac
 8008298:	000040bc 	.word	0x000040bc
 800829c:	000040b0 	.word	0x000040b0
 80082a0:	000040b8 	.word	0x000040b8
 80082a4:	000040f0 	.word	0x000040f0
 80082a8:	00004104 	.word	0x00004104
 80082ac:	00004150 	.word	0x00004150
 80082b0:	000040c0 	.word	0x000040c0
 80082b4:	00004164 	.word	0x00004164
 80082b8:	000040c8 	.word	0x000040c8
 80082bc:	00004178 	.word	0x00004178
 80082c0:	000040c4 	.word	0x000040c4
 80082c4:	00004084 	.word	0x00004084
 80082c8:	00004088 	.word	0x00004088
 80082cc:	00004090 	.word	0x00004090
 80082d0:	00004094 	.word	0x00004094
 80082d4:	00004098 	.word	0x00004098


		MYDRON.ROOL = pid_angular_rate_rool;
 80082d8:	4b99      	ldr	r3, [pc, #612]	@ (8008540 <NMI_Handler+0x640>)
 80082da:	edd3 7a00 	vldr	s15, [r3]
 80082de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082e2:	ee17 3a90 	vmov	r3, s15
 80082e6:	b21a      	sxth	r2, r3
 80082e8:	4b96      	ldr	r3, [pc, #600]	@ (8008544 <NMI_Handler+0x644>)
 80082ea:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 80082ec:	4b96      	ldr	r3, [pc, #600]	@ (8008548 <NMI_Handler+0x648>)
 80082ee:	edd3 7a00 	vldr	s15, [r3]
 80082f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082f6:	ee17 3a90 	vmov	r3, s15
 80082fa:	b21a      	sxth	r2, r3
 80082fc:	4b91      	ldr	r3, [pc, #580]	@ (8008544 <NMI_Handler+0x644>)
 80082fe:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008300:	4b92      	ldr	r3, [pc, #584]	@ (800854c <NMI_Handler+0x64c>)
 8008302:	edd3 7a00 	vldr	s15, [r3]
 8008306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800830a:	ee17 3a90 	vmov	r3, s15
 800830e:	b21a      	sxth	r2, r3
 8008310:	4b8c      	ldr	r3, [pc, #560]	@ (8008544 <NMI_Handler+0x644>)
 8008312:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 8008314:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008318:	f7fb fa22 	bl	8003760 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 800831c:	4b89      	ldr	r3, [pc, #548]	@ (8008544 <NMI_Handler+0x644>)
 800831e:	885b      	ldrh	r3, [r3, #2]
 8008320:	461a      	mov	r2, r3
 8008322:	4b8b      	ldr	r3, [pc, #556]	@ (8008550 <NMI_Handler+0x650>)
 8008324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008328:	429a      	cmp	r2, r3
 800832a:	dd05      	ble.n	8008338 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 800832c:	4b88      	ldr	r3, [pc, #544]	@ (8008550 <NMI_Handler+0x650>)
 800832e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008332:	b29a      	uxth	r2, r3
 8008334:	4b83      	ldr	r3, [pc, #524]	@ (8008544 <NMI_Handler+0x644>)
 8008336:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008338:	4b82      	ldr	r3, [pc, #520]	@ (8008544 <NMI_Handler+0x644>)
 800833a:	885b      	ldrh	r3, [r3, #2]
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008344:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008528 <NMI_Handler+0x628>
 8008348:	ee27 6b06 	vmul.f64	d6, d7, d6
 800834c:	4b7d      	ldr	r3, [pc, #500]	@ (8008544 <NMI_Handler+0x644>)
 800834e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800835a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800835e:	4b79      	ldr	r3, [pc, #484]	@ (8008544 <NMI_Handler+0x644>)
 8008360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008364:	ee07 3a90 	vmov	s15, r3
 8008368:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800836c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008370:	4b74      	ldr	r3, [pc, #464]	@ (8008544 <NMI_Handler+0x644>)
 8008372:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800837e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008382:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008530 <NMI_Handler+0x630>
 8008386:	ee37 7b06 	vadd.f64	d7, d7, d6
 800838a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008538 <NMI_Handler+0x638>
 800838e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008392:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008396:	ee17 3a90 	vmov	r3, s15
 800839a:	b29a      	uxth	r2, r3
 800839c:	4b6d      	ldr	r3, [pc, #436]	@ (8008554 <NMI_Handler+0x654>)
 800839e:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80083a0:	4b68      	ldr	r3, [pc, #416]	@ (8008544 <NMI_Handler+0x644>)
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	ee07 3a90 	vmov	s15, r3
 80083a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083ac:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008528 <NMI_Handler+0x628>
 80083b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80083b4:	4b63      	ldr	r3, [pc, #396]	@ (8008544 <NMI_Handler+0x644>)
 80083b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80083c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008544 <NMI_Handler+0x644>)
 80083c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80083d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008544 <NMI_Handler+0x644>)
 80083da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80083ea:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008530 <NMI_Handler+0x630>
 80083ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083f2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008538 <NMI_Handler+0x638>
 80083f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80083fe:	ee17 3a90 	vmov	r3, s15
 8008402:	b29a      	uxth	r2, r3
 8008404:	4b54      	ldr	r3, [pc, #336]	@ (8008558 <NMI_Handler+0x658>)
 8008406:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008408:	4b4e      	ldr	r3, [pc, #312]	@ (8008544 <NMI_Handler+0x644>)
 800840a:	885b      	ldrh	r3, [r3, #2]
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008414:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008528 <NMI_Handler+0x628>
 8008418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800841c:	4b49      	ldr	r3, [pc, #292]	@ (8008544 <NMI_Handler+0x644>)
 800841e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800842a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800842e:	4b45      	ldr	r3, [pc, #276]	@ (8008544 <NMI_Handler+0x644>)
 8008430:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800843c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008440:	4b40      	ldr	r3, [pc, #256]	@ (8008544 <NMI_Handler+0x644>)
 8008442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800844e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008452:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008530 <NMI_Handler+0x630>
 8008456:	ee37 7b06 	vadd.f64	d7, d7, d6
 800845a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008538 <NMI_Handler+0x638>
 800845e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008462:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008466:	ee17 3a90 	vmov	r3, s15
 800846a:	b29a      	uxth	r2, r3
 800846c:	4b3b      	ldr	r3, [pc, #236]	@ (800855c <NMI_Handler+0x65c>)
 800846e:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008470:	4b34      	ldr	r3, [pc, #208]	@ (8008544 <NMI_Handler+0x644>)
 8008472:	885b      	ldrh	r3, [r3, #2]
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800847c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008528 <NMI_Handler+0x628>
 8008480:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008484:	4b2f      	ldr	r3, [pc, #188]	@ (8008544 <NMI_Handler+0x644>)
 8008486:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008492:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008496:	4b2b      	ldr	r3, [pc, #172]	@ (8008544 <NMI_Handler+0x644>)
 8008498:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80084a8:	4b26      	ldr	r3, [pc, #152]	@ (8008544 <NMI_Handler+0x644>)
 80084aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80084ba:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008530 <NMI_Handler+0x630>
 80084be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084c2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008538 <NMI_Handler+0x638>
 80084c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80084ce:	ee17 3a90 	vmov	r3, s15
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	4b22      	ldr	r3, [pc, #136]	@ (8008560 <NMI_Handler+0x660>)
 80084d6:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 80084d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008554 <NMI_Handler+0x654>)
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 fca9 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 80084e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008558 <NMI_Handler+0x658>)
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f8 fcc6 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 80084ec:	4b1b      	ldr	r3, [pc, #108]	@ (800855c <NMI_Handler+0x65c>)
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f8 fce3 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 80084f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008560 <NMI_Handler+0x660>)
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f8 fd00 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008500:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <NMI_Handler+0x654>)
 8008502:	881a      	ldrh	r2, [r3, #0]
 8008504:	4b17      	ldr	r3, [pc, #92]	@ (8008564 <NMI_Handler+0x664>)
 8008506:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008508:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <NMI_Handler+0x658>)
 800850a:	881a      	ldrh	r2, [r3, #0]
 800850c:	4b16      	ldr	r3, [pc, #88]	@ (8008568 <NMI_Handler+0x668>)
 800850e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008510:	4b12      	ldr	r3, [pc, #72]	@ (800855c <NMI_Handler+0x65c>)
 8008512:	881a      	ldrh	r2, [r3, #0]
 8008514:	4b15      	ldr	r3, [pc, #84]	@ (800856c <NMI_Handler+0x66c>)
 8008516:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008518:	4b11      	ldr	r3, [pc, #68]	@ (8008560 <NMI_Handler+0x660>)
 800851a:	881a      	ldrh	r2, [r3, #0]
 800851c:	4b14      	ldr	r3, [pc, #80]	@ (8008570 <NMI_Handler+0x670>)
 800851e:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008520:	e517      	b.n	8007f52 <NMI_Handler+0x52>
 8008522:	bf00      	nop
 8008524:	f3af 8000 	nop.w
 8008528:	66666666 	.word	0x66666666
 800852c:	3fe66666 	.word	0x3fe66666
 8008530:	00000000 	.word	0x00000000
 8008534:	40c48200 	.word	0x40c48200
 8008538:	00000000 	.word	0x00000000
 800853c:	407f4000 	.word	0x407f4000
 8008540:	000040c8 	.word	0x000040c8
 8008544:	00000178 	.word	0x00000178
 8008548:	000040c0 	.word	0x000040c0
 800854c:	000040c4 	.word	0x000040c4
 8008550:	0000405e 	.word	0x0000405e
 8008554:	0000418c 	.word	0x0000418c
 8008558:	0000418e 	.word	0x0000418e
 800855c:	00004190 	.word	0x00004190
 8008560:	00004192 	.word	0x00004192
 8008564:	00004194 	.word	0x00004194
 8008568:	00004196 	.word	0x00004196
 800856c:	00004198 	.word	0x00004198
 8008570:	0000419a 	.word	0x0000419a

08008574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008578:	2201      	movs	r2, #1
 800857a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800857e:	4812      	ldr	r0, [pc, #72]	@ (80085c8 <HardFault_Handler+0x54>)
 8008580:	f005 ff68 	bl	800e454 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008584:	2200      	movs	r2, #0
 8008586:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800858a:	4810      	ldr	r0, [pc, #64]	@ (80085cc <HardFault_Handler+0x58>)
 800858c:	f005 ff62 	bl	800e454 <HAL_GPIO_WritePin>
	LED_R_1;
 8008590:	2201      	movs	r2, #1
 8008592:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008596:	480d      	ldr	r0, [pc, #52]	@ (80085cc <HardFault_Handler+0x58>)
 8008598:	f005 ff5c 	bl	800e454 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800859c:	480c      	ldr	r0, [pc, #48]	@ (80085d0 <HardFault_Handler+0x5c>)
 800859e:	f015 f9f1 	bl	801d984 <f_close>
	wanted_rool = 0;
 80085a2:	4b0c      	ldr	r3, [pc, #48]	@ (80085d4 <HardFault_Handler+0x60>)
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80085aa:	4b0b      	ldr	r3, [pc, #44]	@ (80085d8 <HardFault_Handler+0x64>)
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80085b2:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <HardFault_Handler+0x68>)
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80085ba:	4b09      	ldr	r3, [pc, #36]	@ (80085e0 <HardFault_Handler+0x6c>)
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b21a      	sxth	r2, r3
 80085c0:	4b08      	ldr	r3, [pc, #32]	@ (80085e4 <HardFault_Handler+0x70>)
 80085c2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <HardFault_Handler+0x50>
 80085c8:	58021000 	.word	0x58021000
 80085cc:	58020400 	.word	0x58020400
 80085d0:	24001ef0 	.word	0x24001ef0
 80085d4:	0000406c 	.word	0x0000406c
 80085d8:	00004068 	.word	0x00004068
 80085dc:	00004070 	.word	0x00004070
 80085e0:	0801e838 	.word	0x0801e838
 80085e4:	0000405c 	.word	0x0000405c

080085e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 80085ec:	2200      	movs	r2, #0
 80085ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085f2:	4812      	ldr	r0, [pc, #72]	@ (800863c <MemManage_Handler+0x54>)
 80085f4:	f005 ff2e 	bl	800e454 <HAL_GPIO_WritePin>
	LED_Y_0;
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80085fe:	4810      	ldr	r0, [pc, #64]	@ (8008640 <MemManage_Handler+0x58>)
 8008600:	f005 ff28 	bl	800e454 <HAL_GPIO_WritePin>
	LED_R_1;
 8008604:	2201      	movs	r2, #1
 8008606:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800860a:	480d      	ldr	r0, [pc, #52]	@ (8008640 <MemManage_Handler+0x58>)
 800860c:	f005 ff22 	bl	800e454 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008610:	480c      	ldr	r0, [pc, #48]	@ (8008644 <MemManage_Handler+0x5c>)
 8008612:	f015 f9b7 	bl	801d984 <f_close>
	wanted_rool = 0;
 8008616:	4b0c      	ldr	r3, [pc, #48]	@ (8008648 <MemManage_Handler+0x60>)
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800861e:	4b0b      	ldr	r3, [pc, #44]	@ (800864c <MemManage_Handler+0x64>)
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008626:	4b0a      	ldr	r3, [pc, #40]	@ (8008650 <MemManage_Handler+0x68>)
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <MemManage_Handler+0x6c>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b21a      	sxth	r2, r3
 8008634:	4b08      	ldr	r3, [pc, #32]	@ (8008658 <MemManage_Handler+0x70>)
 8008636:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <MemManage_Handler+0x50>
 800863c:	58021000 	.word	0x58021000
 8008640:	58020400 	.word	0x58020400
 8008644:	24001ef0 	.word	0x24001ef0
 8008648:	0000406c 	.word	0x0000406c
 800864c:	00004068 	.word	0x00004068
 8008650:	00004070 	.word	0x00004070
 8008654:	0801e838 	.word	0x0801e838
 8008658:	0000405c 	.word	0x0000405c

0800865c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008660:	2201      	movs	r2, #1
 8008662:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008666:	4812      	ldr	r0, [pc, #72]	@ (80086b0 <BusFault_Handler+0x54>)
 8008668:	f005 fef4 	bl	800e454 <HAL_GPIO_WritePin>
	LED_Y_1;
 800866c:	2201      	movs	r2, #1
 800866e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008672:	4810      	ldr	r0, [pc, #64]	@ (80086b4 <BusFault_Handler+0x58>)
 8008674:	f005 feee 	bl	800e454 <HAL_GPIO_WritePin>
	LED_R_1;
 8008678:	2201      	movs	r2, #1
 800867a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800867e:	480d      	ldr	r0, [pc, #52]	@ (80086b4 <BusFault_Handler+0x58>)
 8008680:	f005 fee8 	bl	800e454 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008684:	480c      	ldr	r0, [pc, #48]	@ (80086b8 <BusFault_Handler+0x5c>)
 8008686:	f015 f97d 	bl	801d984 <f_close>
	wanted_rool = 0;
 800868a:	4b0c      	ldr	r3, [pc, #48]	@ (80086bc <BusFault_Handler+0x60>)
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008692:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <BusFault_Handler+0x64>)
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800869a:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <BusFault_Handler+0x68>)
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <BusFault_Handler+0x6c>)
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	b21a      	sxth	r2, r3
 80086a8:	4b08      	ldr	r3, [pc, #32]	@ (80086cc <BusFault_Handler+0x70>)
 80086aa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086ac:	bf00      	nop
 80086ae:	e7fd      	b.n	80086ac <BusFault_Handler+0x50>
 80086b0:	58021000 	.word	0x58021000
 80086b4:	58020400 	.word	0x58020400
 80086b8:	24001ef0 	.word	0x24001ef0
 80086bc:	0000406c 	.word	0x0000406c
 80086c0:	00004068 	.word	0x00004068
 80086c4:	00004070 	.word	0x00004070
 80086c8:	0801e838 	.word	0x0801e838
 80086cc:	0000405c 	.word	0x0000405c

080086d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 80086d4:	2200      	movs	r2, #0
 80086d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086da:	4812      	ldr	r0, [pc, #72]	@ (8008724 <UsageFault_Handler+0x54>)
 80086dc:	f005 feba 	bl	800e454 <HAL_GPIO_WritePin>
	LED_Y_1;
 80086e0:	2201      	movs	r2, #1
 80086e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80086e6:	4810      	ldr	r0, [pc, #64]	@ (8008728 <UsageFault_Handler+0x58>)
 80086e8:	f005 feb4 	bl	800e454 <HAL_GPIO_WritePin>
	LED_R_1;
 80086ec:	2201      	movs	r2, #1
 80086ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80086f2:	480d      	ldr	r0, [pc, #52]	@ (8008728 <UsageFault_Handler+0x58>)
 80086f4:	f005 feae 	bl	800e454 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80086f8:	480c      	ldr	r0, [pc, #48]	@ (800872c <UsageFault_Handler+0x5c>)
 80086fa:	f015 f943 	bl	801d984 <f_close>
	wanted_rool = 0;
 80086fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008730 <UsageFault_Handler+0x60>)
 8008700:	f04f 0200 	mov.w	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008706:	4b0b      	ldr	r3, [pc, #44]	@ (8008734 <UsageFault_Handler+0x64>)
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800870e:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <UsageFault_Handler+0x68>)
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008716:	4b09      	ldr	r3, [pc, #36]	@ (800873c <UsageFault_Handler+0x6c>)
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b21a      	sxth	r2, r3
 800871c:	4b08      	ldr	r3, [pc, #32]	@ (8008740 <UsageFault_Handler+0x70>)
 800871e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008720:	bf00      	nop
 8008722:	e7fd      	b.n	8008720 <UsageFault_Handler+0x50>
 8008724:	58021000 	.word	0x58021000
 8008728:	58020400 	.word	0x58020400
 800872c:	24001ef0 	.word	0x24001ef0
 8008730:	0000406c 	.word	0x0000406c
 8008734:	00004068 	.word	0x00004068
 8008738:	00004070 	.word	0x00004070
 800873c:	0801e838 	.word	0x0801e838
 8008740:	0000405c 	.word	0x0000405c

08008744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008748:	bf00      	nop
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008752:	b480      	push	{r7}
 8008754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008756:	bf00      	nop
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008774:	4b08      	ldr	r3, [pc, #32]	@ (8008798 <SysTick_Handler+0x28>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3301      	adds	r3, #1
 800877a:	4a07      	ldr	r2, [pc, #28]	@ (8008798 <SysTick_Handler+0x28>)
 800877c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 800877e:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <SysTick_Handler+0x28>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b09      	cmp	r3, #9
 8008784:	d904      	bls.n	8008790 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008786:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <SysTick_Handler+0x28>)
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 800878c:	f7ff fb98 	bl	8007ec0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008790:	f000 fd04 	bl	800919c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008794:	bf00      	nop
 8008796:	bd80      	pop	{r7, pc}
 8008798:	24000374 	.word	0x24000374

0800879c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80087a0:	4802      	ldr	r0, [pc, #8]	@ (80087ac <DMA1_Stream0_IRQHandler+0x10>)
 80087a2:	f004 f96b 	bl	800ca7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80087a6:	bf00      	nop
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	240002fc 	.word	0x240002fc

080087b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80087b4:	4802      	ldr	r0, [pc, #8]	@ (80087c0 <ADC_IRQHandler+0x10>)
 80087b6:	f001 fb3f 	bl	8009e38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80087ba:	bf00      	nop
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	240000ac 	.word	0x240000ac

080087c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80087c8:	4802      	ldr	r0, [pc, #8]	@ (80087d4 <TIM2_IRQHandler+0x10>)
 80087ca:	f00d ff02 	bl	80165d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	240003cc 	.word	0x240003cc

080087d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80087dc:	4802      	ldr	r0, [pc, #8]	@ (80087e8 <SPI2_IRQHandler+0x10>)
 80087de:	f00d f871 	bl	80158c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	240001ec 	.word	0x240001ec

080087ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80087f0:	4802      	ldr	r0, [pc, #8]	@ (80087fc <USART1_IRQHandler+0x10>)
 80087f2:	f00f fb45 	bl	8017e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80087f6:	bf00      	nop
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	240004b0 	.word	0x240004b0

08008800 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008804:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008808:	f005 fe3d 	bl	800e486 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800880c:	bf00      	nop
 800880e:	bd80      	pop	{r7, pc}

08008810 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008814:	4802      	ldr	r0, [pc, #8]	@ (8008820 <DMA2_Stream0_IRQHandler+0x10>)
 8008816:	f004 f931 	bl	800ca7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800881a:	bf00      	nop
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	2400011c 	.word	0x2400011c

08008824 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008828:	4802      	ldr	r0, [pc, #8]	@ (8008834 <I2C5_EV_IRQHandler+0x10>)
 800882a:	f006 fa21 	bl	800ec70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	24000198 	.word	0x24000198

08008838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800883c:	4b32      	ldr	r3, [pc, #200]	@ (8008908 <SystemInit+0xd0>)
 800883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008842:	4a31      	ldr	r2, [pc, #196]	@ (8008908 <SystemInit+0xd0>)
 8008844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800884c:	4b2f      	ldr	r3, [pc, #188]	@ (800890c <SystemInit+0xd4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	2b06      	cmp	r3, #6
 8008856:	d807      	bhi.n	8008868 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008858:	4b2c      	ldr	r3, [pc, #176]	@ (800890c <SystemInit+0xd4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f023 030f 	bic.w	r3, r3, #15
 8008860:	4a2a      	ldr	r2, [pc, #168]	@ (800890c <SystemInit+0xd4>)
 8008862:	f043 0307 	orr.w	r3, r3, #7
 8008866:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008868:	4b29      	ldr	r3, [pc, #164]	@ (8008910 <SystemInit+0xd8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a28      	ldr	r2, [pc, #160]	@ (8008910 <SystemInit+0xd8>)
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008874:	4b26      	ldr	r3, [pc, #152]	@ (8008910 <SystemInit+0xd8>)
 8008876:	2200      	movs	r2, #0
 8008878:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800887a:	4b25      	ldr	r3, [pc, #148]	@ (8008910 <SystemInit+0xd8>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	4924      	ldr	r1, [pc, #144]	@ (8008910 <SystemInit+0xd8>)
 8008880:	4b24      	ldr	r3, [pc, #144]	@ (8008914 <SystemInit+0xdc>)
 8008882:	4013      	ands	r3, r2
 8008884:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008886:	4b21      	ldr	r3, [pc, #132]	@ (800890c <SystemInit+0xd4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008892:	4b1e      	ldr	r3, [pc, #120]	@ (800890c <SystemInit+0xd4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 030f 	bic.w	r3, r3, #15
 800889a:	4a1c      	ldr	r2, [pc, #112]	@ (800890c <SystemInit+0xd4>)
 800889c:	f043 0307 	orr.w	r3, r3, #7
 80088a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80088a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008910 <SystemInit+0xd8>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80088a8:	4b19      	ldr	r3, [pc, #100]	@ (8008910 <SystemInit+0xd8>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80088ae:	4b18      	ldr	r3, [pc, #96]	@ (8008910 <SystemInit+0xd8>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80088b4:	4b16      	ldr	r3, [pc, #88]	@ (8008910 <SystemInit+0xd8>)
 80088b6:	4a18      	ldr	r2, [pc, #96]	@ (8008918 <SystemInit+0xe0>)
 80088b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80088ba:	4b15      	ldr	r3, [pc, #84]	@ (8008910 <SystemInit+0xd8>)
 80088bc:	4a17      	ldr	r2, [pc, #92]	@ (800891c <SystemInit+0xe4>)
 80088be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80088c0:	4b13      	ldr	r3, [pc, #76]	@ (8008910 <SystemInit+0xd8>)
 80088c2:	4a17      	ldr	r2, [pc, #92]	@ (8008920 <SystemInit+0xe8>)
 80088c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80088c6:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <SystemInit+0xd8>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80088cc:	4b10      	ldr	r3, [pc, #64]	@ (8008910 <SystemInit+0xd8>)
 80088ce:	4a14      	ldr	r2, [pc, #80]	@ (8008920 <SystemInit+0xe8>)
 80088d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80088d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008910 <SystemInit+0xd8>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80088d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <SystemInit+0xd8>)
 80088da:	4a11      	ldr	r2, [pc, #68]	@ (8008920 <SystemInit+0xe8>)
 80088dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80088de:	4b0c      	ldr	r3, [pc, #48]	@ (8008910 <SystemInit+0xd8>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <SystemInit+0xd8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a09      	ldr	r2, [pc, #36]	@ (8008910 <SystemInit+0xd8>)
 80088ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80088f0:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <SystemInit+0xd8>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80088f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <SystemInit+0xec>)
 80088f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80088fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80088fe:	bf00      	nop
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	e000ed00 	.word	0xe000ed00
 800890c:	52002000 	.word	0x52002000
 8008910:	58024400 	.word	0x58024400
 8008914:	eaf6ed7f 	.word	0xeaf6ed7f
 8008918:	02020200 	.word	0x02020200
 800891c:	01ff0000 	.word	0x01ff0000
 8008920:	01010280 	.word	0x01010280
 8008924:	52004000 	.word	0x52004000

08008928 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b098      	sub	sp, #96	@ 0x60
 800892c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800892e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	605a      	str	r2, [r3, #4]
 8008938:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800893a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	605a      	str	r2, [r3, #4]
 8008944:	609a      	str	r2, [r3, #8]
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	611a      	str	r2, [r3, #16]
 800894a:	615a      	str	r2, [r3, #20]
 800894c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800894e:	1d3b      	adds	r3, r7, #4
 8008950:	2234      	movs	r2, #52	@ 0x34
 8008952:	2100      	movs	r1, #0
 8008954:	4618      	mov	r0, r3
 8008956:	f015 fa0d 	bl	801dd74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800895a:	4b45      	ldr	r3, [pc, #276]	@ (8008a70 <MX_TIM1_Init+0x148>)
 800895c:	4a45      	ldr	r2, [pc, #276]	@ (8008a74 <MX_TIM1_Init+0x14c>)
 800895e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008960:	4b43      	ldr	r3, [pc, #268]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008962:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008966:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008968:	4b41      	ldr	r3, [pc, #260]	@ (8008a70 <MX_TIM1_Init+0x148>)
 800896a:	2200      	movs	r2, #0
 800896c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 800896e:	4b40      	ldr	r3, [pc, #256]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008970:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008974:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008976:	4b3e      	ldr	r3, [pc, #248]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008978:	2200      	movs	r2, #0
 800897a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800897c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a70 <MX_TIM1_Init+0x148>)
 800897e:	2200      	movs	r2, #0
 8008980:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008982:	4b3b      	ldr	r3, [pc, #236]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008984:	2280      	movs	r2, #128	@ 0x80
 8008986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008988:	4839      	ldr	r0, [pc, #228]	@ (8008a70 <MX_TIM1_Init+0x148>)
 800898a:	f00d fc57 	bl	801623c <HAL_TIM_PWM_Init>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008994:	f7ff f8b8 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008998:	2300      	movs	r3, #0
 800899a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800899c:	2300      	movs	r3, #0
 800899e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80089a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80089a8:	4619      	mov	r1, r3
 80089aa:	4831      	ldr	r0, [pc, #196]	@ (8008a70 <MX_TIM1_Init+0x148>)
 80089ac:	f00e ff64 	bl	8017878 <HAL_TIMEx_MasterConfigSynchronization>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80089b6:	f7ff f8a7 	bl	8007b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80089ba:	2360      	movs	r3, #96	@ 0x60
 80089bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80089c2:	2300      	movs	r3, #0
 80089c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80089c6:	2300      	movs	r3, #0
 80089c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80089ce:	2300      	movs	r3, #0
 80089d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80089d2:	2300      	movs	r3, #0
 80089d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80089d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80089da:	2204      	movs	r2, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4824      	ldr	r0, [pc, #144]	@ (8008a70 <MX_TIM1_Init+0x148>)
 80089e0:	f00d ff9a 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80089ea:	f7ff f88d 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80089ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80089f2:	2208      	movs	r2, #8
 80089f4:	4619      	mov	r1, r3
 80089f6:	481e      	ldr	r0, [pc, #120]	@ (8008a70 <MX_TIM1_Init+0x148>)
 80089f8:	f00d ff8e 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008a02:	f7ff f881 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008a06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a0a:	220c      	movs	r2, #12
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4818      	ldr	r0, [pc, #96]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008a10:	f00d ff82 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008a1a:	f7ff f875 	bl	8007b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008a40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008a4e:	1d3b      	adds	r3, r7, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4807      	ldr	r0, [pc, #28]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008a54:	f00e ffac 	bl	80179b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008a5e:	f7ff f853 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008a62:	4803      	ldr	r0, [pc, #12]	@ (8008a70 <MX_TIM1_Init+0x148>)
 8008a64:	f000 f9da 	bl	8008e1c <HAL_TIM_MspPostInit>

}
 8008a68:	bf00      	nop
 8008a6a:	3760      	adds	r7, #96	@ 0x60
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	24000380 	.word	0x24000380
 8008a74:	40010000 	.word	0x40010000

08008a78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	605a      	str	r2, [r3, #4]
 8008a88:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008a8a:	1d3b      	adds	r3, r7, #4
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	605a      	str	r2, [r3, #4]
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008a96:	4b21      	ldr	r3, [pc, #132]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008a98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008aa0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008aa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008aac:	4b1b      	ldr	r3, [pc, #108]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008aae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ab4:	4b19      	ldr	r3, [pc, #100]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008aba:	4b18      	ldr	r3, [pc, #96]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008abc:	2280      	movs	r2, #128	@ 0x80
 8008abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008ac0:	4816      	ldr	r0, [pc, #88]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008ac2:	f00d fd2f 	bl	8016524 <HAL_TIM_IC_Init>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008acc:	f7ff f81c 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	4619      	mov	r1, r3
 8008ade:	480f      	ldr	r0, [pc, #60]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008ae0:	f00e feca 	bl	8017878 <HAL_TIMEx_MasterConfigSynchronization>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008aea:	f7ff f80d 	bl	8007b08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008aee:	2300      	movs	r3, #0
 8008af0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008af2:	2301      	movs	r3, #1
 8008af4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008afe:	1d3b      	adds	r3, r7, #4
 8008b00:	2200      	movs	r2, #0
 8008b02:	4619      	mov	r1, r3
 8008b04:	4805      	ldr	r0, [pc, #20]	@ (8008b1c <MX_TIM2_Init+0xa4>)
 8008b06:	f00d fe6b 	bl	80167e0 <HAL_TIM_IC_ConfigChannel>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008b10:	f7fe fffa 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008b14:	bf00      	nop
 8008b16:	3720      	adds	r7, #32
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	240003cc 	.word	0x240003cc

08008b20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	@ 0x28
 8008b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b26:	f107 031c 	add.w	r3, r7, #28
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008b32:	463b      	mov	r3, r7
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	611a      	str	r2, [r3, #16]
 8008b40:	615a      	str	r2, [r3, #20]
 8008b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008b44:	4b32      	ldr	r3, [pc, #200]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b46:	4a33      	ldr	r2, [pc, #204]	@ (8008c14 <MX_TIM3_Init+0xf4>)
 8008b48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008b4a:	4b31      	ldr	r3, [pc, #196]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b4c:	221c      	movs	r2, #28
 8008b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b50:	4b2f      	ldr	r3, [pc, #188]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008b56:	4b2e      	ldr	r3, [pc, #184]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b58:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b64:	4b2a      	ldr	r3, [pc, #168]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008b6a:	4829      	ldr	r0, [pc, #164]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b6c:	f00d fb66 	bl	801623c <HAL_TIM_PWM_Init>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008b76:	f7fe ffc7 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008b82:	f107 031c 	add.w	r3, r7, #28
 8008b86:	4619      	mov	r1, r3
 8008b88:	4821      	ldr	r0, [pc, #132]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008b8a:	f00e fe75 	bl	8017878 <HAL_TIMEx_MasterConfigSynchronization>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008b94:	f7fe ffb8 	bl	8007b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b98:	2360      	movs	r3, #96	@ 0x60
 8008b9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ba8:	463b      	mov	r3, r7
 8008baa:	2200      	movs	r2, #0
 8008bac:	4619      	mov	r1, r3
 8008bae:	4818      	ldr	r0, [pc, #96]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008bb0:	f00d feb2 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008bba:	f7fe ffa5 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	2204      	movs	r2, #4
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4812      	ldr	r0, [pc, #72]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008bc6:	f00d fea7 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008bd0:	f7fe ff9a 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	4619      	mov	r1, r3
 8008bda:	480d      	ldr	r0, [pc, #52]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008bdc:	f00d fe9c 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008be6:	f7fe ff8f 	bl	8007b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008bea:	463b      	mov	r3, r7
 8008bec:	220c      	movs	r2, #12
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4807      	ldr	r0, [pc, #28]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008bf2:	f00d fe91 	bl	8016918 <HAL_TIM_PWM_ConfigChannel>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008bfc:	f7fe ff84 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008c00:	4803      	ldr	r0, [pc, #12]	@ (8008c10 <MX_TIM3_Init+0xf0>)
 8008c02:	f000 f90b 	bl	8008e1c <HAL_TIM_MspPostInit>

}
 8008c06:	bf00      	nop
 8008c08:	3728      	adds	r7, #40	@ 0x28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	24000418 	.word	0x24000418
 8008c14:	40000400 	.word	0x40000400

08008c18 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c1e:	f107 0310 	add.w	r3, r7, #16
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	609a      	str	r2, [r3, #8]
 8008c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c2c:	1d3b      	adds	r3, r7, #4
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008c36:	4b21      	ldr	r3, [pc, #132]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c38:	4a21      	ldr	r2, [pc, #132]	@ (8008cc0 <MX_TIM8_Init+0xa8>)
 8008c3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c3e:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008c42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c44:	4b1d      	ldr	r3, [pc, #116]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c4c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008c50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c52:	4b1a      	ldr	r3, [pc, #104]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008c58:	4b18      	ldr	r3, [pc, #96]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c5e:	4b17      	ldr	r3, [pc, #92]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008c64:	4815      	ldr	r0, [pc, #84]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c66:	f00d f98e 	bl	8015f86 <HAL_TIM_Base_Init>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008c70:	f7fe ff4a 	bl	8007b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	4619      	mov	r1, r3
 8008c80:	480e      	ldr	r0, [pc, #56]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008c82:	f00d ff5d 	bl	8016b40 <HAL_TIM_ConfigClockSource>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008c8c:	f7fe ff3c 	bl	8007b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008c90:	2320      	movs	r3, #32
 8008c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008c94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008c98:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4806      	ldr	r0, [pc, #24]	@ (8008cbc <MX_TIM8_Init+0xa4>)
 8008ca4:	f00e fde8 	bl	8017878 <HAL_TIMEx_MasterConfigSynchronization>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008cae:	f7fe ff2b 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008cb2:	bf00      	nop
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	24000464 	.word	0x24000464
 8008cc0:	40010400 	.word	0x40010400

08008cc4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a16      	ldr	r2, [pc, #88]	@ (8008d2c <HAL_TIM_PWM_MspInit+0x68>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d10f      	bne.n	8008cf6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008cd6:	4b16      	ldr	r3, [pc, #88]	@ (8008d30 <HAL_TIM_PWM_MspInit+0x6c>)
 8008cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cdc:	4a14      	ldr	r2, [pc, #80]	@ (8008d30 <HAL_TIM_PWM_MspInit+0x6c>)
 8008cde:	f043 0301 	orr.w	r3, r3, #1
 8008ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008ce6:	4b12      	ldr	r3, [pc, #72]	@ (8008d30 <HAL_TIM_PWM_MspInit+0x6c>)
 8008ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008cf4:	e013      	b.n	8008d1e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8008d34 <HAL_TIM_PWM_MspInit+0x70>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d10e      	bne.n	8008d1e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d00:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d06:	4a0a      	ldr	r2, [pc, #40]	@ (8008d30 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d08:	f043 0302 	orr.w	r3, r3, #2
 8008d0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008d10:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	60bb      	str	r3, [r7, #8]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	58024400 	.word	0x58024400
 8008d34:	40000400 	.word	0x40000400

08008d38 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	@ 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d40:	f107 0314 	add.w	r3, r7, #20
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	605a      	str	r2, [r3, #4]
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d58:	d135      	bne.n	8008dc6 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <HAL_TIM_IC_MspInit+0x98>)
 8008d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d60:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd0 <HAL_TIM_IC_MspInit+0x98>)
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008d6a:	4b19      	ldr	r3, [pc, #100]	@ (8008dd0 <HAL_TIM_IC_MspInit+0x98>)
 8008d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	613b      	str	r3, [r7, #16]
 8008d76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d78:	4b15      	ldr	r3, [pc, #84]	@ (8008dd0 <HAL_TIM_IC_MspInit+0x98>)
 8008d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d7e:	4a14      	ldr	r2, [pc, #80]	@ (8008dd0 <HAL_TIM_IC_MspInit+0x98>)
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d88:	4b11      	ldr	r3, [pc, #68]	@ (8008dd0 <HAL_TIM_IC_MspInit+0x98>)
 8008d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008d96:	2301      	movs	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008da2:	2300      	movs	r3, #0
 8008da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008da6:	2301      	movs	r3, #1
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008daa:	f107 0314 	add.w	r3, r7, #20
 8008dae:	4619      	mov	r1, r3
 8008db0:	4808      	ldr	r0, [pc, #32]	@ (8008dd4 <HAL_TIM_IC_MspInit+0x9c>)
 8008db2:	f005 f98f 	bl	800e0d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008db6:	2200      	movs	r2, #0
 8008db8:	2101      	movs	r1, #1
 8008dba:	201c      	movs	r0, #28
 8008dbc:	f002 fa8b 	bl	800b2d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008dc0:	201c      	movs	r0, #28
 8008dc2:	f002 faa2 	bl	800b30a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3728      	adds	r7, #40	@ 0x28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	58020000 	.word	0x58020000

08008dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a0b      	ldr	r2, [pc, #44]	@ (8008e14 <HAL_TIM_Base_MspInit+0x3c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d10e      	bne.n	8008e08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008dea:	4b0b      	ldr	r3, [pc, #44]	@ (8008e18 <HAL_TIM_Base_MspInit+0x40>)
 8008dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008df0:	4a09      	ldr	r2, [pc, #36]	@ (8008e18 <HAL_TIM_Base_MspInit+0x40>)
 8008df2:	f043 0302 	orr.w	r3, r3, #2
 8008df6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008dfa:	4b07      	ldr	r3, [pc, #28]	@ (8008e18 <HAL_TIM_Base_MspInit+0x40>)
 8008dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	40010400 	.word	0x40010400
 8008e18:	58024400 	.word	0x58024400

08008e1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	@ 0x28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e24:	f107 0314 	add.w	r3, r7, #20
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	605a      	str	r2, [r3, #4]
 8008e2e:	609a      	str	r2, [r3, #8]
 8008e30:	60da      	str	r2, [r3, #12]
 8008e32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a26      	ldr	r2, [pc, #152]	@ (8008ed4 <HAL_TIM_MspPostInit+0xb8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d120      	bne.n	8008e80 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e3e:	4b26      	ldr	r3, [pc, #152]	@ (8008ed8 <HAL_TIM_MspPostInit+0xbc>)
 8008e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e44:	4a24      	ldr	r2, [pc, #144]	@ (8008ed8 <HAL_TIM_MspPostInit+0xbc>)
 8008e46:	f043 0310 	orr.w	r3, r3, #16
 8008e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e4e:	4b22      	ldr	r3, [pc, #136]	@ (8008ed8 <HAL_TIM_MspPostInit+0xbc>)
 8008e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008e5c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e62:	2302      	movs	r3, #2
 8008e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	4619      	mov	r1, r3
 8008e78:	4818      	ldr	r0, [pc, #96]	@ (8008edc <HAL_TIM_MspPostInit+0xc0>)
 8008e7a:	f005 f92b 	bl	800e0d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008e7e:	e024      	b.n	8008eca <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a16      	ldr	r2, [pc, #88]	@ (8008ee0 <HAL_TIM_MspPostInit+0xc4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d11f      	bne.n	8008eca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e8a:	4b13      	ldr	r3, [pc, #76]	@ (8008ed8 <HAL_TIM_MspPostInit+0xbc>)
 8008e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e90:	4a11      	ldr	r2, [pc, #68]	@ (8008ed8 <HAL_TIM_MspPostInit+0xbc>)
 8008e92:	f043 0304 	orr.w	r3, r3, #4
 8008e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed8 <HAL_TIM_MspPostInit+0xbc>)
 8008e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008ea8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008eba:	2302      	movs	r3, #2
 8008ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ebe:	f107 0314 	add.w	r3, r7, #20
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4807      	ldr	r0, [pc, #28]	@ (8008ee4 <HAL_TIM_MspPostInit+0xc8>)
 8008ec6:	f005 f905 	bl	800e0d4 <HAL_GPIO_Init>
}
 8008eca:	bf00      	nop
 8008ecc:	3728      	adds	r7, #40	@ 0x28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	40010000 	.word	0x40010000
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	58021000 	.word	0x58021000
 8008ee0:	40000400 	.word	0x40000400
 8008ee4:	58020800 	.word	0x58020800

08008ee8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008eec:	4b22      	ldr	r3, [pc, #136]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008eee:	4a23      	ldr	r2, [pc, #140]	@ (8008f7c <MX_USART1_UART_Init+0x94>)
 8008ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008ef2:	4b21      	ldr	r3, [pc, #132]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008efa:	4b1f      	ldr	r3, [pc, #124]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f06:	4b1c      	ldr	r3, [pc, #112]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f0e:	220c      	movs	r2, #12
 8008f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f12:	4b19      	ldr	r3, [pc, #100]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f18:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f1e:	4b16      	ldr	r3, [pc, #88]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008f24:	4b14      	ldr	r3, [pc, #80]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f2a:	4b13      	ldr	r3, [pc, #76]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f30:	4811      	ldr	r0, [pc, #68]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f32:	f00e fde7 	bl	8017b04 <HAL_UART_Init>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008f3c:	f7fe fde4 	bl	8007b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f40:	2100      	movs	r1, #0
 8008f42:	480d      	ldr	r0, [pc, #52]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f44:	f011 fc97 	bl	801a876 <HAL_UARTEx_SetTxFifoThreshold>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008f4e:	f7fe fddb 	bl	8007b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f52:	2100      	movs	r1, #0
 8008f54:	4808      	ldr	r0, [pc, #32]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f56:	f011 fccc 	bl	801a8f2 <HAL_UARTEx_SetRxFifoThreshold>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008f60:	f7fe fdd2 	bl	8007b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008f64:	4804      	ldr	r0, [pc, #16]	@ (8008f78 <MX_USART1_UART_Init+0x90>)
 8008f66:	f011 fc4d 	bl	801a804 <HAL_UARTEx_DisableFifoMode>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008f70:	f7fe fdca 	bl	8007b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008f74:	bf00      	nop
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	240004b0 	.word	0x240004b0
 8008f7c:	40011000 	.word	0x40011000

08008f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b0b8      	sub	sp, #224	@ 0xe0
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	609a      	str	r2, [r3, #8]
 8008f94:	60da      	str	r2, [r3, #12]
 8008f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008f98:	f107 0310 	add.w	r3, r7, #16
 8008f9c:	22b8      	movs	r2, #184	@ 0xb8
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f014 fee7 	bl	801dd74 <memset>
  if(uartHandle->Instance==USART1)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a2b      	ldr	r2, [pc, #172]	@ (8009058 <HAL_UART_MspInit+0xd8>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d14e      	bne.n	800904e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008fb0:	f04f 0201 	mov.w	r2, #1
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008fc2:	f107 0310 	add.w	r3, r7, #16
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f008 fe96 	bl	8011cf8 <HAL_RCCEx_PeriphCLKConfig>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008fd2:	f7fe fd99 	bl	8007b08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008fd6:	4b21      	ldr	r3, [pc, #132]	@ (800905c <HAL_UART_MspInit+0xdc>)
 8008fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800905c <HAL_UART_MspInit+0xdc>)
 8008fde:	f043 0310 	orr.w	r3, r3, #16
 8008fe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800905c <HAL_UART_MspInit+0xdc>)
 8008fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fec:	f003 0310 	and.w	r3, r3, #16
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ff4:	4b19      	ldr	r3, [pc, #100]	@ (800905c <HAL_UART_MspInit+0xdc>)
 8008ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ffa:	4a18      	ldr	r2, [pc, #96]	@ (800905c <HAL_UART_MspInit+0xdc>)
 8008ffc:	f043 0301 	orr.w	r3, r3, #1
 8009000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009004:	4b15      	ldr	r3, [pc, #84]	@ (800905c <HAL_UART_MspInit+0xdc>)
 8009006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	60bb      	str	r3, [r7, #8]
 8009010:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009012:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009016:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901a:	2302      	movs	r3, #2
 800901c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009020:	2300      	movs	r3, #0
 8009022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009026:	2300      	movs	r3, #0
 8009028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800902c:	2307      	movs	r3, #7
 800902e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009032:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009036:	4619      	mov	r1, r3
 8009038:	4809      	ldr	r0, [pc, #36]	@ (8009060 <HAL_UART_MspInit+0xe0>)
 800903a:	f005 f84b 	bl	800e0d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800903e:	2200      	movs	r2, #0
 8009040:	2100      	movs	r1, #0
 8009042:	2025      	movs	r0, #37	@ 0x25
 8009044:	f002 f947 	bl	800b2d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009048:	2025      	movs	r0, #37	@ 0x25
 800904a:	f002 f95e 	bl	800b30a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800904e:	bf00      	nop
 8009050:	37e0      	adds	r7, #224	@ 0xe0
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	40011000 	.word	0x40011000
 800905c:	58024400 	.word	0x58024400
 8009060:	58020000 	.word	0x58020000

08009064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800909c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009068:	f7ff fbe6 	bl	8008838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800906c:	480c      	ldr	r0, [pc, #48]	@ (80090a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800906e:	490d      	ldr	r1, [pc, #52]	@ (80090a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009070:	4a0d      	ldr	r2, [pc, #52]	@ (80090a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009074:	e002      	b.n	800907c <LoopCopyDataInit>

08009076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800907a:	3304      	adds	r3, #4

0800907c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800907c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800907e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009080:	d3f9      	bcc.n	8009076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009082:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009084:	4c0a      	ldr	r4, [pc, #40]	@ (80090b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009088:	e001      	b.n	800908e <LoopFillZerobss>

0800908a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800908a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800908c:	3204      	adds	r2, #4

0800908e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800908e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009090:	d3fb      	bcc.n	800908a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009092:	f014 fe7d 	bl	801dd90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009096:	f7fb fde7 	bl	8004c68 <main>
  bx  lr
 800909a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800909c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80090a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80090a4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80090a8:	080205f8 	.word	0x080205f8
  ldr r2, =_sbss
 80090ac:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80090b0:	240008ac 	.word	0x240008ac

080090b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090b4:	e7fe      	b.n	80090b4 <ADC3_IRQHandler>
	...

080090b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090be:	2003      	movs	r0, #3
 80090c0:	f002 f8fe 	bl	800b2c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80090c4:	f008 fc42 	bl	801194c <HAL_RCC_GetSysClockFreq>
 80090c8:	4602      	mov	r2, r0
 80090ca:	4b15      	ldr	r3, [pc, #84]	@ (8009120 <HAL_Init+0x68>)
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	0a1b      	lsrs	r3, r3, #8
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	4913      	ldr	r1, [pc, #76]	@ (8009124 <HAL_Init+0x6c>)
 80090d6:	5ccb      	ldrb	r3, [r1, r3]
 80090d8:	f003 031f 	and.w	r3, r3, #31
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
 80090e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009120 <HAL_Init+0x68>)
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009124 <HAL_Init+0x6c>)
 80090ec:	5cd3      	ldrb	r3, [r2, r3]
 80090ee:	f003 031f 	and.w	r3, r3, #31
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	fa22 f303 	lsr.w	r3, r2, r3
 80090f8:	4a0b      	ldr	r2, [pc, #44]	@ (8009128 <HAL_Init+0x70>)
 80090fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090fc:	4a0b      	ldr	r2, [pc, #44]	@ (800912c <HAL_Init+0x74>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009102:	200f      	movs	r0, #15
 8009104:	f000 f814 	bl	8009130 <HAL_InitTick>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e002      	b.n	8009118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009112:	f7fe febb 	bl	8007e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	58024400 	.word	0x58024400
 8009124:	0801e83c 	.word	0x0801e83c
 8009128:	24000008 	.word	0x24000008
 800912c:	24000004 	.word	0x24000004

08009130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009138:	4b15      	ldr	r3, [pc, #84]	@ (8009190 <HAL_InitTick+0x60>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e021      	b.n	8009188 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009144:	4b13      	ldr	r3, [pc, #76]	@ (8009194 <HAL_InitTick+0x64>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	4b11      	ldr	r3, [pc, #68]	@ (8009190 <HAL_InitTick+0x60>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009152:	fbb3 f3f1 	udiv	r3, r3, r1
 8009156:	fbb2 f3f3 	udiv	r3, r2, r3
 800915a:	4618      	mov	r0, r3
 800915c:	f002 f8e3 	bl	800b326 <HAL_SYSTICK_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e00e      	b.n	8009188 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b0f      	cmp	r3, #15
 800916e:	d80a      	bhi.n	8009186 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009170:	2200      	movs	r2, #0
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	f002 f8ad 	bl	800b2d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800917c:	4a06      	ldr	r2, [pc, #24]	@ (8009198 <HAL_InitTick+0x68>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	e000      	b.n	8009188 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	24000010 	.word	0x24000010
 8009194:	24000004 	.word	0x24000004
 8009198:	2400000c 	.word	0x2400000c

0800919c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80091a0:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <HAL_IncTick+0x20>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	4b06      	ldr	r3, [pc, #24]	@ (80091c0 <HAL_IncTick+0x24>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4413      	add	r3, r2
 80091ac:	4a04      	ldr	r2, [pc, #16]	@ (80091c0 <HAL_IncTick+0x24>)
 80091ae:	6013      	str	r3, [r2, #0]
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	24000010 	.word	0x24000010
 80091c0:	24000544 	.word	0x24000544

080091c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  return uwTick;
 80091c8:	4b03      	ldr	r3, [pc, #12]	@ (80091d8 <HAL_GetTick+0x14>)
 80091ca:	681b      	ldr	r3, [r3, #0]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	24000544 	.word	0x24000544

080091dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091e4:	f7ff ffee 	bl	80091c4 <HAL_GetTick>
 80091e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d005      	beq.n	8009202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80091f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009220 <HAL_Delay+0x44>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009202:	bf00      	nop
 8009204:	f7ff ffde 	bl	80091c4 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	429a      	cmp	r2, r3
 8009212:	d8f7      	bhi.n	8009204 <HAL_Delay+0x28>
  {
  }
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	24000010 	.word	0x24000010

08009224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	609a      	str	r2, [r3, #8]
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	609a      	str	r2, [r3, #8]
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a18      	ldr	r2, [pc, #96]	@ (80092fc <LL_ADC_SetChannelPreselection+0x70>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d027      	beq.n	80092ee <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d107      	bne.n	80092b8 <LL_ADC_SetChannelPreselection+0x2c>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	0e9b      	lsrs	r3, r3, #26
 80092ac:	f003 031f 	and.w	r3, r3, #31
 80092b0:	2201      	movs	r2, #1
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	e015      	b.n	80092e4 <LL_ADC_SetChannelPreselection+0x58>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	fa93 f3a3 	rbit	r3, r3
 80092c2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80092ce:	2320      	movs	r3, #32
 80092d0:	e003      	b.n	80092da <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	fab3 f383 	clz	r3, r3
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	f003 031f 	and.w	r3, r3, #31
 80092de:	2201      	movs	r2, #1
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	69d2      	ldr	r2, [r2, #28]
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	58026000 	.word	0x58026000

08009300 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3360      	adds	r3, #96	@ 0x60
 8009312:	461a      	mov	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a10      	ldr	r2, [pc, #64]	@ (8009360 <LL_ADC_SetOffset+0x60>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d10b      	bne.n	800933c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	4313      	orrs	r3, r2
 8009332:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800933a:	e00b      	b.n	8009354 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	430b      	orrs	r3, r1
 800934e:	431a      	orrs	r2, r3
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	601a      	str	r2, [r3, #0]
}
 8009354:	bf00      	nop
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	58026000 	.word	0x58026000

08009364 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3360      	adds	r3, #96	@ 0x60
 8009372:	461a      	mov	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f003 031f 	and.w	r3, r3, #31
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	fa01 f303 	lsl.w	r3, r1, r3
 80093b0:	431a      	orrs	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	611a      	str	r2, [r3, #16]
}
 80093b6:	bf00      	nop
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
	...

080093c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009404 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00e      	beq.n	80093f6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3360      	adds	r3, #96	@ 0x60
 80093dc:	461a      	mov	r2, r3
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	431a      	orrs	r2, r3
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	601a      	str	r2, [r3, #0]
  }
}
 80093f6:	bf00      	nop
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	58026000 	.word	0x58026000

08009408 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4a0c      	ldr	r2, [pc, #48]	@ (8009448 <LL_ADC_SetOffsetSaturation+0x40>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d10e      	bne.n	800943a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3360      	adds	r3, #96	@ 0x60
 8009420:	461a      	mov	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	431a      	orrs	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800943a:	bf00      	nop
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	58026000 	.word	0x58026000

0800944c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4a0c      	ldr	r2, [pc, #48]	@ (800948c <LL_ADC_SetOffsetSign+0x40>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d10e      	bne.n	800947e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3360      	adds	r3, #96	@ 0x60
 8009464:	461a      	mov	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	431a      	orrs	r2, r3
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	58026000 	.word	0x58026000

08009490 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3360      	adds	r3, #96	@ 0x60
 80094a0:	461a      	mov	r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4a0c      	ldr	r2, [pc, #48]	@ (80094e0 <LL_ADC_SetOffsetState+0x50>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d108      	bne.n	80094c4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	431a      	orrs	r2, r3
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80094c2:	e007      	b.n	80094d4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	601a      	str	r2, [r3, #0]
}
 80094d4:	bf00      	nop
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	58026000 	.word	0x58026000

080094e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800950a:	b480      	push	{r7}
 800950c:	b087      	sub	sp, #28
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3330      	adds	r3, #48	@ 0x30
 800951a:	461a      	mov	r2, r3
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	f003 030c 	and.w	r3, r3, #12
 8009526:	4413      	add	r3, r2
 8009528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 031f 	and.w	r3, r3, #31
 8009534:	211f      	movs	r1, #31
 8009536:	fa01 f303 	lsl.w	r3, r1, r3
 800953a:	43db      	mvns	r3, r3
 800953c:	401a      	ands	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	0e9b      	lsrs	r3, r3, #26
 8009542:	f003 011f 	and.w	r1, r3, #31
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f003 031f 	and.w	r3, r3, #31
 800954c:	fa01 f303 	lsl.w	r3, r1, r3
 8009550:	431a      	orrs	r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f023 0203 	bic.w	r2, r3, #3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60da      	str	r2, [r3, #12]
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f043 0201 	orr.w	r2, r3, #1
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a08      	ldr	r2, [pc, #32]	@ (80095d8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d107      	bne.n	80095ca <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f023 0203 	bic.w	r2, r3, #3
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	60da      	str	r2, [r3, #12]
  }
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	58026000 	.word	0x58026000

080095dc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80095f0:	2301      	movs	r3, #1
 80095f2:	e000      	b.n	80095f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009602:	b480      	push	{r7}
 8009604:	b087      	sub	sp, #28
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3314      	adds	r3, #20
 8009612:	461a      	mov	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	0e5b      	lsrs	r3, r3, #25
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	4413      	add	r3, r2
 8009620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	0d1b      	lsrs	r3, r3, #20
 800962a:	f003 031f 	and.w	r3, r3, #31
 800962e:	2107      	movs	r1, #7
 8009630:	fa01 f303 	lsl.w	r3, r1, r3
 8009634:	43db      	mvns	r3, r3
 8009636:	401a      	ands	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	0d1b      	lsrs	r3, r3, #20
 800963c:	f003 031f 	and.w	r3, r3, #31
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	fa01 f303 	lsl.w	r3, r1, r3
 8009646:	431a      	orrs	r2, r3
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800964c:	bf00      	nop
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a1a      	ldr	r2, [pc, #104]	@ (80096d0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d115      	bne.n	8009698 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009678:	43db      	mvns	r3, r3
 800967a:	401a      	ands	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f003 0318 	and.w	r3, r3, #24
 8009682:	4914      	ldr	r1, [pc, #80]	@ (80096d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009684:	40d9      	lsrs	r1, r3
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	400b      	ands	r3, r1
 800968a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800968e:	431a      	orrs	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009696:	e014      	b.n	80096c2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a4:	43db      	mvns	r3, r3
 80096a6:	401a      	ands	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f003 0318 	and.w	r3, r3, #24
 80096ae:	4909      	ldr	r1, [pc, #36]	@ (80096d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80096b0:	40d9      	lsrs	r1, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	400b      	ands	r3, r1
 80096b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096ba:	431a      	orrs	r2, r3
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	58026000 	.word	0x58026000
 80096d4:	000fffff 	.word	0x000fffff

080096d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f003 031f 	and.w	r3, r3, #31
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	4b04      	ldr	r3, [pc, #16]	@ (8009730 <LL_ADC_DisableDeepPowerDown+0x20>)
 800971e:	4013      	ands	r3, r2
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6093      	str	r3, [r2, #8]
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	5fffffc0 	.word	0x5fffffc0

08009734 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009748:	d101      	bne.n	800974e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <LL_ADC_EnableInternalRegulator+0x24>)
 800976a:	4013      	ands	r3, r2
 800976c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	6fffffc0 	.word	0x6fffffc0

08009784 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009798:	d101      	bne.n	800979e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	4b05      	ldr	r3, [pc, #20]	@ (80097d0 <LL_ADC_Enable+0x24>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	f043 0201 	orr.w	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	7fffffc0 	.word	0x7fffffc0

080097d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <LL_ADC_IsEnabled+0x18>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <LL_ADC_IsEnabled+0x1a>
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
	...

080097fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	4b05      	ldr	r3, [pc, #20]	@ (8009820 <LL_ADC_REG_StartConversion+0x24>)
 800980a:	4013      	ands	r3, r2
 800980c:	f043 0204 	orr.w	r2, r3, #4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	7fffffc0 	.word	0x7fffffc0

08009824 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b04      	cmp	r3, #4
 8009836:	d101      	bne.n	800983c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 0308 	and.w	r3, r3, #8
 800985a:	2b08      	cmp	r3, #8
 800985c:	d101      	bne.n	8009862 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009870:	b590      	push	{r4, r7, lr}
 8009872:	b089      	sub	sp, #36	@ 0x24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800987c:	2300      	movs	r3, #0
 800987e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e1ee      	b.n	8009c68 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009894:	2b00      	cmp	r3, #0
 8009896:	d109      	bne.n	80098ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7f9 fea5 	bl	80035e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ff3f 	bl	8009734 <LL_ADC_IsDeepPowerDownEnabled>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff ff25 	bl	8009710 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff ff5a 	bl	8009784 <LL_ADC_IsInternalRegulatorEnabled>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d114      	bne.n	8009900 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff ff3e 	bl	800975c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80098e0:	4b8e      	ldr	r3, [pc, #568]	@ (8009b1c <HAL_ADC_Init+0x2ac>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	099b      	lsrs	r3, r3, #6
 80098e6:	4a8e      	ldr	r2, [pc, #568]	@ (8009b20 <HAL_ADC_Init+0x2b0>)
 80098e8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ec:	099b      	lsrs	r3, r3, #6
 80098ee:	3301      	adds	r3, #1
 80098f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80098f2:	e002      	b.n	80098fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1f9      	bne.n	80098f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff ff3d 	bl	8009784 <LL_ADC_IsInternalRegulatorEnabled>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10d      	bne.n	800992c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009914:	f043 0210 	orr.w	r2, r3, #16
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009920:	f043 0201 	orr.w	r2, r3, #1
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff ff77 	bl	8009824 <LL_ADC_REG_IsConversionOngoing>
 8009936:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	f040 8188 	bne.w	8009c56 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f040 8184 	bne.w	8009c56 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009952:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009956:	f043 0202 	orr.w	r2, r3, #2
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff ff36 	bl	80097d4 <LL_ADC_IsEnabled>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d136      	bne.n	80099dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a6c      	ldr	r2, [pc, #432]	@ (8009b24 <HAL_ADC_Init+0x2b4>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d004      	beq.n	8009982 <HAL_ADC_Init+0x112>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a6a      	ldr	r2, [pc, #424]	@ (8009b28 <HAL_ADC_Init+0x2b8>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d10e      	bne.n	80099a0 <HAL_ADC_Init+0x130>
 8009982:	4868      	ldr	r0, [pc, #416]	@ (8009b24 <HAL_ADC_Init+0x2b4>)
 8009984:	f7ff ff26 	bl	80097d4 <LL_ADC_IsEnabled>
 8009988:	4604      	mov	r4, r0
 800998a:	4867      	ldr	r0, [pc, #412]	@ (8009b28 <HAL_ADC_Init+0x2b8>)
 800998c:	f7ff ff22 	bl	80097d4 <LL_ADC_IsEnabled>
 8009990:	4603      	mov	r3, r0
 8009992:	4323      	orrs	r3, r4
 8009994:	2b00      	cmp	r3, #0
 8009996:	bf0c      	ite	eq
 8009998:	2301      	moveq	r3, #1
 800999a:	2300      	movne	r3, #0
 800999c:	b2db      	uxtb	r3, r3
 800999e:	e008      	b.n	80099b2 <HAL_ADC_Init+0x142>
 80099a0:	4862      	ldr	r0, [pc, #392]	@ (8009b2c <HAL_ADC_Init+0x2bc>)
 80099a2:	f7ff ff17 	bl	80097d4 <LL_ADC_IsEnabled>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d012      	beq.n	80099dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a5a      	ldr	r2, [pc, #360]	@ (8009b24 <HAL_ADC_Init+0x2b4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d004      	beq.n	80099ca <HAL_ADC_Init+0x15a>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a58      	ldr	r2, [pc, #352]	@ (8009b28 <HAL_ADC_Init+0x2b8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d101      	bne.n	80099ce <HAL_ADC_Init+0x15e>
 80099ca:	4a59      	ldr	r2, [pc, #356]	@ (8009b30 <HAL_ADC_Init+0x2c0>)
 80099cc:	e000      	b.n	80099d0 <HAL_ADC_Init+0x160>
 80099ce:	4a59      	ldr	r2, [pc, #356]	@ (8009b34 <HAL_ADC_Init+0x2c4>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f7ff fc24 	bl	8009224 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a52      	ldr	r2, [pc, #328]	@ (8009b2c <HAL_ADC_Init+0x2bc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d129      	bne.n	8009a3a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	7e5b      	ldrb	r3, [r3, #25]
 80099ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80099f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80099f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d013      	beq.n	8009a28 <HAL_ADC_Init+0x1b8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b0c      	cmp	r3, #12
 8009a06:	d00d      	beq.n	8009a24 <HAL_ADC_Init+0x1b4>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2b1c      	cmp	r3, #28
 8009a0e:	d007      	beq.n	8009a20 <HAL_ADC_Init+0x1b0>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	2b18      	cmp	r3, #24
 8009a16:	d101      	bne.n	8009a1c <HAL_ADC_Init+0x1ac>
 8009a18:	2318      	movs	r3, #24
 8009a1a:	e006      	b.n	8009a2a <HAL_ADC_Init+0x1ba>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e004      	b.n	8009a2a <HAL_ADC_Init+0x1ba>
 8009a20:	2310      	movs	r3, #16
 8009a22:	e002      	b.n	8009a2a <HAL_ADC_Init+0x1ba>
 8009a24:	2308      	movs	r3, #8
 8009a26:	e000      	b.n	8009a2a <HAL_ADC_Init+0x1ba>
 8009a28:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009a2a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a32:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009a34:	4313      	orrs	r3, r2
 8009a36:	61bb      	str	r3, [r7, #24]
 8009a38:	e00e      	b.n	8009a58 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7e5b      	ldrb	r3, [r3, #25]
 8009a3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009a44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009a4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009a54:	4313      	orrs	r3, r2
 8009a56:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d106      	bne.n	8009a70 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	3b01      	subs	r3, #1
 8009a68:	045b      	lsls	r3, r3, #17
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d009      	beq.n	8009a8c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a26      	ldr	r2, [pc, #152]	@ (8009b2c <HAL_ADC_Init+0x2bc>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d115      	bne.n	8009ac2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	4b26      	ldr	r3, [pc, #152]	@ (8009b38 <HAL_ADC_Init+0x2c8>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	6812      	ldr	r2, [r2, #0]
 8009aa4:	69b9      	ldr	r1, [r7, #24]
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	611a      	str	r2, [r3, #16]
 8009ac0:	e009      	b.n	8009ad6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8009b3c <HAL_ADC_Init+0x2cc>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	69b9      	ldr	r1, [r7, #24]
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff fea2 	bl	8009824 <LL_ADC_REG_IsConversionOngoing>
 8009ae0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff feaf 	bl	800984a <LL_ADC_INJ_IsConversionOngoing>
 8009aec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f040 808e 	bne.w	8009c12 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f040 808a 	bne.w	8009c12 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a0a      	ldr	r2, [pc, #40]	@ (8009b2c <HAL_ADC_Init+0x2bc>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d11b      	bne.n	8009b40 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	7e1b      	ldrb	r3, [r3, #24]
 8009b0c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b14:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009b16:	4313      	orrs	r3, r2
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	e018      	b.n	8009b4e <HAL_ADC_Init+0x2de>
 8009b1c:	24000004 	.word	0x24000004
 8009b20:	053e2d63 	.word	0x053e2d63
 8009b24:	40022000 	.word	0x40022000
 8009b28:	40022100 	.word	0x40022100
 8009b2c:	58026000 	.word	0x58026000
 8009b30:	40022300 	.word	0x40022300
 8009b34:	58026300 	.word	0x58026300
 8009b38:	fff04007 	.word	0xfff04007
 8009b3c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	7e1b      	ldrb	r3, [r3, #24]
 8009b44:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	4b46      	ldr	r3, [pc, #280]	@ (8009c70 <HAL_ADC_Init+0x400>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	69b9      	ldr	r1, [r7, #24]
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d137      	bne.n	8009bdc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a3f      	ldr	r2, [pc, #252]	@ (8009c74 <HAL_ADC_Init+0x404>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d116      	bne.n	8009baa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	4b3d      	ldr	r3, [pc, #244]	@ (8009c78 <HAL_ADC_Init+0x408>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009b8e:	4311      	orrs	r1, r2
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009b94:	4311      	orrs	r1, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f042 0201 	orr.w	r2, r2, #1
 8009ba6:	611a      	str	r2, [r3, #16]
 8009ba8:	e020      	b.n	8009bec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	4b32      	ldr	r3, [pc, #200]	@ (8009c7c <HAL_ADC_Init+0x40c>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bb8:	3a01      	subs	r2, #1
 8009bba:	0411      	lsls	r1, r2, #16
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009bc0:	4311      	orrs	r1, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009bc6:	4311      	orrs	r1, r2
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 0201 	orr.w	r2, r2, #1
 8009bd8:	611a      	str	r2, [r3, #16]
 8009bda:	e007      	b.n	8009bec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0201 	bic.w	r2, r2, #1
 8009bea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a1b      	ldr	r2, [pc, #108]	@ (8009c74 <HAL_ADC_Init+0x404>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d002      	beq.n	8009c12 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f967 	bl	800aee0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d10c      	bne.n	8009c34 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c20:	f023 010f 	bic.w	r1, r3, #15
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	1e5a      	subs	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c32:	e007      	b.n	8009c44 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 020f 	bic.w	r2, r2, #15
 8009c42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	f043 0201 	orr.w	r2, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c54:	e007      	b.n	8009c66 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c5a:	f043 0210 	orr.w	r2, r3, #16
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3724      	adds	r7, #36	@ 0x24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd90      	pop	{r4, r7, pc}
 8009c70:	ffffbffc 	.word	0xffffbffc
 8009c74:	58026000 	.word	0x58026000
 8009c78:	fc00f81f 	.word	0xfc00f81f
 8009c7c:	fc00f81e 	.word	0xfc00f81e

08009c80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a60      	ldr	r2, [pc, #384]	@ (8009e14 <HAL_ADC_Start_DMA+0x194>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_ADC_Start_DMA+0x20>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8009e18 <HAL_ADC_Start_DMA+0x198>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d101      	bne.n	8009ca4 <HAL_ADC_Start_DMA+0x24>
 8009ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8009e1c <HAL_ADC_Start_DMA+0x19c>)
 8009ca2:	e000      	b.n	8009ca6 <HAL_ADC_Start_DMA+0x26>
 8009ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8009e20 <HAL_ADC_Start_DMA+0x1a0>)
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fd16 	bl	80096d8 <LL_ADC_GetMultimode>
 8009cac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fdb6 	bl	8009824 <LL_ADC_REG_IsConversionOngoing>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f040 80a2 	bne.w	8009e04 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_ADC_Start_DMA+0x4e>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e09d      	b.n	8009e0a <HAL_ADC_Start_DMA+0x18a>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d006      	beq.n	8009cea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d003      	beq.n	8009cea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	f040 8086 	bne.w	8009df6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 ffda 	bl	800aca4 <ADC_Enable>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d178      	bne.n	8009dec <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009cfe:	4b49      	ldr	r3, [pc, #292]	@ (8009e24 <HAL_ADC_Start_DMA+0x1a4>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a42      	ldr	r2, [pc, #264]	@ (8009e18 <HAL_ADC_Start_DMA+0x198>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d002      	beq.n	8009d1a <HAL_ADC_Start_DMA+0x9a>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	e000      	b.n	8009d1c <HAL_ADC_Start_DMA+0x9c>
 8009d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8009e14 <HAL_ADC_Start_DMA+0x194>)
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d002      	beq.n	8009d2a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d46:	f023 0206 	bic.w	r2, r3, #6
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	665a      	str	r2, [r3, #100]	@ 0x64
 8009d4e:	e002      	b.n	8009d56 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5a:	4a33      	ldr	r2, [pc, #204]	@ (8009e28 <HAL_ADC_Start_DMA+0x1a8>)
 8009d5c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d62:	4a32      	ldr	r2, [pc, #200]	@ (8009e2c <HAL_ADC_Start_DMA+0x1ac>)
 8009d64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d6a:	4a31      	ldr	r2, [pc, #196]	@ (8009e30 <HAL_ADC_Start_DMA+0x1b0>)
 8009d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	221c      	movs	r2, #28
 8009d74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f042 0210 	orr.w	r2, r2, #16
 8009d8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a28      	ldr	r2, [pc, #160]	@ (8009e34 <HAL_ADC_Start_DMA+0x1b4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d10f      	bne.n	8009db8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7ff fbfe 	bl	80095a8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff fbe9 	bl	8009588 <LL_ADC_EnableDMAReq>
 8009db6:	e007      	b.n	8009dc8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f7ff fbcd 	bl	8009562 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3340      	adds	r3, #64	@ 0x40
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f001 fe82 	bl	800bae0 <HAL_DMA_Start_IT>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff fd09 	bl	80097fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009dea:	e00d      	b.n	8009e08 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009df4:	e008      	b.n	8009e08 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009e02:	e001      	b.n	8009e08 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009e04:	2302      	movs	r3, #2
 8009e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	40022000 	.word	0x40022000
 8009e18:	40022100 	.word	0x40022100
 8009e1c:	40022300 	.word	0x40022300
 8009e20:	58026300 	.word	0x58026300
 8009e24:	fffff0fe 	.word	0xfffff0fe
 8009e28:	0800adb9 	.word	0x0800adb9
 8009e2c:	0800ae91 	.word	0x0800ae91
 8009e30:	0800aead 	.word	0x0800aead
 8009e34:	58026000 	.word	0x58026000

08009e38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08a      	sub	sp, #40	@ 0x28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009e40:	2300      	movs	r3, #0
 8009e42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a87      	ldr	r2, [pc, #540]	@ (800a078 <HAL_ADC_IRQHandler+0x240>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_ADC_IRQHandler+0x30>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a86      	ldr	r2, [pc, #536]	@ (800a07c <HAL_ADC_IRQHandler+0x244>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d101      	bne.n	8009e6c <HAL_ADC_IRQHandler+0x34>
 8009e68:	4b85      	ldr	r3, [pc, #532]	@ (800a080 <HAL_ADC_IRQHandler+0x248>)
 8009e6a:	e000      	b.n	8009e6e <HAL_ADC_IRQHandler+0x36>
 8009e6c:	4b85      	ldr	r3, [pc, #532]	@ (800a084 <HAL_ADC_IRQHandler+0x24c>)
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fc32 	bl	80096d8 <LL_ADC_GetMultimode>
 8009e74:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d017      	beq.n	8009eb0 <HAL_ADC_IRQHandler+0x78>
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d012      	beq.n	8009eb0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d105      	bne.n	8009ea2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f932 	bl	800b10c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2202      	movs	r2, #2
 8009eae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d004      	beq.n	8009ec4 <HAL_ADC_IRQHandler+0x8c>
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8083 	beq.w	8009fd6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	f003 0308 	and.w	r3, r3, #8
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d07d      	beq.n	8009fd6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ede:	f003 0310 	and.w	r3, r3, #16
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff faf4 	bl	80094e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d062      	beq.n	8009fc8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a5d      	ldr	r2, [pc, #372]	@ (800a07c <HAL_ADC_IRQHandler+0x244>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d002      	beq.n	8009f12 <HAL_ADC_IRQHandler+0xda>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	e000      	b.n	8009f14 <HAL_ADC_IRQHandler+0xdc>
 8009f12:	4b59      	ldr	r3, [pc, #356]	@ (800a078 <HAL_ADC_IRQHandler+0x240>)
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d008      	beq.n	8009f2e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b05      	cmp	r3, #5
 8009f26:	d002      	beq.n	8009f2e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2b09      	cmp	r3, #9
 8009f2c:	d104      	bne.n	8009f38 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	623b      	str	r3, [r7, #32]
 8009f36:	e00c      	b.n	8009f52 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800a07c <HAL_ADC_IRQHandler+0x244>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d002      	beq.n	8009f48 <HAL_ADC_IRQHandler+0x110>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	e000      	b.n	8009f4a <HAL_ADC_IRQHandler+0x112>
 8009f48:	4b4b      	ldr	r3, [pc, #300]	@ (800a078 <HAL_ADC_IRQHandler+0x240>)
 8009f4a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d135      	bne.n	8009fc8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0308 	and.w	r3, r3, #8
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d12e      	bne.n	8009fc8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fc58 	bl	8009824 <LL_ADC_REG_IsConversionOngoing>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d11a      	bne.n	8009fb0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 020c 	bic.w	r2, r2, #12
 8009f88:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d112      	bne.n	8009fc8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa6:	f043 0201 	orr.w	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	661a      	str	r2, [r3, #96]	@ 0x60
 8009fae:	e00b      	b.n	8009fc8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fb4:	f043 0210 	orr.w	r2, r3, #16
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fc0:	f043 0201 	orr.w	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f96f 	bl	800a2ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	220c      	movs	r2, #12
 8009fd4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <HAL_ADC_IRQHandler+0x1b2>
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80a0 	beq.w	800a136 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 809a 	beq.w	800a136 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a006:	f003 0310 	and.w	r3, r3, #16
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d105      	bne.n	800a01a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a012:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fadc 	bl	80095dc <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a024:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fa5a 	bl	80094e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a030:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a11      	ldr	r2, [pc, #68]	@ (800a07c <HAL_ADC_IRQHandler+0x244>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d002      	beq.n	800a042 <HAL_ADC_IRQHandler+0x20a>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	e000      	b.n	800a044 <HAL_ADC_IRQHandler+0x20c>
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <HAL_ADC_IRQHandler+0x240>)
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	6812      	ldr	r2, [r2, #0]
 800a048:	4293      	cmp	r3, r2
 800a04a:	d008      	beq.n	800a05e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b06      	cmp	r3, #6
 800a056:	d002      	beq.n	800a05e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b07      	cmp	r3, #7
 800a05c:	d104      	bne.n	800a068 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	623b      	str	r3, [r7, #32]
 800a066:	e014      	b.n	800a092 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a03      	ldr	r2, [pc, #12]	@ (800a07c <HAL_ADC_IRQHandler+0x244>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00a      	beq.n	800a088 <HAL_ADC_IRQHandler+0x250>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	e008      	b.n	800a08a <HAL_ADC_IRQHandler+0x252>
 800a078:	40022000 	.word	0x40022000
 800a07c:	40022100 	.word	0x40022100
 800a080:	40022300 	.word	0x40022300
 800a084:	58026300 	.word	0x58026300
 800a088:	4b84      	ldr	r3, [pc, #528]	@ (800a29c <HAL_ADC_IRQHandler+0x464>)
 800a08a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d047      	beq.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <HAL_ADC_IRQHandler+0x27a>
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d03f      	beq.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d13a      	bne.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0bc:	2b40      	cmp	r3, #64	@ 0x40
 800a0be:	d133      	bne.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d12e      	bne.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff fbbb 	bl	800984a <LL_ADC_INJ_IsConversionOngoing>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d11a      	bne.n	800a110 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a0e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d112      	bne.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a106:	f043 0201 	orr.w	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a10e:	e00b      	b.n	800a128 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a114:	f043 0210 	orr.w	r2, r3, #16
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a120:	f043 0201 	orr.w	r2, r3, #1
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 ffc7 	bl	800b0bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2260      	movs	r2, #96	@ 0x60
 800a134:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d011      	beq.n	800a164 <HAL_ADC_IRQHandler+0x32c>
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a14e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f8bc 	bl	800a2d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2280      	movs	r2, #128	@ 0x80
 800a162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d012      	beq.n	800a194 <HAL_ADC_IRQHandler+0x35c>
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00d      	beq.n	800a194 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a17c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 ffad 	bl	800b0e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a192:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d012      	beq.n	800a1c4 <HAL_ADC_IRQHandler+0x38c>
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00d      	beq.n	800a1c4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 ff9f 	bl	800b0f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	f003 0310 	and.w	r3, r3, #16
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d043      	beq.n	800a256 <HAL_ADC_IRQHandler+0x41e>
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	f003 0310 	and.w	r3, r3, #16
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d03e      	beq.n	800a256 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e4:	e021      	b.n	800a22a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d015      	beq.n	800a218 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a29c <HAL_ADC_IRQHandler+0x464>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d004      	beq.n	800a200 <HAL_ADC_IRQHandler+0x3c8>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a29      	ldr	r2, [pc, #164]	@ (800a2a0 <HAL_ADC_IRQHandler+0x468>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d101      	bne.n	800a204 <HAL_ADC_IRQHandler+0x3cc>
 800a200:	4b28      	ldr	r3, [pc, #160]	@ (800a2a4 <HAL_ADC_IRQHandler+0x46c>)
 800a202:	e000      	b.n	800a206 <HAL_ADC_IRQHandler+0x3ce>
 800a204:	4b28      	ldr	r3, [pc, #160]	@ (800a2a8 <HAL_ADC_IRQHandler+0x470>)
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff fa74 	bl	80096f4 <LL_ADC_GetMultiDMATransfer>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00b      	beq.n	800a22a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a212:	2301      	movs	r3, #1
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
 800a216:	e008      	b.n	800a22a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a226:	2301      	movs	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d10e      	bne.n	800a24e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a234:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a240:	f043 0202 	orr.w	r2, r3, #2
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f84d 	bl	800a2e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2210      	movs	r2, #16
 800a254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d018      	beq.n	800a292 <HAL_ADC_IRQHandler+0x45a>
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a266:	2b00      	cmp	r3, #0
 800a268:	d013      	beq.n	800a292 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a26e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a27a:	f043 0208 	orr.w	r2, r3, #8
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a28a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 ff1f 	bl	800b0d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a292:	bf00      	nop
 800a294:	3728      	adds	r7, #40	@ 0x28
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	40022000 	.word	0x40022000
 800a2a0:	40022100 	.word	0x40022100
 800a2a4:	40022300 	.word	0x40022300
 800a2a8:	58026300 	.word	0x58026300

0800a2ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b0a5      	sub	sp, #148	@ 0x94
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a316:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4aa4      	ldr	r2, [pc, #656]	@ (800a5b0 <HAL_ADC_ConfigChannel+0x2b4>)
 800a31e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d102      	bne.n	800a330 <HAL_ADC_ConfigChannel+0x34>
 800a32a:	2302      	movs	r3, #2
 800a32c:	f000 bca2 	b.w	800ac74 <HAL_ADC_ConfigChannel+0x978>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fa71 	bl	8009824 <LL_ADC_REG_IsConversionOngoing>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	f040 8486 	bne.w	800ac56 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	db31      	blt.n	800a3b6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a97      	ldr	r2, [pc, #604]	@ (800a5b4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d02c      	beq.n	800a3b6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a364:	2b00      	cmp	r3, #0
 800a366:	d108      	bne.n	800a37a <HAL_ADC_ConfigChannel+0x7e>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	0e9b      	lsrs	r3, r3, #26
 800a36e:	f003 031f 	and.w	r3, r3, #31
 800a372:	2201      	movs	r2, #1
 800a374:	fa02 f303 	lsl.w	r3, r2, r3
 800a378:	e016      	b.n	800a3a8 <HAL_ADC_ConfigChannel+0xac>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a382:	fa93 f3a3 	rbit	r3, r3
 800a386:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a38a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a38c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a392:	2320      	movs	r3, #32
 800a394:	e003      	b.n	800a39e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a396:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a398:	fab3 f383 	clz	r3, r3
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f003 031f 	and.w	r3, r3, #31
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	69d1      	ldr	r1, [r2, #28]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6859      	ldr	r1, [r3, #4]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7ff f8a1 	bl	800950a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fa29 	bl	8009824 <LL_ADC_REG_IsConversionOngoing>
 800a3d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fa35 	bl	800984a <LL_ADC_INJ_IsConversionOngoing>
 800a3e0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a3e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f040 824a 	bne.w	800a882 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a3ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f040 8245 	bne.w	800a882 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	6819      	ldr	r1, [r3, #0]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	461a      	mov	r2, r3
 800a406:	f7ff f8fc 	bl	8009602 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a69      	ldr	r2, [pc, #420]	@ (800a5b4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d10d      	bne.n	800a430 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	695a      	ldr	r2, [r3, #20]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	08db      	lsrs	r3, r3, #3
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	fa02 f303 	lsl.w	r3, r2, r3
 800a42a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a42e:	e032      	b.n	800a496 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a430:	4b61      	ldr	r3, [pc, #388]	@ (800a5b8 <HAL_ADC_ConfigChannel+0x2bc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a43c:	d10b      	bne.n	800a456 <HAL_ADC_ConfigChannel+0x15a>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	695a      	ldr	r2, [r3, #20]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	089b      	lsrs	r3, r3, #2
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	005b      	lsls	r3, r3, #1
 800a450:	fa02 f303 	lsl.w	r3, r2, r3
 800a454:	e01d      	b.n	800a492 <HAL_ADC_ConfigChannel+0x196>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10b      	bne.n	800a47c <HAL_ADC_ConfigChannel+0x180>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	695a      	ldr	r2, [r3, #20]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	089b      	lsrs	r3, r3, #2
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	e00a      	b.n	800a492 <HAL_ADC_ConfigChannel+0x196>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	695a      	ldr	r2, [r3, #20]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	089b      	lsrs	r3, r3, #2
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	fa02 f303 	lsl.w	r3, r2, r3
 800a492:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	d048      	beq.n	800a530 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	6919      	ldr	r1, [r3, #16]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4ae:	f7fe ff27 	bl	8009300 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a3f      	ldr	r2, [pc, #252]	@ (800a5b4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d119      	bne.n	800a4f0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	6919      	ldr	r1, [r3, #16]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f7fe ffbf 	bl	800944c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6919      	ldr	r1, [r3, #16]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d102      	bne.n	800a4e6 <HAL_ADC_ConfigChannel+0x1ea>
 800a4e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a4e4:	e000      	b.n	800a4e8 <HAL_ADC_ConfigChannel+0x1ec>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f7fe ff8d 	bl	8009408 <LL_ADC_SetOffsetSaturation>
 800a4ee:	e1c8      	b.n	800a882 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6818      	ldr	r0, [r3, #0]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	6919      	ldr	r1, [r3, #16]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d102      	bne.n	800a508 <HAL_ADC_ConfigChannel+0x20c>
 800a502:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a506:	e000      	b.n	800a50a <HAL_ADC_ConfigChannel+0x20e>
 800a508:	2300      	movs	r3, #0
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7fe ff5a 	bl	80093c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	6919      	ldr	r1, [r3, #16]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	7e1b      	ldrb	r3, [r3, #24]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d102      	bne.n	800a526 <HAL_ADC_ConfigChannel+0x22a>
 800a520:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a524:	e000      	b.n	800a528 <HAL_ADC_ConfigChannel+0x22c>
 800a526:	2300      	movs	r3, #0
 800a528:	461a      	mov	r2, r3
 800a52a:	f7fe ff31 	bl	8009390 <LL_ADC_SetDataRightShift>
 800a52e:	e1a8      	b.n	800a882 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a1f      	ldr	r2, [pc, #124]	@ (800a5b4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a536:	4293      	cmp	r3, r2
 800a538:	f040 815b 	bne.w	800a7f2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2100      	movs	r1, #0
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe ff0e 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a548:	4603      	mov	r3, r0
 800a54a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <HAL_ADC_ConfigChannel+0x26c>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2100      	movs	r1, #0
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe ff03 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a55e:	4603      	mov	r3, r0
 800a560:	0e9b      	lsrs	r3, r3, #26
 800a562:	f003 021f 	and.w	r2, r3, #31
 800a566:	e017      	b.n	800a598 <HAL_ADC_ConfigChannel+0x29c>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fef8 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a574:	4603      	mov	r3, r0
 800a576:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a578:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a57a:	fa93 f3a3 	rbit	r3, r3
 800a57e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a582:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a58a:	2320      	movs	r3, #32
 800a58c:	e003      	b.n	800a596 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a590:	fab3 f383 	clz	r3, r3
 800a594:	b2db      	uxtb	r3, r3
 800a596:	461a      	mov	r2, r3
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10b      	bne.n	800a5bc <HAL_ADC_ConfigChannel+0x2c0>
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	0e9b      	lsrs	r3, r3, #26
 800a5aa:	f003 031f 	and.w	r3, r3, #31
 800a5ae:	e017      	b.n	800a5e0 <HAL_ADC_ConfigChannel+0x2e4>
 800a5b0:	47ff0000 	.word	0x47ff0000
 800a5b4:	58026000 	.word	0x58026000
 800a5b8:	5c001000 	.word	0x5c001000
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5c4:	fa93 f3a3 	rbit	r3, r3
 800a5c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a5ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a5ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a5d4:	2320      	movs	r3, #32
 800a5d6:	e003      	b.n	800a5e0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a5d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5da:	fab3 f383 	clz	r3, r3
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d106      	bne.n	800a5f2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe ff4f 	bl	8009490 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe feb3 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <HAL_ADC_ConfigChannel+0x322>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2101      	movs	r1, #1
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fea8 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a614:	4603      	mov	r3, r0
 800a616:	0e9b      	lsrs	r3, r3, #26
 800a618:	f003 021f 	and.w	r2, r3, #31
 800a61c:	e017      	b.n	800a64e <HAL_ADC_ConfigChannel+0x352>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2101      	movs	r1, #1
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe fe9d 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a62a:	4603      	mov	r3, r0
 800a62c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a62e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a630:	fa93 f3a3 	rbit	r3, r3
 800a634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a638:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a640:	2320      	movs	r3, #32
 800a642:	e003      	b.n	800a64c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a646:	fab3 f383 	clz	r3, r3
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a656:	2b00      	cmp	r3, #0
 800a658:	d105      	bne.n	800a666 <HAL_ADC_ConfigChannel+0x36a>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	0e9b      	lsrs	r3, r3, #26
 800a660:	f003 031f 	and.w	r3, r3, #31
 800a664:	e011      	b.n	800a68a <HAL_ADC_ConfigChannel+0x38e>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a66c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a66e:	fa93 f3a3 	rbit	r3, r3
 800a672:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a676:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800a67e:	2320      	movs	r3, #32
 800a680:	e003      	b.n	800a68a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800a682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a684:	fab3 f383 	clz	r3, r3
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d106      	bne.n	800a69c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2200      	movs	r2, #0
 800a694:	2101      	movs	r1, #1
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fefa 	bl	8009490 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2102      	movs	r1, #2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe fe5e 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <HAL_ADC_ConfigChannel+0x3cc>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2102      	movs	r1, #2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe fe53 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	0e9b      	lsrs	r3, r3, #26
 800a6c2:	f003 021f 	and.w	r2, r3, #31
 800a6c6:	e017      	b.n	800a6f8 <HAL_ADC_ConfigChannel+0x3fc>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fe48 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6da:	fa93 f3a3 	rbit	r3, r3
 800a6de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800a6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800a6ea:	2320      	movs	r3, #32
 800a6ec:	e003      	b.n	800a6f6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800a6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f0:	fab3 f383 	clz	r3, r3
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <HAL_ADC_ConfigChannel+0x414>
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	0e9b      	lsrs	r3, r3, #26
 800a70a:	f003 031f 	and.w	r3, r3, #31
 800a70e:	e011      	b.n	800a734 <HAL_ADC_ConfigChannel+0x438>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a718:	fa93 f3a3 	rbit	r3, r3
 800a71c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800a728:	2320      	movs	r3, #32
 800a72a:	e003      	b.n	800a734 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	fab3 f383 	clz	r3, r3
 800a732:	b2db      	uxtb	r3, r3
 800a734:	429a      	cmp	r2, r3
 800a736:	d106      	bne.n	800a746 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2200      	movs	r2, #0
 800a73e:	2102      	movs	r1, #2
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe fea5 	bl	8009490 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2103      	movs	r1, #3
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fe fe09 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a752:	4603      	mov	r3, r0
 800a754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <HAL_ADC_ConfigChannel+0x476>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2103      	movs	r1, #3
 800a762:	4618      	mov	r0, r3
 800a764:	f7fe fdfe 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a768:	4603      	mov	r3, r0
 800a76a:	0e9b      	lsrs	r3, r3, #26
 800a76c:	f003 021f 	and.w	r2, r3, #31
 800a770:	e017      	b.n	800a7a2 <HAL_ADC_ConfigChannel+0x4a6>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2103      	movs	r1, #3
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fe fdf3 	bl	8009364 <LL_ADC_GetOffsetChannel>
 800a77e:	4603      	mov	r3, r0
 800a780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	fa93 f3a3 	rbit	r3, r3
 800a788:	61fb      	str	r3, [r7, #28]
  return result;
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a794:	2320      	movs	r3, #32
 800a796:	e003      	b.n	800a7a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	fab3 f383 	clz	r3, r3
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d105      	bne.n	800a7ba <HAL_ADC_ConfigChannel+0x4be>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	0e9b      	lsrs	r3, r3, #26
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	e011      	b.n	800a7de <HAL_ADC_ConfigChannel+0x4e2>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	fa93 f3a3 	rbit	r3, r3
 800a7c6:	613b      	str	r3, [r7, #16]
  return result;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800a7d2:	2320      	movs	r3, #32
 800a7d4:	e003      	b.n	800a7de <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	fab3 f383 	clz	r3, r3
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d14f      	bne.n	800a882 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	2103      	movs	r1, #3
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe fe50 	bl	8009490 <LL_ADC_SetOffsetState>
 800a7f0:	e047      	b.n	800a882 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	069b      	lsls	r3, r3, #26
 800a802:	429a      	cmp	r2, r3
 800a804:	d107      	bne.n	800a816 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a814:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a81c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	069b      	lsls	r3, r3, #26
 800a826:	429a      	cmp	r2, r3
 800a828:	d107      	bne.n	800a83a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a838:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a840:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	069b      	lsls	r3, r3, #26
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d107      	bne.n	800a85e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a85c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	069b      	lsls	r3, r3, #26
 800a86e:	429a      	cmp	r2, r3
 800a870:	d107      	bne.n	800a882 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a880:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe ffa4 	bl	80097d4 <LL_ADC_IsEnabled>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f040 81ea 	bne.w	800ac68 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	6819      	ldr	r1, [r3, #0]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f7fe fed9 	bl	8009658 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	4a7a      	ldr	r2, [pc, #488]	@ (800aa94 <HAL_ADC_ConfigChannel+0x798>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	f040 80e0 	bne.w	800aa72 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4977      	ldr	r1, [pc, #476]	@ (800aa98 <HAL_ADC_ConfigChannel+0x79c>)
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	d147      	bne.n	800a950 <HAL_ADC_ConfigChannel+0x654>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4975      	ldr	r1, [pc, #468]	@ (800aa9c <HAL_ADC_ConfigChannel+0x7a0>)
 800a8c6:	428b      	cmp	r3, r1
 800a8c8:	d040      	beq.n	800a94c <HAL_ADC_ConfigChannel+0x650>
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4974      	ldr	r1, [pc, #464]	@ (800aaa0 <HAL_ADC_ConfigChannel+0x7a4>)
 800a8d0:	428b      	cmp	r3, r1
 800a8d2:	d039      	beq.n	800a948 <HAL_ADC_ConfigChannel+0x64c>
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4972      	ldr	r1, [pc, #456]	@ (800aaa4 <HAL_ADC_ConfigChannel+0x7a8>)
 800a8da:	428b      	cmp	r3, r1
 800a8dc:	d032      	beq.n	800a944 <HAL_ADC_ConfigChannel+0x648>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4971      	ldr	r1, [pc, #452]	@ (800aaa8 <HAL_ADC_ConfigChannel+0x7ac>)
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	d02b      	beq.n	800a940 <HAL_ADC_ConfigChannel+0x644>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	496f      	ldr	r1, [pc, #444]	@ (800aaac <HAL_ADC_ConfigChannel+0x7b0>)
 800a8ee:	428b      	cmp	r3, r1
 800a8f0:	d024      	beq.n	800a93c <HAL_ADC_ConfigChannel+0x640>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	496e      	ldr	r1, [pc, #440]	@ (800aab0 <HAL_ADC_ConfigChannel+0x7b4>)
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	d01d      	beq.n	800a938 <HAL_ADC_ConfigChannel+0x63c>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	496c      	ldr	r1, [pc, #432]	@ (800aab4 <HAL_ADC_ConfigChannel+0x7b8>)
 800a902:	428b      	cmp	r3, r1
 800a904:	d016      	beq.n	800a934 <HAL_ADC_ConfigChannel+0x638>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	496b      	ldr	r1, [pc, #428]	@ (800aab8 <HAL_ADC_ConfigChannel+0x7bc>)
 800a90c:	428b      	cmp	r3, r1
 800a90e:	d00f      	beq.n	800a930 <HAL_ADC_ConfigChannel+0x634>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4969      	ldr	r1, [pc, #420]	@ (800aabc <HAL_ADC_ConfigChannel+0x7c0>)
 800a916:	428b      	cmp	r3, r1
 800a918:	d008      	beq.n	800a92c <HAL_ADC_ConfigChannel+0x630>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4968      	ldr	r1, [pc, #416]	@ (800aac0 <HAL_ADC_ConfigChannel+0x7c4>)
 800a920:	428b      	cmp	r3, r1
 800a922:	d101      	bne.n	800a928 <HAL_ADC_ConfigChannel+0x62c>
 800a924:	4b67      	ldr	r3, [pc, #412]	@ (800aac4 <HAL_ADC_ConfigChannel+0x7c8>)
 800a926:	e0a0      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a928:	2300      	movs	r3, #0
 800a92a:	e09e      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a92c:	4b66      	ldr	r3, [pc, #408]	@ (800aac8 <HAL_ADC_ConfigChannel+0x7cc>)
 800a92e:	e09c      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a930:	4b66      	ldr	r3, [pc, #408]	@ (800aacc <HAL_ADC_ConfigChannel+0x7d0>)
 800a932:	e09a      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a934:	4b60      	ldr	r3, [pc, #384]	@ (800aab8 <HAL_ADC_ConfigChannel+0x7bc>)
 800a936:	e098      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a938:	4b5e      	ldr	r3, [pc, #376]	@ (800aab4 <HAL_ADC_ConfigChannel+0x7b8>)
 800a93a:	e096      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a93c:	4b64      	ldr	r3, [pc, #400]	@ (800aad0 <HAL_ADC_ConfigChannel+0x7d4>)
 800a93e:	e094      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a940:	4b64      	ldr	r3, [pc, #400]	@ (800aad4 <HAL_ADC_ConfigChannel+0x7d8>)
 800a942:	e092      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a944:	4b64      	ldr	r3, [pc, #400]	@ (800aad8 <HAL_ADC_ConfigChannel+0x7dc>)
 800a946:	e090      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a948:	4b64      	ldr	r3, [pc, #400]	@ (800aadc <HAL_ADC_ConfigChannel+0x7e0>)
 800a94a:	e08e      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e08c      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4962      	ldr	r1, [pc, #392]	@ (800aae0 <HAL_ADC_ConfigChannel+0x7e4>)
 800a956:	428b      	cmp	r3, r1
 800a958:	d140      	bne.n	800a9dc <HAL_ADC_ConfigChannel+0x6e0>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	494f      	ldr	r1, [pc, #316]	@ (800aa9c <HAL_ADC_ConfigChannel+0x7a0>)
 800a960:	428b      	cmp	r3, r1
 800a962:	d039      	beq.n	800a9d8 <HAL_ADC_ConfigChannel+0x6dc>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	494d      	ldr	r1, [pc, #308]	@ (800aaa0 <HAL_ADC_ConfigChannel+0x7a4>)
 800a96a:	428b      	cmp	r3, r1
 800a96c:	d032      	beq.n	800a9d4 <HAL_ADC_ConfigChannel+0x6d8>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	494c      	ldr	r1, [pc, #304]	@ (800aaa4 <HAL_ADC_ConfigChannel+0x7a8>)
 800a974:	428b      	cmp	r3, r1
 800a976:	d02b      	beq.n	800a9d0 <HAL_ADC_ConfigChannel+0x6d4>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	494a      	ldr	r1, [pc, #296]	@ (800aaa8 <HAL_ADC_ConfigChannel+0x7ac>)
 800a97e:	428b      	cmp	r3, r1
 800a980:	d024      	beq.n	800a9cc <HAL_ADC_ConfigChannel+0x6d0>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4949      	ldr	r1, [pc, #292]	@ (800aaac <HAL_ADC_ConfigChannel+0x7b0>)
 800a988:	428b      	cmp	r3, r1
 800a98a:	d01d      	beq.n	800a9c8 <HAL_ADC_ConfigChannel+0x6cc>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4947      	ldr	r1, [pc, #284]	@ (800aab0 <HAL_ADC_ConfigChannel+0x7b4>)
 800a992:	428b      	cmp	r3, r1
 800a994:	d016      	beq.n	800a9c4 <HAL_ADC_ConfigChannel+0x6c8>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4946      	ldr	r1, [pc, #280]	@ (800aab4 <HAL_ADC_ConfigChannel+0x7b8>)
 800a99c:	428b      	cmp	r3, r1
 800a99e:	d00f      	beq.n	800a9c0 <HAL_ADC_ConfigChannel+0x6c4>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4944      	ldr	r1, [pc, #272]	@ (800aab8 <HAL_ADC_ConfigChannel+0x7bc>)
 800a9a6:	428b      	cmp	r3, r1
 800a9a8:	d008      	beq.n	800a9bc <HAL_ADC_ConfigChannel+0x6c0>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4944      	ldr	r1, [pc, #272]	@ (800aac0 <HAL_ADC_ConfigChannel+0x7c4>)
 800a9b0:	428b      	cmp	r3, r1
 800a9b2:	d101      	bne.n	800a9b8 <HAL_ADC_ConfigChannel+0x6bc>
 800a9b4:	4b43      	ldr	r3, [pc, #268]	@ (800aac4 <HAL_ADC_ConfigChannel+0x7c8>)
 800a9b6:	e058      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e056      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9bc:	4b43      	ldr	r3, [pc, #268]	@ (800aacc <HAL_ADC_ConfigChannel+0x7d0>)
 800a9be:	e054      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9c0:	4b3d      	ldr	r3, [pc, #244]	@ (800aab8 <HAL_ADC_ConfigChannel+0x7bc>)
 800a9c2:	e052      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9c4:	4b3b      	ldr	r3, [pc, #236]	@ (800aab4 <HAL_ADC_ConfigChannel+0x7b8>)
 800a9c6:	e050      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9c8:	4b41      	ldr	r3, [pc, #260]	@ (800aad0 <HAL_ADC_ConfigChannel+0x7d4>)
 800a9ca:	e04e      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9cc:	4b41      	ldr	r3, [pc, #260]	@ (800aad4 <HAL_ADC_ConfigChannel+0x7d8>)
 800a9ce:	e04c      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9d0:	4b41      	ldr	r3, [pc, #260]	@ (800aad8 <HAL_ADC_ConfigChannel+0x7dc>)
 800a9d2:	e04a      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9d4:	4b41      	ldr	r3, [pc, #260]	@ (800aadc <HAL_ADC_ConfigChannel+0x7e0>)
 800a9d6:	e048      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e046      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4940      	ldr	r1, [pc, #256]	@ (800aae4 <HAL_ADC_ConfigChannel+0x7e8>)
 800a9e2:	428b      	cmp	r3, r1
 800a9e4:	d140      	bne.n	800aa68 <HAL_ADC_ConfigChannel+0x76c>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	492c      	ldr	r1, [pc, #176]	@ (800aa9c <HAL_ADC_ConfigChannel+0x7a0>)
 800a9ec:	428b      	cmp	r3, r1
 800a9ee:	d039      	beq.n	800aa64 <HAL_ADC_ConfigChannel+0x768>
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	492a      	ldr	r1, [pc, #168]	@ (800aaa0 <HAL_ADC_ConfigChannel+0x7a4>)
 800a9f6:	428b      	cmp	r3, r1
 800a9f8:	d032      	beq.n	800aa60 <HAL_ADC_ConfigChannel+0x764>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4929      	ldr	r1, [pc, #164]	@ (800aaa4 <HAL_ADC_ConfigChannel+0x7a8>)
 800aa00:	428b      	cmp	r3, r1
 800aa02:	d02b      	beq.n	800aa5c <HAL_ADC_ConfigChannel+0x760>
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4927      	ldr	r1, [pc, #156]	@ (800aaa8 <HAL_ADC_ConfigChannel+0x7ac>)
 800aa0a:	428b      	cmp	r3, r1
 800aa0c:	d024      	beq.n	800aa58 <HAL_ADC_ConfigChannel+0x75c>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4926      	ldr	r1, [pc, #152]	@ (800aaac <HAL_ADC_ConfigChannel+0x7b0>)
 800aa14:	428b      	cmp	r3, r1
 800aa16:	d01d      	beq.n	800aa54 <HAL_ADC_ConfigChannel+0x758>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4924      	ldr	r1, [pc, #144]	@ (800aab0 <HAL_ADC_ConfigChannel+0x7b4>)
 800aa1e:	428b      	cmp	r3, r1
 800aa20:	d016      	beq.n	800aa50 <HAL_ADC_ConfigChannel+0x754>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4923      	ldr	r1, [pc, #140]	@ (800aab4 <HAL_ADC_ConfigChannel+0x7b8>)
 800aa28:	428b      	cmp	r3, r1
 800aa2a:	d00f      	beq.n	800aa4c <HAL_ADC_ConfigChannel+0x750>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4926      	ldr	r1, [pc, #152]	@ (800aacc <HAL_ADC_ConfigChannel+0x7d0>)
 800aa32:	428b      	cmp	r3, r1
 800aa34:	d008      	beq.n	800aa48 <HAL_ADC_ConfigChannel+0x74c>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	492b      	ldr	r1, [pc, #172]	@ (800aae8 <HAL_ADC_ConfigChannel+0x7ec>)
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	d101      	bne.n	800aa44 <HAL_ADC_ConfigChannel+0x748>
 800aa40:	4b2a      	ldr	r3, [pc, #168]	@ (800aaec <HAL_ADC_ConfigChannel+0x7f0>)
 800aa42:	e012      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa44:	2300      	movs	r3, #0
 800aa46:	e010      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa48:	4b27      	ldr	r3, [pc, #156]	@ (800aae8 <HAL_ADC_ConfigChannel+0x7ec>)
 800aa4a:	e00e      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa4c:	4b1a      	ldr	r3, [pc, #104]	@ (800aab8 <HAL_ADC_ConfigChannel+0x7bc>)
 800aa4e:	e00c      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa50:	4b18      	ldr	r3, [pc, #96]	@ (800aab4 <HAL_ADC_ConfigChannel+0x7b8>)
 800aa52:	e00a      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa54:	4b1e      	ldr	r3, [pc, #120]	@ (800aad0 <HAL_ADC_ConfigChannel+0x7d4>)
 800aa56:	e008      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa58:	4b1e      	ldr	r3, [pc, #120]	@ (800aad4 <HAL_ADC_ConfigChannel+0x7d8>)
 800aa5a:	e006      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	@ (800aad8 <HAL_ADC_ConfigChannel+0x7dc>)
 800aa5e:	e004      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa60:	4b1e      	ldr	r3, [pc, #120]	@ (800aadc <HAL_ADC_ConfigChannel+0x7e0>)
 800aa62:	e002      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <HAL_ADC_ConfigChannel+0x76e>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f7fe fc0d 	bl	800928c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f280 80f6 	bge.w	800ac68 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a05      	ldr	r2, [pc, #20]	@ (800aa98 <HAL_ADC_ConfigChannel+0x79c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d004      	beq.n	800aa90 <HAL_ADC_ConfigChannel+0x794>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a15      	ldr	r2, [pc, #84]	@ (800aae0 <HAL_ADC_ConfigChannel+0x7e4>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d131      	bne.n	800aaf4 <HAL_ADC_ConfigChannel+0x7f8>
 800aa90:	4b17      	ldr	r3, [pc, #92]	@ (800aaf0 <HAL_ADC_ConfigChannel+0x7f4>)
 800aa92:	e030      	b.n	800aaf6 <HAL_ADC_ConfigChannel+0x7fa>
 800aa94:	47ff0000 	.word	0x47ff0000
 800aa98:	40022000 	.word	0x40022000
 800aa9c:	04300002 	.word	0x04300002
 800aaa0:	08600004 	.word	0x08600004
 800aaa4:	0c900008 	.word	0x0c900008
 800aaa8:	10c00010 	.word	0x10c00010
 800aaac:	14f00020 	.word	0x14f00020
 800aab0:	2a000400 	.word	0x2a000400
 800aab4:	2e300800 	.word	0x2e300800
 800aab8:	32601000 	.word	0x32601000
 800aabc:	43210000 	.word	0x43210000
 800aac0:	4b840000 	.word	0x4b840000
 800aac4:	4fb80000 	.word	0x4fb80000
 800aac8:	47520000 	.word	0x47520000
 800aacc:	36902000 	.word	0x36902000
 800aad0:	25b00200 	.word	0x25b00200
 800aad4:	21800100 	.word	0x21800100
 800aad8:	1d500080 	.word	0x1d500080
 800aadc:	19200040 	.word	0x19200040
 800aae0:	40022100 	.word	0x40022100
 800aae4:	58026000 	.word	0x58026000
 800aae8:	3ac04000 	.word	0x3ac04000
 800aaec:	3ef08000 	.word	0x3ef08000
 800aaf0:	40022300 	.word	0x40022300
 800aaf4:	4b61      	ldr	r3, [pc, #388]	@ (800ac7c <HAL_ADC_ConfigChannel+0x980>)
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe fbba 	bl	8009270 <LL_ADC_GetCommonPathInternalCh>
 800aafc:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a5f      	ldr	r2, [pc, #380]	@ (800ac80 <HAL_ADC_ConfigChannel+0x984>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d004      	beq.n	800ab12 <HAL_ADC_ConfigChannel+0x816>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a5d      	ldr	r2, [pc, #372]	@ (800ac84 <HAL_ADC_ConfigChannel+0x988>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d10e      	bne.n	800ab30 <HAL_ADC_ConfigChannel+0x834>
 800ab12:	485b      	ldr	r0, [pc, #364]	@ (800ac80 <HAL_ADC_ConfigChannel+0x984>)
 800ab14:	f7fe fe5e 	bl	80097d4 <LL_ADC_IsEnabled>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	485a      	ldr	r0, [pc, #360]	@ (800ac84 <HAL_ADC_ConfigChannel+0x988>)
 800ab1c:	f7fe fe5a 	bl	80097d4 <LL_ADC_IsEnabled>
 800ab20:	4603      	mov	r3, r0
 800ab22:	4323      	orrs	r3, r4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	bf0c      	ite	eq
 800ab28:	2301      	moveq	r3, #1
 800ab2a:	2300      	movne	r3, #0
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	e008      	b.n	800ab42 <HAL_ADC_ConfigChannel+0x846>
 800ab30:	4855      	ldr	r0, [pc, #340]	@ (800ac88 <HAL_ADC_ConfigChannel+0x98c>)
 800ab32:	f7fe fe4f 	bl	80097d4 <LL_ADC_IsEnabled>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	bf0c      	ite	eq
 800ab3c:	2301      	moveq	r3, #1
 800ab3e:	2300      	movne	r3, #0
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d07d      	beq.n	800ac42 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a50      	ldr	r2, [pc, #320]	@ (800ac8c <HAL_ADC_ConfigChannel+0x990>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d130      	bne.n	800abb2 <HAL_ADC_ConfigChannel+0x8b6>
 800ab50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d12b      	bne.n	800abb2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a4a      	ldr	r2, [pc, #296]	@ (800ac88 <HAL_ADC_ConfigChannel+0x98c>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	f040 8081 	bne.w	800ac68 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a45      	ldr	r2, [pc, #276]	@ (800ac80 <HAL_ADC_ConfigChannel+0x984>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d004      	beq.n	800ab7a <HAL_ADC_ConfigChannel+0x87e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a43      	ldr	r2, [pc, #268]	@ (800ac84 <HAL_ADC_ConfigChannel+0x988>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d101      	bne.n	800ab7e <HAL_ADC_ConfigChannel+0x882>
 800ab7a:	4a45      	ldr	r2, [pc, #276]	@ (800ac90 <HAL_ADC_ConfigChannel+0x994>)
 800ab7c:	e000      	b.n	800ab80 <HAL_ADC_ConfigChannel+0x884>
 800ab7e:	4a3f      	ldr	r2, [pc, #252]	@ (800ac7c <HAL_ADC_ConfigChannel+0x980>)
 800ab80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab86:	4619      	mov	r1, r3
 800ab88:	4610      	mov	r0, r2
 800ab8a:	f7fe fb5e 	bl	800924a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ab8e:	4b41      	ldr	r3, [pc, #260]	@ (800ac94 <HAL_ADC_ConfigChannel+0x998>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	099b      	lsrs	r3, r3, #6
 800ab94:	4a40      	ldr	r2, [pc, #256]	@ (800ac98 <HAL_ADC_ConfigChannel+0x99c>)
 800ab96:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9a:	099b      	lsrs	r3, r3, #6
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aba2:	e002      	b.n	800abaa <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f9      	bne.n	800aba4 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800abb0:	e05a      	b.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a39      	ldr	r2, [pc, #228]	@ (800ac9c <HAL_ADC_ConfigChannel+0x9a0>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d11e      	bne.n	800abfa <HAL_ADC_ConfigChannel+0x8fe>
 800abbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d119      	bne.n	800abfa <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a2f      	ldr	r2, [pc, #188]	@ (800ac88 <HAL_ADC_ConfigChannel+0x98c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d14b      	bne.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a2a      	ldr	r2, [pc, #168]	@ (800ac80 <HAL_ADC_ConfigChannel+0x984>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_ADC_ConfigChannel+0x8e8>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a29      	ldr	r2, [pc, #164]	@ (800ac84 <HAL_ADC_ConfigChannel+0x988>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d101      	bne.n	800abe8 <HAL_ADC_ConfigChannel+0x8ec>
 800abe4:	4a2a      	ldr	r2, [pc, #168]	@ (800ac90 <HAL_ADC_ConfigChannel+0x994>)
 800abe6:	e000      	b.n	800abea <HAL_ADC_ConfigChannel+0x8ee>
 800abe8:	4a24      	ldr	r2, [pc, #144]	@ (800ac7c <HAL_ADC_ConfigChannel+0x980>)
 800abea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	f7fe fb29 	bl	800924a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800abf8:	e036      	b.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a28      	ldr	r2, [pc, #160]	@ (800aca0 <HAL_ADC_ConfigChannel+0x9a4>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d131      	bne.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
 800ac04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d12c      	bne.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a1d      	ldr	r2, [pc, #116]	@ (800ac88 <HAL_ADC_ConfigChannel+0x98c>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d127      	bne.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a18      	ldr	r2, [pc, #96]	@ (800ac80 <HAL_ADC_ConfigChannel+0x984>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d004      	beq.n	800ac2c <HAL_ADC_ConfigChannel+0x930>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a17      	ldr	r2, [pc, #92]	@ (800ac84 <HAL_ADC_ConfigChannel+0x988>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d101      	bne.n	800ac30 <HAL_ADC_ConfigChannel+0x934>
 800ac2c:	4a18      	ldr	r2, [pc, #96]	@ (800ac90 <HAL_ADC_ConfigChannel+0x994>)
 800ac2e:	e000      	b.n	800ac32 <HAL_ADC_ConfigChannel+0x936>
 800ac30:	4a12      	ldr	r2, [pc, #72]	@ (800ac7c <HAL_ADC_ConfigChannel+0x980>)
 800ac32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fe fb05 	bl	800924a <LL_ADC_SetCommonPathInternalCh>
 800ac40:	e012      	b.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac46:	f043 0220 	orr.w	r2, r3, #32
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800ac54:	e008      	b.n	800ac68 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac5a:	f043 0220 	orr.w	r2, r3, #32
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800ac70:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3794      	adds	r7, #148	@ 0x94
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd90      	pop	{r4, r7, pc}
 800ac7c:	58026300 	.word	0x58026300
 800ac80:	40022000 	.word	0x40022000
 800ac84:	40022100 	.word	0x40022100
 800ac88:	58026000 	.word	0x58026000
 800ac8c:	c7520000 	.word	0xc7520000
 800ac90:	40022300 	.word	0x40022300
 800ac94:	24000004 	.word	0x24000004
 800ac98:	053e2d63 	.word	0x053e2d63
 800ac9c:	c3210000 	.word	0xc3210000
 800aca0:	cb840000 	.word	0xcb840000

0800aca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fd8f 	bl	80097d4 <LL_ADC_IsEnabled>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d16e      	bne.n	800ad9a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	689a      	ldr	r2, [r3, #8]
 800acc2:	4b38      	ldr	r3, [pc, #224]	@ (800ada4 <ADC_Enable+0x100>)
 800acc4:	4013      	ands	r3, r2
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00d      	beq.n	800ace6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acce:	f043 0210 	orr.w	r2, r3, #16
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acda:	f043 0201 	orr.w	r2, r3, #1
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e05a      	b.n	800ad9c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4618      	mov	r0, r3
 800acec:	f7fe fd5e 	bl	80097ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800acf0:	f7fe fa68 	bl	80091c4 <HAL_GetTick>
 800acf4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a2b      	ldr	r2, [pc, #172]	@ (800ada8 <ADC_Enable+0x104>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d004      	beq.n	800ad0a <ADC_Enable+0x66>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a29      	ldr	r2, [pc, #164]	@ (800adac <ADC_Enable+0x108>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d101      	bne.n	800ad0e <ADC_Enable+0x6a>
 800ad0a:	4b29      	ldr	r3, [pc, #164]	@ (800adb0 <ADC_Enable+0x10c>)
 800ad0c:	e000      	b.n	800ad10 <ADC_Enable+0x6c>
 800ad0e:	4b29      	ldr	r3, [pc, #164]	@ (800adb4 <ADC_Enable+0x110>)
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fce1 	bl	80096d8 <LL_ADC_GetMultimode>
 800ad16:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a23      	ldr	r2, [pc, #140]	@ (800adac <ADC_Enable+0x108>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d002      	beq.n	800ad28 <ADC_Enable+0x84>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	e000      	b.n	800ad2a <ADC_Enable+0x86>
 800ad28:	4b1f      	ldr	r3, [pc, #124]	@ (800ada8 <ADC_Enable+0x104>)
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	6812      	ldr	r2, [r2, #0]
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d02c      	beq.n	800ad8c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d130      	bne.n	800ad9a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad38:	e028      	b.n	800ad8c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fd48 	bl	80097d4 <LL_ADC_IsEnabled>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d104      	bne.n	800ad54 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fd2c 	bl	80097ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ad54:	f7fe fa36 	bl	80091c4 <HAL_GetTick>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d914      	bls.n	800ad8c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d00d      	beq.n	800ad8c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad74:	f043 0210 	orr.w	r2, r3, #16
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad80:	f043 0201 	orr.w	r2, r3, #1
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e007      	b.n	800ad9c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d1cf      	bne.n	800ad3a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	8000003f 	.word	0x8000003f
 800ada8:	40022000 	.word	0x40022000
 800adac:	40022100 	.word	0x40022100
 800adb0:	40022300 	.word	0x40022300
 800adb4:	58026300 	.word	0x58026300

0800adb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800adce:	2b00      	cmp	r3, #0
 800add0:	d14b      	bne.n	800ae6a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800add6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0308 	and.w	r3, r3, #8
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d021      	beq.n	800ae30 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fb77 	bl	80094e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d032      	beq.n	800ae62 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d12b      	bne.n	800ae62 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d11f      	bne.n	800ae62 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae26:	f043 0201 	orr.w	r2, r3, #1
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	661a      	str	r2, [r3, #96]	@ 0x60
 800ae2e:	e018      	b.n	800ae62 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d111      	bne.n	800ae62 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d105      	bne.n	800ae62 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae5a:	f043 0201 	orr.w	r2, r3, #1
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fa22 	bl	800a2ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ae68:	e00e      	b.n	800ae88 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae6e:	f003 0310 	and.w	r3, r3, #16
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff fa36 	bl	800a2e8 <HAL_ADC_ErrorCallback>
}
 800ae7c:	e004      	b.n	800ae88 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	4798      	blx	r3
}
 800ae88:	bf00      	nop
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fa0e 	bl	800a2c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800aea4:	bf00      	nop
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aebe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeca:	f043 0204 	orr.w	r2, r3, #4
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fa08 	bl	800a2e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a6c      	ldr	r2, [pc, #432]	@ (800b0a0 <ADC_ConfigureBoostMode+0x1c0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d004      	beq.n	800aefc <ADC_ConfigureBoostMode+0x1c>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a6b      	ldr	r2, [pc, #428]	@ (800b0a4 <ADC_ConfigureBoostMode+0x1c4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d109      	bne.n	800af10 <ADC_ConfigureBoostMode+0x30>
 800aefc:	4b6a      	ldr	r3, [pc, #424]	@ (800b0a8 <ADC_ConfigureBoostMode+0x1c8>)
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af04:	2b00      	cmp	r3, #0
 800af06:	bf14      	ite	ne
 800af08:	2301      	movne	r3, #1
 800af0a:	2300      	moveq	r3, #0
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	e008      	b.n	800af22 <ADC_ConfigureBoostMode+0x42>
 800af10:	4b66      	ldr	r3, [pc, #408]	@ (800b0ac <ADC_ConfigureBoostMode+0x1cc>)
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bf14      	ite	ne
 800af1c:	2301      	movne	r3, #1
 800af1e:	2300      	moveq	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d01c      	beq.n	800af60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800af26:	f006 fe8b 	bl	8011c40 <HAL_RCC_GetHCLKFreq>
 800af2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af34:	d010      	beq.n	800af58 <ADC_ConfigureBoostMode+0x78>
 800af36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af3a:	d873      	bhi.n	800b024 <ADC_ConfigureBoostMode+0x144>
 800af3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af40:	d002      	beq.n	800af48 <ADC_ConfigureBoostMode+0x68>
 800af42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af46:	d16d      	bne.n	800b024 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	0c1b      	lsrs	r3, r3, #16
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	fbb2 f3f3 	udiv	r3, r2, r3
 800af54:	60fb      	str	r3, [r7, #12]
        break;
 800af56:	e068      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	089b      	lsrs	r3, r3, #2
 800af5c:	60fb      	str	r3, [r7, #12]
        break;
 800af5e:	e064      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800af60:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800af64:	f04f 0100 	mov.w	r1, #0
 800af68:	f008 f866 	bl	8013038 <HAL_RCCEx_GetPeriphCLKFreq>
 800af6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800af76:	d051      	beq.n	800b01c <ADC_ConfigureBoostMode+0x13c>
 800af78:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800af7c:	d854      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800af7e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800af82:	d047      	beq.n	800b014 <ADC_ConfigureBoostMode+0x134>
 800af84:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800af88:	d84e      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800af8a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800af8e:	d03d      	beq.n	800b00c <ADC_ConfigureBoostMode+0x12c>
 800af90:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800af94:	d848      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800af96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af9a:	d033      	beq.n	800b004 <ADC_ConfigureBoostMode+0x124>
 800af9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afa0:	d842      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800afa2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800afa6:	d029      	beq.n	800affc <ADC_ConfigureBoostMode+0x11c>
 800afa8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800afac:	d83c      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800afae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800afb2:	d01a      	beq.n	800afea <ADC_ConfigureBoostMode+0x10a>
 800afb4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800afb8:	d836      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800afba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800afbe:	d014      	beq.n	800afea <ADC_ConfigureBoostMode+0x10a>
 800afc0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800afc4:	d830      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800afc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afca:	d00e      	beq.n	800afea <ADC_ConfigureBoostMode+0x10a>
 800afcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afd0:	d82a      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800afd2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800afd6:	d008      	beq.n	800afea <ADC_ConfigureBoostMode+0x10a>
 800afd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800afdc:	d824      	bhi.n	800b028 <ADC_ConfigureBoostMode+0x148>
 800afde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800afe2:	d002      	beq.n	800afea <ADC_ConfigureBoostMode+0x10a>
 800afe4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800afe8:	d11e      	bne.n	800b028 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	0c9b      	lsrs	r3, r3, #18
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff8:	60fb      	str	r3, [r7, #12]
        break;
 800affa:	e016      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	091b      	lsrs	r3, r3, #4
 800b000:	60fb      	str	r3, [r7, #12]
        break;
 800b002:	e012      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	095b      	lsrs	r3, r3, #5
 800b008:	60fb      	str	r3, [r7, #12]
        break;
 800b00a:	e00e      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	099b      	lsrs	r3, r3, #6
 800b010:	60fb      	str	r3, [r7, #12]
        break;
 800b012:	e00a      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	09db      	lsrs	r3, r3, #7
 800b018:	60fb      	str	r3, [r7, #12]
        break;
 800b01a:	e006      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	0a1b      	lsrs	r3, r3, #8
 800b020:	60fb      	str	r3, [r7, #12]
        break;
 800b022:	e002      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
        break;
 800b024:	bf00      	nop
 800b026:	e000      	b.n	800b02a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b028:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	085b      	lsrs	r3, r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4a1f      	ldr	r2, [pc, #124]	@ (800b0b0 <ADC_ConfigureBoostMode+0x1d0>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d808      	bhi.n	800b04a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b046:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b048:	e025      	b.n	800b096 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	4a19      	ldr	r2, [pc, #100]	@ (800b0b4 <ADC_ConfigureBoostMode+0x1d4>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d80a      	bhi.n	800b068 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b064:	609a      	str	r2, [r3, #8]
}
 800b066:	e016      	b.n	800b096 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4a13      	ldr	r2, [pc, #76]	@ (800b0b8 <ADC_ConfigureBoostMode+0x1d8>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d80a      	bhi.n	800b086 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b082:	609a      	str	r2, [r3, #8]
}
 800b084:	e007      	b.n	800b096 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b094:	609a      	str	r2, [r3, #8]
}
 800b096:	bf00      	nop
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	40022000 	.word	0x40022000
 800b0a4:	40022100 	.word	0x40022100
 800b0a8:	40022300 	.word	0x40022300
 800b0ac:	58026300 	.word	0x58026300
 800b0b0:	005f5e10 	.word	0x005f5e10
 800b0b4:	00bebc20 	.word	0x00bebc20
 800b0b8:	017d7840 	.word	0x017d7840

0800b0bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <__NVIC_SetPriorityGrouping>:
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f003 0307 	and.w	r3, r3, #7
 800b12e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b130:	4b0b      	ldr	r3, [pc, #44]	@ (800b160 <__NVIC_SetPriorityGrouping+0x40>)
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b13c:	4013      	ands	r3, r2
 800b13e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b148:	4b06      	ldr	r3, [pc, #24]	@ (800b164 <__NVIC_SetPriorityGrouping+0x44>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b14e:	4a04      	ldr	r2, [pc, #16]	@ (800b160 <__NVIC_SetPriorityGrouping+0x40>)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	60d3      	str	r3, [r2, #12]
}
 800b154:	bf00      	nop
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	e000ed00 	.word	0xe000ed00
 800b164:	05fa0000 	.word	0x05fa0000

0800b168 <__NVIC_GetPriorityGrouping>:
{
 800b168:	b480      	push	{r7}
 800b16a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b16c:	4b04      	ldr	r3, [pc, #16]	@ (800b180 <__NVIC_GetPriorityGrouping+0x18>)
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	0a1b      	lsrs	r3, r3, #8
 800b172:	f003 0307 	and.w	r3, r3, #7
}
 800b176:	4618      	mov	r0, r3
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	e000ed00 	.word	0xe000ed00

0800b184 <__NVIC_EnableIRQ>:
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b18e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b192:	2b00      	cmp	r3, #0
 800b194:	db0b      	blt.n	800b1ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b196:	88fb      	ldrh	r3, [r7, #6]
 800b198:	f003 021f 	and.w	r2, r3, #31
 800b19c:	4907      	ldr	r1, [pc, #28]	@ (800b1bc <__NVIC_EnableIRQ+0x38>)
 800b19e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1a2:	095b      	lsrs	r3, r3, #5
 800b1a4:	2001      	movs	r0, #1
 800b1a6:	fa00 f202 	lsl.w	r2, r0, r2
 800b1aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b1ae:	bf00      	nop
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	e000e100 	.word	0xe000e100

0800b1c0 <__NVIC_SetPriority>:
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b1cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	db0a      	blt.n	800b1ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	490c      	ldr	r1, [pc, #48]	@ (800b20c <__NVIC_SetPriority+0x4c>)
 800b1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1de:	0112      	lsls	r2, r2, #4
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b1e8:	e00a      	b.n	800b200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	4908      	ldr	r1, [pc, #32]	@ (800b210 <__NVIC_SetPriority+0x50>)
 800b1f0:	88fb      	ldrh	r3, [r7, #6]
 800b1f2:	f003 030f 	and.w	r3, r3, #15
 800b1f6:	3b04      	subs	r3, #4
 800b1f8:	0112      	lsls	r2, r2, #4
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	440b      	add	r3, r1
 800b1fe:	761a      	strb	r2, [r3, #24]
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	e000e100 	.word	0xe000e100
 800b210:	e000ed00 	.word	0xe000ed00

0800b214 <NVIC_EncodePriority>:
{
 800b214:	b480      	push	{r7}
 800b216:	b089      	sub	sp, #36	@ 0x24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	f1c3 0307 	rsb	r3, r3, #7
 800b22e:	2b04      	cmp	r3, #4
 800b230:	bf28      	it	cs
 800b232:	2304      	movcs	r3, #4
 800b234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	3304      	adds	r3, #4
 800b23a:	2b06      	cmp	r3, #6
 800b23c:	d902      	bls.n	800b244 <NVIC_EncodePriority+0x30>
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	3b03      	subs	r3, #3
 800b242:	e000      	b.n	800b246 <NVIC_EncodePriority+0x32>
 800b244:	2300      	movs	r3, #0
 800b246:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b248:	f04f 32ff 	mov.w	r2, #4294967295
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	fa02 f303 	lsl.w	r3, r2, r3
 800b252:	43da      	mvns	r2, r3
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	401a      	ands	r2, r3
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b25c:	f04f 31ff 	mov.w	r1, #4294967295
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	fa01 f303 	lsl.w	r3, r1, r3
 800b266:	43d9      	mvns	r1, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b26c:	4313      	orrs	r3, r2
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3724      	adds	r7, #36	@ 0x24
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
	...

0800b27c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3b01      	subs	r3, #1
 800b288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b28c:	d301      	bcc.n	800b292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b28e:	2301      	movs	r3, #1
 800b290:	e00f      	b.n	800b2b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b292:	4a0a      	ldr	r2, [pc, #40]	@ (800b2bc <SysTick_Config+0x40>)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3b01      	subs	r3, #1
 800b298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b29a:	210f      	movs	r1, #15
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	f7ff ff8e 	bl	800b1c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b2a4:	4b05      	ldr	r3, [pc, #20]	@ (800b2bc <SysTick_Config+0x40>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b2aa:	4b04      	ldr	r3, [pc, #16]	@ (800b2bc <SysTick_Config+0x40>)
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	e000e010 	.word	0xe000e010

0800b2c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ff29 	bl	800b120 <__NVIC_SetPriorityGrouping>
}
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	4603      	mov	r3, r0
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
 800b2e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b2e4:	f7ff ff40 	bl	800b168 <__NVIC_GetPriorityGrouping>
 800b2e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	68b9      	ldr	r1, [r7, #8]
 800b2ee:	6978      	ldr	r0, [r7, #20]
 800b2f0:	f7ff ff90 	bl	800b214 <NVIC_EncodePriority>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff ff5f 	bl	800b1c0 <__NVIC_SetPriority>
}
 800b302:	bf00      	nop
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	4603      	mov	r3, r0
 800b312:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff ff33 	bl	800b184 <__NVIC_EnableIRQ>
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff ffa4 	bl	800b27c <SysTick_Config>
 800b334:	4603      	mov	r3, r0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b340:	b480      	push	{r7}
 800b342:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b344:	f3bf 8f5f 	dmb	sy
}
 800b348:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b34a:	4b07      	ldr	r3, [pc, #28]	@ (800b368 <HAL_MPU_Disable+0x28>)
 800b34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34e:	4a06      	ldr	r2, [pc, #24]	@ (800b368 <HAL_MPU_Disable+0x28>)
 800b350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b354:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b356:	4b05      	ldr	r3, [pc, #20]	@ (800b36c <HAL_MPU_Disable+0x2c>)
 800b358:	2200      	movs	r2, #0
 800b35a:	605a      	str	r2, [r3, #4]
}
 800b35c:	bf00      	nop
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	e000ed00 	.word	0xe000ed00
 800b36c:	e000ed90 	.word	0xe000ed90

0800b370 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b378:	4a0b      	ldr	r2, [pc, #44]	@ (800b3a8 <HAL_MPU_Enable+0x38>)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f043 0301 	orr.w	r3, r3, #1
 800b380:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b382:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ac <HAL_MPU_Enable+0x3c>)
 800b384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b386:	4a09      	ldr	r2, [pc, #36]	@ (800b3ac <HAL_MPU_Enable+0x3c>)
 800b388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b38c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b38e:	f3bf 8f4f 	dsb	sy
}
 800b392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b394:	f3bf 8f6f 	isb	sy
}
 800b398:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	e000ed90 	.word	0xe000ed90
 800b3ac:	e000ed00 	.word	0xe000ed00

0800b3b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	785a      	ldrb	r2, [r3, #1]
 800b3bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b42c <HAL_MPU_ConfigRegion+0x7c>)
 800b3be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b42c <HAL_MPU_ConfigRegion+0x7c>)
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	4a19      	ldr	r2, [pc, #100]	@ (800b42c <HAL_MPU_ConfigRegion+0x7c>)
 800b3c6:	f023 0301 	bic.w	r3, r3, #1
 800b3ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b3cc:	4a17      	ldr	r2, [pc, #92]	@ (800b42c <HAL_MPU_ConfigRegion+0x7c>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7b1b      	ldrb	r3, [r3, #12]
 800b3d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	7adb      	ldrb	r3, [r3, #11]
 800b3de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b3e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	7a9b      	ldrb	r3, [r3, #10]
 800b3e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b3e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7b5b      	ldrb	r3, [r3, #13]
 800b3ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b3f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	7b9b      	ldrb	r3, [r3, #14]
 800b3f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b3f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7bdb      	ldrb	r3, [r3, #15]
 800b3fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7a5b      	ldrb	r3, [r3, #9]
 800b406:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7a1b      	ldrb	r3, [r3, #8]
 800b40e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b410:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	7812      	ldrb	r2, [r2, #0]
 800b416:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b418:	4a04      	ldr	r2, [pc, #16]	@ (800b42c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b41a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b41c:	6113      	str	r3, [r2, #16]
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	e000ed90 	.word	0xe000ed90

0800b430 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b438:	f7fd fec4 	bl	80091c4 <HAL_GetTick>
 800b43c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e312      	b.n	800ba6e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a66      	ldr	r2, [pc, #408]	@ (800b5e8 <HAL_DMA_Init+0x1b8>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d04a      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a65      	ldr	r2, [pc, #404]	@ (800b5ec <HAL_DMA_Init+0x1bc>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d045      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a63      	ldr	r2, [pc, #396]	@ (800b5f0 <HAL_DMA_Init+0x1c0>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d040      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a62      	ldr	r2, [pc, #392]	@ (800b5f4 <HAL_DMA_Init+0x1c4>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d03b      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a60      	ldr	r2, [pc, #384]	@ (800b5f8 <HAL_DMA_Init+0x1c8>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d036      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a5f      	ldr	r2, [pc, #380]	@ (800b5fc <HAL_DMA_Init+0x1cc>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d031      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a5d      	ldr	r2, [pc, #372]	@ (800b600 <HAL_DMA_Init+0x1d0>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d02c      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a5c      	ldr	r2, [pc, #368]	@ (800b604 <HAL_DMA_Init+0x1d4>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d027      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a5a      	ldr	r2, [pc, #360]	@ (800b608 <HAL_DMA_Init+0x1d8>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d022      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a59      	ldr	r2, [pc, #356]	@ (800b60c <HAL_DMA_Init+0x1dc>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d01d      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a57      	ldr	r2, [pc, #348]	@ (800b610 <HAL_DMA_Init+0x1e0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d018      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a56      	ldr	r2, [pc, #344]	@ (800b614 <HAL_DMA_Init+0x1e4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d013      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a54      	ldr	r2, [pc, #336]	@ (800b618 <HAL_DMA_Init+0x1e8>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00e      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a53      	ldr	r2, [pc, #332]	@ (800b61c <HAL_DMA_Init+0x1ec>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d009      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a51      	ldr	r2, [pc, #324]	@ (800b620 <HAL_DMA_Init+0x1f0>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d004      	beq.n	800b4e8 <HAL_DMA_Init+0xb8>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a50      	ldr	r2, [pc, #320]	@ (800b624 <HAL_DMA_Init+0x1f4>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d101      	bne.n	800b4ec <HAL_DMA_Init+0xbc>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e000      	b.n	800b4ee <HAL_DMA_Init+0xbe>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 813c 	beq.w	800b76c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a37      	ldr	r2, [pc, #220]	@ (800b5e8 <HAL_DMA_Init+0x1b8>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d04a      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a36      	ldr	r2, [pc, #216]	@ (800b5ec <HAL_DMA_Init+0x1bc>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d045      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a34      	ldr	r2, [pc, #208]	@ (800b5f0 <HAL_DMA_Init+0x1c0>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d040      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a33      	ldr	r2, [pc, #204]	@ (800b5f4 <HAL_DMA_Init+0x1c4>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d03b      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a31      	ldr	r2, [pc, #196]	@ (800b5f8 <HAL_DMA_Init+0x1c8>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d036      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a30      	ldr	r2, [pc, #192]	@ (800b5fc <HAL_DMA_Init+0x1cc>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d031      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a2e      	ldr	r2, [pc, #184]	@ (800b600 <HAL_DMA_Init+0x1d0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d02c      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a2d      	ldr	r2, [pc, #180]	@ (800b604 <HAL_DMA_Init+0x1d4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d027      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a2b      	ldr	r2, [pc, #172]	@ (800b608 <HAL_DMA_Init+0x1d8>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d022      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a2a      	ldr	r2, [pc, #168]	@ (800b60c <HAL_DMA_Init+0x1dc>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d01d      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a28      	ldr	r2, [pc, #160]	@ (800b610 <HAL_DMA_Init+0x1e0>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d018      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a27      	ldr	r2, [pc, #156]	@ (800b614 <HAL_DMA_Init+0x1e4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d013      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a25      	ldr	r2, [pc, #148]	@ (800b618 <HAL_DMA_Init+0x1e8>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d00e      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a24      	ldr	r2, [pc, #144]	@ (800b61c <HAL_DMA_Init+0x1ec>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d009      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a22      	ldr	r2, [pc, #136]	@ (800b620 <HAL_DMA_Init+0x1f0>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d004      	beq.n	800b5a4 <HAL_DMA_Init+0x174>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a21      	ldr	r2, [pc, #132]	@ (800b624 <HAL_DMA_Init+0x1f4>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d108      	bne.n	800b5b6 <HAL_DMA_Init+0x186>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0201 	bic.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	e007      	b.n	800b5c6 <HAL_DMA_Init+0x196>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0201 	bic.w	r2, r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b5c6:	e02f      	b.n	800b628 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b5c8:	f7fd fdfc 	bl	80091c4 <HAL_GetTick>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	2b05      	cmp	r3, #5
 800b5d4:	d928      	bls.n	800b628 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2203      	movs	r2, #3
 800b5e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e242      	b.n	800ba6e <HAL_DMA_Init+0x63e>
 800b5e8:	40020010 	.word	0x40020010
 800b5ec:	40020028 	.word	0x40020028
 800b5f0:	40020040 	.word	0x40020040
 800b5f4:	40020058 	.word	0x40020058
 800b5f8:	40020070 	.word	0x40020070
 800b5fc:	40020088 	.word	0x40020088
 800b600:	400200a0 	.word	0x400200a0
 800b604:	400200b8 	.word	0x400200b8
 800b608:	40020410 	.word	0x40020410
 800b60c:	40020428 	.word	0x40020428
 800b610:	40020440 	.word	0x40020440
 800b614:	40020458 	.word	0x40020458
 800b618:	40020470 	.word	0x40020470
 800b61c:	40020488 	.word	0x40020488
 800b620:	400204a0 	.word	0x400204a0
 800b624:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1c8      	bne.n	800b5c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	4b83      	ldr	r3, [pc, #524]	@ (800b850 <HAL_DMA_Init+0x420>)
 800b642:	4013      	ands	r3, r2
 800b644:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b64e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b65a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b666:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	4313      	orrs	r3, r2
 800b672:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b678:	2b04      	cmp	r3, #4
 800b67a:	d107      	bne.n	800b68c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b684:	4313      	orrs	r3, r2
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	4313      	orrs	r3, r2
 800b68a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	2b28      	cmp	r3, #40	@ 0x28
 800b692:	d903      	bls.n	800b69c <HAL_DMA_Init+0x26c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	2b2e      	cmp	r3, #46	@ 0x2e
 800b69a:	d91f      	bls.n	800b6dc <HAL_DMA_Init+0x2ac>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6a2:	d903      	bls.n	800b6ac <HAL_DMA_Init+0x27c>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	2b42      	cmp	r3, #66	@ 0x42
 800b6aa:	d917      	bls.n	800b6dc <HAL_DMA_Init+0x2ac>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	2b46      	cmp	r3, #70	@ 0x46
 800b6b2:	d903      	bls.n	800b6bc <HAL_DMA_Init+0x28c>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	2b48      	cmp	r3, #72	@ 0x48
 800b6ba:	d90f      	bls.n	800b6dc <HAL_DMA_Init+0x2ac>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b4e      	cmp	r3, #78	@ 0x4e
 800b6c2:	d903      	bls.n	800b6cc <HAL_DMA_Init+0x29c>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2b52      	cmp	r3, #82	@ 0x52
 800b6ca:	d907      	bls.n	800b6dc <HAL_DMA_Init+0x2ac>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	2b73      	cmp	r3, #115	@ 0x73
 800b6d2:	d905      	bls.n	800b6e0 <HAL_DMA_Init+0x2b0>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	2b77      	cmp	r3, #119	@ 0x77
 800b6da:	d801      	bhi.n	800b6e0 <HAL_DMA_Init+0x2b0>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e000      	b.n	800b6e2 <HAL_DMA_Init+0x2b2>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f023 0307 	bic.w	r3, r3, #7
 800b704:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b714:	2b04      	cmp	r3, #4
 800b716:	d117      	bne.n	800b748 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	4313      	orrs	r3, r2
 800b720:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00e      	beq.n	800b748 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f002 fb48 	bl	800ddc0 <DMA_CheckFifoParam>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d008      	beq.n	800b748 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2240      	movs	r2, #64	@ 0x40
 800b73a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	e192      	b.n	800ba6e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f002 fa83 	bl	800dc5c <DMA_CalcBaseAndBitshift>
 800b756:	4603      	mov	r3, r0
 800b758:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b75e:	f003 031f 	and.w	r3, r3, #31
 800b762:	223f      	movs	r2, #63	@ 0x3f
 800b764:	409a      	lsls	r2, r3
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	609a      	str	r2, [r3, #8]
 800b76a:	e0c8      	b.n	800b8fe <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a38      	ldr	r2, [pc, #224]	@ (800b854 <HAL_DMA_Init+0x424>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d022      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a37      	ldr	r2, [pc, #220]	@ (800b858 <HAL_DMA_Init+0x428>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d01d      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a35      	ldr	r2, [pc, #212]	@ (800b85c <HAL_DMA_Init+0x42c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d018      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a34      	ldr	r2, [pc, #208]	@ (800b860 <HAL_DMA_Init+0x430>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d013      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a32      	ldr	r2, [pc, #200]	@ (800b864 <HAL_DMA_Init+0x434>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d00e      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a31      	ldr	r2, [pc, #196]	@ (800b868 <HAL_DMA_Init+0x438>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d009      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a2f      	ldr	r2, [pc, #188]	@ (800b86c <HAL_DMA_Init+0x43c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d004      	beq.n	800b7bc <HAL_DMA_Init+0x38c>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a2e      	ldr	r2, [pc, #184]	@ (800b870 <HAL_DMA_Init+0x440>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d101      	bne.n	800b7c0 <HAL_DMA_Init+0x390>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <HAL_DMA_Init+0x392>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8092 	beq.w	800b8ec <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a21      	ldr	r2, [pc, #132]	@ (800b854 <HAL_DMA_Init+0x424>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d021      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a20      	ldr	r2, [pc, #128]	@ (800b858 <HAL_DMA_Init+0x428>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d01c      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a1e      	ldr	r2, [pc, #120]	@ (800b85c <HAL_DMA_Init+0x42c>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d017      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a1d      	ldr	r2, [pc, #116]	@ (800b860 <HAL_DMA_Init+0x430>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d012      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b864 <HAL_DMA_Init+0x434>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d00d      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a1a      	ldr	r2, [pc, #104]	@ (800b868 <HAL_DMA_Init+0x438>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d008      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a18      	ldr	r2, [pc, #96]	@ (800b86c <HAL_DMA_Init+0x43c>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d003      	beq.n	800b816 <HAL_DMA_Init+0x3e6>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a17      	ldr	r2, [pc, #92]	@ (800b870 <HAL_DMA_Init+0x440>)
 800b814:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2202      	movs	r2, #2
 800b81a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	4b10      	ldr	r3, [pc, #64]	@ (800b874 <HAL_DMA_Init+0x444>)
 800b832:	4013      	ands	r3, r2
 800b834:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	2b40      	cmp	r3, #64	@ 0x40
 800b83c:	d01c      	beq.n	800b878 <HAL_DMA_Init+0x448>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	2b80      	cmp	r3, #128	@ 0x80
 800b844:	d102      	bne.n	800b84c <HAL_DMA_Init+0x41c>
 800b846:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b84a:	e016      	b.n	800b87a <HAL_DMA_Init+0x44a>
 800b84c:	2300      	movs	r3, #0
 800b84e:	e014      	b.n	800b87a <HAL_DMA_Init+0x44a>
 800b850:	fe10803f 	.word	0xfe10803f
 800b854:	58025408 	.word	0x58025408
 800b858:	5802541c 	.word	0x5802541c
 800b85c:	58025430 	.word	0x58025430
 800b860:	58025444 	.word	0x58025444
 800b864:	58025458 	.word	0x58025458
 800b868:	5802546c 	.word	0x5802546c
 800b86c:	58025480 	.word	0x58025480
 800b870:	58025494 	.word	0x58025494
 800b874:	fffe000f 	.word	0xfffe000f
 800b878:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	68d2      	ldr	r2, [r2, #12]
 800b87e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b890:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b898:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b8a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b8a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4b6e      	ldr	r3, [pc, #440]	@ (800ba78 <HAL_DMA_Init+0x648>)
 800b8c0:	4413      	add	r3, r2
 800b8c2:	4a6e      	ldr	r2, [pc, #440]	@ (800ba7c <HAL_DMA_Init+0x64c>)
 800b8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c8:	091b      	lsrs	r3, r3, #4
 800b8ca:	009a      	lsls	r2, r3, #2
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f002 f9c3 	bl	800dc5c <DMA_CalcBaseAndBitshift>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8de:	f003 031f 	and.w	r3, r3, #31
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	409a      	lsls	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	e008      	b.n	800b8fe <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2240      	movs	r2, #64	@ 0x40
 800b8f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e0b7      	b.n	800ba6e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a5f      	ldr	r2, [pc, #380]	@ (800ba80 <HAL_DMA_Init+0x650>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d072      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a5d      	ldr	r2, [pc, #372]	@ (800ba84 <HAL_DMA_Init+0x654>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d06d      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a5c      	ldr	r2, [pc, #368]	@ (800ba88 <HAL_DMA_Init+0x658>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d068      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a5a      	ldr	r2, [pc, #360]	@ (800ba8c <HAL_DMA_Init+0x65c>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d063      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a59      	ldr	r2, [pc, #356]	@ (800ba90 <HAL_DMA_Init+0x660>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d05e      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a57      	ldr	r2, [pc, #348]	@ (800ba94 <HAL_DMA_Init+0x664>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d059      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a56      	ldr	r2, [pc, #344]	@ (800ba98 <HAL_DMA_Init+0x668>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d054      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a54      	ldr	r2, [pc, #336]	@ (800ba9c <HAL_DMA_Init+0x66c>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d04f      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a53      	ldr	r2, [pc, #332]	@ (800baa0 <HAL_DMA_Init+0x670>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d04a      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a51      	ldr	r2, [pc, #324]	@ (800baa4 <HAL_DMA_Init+0x674>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d045      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a50      	ldr	r2, [pc, #320]	@ (800baa8 <HAL_DMA_Init+0x678>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d040      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a4e      	ldr	r2, [pc, #312]	@ (800baac <HAL_DMA_Init+0x67c>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d03b      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a4d      	ldr	r2, [pc, #308]	@ (800bab0 <HAL_DMA_Init+0x680>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d036      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a4b      	ldr	r2, [pc, #300]	@ (800bab4 <HAL_DMA_Init+0x684>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d031      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a4a      	ldr	r2, [pc, #296]	@ (800bab8 <HAL_DMA_Init+0x688>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d02c      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a48      	ldr	r2, [pc, #288]	@ (800babc <HAL_DMA_Init+0x68c>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d027      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a47      	ldr	r2, [pc, #284]	@ (800bac0 <HAL_DMA_Init+0x690>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d022      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a45      	ldr	r2, [pc, #276]	@ (800bac4 <HAL_DMA_Init+0x694>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d01d      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a44      	ldr	r2, [pc, #272]	@ (800bac8 <HAL_DMA_Init+0x698>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d018      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a42      	ldr	r2, [pc, #264]	@ (800bacc <HAL_DMA_Init+0x69c>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d013      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a41      	ldr	r2, [pc, #260]	@ (800bad0 <HAL_DMA_Init+0x6a0>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d00e      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a3f      	ldr	r2, [pc, #252]	@ (800bad4 <HAL_DMA_Init+0x6a4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d009      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a3e      	ldr	r2, [pc, #248]	@ (800bad8 <HAL_DMA_Init+0x6a8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d004      	beq.n	800b9ee <HAL_DMA_Init+0x5be>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a3c      	ldr	r2, [pc, #240]	@ (800badc <HAL_DMA_Init+0x6ac>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d101      	bne.n	800b9f2 <HAL_DMA_Init+0x5c2>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <HAL_DMA_Init+0x5c4>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d032      	beq.n	800ba5e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f002 fa5d 	bl	800deb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	2b80      	cmp	r3, #128	@ 0x80
 800ba04:	d102      	bne.n	800ba0c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ba20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d010      	beq.n	800ba4c <HAL_DMA_Init+0x61c>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	2b08      	cmp	r3, #8
 800ba30:	d80c      	bhi.n	800ba4c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f002 fada 	bl	800dfec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ba48:	605a      	str	r2, [r3, #4]
 800ba4a:	e008      	b.n	800ba5e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	a7fdabf8 	.word	0xa7fdabf8
 800ba7c:	cccccccd 	.word	0xcccccccd
 800ba80:	40020010 	.word	0x40020010
 800ba84:	40020028 	.word	0x40020028
 800ba88:	40020040 	.word	0x40020040
 800ba8c:	40020058 	.word	0x40020058
 800ba90:	40020070 	.word	0x40020070
 800ba94:	40020088 	.word	0x40020088
 800ba98:	400200a0 	.word	0x400200a0
 800ba9c:	400200b8 	.word	0x400200b8
 800baa0:	40020410 	.word	0x40020410
 800baa4:	40020428 	.word	0x40020428
 800baa8:	40020440 	.word	0x40020440
 800baac:	40020458 	.word	0x40020458
 800bab0:	40020470 	.word	0x40020470
 800bab4:	40020488 	.word	0x40020488
 800bab8:	400204a0 	.word	0x400204a0
 800babc:	400204b8 	.word	0x400204b8
 800bac0:	58025408 	.word	0x58025408
 800bac4:	5802541c 	.word	0x5802541c
 800bac8:	58025430 	.word	0x58025430
 800bacc:	58025444 	.word	0x58025444
 800bad0:	58025458 	.word	0x58025458
 800bad4:	5802546c 	.word	0x5802546c
 800bad8:	58025480 	.word	0x58025480
 800badc:	58025494 	.word	0x58025494

0800bae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d101      	bne.n	800bafc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e226      	b.n	800bf4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d101      	bne.n	800bb0a <HAL_DMA_Start_IT+0x2a>
 800bb06:	2302      	movs	r3, #2
 800bb08:	e21f      	b.n	800bf4a <HAL_DMA_Start_IT+0x46a>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	f040 820a 	bne.w	800bf34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2202      	movs	r2, #2
 800bb24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a68      	ldr	r2, [pc, #416]	@ (800bcd4 <HAL_DMA_Start_IT+0x1f4>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d04a      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a66      	ldr	r2, [pc, #408]	@ (800bcd8 <HAL_DMA_Start_IT+0x1f8>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d045      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a65      	ldr	r2, [pc, #404]	@ (800bcdc <HAL_DMA_Start_IT+0x1fc>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d040      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a63      	ldr	r2, [pc, #396]	@ (800bce0 <HAL_DMA_Start_IT+0x200>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d03b      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a62      	ldr	r2, [pc, #392]	@ (800bce4 <HAL_DMA_Start_IT+0x204>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d036      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a60      	ldr	r2, [pc, #384]	@ (800bce8 <HAL_DMA_Start_IT+0x208>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d031      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a5f      	ldr	r2, [pc, #380]	@ (800bcec <HAL_DMA_Start_IT+0x20c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d02c      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a5d      	ldr	r2, [pc, #372]	@ (800bcf0 <HAL_DMA_Start_IT+0x210>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d027      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a5c      	ldr	r2, [pc, #368]	@ (800bcf4 <HAL_DMA_Start_IT+0x214>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d022      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a5a      	ldr	r2, [pc, #360]	@ (800bcf8 <HAL_DMA_Start_IT+0x218>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d01d      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a59      	ldr	r2, [pc, #356]	@ (800bcfc <HAL_DMA_Start_IT+0x21c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d018      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a57      	ldr	r2, [pc, #348]	@ (800bd00 <HAL_DMA_Start_IT+0x220>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d013      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a56      	ldr	r2, [pc, #344]	@ (800bd04 <HAL_DMA_Start_IT+0x224>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d00e      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a54      	ldr	r2, [pc, #336]	@ (800bd08 <HAL_DMA_Start_IT+0x228>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d009      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a53      	ldr	r2, [pc, #332]	@ (800bd0c <HAL_DMA_Start_IT+0x22c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d004      	beq.n	800bbce <HAL_DMA_Start_IT+0xee>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a51      	ldr	r2, [pc, #324]	@ (800bd10 <HAL_DMA_Start_IT+0x230>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d108      	bne.n	800bbe0 <HAL_DMA_Start_IT+0x100>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0201 	bic.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e007      	b.n	800bbf0 <HAL_DMA_Start_IT+0x110>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f022 0201 	bic.w	r2, r2, #1
 800bbee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	68b9      	ldr	r1, [r7, #8]
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f001 fe84 	bl	800d904 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a34      	ldr	r2, [pc, #208]	@ (800bcd4 <HAL_DMA_Start_IT+0x1f4>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d04a      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a33      	ldr	r2, [pc, #204]	@ (800bcd8 <HAL_DMA_Start_IT+0x1f8>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d045      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a31      	ldr	r2, [pc, #196]	@ (800bcdc <HAL_DMA_Start_IT+0x1fc>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d040      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a30      	ldr	r2, [pc, #192]	@ (800bce0 <HAL_DMA_Start_IT+0x200>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d03b      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a2e      	ldr	r2, [pc, #184]	@ (800bce4 <HAL_DMA_Start_IT+0x204>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d036      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a2d      	ldr	r2, [pc, #180]	@ (800bce8 <HAL_DMA_Start_IT+0x208>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d031      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a2b      	ldr	r2, [pc, #172]	@ (800bcec <HAL_DMA_Start_IT+0x20c>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d02c      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a2a      	ldr	r2, [pc, #168]	@ (800bcf0 <HAL_DMA_Start_IT+0x210>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d027      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a28      	ldr	r2, [pc, #160]	@ (800bcf4 <HAL_DMA_Start_IT+0x214>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d022      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a27      	ldr	r2, [pc, #156]	@ (800bcf8 <HAL_DMA_Start_IT+0x218>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d01d      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a25      	ldr	r2, [pc, #148]	@ (800bcfc <HAL_DMA_Start_IT+0x21c>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d018      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a24      	ldr	r2, [pc, #144]	@ (800bd00 <HAL_DMA_Start_IT+0x220>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d013      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a22      	ldr	r2, [pc, #136]	@ (800bd04 <HAL_DMA_Start_IT+0x224>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d00e      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a21      	ldr	r2, [pc, #132]	@ (800bd08 <HAL_DMA_Start_IT+0x228>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d009      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a1f      	ldr	r2, [pc, #124]	@ (800bd0c <HAL_DMA_Start_IT+0x22c>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d004      	beq.n	800bc9c <HAL_DMA_Start_IT+0x1bc>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a1e      	ldr	r2, [pc, #120]	@ (800bd10 <HAL_DMA_Start_IT+0x230>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d101      	bne.n	800bca0 <HAL_DMA_Start_IT+0x1c0>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <HAL_DMA_Start_IT+0x1c2>
 800bca0:	2300      	movs	r3, #0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d036      	beq.n	800bd14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f023 021e 	bic.w	r2, r3, #30
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f042 0216 	orr.w	r2, r2, #22
 800bcb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d03e      	beq.n	800bd40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f042 0208 	orr.w	r2, r2, #8
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	e035      	b.n	800bd40 <HAL_DMA_Start_IT+0x260>
 800bcd4:	40020010 	.word	0x40020010
 800bcd8:	40020028 	.word	0x40020028
 800bcdc:	40020040 	.word	0x40020040
 800bce0:	40020058 	.word	0x40020058
 800bce4:	40020070 	.word	0x40020070
 800bce8:	40020088 	.word	0x40020088
 800bcec:	400200a0 	.word	0x400200a0
 800bcf0:	400200b8 	.word	0x400200b8
 800bcf4:	40020410 	.word	0x40020410
 800bcf8:	40020428 	.word	0x40020428
 800bcfc:	40020440 	.word	0x40020440
 800bd00:	40020458 	.word	0x40020458
 800bd04:	40020470 	.word	0x40020470
 800bd08:	40020488 	.word	0x40020488
 800bd0c:	400204a0 	.word	0x400204a0
 800bd10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f023 020e 	bic.w	r2, r3, #14
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 020a 	orr.w	r2, r2, #10
 800bd26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f042 0204 	orr.w	r2, r2, #4
 800bd3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a83      	ldr	r2, [pc, #524]	@ (800bf54 <HAL_DMA_Start_IT+0x474>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d072      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a82      	ldr	r2, [pc, #520]	@ (800bf58 <HAL_DMA_Start_IT+0x478>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d06d      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a80      	ldr	r2, [pc, #512]	@ (800bf5c <HAL_DMA_Start_IT+0x47c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d068      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a7f      	ldr	r2, [pc, #508]	@ (800bf60 <HAL_DMA_Start_IT+0x480>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d063      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a7d      	ldr	r2, [pc, #500]	@ (800bf64 <HAL_DMA_Start_IT+0x484>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d05e      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a7c      	ldr	r2, [pc, #496]	@ (800bf68 <HAL_DMA_Start_IT+0x488>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d059      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a7a      	ldr	r2, [pc, #488]	@ (800bf6c <HAL_DMA_Start_IT+0x48c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d054      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a79      	ldr	r2, [pc, #484]	@ (800bf70 <HAL_DMA_Start_IT+0x490>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d04f      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a77      	ldr	r2, [pc, #476]	@ (800bf74 <HAL_DMA_Start_IT+0x494>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d04a      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a76      	ldr	r2, [pc, #472]	@ (800bf78 <HAL_DMA_Start_IT+0x498>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d045      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a74      	ldr	r2, [pc, #464]	@ (800bf7c <HAL_DMA_Start_IT+0x49c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d040      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a73      	ldr	r2, [pc, #460]	@ (800bf80 <HAL_DMA_Start_IT+0x4a0>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d03b      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a71      	ldr	r2, [pc, #452]	@ (800bf84 <HAL_DMA_Start_IT+0x4a4>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d036      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a70      	ldr	r2, [pc, #448]	@ (800bf88 <HAL_DMA_Start_IT+0x4a8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d031      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a6e      	ldr	r2, [pc, #440]	@ (800bf8c <HAL_DMA_Start_IT+0x4ac>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d02c      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a6d      	ldr	r2, [pc, #436]	@ (800bf90 <HAL_DMA_Start_IT+0x4b0>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d027      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a6b      	ldr	r2, [pc, #428]	@ (800bf94 <HAL_DMA_Start_IT+0x4b4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d022      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a6a      	ldr	r2, [pc, #424]	@ (800bf98 <HAL_DMA_Start_IT+0x4b8>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d01d      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a68      	ldr	r2, [pc, #416]	@ (800bf9c <HAL_DMA_Start_IT+0x4bc>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d018      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a67      	ldr	r2, [pc, #412]	@ (800bfa0 <HAL_DMA_Start_IT+0x4c0>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d013      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a65      	ldr	r2, [pc, #404]	@ (800bfa4 <HAL_DMA_Start_IT+0x4c4>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d00e      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a64      	ldr	r2, [pc, #400]	@ (800bfa8 <HAL_DMA_Start_IT+0x4c8>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d009      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a62      	ldr	r2, [pc, #392]	@ (800bfac <HAL_DMA_Start_IT+0x4cc>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d004      	beq.n	800be30 <HAL_DMA_Start_IT+0x350>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a61      	ldr	r2, [pc, #388]	@ (800bfb0 <HAL_DMA_Start_IT+0x4d0>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d101      	bne.n	800be34 <HAL_DMA_Start_IT+0x354>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <HAL_DMA_Start_IT+0x356>
 800be34:	2300      	movs	r3, #0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d01a      	beq.n	800be70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d007      	beq.n	800be58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d007      	beq.n	800be70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a37      	ldr	r2, [pc, #220]	@ (800bf54 <HAL_DMA_Start_IT+0x474>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d04a      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a36      	ldr	r2, [pc, #216]	@ (800bf58 <HAL_DMA_Start_IT+0x478>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d045      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a34      	ldr	r2, [pc, #208]	@ (800bf5c <HAL_DMA_Start_IT+0x47c>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d040      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a33      	ldr	r2, [pc, #204]	@ (800bf60 <HAL_DMA_Start_IT+0x480>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d03b      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a31      	ldr	r2, [pc, #196]	@ (800bf64 <HAL_DMA_Start_IT+0x484>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d036      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a30      	ldr	r2, [pc, #192]	@ (800bf68 <HAL_DMA_Start_IT+0x488>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d031      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a2e      	ldr	r2, [pc, #184]	@ (800bf6c <HAL_DMA_Start_IT+0x48c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d02c      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a2d      	ldr	r2, [pc, #180]	@ (800bf70 <HAL_DMA_Start_IT+0x490>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d027      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a2b      	ldr	r2, [pc, #172]	@ (800bf74 <HAL_DMA_Start_IT+0x494>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d022      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a2a      	ldr	r2, [pc, #168]	@ (800bf78 <HAL_DMA_Start_IT+0x498>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d01d      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a28      	ldr	r2, [pc, #160]	@ (800bf7c <HAL_DMA_Start_IT+0x49c>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d018      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a27      	ldr	r2, [pc, #156]	@ (800bf80 <HAL_DMA_Start_IT+0x4a0>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d013      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a25      	ldr	r2, [pc, #148]	@ (800bf84 <HAL_DMA_Start_IT+0x4a4>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00e      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a24      	ldr	r2, [pc, #144]	@ (800bf88 <HAL_DMA_Start_IT+0x4a8>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d009      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a22      	ldr	r2, [pc, #136]	@ (800bf8c <HAL_DMA_Start_IT+0x4ac>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d004      	beq.n	800bf10 <HAL_DMA_Start_IT+0x430>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a21      	ldr	r2, [pc, #132]	@ (800bf90 <HAL_DMA_Start_IT+0x4b0>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d108      	bne.n	800bf22 <HAL_DMA_Start_IT+0x442>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f042 0201 	orr.w	r2, r2, #1
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	e012      	b.n	800bf48 <HAL_DMA_Start_IT+0x468>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f042 0201 	orr.w	r2, r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	e009      	b.n	800bf48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bf48:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	40020010 	.word	0x40020010
 800bf58:	40020028 	.word	0x40020028
 800bf5c:	40020040 	.word	0x40020040
 800bf60:	40020058 	.word	0x40020058
 800bf64:	40020070 	.word	0x40020070
 800bf68:	40020088 	.word	0x40020088
 800bf6c:	400200a0 	.word	0x400200a0
 800bf70:	400200b8 	.word	0x400200b8
 800bf74:	40020410 	.word	0x40020410
 800bf78:	40020428 	.word	0x40020428
 800bf7c:	40020440 	.word	0x40020440
 800bf80:	40020458 	.word	0x40020458
 800bf84:	40020470 	.word	0x40020470
 800bf88:	40020488 	.word	0x40020488
 800bf8c:	400204a0 	.word	0x400204a0
 800bf90:	400204b8 	.word	0x400204b8
 800bf94:	58025408 	.word	0x58025408
 800bf98:	5802541c 	.word	0x5802541c
 800bf9c:	58025430 	.word	0x58025430
 800bfa0:	58025444 	.word	0x58025444
 800bfa4:	58025458 	.word	0x58025458
 800bfa8:	5802546c 	.word	0x5802546c
 800bfac:	58025480 	.word	0x58025480
 800bfb0:	58025494 	.word	0x58025494

0800bfb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800bfbc:	f7fd f902 	bl	80091c4 <HAL_GetTick>
 800bfc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d101      	bne.n	800bfcc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e2dc      	b.n	800c586 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d008      	beq.n	800bfea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2280      	movs	r2, #128	@ 0x80
 800bfdc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e2cd      	b.n	800c586 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a76      	ldr	r2, [pc, #472]	@ (800c1c8 <HAL_DMA_Abort+0x214>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d04a      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a74      	ldr	r2, [pc, #464]	@ (800c1cc <HAL_DMA_Abort+0x218>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d045      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a73      	ldr	r2, [pc, #460]	@ (800c1d0 <HAL_DMA_Abort+0x21c>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d040      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a71      	ldr	r2, [pc, #452]	@ (800c1d4 <HAL_DMA_Abort+0x220>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d03b      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a70      	ldr	r2, [pc, #448]	@ (800c1d8 <HAL_DMA_Abort+0x224>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d036      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a6e      	ldr	r2, [pc, #440]	@ (800c1dc <HAL_DMA_Abort+0x228>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d031      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a6d      	ldr	r2, [pc, #436]	@ (800c1e0 <HAL_DMA_Abort+0x22c>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d02c      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a6b      	ldr	r2, [pc, #428]	@ (800c1e4 <HAL_DMA_Abort+0x230>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d027      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a6a      	ldr	r2, [pc, #424]	@ (800c1e8 <HAL_DMA_Abort+0x234>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d022      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a68      	ldr	r2, [pc, #416]	@ (800c1ec <HAL_DMA_Abort+0x238>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d01d      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a67      	ldr	r2, [pc, #412]	@ (800c1f0 <HAL_DMA_Abort+0x23c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d018      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a65      	ldr	r2, [pc, #404]	@ (800c1f4 <HAL_DMA_Abort+0x240>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d013      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a64      	ldr	r2, [pc, #400]	@ (800c1f8 <HAL_DMA_Abort+0x244>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d00e      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a62      	ldr	r2, [pc, #392]	@ (800c1fc <HAL_DMA_Abort+0x248>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d009      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a61      	ldr	r2, [pc, #388]	@ (800c200 <HAL_DMA_Abort+0x24c>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d004      	beq.n	800c08a <HAL_DMA_Abort+0xd6>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a5f      	ldr	r2, [pc, #380]	@ (800c204 <HAL_DMA_Abort+0x250>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d101      	bne.n	800c08e <HAL_DMA_Abort+0xda>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e000      	b.n	800c090 <HAL_DMA_Abort+0xdc>
 800c08e:	2300      	movs	r3, #0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d013      	beq.n	800c0bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f022 021e 	bic.w	r2, r2, #30
 800c0a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	695a      	ldr	r2, [r3, #20]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	e00a      	b.n	800c0d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 020e 	bic.w	r2, r2, #14
 800c0ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a3c      	ldr	r2, [pc, #240]	@ (800c1c8 <HAL_DMA_Abort+0x214>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d072      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a3a      	ldr	r2, [pc, #232]	@ (800c1cc <HAL_DMA_Abort+0x218>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d06d      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a39      	ldr	r2, [pc, #228]	@ (800c1d0 <HAL_DMA_Abort+0x21c>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d068      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a37      	ldr	r2, [pc, #220]	@ (800c1d4 <HAL_DMA_Abort+0x220>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d063      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a36      	ldr	r2, [pc, #216]	@ (800c1d8 <HAL_DMA_Abort+0x224>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d05e      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a34      	ldr	r2, [pc, #208]	@ (800c1dc <HAL_DMA_Abort+0x228>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d059      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a33      	ldr	r2, [pc, #204]	@ (800c1e0 <HAL_DMA_Abort+0x22c>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d054      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a31      	ldr	r2, [pc, #196]	@ (800c1e4 <HAL_DMA_Abort+0x230>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d04f      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a30      	ldr	r2, [pc, #192]	@ (800c1e8 <HAL_DMA_Abort+0x234>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d04a      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a2e      	ldr	r2, [pc, #184]	@ (800c1ec <HAL_DMA_Abort+0x238>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d045      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a2d      	ldr	r2, [pc, #180]	@ (800c1f0 <HAL_DMA_Abort+0x23c>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d040      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a2b      	ldr	r2, [pc, #172]	@ (800c1f4 <HAL_DMA_Abort+0x240>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d03b      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f8 <HAL_DMA_Abort+0x244>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d036      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a28      	ldr	r2, [pc, #160]	@ (800c1fc <HAL_DMA_Abort+0x248>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d031      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a27      	ldr	r2, [pc, #156]	@ (800c200 <HAL_DMA_Abort+0x24c>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d02c      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a25      	ldr	r2, [pc, #148]	@ (800c204 <HAL_DMA_Abort+0x250>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d027      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a24      	ldr	r2, [pc, #144]	@ (800c208 <HAL_DMA_Abort+0x254>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d022      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a22      	ldr	r2, [pc, #136]	@ (800c20c <HAL_DMA_Abort+0x258>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d01d      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a21      	ldr	r2, [pc, #132]	@ (800c210 <HAL_DMA_Abort+0x25c>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d018      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a1f      	ldr	r2, [pc, #124]	@ (800c214 <HAL_DMA_Abort+0x260>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d013      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a1e      	ldr	r2, [pc, #120]	@ (800c218 <HAL_DMA_Abort+0x264>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d00e      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a1c      	ldr	r2, [pc, #112]	@ (800c21c <HAL_DMA_Abort+0x268>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d009      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a1b      	ldr	r2, [pc, #108]	@ (800c220 <HAL_DMA_Abort+0x26c>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d004      	beq.n	800c1c2 <HAL_DMA_Abort+0x20e>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a19      	ldr	r2, [pc, #100]	@ (800c224 <HAL_DMA_Abort+0x270>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d132      	bne.n	800c228 <HAL_DMA_Abort+0x274>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e031      	b.n	800c22a <HAL_DMA_Abort+0x276>
 800c1c6:	bf00      	nop
 800c1c8:	40020010 	.word	0x40020010
 800c1cc:	40020028 	.word	0x40020028
 800c1d0:	40020040 	.word	0x40020040
 800c1d4:	40020058 	.word	0x40020058
 800c1d8:	40020070 	.word	0x40020070
 800c1dc:	40020088 	.word	0x40020088
 800c1e0:	400200a0 	.word	0x400200a0
 800c1e4:	400200b8 	.word	0x400200b8
 800c1e8:	40020410 	.word	0x40020410
 800c1ec:	40020428 	.word	0x40020428
 800c1f0:	40020440 	.word	0x40020440
 800c1f4:	40020458 	.word	0x40020458
 800c1f8:	40020470 	.word	0x40020470
 800c1fc:	40020488 	.word	0x40020488
 800c200:	400204a0 	.word	0x400204a0
 800c204:	400204b8 	.word	0x400204b8
 800c208:	58025408 	.word	0x58025408
 800c20c:	5802541c 	.word	0x5802541c
 800c210:	58025430 	.word	0x58025430
 800c214:	58025444 	.word	0x58025444
 800c218:	58025458 	.word	0x58025458
 800c21c:	5802546c 	.word	0x5802546c
 800c220:	58025480 	.word	0x58025480
 800c224:	58025494 	.word	0x58025494
 800c228:	2300      	movs	r3, #0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c238:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c23c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a6d      	ldr	r2, [pc, #436]	@ (800c3f8 <HAL_DMA_Abort+0x444>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d04a      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a6b      	ldr	r2, [pc, #428]	@ (800c3fc <HAL_DMA_Abort+0x448>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d045      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a6a      	ldr	r2, [pc, #424]	@ (800c400 <HAL_DMA_Abort+0x44c>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d040      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a68      	ldr	r2, [pc, #416]	@ (800c404 <HAL_DMA_Abort+0x450>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d03b      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a67      	ldr	r2, [pc, #412]	@ (800c408 <HAL_DMA_Abort+0x454>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d036      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a65      	ldr	r2, [pc, #404]	@ (800c40c <HAL_DMA_Abort+0x458>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d031      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a64      	ldr	r2, [pc, #400]	@ (800c410 <HAL_DMA_Abort+0x45c>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d02c      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a62      	ldr	r2, [pc, #392]	@ (800c414 <HAL_DMA_Abort+0x460>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d027      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a61      	ldr	r2, [pc, #388]	@ (800c418 <HAL_DMA_Abort+0x464>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d022      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a5f      	ldr	r2, [pc, #380]	@ (800c41c <HAL_DMA_Abort+0x468>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d01d      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a5e      	ldr	r2, [pc, #376]	@ (800c420 <HAL_DMA_Abort+0x46c>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d018      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a5c      	ldr	r2, [pc, #368]	@ (800c424 <HAL_DMA_Abort+0x470>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d013      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a5b      	ldr	r2, [pc, #364]	@ (800c428 <HAL_DMA_Abort+0x474>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00e      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a59      	ldr	r2, [pc, #356]	@ (800c42c <HAL_DMA_Abort+0x478>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d009      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a58      	ldr	r2, [pc, #352]	@ (800c430 <HAL_DMA_Abort+0x47c>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d004      	beq.n	800c2de <HAL_DMA_Abort+0x32a>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a56      	ldr	r2, [pc, #344]	@ (800c434 <HAL_DMA_Abort+0x480>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d108      	bne.n	800c2f0 <HAL_DMA_Abort+0x33c>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 0201 	bic.w	r2, r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e007      	b.n	800c300 <HAL_DMA_Abort+0x34c>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 0201 	bic.w	r2, r2, #1
 800c2fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c300:	e013      	b.n	800c32a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c302:	f7fc ff5f 	bl	80091c4 <HAL_GetTick>
 800c306:	4602      	mov	r2, r0
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	2b05      	cmp	r3, #5
 800c30e:	d90c      	bls.n	800c32a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2220      	movs	r2, #32
 800c314:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2203      	movs	r2, #3
 800c31a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e12d      	b.n	800c586 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1e5      	bne.n	800c302 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a2f      	ldr	r2, [pc, #188]	@ (800c3f8 <HAL_DMA_Abort+0x444>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d04a      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a2d      	ldr	r2, [pc, #180]	@ (800c3fc <HAL_DMA_Abort+0x448>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d045      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a2c      	ldr	r2, [pc, #176]	@ (800c400 <HAL_DMA_Abort+0x44c>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d040      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a2a      	ldr	r2, [pc, #168]	@ (800c404 <HAL_DMA_Abort+0x450>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d03b      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a29      	ldr	r2, [pc, #164]	@ (800c408 <HAL_DMA_Abort+0x454>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d036      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a27      	ldr	r2, [pc, #156]	@ (800c40c <HAL_DMA_Abort+0x458>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d031      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a26      	ldr	r2, [pc, #152]	@ (800c410 <HAL_DMA_Abort+0x45c>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d02c      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a24      	ldr	r2, [pc, #144]	@ (800c414 <HAL_DMA_Abort+0x460>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d027      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a23      	ldr	r2, [pc, #140]	@ (800c418 <HAL_DMA_Abort+0x464>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d022      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a21      	ldr	r2, [pc, #132]	@ (800c41c <HAL_DMA_Abort+0x468>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d01d      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a20      	ldr	r2, [pc, #128]	@ (800c420 <HAL_DMA_Abort+0x46c>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d018      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c424 <HAL_DMA_Abort+0x470>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d013      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a1d      	ldr	r2, [pc, #116]	@ (800c428 <HAL_DMA_Abort+0x474>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d00e      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c42c <HAL_DMA_Abort+0x478>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d009      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a1a      	ldr	r2, [pc, #104]	@ (800c430 <HAL_DMA_Abort+0x47c>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d004      	beq.n	800c3d6 <HAL_DMA_Abort+0x422>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a18      	ldr	r2, [pc, #96]	@ (800c434 <HAL_DMA_Abort+0x480>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d101      	bne.n	800c3da <HAL_DMA_Abort+0x426>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <HAL_DMA_Abort+0x428>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d02b      	beq.n	800c438 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3ea:	f003 031f 	and.w	r3, r3, #31
 800c3ee:	223f      	movs	r2, #63	@ 0x3f
 800c3f0:	409a      	lsls	r2, r3
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	609a      	str	r2, [r3, #8]
 800c3f6:	e02a      	b.n	800c44e <HAL_DMA_Abort+0x49a>
 800c3f8:	40020010 	.word	0x40020010
 800c3fc:	40020028 	.word	0x40020028
 800c400:	40020040 	.word	0x40020040
 800c404:	40020058 	.word	0x40020058
 800c408:	40020070 	.word	0x40020070
 800c40c:	40020088 	.word	0x40020088
 800c410:	400200a0 	.word	0x400200a0
 800c414:	400200b8 	.word	0x400200b8
 800c418:	40020410 	.word	0x40020410
 800c41c:	40020428 	.word	0x40020428
 800c420:	40020440 	.word	0x40020440
 800c424:	40020458 	.word	0x40020458
 800c428:	40020470 	.word	0x40020470
 800c42c:	40020488 	.word	0x40020488
 800c430:	400204a0 	.word	0x400204a0
 800c434:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c43c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c442:	f003 031f 	and.w	r3, r3, #31
 800c446:	2201      	movs	r2, #1
 800c448:	409a      	lsls	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a4f      	ldr	r2, [pc, #316]	@ (800c590 <HAL_DMA_Abort+0x5dc>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d072      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a4d      	ldr	r2, [pc, #308]	@ (800c594 <HAL_DMA_Abort+0x5e0>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d06d      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a4c      	ldr	r2, [pc, #304]	@ (800c598 <HAL_DMA_Abort+0x5e4>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d068      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a4a      	ldr	r2, [pc, #296]	@ (800c59c <HAL_DMA_Abort+0x5e8>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d063      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a49      	ldr	r2, [pc, #292]	@ (800c5a0 <HAL_DMA_Abort+0x5ec>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d05e      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a47      	ldr	r2, [pc, #284]	@ (800c5a4 <HAL_DMA_Abort+0x5f0>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d059      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a46      	ldr	r2, [pc, #280]	@ (800c5a8 <HAL_DMA_Abort+0x5f4>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d054      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a44      	ldr	r2, [pc, #272]	@ (800c5ac <HAL_DMA_Abort+0x5f8>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d04f      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a43      	ldr	r2, [pc, #268]	@ (800c5b0 <HAL_DMA_Abort+0x5fc>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d04a      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a41      	ldr	r2, [pc, #260]	@ (800c5b4 <HAL_DMA_Abort+0x600>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d045      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a40      	ldr	r2, [pc, #256]	@ (800c5b8 <HAL_DMA_Abort+0x604>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d040      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a3e      	ldr	r2, [pc, #248]	@ (800c5bc <HAL_DMA_Abort+0x608>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d03b      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a3d      	ldr	r2, [pc, #244]	@ (800c5c0 <HAL_DMA_Abort+0x60c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d036      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a3b      	ldr	r2, [pc, #236]	@ (800c5c4 <HAL_DMA_Abort+0x610>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d031      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a3a      	ldr	r2, [pc, #232]	@ (800c5c8 <HAL_DMA_Abort+0x614>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d02c      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a38      	ldr	r2, [pc, #224]	@ (800c5cc <HAL_DMA_Abort+0x618>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d027      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a37      	ldr	r2, [pc, #220]	@ (800c5d0 <HAL_DMA_Abort+0x61c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d022      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a35      	ldr	r2, [pc, #212]	@ (800c5d4 <HAL_DMA_Abort+0x620>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d01d      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a34      	ldr	r2, [pc, #208]	@ (800c5d8 <HAL_DMA_Abort+0x624>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d018      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a32      	ldr	r2, [pc, #200]	@ (800c5dc <HAL_DMA_Abort+0x628>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d013      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a31      	ldr	r2, [pc, #196]	@ (800c5e0 <HAL_DMA_Abort+0x62c>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d00e      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a2f      	ldr	r2, [pc, #188]	@ (800c5e4 <HAL_DMA_Abort+0x630>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d009      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a2e      	ldr	r2, [pc, #184]	@ (800c5e8 <HAL_DMA_Abort+0x634>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d004      	beq.n	800c53e <HAL_DMA_Abort+0x58a>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a2c      	ldr	r2, [pc, #176]	@ (800c5ec <HAL_DMA_Abort+0x638>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d101      	bne.n	800c542 <HAL_DMA_Abort+0x58e>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <HAL_DMA_Abort+0x590>
 800c542:	2300      	movs	r3, #0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d015      	beq.n	800c574 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c550:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00c      	beq.n	800c574 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c568:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c572:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	40020010 	.word	0x40020010
 800c594:	40020028 	.word	0x40020028
 800c598:	40020040 	.word	0x40020040
 800c59c:	40020058 	.word	0x40020058
 800c5a0:	40020070 	.word	0x40020070
 800c5a4:	40020088 	.word	0x40020088
 800c5a8:	400200a0 	.word	0x400200a0
 800c5ac:	400200b8 	.word	0x400200b8
 800c5b0:	40020410 	.word	0x40020410
 800c5b4:	40020428 	.word	0x40020428
 800c5b8:	40020440 	.word	0x40020440
 800c5bc:	40020458 	.word	0x40020458
 800c5c0:	40020470 	.word	0x40020470
 800c5c4:	40020488 	.word	0x40020488
 800c5c8:	400204a0 	.word	0x400204a0
 800c5cc:	400204b8 	.word	0x400204b8
 800c5d0:	58025408 	.word	0x58025408
 800c5d4:	5802541c 	.word	0x5802541c
 800c5d8:	58025430 	.word	0x58025430
 800c5dc:	58025444 	.word	0x58025444
 800c5e0:	58025458 	.word	0x58025458
 800c5e4:	5802546c 	.word	0x5802546c
 800c5e8:	58025480 	.word	0x58025480
 800c5ec:	58025494 	.word	0x58025494

0800c5f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d101      	bne.n	800c602 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e237      	b.n	800ca72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d004      	beq.n	800c618 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2280      	movs	r2, #128	@ 0x80
 800c612:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e22c      	b.n	800ca72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a5c      	ldr	r2, [pc, #368]	@ (800c790 <HAL_DMA_Abort_IT+0x1a0>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d04a      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a5b      	ldr	r2, [pc, #364]	@ (800c794 <HAL_DMA_Abort_IT+0x1a4>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d045      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a59      	ldr	r2, [pc, #356]	@ (800c798 <HAL_DMA_Abort_IT+0x1a8>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d040      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a58      	ldr	r2, [pc, #352]	@ (800c79c <HAL_DMA_Abort_IT+0x1ac>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d03b      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a56      	ldr	r2, [pc, #344]	@ (800c7a0 <HAL_DMA_Abort_IT+0x1b0>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d036      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a55      	ldr	r2, [pc, #340]	@ (800c7a4 <HAL_DMA_Abort_IT+0x1b4>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d031      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a53      	ldr	r2, [pc, #332]	@ (800c7a8 <HAL_DMA_Abort_IT+0x1b8>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d02c      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a52      	ldr	r2, [pc, #328]	@ (800c7ac <HAL_DMA_Abort_IT+0x1bc>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d027      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a50      	ldr	r2, [pc, #320]	@ (800c7b0 <HAL_DMA_Abort_IT+0x1c0>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d022      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a4f      	ldr	r2, [pc, #316]	@ (800c7b4 <HAL_DMA_Abort_IT+0x1c4>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d01d      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a4d      	ldr	r2, [pc, #308]	@ (800c7b8 <HAL_DMA_Abort_IT+0x1c8>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d018      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a4c      	ldr	r2, [pc, #304]	@ (800c7bc <HAL_DMA_Abort_IT+0x1cc>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d013      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a4a      	ldr	r2, [pc, #296]	@ (800c7c0 <HAL_DMA_Abort_IT+0x1d0>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d00e      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a49      	ldr	r2, [pc, #292]	@ (800c7c4 <HAL_DMA_Abort_IT+0x1d4>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d009      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a47      	ldr	r2, [pc, #284]	@ (800c7c8 <HAL_DMA_Abort_IT+0x1d8>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d004      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0xc8>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a46      	ldr	r2, [pc, #280]	@ (800c7cc <HAL_DMA_Abort_IT+0x1dc>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d101      	bne.n	800c6bc <HAL_DMA_Abort_IT+0xcc>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e000      	b.n	800c6be <HAL_DMA_Abort_IT+0xce>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 8086 	beq.w	800c7d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2204      	movs	r2, #4
 800c6c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a2f      	ldr	r2, [pc, #188]	@ (800c790 <HAL_DMA_Abort_IT+0x1a0>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d04a      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a2e      	ldr	r2, [pc, #184]	@ (800c794 <HAL_DMA_Abort_IT+0x1a4>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d045      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a2c      	ldr	r2, [pc, #176]	@ (800c798 <HAL_DMA_Abort_IT+0x1a8>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d040      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a2b      	ldr	r2, [pc, #172]	@ (800c79c <HAL_DMA_Abort_IT+0x1ac>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d03b      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a29      	ldr	r2, [pc, #164]	@ (800c7a0 <HAL_DMA_Abort_IT+0x1b0>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d036      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a28      	ldr	r2, [pc, #160]	@ (800c7a4 <HAL_DMA_Abort_IT+0x1b4>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d031      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a26      	ldr	r2, [pc, #152]	@ (800c7a8 <HAL_DMA_Abort_IT+0x1b8>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d02c      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a25      	ldr	r2, [pc, #148]	@ (800c7ac <HAL_DMA_Abort_IT+0x1bc>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d027      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a23      	ldr	r2, [pc, #140]	@ (800c7b0 <HAL_DMA_Abort_IT+0x1c0>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d022      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a22      	ldr	r2, [pc, #136]	@ (800c7b4 <HAL_DMA_Abort_IT+0x1c4>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d01d      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a20      	ldr	r2, [pc, #128]	@ (800c7b8 <HAL_DMA_Abort_IT+0x1c8>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d018      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a1f      	ldr	r2, [pc, #124]	@ (800c7bc <HAL_DMA_Abort_IT+0x1cc>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d013      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a1d      	ldr	r2, [pc, #116]	@ (800c7c0 <HAL_DMA_Abort_IT+0x1d0>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d00e      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a1c      	ldr	r2, [pc, #112]	@ (800c7c4 <HAL_DMA_Abort_IT+0x1d4>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d009      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a1a      	ldr	r2, [pc, #104]	@ (800c7c8 <HAL_DMA_Abort_IT+0x1d8>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d004      	beq.n	800c76c <HAL_DMA_Abort_IT+0x17c>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a19      	ldr	r2, [pc, #100]	@ (800c7cc <HAL_DMA_Abort_IT+0x1dc>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d108      	bne.n	800c77e <HAL_DMA_Abort_IT+0x18e>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f022 0201 	bic.w	r2, r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	e178      	b.n	800ca70 <HAL_DMA_Abort_IT+0x480>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 0201 	bic.w	r2, r2, #1
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	e16f      	b.n	800ca70 <HAL_DMA_Abort_IT+0x480>
 800c790:	40020010 	.word	0x40020010
 800c794:	40020028 	.word	0x40020028
 800c798:	40020040 	.word	0x40020040
 800c79c:	40020058 	.word	0x40020058
 800c7a0:	40020070 	.word	0x40020070
 800c7a4:	40020088 	.word	0x40020088
 800c7a8:	400200a0 	.word	0x400200a0
 800c7ac:	400200b8 	.word	0x400200b8
 800c7b0:	40020410 	.word	0x40020410
 800c7b4:	40020428 	.word	0x40020428
 800c7b8:	40020440 	.word	0x40020440
 800c7bc:	40020458 	.word	0x40020458
 800c7c0:	40020470 	.word	0x40020470
 800c7c4:	40020488 	.word	0x40020488
 800c7c8:	400204a0 	.word	0x400204a0
 800c7cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f022 020e 	bic.w	r2, r2, #14
 800c7de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a6c      	ldr	r2, [pc, #432]	@ (800c998 <HAL_DMA_Abort_IT+0x3a8>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d04a      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a6b      	ldr	r2, [pc, #428]	@ (800c99c <HAL_DMA_Abort_IT+0x3ac>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d045      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a69      	ldr	r2, [pc, #420]	@ (800c9a0 <HAL_DMA_Abort_IT+0x3b0>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d040      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a68      	ldr	r2, [pc, #416]	@ (800c9a4 <HAL_DMA_Abort_IT+0x3b4>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d03b      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a66      	ldr	r2, [pc, #408]	@ (800c9a8 <HAL_DMA_Abort_IT+0x3b8>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d036      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a65      	ldr	r2, [pc, #404]	@ (800c9ac <HAL_DMA_Abort_IT+0x3bc>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d031      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a63      	ldr	r2, [pc, #396]	@ (800c9b0 <HAL_DMA_Abort_IT+0x3c0>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d02c      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a62      	ldr	r2, [pc, #392]	@ (800c9b4 <HAL_DMA_Abort_IT+0x3c4>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d027      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a60      	ldr	r2, [pc, #384]	@ (800c9b8 <HAL_DMA_Abort_IT+0x3c8>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d022      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a5f      	ldr	r2, [pc, #380]	@ (800c9bc <HAL_DMA_Abort_IT+0x3cc>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d01d      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a5d      	ldr	r2, [pc, #372]	@ (800c9c0 <HAL_DMA_Abort_IT+0x3d0>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d018      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a5c      	ldr	r2, [pc, #368]	@ (800c9c4 <HAL_DMA_Abort_IT+0x3d4>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d013      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a5a      	ldr	r2, [pc, #360]	@ (800c9c8 <HAL_DMA_Abort_IT+0x3d8>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d00e      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a59      	ldr	r2, [pc, #356]	@ (800c9cc <HAL_DMA_Abort_IT+0x3dc>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d009      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a57      	ldr	r2, [pc, #348]	@ (800c9d0 <HAL_DMA_Abort_IT+0x3e0>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d004      	beq.n	800c880 <HAL_DMA_Abort_IT+0x290>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a56      	ldr	r2, [pc, #344]	@ (800c9d4 <HAL_DMA_Abort_IT+0x3e4>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d108      	bne.n	800c892 <HAL_DMA_Abort_IT+0x2a2>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f022 0201 	bic.w	r2, r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	e007      	b.n	800c8a2 <HAL_DMA_Abort_IT+0x2b2>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f022 0201 	bic.w	r2, r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a3c      	ldr	r2, [pc, #240]	@ (800c998 <HAL_DMA_Abort_IT+0x3a8>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d072      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a3a      	ldr	r2, [pc, #232]	@ (800c99c <HAL_DMA_Abort_IT+0x3ac>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d06d      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a39      	ldr	r2, [pc, #228]	@ (800c9a0 <HAL_DMA_Abort_IT+0x3b0>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d068      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a37      	ldr	r2, [pc, #220]	@ (800c9a4 <HAL_DMA_Abort_IT+0x3b4>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d063      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a36      	ldr	r2, [pc, #216]	@ (800c9a8 <HAL_DMA_Abort_IT+0x3b8>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d05e      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a34      	ldr	r2, [pc, #208]	@ (800c9ac <HAL_DMA_Abort_IT+0x3bc>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d059      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a33      	ldr	r2, [pc, #204]	@ (800c9b0 <HAL_DMA_Abort_IT+0x3c0>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d054      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a31      	ldr	r2, [pc, #196]	@ (800c9b4 <HAL_DMA_Abort_IT+0x3c4>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d04f      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a30      	ldr	r2, [pc, #192]	@ (800c9b8 <HAL_DMA_Abort_IT+0x3c8>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d04a      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a2e      	ldr	r2, [pc, #184]	@ (800c9bc <HAL_DMA_Abort_IT+0x3cc>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d045      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a2d      	ldr	r2, [pc, #180]	@ (800c9c0 <HAL_DMA_Abort_IT+0x3d0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d040      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a2b      	ldr	r2, [pc, #172]	@ (800c9c4 <HAL_DMA_Abort_IT+0x3d4>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d03b      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a2a      	ldr	r2, [pc, #168]	@ (800c9c8 <HAL_DMA_Abort_IT+0x3d8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d036      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a28      	ldr	r2, [pc, #160]	@ (800c9cc <HAL_DMA_Abort_IT+0x3dc>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d031      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a27      	ldr	r2, [pc, #156]	@ (800c9d0 <HAL_DMA_Abort_IT+0x3e0>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d02c      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a25      	ldr	r2, [pc, #148]	@ (800c9d4 <HAL_DMA_Abort_IT+0x3e4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d027      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a24      	ldr	r2, [pc, #144]	@ (800c9d8 <HAL_DMA_Abort_IT+0x3e8>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d022      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a22      	ldr	r2, [pc, #136]	@ (800c9dc <HAL_DMA_Abort_IT+0x3ec>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d01d      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a21      	ldr	r2, [pc, #132]	@ (800c9e0 <HAL_DMA_Abort_IT+0x3f0>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d018      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a1f      	ldr	r2, [pc, #124]	@ (800c9e4 <HAL_DMA_Abort_IT+0x3f4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d013      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9e8 <HAL_DMA_Abort_IT+0x3f8>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d00e      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a1c      	ldr	r2, [pc, #112]	@ (800c9ec <HAL_DMA_Abort_IT+0x3fc>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d009      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a1b      	ldr	r2, [pc, #108]	@ (800c9f0 <HAL_DMA_Abort_IT+0x400>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d004      	beq.n	800c992 <HAL_DMA_Abort_IT+0x3a2>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a19      	ldr	r2, [pc, #100]	@ (800c9f4 <HAL_DMA_Abort_IT+0x404>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d132      	bne.n	800c9f8 <HAL_DMA_Abort_IT+0x408>
 800c992:	2301      	movs	r3, #1
 800c994:	e031      	b.n	800c9fa <HAL_DMA_Abort_IT+0x40a>
 800c996:	bf00      	nop
 800c998:	40020010 	.word	0x40020010
 800c99c:	40020028 	.word	0x40020028
 800c9a0:	40020040 	.word	0x40020040
 800c9a4:	40020058 	.word	0x40020058
 800c9a8:	40020070 	.word	0x40020070
 800c9ac:	40020088 	.word	0x40020088
 800c9b0:	400200a0 	.word	0x400200a0
 800c9b4:	400200b8 	.word	0x400200b8
 800c9b8:	40020410 	.word	0x40020410
 800c9bc:	40020428 	.word	0x40020428
 800c9c0:	40020440 	.word	0x40020440
 800c9c4:	40020458 	.word	0x40020458
 800c9c8:	40020470 	.word	0x40020470
 800c9cc:	40020488 	.word	0x40020488
 800c9d0:	400204a0 	.word	0x400204a0
 800c9d4:	400204b8 	.word	0x400204b8
 800c9d8:	58025408 	.word	0x58025408
 800c9dc:	5802541c 	.word	0x5802541c
 800c9e0:	58025430 	.word	0x58025430
 800c9e4:	58025444 	.word	0x58025444
 800c9e8:	58025458 	.word	0x58025458
 800c9ec:	5802546c 	.word	0x5802546c
 800c9f0:	58025480 	.word	0x58025480
 800c9f4:	58025494 	.word	0x58025494
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d028      	beq.n	800ca50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca18:	f003 031f 	and.w	r3, r3, #31
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	409a      	lsls	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ca2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00c      	beq.n	800ca50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ca4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop

0800ca7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	@ 0x28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ca88:	4b67      	ldr	r3, [pc, #412]	@ (800cc28 <HAL_DMA_IRQHandler+0x1ac>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a67      	ldr	r2, [pc, #412]	@ (800cc2c <HAL_DMA_IRQHandler+0x1b0>)
 800ca8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca92:	0a9b      	lsrs	r3, r3, #10
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caa0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800caa2:	6a3b      	ldr	r3, [r7, #32]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a5f      	ldr	r2, [pc, #380]	@ (800cc30 <HAL_DMA_IRQHandler+0x1b4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d04a      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a5d      	ldr	r2, [pc, #372]	@ (800cc34 <HAL_DMA_IRQHandler+0x1b8>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d045      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a5c      	ldr	r2, [pc, #368]	@ (800cc38 <HAL_DMA_IRQHandler+0x1bc>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d040      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a5a      	ldr	r2, [pc, #360]	@ (800cc3c <HAL_DMA_IRQHandler+0x1c0>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d03b      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a59      	ldr	r2, [pc, #356]	@ (800cc40 <HAL_DMA_IRQHandler+0x1c4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d036      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a57      	ldr	r2, [pc, #348]	@ (800cc44 <HAL_DMA_IRQHandler+0x1c8>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d031      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a56      	ldr	r2, [pc, #344]	@ (800cc48 <HAL_DMA_IRQHandler+0x1cc>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d02c      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a54      	ldr	r2, [pc, #336]	@ (800cc4c <HAL_DMA_IRQHandler+0x1d0>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d027      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a53      	ldr	r2, [pc, #332]	@ (800cc50 <HAL_DMA_IRQHandler+0x1d4>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d022      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a51      	ldr	r2, [pc, #324]	@ (800cc54 <HAL_DMA_IRQHandler+0x1d8>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d01d      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a50      	ldr	r2, [pc, #320]	@ (800cc58 <HAL_DMA_IRQHandler+0x1dc>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d018      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a4e      	ldr	r2, [pc, #312]	@ (800cc5c <HAL_DMA_IRQHandler+0x1e0>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d013      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a4d      	ldr	r2, [pc, #308]	@ (800cc60 <HAL_DMA_IRQHandler+0x1e4>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d00e      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a4b      	ldr	r2, [pc, #300]	@ (800cc64 <HAL_DMA_IRQHandler+0x1e8>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d009      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a4a      	ldr	r2, [pc, #296]	@ (800cc68 <HAL_DMA_IRQHandler+0x1ec>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d004      	beq.n	800cb4e <HAL_DMA_IRQHandler+0xd2>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a48      	ldr	r2, [pc, #288]	@ (800cc6c <HAL_DMA_IRQHandler+0x1f0>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d101      	bne.n	800cb52 <HAL_DMA_IRQHandler+0xd6>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e000      	b.n	800cb54 <HAL_DMA_IRQHandler+0xd8>
 800cb52:	2300      	movs	r3, #0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 842b 	beq.w	800d3b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb5e:	f003 031f 	and.w	r3, r3, #31
 800cb62:	2208      	movs	r2, #8
 800cb64:	409a      	lsls	r2, r3
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	4013      	ands	r3, r2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80a2 	beq.w	800ccb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a2e      	ldr	r2, [pc, #184]	@ (800cc30 <HAL_DMA_IRQHandler+0x1b4>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d04a      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a2d      	ldr	r2, [pc, #180]	@ (800cc34 <HAL_DMA_IRQHandler+0x1b8>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d045      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a2b      	ldr	r2, [pc, #172]	@ (800cc38 <HAL_DMA_IRQHandler+0x1bc>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d040      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a2a      	ldr	r2, [pc, #168]	@ (800cc3c <HAL_DMA_IRQHandler+0x1c0>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d03b      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a28      	ldr	r2, [pc, #160]	@ (800cc40 <HAL_DMA_IRQHandler+0x1c4>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d036      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a27      	ldr	r2, [pc, #156]	@ (800cc44 <HAL_DMA_IRQHandler+0x1c8>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d031      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a25      	ldr	r2, [pc, #148]	@ (800cc48 <HAL_DMA_IRQHandler+0x1cc>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d02c      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a24      	ldr	r2, [pc, #144]	@ (800cc4c <HAL_DMA_IRQHandler+0x1d0>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d027      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a22      	ldr	r2, [pc, #136]	@ (800cc50 <HAL_DMA_IRQHandler+0x1d4>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d022      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a21      	ldr	r2, [pc, #132]	@ (800cc54 <HAL_DMA_IRQHandler+0x1d8>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d01d      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a1f      	ldr	r2, [pc, #124]	@ (800cc58 <HAL_DMA_IRQHandler+0x1dc>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d018      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a1e      	ldr	r2, [pc, #120]	@ (800cc5c <HAL_DMA_IRQHandler+0x1e0>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d013      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a1c      	ldr	r2, [pc, #112]	@ (800cc60 <HAL_DMA_IRQHandler+0x1e4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d00e      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800cc64 <HAL_DMA_IRQHandler+0x1e8>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d009      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a19      	ldr	r2, [pc, #100]	@ (800cc68 <HAL_DMA_IRQHandler+0x1ec>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d004      	beq.n	800cc10 <HAL_DMA_IRQHandler+0x194>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a18      	ldr	r2, [pc, #96]	@ (800cc6c <HAL_DMA_IRQHandler+0x1f0>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d12f      	bne.n	800cc70 <HAL_DMA_IRQHandler+0x1f4>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 0304 	and.w	r3, r3, #4
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	bf14      	ite	ne
 800cc1e:	2301      	movne	r3, #1
 800cc20:	2300      	moveq	r3, #0
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	e02e      	b.n	800cc84 <HAL_DMA_IRQHandler+0x208>
 800cc26:	bf00      	nop
 800cc28:	24000004 	.word	0x24000004
 800cc2c:	1b4e81b5 	.word	0x1b4e81b5
 800cc30:	40020010 	.word	0x40020010
 800cc34:	40020028 	.word	0x40020028
 800cc38:	40020040 	.word	0x40020040
 800cc3c:	40020058 	.word	0x40020058
 800cc40:	40020070 	.word	0x40020070
 800cc44:	40020088 	.word	0x40020088
 800cc48:	400200a0 	.word	0x400200a0
 800cc4c:	400200b8 	.word	0x400200b8
 800cc50:	40020410 	.word	0x40020410
 800cc54:	40020428 	.word	0x40020428
 800cc58:	40020440 	.word	0x40020440
 800cc5c:	40020458 	.word	0x40020458
 800cc60:	40020470 	.word	0x40020470
 800cc64:	40020488 	.word	0x40020488
 800cc68:	400204a0 	.word	0x400204a0
 800cc6c:	400204b8 	.word	0x400204b8
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0308 	and.w	r3, r3, #8
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	bf14      	ite	ne
 800cc7e:	2301      	movne	r3, #1
 800cc80:	2300      	moveq	r3, #0
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d015      	beq.n	800ccb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f022 0204 	bic.w	r2, r2, #4
 800cc96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc9c:	f003 031f 	and.w	r3, r3, #31
 800cca0:	2208      	movs	r2, #8
 800cca2:	409a      	lsls	r2, r3
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccac:	f043 0201 	orr.w	r2, r3, #1
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccb8:	f003 031f 	and.w	r3, r3, #31
 800ccbc:	69ba      	ldr	r2, [r7, #24]
 800ccbe:	fa22 f303 	lsr.w	r3, r2, r3
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d06e      	beq.n	800cda8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a69      	ldr	r2, [pc, #420]	@ (800ce74 <HAL_DMA_IRQHandler+0x3f8>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d04a      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a67      	ldr	r2, [pc, #412]	@ (800ce78 <HAL_DMA_IRQHandler+0x3fc>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d045      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a66      	ldr	r2, [pc, #408]	@ (800ce7c <HAL_DMA_IRQHandler+0x400>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d040      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a64      	ldr	r2, [pc, #400]	@ (800ce80 <HAL_DMA_IRQHandler+0x404>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d03b      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a63      	ldr	r2, [pc, #396]	@ (800ce84 <HAL_DMA_IRQHandler+0x408>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d036      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a61      	ldr	r2, [pc, #388]	@ (800ce88 <HAL_DMA_IRQHandler+0x40c>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d031      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a60      	ldr	r2, [pc, #384]	@ (800ce8c <HAL_DMA_IRQHandler+0x410>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d02c      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a5e      	ldr	r2, [pc, #376]	@ (800ce90 <HAL_DMA_IRQHandler+0x414>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d027      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a5d      	ldr	r2, [pc, #372]	@ (800ce94 <HAL_DMA_IRQHandler+0x418>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d022      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a5b      	ldr	r2, [pc, #364]	@ (800ce98 <HAL_DMA_IRQHandler+0x41c>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d01d      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a5a      	ldr	r2, [pc, #360]	@ (800ce9c <HAL_DMA_IRQHandler+0x420>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d018      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a58      	ldr	r2, [pc, #352]	@ (800cea0 <HAL_DMA_IRQHandler+0x424>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d013      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a57      	ldr	r2, [pc, #348]	@ (800cea4 <HAL_DMA_IRQHandler+0x428>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d00e      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a55      	ldr	r2, [pc, #340]	@ (800cea8 <HAL_DMA_IRQHandler+0x42c>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d009      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a54      	ldr	r2, [pc, #336]	@ (800ceac <HAL_DMA_IRQHandler+0x430>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d004      	beq.n	800cd6a <HAL_DMA_IRQHandler+0x2ee>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a52      	ldr	r2, [pc, #328]	@ (800ceb0 <HAL_DMA_IRQHandler+0x434>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d10a      	bne.n	800cd80 <HAL_DMA_IRQHandler+0x304>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	bf14      	ite	ne
 800cd78:	2301      	movne	r3, #1
 800cd7a:	2300      	moveq	r3, #0
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	e003      	b.n	800cd88 <HAL_DMA_IRQHandler+0x30c>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2300      	movs	r3, #0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00d      	beq.n	800cda8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	2201      	movs	r2, #1
 800cd96:	409a      	lsls	r2, r3
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cda0:	f043 0202 	orr.w	r2, r3, #2
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdac:	f003 031f 	and.w	r3, r3, #31
 800cdb0:	2204      	movs	r2, #4
 800cdb2:	409a      	lsls	r2, r3
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	4013      	ands	r3, r2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 808f 	beq.w	800cedc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a2c      	ldr	r2, [pc, #176]	@ (800ce74 <HAL_DMA_IRQHandler+0x3f8>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d04a      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a2a      	ldr	r2, [pc, #168]	@ (800ce78 <HAL_DMA_IRQHandler+0x3fc>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d045      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a29      	ldr	r2, [pc, #164]	@ (800ce7c <HAL_DMA_IRQHandler+0x400>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d040      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a27      	ldr	r2, [pc, #156]	@ (800ce80 <HAL_DMA_IRQHandler+0x404>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d03b      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a26      	ldr	r2, [pc, #152]	@ (800ce84 <HAL_DMA_IRQHandler+0x408>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d036      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a24      	ldr	r2, [pc, #144]	@ (800ce88 <HAL_DMA_IRQHandler+0x40c>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d031      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a23      	ldr	r2, [pc, #140]	@ (800ce8c <HAL_DMA_IRQHandler+0x410>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d02c      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a21      	ldr	r2, [pc, #132]	@ (800ce90 <HAL_DMA_IRQHandler+0x414>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d027      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a20      	ldr	r2, [pc, #128]	@ (800ce94 <HAL_DMA_IRQHandler+0x418>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d022      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a1e      	ldr	r2, [pc, #120]	@ (800ce98 <HAL_DMA_IRQHandler+0x41c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d01d      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a1d      	ldr	r2, [pc, #116]	@ (800ce9c <HAL_DMA_IRQHandler+0x420>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d018      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a1b      	ldr	r2, [pc, #108]	@ (800cea0 <HAL_DMA_IRQHandler+0x424>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d013      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a1a      	ldr	r2, [pc, #104]	@ (800cea4 <HAL_DMA_IRQHandler+0x428>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d00e      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a18      	ldr	r2, [pc, #96]	@ (800cea8 <HAL_DMA_IRQHandler+0x42c>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d009      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a17      	ldr	r2, [pc, #92]	@ (800ceac <HAL_DMA_IRQHandler+0x430>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d004      	beq.n	800ce5e <HAL_DMA_IRQHandler+0x3e2>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a15      	ldr	r2, [pc, #84]	@ (800ceb0 <HAL_DMA_IRQHandler+0x434>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d12a      	bne.n	800ceb4 <HAL_DMA_IRQHandler+0x438>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bf14      	ite	ne
 800ce6c:	2301      	movne	r3, #1
 800ce6e:	2300      	moveq	r3, #0
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	e023      	b.n	800cebc <HAL_DMA_IRQHandler+0x440>
 800ce74:	40020010 	.word	0x40020010
 800ce78:	40020028 	.word	0x40020028
 800ce7c:	40020040 	.word	0x40020040
 800ce80:	40020058 	.word	0x40020058
 800ce84:	40020070 	.word	0x40020070
 800ce88:	40020088 	.word	0x40020088
 800ce8c:	400200a0 	.word	0x400200a0
 800ce90:	400200b8 	.word	0x400200b8
 800ce94:	40020410 	.word	0x40020410
 800ce98:	40020428 	.word	0x40020428
 800ce9c:	40020440 	.word	0x40020440
 800cea0:	40020458 	.word	0x40020458
 800cea4:	40020470 	.word	0x40020470
 800cea8:	40020488 	.word	0x40020488
 800ceac:	400204a0 	.word	0x400204a0
 800ceb0:	400204b8 	.word	0x400204b8
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2300      	movs	r3, #0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00d      	beq.n	800cedc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cec4:	f003 031f 	and.w	r3, r3, #31
 800cec8:	2204      	movs	r2, #4
 800ceca:	409a      	lsls	r2, r3
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ced4:	f043 0204 	orr.w	r2, r3, #4
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cee0:	f003 031f 	and.w	r3, r3, #31
 800cee4:	2210      	movs	r2, #16
 800cee6:	409a      	lsls	r2, r3
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	4013      	ands	r3, r2
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 80a6 	beq.w	800d03e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a85      	ldr	r2, [pc, #532]	@ (800d10c <HAL_DMA_IRQHandler+0x690>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d04a      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a83      	ldr	r2, [pc, #524]	@ (800d110 <HAL_DMA_IRQHandler+0x694>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d045      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a82      	ldr	r2, [pc, #520]	@ (800d114 <HAL_DMA_IRQHandler+0x698>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d040      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a80      	ldr	r2, [pc, #512]	@ (800d118 <HAL_DMA_IRQHandler+0x69c>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d03b      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a7f      	ldr	r2, [pc, #508]	@ (800d11c <HAL_DMA_IRQHandler+0x6a0>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d036      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a7d      	ldr	r2, [pc, #500]	@ (800d120 <HAL_DMA_IRQHandler+0x6a4>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d031      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a7c      	ldr	r2, [pc, #496]	@ (800d124 <HAL_DMA_IRQHandler+0x6a8>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d02c      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a7a      	ldr	r2, [pc, #488]	@ (800d128 <HAL_DMA_IRQHandler+0x6ac>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d027      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a79      	ldr	r2, [pc, #484]	@ (800d12c <HAL_DMA_IRQHandler+0x6b0>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d022      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a77      	ldr	r2, [pc, #476]	@ (800d130 <HAL_DMA_IRQHandler+0x6b4>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d01d      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a76      	ldr	r2, [pc, #472]	@ (800d134 <HAL_DMA_IRQHandler+0x6b8>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d018      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a74      	ldr	r2, [pc, #464]	@ (800d138 <HAL_DMA_IRQHandler+0x6bc>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d013      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a73      	ldr	r2, [pc, #460]	@ (800d13c <HAL_DMA_IRQHandler+0x6c0>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d00e      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a71      	ldr	r2, [pc, #452]	@ (800d140 <HAL_DMA_IRQHandler+0x6c4>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d009      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a70      	ldr	r2, [pc, #448]	@ (800d144 <HAL_DMA_IRQHandler+0x6c8>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d004      	beq.n	800cf92 <HAL_DMA_IRQHandler+0x516>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a6e      	ldr	r2, [pc, #440]	@ (800d148 <HAL_DMA_IRQHandler+0x6cc>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d10a      	bne.n	800cfa8 <HAL_DMA_IRQHandler+0x52c>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 0308 	and.w	r3, r3, #8
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	bf14      	ite	ne
 800cfa0:	2301      	movne	r3, #1
 800cfa2:	2300      	moveq	r3, #0
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	e009      	b.n	800cfbc <HAL_DMA_IRQHandler+0x540>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0304 	and.w	r3, r3, #4
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bf14      	ite	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	2300      	moveq	r3, #0
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d03e      	beq.n	800d03e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfc4:	f003 031f 	and.w	r3, r3, #31
 800cfc8:	2210      	movs	r2, #16
 800cfca:	409a      	lsls	r2, r3
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d018      	beq.n	800d010 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d108      	bne.n	800cffe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d024      	beq.n	800d03e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
 800cffc:	e01f      	b.n	800d03e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d002:	2b00      	cmp	r3, #0
 800d004:	d01b      	beq.n	800d03e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	4798      	blx	r3
 800d00e:	e016      	b.n	800d03e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f022 0208 	bic.w	r2, r2, #8
 800d02c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d042:	f003 031f 	and.w	r3, r3, #31
 800d046:	2220      	movs	r2, #32
 800d048:	409a      	lsls	r2, r3
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	4013      	ands	r3, r2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 8110 	beq.w	800d274 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a2c      	ldr	r2, [pc, #176]	@ (800d10c <HAL_DMA_IRQHandler+0x690>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d04a      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a2b      	ldr	r2, [pc, #172]	@ (800d110 <HAL_DMA_IRQHandler+0x694>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d045      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a29      	ldr	r2, [pc, #164]	@ (800d114 <HAL_DMA_IRQHandler+0x698>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d040      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a28      	ldr	r2, [pc, #160]	@ (800d118 <HAL_DMA_IRQHandler+0x69c>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d03b      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a26      	ldr	r2, [pc, #152]	@ (800d11c <HAL_DMA_IRQHandler+0x6a0>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d036      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a25      	ldr	r2, [pc, #148]	@ (800d120 <HAL_DMA_IRQHandler+0x6a4>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d031      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a23      	ldr	r2, [pc, #140]	@ (800d124 <HAL_DMA_IRQHandler+0x6a8>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d02c      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a22      	ldr	r2, [pc, #136]	@ (800d128 <HAL_DMA_IRQHandler+0x6ac>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d027      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a20      	ldr	r2, [pc, #128]	@ (800d12c <HAL_DMA_IRQHandler+0x6b0>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d022      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	@ (800d130 <HAL_DMA_IRQHandler+0x6b4>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d01d      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800d134 <HAL_DMA_IRQHandler+0x6b8>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d018      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a1c      	ldr	r2, [pc, #112]	@ (800d138 <HAL_DMA_IRQHandler+0x6bc>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d013      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800d13c <HAL_DMA_IRQHandler+0x6c0>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d00e      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a19      	ldr	r2, [pc, #100]	@ (800d140 <HAL_DMA_IRQHandler+0x6c4>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d009      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a17      	ldr	r2, [pc, #92]	@ (800d144 <HAL_DMA_IRQHandler+0x6c8>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d004      	beq.n	800d0f4 <HAL_DMA_IRQHandler+0x678>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a16      	ldr	r2, [pc, #88]	@ (800d148 <HAL_DMA_IRQHandler+0x6cc>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d12b      	bne.n	800d14c <HAL_DMA_IRQHandler+0x6d0>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 0310 	and.w	r3, r3, #16
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	bf14      	ite	ne
 800d102:	2301      	movne	r3, #1
 800d104:	2300      	moveq	r3, #0
 800d106:	b2db      	uxtb	r3, r3
 800d108:	e02a      	b.n	800d160 <HAL_DMA_IRQHandler+0x6e4>
 800d10a:	bf00      	nop
 800d10c:	40020010 	.word	0x40020010
 800d110:	40020028 	.word	0x40020028
 800d114:	40020040 	.word	0x40020040
 800d118:	40020058 	.word	0x40020058
 800d11c:	40020070 	.word	0x40020070
 800d120:	40020088 	.word	0x40020088
 800d124:	400200a0 	.word	0x400200a0
 800d128:	400200b8 	.word	0x400200b8
 800d12c:	40020410 	.word	0x40020410
 800d130:	40020428 	.word	0x40020428
 800d134:	40020440 	.word	0x40020440
 800d138:	40020458 	.word	0x40020458
 800d13c:	40020470 	.word	0x40020470
 800d140:	40020488 	.word	0x40020488
 800d144:	400204a0 	.word	0x400204a0
 800d148:	400204b8 	.word	0x400204b8
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f003 0302 	and.w	r3, r3, #2
 800d156:	2b00      	cmp	r3, #0
 800d158:	bf14      	ite	ne
 800d15a:	2301      	movne	r3, #1
 800d15c:	2300      	moveq	r3, #0
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 8087 	beq.w	800d274 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d16a:	f003 031f 	and.w	r3, r3, #31
 800d16e:	2220      	movs	r2, #32
 800d170:	409a      	lsls	r2, r3
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b04      	cmp	r3, #4
 800d180:	d139      	bne.n	800d1f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f022 0216 	bic.w	r2, r2, #22
 800d190:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	695a      	ldr	r2, [r3, #20]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d1a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d103      	bne.n	800d1b2 <HAL_DMA_IRQHandler+0x736>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f022 0208 	bic.w	r2, r2, #8
 800d1c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1c6:	f003 031f 	and.w	r3, r3, #31
 800d1ca:	223f      	movs	r2, #63	@ 0x3f
 800d1cc:	409a      	lsls	r2, r3
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 834a 	beq.w	800d880 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	4798      	blx	r3
          }
          return;
 800d1f4:	e344      	b.n	800d880 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d018      	beq.n	800d236 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d108      	bne.n	800d224 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d216:	2b00      	cmp	r3, #0
 800d218:	d02c      	beq.n	800d274 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	4798      	blx	r3
 800d222:	e027      	b.n	800d274 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d023      	beq.n	800d274 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	4798      	blx	r3
 800d234:	e01e      	b.n	800d274 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10f      	bne.n	800d264 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0210 	bic.w	r2, r2, #16
 800d252:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 8306 	beq.w	800d88a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 8088 	beq.w	800d39c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2204      	movs	r2, #4
 800d290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a7a      	ldr	r2, [pc, #488]	@ (800d484 <HAL_DMA_IRQHandler+0xa08>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d04a      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a79      	ldr	r2, [pc, #484]	@ (800d488 <HAL_DMA_IRQHandler+0xa0c>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d045      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a77      	ldr	r2, [pc, #476]	@ (800d48c <HAL_DMA_IRQHandler+0xa10>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d040      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a76      	ldr	r2, [pc, #472]	@ (800d490 <HAL_DMA_IRQHandler+0xa14>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d03b      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a74      	ldr	r2, [pc, #464]	@ (800d494 <HAL_DMA_IRQHandler+0xa18>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d036      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a73      	ldr	r2, [pc, #460]	@ (800d498 <HAL_DMA_IRQHandler+0xa1c>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d031      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a71      	ldr	r2, [pc, #452]	@ (800d49c <HAL_DMA_IRQHandler+0xa20>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d02c      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a70      	ldr	r2, [pc, #448]	@ (800d4a0 <HAL_DMA_IRQHandler+0xa24>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d027      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a6e      	ldr	r2, [pc, #440]	@ (800d4a4 <HAL_DMA_IRQHandler+0xa28>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d022      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a6d      	ldr	r2, [pc, #436]	@ (800d4a8 <HAL_DMA_IRQHandler+0xa2c>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d01d      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a6b      	ldr	r2, [pc, #428]	@ (800d4ac <HAL_DMA_IRQHandler+0xa30>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d018      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a6a      	ldr	r2, [pc, #424]	@ (800d4b0 <HAL_DMA_IRQHandler+0xa34>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d013      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a68      	ldr	r2, [pc, #416]	@ (800d4b4 <HAL_DMA_IRQHandler+0xa38>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d00e      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a67      	ldr	r2, [pc, #412]	@ (800d4b8 <HAL_DMA_IRQHandler+0xa3c>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d009      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a65      	ldr	r2, [pc, #404]	@ (800d4bc <HAL_DMA_IRQHandler+0xa40>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d004      	beq.n	800d334 <HAL_DMA_IRQHandler+0x8b8>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a64      	ldr	r2, [pc, #400]	@ (800d4c0 <HAL_DMA_IRQHandler+0xa44>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d108      	bne.n	800d346 <HAL_DMA_IRQHandler+0x8ca>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f022 0201 	bic.w	r2, r2, #1
 800d342:	601a      	str	r2, [r3, #0]
 800d344:	e007      	b.n	800d356 <HAL_DMA_IRQHandler+0x8da>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f022 0201 	bic.w	r2, r2, #1
 800d354:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	3301      	adds	r3, #1
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d35e:	429a      	cmp	r2, r3
 800d360:	d307      	bcc.n	800d372 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1f2      	bne.n	800d356 <HAL_DMA_IRQHandler+0x8da>
 800d370:	e000      	b.n	800d374 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d372:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d004      	beq.n	800d38c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2203      	movs	r2, #3
 800d386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d38a:	e003      	b.n	800d394 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 8272 	beq.w	800d88a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	4798      	blx	r3
 800d3ae:	e26c      	b.n	800d88a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a43      	ldr	r2, [pc, #268]	@ (800d4c4 <HAL_DMA_IRQHandler+0xa48>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d022      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a42      	ldr	r2, [pc, #264]	@ (800d4c8 <HAL_DMA_IRQHandler+0xa4c>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d01d      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a40      	ldr	r2, [pc, #256]	@ (800d4cc <HAL_DMA_IRQHandler+0xa50>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d018      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a3f      	ldr	r2, [pc, #252]	@ (800d4d0 <HAL_DMA_IRQHandler+0xa54>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d013      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a3d      	ldr	r2, [pc, #244]	@ (800d4d4 <HAL_DMA_IRQHandler+0xa58>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d00e      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a3c      	ldr	r2, [pc, #240]	@ (800d4d8 <HAL_DMA_IRQHandler+0xa5c>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d009      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a3a      	ldr	r2, [pc, #232]	@ (800d4dc <HAL_DMA_IRQHandler+0xa60>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d004      	beq.n	800d400 <HAL_DMA_IRQHandler+0x984>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a39      	ldr	r2, [pc, #228]	@ (800d4e0 <HAL_DMA_IRQHandler+0xa64>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d101      	bne.n	800d404 <HAL_DMA_IRQHandler+0x988>
 800d400:	2301      	movs	r3, #1
 800d402:	e000      	b.n	800d406 <HAL_DMA_IRQHandler+0x98a>
 800d404:	2300      	movs	r3, #0
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 823f 	beq.w	800d88a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d418:	f003 031f 	and.w	r3, r3, #31
 800d41c:	2204      	movs	r2, #4
 800d41e:	409a      	lsls	r2, r3
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	4013      	ands	r3, r2
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80cd 	beq.w	800d5c4 <HAL_DMA_IRQHandler+0xb48>
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f003 0304 	and.w	r3, r3, #4
 800d430:	2b00      	cmp	r3, #0
 800d432:	f000 80c7 	beq.w	800d5c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d43a:	f003 031f 	and.w	r3, r3, #31
 800d43e:	2204      	movs	r2, #4
 800d440:	409a      	lsls	r2, r3
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d049      	beq.n	800d4e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f000 8210 	beq.w	800d884 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d46c:	e20a      	b.n	800d884 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	f000 8206 	beq.w	800d884 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d480:	e200      	b.n	800d884 <HAL_DMA_IRQHandler+0xe08>
 800d482:	bf00      	nop
 800d484:	40020010 	.word	0x40020010
 800d488:	40020028 	.word	0x40020028
 800d48c:	40020040 	.word	0x40020040
 800d490:	40020058 	.word	0x40020058
 800d494:	40020070 	.word	0x40020070
 800d498:	40020088 	.word	0x40020088
 800d49c:	400200a0 	.word	0x400200a0
 800d4a0:	400200b8 	.word	0x400200b8
 800d4a4:	40020410 	.word	0x40020410
 800d4a8:	40020428 	.word	0x40020428
 800d4ac:	40020440 	.word	0x40020440
 800d4b0:	40020458 	.word	0x40020458
 800d4b4:	40020470 	.word	0x40020470
 800d4b8:	40020488 	.word	0x40020488
 800d4bc:	400204a0 	.word	0x400204a0
 800d4c0:	400204b8 	.word	0x400204b8
 800d4c4:	58025408 	.word	0x58025408
 800d4c8:	5802541c 	.word	0x5802541c
 800d4cc:	58025430 	.word	0x58025430
 800d4d0:	58025444 	.word	0x58025444
 800d4d4:	58025458 	.word	0x58025458
 800d4d8:	5802546c 	.word	0x5802546c
 800d4dc:	58025480 	.word	0x58025480
 800d4e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f003 0320 	and.w	r3, r3, #32
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d160      	bne.n	800d5b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a7f      	ldr	r2, [pc, #508]	@ (800d6f0 <HAL_DMA_IRQHandler+0xc74>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d04a      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a7d      	ldr	r2, [pc, #500]	@ (800d6f4 <HAL_DMA_IRQHandler+0xc78>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d045      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a7c      	ldr	r2, [pc, #496]	@ (800d6f8 <HAL_DMA_IRQHandler+0xc7c>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d040      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a7a      	ldr	r2, [pc, #488]	@ (800d6fc <HAL_DMA_IRQHandler+0xc80>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d03b      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a79      	ldr	r2, [pc, #484]	@ (800d700 <HAL_DMA_IRQHandler+0xc84>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d036      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a77      	ldr	r2, [pc, #476]	@ (800d704 <HAL_DMA_IRQHandler+0xc88>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d031      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a76      	ldr	r2, [pc, #472]	@ (800d708 <HAL_DMA_IRQHandler+0xc8c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d02c      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a74      	ldr	r2, [pc, #464]	@ (800d70c <HAL_DMA_IRQHandler+0xc90>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d027      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a73      	ldr	r2, [pc, #460]	@ (800d710 <HAL_DMA_IRQHandler+0xc94>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d022      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a71      	ldr	r2, [pc, #452]	@ (800d714 <HAL_DMA_IRQHandler+0xc98>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d01d      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a70      	ldr	r2, [pc, #448]	@ (800d718 <HAL_DMA_IRQHandler+0xc9c>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d018      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a6e      	ldr	r2, [pc, #440]	@ (800d71c <HAL_DMA_IRQHandler+0xca0>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d013      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a6d      	ldr	r2, [pc, #436]	@ (800d720 <HAL_DMA_IRQHandler+0xca4>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d00e      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a6b      	ldr	r2, [pc, #428]	@ (800d724 <HAL_DMA_IRQHandler+0xca8>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d009      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a6a      	ldr	r2, [pc, #424]	@ (800d728 <HAL_DMA_IRQHandler+0xcac>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d004      	beq.n	800d58e <HAL_DMA_IRQHandler+0xb12>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a68      	ldr	r2, [pc, #416]	@ (800d72c <HAL_DMA_IRQHandler+0xcb0>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d108      	bne.n	800d5a0 <HAL_DMA_IRQHandler+0xb24>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f022 0208 	bic.w	r2, r2, #8
 800d59c:	601a      	str	r2, [r3, #0]
 800d59e:	e007      	b.n	800d5b0 <HAL_DMA_IRQHandler+0xb34>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f022 0204 	bic.w	r2, r2, #4
 800d5ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 8165 	beq.w	800d884 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d5c2:	e15f      	b.n	800d884 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5c8:	f003 031f 	and.w	r3, r3, #31
 800d5cc:	2202      	movs	r2, #2
 800d5ce:	409a      	lsls	r2, r3
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 80c5 	beq.w	800d764 <HAL_DMA_IRQHandler+0xce8>
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 80bf 	beq.w	800d764 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5ea:	f003 031f 	and.w	r3, r3, #31
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	409a      	lsls	r2, r3
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d018      	beq.n	800d632 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d109      	bne.n	800d61e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f000 813a 	beq.w	800d888 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d61c:	e134      	b.n	800d888 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d622:	2b00      	cmp	r3, #0
 800d624:	f000 8130 	beq.w	800d888 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d630:	e12a      	b.n	800d888 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f040 8089 	bne.w	800d750 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a2b      	ldr	r2, [pc, #172]	@ (800d6f0 <HAL_DMA_IRQHandler+0xc74>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d04a      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a29      	ldr	r2, [pc, #164]	@ (800d6f4 <HAL_DMA_IRQHandler+0xc78>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d045      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a28      	ldr	r2, [pc, #160]	@ (800d6f8 <HAL_DMA_IRQHandler+0xc7c>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d040      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a26      	ldr	r2, [pc, #152]	@ (800d6fc <HAL_DMA_IRQHandler+0xc80>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d03b      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a25      	ldr	r2, [pc, #148]	@ (800d700 <HAL_DMA_IRQHandler+0xc84>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d036      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a23      	ldr	r2, [pc, #140]	@ (800d704 <HAL_DMA_IRQHandler+0xc88>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d031      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a22      	ldr	r2, [pc, #136]	@ (800d708 <HAL_DMA_IRQHandler+0xc8c>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d02c      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a20      	ldr	r2, [pc, #128]	@ (800d70c <HAL_DMA_IRQHandler+0xc90>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d027      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a1f      	ldr	r2, [pc, #124]	@ (800d710 <HAL_DMA_IRQHandler+0xc94>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d022      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a1d      	ldr	r2, [pc, #116]	@ (800d714 <HAL_DMA_IRQHandler+0xc98>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d01d      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a1c      	ldr	r2, [pc, #112]	@ (800d718 <HAL_DMA_IRQHandler+0xc9c>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d018      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800d71c <HAL_DMA_IRQHandler+0xca0>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d013      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a19      	ldr	r2, [pc, #100]	@ (800d720 <HAL_DMA_IRQHandler+0xca4>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d00e      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a17      	ldr	r2, [pc, #92]	@ (800d724 <HAL_DMA_IRQHandler+0xca8>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d009      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a16      	ldr	r2, [pc, #88]	@ (800d728 <HAL_DMA_IRQHandler+0xcac>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d004      	beq.n	800d6de <HAL_DMA_IRQHandler+0xc62>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a14      	ldr	r2, [pc, #80]	@ (800d72c <HAL_DMA_IRQHandler+0xcb0>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d128      	bne.n	800d730 <HAL_DMA_IRQHandler+0xcb4>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f022 0214 	bic.w	r2, r2, #20
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	e027      	b.n	800d740 <HAL_DMA_IRQHandler+0xcc4>
 800d6f0:	40020010 	.word	0x40020010
 800d6f4:	40020028 	.word	0x40020028
 800d6f8:	40020040 	.word	0x40020040
 800d6fc:	40020058 	.word	0x40020058
 800d700:	40020070 	.word	0x40020070
 800d704:	40020088 	.word	0x40020088
 800d708:	400200a0 	.word	0x400200a0
 800d70c:	400200b8 	.word	0x400200b8
 800d710:	40020410 	.word	0x40020410
 800d714:	40020428 	.word	0x40020428
 800d718:	40020440 	.word	0x40020440
 800d71c:	40020458 	.word	0x40020458
 800d720:	40020470 	.word	0x40020470
 800d724:	40020488 	.word	0x40020488
 800d728:	400204a0 	.word	0x400204a0
 800d72c:	400204b8 	.word	0x400204b8
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f022 020a 	bic.w	r2, r2, #10
 800d73e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 8097 	beq.w	800d888 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d762:	e091      	b.n	800d888 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d768:	f003 031f 	and.w	r3, r3, #31
 800d76c:	2208      	movs	r2, #8
 800d76e:	409a      	lsls	r2, r3
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	4013      	ands	r3, r2
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 8088 	beq.w	800d88a <HAL_DMA_IRQHandler+0xe0e>
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	f003 0308 	and.w	r3, r3, #8
 800d780:	2b00      	cmp	r3, #0
 800d782:	f000 8082 	beq.w	800d88a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a41      	ldr	r2, [pc, #260]	@ (800d890 <HAL_DMA_IRQHandler+0xe14>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d04a      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a3f      	ldr	r2, [pc, #252]	@ (800d894 <HAL_DMA_IRQHandler+0xe18>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d045      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a3e      	ldr	r2, [pc, #248]	@ (800d898 <HAL_DMA_IRQHandler+0xe1c>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d040      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a3c      	ldr	r2, [pc, #240]	@ (800d89c <HAL_DMA_IRQHandler+0xe20>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d03b      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a3b      	ldr	r2, [pc, #236]	@ (800d8a0 <HAL_DMA_IRQHandler+0xe24>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d036      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a39      	ldr	r2, [pc, #228]	@ (800d8a4 <HAL_DMA_IRQHandler+0xe28>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d031      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a38      	ldr	r2, [pc, #224]	@ (800d8a8 <HAL_DMA_IRQHandler+0xe2c>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d02c      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a36      	ldr	r2, [pc, #216]	@ (800d8ac <HAL_DMA_IRQHandler+0xe30>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d027      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a35      	ldr	r2, [pc, #212]	@ (800d8b0 <HAL_DMA_IRQHandler+0xe34>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d022      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a33      	ldr	r2, [pc, #204]	@ (800d8b4 <HAL_DMA_IRQHandler+0xe38>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d01d      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a32      	ldr	r2, [pc, #200]	@ (800d8b8 <HAL_DMA_IRQHandler+0xe3c>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d018      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a30      	ldr	r2, [pc, #192]	@ (800d8bc <HAL_DMA_IRQHandler+0xe40>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d013      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a2f      	ldr	r2, [pc, #188]	@ (800d8c0 <HAL_DMA_IRQHandler+0xe44>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d00e      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a2d      	ldr	r2, [pc, #180]	@ (800d8c4 <HAL_DMA_IRQHandler+0xe48>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d009      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a2c      	ldr	r2, [pc, #176]	@ (800d8c8 <HAL_DMA_IRQHandler+0xe4c>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d004      	beq.n	800d826 <HAL_DMA_IRQHandler+0xdaa>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a2a      	ldr	r2, [pc, #168]	@ (800d8cc <HAL_DMA_IRQHandler+0xe50>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d108      	bne.n	800d838 <HAL_DMA_IRQHandler+0xdbc>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f022 021c 	bic.w	r2, r2, #28
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	e007      	b.n	800d848 <HAL_DMA_IRQHandler+0xdcc>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f022 020e 	bic.w	r2, r2, #14
 800d846:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d84c:	f003 031f 	and.w	r3, r3, #31
 800d850:	2201      	movs	r2, #1
 800d852:	409a      	lsls	r2, r3
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d009      	beq.n	800d88a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	4798      	blx	r3
 800d87e:	e004      	b.n	800d88a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d880:	bf00      	nop
 800d882:	e002      	b.n	800d88a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d884:	bf00      	nop
 800d886:	e000      	b.n	800d88a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d888:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d88a:	3728      	adds	r7, #40	@ 0x28
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	40020010 	.word	0x40020010
 800d894:	40020028 	.word	0x40020028
 800d898:	40020040 	.word	0x40020040
 800d89c:	40020058 	.word	0x40020058
 800d8a0:	40020070 	.word	0x40020070
 800d8a4:	40020088 	.word	0x40020088
 800d8a8:	400200a0 	.word	0x400200a0
 800d8ac:	400200b8 	.word	0x400200b8
 800d8b0:	40020410 	.word	0x40020410
 800d8b4:	40020428 	.word	0x40020428
 800d8b8:	40020440 	.word	0x40020440
 800d8bc:	40020458 	.word	0x40020458
 800d8c0:	40020470 	.word	0x40020470
 800d8c4:	40020488 	.word	0x40020488
 800d8c8:	400204a0 	.word	0x400204a0
 800d8cc:	400204b8 	.word	0x400204b8

0800d8d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d8de:	b2db      	uxtb	r3, r3
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d904:	b480      	push	{r7}
 800d906:	b087      	sub	sp, #28
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d916:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d91c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a7f      	ldr	r2, [pc, #508]	@ (800db20 <DMA_SetConfig+0x21c>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d072      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a7d      	ldr	r2, [pc, #500]	@ (800db24 <DMA_SetConfig+0x220>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d06d      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a7c      	ldr	r2, [pc, #496]	@ (800db28 <DMA_SetConfig+0x224>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d068      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a7a      	ldr	r2, [pc, #488]	@ (800db2c <DMA_SetConfig+0x228>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d063      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a79      	ldr	r2, [pc, #484]	@ (800db30 <DMA_SetConfig+0x22c>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d05e      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a77      	ldr	r2, [pc, #476]	@ (800db34 <DMA_SetConfig+0x230>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d059      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a76      	ldr	r2, [pc, #472]	@ (800db38 <DMA_SetConfig+0x234>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d054      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a74      	ldr	r2, [pc, #464]	@ (800db3c <DMA_SetConfig+0x238>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d04f      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a73      	ldr	r2, [pc, #460]	@ (800db40 <DMA_SetConfig+0x23c>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d04a      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a71      	ldr	r2, [pc, #452]	@ (800db44 <DMA_SetConfig+0x240>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d045      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a70      	ldr	r2, [pc, #448]	@ (800db48 <DMA_SetConfig+0x244>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d040      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a6e      	ldr	r2, [pc, #440]	@ (800db4c <DMA_SetConfig+0x248>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d03b      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a6d      	ldr	r2, [pc, #436]	@ (800db50 <DMA_SetConfig+0x24c>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d036      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a6b      	ldr	r2, [pc, #428]	@ (800db54 <DMA_SetConfig+0x250>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d031      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a6a      	ldr	r2, [pc, #424]	@ (800db58 <DMA_SetConfig+0x254>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d02c      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a68      	ldr	r2, [pc, #416]	@ (800db5c <DMA_SetConfig+0x258>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d027      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a67      	ldr	r2, [pc, #412]	@ (800db60 <DMA_SetConfig+0x25c>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d022      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a65      	ldr	r2, [pc, #404]	@ (800db64 <DMA_SetConfig+0x260>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d01d      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a64      	ldr	r2, [pc, #400]	@ (800db68 <DMA_SetConfig+0x264>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d018      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a62      	ldr	r2, [pc, #392]	@ (800db6c <DMA_SetConfig+0x268>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d013      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a61      	ldr	r2, [pc, #388]	@ (800db70 <DMA_SetConfig+0x26c>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d00e      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a5f      	ldr	r2, [pc, #380]	@ (800db74 <DMA_SetConfig+0x270>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d009      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a5e      	ldr	r2, [pc, #376]	@ (800db78 <DMA_SetConfig+0x274>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d004      	beq.n	800da0e <DMA_SetConfig+0x10a>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a5c      	ldr	r2, [pc, #368]	@ (800db7c <DMA_SetConfig+0x278>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d101      	bne.n	800da12 <DMA_SetConfig+0x10e>
 800da0e:	2301      	movs	r3, #1
 800da10:	e000      	b.n	800da14 <DMA_SetConfig+0x110>
 800da12:	2300      	movs	r3, #0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00d      	beq.n	800da34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800da20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d004      	beq.n	800da34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da2e:	68fa      	ldr	r2, [r7, #12]
 800da30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800da32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a39      	ldr	r2, [pc, #228]	@ (800db20 <DMA_SetConfig+0x21c>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d04a      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a38      	ldr	r2, [pc, #224]	@ (800db24 <DMA_SetConfig+0x220>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d045      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a36      	ldr	r2, [pc, #216]	@ (800db28 <DMA_SetConfig+0x224>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d040      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a35      	ldr	r2, [pc, #212]	@ (800db2c <DMA_SetConfig+0x228>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d03b      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a33      	ldr	r2, [pc, #204]	@ (800db30 <DMA_SetConfig+0x22c>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d036      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a32      	ldr	r2, [pc, #200]	@ (800db34 <DMA_SetConfig+0x230>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d031      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a30      	ldr	r2, [pc, #192]	@ (800db38 <DMA_SetConfig+0x234>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d02c      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a2f      	ldr	r2, [pc, #188]	@ (800db3c <DMA_SetConfig+0x238>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d027      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a2d      	ldr	r2, [pc, #180]	@ (800db40 <DMA_SetConfig+0x23c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d022      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a2c      	ldr	r2, [pc, #176]	@ (800db44 <DMA_SetConfig+0x240>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d01d      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a2a      	ldr	r2, [pc, #168]	@ (800db48 <DMA_SetConfig+0x244>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d018      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a29      	ldr	r2, [pc, #164]	@ (800db4c <DMA_SetConfig+0x248>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d013      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a27      	ldr	r2, [pc, #156]	@ (800db50 <DMA_SetConfig+0x24c>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d00e      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a26      	ldr	r2, [pc, #152]	@ (800db54 <DMA_SetConfig+0x250>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d009      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a24      	ldr	r2, [pc, #144]	@ (800db58 <DMA_SetConfig+0x254>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d004      	beq.n	800dad4 <DMA_SetConfig+0x1d0>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a23      	ldr	r2, [pc, #140]	@ (800db5c <DMA_SetConfig+0x258>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d101      	bne.n	800dad8 <DMA_SetConfig+0x1d4>
 800dad4:	2301      	movs	r3, #1
 800dad6:	e000      	b.n	800dada <DMA_SetConfig+0x1d6>
 800dad8:	2300      	movs	r3, #0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d059      	beq.n	800db92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dae2:	f003 031f 	and.w	r3, r3, #31
 800dae6:	223f      	movs	r2, #63	@ 0x3f
 800dae8:	409a      	lsls	r2, r3
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800dafc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	2b40      	cmp	r3, #64	@ 0x40
 800db0c:	d138      	bne.n	800db80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800db1e:	e086      	b.n	800dc2e <DMA_SetConfig+0x32a>
 800db20:	40020010 	.word	0x40020010
 800db24:	40020028 	.word	0x40020028
 800db28:	40020040 	.word	0x40020040
 800db2c:	40020058 	.word	0x40020058
 800db30:	40020070 	.word	0x40020070
 800db34:	40020088 	.word	0x40020088
 800db38:	400200a0 	.word	0x400200a0
 800db3c:	400200b8 	.word	0x400200b8
 800db40:	40020410 	.word	0x40020410
 800db44:	40020428 	.word	0x40020428
 800db48:	40020440 	.word	0x40020440
 800db4c:	40020458 	.word	0x40020458
 800db50:	40020470 	.word	0x40020470
 800db54:	40020488 	.word	0x40020488
 800db58:	400204a0 	.word	0x400204a0
 800db5c:	400204b8 	.word	0x400204b8
 800db60:	58025408 	.word	0x58025408
 800db64:	5802541c 	.word	0x5802541c
 800db68:	58025430 	.word	0x58025430
 800db6c:	58025444 	.word	0x58025444
 800db70:	58025458 	.word	0x58025458
 800db74:	5802546c 	.word	0x5802546c
 800db78:	58025480 	.word	0x58025480
 800db7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	60da      	str	r2, [r3, #12]
}
 800db90:	e04d      	b.n	800dc2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a29      	ldr	r2, [pc, #164]	@ (800dc3c <DMA_SetConfig+0x338>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d022      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a27      	ldr	r2, [pc, #156]	@ (800dc40 <DMA_SetConfig+0x33c>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d01d      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a26      	ldr	r2, [pc, #152]	@ (800dc44 <DMA_SetConfig+0x340>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d018      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a24      	ldr	r2, [pc, #144]	@ (800dc48 <DMA_SetConfig+0x344>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d013      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a23      	ldr	r2, [pc, #140]	@ (800dc4c <DMA_SetConfig+0x348>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d00e      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a21      	ldr	r2, [pc, #132]	@ (800dc50 <DMA_SetConfig+0x34c>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d009      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a20      	ldr	r2, [pc, #128]	@ (800dc54 <DMA_SetConfig+0x350>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d004      	beq.n	800dbe2 <DMA_SetConfig+0x2de>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a1e      	ldr	r2, [pc, #120]	@ (800dc58 <DMA_SetConfig+0x354>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d101      	bne.n	800dbe6 <DMA_SetConfig+0x2e2>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <DMA_SetConfig+0x2e4>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d020      	beq.n	800dc2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbf0:	f003 031f 	and.w	r3, r3, #31
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	409a      	lsls	r2, r3
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	2b40      	cmp	r3, #64	@ 0x40
 800dc0a:	d108      	bne.n	800dc1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	60da      	str	r2, [r3, #12]
}
 800dc1c:	e007      	b.n	800dc2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	60da      	str	r2, [r3, #12]
}
 800dc2e:	bf00      	nop
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	58025408 	.word	0x58025408
 800dc40:	5802541c 	.word	0x5802541c
 800dc44:	58025430 	.word	0x58025430
 800dc48:	58025444 	.word	0x58025444
 800dc4c:	58025458 	.word	0x58025458
 800dc50:	5802546c 	.word	0x5802546c
 800dc54:	58025480 	.word	0x58025480
 800dc58:	58025494 	.word	0x58025494

0800dc5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a42      	ldr	r2, [pc, #264]	@ (800dd74 <DMA_CalcBaseAndBitshift+0x118>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d04a      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a41      	ldr	r2, [pc, #260]	@ (800dd78 <DMA_CalcBaseAndBitshift+0x11c>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d045      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a3f      	ldr	r2, [pc, #252]	@ (800dd7c <DMA_CalcBaseAndBitshift+0x120>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d040      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a3e      	ldr	r2, [pc, #248]	@ (800dd80 <DMA_CalcBaseAndBitshift+0x124>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d03b      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a3c      	ldr	r2, [pc, #240]	@ (800dd84 <DMA_CalcBaseAndBitshift+0x128>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d036      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a3b      	ldr	r2, [pc, #236]	@ (800dd88 <DMA_CalcBaseAndBitshift+0x12c>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d031      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a39      	ldr	r2, [pc, #228]	@ (800dd8c <DMA_CalcBaseAndBitshift+0x130>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d02c      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a38      	ldr	r2, [pc, #224]	@ (800dd90 <DMA_CalcBaseAndBitshift+0x134>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d027      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a36      	ldr	r2, [pc, #216]	@ (800dd94 <DMA_CalcBaseAndBitshift+0x138>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d022      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a35      	ldr	r2, [pc, #212]	@ (800dd98 <DMA_CalcBaseAndBitshift+0x13c>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d01d      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a33      	ldr	r2, [pc, #204]	@ (800dd9c <DMA_CalcBaseAndBitshift+0x140>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d018      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a32      	ldr	r2, [pc, #200]	@ (800dda0 <DMA_CalcBaseAndBitshift+0x144>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d013      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a30      	ldr	r2, [pc, #192]	@ (800dda4 <DMA_CalcBaseAndBitshift+0x148>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d00e      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a2f      	ldr	r2, [pc, #188]	@ (800dda8 <DMA_CalcBaseAndBitshift+0x14c>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d009      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a2d      	ldr	r2, [pc, #180]	@ (800ddac <DMA_CalcBaseAndBitshift+0x150>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d004      	beq.n	800dd04 <DMA_CalcBaseAndBitshift+0xa8>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a2c      	ldr	r2, [pc, #176]	@ (800ddb0 <DMA_CalcBaseAndBitshift+0x154>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d101      	bne.n	800dd08 <DMA_CalcBaseAndBitshift+0xac>
 800dd04:	2301      	movs	r3, #1
 800dd06:	e000      	b.n	800dd0a <DMA_CalcBaseAndBitshift+0xae>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d024      	beq.n	800dd58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	3b10      	subs	r3, #16
 800dd16:	4a27      	ldr	r2, [pc, #156]	@ (800ddb4 <DMA_CalcBaseAndBitshift+0x158>)
 800dd18:	fba2 2303 	umull	r2, r3, r2, r3
 800dd1c:	091b      	lsrs	r3, r3, #4
 800dd1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f003 0307 	and.w	r3, r3, #7
 800dd26:	4a24      	ldr	r2, [pc, #144]	@ (800ddb8 <DMA_CalcBaseAndBitshift+0x15c>)
 800dd28:	5cd3      	ldrb	r3, [r2, r3]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d908      	bls.n	800dd48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	4b1f      	ldr	r3, [pc, #124]	@ (800ddbc <DMA_CalcBaseAndBitshift+0x160>)
 800dd3e:	4013      	ands	r3, r2
 800dd40:	1d1a      	adds	r2, r3, #4
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	659a      	str	r2, [r3, #88]	@ 0x58
 800dd46:	e00d      	b.n	800dd64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	4b1b      	ldr	r3, [pc, #108]	@ (800ddbc <DMA_CalcBaseAndBitshift+0x160>)
 800dd50:	4013      	ands	r3, r2
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd56:	e005      	b.n	800dd64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr
 800dd74:	40020010 	.word	0x40020010
 800dd78:	40020028 	.word	0x40020028
 800dd7c:	40020040 	.word	0x40020040
 800dd80:	40020058 	.word	0x40020058
 800dd84:	40020070 	.word	0x40020070
 800dd88:	40020088 	.word	0x40020088
 800dd8c:	400200a0 	.word	0x400200a0
 800dd90:	400200b8 	.word	0x400200b8
 800dd94:	40020410 	.word	0x40020410
 800dd98:	40020428 	.word	0x40020428
 800dd9c:	40020440 	.word	0x40020440
 800dda0:	40020458 	.word	0x40020458
 800dda4:	40020470 	.word	0x40020470
 800dda8:	40020488 	.word	0x40020488
 800ddac:	400204a0 	.word	0x400204a0
 800ddb0:	400204b8 	.word	0x400204b8
 800ddb4:	aaaaaaab 	.word	0xaaaaaaab
 800ddb8:	0801e84c 	.word	0x0801e84c
 800ddbc:	fffffc00 	.word	0xfffffc00

0800ddc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d120      	bne.n	800de16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d858      	bhi.n	800de8e <DMA_CheckFifoParam+0xce>
 800dddc:	a201      	add	r2, pc, #4	@ (adr r2, 800dde4 <DMA_CheckFifoParam+0x24>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800de07 	.word	0x0800de07
 800ddec:	0800ddf5 	.word	0x0800ddf5
 800ddf0:	0800de8f 	.word	0x0800de8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d048      	beq.n	800de92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de04:	e045      	b.n	800de92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800de0e:	d142      	bne.n	800de96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de14:	e03f      	b.n	800de96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	699b      	ldr	r3, [r3, #24]
 800de1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de1e:	d123      	bne.n	800de68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de24:	2b03      	cmp	r3, #3
 800de26:	d838      	bhi.n	800de9a <DMA_CheckFifoParam+0xda>
 800de28:	a201      	add	r2, pc, #4	@ (adr r2, 800de30 <DMA_CheckFifoParam+0x70>)
 800de2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2e:	bf00      	nop
 800de30:	0800de41 	.word	0x0800de41
 800de34:	0800de47 	.word	0x0800de47
 800de38:	0800de41 	.word	0x0800de41
 800de3c:	0800de59 	.word	0x0800de59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	73fb      	strb	r3, [r7, #15]
        break;
 800de44:	e030      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d025      	beq.n	800de9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800de52:	2301      	movs	r3, #1
 800de54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de56:	e022      	b.n	800de9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800de60:	d11f      	bne.n	800dea2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de66:	e01c      	b.n	800dea2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d902      	bls.n	800de76 <DMA_CheckFifoParam+0xb6>
 800de70:	2b03      	cmp	r3, #3
 800de72:	d003      	beq.n	800de7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800de74:	e018      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	73fb      	strb	r3, [r7, #15]
        break;
 800de7a:	e015      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00e      	beq.n	800dea6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	73fb      	strb	r3, [r7, #15]
    break;
 800de8c:	e00b      	b.n	800dea6 <DMA_CheckFifoParam+0xe6>
        break;
 800de8e:	bf00      	nop
 800de90:	e00a      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        break;
 800de92:	bf00      	nop
 800de94:	e008      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        break;
 800de96:	bf00      	nop
 800de98:	e006      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        break;
 800de9a:	bf00      	nop
 800de9c:	e004      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        break;
 800de9e:	bf00      	nop
 800dea0:	e002      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
        break;
 800dea2:	bf00      	nop
 800dea4:	e000      	b.n	800dea8 <DMA_CheckFifoParam+0xe8>
    break;
 800dea6:	bf00      	nop
    }
  }

  return status;
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop

0800deb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a38      	ldr	r2, [pc, #224]	@ (800dfac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d022      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a36      	ldr	r2, [pc, #216]	@ (800dfb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d01d      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a35      	ldr	r2, [pc, #212]	@ (800dfb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d018      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a33      	ldr	r2, [pc, #204]	@ (800dfb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d013      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a32      	ldr	r2, [pc, #200]	@ (800dfbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d00e      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a30      	ldr	r2, [pc, #192]	@ (800dfc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d009      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a2f      	ldr	r2, [pc, #188]	@ (800dfc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d004      	beq.n	800df16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a2d      	ldr	r2, [pc, #180]	@ (800dfc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d101      	bne.n	800df1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800df16:	2301      	movs	r3, #1
 800df18:	e000      	b.n	800df1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800df1a:	2300      	movs	r3, #0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d01a      	beq.n	800df56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	3b08      	subs	r3, #8
 800df28:	4a28      	ldr	r2, [pc, #160]	@ (800dfcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800df2a:	fba2 2303 	umull	r2, r3, r2, r3
 800df2e:	091b      	lsrs	r3, r3, #4
 800df30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	4b26      	ldr	r3, [pc, #152]	@ (800dfd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800df36:	4413      	add	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	461a      	mov	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a24      	ldr	r2, [pc, #144]	@ (800dfd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800df44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f003 031f 	and.w	r3, r3, #31
 800df4c:	2201      	movs	r2, #1
 800df4e:	409a      	lsls	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800df54:	e024      	b.n	800dfa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	3b10      	subs	r3, #16
 800df5e:	4a1e      	ldr	r2, [pc, #120]	@ (800dfd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800df60:	fba2 2303 	umull	r2, r3, r2, r3
 800df64:	091b      	lsrs	r3, r3, #4
 800df66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	4a1c      	ldr	r2, [pc, #112]	@ (800dfdc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d806      	bhi.n	800df7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	4a1b      	ldr	r2, [pc, #108]	@ (800dfe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d902      	bls.n	800df7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3308      	adds	r3, #8
 800df7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	4b18      	ldr	r3, [pc, #96]	@ (800dfe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800df82:	4413      	add	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	461a      	mov	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a16      	ldr	r2, [pc, #88]	@ (800dfe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800df90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f003 031f 	and.w	r3, r3, #31
 800df98:	2201      	movs	r2, #1
 800df9a:	409a      	lsls	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dfa0:	bf00      	nop
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	58025408 	.word	0x58025408
 800dfb0:	5802541c 	.word	0x5802541c
 800dfb4:	58025430 	.word	0x58025430
 800dfb8:	58025444 	.word	0x58025444
 800dfbc:	58025458 	.word	0x58025458
 800dfc0:	5802546c 	.word	0x5802546c
 800dfc4:	58025480 	.word	0x58025480
 800dfc8:	58025494 	.word	0x58025494
 800dfcc:	cccccccd 	.word	0xcccccccd
 800dfd0:	16009600 	.word	0x16009600
 800dfd4:	58025880 	.word	0x58025880
 800dfd8:	aaaaaaab 	.word	0xaaaaaaab
 800dfdc:	400204b8 	.word	0x400204b8
 800dfe0:	4002040f 	.word	0x4002040f
 800dfe4:	10008200 	.word	0x10008200
 800dfe8:	40020880 	.word	0x40020880

0800dfec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d04a      	beq.n	800e098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b08      	cmp	r3, #8
 800e006:	d847      	bhi.n	800e098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a25      	ldr	r2, [pc, #148]	@ (800e0a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d022      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a24      	ldr	r2, [pc, #144]	@ (800e0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d01d      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a22      	ldr	r2, [pc, #136]	@ (800e0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d018      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a21      	ldr	r2, [pc, #132]	@ (800e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d013      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a1f      	ldr	r2, [pc, #124]	@ (800e0b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d00e      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a1e      	ldr	r2, [pc, #120]	@ (800e0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d009      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a1c      	ldr	r2, [pc, #112]	@ (800e0bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d004      	beq.n	800e058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a1b      	ldr	r2, [pc, #108]	@ (800e0c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d101      	bne.n	800e05c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e058:	2301      	movs	r3, #1
 800e05a:	e000      	b.n	800e05e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e05c:	2300      	movs	r3, #0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00a      	beq.n	800e078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	4b17      	ldr	r3, [pc, #92]	@ (800e0c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	461a      	mov	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a15      	ldr	r2, [pc, #84]	@ (800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e074:	671a      	str	r2, [r3, #112]	@ 0x70
 800e076:	e009      	b.n	800e08c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4b14      	ldr	r3, [pc, #80]	@ (800e0cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e07c:	4413      	add	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	461a      	mov	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a11      	ldr	r2, [pc, #68]	@ (800e0d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e08a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	3b01      	subs	r3, #1
 800e090:	2201      	movs	r2, #1
 800e092:	409a      	lsls	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e098:	bf00      	nop
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	58025408 	.word	0x58025408
 800e0a8:	5802541c 	.word	0x5802541c
 800e0ac:	58025430 	.word	0x58025430
 800e0b0:	58025444 	.word	0x58025444
 800e0b4:	58025458 	.word	0x58025458
 800e0b8:	5802546c 	.word	0x5802546c
 800e0bc:	58025480 	.word	0x58025480
 800e0c0:	58025494 	.word	0x58025494
 800e0c4:	1600963f 	.word	0x1600963f
 800e0c8:	58025940 	.word	0x58025940
 800e0cc:	1000823f 	.word	0x1000823f
 800e0d0:	40020940 	.word	0x40020940

0800e0d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b089      	sub	sp, #36	@ 0x24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e0e2:	4b86      	ldr	r3, [pc, #536]	@ (800e2fc <HAL_GPIO_Init+0x228>)
 800e0e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e0e6:	e18c      	b.n	800e402 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 817e 	beq.w	800e3fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	f003 0303 	and.w	r3, r3, #3
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d005      	beq.n	800e118 <HAL_GPIO_Init+0x44>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	f003 0303 	and.w	r3, r3, #3
 800e114:	2b02      	cmp	r3, #2
 800e116:	d130      	bne.n	800e17a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	2203      	movs	r2, #3
 800e124:	fa02 f303 	lsl.w	r3, r2, r3
 800e128:	43db      	mvns	r3, r3
 800e12a:	69ba      	ldr	r2, [r7, #24]
 800e12c:	4013      	ands	r3, r2
 800e12e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	68da      	ldr	r2, [r3, #12]
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	fa02 f303 	lsl.w	r3, r2, r3
 800e13c:	69ba      	ldr	r2, [r7, #24]
 800e13e:	4313      	orrs	r3, r2
 800e140:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	69ba      	ldr	r2, [r7, #24]
 800e146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e14e:	2201      	movs	r2, #1
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	fa02 f303 	lsl.w	r3, r2, r3
 800e156:	43db      	mvns	r3, r3
 800e158:	69ba      	ldr	r2, [r7, #24]
 800e15a:	4013      	ands	r3, r2
 800e15c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	091b      	lsrs	r3, r3, #4
 800e164:	f003 0201 	and.w	r2, r3, #1
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	fa02 f303 	lsl.w	r3, r2, r3
 800e16e:	69ba      	ldr	r2, [r7, #24]
 800e170:	4313      	orrs	r3, r2
 800e172:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	69ba      	ldr	r2, [r7, #24]
 800e178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f003 0303 	and.w	r3, r3, #3
 800e182:	2b03      	cmp	r3, #3
 800e184:	d017      	beq.n	800e1b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	2203      	movs	r2, #3
 800e192:	fa02 f303 	lsl.w	r3, r2, r3
 800e196:	43db      	mvns	r3, r3
 800e198:	69ba      	ldr	r2, [r7, #24]
 800e19a:	4013      	ands	r3, r2
 800e19c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	689a      	ldr	r2, [r3, #8]
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800e1aa:	69ba      	ldr	r2, [r7, #24]
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	69ba      	ldr	r2, [r7, #24]
 800e1b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d123      	bne.n	800e20a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	08da      	lsrs	r2, r3, #3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	3208      	adds	r2, #8
 800e1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	f003 0307 	and.w	r3, r3, #7
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	220f      	movs	r2, #15
 800e1da:	fa02 f303 	lsl.w	r3, r2, r3
 800e1de:	43db      	mvns	r3, r3
 800e1e0:	69ba      	ldr	r2, [r7, #24]
 800e1e2:	4013      	ands	r3, r2
 800e1e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	691a      	ldr	r2, [r3, #16]
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	f003 0307 	and.w	r3, r3, #7
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1f6:	69ba      	ldr	r2, [r7, #24]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	08da      	lsrs	r2, r3, #3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3208      	adds	r2, #8
 800e204:	69b9      	ldr	r1, [r7, #24]
 800e206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	2203      	movs	r2, #3
 800e216:	fa02 f303 	lsl.w	r3, r2, r3
 800e21a:	43db      	mvns	r3, r3
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	4013      	ands	r3, r2
 800e220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	f003 0203 	and.w	r2, r3, #3
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	fa02 f303 	lsl.w	r3, r2, r3
 800e232:	69ba      	ldr	r2, [r7, #24]
 800e234:	4313      	orrs	r3, r2
 800e236:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	69ba      	ldr	r2, [r7, #24]
 800e23c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 80d8 	beq.w	800e3fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e24c:	4b2c      	ldr	r3, [pc, #176]	@ (800e300 <HAL_GPIO_Init+0x22c>)
 800e24e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e252:	4a2b      	ldr	r2, [pc, #172]	@ (800e300 <HAL_GPIO_Init+0x22c>)
 800e254:	f043 0302 	orr.w	r3, r3, #2
 800e258:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e25c:	4b28      	ldr	r3, [pc, #160]	@ (800e300 <HAL_GPIO_Init+0x22c>)
 800e25e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e262:	f003 0302 	and.w	r3, r3, #2
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e26a:	4a26      	ldr	r2, [pc, #152]	@ (800e304 <HAL_GPIO_Init+0x230>)
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	089b      	lsrs	r3, r3, #2
 800e270:	3302      	adds	r3, #2
 800e272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	f003 0303 	and.w	r3, r3, #3
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	220f      	movs	r2, #15
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	43db      	mvns	r3, r3
 800e288:	69ba      	ldr	r2, [r7, #24]
 800e28a:	4013      	ands	r3, r2
 800e28c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4a1d      	ldr	r2, [pc, #116]	@ (800e308 <HAL_GPIO_Init+0x234>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d04a      	beq.n	800e32c <HAL_GPIO_Init+0x258>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4a1c      	ldr	r2, [pc, #112]	@ (800e30c <HAL_GPIO_Init+0x238>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d02b      	beq.n	800e2f6 <HAL_GPIO_Init+0x222>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4a1b      	ldr	r2, [pc, #108]	@ (800e310 <HAL_GPIO_Init+0x23c>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d025      	beq.n	800e2f2 <HAL_GPIO_Init+0x21e>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4a1a      	ldr	r2, [pc, #104]	@ (800e314 <HAL_GPIO_Init+0x240>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d01f      	beq.n	800e2ee <HAL_GPIO_Init+0x21a>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4a19      	ldr	r2, [pc, #100]	@ (800e318 <HAL_GPIO_Init+0x244>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d019      	beq.n	800e2ea <HAL_GPIO_Init+0x216>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a18      	ldr	r2, [pc, #96]	@ (800e31c <HAL_GPIO_Init+0x248>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d013      	beq.n	800e2e6 <HAL_GPIO_Init+0x212>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a17      	ldr	r2, [pc, #92]	@ (800e320 <HAL_GPIO_Init+0x24c>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d00d      	beq.n	800e2e2 <HAL_GPIO_Init+0x20e>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4a16      	ldr	r2, [pc, #88]	@ (800e324 <HAL_GPIO_Init+0x250>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d007      	beq.n	800e2de <HAL_GPIO_Init+0x20a>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4a15      	ldr	r2, [pc, #84]	@ (800e328 <HAL_GPIO_Init+0x254>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d101      	bne.n	800e2da <HAL_GPIO_Init+0x206>
 800e2d6:	2309      	movs	r3, #9
 800e2d8:	e029      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2da:	230a      	movs	r3, #10
 800e2dc:	e027      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2de:	2307      	movs	r3, #7
 800e2e0:	e025      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2e2:	2306      	movs	r3, #6
 800e2e4:	e023      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2e6:	2305      	movs	r3, #5
 800e2e8:	e021      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2ea:	2304      	movs	r3, #4
 800e2ec:	e01f      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e01d      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	e01b      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e019      	b.n	800e32e <HAL_GPIO_Init+0x25a>
 800e2fa:	bf00      	nop
 800e2fc:	58000080 	.word	0x58000080
 800e300:	58024400 	.word	0x58024400
 800e304:	58000400 	.word	0x58000400
 800e308:	58020000 	.word	0x58020000
 800e30c:	58020400 	.word	0x58020400
 800e310:	58020800 	.word	0x58020800
 800e314:	58020c00 	.word	0x58020c00
 800e318:	58021000 	.word	0x58021000
 800e31c:	58021400 	.word	0x58021400
 800e320:	58021800 	.word	0x58021800
 800e324:	58021c00 	.word	0x58021c00
 800e328:	58022400 	.word	0x58022400
 800e32c:	2300      	movs	r3, #0
 800e32e:	69fa      	ldr	r2, [r7, #28]
 800e330:	f002 0203 	and.w	r2, r2, #3
 800e334:	0092      	lsls	r2, r2, #2
 800e336:	4093      	lsls	r3, r2
 800e338:	69ba      	ldr	r2, [r7, #24]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e33e:	4938      	ldr	r1, [pc, #224]	@ (800e420 <HAL_GPIO_Init+0x34c>)
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	089b      	lsrs	r3, r3, #2
 800e344:	3302      	adds	r3, #2
 800e346:	69ba      	ldr	r2, [r7, #24]
 800e348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e34c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	43db      	mvns	r3, r3
 800e358:	69ba      	ldr	r2, [r7, #24]
 800e35a:	4013      	ands	r3, r2
 800e35c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e36a:	69ba      	ldr	r2, [r7, #24]
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	4313      	orrs	r3, r2
 800e370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e37a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	43db      	mvns	r3, r3
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	4013      	ands	r3, r2
 800e38a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e394:	2b00      	cmp	r3, #0
 800e396:	d003      	beq.n	800e3a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e398:	69ba      	ldr	r2, [r7, #24]
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	4313      	orrs	r3, r2
 800e39e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e3a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	43db      	mvns	r3, r3
 800e3b2:	69ba      	ldr	r2, [r7, #24]
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	43db      	mvns	r3, r3
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	69ba      	ldr	r2, [r7, #24]
 800e3fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	3301      	adds	r3, #1
 800e400:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	fa22 f303 	lsr.w	r3, r2, r3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f47f ae6b 	bne.w	800e0e8 <HAL_GPIO_Init+0x14>
  }
}
 800e412:	bf00      	nop
 800e414:	bf00      	nop
 800e416:	3724      	adds	r7, #36	@ 0x24
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	58000400 	.word	0x58000400

0800e424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	887b      	ldrh	r3, [r7, #2]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d002      	beq.n	800e442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e43c:	2301      	movs	r3, #1
 800e43e:	73fb      	strb	r3, [r7, #15]
 800e440:	e001      	b.n	800e446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e446:	7bfb      	ldrb	r3, [r7, #15]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
 800e460:	4613      	mov	r3, r2
 800e462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e464:	787b      	ldrb	r3, [r7, #1]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d003      	beq.n	800e472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e46a:	887a      	ldrh	r2, [r7, #2]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e470:	e003      	b.n	800e47a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e472:	887b      	ldrh	r3, [r7, #2]
 800e474:	041a      	lsls	r2, r3, #16
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	619a      	str	r2, [r3, #24]
}
 800e47a:	bf00      	nop
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	4603      	mov	r3, r0
 800e48e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e494:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e498:	88fb      	ldrh	r3, [r7, #6]
 800e49a:	4013      	ands	r3, r2
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d008      	beq.n	800e4b2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e4a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4a4:	88fb      	ldrh	r3, [r7, #6]
 800e4a6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e4aa:	88fb      	ldrh	r3, [r7, #6]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f7 fd67 	bl	8005f80 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e4b2:	bf00      	nop
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d101      	bne.n	800e4ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e08b      	b.n	800e5e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7f6 fb38 	bl	8004b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2224      	movs	r2, #36	@ 0x24
 800e4ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f022 0201 	bic.w	r2, r2, #1
 800e4fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e50c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	689a      	ldr	r2, [r3, #8]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e51c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d107      	bne.n	800e536 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	689a      	ldr	r2, [r3, #8]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e532:	609a      	str	r2, [r3, #8]
 800e534:	e006      	b.n	800e544 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e542:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d108      	bne.n	800e55e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	685a      	ldr	r2, [r3, #4]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e55a:	605a      	str	r2, [r3, #4]
 800e55c:	e007      	b.n	800e56e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	685a      	ldr	r2, [r3, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e56c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6859      	ldr	r1, [r3, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	4b1d      	ldr	r3, [pc, #116]	@ (800e5f0 <HAL_I2C_Init+0x134>)
 800e57a:	430b      	orrs	r3, r1
 800e57c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68da      	ldr	r2, [r3, #12]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e58c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	691a      	ldr	r2, [r3, #16]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	699b      	ldr	r3, [r3, #24]
 800e59e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	430a      	orrs	r2, r1
 800e5a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	69d9      	ldr	r1, [r3, #28]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a1a      	ldr	r2, [r3, #32]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	430a      	orrs	r2, r1
 800e5b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f042 0201 	orr.w	r2, r2, #1
 800e5c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2220      	movs	r2, #32
 800e5d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	02008000 	.word	0x02008000

0800e5f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af02      	add	r7, sp, #8
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	4611      	mov	r1, r2
 800e600:	461a      	mov	r2, r3
 800e602:	4603      	mov	r3, r0
 800e604:	817b      	strh	r3, [r7, #10]
 800e606:	460b      	mov	r3, r1
 800e608:	813b      	strh	r3, [r7, #8]
 800e60a:	4613      	mov	r3, r2
 800e60c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b20      	cmp	r3, #32
 800e618:	f040 80f9 	bne.w	800e80e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <HAL_I2C_Mem_Write+0x34>
 800e622:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	d105      	bne.n	800e634 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e62e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e630:	2301      	movs	r3, #1
 800e632:	e0ed      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d101      	bne.n	800e642 <HAL_I2C_Mem_Write+0x4e>
 800e63e:	2302      	movs	r3, #2
 800e640:	e0e6      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e64a:	f7fa fdbb 	bl	80091c4 <HAL_GetTick>
 800e64e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	2319      	movs	r3, #25
 800e656:	2201      	movs	r2, #1
 800e658:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f002 f818 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e668:	2301      	movs	r3, #1
 800e66a:	e0d1      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2221      	movs	r2, #33	@ 0x21
 800e670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2240      	movs	r2, #64	@ 0x40
 800e678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6a3a      	ldr	r2, [r7, #32]
 800e686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e68c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e694:	88f8      	ldrh	r0, [r7, #6]
 800e696:	893a      	ldrh	r2, [r7, #8]
 800e698:	8979      	ldrh	r1, [r7, #10]
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f001 f965 	bl	800f974 <I2C_RequestMemoryWrite>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d005      	beq.n	800e6bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e0a9      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	2bff      	cmp	r3, #255	@ 0xff
 800e6c4:	d90e      	bls.n	800e6e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	22ff      	movs	r2, #255	@ 0xff
 800e6ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	8979      	ldrh	r1, [r7, #10]
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f002 f99b 	bl	8010a18 <I2C_TransferConfig>
 800e6e2:	e00f      	b.n	800e704 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	8979      	ldrh	r1, [r7, #10]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f002 f98a 	bl	8010a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e704:	697a      	ldr	r2, [r7, #20]
 800e706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f002 f81b 	bl	8010744 <I2C_WaitOnTXISFlagUntilTimeout>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d001      	beq.n	800e718 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	e07b      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71c:	781a      	ldrb	r2, [r3, #0]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e728:	1c5a      	adds	r2, r3, #1
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e732:	b29b      	uxth	r3, r3
 800e734:	3b01      	subs	r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e740:	3b01      	subs	r3, #1
 800e742:	b29a      	uxth	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d034      	beq.n	800e7bc <HAL_I2C_Mem_Write+0x1c8>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e756:	2b00      	cmp	r3, #0
 800e758:	d130      	bne.n	800e7bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e760:	2200      	movs	r2, #0
 800e762:	2180      	movs	r1, #128	@ 0x80
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f001 ff94 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d001      	beq.n	800e774 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e770:	2301      	movs	r3, #1
 800e772:	e04d      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e778:	b29b      	uxth	r3, r3
 800e77a:	2bff      	cmp	r3, #255	@ 0xff
 800e77c:	d90e      	bls.n	800e79c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	22ff      	movs	r2, #255	@ 0xff
 800e782:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	8979      	ldrh	r1, [r7, #10]
 800e78c:	2300      	movs	r3, #0
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f002 f93f 	bl	8010a18 <I2C_TransferConfig>
 800e79a:	e00f      	b.n	800e7bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	8979      	ldrh	r1, [r7, #10]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f002 f92e 	bl	8010a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d19e      	bne.n	800e704 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f002 f801 	bl	80107d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e01a      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6859      	ldr	r1, [r3, #4]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e818 <HAL_I2C_Mem_Write+0x224>)
 800e7ee:	400b      	ands	r3, r1
 800e7f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2220      	movs	r2, #32
 800e7f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e80a:	2300      	movs	r3, #0
 800e80c:	e000      	b.n	800e810 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e80e:	2302      	movs	r3, #2
  }
}
 800e810:	4618      	mov	r0, r3
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	fe00e800 	.word	0xfe00e800

0800e81c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af02      	add	r7, sp, #8
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	4608      	mov	r0, r1
 800e826:	4611      	mov	r1, r2
 800e828:	461a      	mov	r2, r3
 800e82a:	4603      	mov	r3, r0
 800e82c:	817b      	strh	r3, [r7, #10]
 800e82e:	460b      	mov	r3, r1
 800e830:	813b      	strh	r3, [r7, #8]
 800e832:	4613      	mov	r3, r2
 800e834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	2b20      	cmp	r3, #32
 800e840:	f040 80fd 	bne.w	800ea3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e844:	6a3b      	ldr	r3, [r7, #32]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <HAL_I2C_Mem_Read+0x34>
 800e84a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d105      	bne.n	800e85c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e856:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e858:	2301      	movs	r3, #1
 800e85a:	e0f1      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e862:	2b01      	cmp	r3, #1
 800e864:	d101      	bne.n	800e86a <HAL_I2C_Mem_Read+0x4e>
 800e866:	2302      	movs	r3, #2
 800e868:	e0ea      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e872:	f7fa fca7 	bl	80091c4 <HAL_GetTick>
 800e876:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	2319      	movs	r3, #25
 800e87e:	2201      	movs	r2, #1
 800e880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f001 ff04 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d001      	beq.n	800e894 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e890:	2301      	movs	r3, #1
 800e892:	e0d5      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2222      	movs	r2, #34	@ 0x22
 800e898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2240      	movs	r2, #64	@ 0x40
 800e8a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6a3a      	ldr	r2, [r7, #32]
 800e8ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e8b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e8bc:	88f8      	ldrh	r0, [r7, #6]
 800e8be:	893a      	ldrh	r2, [r7, #8]
 800e8c0:	8979      	ldrh	r1, [r7, #10]
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f001 f8a5 	bl	800fa1c <I2C_RequestMemoryRead>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d005      	beq.n	800e8e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e0ad      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	2bff      	cmp	r3, #255	@ 0xff
 800e8ec:	d90e      	bls.n	800e90c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	22ff      	movs	r2, #255	@ 0xff
 800e8f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	8979      	ldrh	r1, [r7, #10]
 800e8fc:	4b52      	ldr	r3, [pc, #328]	@ (800ea48 <HAL_I2C_Mem_Read+0x22c>)
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f002 f887 	bl	8010a18 <I2C_TransferConfig>
 800e90a:	e00f      	b.n	800e92c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e910:	b29a      	uxth	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	8979      	ldrh	r1, [r7, #10]
 800e91e:	4b4a      	ldr	r3, [pc, #296]	@ (800ea48 <HAL_I2C_Mem_Read+0x22c>)
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f002 f876 	bl	8010a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e932:	2200      	movs	r2, #0
 800e934:	2104      	movs	r1, #4
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f001 feab 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e07c      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e962:	3b01      	subs	r3, #1
 800e964:	b29a      	uxth	r2, r3
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e96e:	b29b      	uxth	r3, r3
 800e970:	3b01      	subs	r3, #1
 800e972:	b29a      	uxth	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d034      	beq.n	800e9ec <HAL_I2C_Mem_Read+0x1d0>
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e986:	2b00      	cmp	r3, #0
 800e988:	d130      	bne.n	800e9ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e990:	2200      	movs	r2, #0
 800e992:	2180      	movs	r1, #128	@ 0x80
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f001 fe7c 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e04d      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	2bff      	cmp	r3, #255	@ 0xff
 800e9ac:	d90e      	bls.n	800e9cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	22ff      	movs	r2, #255	@ 0xff
 800e9b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	8979      	ldrh	r1, [r7, #10]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f002 f827 	bl	8010a18 <I2C_TransferConfig>
 800e9ca:	e00f      	b.n	800e9ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	8979      	ldrh	r1, [r7, #10]
 800e9de:	2300      	movs	r3, #0
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f002 f816 	bl	8010a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d19a      	bne.n	800e92c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f001 fee9 	bl	80107d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e01a      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2220      	movs	r2, #32
 800ea10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6859      	ldr	r1, [r3, #4]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea4c <HAL_I2C_Mem_Read+0x230>)
 800ea1e:	400b      	ands	r3, r1
 800ea20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2220      	movs	r2, #32
 800ea26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e000      	b.n	800ea40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ea3e:	2302      	movs	r3, #2
  }
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	80002400 	.word	0x80002400
 800ea4c:	fe00e800 	.word	0xfe00e800

0800ea50 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af02      	add	r7, sp, #8
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	4608      	mov	r0, r1
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	4603      	mov	r3, r0
 800ea60:	817b      	strh	r3, [r7, #10]
 800ea62:	460b      	mov	r3, r1
 800ea64:	813b      	strh	r3, [r7, #8]
 800ea66:	4613      	mov	r3, r2
 800ea68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b20      	cmp	r3, #32
 800ea74:	d16a      	bne.n	800eb4c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <HAL_I2C_Mem_Write_IT+0x32>
 800ea7c:	8bbb      	ldrh	r3, [r7, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d105      	bne.n	800ea8e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea88:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e05f      	b.n	800eb4e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea9c:	d101      	bne.n	800eaa2 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	e055      	b.n	800eb4e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d101      	bne.n	800eab0 <HAL_I2C_Mem_Write_IT+0x60>
 800eaac:	2302      	movs	r3, #2
 800eaae:	e04e      	b.n	800eb4e <HAL_I2C_Mem_Write_IT+0xfe>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2221      	movs	r2, #33	@ 0x21
 800eabc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2240      	movs	r2, #64	@ 0x40
 800eac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2200      	movs	r2, #0
 800eacc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	69ba      	ldr	r2, [r7, #24]
 800ead8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	8bba      	ldrh	r2, [r7, #28]
 800eade:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4a1d      	ldr	r2, [pc, #116]	@ (800eb58 <HAL_I2C_Mem_Write_IT+0x108>)
 800eae4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	4a1c      	ldr	r2, [pc, #112]	@ (800eb5c <HAL_I2C_Mem_Write_IT+0x10c>)
 800eaea:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eaec:	897a      	ldrh	r2, [r7, #10]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eaf2:	88fb      	ldrh	r3, [r7, #6]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d109      	bne.n	800eb0c <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eaf8:	893b      	ldrh	r3, [r7, #8]
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f04f 32ff 	mov.w	r2, #4294967295
 800eb08:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb0a:	e00b      	b.n	800eb24 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eb0c:	893b      	ldrh	r3, [r7, #8]
 800eb0e:	0a1b      	lsrs	r3, r3, #8
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eb1a:	893b      	ldrh	r3, [r7, #8]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	461a      	mov	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800eb24:	88fb      	ldrh	r3, [r7, #6]
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	8979      	ldrh	r1, [r7, #10]
 800eb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800eb60 <HAL_I2C_Mem_Write_IT+0x110>)
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f001 ff70 	bl	8010a18 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eb40:	2101      	movs	r1, #1
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f001 ff9a 	bl	8010a7c <I2C_Enable_IRQ>

    return HAL_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e000      	b.n	800eb4e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800eb4c:	2302      	movs	r3, #2
  }
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	ffff0000 	.word	0xffff0000
 800eb5c:	0800ed61 	.word	0x0800ed61
 800eb60:	80002000 	.word	0x80002000

0800eb64 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	4611      	mov	r1, r2
 800eb70:	461a      	mov	r2, r3
 800eb72:	4603      	mov	r3, r0
 800eb74:	817b      	strh	r3, [r7, #10]
 800eb76:	460b      	mov	r3, r1
 800eb78:	813b      	strh	r3, [r7, #8]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b20      	cmp	r3, #32
 800eb88:	d166      	bne.n	800ec58 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <HAL_I2C_Mem_Read_IT+0x32>
 800eb90:	8bbb      	ldrh	r3, [r7, #28]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d105      	bne.n	800eba2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb9c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e05b      	b.n	800ec5a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ebac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebb0:	d101      	bne.n	800ebb6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ebb2:	2302      	movs	r3, #2
 800ebb4:	e051      	b.n	800ec5a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d101      	bne.n	800ebc4 <HAL_I2C_Mem_Read_IT+0x60>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e04a      	b.n	800ec5a <HAL_I2C_Mem_Read_IT+0xf6>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2222      	movs	r2, #34	@ 0x22
 800ebd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2240      	movs	r2, #64	@ 0x40
 800ebd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	69ba      	ldr	r2, [r7, #24]
 800ebe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	8bba      	ldrh	r2, [r7, #28]
 800ebec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	4a1c      	ldr	r2, [pc, #112]	@ (800ec64 <HAL_I2C_Mem_Read_IT+0x100>)
 800ebf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ec68 <HAL_I2C_Mem_Read_IT+0x104>)
 800ebf8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ebfa:	897a      	ldrh	r2, [r7, #10]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ec00:	88fb      	ldrh	r3, [r7, #6]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d109      	bne.n	800ec1a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ec06:	893b      	ldrh	r3, [r7, #8]
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f04f 32ff 	mov.w	r2, #4294967295
 800ec16:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec18:	e00b      	b.n	800ec32 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ec1a:	893b      	ldrh	r3, [r7, #8]
 800ec1c:	0a1b      	lsrs	r3, r3, #8
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	b2da      	uxtb	r2, r3
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ec28:	893b      	ldrh	r3, [r7, #8]
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ec32:	88fb      	ldrh	r3, [r7, #6]
 800ec34:	b2da      	uxtb	r2, r3
 800ec36:	8979      	ldrh	r1, [r7, #10]
 800ec38:	4b0c      	ldr	r3, [pc, #48]	@ (800ec6c <HAL_I2C_Mem_Read_IT+0x108>)
 800ec3a:	9300      	str	r3, [sp, #0]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	f001 feea 	bl	8010a18 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ec4c:	2101      	movs	r1, #1
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f001 ff14 	bl	8010a7c <I2C_Enable_IRQ>

    return HAL_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	e000      	b.n	800ec5a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800ec58:	2302      	movs	r3, #2
  }
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	ffff0000 	.word	0xffff0000
 800ec68:	0800ed61 	.word	0x0800ed61
 800ec6c:	80002000 	.word	0x80002000

0800ec70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	68f9      	ldr	r1, [r7, #12]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	4798      	blx	r3
  }
}
 800ec9c:	bf00      	nop
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ecd4:	bf00      	nop
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ece8:	bf00      	nop
 800ecea:	370c      	adds	r7, #12
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
 800ed00:	4613      	mov	r3, r2
 800ed02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ed18:	bf00      	nop
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ed40:	bf00      	nop
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af02      	add	r7, sp, #8
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800ed6c:	4b8d      	ldr	r3, [pc, #564]	@ (800efa4 <I2C_Mem_ISR_IT+0x244>)
 800ed6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d101      	bne.n	800ed82 <I2C_Mem_ISR_IT+0x22>
 800ed7e:	2302      	movs	r3, #2
 800ed80:	e10c      	b.n	800ef9c <I2C_Mem_ISR_IT+0x23c>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2201      	movs	r2, #1
 800ed86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	f003 0310 	and.w	r3, r3, #16
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d012      	beq.n	800edba <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00d      	beq.n	800edba <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2210      	movs	r2, #16
 800eda4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edaa:	f043 0204 	orr.w	r2, r3, #4
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f001 fc2b 	bl	801060e <I2C_Flush_TXDR>
 800edb8:	e0dd      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d022      	beq.n	800ee0a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d01d      	beq.n	800ee0a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f023 0304 	bic.w	r3, r3, #4
 800edd4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede0:	b2d2      	uxtb	r2, r2
 800ede2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edf2:	3b01      	subs	r3, #1
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	3b01      	subs	r3, #1
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee08:	e0b5      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	f003 0302 	and.w	r3, r3, #2
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d02c      	beq.n	800ee6e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d027      	beq.n	800ee6e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee26:	d118      	bne.n	800ee5a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2c:	781a      	ldrb	r2, [r3, #0]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee42:	3b01      	subs	r3, #1
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	3b01      	subs	r3, #1
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ee58:	e08d      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ee62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ee6c:	e083      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d03c      	beq.n	800eef2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d037      	beq.n	800eef2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d02c      	beq.n	800eee6 <I2C_Mem_ISR_IT+0x186>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d128      	bne.n	800eee6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	2bff      	cmp	r3, #255	@ 0xff
 800ee9c:	d910      	bls.n	800eec0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	22ff      	movs	r2, #255	@ 0xff
 800eea2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eea8:	b299      	uxth	r1, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f001 fdad 	bl	8010a18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eebe:	e017      	b.n	800eef0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eece:	b299      	uxth	r1, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	2300      	movs	r3, #0
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f001 fd9a 	bl	8010a18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eee4:	e004      	b.n	800eef0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800eee6:	2140      	movs	r1, #64	@ 0x40
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f001 fa79 	bl	80103e0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eeee:	e042      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
 800eef0:	e041      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d03c      	beq.n	800ef76 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d037      	beq.n	800ef76 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ef06:	2101      	movs	r1, #1
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f001 fe3b 	bl	8010b84 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ef0e:	2102      	movs	r1, #2
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f001 fdb3 	bl	8010a7c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b22      	cmp	r3, #34	@ 0x22
 800ef20:	d101      	bne.n	800ef26 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800ef22:	4b21      	ldr	r3, [pc, #132]	@ (800efa8 <I2C_Mem_ISR_IT+0x248>)
 800ef24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	2bff      	cmp	r3, #255	@ 0xff
 800ef2e:	d910      	bls.n	800ef52 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	22ff      	movs	r2, #255	@ 0xff
 800ef34:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef3a:	b299      	uxth	r1, r3
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f001 fd64 	bl	8010a18 <I2C_TransferConfig>
 800ef50:	e011      	b.n	800ef76 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef60:	b299      	uxth	r1, r3
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef66:	b2da      	uxtb	r2, r3
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f001 fd51 	bl	8010a18 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	f003 0320 	and.w	r3, r3, #32
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d008      	beq.n	800ef92 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d003      	beq.n	800ef92 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800ef8a:	6939      	ldr	r1, [r7, #16]
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 feb7 	bl	800fd00 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3718      	adds	r7, #24
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	80002000 	.word	0x80002000
 800efa8:	80002400 	.word	0x80002400

0800efac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d101      	bne.n	800efd0 <I2C_Slave_ISR_IT+0x24>
 800efcc:	2302      	movs	r3, #2
 800efce:	e0e2      	b.n	800f196 <I2C_Slave_ISR_IT+0x1ea>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	f003 0320 	and.w	r3, r3, #32
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d009      	beq.n	800eff6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d004      	beq.n	800eff6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800efec:	6939      	ldr	r1, [r7, #16]
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f000 ff4e 	bl	800fe90 <I2C_ITSlaveCplt>
 800eff4:	e0ca      	b.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f003 0310 	and.w	r3, r3, #16
 800effc:	2b00      	cmp	r3, #0
 800effe:	d04b      	beq.n	800f098 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f006:	2b00      	cmp	r3, #0
 800f008:	d046      	beq.n	800f098 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f00e:	b29b      	uxth	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	d128      	bne.n	800f066 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b28      	cmp	r3, #40	@ 0x28
 800f01e:	d108      	bne.n	800f032 <I2C_Slave_ISR_IT+0x86>
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f026:	d104      	bne.n	800f032 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f028:	6939      	ldr	r1, [r7, #16]
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f001 f984 	bl	8010338 <I2C_ITListenCplt>
 800f030:	e031      	b.n	800f096 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b29      	cmp	r3, #41	@ 0x29
 800f03c:	d10e      	bne.n	800f05c <I2C_Slave_ISR_IT+0xb0>
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f044:	d00a      	beq.n	800f05c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2210      	movs	r2, #16
 800f04c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f001 fadd 	bl	801060e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f000 fdf6 	bl	800fc46 <I2C_ITSlaveSeqCplt>
 800f05a:	e01c      	b.n	800f096 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2210      	movs	r2, #16
 800f062:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f064:	e08f      	b.n	800f186 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2210      	movs	r2, #16
 800f06c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f072:	f043 0204 	orr.w	r2, r3, #4
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d003      	beq.n	800f088 <I2C_Slave_ISR_IT+0xdc>
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f086:	d17e      	bne.n	800f186 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f08c:	4619      	mov	r1, r3
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f001 f9a6 	bl	80103e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f094:	e077      	b.n	800f186 <I2C_Slave_ISR_IT+0x1da>
 800f096:	e076      	b.n	800f186 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	f003 0304 	and.w	r3, r3, #4
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d02f      	beq.n	800f102 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d02a      	beq.n	800f102 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d018      	beq.n	800f0e8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c0:	b2d2      	uxtb	r2, r2
 800f0c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c8:	1c5a      	adds	r2, r3, #1
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d14b      	bne.n	800f18a <I2C_Slave_ISR_IT+0x1de>
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f0f8:	d047      	beq.n	800f18a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f000 fda3 	bl	800fc46 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f100:	e043      	b.n	800f18a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	f003 0308 	and.w	r3, r3, #8
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d009      	beq.n	800f120 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f112:	2b00      	cmp	r3, #0
 800f114:	d004      	beq.n	800f120 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f116:	6939      	ldr	r1, [r7, #16]
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f000 fcd3 	bl	800fac4 <I2C_ITAddrCplt>
 800f11e:	e035      	b.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	f003 0302 	and.w	r3, r3, #2
 800f126:	2b00      	cmp	r3, #0
 800f128:	d030      	beq.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f130:	2b00      	cmp	r3, #0
 800f132:	d02b      	beq.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f138:	b29b      	uxth	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d018      	beq.n	800f170 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f142:	781a      	ldrb	r2, [r3, #0]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f158:	b29b      	uxth	r3, r3
 800f15a:	3b01      	subs	r3, #1
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f166:	3b01      	subs	r3, #1
 800f168:	b29a      	uxth	r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f16e:	e00d      	b.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f176:	d002      	beq.n	800f17e <I2C_Slave_ISR_IT+0x1d2>
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d106      	bne.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f000 fd61 	bl	800fc46 <I2C_ITSlaveSeqCplt>
 800f184:	e002      	b.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f186:	bf00      	nop
 800f188:	e000      	b.n	800f18c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f18a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2200      	movs	r2, #0
 800f190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3718      	adds	r7, #24
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b088      	sub	sp, #32
 800f1a2:	af02      	add	r7, sp, #8
 800f1a4:	60f8      	str	r0, [r7, #12]
 800f1a6:	60b9      	str	r1, [r7, #8]
 800f1a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d101      	bne.n	800f1b8 <I2C_Master_ISR_DMA+0x1a>
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	e0d9      	b.n	800f36c <I2C_Master_ISR_DMA+0x1ce>
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	f003 0310 	and.w	r3, r3, #16
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d016      	beq.n	800f1f8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d011      	beq.n	800f1f8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2210      	movs	r2, #16
 800f1da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1e0:	f043 0204 	orr.w	r2, r3, #4
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f1e8:	2120      	movs	r1, #32
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f001 fc46 	bl	8010a7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f001 fa0c 	bl	801060e <I2C_Flush_TXDR>
 800f1f6:	e0b4      	b.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d071      	beq.n	800f2e6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d06c      	beq.n	800f2e6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f21a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f220:	b29b      	uxth	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d04e      	beq.n	800f2c4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f232:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f238:	b29b      	uxth	r3, r3
 800f23a:	2bff      	cmp	r3, #255	@ 0xff
 800f23c:	d906      	bls.n	800f24c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	22ff      	movs	r2, #255	@ 0xff
 800f242:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f248:	617b      	str	r3, [r7, #20]
 800f24a:	e010      	b.n	800f26e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f250:	b29a      	uxth	r2, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f25a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f25e:	d003      	beq.n	800f268 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f264:	617b      	str	r3, [r7, #20]
 800f266:	e002      	b.n	800f26e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f26c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f272:	b2da      	uxtb	r2, r3
 800f274:	8a79      	ldrh	r1, [r7, #18]
 800f276:	2300      	movs	r3, #0
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f001 fbcb 	bl	8010a18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f286:	b29a      	uxth	r2, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	b29a      	uxth	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b22      	cmp	r3, #34	@ 0x22
 800f29e:	d108      	bne.n	800f2b2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f2ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f2b0:	e057      	b.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f2c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f2c2:	e04e      	b.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f2ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f2d2:	d003      	beq.n	800f2dc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f000 fc79 	bl	800fbcc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f2da:	e042      	b.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f2dc:	2140      	movs	r1, #64	@ 0x40
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f001 f87e 	bl	80103e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f2e4:	e03d      	b.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d028      	beq.n	800f342 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d023      	beq.n	800f342 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d119      	bne.n	800f338 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f30e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f312:	d025      	beq.n	800f360 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f318:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f31c:	d108      	bne.n	800f330 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f32c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f32e:	e017      	b.n	800f360 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f000 fc4b 	bl	800fbcc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f336:	e013      	b.n	800f360 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f338:	2140      	movs	r1, #64	@ 0x40
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f001 f850 	bl	80103e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f340:	e00e      	b.n	800f360 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	f003 0320 	and.w	r3, r3, #32
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00a      	beq.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f352:	2b00      	cmp	r3, #0
 800f354:	d005      	beq.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f356:	68b9      	ldr	r1, [r7, #8]
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f000 fcd1 	bl	800fd00 <I2C_ITMasterCplt>
 800f35e:	e000      	b.n	800f362 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f360:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b088      	sub	sp, #32
 800f378:	af02      	add	r7, sp, #8
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f380:	4b8d      	ldr	r3, [pc, #564]	@ (800f5b8 <I2C_Mem_ISR_DMA+0x244>)
 800f382:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d101      	bne.n	800f392 <I2C_Mem_ISR_DMA+0x1e>
 800f38e:	2302      	movs	r3, #2
 800f390:	e10e      	b.n	800f5b0 <I2C_Mem_ISR_DMA+0x23c>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	f003 0310 	and.w	r3, r3, #16
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d016      	beq.n	800f3d2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d011      	beq.n	800f3d2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2210      	movs	r2, #16
 800f3b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3ba:	f043 0204 	orr.w	r2, r3, #4
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f3c2:	2120      	movs	r1, #32
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f001 fb59 	bl	8010a7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f001 f91f 	bl	801060e <I2C_Flush_TXDR>
 800f3d0:	e0e9      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	f003 0302 	and.w	r3, r3, #2
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00e      	beq.n	800f3fa <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d009      	beq.n	800f3fa <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f3ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f3f6:	651a      	str	r2, [r3, #80]	@ 0x50
 800f3f8:	e0d5      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f400:	2b00      	cmp	r3, #0
 800f402:	d05f      	beq.n	800f4c4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d05a      	beq.n	800f4c4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f40e:	2101      	movs	r1, #1
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f001 fbb7 	bl	8010b84 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f416:	2110      	movs	r1, #16
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f001 fb2f 	bl	8010a7c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f422:	b29b      	uxth	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	d048      	beq.n	800f4ba <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	2bff      	cmp	r3, #255	@ 0xff
 800f430:	d910      	bls.n	800f454 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	22ff      	movs	r2, #255	@ 0xff
 800f436:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f43c:	b299      	uxth	r1, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f442:	b2da      	uxtb	r2, r3
 800f444:	2300      	movs	r3, #0
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f001 fae3 	bl	8010a18 <I2C_TransferConfig>
 800f452:	e011      	b.n	800f478 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f458:	b29a      	uxth	r2, r3
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f462:	b299      	uxth	r1, r3
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	2300      	movs	r3, #0
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f001 fad0 	bl	8010a18 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	b29a      	uxth	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b22      	cmp	r3, #34	@ 0x22
 800f494:	d108      	bne.n	800f4a8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f4a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f4a6:	e07e      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f4b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f4b8:	e075      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f4ba:	2140      	movs	r1, #64	@ 0x40
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 ff8f 	bl	80103e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f4c2:	e070      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d05d      	beq.n	800f58a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d058      	beq.n	800f58a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f4d8:	2101      	movs	r1, #1
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f001 fb52 	bl	8010b84 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f4e0:	2110      	movs	r1, #16
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f001 faca 	bl	8010a7c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	2b22      	cmp	r3, #34	@ 0x22
 800f4f2:	d101      	bne.n	800f4f8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f4f4:	4b31      	ldr	r3, [pc, #196]	@ (800f5bc <I2C_Mem_ISR_DMA+0x248>)
 800f4f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	2bff      	cmp	r3, #255	@ 0xff
 800f500:	d910      	bls.n	800f524 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	22ff      	movs	r2, #255	@ 0xff
 800f506:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f50c:	b299      	uxth	r1, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f512:	b2da      	uxtb	r2, r3
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f001 fa7b 	bl	8010a18 <I2C_TransferConfig>
 800f522:	e011      	b.n	800f548 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f528:	b29a      	uxth	r2, r3
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f532:	b299      	uxth	r1, r3
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f001 fa68 	bl	8010a18 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	b29a      	uxth	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f560:	b2db      	uxtb	r3, r3
 800f562:	2b22      	cmp	r3, #34	@ 0x22
 800f564:	d108      	bne.n	800f578 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f574:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f576:	e016      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f586:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f588:	e00d      	b.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	f003 0320 	and.w	r3, r3, #32
 800f590:	2b00      	cmp	r3, #0
 800f592:	d008      	beq.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d003      	beq.n	800f5a6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f59e:	68b9      	ldr	r1, [r7, #8]
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f000 fbad 	bl	800fd00 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3718      	adds	r7, #24
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	80002000 	.word	0x80002000
 800f5bc:	80002400 	.word	0x80002400

0800f5c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d101      	bne.n	800f5e4 <I2C_Slave_ISR_DMA+0x24>
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	e1c2      	b.n	800f96a <I2C_Slave_ISR_DMA+0x3aa>
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f003 0320 	and.w	r3, r3, #32
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d009      	beq.n	800f60a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d004      	beq.n	800f60a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f000 fc44 	bl	800fe90 <I2C_ITSlaveCplt>
 800f608:	e1aa      	b.n	800f960 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	f003 0310 	and.w	r3, r3, #16
 800f610:	2b00      	cmp	r3, #0
 800f612:	f000 8197 	beq.w	800f944 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f000 8191 	beq.w	800f944 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d105      	bne.n	800f638 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f632:	2b00      	cmp	r3, #0
 800f634:	f000 817f 	beq.w	800f936 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d07b      	beq.n	800f738 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f646:	2b00      	cmp	r3, #0
 800f648:	d076      	beq.n	800f738 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a74      	ldr	r2, [pc, #464]	@ (800f824 <I2C_Slave_ISR_DMA+0x264>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d059      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a72      	ldr	r2, [pc, #456]	@ (800f828 <I2C_Slave_ISR_DMA+0x268>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d053      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a70      	ldr	r2, [pc, #448]	@ (800f82c <I2C_Slave_ISR_DMA+0x26c>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d04d      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a6e      	ldr	r2, [pc, #440]	@ (800f830 <I2C_Slave_ISR_DMA+0x270>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d047      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a6c      	ldr	r2, [pc, #432]	@ (800f834 <I2C_Slave_ISR_DMA+0x274>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d041      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a6a      	ldr	r2, [pc, #424]	@ (800f838 <I2C_Slave_ISR_DMA+0x278>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d03b      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a68      	ldr	r2, [pc, #416]	@ (800f83c <I2C_Slave_ISR_DMA+0x27c>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d035      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a66      	ldr	r2, [pc, #408]	@ (800f840 <I2C_Slave_ISR_DMA+0x280>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d02f      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a64      	ldr	r2, [pc, #400]	@ (800f844 <I2C_Slave_ISR_DMA+0x284>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d029      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a62      	ldr	r2, [pc, #392]	@ (800f848 <I2C_Slave_ISR_DMA+0x288>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d023      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a60      	ldr	r2, [pc, #384]	@ (800f84c <I2C_Slave_ISR_DMA+0x28c>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d01d      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a5e      	ldr	r2, [pc, #376]	@ (800f850 <I2C_Slave_ISR_DMA+0x290>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d017      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a5c      	ldr	r2, [pc, #368]	@ (800f854 <I2C_Slave_ISR_DMA+0x294>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d011      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a5a      	ldr	r2, [pc, #360]	@ (800f858 <I2C_Slave_ISR_DMA+0x298>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d00b      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a58      	ldr	r2, [pc, #352]	@ (800f85c <I2C_Slave_ISR_DMA+0x29c>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d005      	beq.n	800f70a <I2C_Slave_ISR_DMA+0x14a>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a56      	ldr	r2, [pc, #344]	@ (800f860 <I2C_Slave_ISR_DMA+0x2a0>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d109      	bne.n	800f71e <I2C_Slave_ISR_DMA+0x15e>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	bf0c      	ite	eq
 800f716:	2301      	moveq	r3, #1
 800f718:	2300      	movne	r3, #0
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	e008      	b.n	800f730 <I2C_Slave_ISR_DMA+0x170>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	bf0c      	ite	eq
 800f72a:	2301      	moveq	r3, #1
 800f72c:	2300      	movne	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	2b00      	cmp	r3, #0
 800f732:	d001      	beq.n	800f738 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800f734:	2301      	movs	r3, #1
 800f736:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 809e 	beq.w	800f87e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f000 8098 	beq.w	800f87e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a33      	ldr	r2, [pc, #204]	@ (800f824 <I2C_Slave_ISR_DMA+0x264>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d059      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a31      	ldr	r2, [pc, #196]	@ (800f828 <I2C_Slave_ISR_DMA+0x268>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d053      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a2f      	ldr	r2, [pc, #188]	@ (800f82c <I2C_Slave_ISR_DMA+0x26c>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d04d      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	4a2d      	ldr	r2, [pc, #180]	@ (800f830 <I2C_Slave_ISR_DMA+0x270>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d047      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a2b      	ldr	r2, [pc, #172]	@ (800f834 <I2C_Slave_ISR_DMA+0x274>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d041      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a29      	ldr	r2, [pc, #164]	@ (800f838 <I2C_Slave_ISR_DMA+0x278>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d03b      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a27      	ldr	r2, [pc, #156]	@ (800f83c <I2C_Slave_ISR_DMA+0x27c>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d035      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a25      	ldr	r2, [pc, #148]	@ (800f840 <I2C_Slave_ISR_DMA+0x280>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d02f      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a23      	ldr	r2, [pc, #140]	@ (800f844 <I2C_Slave_ISR_DMA+0x284>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d029      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a21      	ldr	r2, [pc, #132]	@ (800f848 <I2C_Slave_ISR_DMA+0x288>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d023      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a1f      	ldr	r2, [pc, #124]	@ (800f84c <I2C_Slave_ISR_DMA+0x28c>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d01d      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f850 <I2C_Slave_ISR_DMA+0x290>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d017      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a1b      	ldr	r2, [pc, #108]	@ (800f854 <I2C_Slave_ISR_DMA+0x294>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d011      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a19      	ldr	r2, [pc, #100]	@ (800f858 <I2C_Slave_ISR_DMA+0x298>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d00b      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a17      	ldr	r2, [pc, #92]	@ (800f85c <I2C_Slave_ISR_DMA+0x29c>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d005      	beq.n	800f80e <I2C_Slave_ISR_DMA+0x24e>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a15      	ldr	r2, [pc, #84]	@ (800f860 <I2C_Slave_ISR_DMA+0x2a0>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d12a      	bne.n	800f864 <I2C_Slave_ISR_DMA+0x2a4>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	bf0c      	ite	eq
 800f81a:	2301      	moveq	r3, #1
 800f81c:	2300      	movne	r3, #0
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	e029      	b.n	800f876 <I2C_Slave_ISR_DMA+0x2b6>
 800f822:	bf00      	nop
 800f824:	40020010 	.word	0x40020010
 800f828:	40020028 	.word	0x40020028
 800f82c:	40020040 	.word	0x40020040
 800f830:	40020058 	.word	0x40020058
 800f834:	40020070 	.word	0x40020070
 800f838:	40020088 	.word	0x40020088
 800f83c:	400200a0 	.word	0x400200a0
 800f840:	400200b8 	.word	0x400200b8
 800f844:	40020410 	.word	0x40020410
 800f848:	40020428 	.word	0x40020428
 800f84c:	40020440 	.word	0x40020440
 800f850:	40020458 	.word	0x40020458
 800f854:	40020470 	.word	0x40020470
 800f858:	40020488 	.word	0x40020488
 800f85c:	400204a0 	.word	0x400204a0
 800f860:	400204b8 	.word	0x400204b8
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	bf0c      	ite	eq
 800f870:	2301      	moveq	r3, #1
 800f872:	2300      	movne	r3, #0
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f87a:	2301      	movs	r3, #1
 800f87c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d128      	bne.n	800f8d6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	2b28      	cmp	r3, #40	@ 0x28
 800f88e:	d108      	bne.n	800f8a2 <I2C_Slave_ISR_DMA+0x2e2>
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f896:	d104      	bne.n	800f8a2 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f000 fd4c 	bl	8010338 <I2C_ITListenCplt>
 800f8a0:	e048      	b.n	800f934 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	2b29      	cmp	r3, #41	@ 0x29
 800f8ac:	d10e      	bne.n	800f8cc <I2C_Slave_ISR_DMA+0x30c>
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f8b4:	d00a      	beq.n	800f8cc <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2210      	movs	r2, #16
 800f8bc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f000 fea5 	bl	801060e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f000 f9be 	bl	800fc46 <I2C_ITSlaveSeqCplt>
 800f8ca:	e033      	b.n	800f934 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2210      	movs	r2, #16
 800f8d2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f8d4:	e034      	b.n	800f940 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2210      	movs	r2, #16
 800f8dc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e2:	f043 0204 	orr.w	r2, r3, #4
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8f0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d003      	beq.n	800f900 <I2C_Slave_ISR_DMA+0x340>
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f8fe:	d11f      	bne.n	800f940 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f900:	7dfb      	ldrb	r3, [r7, #23]
 800f902:	2b21      	cmp	r3, #33	@ 0x21
 800f904:	d002      	beq.n	800f90c <I2C_Slave_ISR_DMA+0x34c>
 800f906:	7dfb      	ldrb	r3, [r7, #23]
 800f908:	2b29      	cmp	r3, #41	@ 0x29
 800f90a:	d103      	bne.n	800f914 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2221      	movs	r2, #33	@ 0x21
 800f910:	631a      	str	r2, [r3, #48]	@ 0x30
 800f912:	e008      	b.n	800f926 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f914:	7dfb      	ldrb	r3, [r7, #23]
 800f916:	2b22      	cmp	r3, #34	@ 0x22
 800f918:	d002      	beq.n	800f920 <I2C_Slave_ISR_DMA+0x360>
 800f91a:	7dfb      	ldrb	r3, [r7, #23]
 800f91c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f91e:	d102      	bne.n	800f926 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2222      	movs	r2, #34	@ 0x22
 800f924:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f92a:	4619      	mov	r1, r3
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f000 fd57 	bl	80103e0 <I2C_ITError>
      if (treatdmanack == 1U)
 800f932:	e005      	b.n	800f940 <I2C_Slave_ISR_DMA+0x380>
 800f934:	e004      	b.n	800f940 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2210      	movs	r2, #16
 800f93c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f93e:	e00f      	b.n	800f960 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f940:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f942:	e00d      	b.n	800f960 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	f003 0308 	and.w	r3, r3, #8
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d008      	beq.n	800f960 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f954:	2b00      	cmp	r3, #0
 800f956:	d003      	beq.n	800f960 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f958:	68b9      	ldr	r1, [r7, #8]
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f000 f8b2 	bl	800fac4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3720      	adds	r7, #32
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop

0800f974 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b086      	sub	sp, #24
 800f978:	af02      	add	r7, sp, #8
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	4608      	mov	r0, r1
 800f97e:	4611      	mov	r1, r2
 800f980:	461a      	mov	r2, r3
 800f982:	4603      	mov	r3, r0
 800f984:	817b      	strh	r3, [r7, #10]
 800f986:	460b      	mov	r3, r1
 800f988:	813b      	strh	r3, [r7, #8]
 800f98a:	4613      	mov	r3, r2
 800f98c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f98e:	88fb      	ldrh	r3, [r7, #6]
 800f990:	b2da      	uxtb	r2, r3
 800f992:	8979      	ldrh	r1, [r7, #10]
 800f994:	4b20      	ldr	r3, [pc, #128]	@ (800fa18 <I2C_RequestMemoryWrite+0xa4>)
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f001 f83b 	bl	8010a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f9a2:	69fa      	ldr	r2, [r7, #28]
 800f9a4:	69b9      	ldr	r1, [r7, #24]
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f000 fecc 	bl	8010744 <I2C_WaitOnTXISFlagUntilTimeout>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d001      	beq.n	800f9b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e02c      	b.n	800fa10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f9b6:	88fb      	ldrh	r3, [r7, #6]
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d105      	bne.n	800f9c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f9bc:	893b      	ldrh	r3, [r7, #8]
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	629a      	str	r2, [r3, #40]	@ 0x28
 800f9c6:	e015      	b.n	800f9f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f9c8:	893b      	ldrh	r3, [r7, #8]
 800f9ca:	0a1b      	lsrs	r3, r3, #8
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f9d6:	69fa      	ldr	r2, [r7, #28]
 800f9d8:	69b9      	ldr	r1, [r7, #24]
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	f000 feb2 	bl	8010744 <I2C_WaitOnTXISFlagUntilTimeout>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d001      	beq.n	800f9ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e012      	b.n	800fa10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f9ea:	893b      	ldrh	r3, [r7, #8]
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	2180      	movs	r1, #128	@ 0x80
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f000 fe47 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e000      	b.n	800fa10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fa0e:	2300      	movs	r3, #0
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	80002000 	.word	0x80002000

0800fa1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b086      	sub	sp, #24
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	4608      	mov	r0, r1
 800fa26:	4611      	mov	r1, r2
 800fa28:	461a      	mov	r2, r3
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	817b      	strh	r3, [r7, #10]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	813b      	strh	r3, [r7, #8]
 800fa32:	4613      	mov	r3, r2
 800fa34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fa36:	88fb      	ldrh	r3, [r7, #6]
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	8979      	ldrh	r1, [r7, #10]
 800fa3c:	4b20      	ldr	r3, [pc, #128]	@ (800fac0 <I2C_RequestMemoryRead+0xa4>)
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2300      	movs	r3, #0
 800fa42:	68f8      	ldr	r0, [r7, #12]
 800fa44:	f000 ffe8 	bl	8010a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa48:	69fa      	ldr	r2, [r7, #28]
 800fa4a:	69b9      	ldr	r1, [r7, #24]
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f000 fe79 	bl	8010744 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e02c      	b.n	800fab6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fa5c:	88fb      	ldrh	r3, [r7, #6]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d105      	bne.n	800fa6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fa62:	893b      	ldrh	r3, [r7, #8]
 800fa64:	b2da      	uxtb	r2, r3
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fa6c:	e015      	b.n	800fa9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fa6e:	893b      	ldrh	r3, [r7, #8]
 800fa70:	0a1b      	lsrs	r3, r3, #8
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa7c:	69fa      	ldr	r2, [r7, #28]
 800fa7e:	69b9      	ldr	r1, [r7, #24]
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 fe5f 	bl	8010744 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d001      	beq.n	800fa90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e012      	b.n	800fab6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fa90:	893b      	ldrh	r3, [r7, #8]
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	2200      	movs	r2, #0
 800faa2:	2140      	movs	r1, #64	@ 0x40
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f000 fdf4 	bl	8010692 <I2C_WaitOnFlagUntilTimeout>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d001      	beq.n	800fab4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fab0:	2301      	movs	r3, #1
 800fab2:	e000      	b.n	800fab6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	80002000 	.word	0x80002000

0800fac4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fada:	2b28      	cmp	r3, #40	@ 0x28
 800fadc:	d16a      	bne.n	800fbb4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	699b      	ldr	r3, [r3, #24]
 800fae4:	0c1b      	lsrs	r3, r3, #16
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	699b      	ldr	r3, [r3, #24]
 800faf4:	0c1b      	lsrs	r3, r3, #16
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fafc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb0a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fb18:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d138      	bne.n	800fb94 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fb22:	897b      	ldrh	r3, [r7, #10]
 800fb24:	09db      	lsrs	r3, r3, #7
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	89bb      	ldrh	r3, [r7, #12]
 800fb2a:	4053      	eors	r3, r2
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	f003 0306 	and.w	r3, r3, #6
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d11c      	bne.n	800fb70 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fb36:	897b      	ldrh	r3, [r7, #10]
 800fb38:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb3e:	1c5a      	adds	r2, r3, #1
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	d13b      	bne.n	800fbc4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2208      	movs	r2, #8
 800fb58:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fb62:	89ba      	ldrh	r2, [r7, #12]
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	4619      	mov	r1, r3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff f8c3 	bl	800ecf4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fb6e:	e029      	b.n	800fbc4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fb70:	893b      	ldrh	r3, [r7, #8]
 800fb72:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fb74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f001 f803 	bl	8010b84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fb86:	89ba      	ldrh	r2, [r7, #12]
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7ff f8b1 	bl	800ecf4 <HAL_I2C_AddrCallback>
}
 800fb92:	e017      	b.n	800fbc4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fb94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fff3 	bl	8010b84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fba6:	89ba      	ldrh	r2, [r7, #12]
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7ff f8a1 	bl	800ecf4 <HAL_I2C_AddrCallback>
}
 800fbb2:	e007      	b.n	800fbc4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2208      	movs	r2, #8
 800fbba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fbc4:	bf00      	nop
 800fbc6:	3710      	adds	r7, #16
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b21      	cmp	r3, #33	@ 0x21
 800fbe6:	d115      	bne.n	800fc14 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2211      	movs	r2, #17
 800fbf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 ffc0 	bl	8010b84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff f849 	bl	800eca4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fc12:	e014      	b.n	800fc3e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2220      	movs	r2, #32
 800fc18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2212      	movs	r2, #18
 800fc20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fc28:	2102      	movs	r1, #2
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 ffaa 	bl	8010b84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff f83d 	bl	800ecb8 <HAL_I2C_MasterRxCpltCallback>
}
 800fc3e:	bf00      	nop
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d008      	beq.n	800fc7a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	e00c      	b.n	800fc94 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d007      	beq.n	800fc94 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fc92:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	2b29      	cmp	r3, #41	@ 0x29
 800fc9e:	d112      	bne.n	800fcc6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2228      	movs	r2, #40	@ 0x28
 800fca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2221      	movs	r2, #33	@ 0x21
 800fcac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fcae:	2101      	movs	r1, #1
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 ff67 	bl	8010b84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f7ff f804 	bl	800eccc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fcc4:	e017      	b.n	800fcf6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcd0:	d111      	bne.n	800fcf6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2228      	movs	r2, #40	@ 0x28
 800fcd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2222      	movs	r2, #34	@ 0x22
 800fcde:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fce0:	2102      	movs	r1, #2
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 ff4e 	bl	8010b84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7fe fff5 	bl	800ece0 <HAL_I2C_SlaveRxCpltCallback>
}
 800fcf6:	bf00      	nop
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
	...

0800fd00 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2220      	movs	r2, #32
 800fd14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	2b21      	cmp	r3, #33	@ 0x21
 800fd20:	d107      	bne.n	800fd32 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd22:	2101      	movs	r1, #1
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 ff2d 	bl	8010b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2211      	movs	r2, #17
 800fd2e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd30:	e00c      	b.n	800fd4c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	2b22      	cmp	r3, #34	@ 0x22
 800fd3c:	d106      	bne.n	800fd4c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fd3e:	2102      	movs	r1, #2
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 ff1f 	bl	8010b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2212      	movs	r2, #18
 800fd4a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6859      	ldr	r1, [r3, #4]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	4b4c      	ldr	r3, [pc, #304]	@ (800fe88 <I2C_ITMasterCplt+0x188>)
 800fd58:	400b      	ands	r3, r1
 800fd5a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4a49      	ldr	r2, [pc, #292]	@ (800fe8c <I2C_ITMasterCplt+0x18c>)
 800fd66:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f003 0310 	and.w	r3, r3, #16
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d009      	beq.n	800fd86 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2210      	movs	r2, #16
 800fd78:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd7e:	f043 0204 	orr.w	r2, r3, #4
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b60      	cmp	r3, #96	@ 0x60
 800fd90:	d10a      	bne.n	800fda8 <I2C_ITMasterCplt+0xa8>
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	f003 0304 	and.w	r3, r3, #4
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d005      	beq.n	800fda8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fda6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 fc30 	bl	801060e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdb2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	2b60      	cmp	r3, #96	@ 0x60
 800fdbe:	d002      	beq.n	800fdc6 <I2C_ITMasterCplt+0xc6>
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d006      	beq.n	800fdd4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fb07 	bl	80103e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fdd2:	e054      	b.n	800fe7e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	2b21      	cmp	r3, #33	@ 0x21
 800fdde:	d124      	bne.n	800fe2a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2220      	movs	r2, #32
 800fde4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b40      	cmp	r3, #64	@ 0x40
 800fdf8:	d10b      	bne.n	800fe12 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2200      	movs	r2, #0
 800fe06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7fe ff8a 	bl	800ed24 <HAL_I2C_MemTxCpltCallback>
}
 800fe10:	e035      	b.n	800fe7e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7fe ff3e 	bl	800eca4 <HAL_I2C_MasterTxCpltCallback>
}
 800fe28:	e029      	b.n	800fe7e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	2b22      	cmp	r3, #34	@ 0x22
 800fe34:	d123      	bne.n	800fe7e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2220      	movs	r2, #32
 800fe3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	2b40      	cmp	r3, #64	@ 0x40
 800fe4e:	d10b      	bne.n	800fe68 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7f6 fa51 	bl	8006308 <HAL_I2C_MemRxCpltCallback>
}
 800fe66:	e00a      	b.n	800fe7e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7fe ff1d 	bl	800ecb8 <HAL_I2C_MasterRxCpltCallback>
}
 800fe7e:	bf00      	nop
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	fe00e800 	.word	0xfe00e800
 800fe8c:	ffff0000 	.word	0xffff0000

0800fe90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feaa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800feb2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	2220      	movs	r2, #32
 800feba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800febc:	7afb      	ldrb	r3, [r7, #11]
 800febe:	2b21      	cmp	r3, #33	@ 0x21
 800fec0:	d002      	beq.n	800fec8 <I2C_ITSlaveCplt+0x38>
 800fec2:	7afb      	ldrb	r3, [r7, #11]
 800fec4:	2b29      	cmp	r3, #41	@ 0x29
 800fec6:	d108      	bne.n	800feda <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800fec8:	f248 0101 	movw	r1, #32769	@ 0x8001
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fe59 	bl	8010b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2221      	movs	r2, #33	@ 0x21
 800fed6:	631a      	str	r2, [r3, #48]	@ 0x30
 800fed8:	e019      	b.n	800ff0e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800feda:	7afb      	ldrb	r3, [r7, #11]
 800fedc:	2b22      	cmp	r3, #34	@ 0x22
 800fede:	d002      	beq.n	800fee6 <I2C_ITSlaveCplt+0x56>
 800fee0:	7afb      	ldrb	r3, [r7, #11]
 800fee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fee4:	d108      	bne.n	800fef8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fee6:	f248 0102 	movw	r1, #32770	@ 0x8002
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 fe4a 	bl	8010b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2222      	movs	r2, #34	@ 0x22
 800fef4:	631a      	str	r2, [r3, #48]	@ 0x30
 800fef6:	e00a      	b.n	800ff0e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800fef8:	7afb      	ldrb	r3, [r7, #11]
 800fefa:	2b28      	cmp	r3, #40	@ 0x28
 800fefc:	d107      	bne.n	800ff0e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800fefe:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fe3e 	bl	8010b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ff1c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6859      	ldr	r1, [r3, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	4b7f      	ldr	r3, [pc, #508]	@ (8010128 <I2C_ITSlaveCplt+0x298>)
 800ff2a:	400b      	ands	r3, r1
 800ff2c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f000 fb6d 	bl	801060e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d07a      	beq.n	8010034 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ff4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	f000 8111 	beq.w	801017a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a73      	ldr	r2, [pc, #460]	@ (801012c <I2C_ITSlaveCplt+0x29c>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d059      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a71      	ldr	r2, [pc, #452]	@ (8010130 <I2C_ITSlaveCplt+0x2a0>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d053      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a6f      	ldr	r2, [pc, #444]	@ (8010134 <I2C_ITSlaveCplt+0x2a4>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d04d      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4a6d      	ldr	r2, [pc, #436]	@ (8010138 <I2C_ITSlaveCplt+0x2a8>)
 800ff84:	4293      	cmp	r3, r2
 800ff86:	d047      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4a6b      	ldr	r2, [pc, #428]	@ (801013c <I2C_ITSlaveCplt+0x2ac>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d041      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4a69      	ldr	r2, [pc, #420]	@ (8010140 <I2C_ITSlaveCplt+0x2b0>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d03b      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a67      	ldr	r2, [pc, #412]	@ (8010144 <I2C_ITSlaveCplt+0x2b4>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d035      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a65      	ldr	r2, [pc, #404]	@ (8010148 <I2C_ITSlaveCplt+0x2b8>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d02f      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a63      	ldr	r2, [pc, #396]	@ (801014c <I2C_ITSlaveCplt+0x2bc>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d029      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a61      	ldr	r2, [pc, #388]	@ (8010150 <I2C_ITSlaveCplt+0x2c0>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d023      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a5f      	ldr	r2, [pc, #380]	@ (8010154 <I2C_ITSlaveCplt+0x2c4>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d01d      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a5d      	ldr	r2, [pc, #372]	@ (8010158 <I2C_ITSlaveCplt+0x2c8>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d017      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a5b      	ldr	r2, [pc, #364]	@ (801015c <I2C_ITSlaveCplt+0x2cc>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d011      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a59      	ldr	r2, [pc, #356]	@ (8010160 <I2C_ITSlaveCplt+0x2d0>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d00b      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a57      	ldr	r2, [pc, #348]	@ (8010164 <I2C_ITSlaveCplt+0x2d4>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d005      	beq.n	8010018 <I2C_ITSlaveCplt+0x188>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a55      	ldr	r2, [pc, #340]	@ (8010168 <I2C_ITSlaveCplt+0x2d8>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d105      	bne.n	8010024 <I2C_ITSlaveCplt+0x194>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	b29b      	uxth	r3, r3
 8010022:	e004      	b.n	801002e <I2C_ITSlaveCplt+0x19e>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	b29b      	uxth	r3, r3
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8010032:	e0a2      	b.n	801017a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801003a:	2b00      	cmp	r3, #0
 801003c:	f000 809d 	beq.w	801017a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801004e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010054:	2b00      	cmp	r3, #0
 8010056:	f000 8090 	beq.w	801017a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a32      	ldr	r2, [pc, #200]	@ (801012c <I2C_ITSlaveCplt+0x29c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d059      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a30      	ldr	r2, [pc, #192]	@ (8010130 <I2C_ITSlaveCplt+0x2a0>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d053      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a2e      	ldr	r2, [pc, #184]	@ (8010134 <I2C_ITSlaveCplt+0x2a4>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d04d      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	4a2c      	ldr	r2, [pc, #176]	@ (8010138 <I2C_ITSlaveCplt+0x2a8>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d047      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a2a      	ldr	r2, [pc, #168]	@ (801013c <I2C_ITSlaveCplt+0x2ac>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d041      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a28      	ldr	r2, [pc, #160]	@ (8010140 <I2C_ITSlaveCplt+0x2b0>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d03b      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a26      	ldr	r2, [pc, #152]	@ (8010144 <I2C_ITSlaveCplt+0x2b4>)
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d035      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a24      	ldr	r2, [pc, #144]	@ (8010148 <I2C_ITSlaveCplt+0x2b8>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d02f      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4a22      	ldr	r2, [pc, #136]	@ (801014c <I2C_ITSlaveCplt+0x2bc>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d029      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a20      	ldr	r2, [pc, #128]	@ (8010150 <I2C_ITSlaveCplt+0x2c0>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d023      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4a1e      	ldr	r2, [pc, #120]	@ (8010154 <I2C_ITSlaveCplt+0x2c4>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d01d      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a1c      	ldr	r2, [pc, #112]	@ (8010158 <I2C_ITSlaveCplt+0x2c8>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d017      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a1a      	ldr	r2, [pc, #104]	@ (801015c <I2C_ITSlaveCplt+0x2cc>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d011      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a18      	ldr	r2, [pc, #96]	@ (8010160 <I2C_ITSlaveCplt+0x2d0>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d00b      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a16      	ldr	r2, [pc, #88]	@ (8010164 <I2C_ITSlaveCplt+0x2d4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d005      	beq.n	801011a <I2C_ITSlaveCplt+0x28a>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	4a14      	ldr	r2, [pc, #80]	@ (8010168 <I2C_ITSlaveCplt+0x2d8>)
 8010116:	4293      	cmp	r3, r2
 8010118:	d128      	bne.n	801016c <I2C_ITSlaveCplt+0x2dc>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	b29b      	uxth	r3, r3
 8010124:	e027      	b.n	8010176 <I2C_ITSlaveCplt+0x2e6>
 8010126:	bf00      	nop
 8010128:	fe00e800 	.word	0xfe00e800
 801012c:	40020010 	.word	0x40020010
 8010130:	40020028 	.word	0x40020028
 8010134:	40020040 	.word	0x40020040
 8010138:	40020058 	.word	0x40020058
 801013c:	40020070 	.word	0x40020070
 8010140:	40020088 	.word	0x40020088
 8010144:	400200a0 	.word	0x400200a0
 8010148:	400200b8 	.word	0x400200b8
 801014c:	40020410 	.word	0x40020410
 8010150:	40020428 	.word	0x40020428
 8010154:	40020440 	.word	0x40020440
 8010158:	40020458 	.word	0x40020458
 801015c:	40020470 	.word	0x40020470
 8010160:	40020488 	.word	0x40020488
 8010164:	400204a0 	.word	0x400204a0
 8010168:	400204b8 	.word	0x400204b8
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	b29b      	uxth	r3, r3
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f003 0304 	and.w	r3, r3, #4
 8010180:	2b00      	cmp	r3, #0
 8010182:	d020      	beq.n	80101c6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	f023 0304 	bic.w	r3, r3, #4
 801018a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010196:	b2d2      	uxtb	r2, r2
 8010198:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801019e:	1c5a      	adds	r2, r3, #1
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00c      	beq.n	80101c6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101b0:	3b01      	subs	r3, #1
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101bc:	b29b      	uxth	r3, r3
 80101be:	3b01      	subs	r3, #1
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d005      	beq.n	80101dc <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101d4:	f043 0204 	orr.w	r2, r3, #4
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	f003 0310 	and.w	r3, r3, #16
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d049      	beq.n	801027a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d044      	beq.n	801027a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d128      	bne.n	801024c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b28      	cmp	r3, #40	@ 0x28
 8010204:	d108      	bne.n	8010218 <I2C_ITSlaveCplt+0x388>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801020c:	d104      	bne.n	8010218 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801020e:	6979      	ldr	r1, [r7, #20]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f891 	bl	8010338 <I2C_ITListenCplt>
 8010216:	e030      	b.n	801027a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801021e:	b2db      	uxtb	r3, r3
 8010220:	2b29      	cmp	r3, #41	@ 0x29
 8010222:	d10e      	bne.n	8010242 <I2C_ITSlaveCplt+0x3b2>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801022a:	d00a      	beq.n	8010242 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2210      	movs	r2, #16
 8010232:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 f9ea 	bl	801060e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fd03 	bl	800fc46 <I2C_ITSlaveSeqCplt>
 8010240:	e01b      	b.n	801027a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2210      	movs	r2, #16
 8010248:	61da      	str	r2, [r3, #28]
 801024a:	e016      	b.n	801027a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2210      	movs	r2, #16
 8010252:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010258:	f043 0204 	orr.w	r2, r3, #4
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d003      	beq.n	801026e <I2C_ITSlaveCplt+0x3de>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801026c:	d105      	bne.n	801027a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f8b3 	bl	80103e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801028c:	2b00      	cmp	r3, #0
 801028e:	d010      	beq.n	80102b2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 f8a2 	bl	80103e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b28      	cmp	r3, #40	@ 0x28
 80102a6:	d141      	bne.n	801032c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80102a8:	6979      	ldr	r1, [r7, #20]
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 f844 	bl	8010338 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80102b0:	e03c      	b.n	801032c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80102ba:	d014      	beq.n	80102e6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fcc2 	bl	800fc46 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4a1b      	ldr	r2, [pc, #108]	@ (8010334 <I2C_ITSlaveCplt+0x4a4>)
 80102c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2220      	movs	r2, #32
 80102cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7fe fd16 	bl	800ed10 <HAL_I2C_ListenCpltCallback>
}
 80102e4:	e022      	b.n	801032c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	2b22      	cmp	r3, #34	@ 0x22
 80102f0:	d10e      	bne.n	8010310 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2220      	movs	r2, #32
 80102f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7fe fce9 	bl	800ece0 <HAL_I2C_SlaveRxCpltCallback>
}
 801030e:	e00d      	b.n	801032c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2220      	movs	r2, #32
 8010314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7fe fcd0 	bl	800eccc <HAL_I2C_SlaveTxCpltCallback>
}
 801032c:	bf00      	nop
 801032e:	3718      	adds	r7, #24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	ffff0000 	.word	0xffff0000

08010338 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a25      	ldr	r2, [pc, #148]	@ (80103dc <I2C_ITListenCplt+0xa4>)
 8010346:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2220      	movs	r2, #32
 8010352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2200      	movs	r2, #0
 8010362:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	f003 0304 	and.w	r3, r3, #4
 801036a:	2b00      	cmp	r3, #0
 801036c:	d022      	beq.n	80103b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010378:	b2d2      	uxtb	r2, r2
 801037a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801038a:	2b00      	cmp	r3, #0
 801038c:	d012      	beq.n	80103b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010392:	3b01      	subs	r3, #1
 8010394:	b29a      	uxth	r2, r3
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801039e:	b29b      	uxth	r3, r3
 80103a0:	3b01      	subs	r3, #1
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103ac:	f043 0204 	orr.w	r2, r3, #4
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80103b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 fbe3 	bl	8010b84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2210      	movs	r2, #16
 80103c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7fe fc9e 	bl	800ed10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	ffff0000 	.word	0xffff0000

080103e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80103f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4a6d      	ldr	r2, [pc, #436]	@ (80105b4 <I2C_ITError+0x1d4>)
 80103fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	431a      	orrs	r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010412:	7bfb      	ldrb	r3, [r7, #15]
 8010414:	2b28      	cmp	r3, #40	@ 0x28
 8010416:	d005      	beq.n	8010424 <I2C_ITError+0x44>
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	2b29      	cmp	r3, #41	@ 0x29
 801041c:	d002      	beq.n	8010424 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801041e:	7bfb      	ldrb	r3, [r7, #15]
 8010420:	2b2a      	cmp	r3, #42	@ 0x2a
 8010422:	d10b      	bne.n	801043c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010424:	2103      	movs	r1, #3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 fbac 	bl	8010b84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2228      	movs	r2, #40	@ 0x28
 8010430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4a60      	ldr	r2, [pc, #384]	@ (80105b8 <I2C_ITError+0x1d8>)
 8010438:	635a      	str	r2, [r3, #52]	@ 0x34
 801043a:	e030      	b.n	801049e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801043c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fb9f 	bl	8010b84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f000 f8e1 	bl	801060e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b60      	cmp	r3, #96	@ 0x60
 8010456:	d01f      	beq.n	8010498 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2220      	movs	r2, #32
 801045c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	f003 0320 	and.w	r3, r3, #32
 801046a:	2b20      	cmp	r3, #32
 801046c:	d114      	bne.n	8010498 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	f003 0310 	and.w	r3, r3, #16
 8010478:	2b10      	cmp	r3, #16
 801047a:	d109      	bne.n	8010490 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2210      	movs	r2, #16
 8010482:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010488:	f043 0204 	orr.w	r2, r3, #4
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2220      	movs	r2, #32
 8010496:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d039      	beq.n	8010520 <I2C_ITError+0x140>
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	2b11      	cmp	r3, #17
 80104b0:	d002      	beq.n	80104b8 <I2C_ITError+0xd8>
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b21      	cmp	r3, #33	@ 0x21
 80104b6:	d133      	bne.n	8010520 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80104c6:	d107      	bne.n	80104d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80104d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fd f9f7 	bl	800d8d0 <HAL_DMA_GetState>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d017      	beq.n	8010518 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ec:	4a33      	ldr	r2, [pc, #204]	@ (80105bc <I2C_ITError+0x1dc>)
 80104ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fc f877 	bl	800c5f0 <HAL_DMA_Abort_IT>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d04d      	beq.n	80105a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801050c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010512:	4610      	mov	r0, r2
 8010514:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010516:	e045      	b.n	80105a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 f851 	bl	80105c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801051e:	e041      	b.n	80105a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d039      	beq.n	801059c <I2C_ITError+0x1bc>
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	2b12      	cmp	r3, #18
 801052c:	d002      	beq.n	8010534 <I2C_ITError+0x154>
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	2b22      	cmp	r3, #34	@ 0x22
 8010532:	d133      	bne.n	801059c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801053e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010542:	d107      	bne.n	8010554 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010552:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010558:	4618      	mov	r0, r3
 801055a:	f7fd f9b9 	bl	800d8d0 <HAL_DMA_GetState>
 801055e:	4603      	mov	r3, r0
 8010560:	2b01      	cmp	r3, #1
 8010562:	d017      	beq.n	8010594 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010568:	4a14      	ldr	r2, [pc, #80]	@ (80105bc <I2C_ITError+0x1dc>)
 801056a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010578:	4618      	mov	r0, r3
 801057a:	f7fc f839 	bl	800c5f0 <HAL_DMA_Abort_IT>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d011      	beq.n	80105a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801058e:	4610      	mov	r0, r2
 8010590:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010592:	e009      	b.n	80105a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 f813 	bl	80105c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801059a:	e005      	b.n	80105a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 f80f 	bl	80105c0 <I2C_TreatErrorCallback>
  }
}
 80105a2:	e002      	b.n	80105aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105a4:	bf00      	nop
 80105a6:	e000      	b.n	80105aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80105a8:	bf00      	nop
}
 80105aa:	bf00      	nop
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	ffff0000 	.word	0xffff0000
 80105b8:	0800efad 	.word	0x0800efad
 80105bc:	08010657 	.word	0x08010657

080105c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b60      	cmp	r3, #96	@ 0x60
 80105d2:	d10e      	bne.n	80105f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2220      	movs	r2, #32
 80105d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f7fe fbae 	bl	800ed4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80105f0:	e009      	b.n	8010606 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2200      	movs	r2, #0
 80105f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f7fe fb99 	bl	800ed38 <HAL_I2C_ErrorCallback>
}
 8010606:	bf00      	nop
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801060e:	b480      	push	{r7}
 8010610:	b083      	sub	sp, #12
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	699b      	ldr	r3, [r3, #24]
 801061c:	f003 0302 	and.w	r3, r3, #2
 8010620:	2b02      	cmp	r3, #2
 8010622:	d103      	bne.n	801062c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2200      	movs	r2, #0
 801062a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	2b01      	cmp	r3, #1
 8010638:	d007      	beq.n	801064a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	699a      	ldr	r2, [r3, #24]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f042 0201 	orr.w	r2, r2, #1
 8010648:	619a      	str	r2, [r3, #24]
  }
}
 801064a:	bf00      	nop
 801064c:	370c      	adds	r7, #12
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr

08010656 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b084      	sub	sp, #16
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010662:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010668:	2b00      	cmp	r3, #0
 801066a:	d003      	beq.n	8010674 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010670:	2200      	movs	r2, #0
 8010672:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010680:	2200      	movs	r2, #0
 8010682:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010684:	68f8      	ldr	r0, [r7, #12]
 8010686:	f7ff ff9b 	bl	80105c0 <I2C_TreatErrorCallback>
}
 801068a:	bf00      	nop
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	60f8      	str	r0, [r7, #12]
 801069a:	60b9      	str	r1, [r7, #8]
 801069c:	603b      	str	r3, [r7, #0]
 801069e:	4613      	mov	r3, r2
 80106a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80106a2:	e03b      	b.n	801071c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80106a4:	69ba      	ldr	r2, [r7, #24]
 80106a6:	6839      	ldr	r1, [r7, #0]
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f000 f8d5 	bl	8010858 <I2C_IsErrorOccurred>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d001      	beq.n	80106b8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80106b4:	2301      	movs	r3, #1
 80106b6:	e041      	b.n	801073c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106be:	d02d      	beq.n	801071c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106c0:	f7f8 fd80 	bl	80091c4 <HAL_GetTick>
 80106c4:	4602      	mov	r2, r0
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d302      	bcc.n	80106d6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d122      	bne.n	801071c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	699a      	ldr	r2, [r3, #24]
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	4013      	ands	r3, r2
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	bf0c      	ite	eq
 80106e6:	2301      	moveq	r3, #1
 80106e8:	2300      	movne	r3, #0
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	461a      	mov	r2, r3
 80106ee:	79fb      	ldrb	r3, [r7, #7]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d113      	bne.n	801071c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106f8:	f043 0220 	orr.w	r2, r3, #32
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2220      	movs	r2, #32
 8010704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2200      	movs	r2, #0
 8010714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010718:	2301      	movs	r3, #1
 801071a:	e00f      	b.n	801073c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	699a      	ldr	r2, [r3, #24]
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	4013      	ands	r3, r2
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	429a      	cmp	r2, r3
 801072a:	bf0c      	ite	eq
 801072c:	2301      	moveq	r3, #1
 801072e:	2300      	movne	r3, #0
 8010730:	b2db      	uxtb	r3, r3
 8010732:	461a      	mov	r2, r3
 8010734:	79fb      	ldrb	r3, [r7, #7]
 8010736:	429a      	cmp	r2, r3
 8010738:	d0b4      	beq.n	80106a4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801073a:	2300      	movs	r3, #0
}
 801073c:	4618      	mov	r0, r3
 801073e:	3710      	adds	r7, #16
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010750:	e033      	b.n	80107ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	68b9      	ldr	r1, [r7, #8]
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 f87e 	bl	8010858 <I2C_IsErrorOccurred>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e031      	b.n	80107ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801076c:	d025      	beq.n	80107ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801076e:	f7f8 fd29 	bl	80091c4 <HAL_GetTick>
 8010772:	4602      	mov	r2, r0
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	429a      	cmp	r2, r3
 801077c:	d302      	bcc.n	8010784 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d11a      	bne.n	80107ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	f003 0302 	and.w	r3, r3, #2
 801078e:	2b02      	cmp	r3, #2
 8010790:	d013      	beq.n	80107ba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010796:	f043 0220 	orr.w	r2, r3, #32
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2220      	movs	r2, #32
 80107a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2200      	movs	r2, #0
 80107aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2200      	movs	r2, #0
 80107b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80107b6:	2301      	movs	r3, #1
 80107b8:	e007      	b.n	80107ca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	f003 0302 	and.w	r3, r3, #2
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d1c4      	bne.n	8010752 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b084      	sub	sp, #16
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	60f8      	str	r0, [r7, #12]
 80107da:	60b9      	str	r1, [r7, #8]
 80107dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80107de:	e02f      	b.n	8010840 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	68b9      	ldr	r1, [r7, #8]
 80107e4:	68f8      	ldr	r0, [r7, #12]
 80107e6:	f000 f837 	bl	8010858 <I2C_IsErrorOccurred>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80107f0:	2301      	movs	r3, #1
 80107f2:	e02d      	b.n	8010850 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107f4:	f7f8 fce6 	bl	80091c4 <HAL_GetTick>
 80107f8:	4602      	mov	r2, r0
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	1ad3      	subs	r3, r2, r3
 80107fe:	68ba      	ldr	r2, [r7, #8]
 8010800:	429a      	cmp	r2, r3
 8010802:	d302      	bcc.n	801080a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d11a      	bne.n	8010840 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	699b      	ldr	r3, [r3, #24]
 8010810:	f003 0320 	and.w	r3, r3, #32
 8010814:	2b20      	cmp	r3, #32
 8010816:	d013      	beq.n	8010840 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801081c:	f043 0220 	orr.w	r2, r3, #32
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2220      	movs	r2, #32
 8010828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2200      	movs	r2, #0
 8010838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	e007      	b.n	8010850 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	f003 0320 	and.w	r3, r3, #32
 801084a:	2b20      	cmp	r3, #32
 801084c:	d1c8      	bne.n	80107e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801084e:	2300      	movs	r3, #0
}
 8010850:	4618      	mov	r0, r3
 8010852:	3710      	adds	r7, #16
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08a      	sub	sp, #40	@ 0x28
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010864:	2300      	movs	r3, #0
 8010866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	699b      	ldr	r3, [r3, #24]
 8010870:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	f003 0310 	and.w	r3, r3, #16
 8010880:	2b00      	cmp	r3, #0
 8010882:	d068      	beq.n	8010956 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2210      	movs	r2, #16
 801088a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801088c:	e049      	b.n	8010922 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010894:	d045      	beq.n	8010922 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010896:	f7f8 fc95 	bl	80091c4 <HAL_GetTick>
 801089a:	4602      	mov	r2, r0
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	1ad3      	subs	r3, r2, r3
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d302      	bcc.n	80108ac <I2C_IsErrorOccurred+0x54>
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d13a      	bne.n	8010922 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80108b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	699b      	ldr	r3, [r3, #24]
 80108c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108ce:	d121      	bne.n	8010914 <I2C_IsErrorOccurred+0xbc>
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80108d6:	d01d      	beq.n	8010914 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80108d8:	7cfb      	ldrb	r3, [r7, #19]
 80108da:	2b20      	cmp	r3, #32
 80108dc:	d01a      	beq.n	8010914 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	685a      	ldr	r2, [r3, #4]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80108ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80108ee:	f7f8 fc69 	bl	80091c4 <HAL_GetTick>
 80108f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108f4:	e00e      	b.n	8010914 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80108f6:	f7f8 fc65 	bl	80091c4 <HAL_GetTick>
 80108fa:	4602      	mov	r2, r0
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	1ad3      	subs	r3, r2, r3
 8010900:	2b19      	cmp	r3, #25
 8010902:	d907      	bls.n	8010914 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	f043 0320 	orr.w	r3, r3, #32
 801090a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801090c:	2301      	movs	r3, #1
 801090e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010912:	e006      	b.n	8010922 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	f003 0320 	and.w	r3, r3, #32
 801091e:	2b20      	cmp	r3, #32
 8010920:	d1e9      	bne.n	80108f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	699b      	ldr	r3, [r3, #24]
 8010928:	f003 0320 	and.w	r3, r3, #32
 801092c:	2b20      	cmp	r3, #32
 801092e:	d003      	beq.n	8010938 <I2C_IsErrorOccurred+0xe0>
 8010930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010934:	2b00      	cmp	r3, #0
 8010936:	d0aa      	beq.n	801088e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801093c:	2b00      	cmp	r3, #0
 801093e:	d103      	bne.n	8010948 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2220      	movs	r2, #32
 8010946:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010948:	6a3b      	ldr	r3, [r7, #32]
 801094a:	f043 0304 	orr.w	r3, r3, #4
 801094e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010950:	2301      	movs	r3, #1
 8010952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	699b      	ldr	r3, [r3, #24]
 801095c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00b      	beq.n	8010980 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	f043 0301 	orr.w	r3, r3, #1
 801096e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010978:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00b      	beq.n	80109a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	f043 0308 	orr.w	r3, r3, #8
 8010990:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801099a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801099c:	2301      	movs	r3, #1
 801099e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00b      	beq.n	80109c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	f043 0302 	orr.w	r3, r3, #2
 80109b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80109be:	2301      	movs	r3, #1
 80109c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80109c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d01c      	beq.n	8010a06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f7ff fe1e 	bl	801060e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	6859      	ldr	r1, [r3, #4]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010a14 <I2C_IsErrorOccurred+0x1bc>)
 80109de:	400b      	ands	r3, r1
 80109e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109e6:	6a3b      	ldr	r3, [r7, #32]
 80109e8:	431a      	orrs	r2, r3
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2220      	movs	r2, #32
 80109f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2200      	movs	r2, #0
 80109fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2200      	movs	r2, #0
 8010a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3728      	adds	r7, #40	@ 0x28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	fe00e800 	.word	0xfe00e800

08010a18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b087      	sub	sp, #28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	607b      	str	r3, [r7, #4]
 8010a22:	460b      	mov	r3, r1
 8010a24:	817b      	strh	r3, [r7, #10]
 8010a26:	4613      	mov	r3, r2
 8010a28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010a2a:	897b      	ldrh	r3, [r7, #10]
 8010a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010a30:	7a7b      	ldrb	r3, [r7, #9]
 8010a32:	041b      	lsls	r3, r3, #16
 8010a34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010a38:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	4313      	orrs	r3, r2
 8010a42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a46:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	685a      	ldr	r2, [r3, #4]
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	0d5b      	lsrs	r3, r3, #21
 8010a52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010a56:	4b08      	ldr	r3, [pc, #32]	@ (8010a78 <I2C_TransferConfig+0x60>)
 8010a58:	430b      	orrs	r3, r1
 8010a5a:	43db      	mvns	r3, r3
 8010a5c:	ea02 0103 	and.w	r1, r2, r3
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	697a      	ldr	r2, [r7, #20]
 8010a66:	430a      	orrs	r2, r1
 8010a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010a6a:	bf00      	nop
 8010a6c:	371c      	adds	r7, #28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	03ff63ff 	.word	0x03ff63ff

08010a7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	460b      	mov	r3, r1
 8010a86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a90:	4a39      	ldr	r2, [pc, #228]	@ (8010b78 <I2C_Enable_IRQ+0xfc>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d032      	beq.n	8010afc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010a9a:	4a38      	ldr	r2, [pc, #224]	@ (8010b7c <I2C_Enable_IRQ+0x100>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d02d      	beq.n	8010afc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010aa4:	4a36      	ldr	r2, [pc, #216]	@ (8010b80 <I2C_Enable_IRQ+0x104>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d028      	beq.n	8010afc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010aaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	da03      	bge.n	8010aba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010ab8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010aba:	887b      	ldrh	r3, [r7, #2]
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d003      	beq.n	8010acc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010aca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010acc:	887b      	ldrh	r3, [r7, #2]
 8010ace:	f003 0302 	and.w	r3, r3, #2
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d003      	beq.n	8010ade <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010adc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010ade:	887b      	ldrh	r3, [r7, #2]
 8010ae0:	2b10      	cmp	r3, #16
 8010ae2:	d103      	bne.n	8010aec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010aea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010aec:	887b      	ldrh	r3, [r7, #2]
 8010aee:	2b20      	cmp	r3, #32
 8010af0:	d133      	bne.n	8010b5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f043 0320 	orr.w	r3, r3, #32
 8010af8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010afa:	e02e      	b.n	8010b5a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010afc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	da03      	bge.n	8010b0c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010b0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010b0c:	887b      	ldrh	r3, [r7, #2]
 8010b0e:	f003 0301 	and.w	r3, r3, #1
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d003      	beq.n	8010b1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010b1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010b1e:	887b      	ldrh	r3, [r7, #2]
 8010b20:	f003 0302 	and.w	r3, r3, #2
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d003      	beq.n	8010b30 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010b2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010b30:	887b      	ldrh	r3, [r7, #2]
 8010b32:	2b10      	cmp	r3, #16
 8010b34:	d103      	bne.n	8010b3e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010b3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010b3e:	887b      	ldrh	r3, [r7, #2]
 8010b40:	2b20      	cmp	r3, #32
 8010b42:	d103      	bne.n	8010b4c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010b4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010b4c:	887b      	ldrh	r3, [r7, #2]
 8010b4e:	2b40      	cmp	r3, #64	@ 0x40
 8010b50:	d103      	bne.n	8010b5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	6819      	ldr	r1, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	430a      	orrs	r2, r1
 8010b68:	601a      	str	r2, [r3, #0]
}
 8010b6a:	bf00      	nop
 8010b6c:	3714      	adds	r7, #20
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop
 8010b78:	0800f19f 	.word	0x0800f19f
 8010b7c:	0800f5c1 	.word	0x0800f5c1
 8010b80:	0800f375 	.word	0x0800f375

08010b84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010b90:	2300      	movs	r3, #0
 8010b92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010b94:	887b      	ldrh	r3, [r7, #2]
 8010b96:	f003 0301 	and.w	r3, r3, #1
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00f      	beq.n	8010bbe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010ba4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010bb2:	2b28      	cmp	r3, #40	@ 0x28
 8010bb4:	d003      	beq.n	8010bbe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010bbe:	887b      	ldrh	r3, [r7, #2]
 8010bc0:	f003 0302 	and.w	r3, r3, #2
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00f      	beq.n	8010be8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010bce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010bdc:	2b28      	cmp	r3, #40	@ 0x28
 8010bde:	d003      	beq.n	8010be8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010be6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010be8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	da03      	bge.n	8010bf8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010bf6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010bf8:	887b      	ldrh	r3, [r7, #2]
 8010bfa:	2b10      	cmp	r3, #16
 8010bfc:	d103      	bne.n	8010c06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010c04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010c06:	887b      	ldrh	r3, [r7, #2]
 8010c08:	2b20      	cmp	r3, #32
 8010c0a:	d103      	bne.n	8010c14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f043 0320 	orr.w	r3, r3, #32
 8010c12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010c14:	887b      	ldrh	r3, [r7, #2]
 8010c16:	2b40      	cmp	r3, #64	@ 0x40
 8010c18:	d103      	bne.n	8010c22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	6819      	ldr	r1, [r3, #0]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	43da      	mvns	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	400a      	ands	r2, r1
 8010c32:	601a      	str	r2, [r3, #0]
}
 8010c34:	bf00      	nop
 8010c36:	3714      	adds	r7, #20
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	2b20      	cmp	r3, #32
 8010c54:	d138      	bne.n	8010cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d101      	bne.n	8010c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010c60:	2302      	movs	r3, #2
 8010c62:	e032      	b.n	8010cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2201      	movs	r2, #1
 8010c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2224      	movs	r2, #36	@ 0x24
 8010c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f022 0201 	bic.w	r2, r2, #1
 8010c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	6819      	ldr	r1, [r3, #0]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	430a      	orrs	r2, r1
 8010ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f042 0201 	orr.w	r2, r2, #1
 8010cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2220      	movs	r2, #32
 8010cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	e000      	b.n	8010cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010cc8:	2302      	movs	r3, #2
  }
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	370c      	adds	r7, #12
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr

08010cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010cd6:	b480      	push	{r7}
 8010cd8:	b085      	sub	sp, #20
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
 8010cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	2b20      	cmp	r3, #32
 8010cea:	d139      	bne.n	8010d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	d101      	bne.n	8010cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010cf6:	2302      	movs	r3, #2
 8010cf8:	e033      	b.n	8010d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2224      	movs	r2, #36	@ 0x24
 8010d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f022 0201 	bic.w	r2, r2, #1
 8010d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	021b      	lsls	r3, r3, #8
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	4313      	orrs	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	68fa      	ldr	r2, [r7, #12]
 8010d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f042 0201 	orr.w	r2, r2, #1
 8010d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2220      	movs	r2, #32
 8010d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	e000      	b.n	8010d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010d60:	2302      	movs	r3, #2
  }
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3714      	adds	r7, #20
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr
	...

08010d70 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d78:	4b0d      	ldr	r3, [pc, #52]	@ (8010db0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8010db0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010d80:	f043 0302 	orr.w	r3, r3, #2
 8010d84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010d88:	4b09      	ldr	r3, [pc, #36]	@ (8010db0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010d8e:	f003 0302 	and.w	r3, r3, #2
 8010d92:	60fb      	str	r3, [r7, #12]
 8010d94:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010d96:	4b07      	ldr	r3, [pc, #28]	@ (8010db4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010d98:	685a      	ldr	r2, [r3, #4]
 8010d9a:	4906      	ldr	r1, [pc, #24]	@ (8010db4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	604b      	str	r3, [r1, #4]
}
 8010da2:	bf00      	nop
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	58024400 	.word	0x58024400
 8010db4:	58000400 	.word	0x58000400

08010db8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b084      	sub	sp, #16
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010dc0:	4b19      	ldr	r3, [pc, #100]	@ (8010e28 <HAL_PWREx_ConfigSupply+0x70>)
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	f003 0304 	and.w	r3, r3, #4
 8010dc8:	2b04      	cmp	r3, #4
 8010dca:	d00a      	beq.n	8010de2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010dcc:	4b16      	ldr	r3, [pc, #88]	@ (8010e28 <HAL_PWREx_ConfigSupply+0x70>)
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	f003 0307 	and.w	r3, r3, #7
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d001      	beq.n	8010dde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e01f      	b.n	8010e1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010dde:	2300      	movs	r3, #0
 8010de0:	e01d      	b.n	8010e1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010de2:	4b11      	ldr	r3, [pc, #68]	@ (8010e28 <HAL_PWREx_ConfigSupply+0x70>)
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	f023 0207 	bic.w	r2, r3, #7
 8010dea:	490f      	ldr	r1, [pc, #60]	@ (8010e28 <HAL_PWREx_ConfigSupply+0x70>)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	4313      	orrs	r3, r2
 8010df0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010df2:	f7f8 f9e7 	bl	80091c4 <HAL_GetTick>
 8010df6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010df8:	e009      	b.n	8010e0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010dfa:	f7f8 f9e3 	bl	80091c4 <HAL_GetTick>
 8010dfe:	4602      	mov	r2, r0
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010e08:	d901      	bls.n	8010e0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e007      	b.n	8010e1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010e0e:	4b06      	ldr	r3, [pc, #24]	@ (8010e28 <HAL_PWREx_ConfigSupply+0x70>)
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010e1a:	d1ee      	bne.n	8010dfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	58024800 	.word	0x58024800

08010e2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b08c      	sub	sp, #48	@ 0x30
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e3c8      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 8087 	beq.w	8010f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010e4c:	4b88      	ldr	r3, [pc, #544]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010e4e:	691b      	ldr	r3, [r3, #16]
 8010e50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010e56:	4b86      	ldr	r3, [pc, #536]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5e:	2b10      	cmp	r3, #16
 8010e60:	d007      	beq.n	8010e72 <HAL_RCC_OscConfig+0x46>
 8010e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e64:	2b18      	cmp	r3, #24
 8010e66:	d110      	bne.n	8010e8a <HAL_RCC_OscConfig+0x5e>
 8010e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e6a:	f003 0303 	and.w	r3, r3, #3
 8010e6e:	2b02      	cmp	r3, #2
 8010e70:	d10b      	bne.n	8010e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e72:	4b7f      	ldr	r3, [pc, #508]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d06c      	beq.n	8010f58 <HAL_RCC_OscConfig+0x12c>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d168      	bne.n	8010f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010e86:	2301      	movs	r3, #1
 8010e88:	e3a2      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e92:	d106      	bne.n	8010ea2 <HAL_RCC_OscConfig+0x76>
 8010e94:	4b76      	ldr	r3, [pc, #472]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4a75      	ldr	r2, [pc, #468]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e9e:	6013      	str	r3, [r2, #0]
 8010ea0:	e02e      	b.n	8010f00 <HAL_RCC_OscConfig+0xd4>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10c      	bne.n	8010ec4 <HAL_RCC_OscConfig+0x98>
 8010eaa:	4b71      	ldr	r3, [pc, #452]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4a70      	ldr	r2, [pc, #448]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010eb4:	6013      	str	r3, [r2, #0]
 8010eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a6d      	ldr	r2, [pc, #436]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010ec0:	6013      	str	r3, [r2, #0]
 8010ec2:	e01d      	b.n	8010f00 <HAL_RCC_OscConfig+0xd4>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010ecc:	d10c      	bne.n	8010ee8 <HAL_RCC_OscConfig+0xbc>
 8010ece:	4b68      	ldr	r3, [pc, #416]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4a67      	ldr	r2, [pc, #412]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010ed8:	6013      	str	r3, [r2, #0]
 8010eda:	4b65      	ldr	r3, [pc, #404]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	4a64      	ldr	r2, [pc, #400]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ee4:	6013      	str	r3, [r2, #0]
 8010ee6:	e00b      	b.n	8010f00 <HAL_RCC_OscConfig+0xd4>
 8010ee8:	4b61      	ldr	r3, [pc, #388]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4a60      	ldr	r2, [pc, #384]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010ef2:	6013      	str	r3, [r2, #0]
 8010ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d013      	beq.n	8010f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f08:	f7f8 f95c 	bl	80091c4 <HAL_GetTick>
 8010f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010f0e:	e008      	b.n	8010f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f10:	f7f8 f958 	bl	80091c4 <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	2b64      	cmp	r3, #100	@ 0x64
 8010f1c:	d901      	bls.n	8010f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e356      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010f22:	4b53      	ldr	r3, [pc, #332]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0f0      	beq.n	8010f10 <HAL_RCC_OscConfig+0xe4>
 8010f2e:	e014      	b.n	8010f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f30:	f7f8 f948 	bl	80091c4 <HAL_GetTick>
 8010f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010f36:	e008      	b.n	8010f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f38:	f7f8 f944 	bl	80091c4 <HAL_GetTick>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	2b64      	cmp	r3, #100	@ 0x64
 8010f44:	d901      	bls.n	8010f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010f46:	2303      	movs	r3, #3
 8010f48:	e342      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010f4a:	4b49      	ldr	r3, [pc, #292]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d1f0      	bne.n	8010f38 <HAL_RCC_OscConfig+0x10c>
 8010f56:	e000      	b.n	8010f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f003 0302 	and.w	r3, r3, #2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f000 808c 	beq.w	8011080 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f68:	4b41      	ldr	r3, [pc, #260]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010f72:	4b3f      	ldr	r3, [pc, #252]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010f78:	6a3b      	ldr	r3, [r7, #32]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <HAL_RCC_OscConfig+0x162>
 8010f7e:	6a3b      	ldr	r3, [r7, #32]
 8010f80:	2b18      	cmp	r3, #24
 8010f82:	d137      	bne.n	8010ff4 <HAL_RCC_OscConfig+0x1c8>
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	f003 0303 	and.w	r3, r3, #3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d132      	bne.n	8010ff4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010f8e:	4b38      	ldr	r3, [pc, #224]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f003 0304 	and.w	r3, r3, #4
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d005      	beq.n	8010fa6 <HAL_RCC_OscConfig+0x17a>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d101      	bne.n	8010fa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e314      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010fa6:	4b32      	ldr	r3, [pc, #200]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f023 0219 	bic.w	r2, r3, #25
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	492f      	ldr	r1, [pc, #188]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010fb4:	4313      	orrs	r3, r2
 8010fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fb8:	f7f8 f904 	bl	80091c4 <HAL_GetTick>
 8010fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010fbe:	e008      	b.n	8010fd2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010fc0:	f7f8 f900 	bl	80091c4 <HAL_GetTick>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	1ad3      	subs	r3, r2, r3
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	d901      	bls.n	8010fd2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8010fce:	2303      	movs	r3, #3
 8010fd0:	e2fe      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010fd2:	4b27      	ldr	r3, [pc, #156]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f003 0304 	and.w	r3, r3, #4
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d0f0      	beq.n	8010fc0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fde:	4b24      	ldr	r3, [pc, #144]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	061b      	lsls	r3, r3, #24
 8010fec:	4920      	ldr	r1, [pc, #128]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010ff2:	e045      	b.n	8011080 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d026      	beq.n	801104a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f023 0219 	bic.w	r2, r3, #25
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	4919      	ldr	r1, [pc, #100]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 801100a:	4313      	orrs	r3, r2
 801100c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801100e:	f7f8 f8d9 	bl	80091c4 <HAL_GetTick>
 8011012:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011014:	e008      	b.n	8011028 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011016:	f7f8 f8d5 	bl	80091c4 <HAL_GetTick>
 801101a:	4602      	mov	r2, r0
 801101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	2b02      	cmp	r3, #2
 8011022:	d901      	bls.n	8011028 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8011024:	2303      	movs	r3, #3
 8011026:	e2d3      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011028:	4b11      	ldr	r3, [pc, #68]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f003 0304 	and.w	r3, r3, #4
 8011030:	2b00      	cmp	r3, #0
 8011032:	d0f0      	beq.n	8011016 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011034:	4b0e      	ldr	r3, [pc, #56]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	061b      	lsls	r3, r3, #24
 8011042:	490b      	ldr	r1, [pc, #44]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8011044:	4313      	orrs	r3, r2
 8011046:	604b      	str	r3, [r1, #4]
 8011048:	e01a      	b.n	8011080 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801104a:	4b09      	ldr	r3, [pc, #36]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4a08      	ldr	r2, [pc, #32]	@ (8011070 <HAL_RCC_OscConfig+0x244>)
 8011050:	f023 0301 	bic.w	r3, r3, #1
 8011054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011056:	f7f8 f8b5 	bl	80091c4 <HAL_GetTick>
 801105a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801105c:	e00a      	b.n	8011074 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801105e:	f7f8 f8b1 	bl	80091c4 <HAL_GetTick>
 8011062:	4602      	mov	r2, r0
 8011064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	2b02      	cmp	r3, #2
 801106a:	d903      	bls.n	8011074 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801106c:	2303      	movs	r3, #3
 801106e:	e2af      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
 8011070:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011074:	4b96      	ldr	r3, [pc, #600]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f003 0304 	and.w	r3, r3, #4
 801107c:	2b00      	cmp	r3, #0
 801107e:	d1ee      	bne.n	801105e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f003 0310 	and.w	r3, r3, #16
 8011088:	2b00      	cmp	r3, #0
 801108a:	d06a      	beq.n	8011162 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801108c:	4b90      	ldr	r3, [pc, #576]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801108e:	691b      	ldr	r3, [r3, #16]
 8011090:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011094:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011096:	4b8e      	ldr	r3, [pc, #568]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801109a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	2b08      	cmp	r3, #8
 80110a0:	d007      	beq.n	80110b2 <HAL_RCC_OscConfig+0x286>
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	2b18      	cmp	r3, #24
 80110a6:	d11b      	bne.n	80110e0 <HAL_RCC_OscConfig+0x2b4>
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	f003 0303 	and.w	r3, r3, #3
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d116      	bne.n	80110e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80110b2:	4b87      	ldr	r3, [pc, #540]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d005      	beq.n	80110ca <HAL_RCC_OscConfig+0x29e>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	69db      	ldr	r3, [r3, #28]
 80110c2:	2b80      	cmp	r3, #128	@ 0x80
 80110c4:	d001      	beq.n	80110ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e282      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80110ca:	4b81      	ldr	r3, [pc, #516]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6a1b      	ldr	r3, [r3, #32]
 80110d6:	061b      	lsls	r3, r3, #24
 80110d8:	497d      	ldr	r1, [pc, #500]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80110da:	4313      	orrs	r3, r2
 80110dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80110de:	e040      	b.n	8011162 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	69db      	ldr	r3, [r3, #28]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d023      	beq.n	8011130 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80110e8:	4b79      	ldr	r3, [pc, #484]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a78      	ldr	r2, [pc, #480]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80110ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110f4:	f7f8 f866 	bl	80091c4 <HAL_GetTick>
 80110f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80110fa:	e008      	b.n	801110e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80110fc:	f7f8 f862 	bl	80091c4 <HAL_GetTick>
 8011100:	4602      	mov	r2, r0
 8011102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	2b02      	cmp	r3, #2
 8011108:	d901      	bls.n	801110e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801110a:	2303      	movs	r3, #3
 801110c:	e260      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801110e:	4b70      	ldr	r3, [pc, #448]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011116:	2b00      	cmp	r3, #0
 8011118:	d0f0      	beq.n	80110fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801111a:	4b6d      	ldr	r3, [pc, #436]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6a1b      	ldr	r3, [r3, #32]
 8011126:	061b      	lsls	r3, r3, #24
 8011128:	4969      	ldr	r1, [pc, #420]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801112a:	4313      	orrs	r3, r2
 801112c:	60cb      	str	r3, [r1, #12]
 801112e:	e018      	b.n	8011162 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011130:	4b67      	ldr	r3, [pc, #412]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a66      	ldr	r2, [pc, #408]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801113a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801113c:	f7f8 f842 	bl	80091c4 <HAL_GetTick>
 8011140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011142:	e008      	b.n	8011156 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011144:	f7f8 f83e 	bl	80091c4 <HAL_GetTick>
 8011148:	4602      	mov	r2, r0
 801114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	2b02      	cmp	r3, #2
 8011150:	d901      	bls.n	8011156 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8011152:	2303      	movs	r3, #3
 8011154:	e23c      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011156:	4b5e      	ldr	r3, [pc, #376]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1f0      	bne.n	8011144 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f003 0308 	and.w	r3, r3, #8
 801116a:	2b00      	cmp	r3, #0
 801116c:	d036      	beq.n	80111dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	695b      	ldr	r3, [r3, #20]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d019      	beq.n	80111aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011176:	4b56      	ldr	r3, [pc, #344]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801117a:	4a55      	ldr	r2, [pc, #340]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801117c:	f043 0301 	orr.w	r3, r3, #1
 8011180:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011182:	f7f8 f81f 	bl	80091c4 <HAL_GetTick>
 8011186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011188:	e008      	b.n	801119c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801118a:	f7f8 f81b 	bl	80091c4 <HAL_GetTick>
 801118e:	4602      	mov	r2, r0
 8011190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	2b02      	cmp	r3, #2
 8011196:	d901      	bls.n	801119c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011198:	2303      	movs	r3, #3
 801119a:	e219      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801119c:	4b4c      	ldr	r3, [pc, #304]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801119e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111a0:	f003 0302 	and.w	r3, r3, #2
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d0f0      	beq.n	801118a <HAL_RCC_OscConfig+0x35e>
 80111a8:	e018      	b.n	80111dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80111aa:	4b49      	ldr	r3, [pc, #292]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80111ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111ae:	4a48      	ldr	r2, [pc, #288]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80111b0:	f023 0301 	bic.w	r3, r3, #1
 80111b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111b6:	f7f8 f805 	bl	80091c4 <HAL_GetTick>
 80111ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80111bc:	e008      	b.n	80111d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80111be:	f7f8 f801 	bl	80091c4 <HAL_GetTick>
 80111c2:	4602      	mov	r2, r0
 80111c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d901      	bls.n	80111d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80111cc:	2303      	movs	r3, #3
 80111ce:	e1ff      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80111d0:	4b3f      	ldr	r3, [pc, #252]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80111d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111d4:	f003 0302 	and.w	r3, r3, #2
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1f0      	bne.n	80111be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f003 0320 	and.w	r3, r3, #32
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d036      	beq.n	8011256 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	699b      	ldr	r3, [r3, #24]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d019      	beq.n	8011224 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80111f0:	4b37      	ldr	r3, [pc, #220]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4a36      	ldr	r2, [pc, #216]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80111f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80111fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80111fc:	f7f7 ffe2 	bl	80091c4 <HAL_GetTick>
 8011200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011202:	e008      	b.n	8011216 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011204:	f7f7 ffde 	bl	80091c4 <HAL_GetTick>
 8011208:	4602      	mov	r2, r0
 801120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	2b02      	cmp	r3, #2
 8011210:	d901      	bls.n	8011216 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8011212:	2303      	movs	r3, #3
 8011214:	e1dc      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011216:	4b2e      	ldr	r3, [pc, #184]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801121e:	2b00      	cmp	r3, #0
 8011220:	d0f0      	beq.n	8011204 <HAL_RCC_OscConfig+0x3d8>
 8011222:	e018      	b.n	8011256 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011224:	4b2a      	ldr	r3, [pc, #168]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4a29      	ldr	r2, [pc, #164]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801122a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801122e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011230:	f7f7 ffc8 	bl	80091c4 <HAL_GetTick>
 8011234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011236:	e008      	b.n	801124a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011238:	f7f7 ffc4 	bl	80091c4 <HAL_GetTick>
 801123c:	4602      	mov	r2, r0
 801123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	2b02      	cmp	r3, #2
 8011244:	d901      	bls.n	801124a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8011246:	2303      	movs	r3, #3
 8011248:	e1c2      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801124a:	4b21      	ldr	r3, [pc, #132]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1f0      	bne.n	8011238 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f003 0304 	and.w	r3, r3, #4
 801125e:	2b00      	cmp	r3, #0
 8011260:	f000 8086 	beq.w	8011370 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011264:	4b1b      	ldr	r3, [pc, #108]	@ (80112d4 <HAL_RCC_OscConfig+0x4a8>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a1a      	ldr	r2, [pc, #104]	@ (80112d4 <HAL_RCC_OscConfig+0x4a8>)
 801126a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801126e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011270:	f7f7 ffa8 	bl	80091c4 <HAL_GetTick>
 8011274:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011276:	e008      	b.n	801128a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011278:	f7f7 ffa4 	bl	80091c4 <HAL_GetTick>
 801127c:	4602      	mov	r2, r0
 801127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	2b64      	cmp	r3, #100	@ 0x64
 8011284:	d901      	bls.n	801128a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8011286:	2303      	movs	r3, #3
 8011288:	e1a2      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801128a:	4b12      	ldr	r3, [pc, #72]	@ (80112d4 <HAL_RCC_OscConfig+0x4a8>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011292:	2b00      	cmp	r3, #0
 8011294:	d0f0      	beq.n	8011278 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d106      	bne.n	80112ac <HAL_RCC_OscConfig+0x480>
 801129e:	4b0c      	ldr	r3, [pc, #48]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80112a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112a2:	4a0b      	ldr	r2, [pc, #44]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80112a4:	f043 0301 	orr.w	r3, r3, #1
 80112a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80112aa:	e032      	b.n	8011312 <HAL_RCC_OscConfig+0x4e6>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d111      	bne.n	80112d8 <HAL_RCC_OscConfig+0x4ac>
 80112b4:	4b06      	ldr	r3, [pc, #24]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80112b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112b8:	4a05      	ldr	r2, [pc, #20]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80112ba:	f023 0301 	bic.w	r3, r3, #1
 80112be:	6713      	str	r3, [r2, #112]	@ 0x70
 80112c0:	4b03      	ldr	r3, [pc, #12]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80112c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112c4:	4a02      	ldr	r2, [pc, #8]	@ (80112d0 <HAL_RCC_OscConfig+0x4a4>)
 80112c6:	f023 0304 	bic.w	r3, r3, #4
 80112ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80112cc:	e021      	b.n	8011312 <HAL_RCC_OscConfig+0x4e6>
 80112ce:	bf00      	nop
 80112d0:	58024400 	.word	0x58024400
 80112d4:	58024800 	.word	0x58024800
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	2b05      	cmp	r3, #5
 80112de:	d10c      	bne.n	80112fa <HAL_RCC_OscConfig+0x4ce>
 80112e0:	4b83      	ldr	r3, [pc, #524]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80112e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112e4:	4a82      	ldr	r2, [pc, #520]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80112e6:	f043 0304 	orr.w	r3, r3, #4
 80112ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80112ec:	4b80      	ldr	r3, [pc, #512]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80112ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112f0:	4a7f      	ldr	r2, [pc, #508]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80112f2:	f043 0301 	orr.w	r3, r3, #1
 80112f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80112f8:	e00b      	b.n	8011312 <HAL_RCC_OscConfig+0x4e6>
 80112fa:	4b7d      	ldr	r3, [pc, #500]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80112fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112fe:	4a7c      	ldr	r2, [pc, #496]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011300:	f023 0301 	bic.w	r3, r3, #1
 8011304:	6713      	str	r3, [r2, #112]	@ 0x70
 8011306:	4b7a      	ldr	r3, [pc, #488]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801130a:	4a79      	ldr	r2, [pc, #484]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801130c:	f023 0304 	bic.w	r3, r3, #4
 8011310:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	689b      	ldr	r3, [r3, #8]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d015      	beq.n	8011346 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801131a:	f7f7 ff53 	bl	80091c4 <HAL_GetTick>
 801131e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011320:	e00a      	b.n	8011338 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011322:	f7f7 ff4f 	bl	80091c4 <HAL_GetTick>
 8011326:	4602      	mov	r2, r0
 8011328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011330:	4293      	cmp	r3, r2
 8011332:	d901      	bls.n	8011338 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8011334:	2303      	movs	r3, #3
 8011336:	e14b      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011338:	4b6d      	ldr	r3, [pc, #436]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801133a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801133c:	f003 0302 	and.w	r3, r3, #2
 8011340:	2b00      	cmp	r3, #0
 8011342:	d0ee      	beq.n	8011322 <HAL_RCC_OscConfig+0x4f6>
 8011344:	e014      	b.n	8011370 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011346:	f7f7 ff3d 	bl	80091c4 <HAL_GetTick>
 801134a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801134c:	e00a      	b.n	8011364 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801134e:	f7f7 ff39 	bl	80091c4 <HAL_GetTick>
 8011352:	4602      	mov	r2, r0
 8011354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	f241 3288 	movw	r2, #5000	@ 0x1388
 801135c:	4293      	cmp	r3, r2
 801135e:	d901      	bls.n	8011364 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011360:	2303      	movs	r3, #3
 8011362:	e135      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011364:	4b62      	ldr	r3, [pc, #392]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011368:	f003 0302 	and.w	r3, r3, #2
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1ee      	bne.n	801134e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011374:	2b00      	cmp	r3, #0
 8011376:	f000 812a 	beq.w	80115ce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801137a:	4b5d      	ldr	r3, [pc, #372]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801137c:	691b      	ldr	r3, [r3, #16]
 801137e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011382:	2b18      	cmp	r3, #24
 8011384:	f000 80ba 	beq.w	80114fc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801138c:	2b02      	cmp	r3, #2
 801138e:	f040 8095 	bne.w	80114bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011392:	4b57      	ldr	r3, [pc, #348]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	4a56      	ldr	r2, [pc, #344]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011398:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801139c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801139e:	f7f7 ff11 	bl	80091c4 <HAL_GetTick>
 80113a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80113a4:	e008      	b.n	80113b8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80113a6:	f7f7 ff0d 	bl	80091c4 <HAL_GetTick>
 80113aa:	4602      	mov	r2, r0
 80113ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	2b02      	cmp	r3, #2
 80113b2:	d901      	bls.n	80113b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	e10b      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80113b8:	4b4d      	ldr	r3, [pc, #308]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d1f0      	bne.n	80113a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80113c4:	4b4a      	ldr	r3, [pc, #296]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80113c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80113c8:	4b4a      	ldr	r3, [pc, #296]	@ (80114f4 <HAL_RCC_OscConfig+0x6c8>)
 80113ca:	4013      	ands	r3, r2
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80113d4:	0112      	lsls	r2, r2, #4
 80113d6:	430a      	orrs	r2, r1
 80113d8:	4945      	ldr	r1, [pc, #276]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80113da:	4313      	orrs	r3, r2
 80113dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113e2:	3b01      	subs	r3, #1
 80113e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113ec:	3b01      	subs	r3, #1
 80113ee:	025b      	lsls	r3, r3, #9
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	431a      	orrs	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113f8:	3b01      	subs	r3, #1
 80113fa:	041b      	lsls	r3, r3, #16
 80113fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011400:	431a      	orrs	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011406:	3b01      	subs	r3, #1
 8011408:	061b      	lsls	r3, r3, #24
 801140a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801140e:	4938      	ldr	r1, [pc, #224]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011410:	4313      	orrs	r3, r2
 8011412:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011414:	4b36      	ldr	r3, [pc, #216]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011418:	4a35      	ldr	r2, [pc, #212]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801141a:	f023 0301 	bic.w	r3, r3, #1
 801141e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011420:	4b33      	ldr	r3, [pc, #204]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011424:	4b34      	ldr	r3, [pc, #208]	@ (80114f8 <HAL_RCC_OscConfig+0x6cc>)
 8011426:	4013      	ands	r3, r2
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801142c:	00d2      	lsls	r2, r2, #3
 801142e:	4930      	ldr	r1, [pc, #192]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011430:	4313      	orrs	r3, r2
 8011432:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011434:	4b2e      	ldr	r3, [pc, #184]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011438:	f023 020c 	bic.w	r2, r3, #12
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011440:	492b      	ldr	r1, [pc, #172]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011442:	4313      	orrs	r3, r2
 8011444:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011446:	4b2a      	ldr	r3, [pc, #168]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801144a:	f023 0202 	bic.w	r2, r3, #2
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011452:	4927      	ldr	r1, [pc, #156]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011454:	4313      	orrs	r3, r2
 8011456:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011458:	4b25      	ldr	r3, [pc, #148]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145c:	4a24      	ldr	r2, [pc, #144]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801145e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011464:	4b22      	ldr	r3, [pc, #136]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011468:	4a21      	ldr	r2, [pc, #132]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801146a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801146e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011470:	4b1f      	ldr	r3, [pc, #124]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011474:	4a1e      	ldr	r2, [pc, #120]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801147a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801147c:	4b1c      	ldr	r3, [pc, #112]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801147e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011480:	4a1b      	ldr	r2, [pc, #108]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 8011482:	f043 0301 	orr.w	r3, r3, #1
 8011486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011488:	4b19      	ldr	r3, [pc, #100]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a18      	ldr	r2, [pc, #96]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 801148e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011494:	f7f7 fe96 	bl	80091c4 <HAL_GetTick>
 8011498:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801149a:	e008      	b.n	80114ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801149c:	f7f7 fe92 	bl	80091c4 <HAL_GetTick>
 80114a0:	4602      	mov	r2, r0
 80114a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	d901      	bls.n	80114ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80114aa:	2303      	movs	r3, #3
 80114ac:	e090      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80114ae:	4b10      	ldr	r3, [pc, #64]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d0f0      	beq.n	801149c <HAL_RCC_OscConfig+0x670>
 80114ba:	e088      	b.n	80115ce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80114bc:	4b0c      	ldr	r3, [pc, #48]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4a0b      	ldr	r2, [pc, #44]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80114c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80114c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114c8:	f7f7 fe7c 	bl	80091c4 <HAL_GetTick>
 80114cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80114ce:	e008      	b.n	80114e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80114d0:	f7f7 fe78 	bl	80091c4 <HAL_GetTick>
 80114d4:	4602      	mov	r2, r0
 80114d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	2b02      	cmp	r3, #2
 80114dc:	d901      	bls.n	80114e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80114de:	2303      	movs	r3, #3
 80114e0:	e076      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80114e2:	4b03      	ldr	r3, [pc, #12]	@ (80114f0 <HAL_RCC_OscConfig+0x6c4>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1f0      	bne.n	80114d0 <HAL_RCC_OscConfig+0x6a4>
 80114ee:	e06e      	b.n	80115ce <HAL_RCC_OscConfig+0x7a2>
 80114f0:	58024400 	.word	0x58024400
 80114f4:	fffffc0c 	.word	0xfffffc0c
 80114f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80114fc:	4b36      	ldr	r3, [pc, #216]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 80114fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011500:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011502:	4b35      	ldr	r3, [pc, #212]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 8011504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011506:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801150c:	2b01      	cmp	r3, #1
 801150e:	d031      	beq.n	8011574 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	f003 0203 	and.w	r2, r3, #3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801151a:	429a      	cmp	r2, r3
 801151c:	d12a      	bne.n	8011574 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	091b      	lsrs	r3, r3, #4
 8011522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801152a:	429a      	cmp	r2, r3
 801152c:	d122      	bne.n	8011574 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011538:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801153a:	429a      	cmp	r2, r3
 801153c:	d11a      	bne.n	8011574 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	0a5b      	lsrs	r3, r3, #9
 8011542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801154a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801154c:	429a      	cmp	r2, r3
 801154e:	d111      	bne.n	8011574 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	0c1b      	lsrs	r3, r3, #16
 8011554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801155c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801155e:	429a      	cmp	r2, r3
 8011560:	d108      	bne.n	8011574 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	0e1b      	lsrs	r3, r3, #24
 8011566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801156e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011570:	429a      	cmp	r2, r3
 8011572:	d001      	beq.n	8011578 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011574:	2301      	movs	r3, #1
 8011576:	e02b      	b.n	80115d0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011578:	4b17      	ldr	r3, [pc, #92]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 801157a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801157c:	08db      	lsrs	r3, r3, #3
 801157e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011582:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011588:	693a      	ldr	r2, [r7, #16]
 801158a:	429a      	cmp	r2, r3
 801158c:	d01f      	beq.n	80115ce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801158e:	4b12      	ldr	r3, [pc, #72]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 8011590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011592:	4a11      	ldr	r2, [pc, #68]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 8011594:	f023 0301 	bic.w	r3, r3, #1
 8011598:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801159a:	f7f7 fe13 	bl	80091c4 <HAL_GetTick>
 801159e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80115a0:	bf00      	nop
 80115a2:	f7f7 fe0f 	bl	80091c4 <HAL_GetTick>
 80115a6:	4602      	mov	r2, r0
 80115a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d0f9      	beq.n	80115a2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80115ae:	4b0a      	ldr	r3, [pc, #40]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 80115b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80115b2:	4b0a      	ldr	r3, [pc, #40]	@ (80115dc <HAL_RCC_OscConfig+0x7b0>)
 80115b4:	4013      	ands	r3, r2
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80115ba:	00d2      	lsls	r2, r2, #3
 80115bc:	4906      	ldr	r1, [pc, #24]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 80115be:	4313      	orrs	r3, r2
 80115c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80115c2:	4b05      	ldr	r3, [pc, #20]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 80115c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c6:	4a04      	ldr	r2, [pc, #16]	@ (80115d8 <HAL_RCC_OscConfig+0x7ac>)
 80115c8:	f043 0301 	orr.w	r3, r3, #1
 80115cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80115ce:	2300      	movs	r3, #0
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3730      	adds	r7, #48	@ 0x30
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	58024400 	.word	0x58024400
 80115dc:	ffff0007 	.word	0xffff0007

080115e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b086      	sub	sp, #24
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d101      	bne.n	80115f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80115f0:	2301      	movs	r3, #1
 80115f2:	e19c      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80115f4:	4b8a      	ldr	r3, [pc, #552]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f003 030f 	and.w	r3, r3, #15
 80115fc:	683a      	ldr	r2, [r7, #0]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d910      	bls.n	8011624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011602:	4b87      	ldr	r3, [pc, #540]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f023 020f 	bic.w	r2, r3, #15
 801160a:	4985      	ldr	r1, [pc, #532]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	4313      	orrs	r3, r2
 8011610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011612:	4b83      	ldr	r3, [pc, #524]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	f003 030f 	and.w	r3, r3, #15
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	429a      	cmp	r2, r3
 801161e:	d001      	beq.n	8011624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011620:	2301      	movs	r3, #1
 8011622:	e184      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f003 0304 	and.w	r3, r3, #4
 801162c:	2b00      	cmp	r3, #0
 801162e:	d010      	beq.n	8011652 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	691a      	ldr	r2, [r3, #16]
 8011634:	4b7b      	ldr	r3, [pc, #492]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011636:	699b      	ldr	r3, [r3, #24]
 8011638:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801163c:	429a      	cmp	r2, r3
 801163e:	d908      	bls.n	8011652 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011640:	4b78      	ldr	r3, [pc, #480]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011642:	699b      	ldr	r3, [r3, #24]
 8011644:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	691b      	ldr	r3, [r3, #16]
 801164c:	4975      	ldr	r1, [pc, #468]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 801164e:	4313      	orrs	r3, r2
 8011650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f003 0308 	and.w	r3, r3, #8
 801165a:	2b00      	cmp	r3, #0
 801165c:	d010      	beq.n	8011680 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	695a      	ldr	r2, [r3, #20]
 8011662:	4b70      	ldr	r3, [pc, #448]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011664:	69db      	ldr	r3, [r3, #28]
 8011666:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801166a:	429a      	cmp	r2, r3
 801166c:	d908      	bls.n	8011680 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801166e:	4b6d      	ldr	r3, [pc, #436]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011670:	69db      	ldr	r3, [r3, #28]
 8011672:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	695b      	ldr	r3, [r3, #20]
 801167a:	496a      	ldr	r1, [pc, #424]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 801167c:	4313      	orrs	r3, r2
 801167e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f003 0310 	and.w	r3, r3, #16
 8011688:	2b00      	cmp	r3, #0
 801168a:	d010      	beq.n	80116ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	699a      	ldr	r2, [r3, #24]
 8011690:	4b64      	ldr	r3, [pc, #400]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011692:	69db      	ldr	r3, [r3, #28]
 8011694:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011698:	429a      	cmp	r2, r3
 801169a:	d908      	bls.n	80116ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801169c:	4b61      	ldr	r3, [pc, #388]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 801169e:	69db      	ldr	r3, [r3, #28]
 80116a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	495e      	ldr	r1, [pc, #376]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80116aa:	4313      	orrs	r3, r2
 80116ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f003 0320 	and.w	r3, r3, #32
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d010      	beq.n	80116dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	69da      	ldr	r2, [r3, #28]
 80116be:	4b59      	ldr	r3, [pc, #356]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80116c0:	6a1b      	ldr	r3, [r3, #32]
 80116c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d908      	bls.n	80116dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80116ca:	4b56      	ldr	r3, [pc, #344]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	69db      	ldr	r3, [r3, #28]
 80116d6:	4953      	ldr	r1, [pc, #332]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80116d8:	4313      	orrs	r3, r2
 80116da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f003 0302 	and.w	r3, r3, #2
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d010      	beq.n	801170a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	68da      	ldr	r2, [r3, #12]
 80116ec:	4b4d      	ldr	r3, [pc, #308]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80116ee:	699b      	ldr	r3, [r3, #24]
 80116f0:	f003 030f 	and.w	r3, r3, #15
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d908      	bls.n	801170a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80116f8:	4b4a      	ldr	r3, [pc, #296]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80116fa:	699b      	ldr	r3, [r3, #24]
 80116fc:	f023 020f 	bic.w	r2, r3, #15
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	4947      	ldr	r1, [pc, #284]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011706:	4313      	orrs	r3, r2
 8011708:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	2b00      	cmp	r3, #0
 8011714:	d055      	beq.n	80117c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011716:	4b43      	ldr	r3, [pc, #268]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011718:	699b      	ldr	r3, [r3, #24]
 801171a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	4940      	ldr	r1, [pc, #256]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011724:	4313      	orrs	r3, r2
 8011726:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	2b02      	cmp	r3, #2
 801172e:	d107      	bne.n	8011740 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011730:	4b3c      	ldr	r3, [pc, #240]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011738:	2b00      	cmp	r3, #0
 801173a:	d121      	bne.n	8011780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	e0f6      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	2b03      	cmp	r3, #3
 8011746:	d107      	bne.n	8011758 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011748:	4b36      	ldr	r3, [pc, #216]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011750:	2b00      	cmp	r3, #0
 8011752:	d115      	bne.n	8011780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011754:	2301      	movs	r3, #1
 8011756:	e0ea      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d107      	bne.n	8011770 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011760:	4b30      	ldr	r3, [pc, #192]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011768:	2b00      	cmp	r3, #0
 801176a:	d109      	bne.n	8011780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801176c:	2301      	movs	r3, #1
 801176e:	e0de      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011770:	4b2c      	ldr	r3, [pc, #176]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f003 0304 	and.w	r3, r3, #4
 8011778:	2b00      	cmp	r3, #0
 801177a:	d101      	bne.n	8011780 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801177c:	2301      	movs	r3, #1
 801177e:	e0d6      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011780:	4b28      	ldr	r3, [pc, #160]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	f023 0207 	bic.w	r2, r3, #7
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	4925      	ldr	r1, [pc, #148]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 801178e:	4313      	orrs	r3, r2
 8011790:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011792:	f7f7 fd17 	bl	80091c4 <HAL_GetTick>
 8011796:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011798:	e00a      	b.n	80117b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801179a:	f7f7 fd13 	bl	80091c4 <HAL_GetTick>
 801179e:	4602      	mov	r2, r0
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d901      	bls.n	80117b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80117ac:	2303      	movs	r3, #3
 80117ae:	e0be      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80117b0:	4b1c      	ldr	r3, [pc, #112]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	00db      	lsls	r3, r3, #3
 80117be:	429a      	cmp	r2, r3
 80117c0:	d1eb      	bne.n	801179a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f003 0302 	and.w	r3, r3, #2
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d010      	beq.n	80117f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	68da      	ldr	r2, [r3, #12]
 80117d2:	4b14      	ldr	r3, [pc, #80]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80117d4:	699b      	ldr	r3, [r3, #24]
 80117d6:	f003 030f 	and.w	r3, r3, #15
 80117da:	429a      	cmp	r2, r3
 80117dc:	d208      	bcs.n	80117f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80117de:	4b11      	ldr	r3, [pc, #68]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80117e0:	699b      	ldr	r3, [r3, #24]
 80117e2:	f023 020f 	bic.w	r2, r3, #15
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	490e      	ldr	r1, [pc, #56]	@ (8011824 <HAL_RCC_ClockConfig+0x244>)
 80117ec:	4313      	orrs	r3, r2
 80117ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80117f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	f003 030f 	and.w	r3, r3, #15
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d214      	bcs.n	8011828 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80117fe:	4b08      	ldr	r3, [pc, #32]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f023 020f 	bic.w	r2, r3, #15
 8011806:	4906      	ldr	r1, [pc, #24]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	4313      	orrs	r3, r2
 801180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801180e:	4b04      	ldr	r3, [pc, #16]	@ (8011820 <HAL_RCC_ClockConfig+0x240>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f003 030f 	and.w	r3, r3, #15
 8011816:	683a      	ldr	r2, [r7, #0]
 8011818:	429a      	cmp	r2, r3
 801181a:	d005      	beq.n	8011828 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801181c:	2301      	movs	r3, #1
 801181e:	e086      	b.n	801192e <HAL_RCC_ClockConfig+0x34e>
 8011820:	52002000 	.word	0x52002000
 8011824:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f003 0304 	and.w	r3, r3, #4
 8011830:	2b00      	cmp	r3, #0
 8011832:	d010      	beq.n	8011856 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	691a      	ldr	r2, [r3, #16]
 8011838:	4b3f      	ldr	r3, [pc, #252]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011840:	429a      	cmp	r2, r3
 8011842:	d208      	bcs.n	8011856 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011844:	4b3c      	ldr	r3, [pc, #240]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011846:	699b      	ldr	r3, [r3, #24]
 8011848:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	691b      	ldr	r3, [r3, #16]
 8011850:	4939      	ldr	r1, [pc, #228]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011852:	4313      	orrs	r3, r2
 8011854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f003 0308 	and.w	r3, r3, #8
 801185e:	2b00      	cmp	r3, #0
 8011860:	d010      	beq.n	8011884 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	695a      	ldr	r2, [r3, #20]
 8011866:	4b34      	ldr	r3, [pc, #208]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011868:	69db      	ldr	r3, [r3, #28]
 801186a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801186e:	429a      	cmp	r2, r3
 8011870:	d208      	bcs.n	8011884 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011872:	4b31      	ldr	r3, [pc, #196]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011874:	69db      	ldr	r3, [r3, #28]
 8011876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	492e      	ldr	r1, [pc, #184]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011880:	4313      	orrs	r3, r2
 8011882:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f003 0310 	and.w	r3, r3, #16
 801188c:	2b00      	cmp	r3, #0
 801188e:	d010      	beq.n	80118b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	699a      	ldr	r2, [r3, #24]
 8011894:	4b28      	ldr	r3, [pc, #160]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801189c:	429a      	cmp	r2, r3
 801189e:	d208      	bcs.n	80118b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80118a0:	4b25      	ldr	r3, [pc, #148]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 80118a2:	69db      	ldr	r3, [r3, #28]
 80118a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	699b      	ldr	r3, [r3, #24]
 80118ac:	4922      	ldr	r1, [pc, #136]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 80118ae:	4313      	orrs	r3, r2
 80118b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f003 0320 	and.w	r3, r3, #32
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d010      	beq.n	80118e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	69da      	ldr	r2, [r3, #28]
 80118c2:	4b1d      	ldr	r3, [pc, #116]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 80118c4:	6a1b      	ldr	r3, [r3, #32]
 80118c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d208      	bcs.n	80118e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80118ce:	4b1a      	ldr	r3, [pc, #104]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 80118d0:	6a1b      	ldr	r3, [r3, #32]
 80118d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	69db      	ldr	r3, [r3, #28]
 80118da:	4917      	ldr	r1, [pc, #92]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 80118dc:	4313      	orrs	r3, r2
 80118de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80118e0:	f000 f834 	bl	801194c <HAL_RCC_GetSysClockFreq>
 80118e4:	4602      	mov	r2, r0
 80118e6:	4b14      	ldr	r3, [pc, #80]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 80118e8:	699b      	ldr	r3, [r3, #24]
 80118ea:	0a1b      	lsrs	r3, r3, #8
 80118ec:	f003 030f 	and.w	r3, r3, #15
 80118f0:	4912      	ldr	r1, [pc, #72]	@ (801193c <HAL_RCC_ClockConfig+0x35c>)
 80118f2:	5ccb      	ldrb	r3, [r1, r3]
 80118f4:	f003 031f 	and.w	r3, r3, #31
 80118f8:	fa22 f303 	lsr.w	r3, r2, r3
 80118fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80118fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011938 <HAL_RCC_ClockConfig+0x358>)
 8011900:	699b      	ldr	r3, [r3, #24]
 8011902:	f003 030f 	and.w	r3, r3, #15
 8011906:	4a0d      	ldr	r2, [pc, #52]	@ (801193c <HAL_RCC_ClockConfig+0x35c>)
 8011908:	5cd3      	ldrb	r3, [r2, r3]
 801190a:	f003 031f 	and.w	r3, r3, #31
 801190e:	693a      	ldr	r2, [r7, #16]
 8011910:	fa22 f303 	lsr.w	r3, r2, r3
 8011914:	4a0a      	ldr	r2, [pc, #40]	@ (8011940 <HAL_RCC_ClockConfig+0x360>)
 8011916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011918:	4a0a      	ldr	r2, [pc, #40]	@ (8011944 <HAL_RCC_ClockConfig+0x364>)
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801191e:	4b0a      	ldr	r3, [pc, #40]	@ (8011948 <HAL_RCC_ClockConfig+0x368>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	4618      	mov	r0, r3
 8011924:	f7f7 fc04 	bl	8009130 <HAL_InitTick>
 8011928:	4603      	mov	r3, r0
 801192a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801192c:	7bfb      	ldrb	r3, [r7, #15]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3718      	adds	r7, #24
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	58024400 	.word	0x58024400
 801193c:	0801e83c 	.word	0x0801e83c
 8011940:	24000008 	.word	0x24000008
 8011944:	24000004 	.word	0x24000004
 8011948:	2400000c 	.word	0x2400000c

0801194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801194c:	b480      	push	{r7}
 801194e:	b089      	sub	sp, #36	@ 0x24
 8011950:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011952:	4bb3      	ldr	r3, [pc, #716]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801195a:	2b18      	cmp	r3, #24
 801195c:	f200 8155 	bhi.w	8011c0a <HAL_RCC_GetSysClockFreq+0x2be>
 8011960:	a201      	add	r2, pc, #4	@ (adr r2, 8011968 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011966:	bf00      	nop
 8011968:	080119cd 	.word	0x080119cd
 801196c:	08011c0b 	.word	0x08011c0b
 8011970:	08011c0b 	.word	0x08011c0b
 8011974:	08011c0b 	.word	0x08011c0b
 8011978:	08011c0b 	.word	0x08011c0b
 801197c:	08011c0b 	.word	0x08011c0b
 8011980:	08011c0b 	.word	0x08011c0b
 8011984:	08011c0b 	.word	0x08011c0b
 8011988:	080119f3 	.word	0x080119f3
 801198c:	08011c0b 	.word	0x08011c0b
 8011990:	08011c0b 	.word	0x08011c0b
 8011994:	08011c0b 	.word	0x08011c0b
 8011998:	08011c0b 	.word	0x08011c0b
 801199c:	08011c0b 	.word	0x08011c0b
 80119a0:	08011c0b 	.word	0x08011c0b
 80119a4:	08011c0b 	.word	0x08011c0b
 80119a8:	080119f9 	.word	0x080119f9
 80119ac:	08011c0b 	.word	0x08011c0b
 80119b0:	08011c0b 	.word	0x08011c0b
 80119b4:	08011c0b 	.word	0x08011c0b
 80119b8:	08011c0b 	.word	0x08011c0b
 80119bc:	08011c0b 	.word	0x08011c0b
 80119c0:	08011c0b 	.word	0x08011c0b
 80119c4:	08011c0b 	.word	0x08011c0b
 80119c8:	080119ff 	.word	0x080119ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119cc:	4b94      	ldr	r3, [pc, #592]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f003 0320 	and.w	r3, r3, #32
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d009      	beq.n	80119ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80119d8:	4b91      	ldr	r3, [pc, #580]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	08db      	lsrs	r3, r3, #3
 80119de:	f003 0303 	and.w	r3, r3, #3
 80119e2:	4a90      	ldr	r2, [pc, #576]	@ (8011c24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80119e4:	fa22 f303 	lsr.w	r3, r2, r3
 80119e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80119ea:	e111      	b.n	8011c10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80119ec:	4b8d      	ldr	r3, [pc, #564]	@ (8011c24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80119ee:	61bb      	str	r3, [r7, #24]
      break;
 80119f0:	e10e      	b.n	8011c10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80119f2:	4b8d      	ldr	r3, [pc, #564]	@ (8011c28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80119f4:	61bb      	str	r3, [r7, #24]
      break;
 80119f6:	e10b      	b.n	8011c10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80119f8:	4b8c      	ldr	r3, [pc, #560]	@ (8011c2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80119fa:	61bb      	str	r3, [r7, #24]
      break;
 80119fc:	e108      	b.n	8011c10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80119fe:	4b88      	ldr	r3, [pc, #544]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a02:	f003 0303 	and.w	r3, r3, #3
 8011a06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011a08:	4b85      	ldr	r3, [pc, #532]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a0c:	091b      	lsrs	r3, r3, #4
 8011a0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011a14:	4b82      	ldr	r3, [pc, #520]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a18:	f003 0301 	and.w	r3, r3, #1
 8011a1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011a1e:	4b80      	ldr	r3, [pc, #512]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a22:	08db      	lsrs	r3, r3, #3
 8011a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a28:	68fa      	ldr	r2, [r7, #12]
 8011a2a:	fb02 f303 	mul.w	r3, r2, r3
 8011a2e:	ee07 3a90 	vmov	s15, r3
 8011a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f000 80e1 	beq.w	8011c04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	f000 8083 	beq.w	8011b50 <HAL_RCC_GetSysClockFreq+0x204>
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	f200 80a1 	bhi.w	8011b94 <HAL_RCC_GetSysClockFreq+0x248>
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d003      	beq.n	8011a60 <HAL_RCC_GetSysClockFreq+0x114>
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d056      	beq.n	8011b0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8011a5e:	e099      	b.n	8011b94 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a60:	4b6f      	ldr	r3, [pc, #444]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f003 0320 	and.w	r3, r3, #32
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d02d      	beq.n	8011ac8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	08db      	lsrs	r3, r3, #3
 8011a72:	f003 0303 	and.w	r3, r3, #3
 8011a76:	4a6b      	ldr	r2, [pc, #428]	@ (8011c24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011a78:	fa22 f303 	lsr.w	r3, r2, r3
 8011a7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	ee07 3a90 	vmov	s15, r3
 8011a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	ee07 3a90 	vmov	s15, r3
 8011a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a96:	4b62      	ldr	r3, [pc, #392]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a9e:	ee07 3a90 	vmov	s15, r3
 8011aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011aaa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011ac6:	e087      	b.n	8011bd8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	ee07 3a90 	vmov	s15, r3
 8011ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ad2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011c34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ada:	4b51      	ldr	r3, [pc, #324]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ae2:	ee07 3a90 	vmov	s15, r3
 8011ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8011aee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b0a:	e065      	b.n	8011bd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	ee07 3a90 	vmov	s15, r3
 8011b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b16:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011c38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b1e:	4b40      	ldr	r3, [pc, #256]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b26:	ee07 3a90 	vmov	s15, r3
 8011b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b32:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b4e:	e043      	b.n	8011bd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	ee07 3a90 	vmov	s15, r3
 8011b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b5a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011c3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8011b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b62:	4b2f      	ldr	r3, [pc, #188]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b6a:	ee07 3a90 	vmov	s15, r3
 8011b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b76:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b92:	e021      	b.n	8011bd8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	ee07 3a90 	vmov	s15, r3
 8011b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b9e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011c38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bae:	ee07 3a90 	vmov	s15, r3
 8011bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011bba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011c30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011bd6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011bd8:	4b11      	ldr	r3, [pc, #68]	@ (8011c20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bdc:	0a5b      	lsrs	r3, r3, #9
 8011bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011be2:	3301      	adds	r3, #1
 8011be4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	ee07 3a90 	vmov	s15, r3
 8011bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011bfc:	ee17 3a90 	vmov	r3, s15
 8011c00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011c02:	e005      	b.n	8011c10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011c04:	2300      	movs	r3, #0
 8011c06:	61bb      	str	r3, [r7, #24]
      break;
 8011c08:	e002      	b.n	8011c10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011c0a:	4b07      	ldr	r3, [pc, #28]	@ (8011c28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011c0c:	61bb      	str	r3, [r7, #24]
      break;
 8011c0e:	bf00      	nop
  }

  return sysclockfreq;
 8011c10:	69bb      	ldr	r3, [r7, #24]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3724      	adds	r7, #36	@ 0x24
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop
 8011c20:	58024400 	.word	0x58024400
 8011c24:	03d09000 	.word	0x03d09000
 8011c28:	003d0900 	.word	0x003d0900
 8011c2c:	016e3600 	.word	0x016e3600
 8011c30:	46000000 	.word	0x46000000
 8011c34:	4c742400 	.word	0x4c742400
 8011c38:	4a742400 	.word	0x4a742400
 8011c3c:	4bb71b00 	.word	0x4bb71b00

08011c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011c46:	f7ff fe81 	bl	801194c <HAL_RCC_GetSysClockFreq>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	4b10      	ldr	r3, [pc, #64]	@ (8011c90 <HAL_RCC_GetHCLKFreq+0x50>)
 8011c4e:	699b      	ldr	r3, [r3, #24]
 8011c50:	0a1b      	lsrs	r3, r3, #8
 8011c52:	f003 030f 	and.w	r3, r3, #15
 8011c56:	490f      	ldr	r1, [pc, #60]	@ (8011c94 <HAL_RCC_GetHCLKFreq+0x54>)
 8011c58:	5ccb      	ldrb	r3, [r1, r3]
 8011c5a:	f003 031f 	and.w	r3, r3, #31
 8011c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8011c62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011c64:	4b0a      	ldr	r3, [pc, #40]	@ (8011c90 <HAL_RCC_GetHCLKFreq+0x50>)
 8011c66:	699b      	ldr	r3, [r3, #24]
 8011c68:	f003 030f 	and.w	r3, r3, #15
 8011c6c:	4a09      	ldr	r2, [pc, #36]	@ (8011c94 <HAL_RCC_GetHCLKFreq+0x54>)
 8011c6e:	5cd3      	ldrb	r3, [r2, r3]
 8011c70:	f003 031f 	and.w	r3, r3, #31
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	fa22 f303 	lsr.w	r3, r2, r3
 8011c7a:	4a07      	ldr	r2, [pc, #28]	@ (8011c98 <HAL_RCC_GetHCLKFreq+0x58>)
 8011c7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011c7e:	4a07      	ldr	r2, [pc, #28]	@ (8011c9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011c84:	4b04      	ldr	r3, [pc, #16]	@ (8011c98 <HAL_RCC_GetHCLKFreq+0x58>)
 8011c86:	681b      	ldr	r3, [r3, #0]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	58024400 	.word	0x58024400
 8011c94:	0801e83c 	.word	0x0801e83c
 8011c98:	24000008 	.word	0x24000008
 8011c9c:	24000004 	.word	0x24000004

08011ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011ca4:	f7ff ffcc 	bl	8011c40 <HAL_RCC_GetHCLKFreq>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	4b06      	ldr	r3, [pc, #24]	@ (8011cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011cac:	69db      	ldr	r3, [r3, #28]
 8011cae:	091b      	lsrs	r3, r3, #4
 8011cb0:	f003 0307 	and.w	r3, r3, #7
 8011cb4:	4904      	ldr	r1, [pc, #16]	@ (8011cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011cb6:	5ccb      	ldrb	r3, [r1, r3]
 8011cb8:	f003 031f 	and.w	r3, r3, #31
 8011cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	58024400 	.word	0x58024400
 8011cc8:	0801e83c 	.word	0x0801e83c

08011ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011cd0:	f7ff ffb6 	bl	8011c40 <HAL_RCC_GetHCLKFreq>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	4b06      	ldr	r3, [pc, #24]	@ (8011cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011cd8:	69db      	ldr	r3, [r3, #28]
 8011cda:	0a1b      	lsrs	r3, r3, #8
 8011cdc:	f003 0307 	and.w	r3, r3, #7
 8011ce0:	4904      	ldr	r1, [pc, #16]	@ (8011cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011ce2:	5ccb      	ldrb	r3, [r1, r3]
 8011ce4:	f003 031f 	and.w	r3, r3, #31
 8011ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	58024400 	.word	0x58024400
 8011cf4:	0801e83c 	.word	0x0801e83c

08011cf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011cfc:	b0c6      	sub	sp, #280	@ 0x118
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011d04:	2300      	movs	r3, #0
 8011d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011d1c:	2500      	movs	r5, #0
 8011d1e:	ea54 0305 	orrs.w	r3, r4, r5
 8011d22:	d049      	beq.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011d2e:	d02f      	beq.n	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011d30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011d34:	d828      	bhi.n	8011d88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011d3a:	d01a      	beq.n	8011d72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011d3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011d40:	d822      	bhi.n	8011d88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d003      	beq.n	8011d4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011d4a:	d007      	beq.n	8011d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011d4c:	e01c      	b.n	8011d88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d4e:	4bab      	ldr	r3, [pc, #684]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d52:	4aaa      	ldr	r2, [pc, #680]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011d5a:	e01a      	b.n	8011d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d60:	3308      	adds	r3, #8
 8011d62:	2102      	movs	r1, #2
 8011d64:	4618      	mov	r0, r3
 8011d66:	f002 fa49 	bl	80141fc <RCCEx_PLL2_Config>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011d70:	e00f      	b.n	8011d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d76:	3328      	adds	r3, #40	@ 0x28
 8011d78:	2102      	movs	r1, #2
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f002 faf0 	bl	8014360 <RCCEx_PLL3_Config>
 8011d80:	4603      	mov	r3, r0
 8011d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011d86:	e004      	b.n	8011d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d8e:	e000      	b.n	8011d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d10a      	bne.n	8011db0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011d9a:	4b98      	ldr	r3, [pc, #608]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011da8:	4a94      	ldr	r2, [pc, #592]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011daa:	430b      	orrs	r3, r1
 8011dac:	6513      	str	r3, [r2, #80]	@ 0x50
 8011dae:	e003      	b.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011db4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011dc4:	f04f 0900 	mov.w	r9, #0
 8011dc8:	ea58 0309 	orrs.w	r3, r8, r9
 8011dcc:	d047      	beq.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dd4:	2b04      	cmp	r3, #4
 8011dd6:	d82a      	bhi.n	8011e2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8011de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dde:	bf00      	nop
 8011de0:	08011df5 	.word	0x08011df5
 8011de4:	08011e03 	.word	0x08011e03
 8011de8:	08011e19 	.word	0x08011e19
 8011dec:	08011e37 	.word	0x08011e37
 8011df0:	08011e37 	.word	0x08011e37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011df4:	4b81      	ldr	r3, [pc, #516]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011df8:	4a80      	ldr	r2, [pc, #512]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e00:	e01a      	b.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e06:	3308      	adds	r3, #8
 8011e08:	2100      	movs	r1, #0
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f002 f9f6 	bl	80141fc <RCCEx_PLL2_Config>
 8011e10:	4603      	mov	r3, r0
 8011e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e16:	e00f      	b.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e1c:	3328      	adds	r3, #40	@ 0x28
 8011e1e:	2100      	movs	r1, #0
 8011e20:	4618      	mov	r0, r3
 8011e22:	f002 fa9d 	bl	8014360 <RCCEx_PLL3_Config>
 8011e26:	4603      	mov	r3, r0
 8011e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e2c:	e004      	b.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011e34:	e000      	b.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d10a      	bne.n	8011e56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011e40:	4b6e      	ldr	r3, [pc, #440]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e44:	f023 0107 	bic.w	r1, r3, #7
 8011e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e4e:	4a6b      	ldr	r2, [pc, #428]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e50:	430b      	orrs	r3, r1
 8011e52:	6513      	str	r3, [r2, #80]	@ 0x50
 8011e54:	e003      	b.n	8011e5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e66:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011e6a:	f04f 0b00 	mov.w	fp, #0
 8011e6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8011e72:	d05b      	beq.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011e7c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011e80:	d03b      	beq.n	8011efa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011e82:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011e86:	d834      	bhi.n	8011ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011e88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011e8c:	d037      	beq.n	8011efe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011e8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011e92:	d82e      	bhi.n	8011ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011e94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011e98:	d033      	beq.n	8011f02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011e9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011e9e:	d828      	bhi.n	8011ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011ea4:	d01a      	beq.n	8011edc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011eaa:	d822      	bhi.n	8011ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d003      	beq.n	8011eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011eb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011eb4:	d007      	beq.n	8011ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011eb6:	e01c      	b.n	8011ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011eb8:	4b50      	ldr	r3, [pc, #320]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011ec4:	e01e      	b.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eca:	3308      	adds	r3, #8
 8011ecc:	2100      	movs	r1, #0
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f002 f994 	bl	80141fc <RCCEx_PLL2_Config>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011eda:	e013      	b.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ee0:	3328      	adds	r3, #40	@ 0x28
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f002 fa3b 	bl	8014360 <RCCEx_PLL3_Config>
 8011eea:	4603      	mov	r3, r0
 8011eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011ef0:	e008      	b.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011ef8:	e004      	b.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011efa:	bf00      	nop
 8011efc:	e002      	b.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011efe:	bf00      	nop
 8011f00:	e000      	b.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d10b      	bne.n	8011f24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f10:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011f1c:	4a37      	ldr	r2, [pc, #220]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f1e:	430b      	orrs	r3, r1
 8011f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8011f22:	e003      	b.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f34:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011f38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011f42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011f46:	460b      	mov	r3, r1
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	d05d      	beq.n	8012008 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011f54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011f58:	d03b      	beq.n	8011fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011f5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011f5e:	d834      	bhi.n	8011fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011f60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011f64:	d037      	beq.n	8011fd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011f66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011f6a:	d82e      	bhi.n	8011fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011f6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011f70:	d033      	beq.n	8011fda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011f72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011f76:	d828      	bhi.n	8011fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011f78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011f7c:	d01a      	beq.n	8011fb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011f82:	d822      	bhi.n	8011fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d003      	beq.n	8011f90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011f8c:	d007      	beq.n	8011f9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011f8e:	e01c      	b.n	8011fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f90:	4b1a      	ldr	r3, [pc, #104]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f94:	4a19      	ldr	r2, [pc, #100]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011f9c:	e01e      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f002 f928 	bl	80141fc <RCCEx_PLL2_Config>
 8011fac:	4603      	mov	r3, r0
 8011fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011fb2:	e013      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fb8:	3328      	adds	r3, #40	@ 0x28
 8011fba:	2100      	movs	r1, #0
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f002 f9cf 	bl	8014360 <RCCEx_PLL3_Config>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011fc8:	e008      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011fd0:	e004      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011fd2:	bf00      	nop
 8011fd4:	e002      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011fd6:	bf00      	nop
 8011fd8:	e000      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10d      	bne.n	8012000 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011fe4:	4b05      	ldr	r3, [pc, #20]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011fe8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8011fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011ff4:	4a01      	ldr	r2, [pc, #4]	@ (8011ffc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ff6:	430b      	orrs	r3, r1
 8011ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8011ffa:	e005      	b.n	8012008 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012004:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8012008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8012014:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012018:	2300      	movs	r3, #0
 801201a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801201e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8012022:	460b      	mov	r3, r1
 8012024:	4313      	orrs	r3, r2
 8012026:	d03a      	beq.n	801209e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801202e:	2b30      	cmp	r3, #48	@ 0x30
 8012030:	d01f      	beq.n	8012072 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8012032:	2b30      	cmp	r3, #48	@ 0x30
 8012034:	d819      	bhi.n	801206a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8012036:	2b20      	cmp	r3, #32
 8012038:	d00c      	beq.n	8012054 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801203a:	2b20      	cmp	r3, #32
 801203c:	d815      	bhi.n	801206a <HAL_RCCEx_PeriphCLKConfig+0x372>
 801203e:	2b00      	cmp	r3, #0
 8012040:	d019      	beq.n	8012076 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8012042:	2b10      	cmp	r3, #16
 8012044:	d111      	bne.n	801206a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012046:	4baa      	ldr	r3, [pc, #680]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801204a:	4aa9      	ldr	r2, [pc, #676]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012052:	e011      	b.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012058:	3308      	adds	r3, #8
 801205a:	2102      	movs	r1, #2
 801205c:	4618      	mov	r0, r3
 801205e:	f002 f8cd 	bl	80141fc <RCCEx_PLL2_Config>
 8012062:	4603      	mov	r3, r0
 8012064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012068:	e006      	b.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801206a:	2301      	movs	r3, #1
 801206c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012070:	e002      	b.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012072:	bf00      	nop
 8012074:	e000      	b.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10a      	bne.n	8012096 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012080:	4b9b      	ldr	r3, [pc, #620]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012084:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801208e:	4a98      	ldr	r2, [pc, #608]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012090:	430b      	orrs	r3, r1
 8012092:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012094:	e003      	b.n	801209e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801209a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801209e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80120aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80120ae:	2300      	movs	r3, #0
 80120b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80120b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80120b8:	460b      	mov	r3, r1
 80120ba:	4313      	orrs	r3, r2
 80120bc:	d051      	beq.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80120be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80120c8:	d035      	beq.n	8012136 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80120ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80120ce:	d82e      	bhi.n	801212e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80120d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80120d4:	d031      	beq.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80120d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80120da:	d828      	bhi.n	801212e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80120dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80120e0:	d01a      	beq.n	8012118 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80120e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80120e6:	d822      	bhi.n	801212e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d003      	beq.n	80120f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80120ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120f0:	d007      	beq.n	8012102 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80120f2:	e01c      	b.n	801212e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120f4:	4b7e      	ldr	r3, [pc, #504]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120f8:	4a7d      	ldr	r2, [pc, #500]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012100:	e01c      	b.n	801213c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012106:	3308      	adds	r3, #8
 8012108:	2100      	movs	r1, #0
 801210a:	4618      	mov	r0, r3
 801210c:	f002 f876 	bl	80141fc <RCCEx_PLL2_Config>
 8012110:	4603      	mov	r3, r0
 8012112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012116:	e011      	b.n	801213c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801211c:	3328      	adds	r3, #40	@ 0x28
 801211e:	2100      	movs	r1, #0
 8012120:	4618      	mov	r0, r3
 8012122:	f002 f91d 	bl	8014360 <RCCEx_PLL3_Config>
 8012126:	4603      	mov	r3, r0
 8012128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801212c:	e006      	b.n	801213c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801212e:	2301      	movs	r3, #1
 8012130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012134:	e002      	b.n	801213c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012136:	bf00      	nop
 8012138:	e000      	b.n	801213c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801213a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801213c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012140:	2b00      	cmp	r3, #0
 8012142:	d10a      	bne.n	801215a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012144:	4b6a      	ldr	r3, [pc, #424]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012148:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801214c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012152:	4a67      	ldr	r2, [pc, #412]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012154:	430b      	orrs	r3, r1
 8012156:	6513      	str	r3, [r2, #80]	@ 0x50
 8012158:	e003      	b.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801215a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801215e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801216e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012172:	2300      	movs	r3, #0
 8012174:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012178:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801217c:	460b      	mov	r3, r1
 801217e:	4313      	orrs	r3, r2
 8012180:	d053      	beq.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801218c:	d033      	beq.n	80121f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801218e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012192:	d82c      	bhi.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012194:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012198:	d02f      	beq.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 801219a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801219e:	d826      	bhi.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80121a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80121a4:	d02b      	beq.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80121a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80121aa:	d820      	bhi.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80121ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80121b0:	d012      	beq.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80121b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80121b6:	d81a      	bhi.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d022      	beq.n	8012202 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80121bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121c0:	d115      	bne.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80121c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121c6:	3308      	adds	r3, #8
 80121c8:	2101      	movs	r1, #1
 80121ca:	4618      	mov	r0, r3
 80121cc:	f002 f816 	bl	80141fc <RCCEx_PLL2_Config>
 80121d0:	4603      	mov	r3, r0
 80121d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80121d6:	e015      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80121d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121dc:	3328      	adds	r3, #40	@ 0x28
 80121de:	2101      	movs	r1, #1
 80121e0:	4618      	mov	r0, r3
 80121e2:	f002 f8bd 	bl	8014360 <RCCEx_PLL3_Config>
 80121e6:	4603      	mov	r3, r0
 80121e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80121ec:	e00a      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121ee:	2301      	movs	r3, #1
 80121f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121f4:	e006      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80121f6:	bf00      	nop
 80121f8:	e004      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80121fa:	bf00      	nop
 80121fc:	e002      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80121fe:	bf00      	nop
 8012200:	e000      	b.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801220c:	4b38      	ldr	r3, [pc, #224]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801220e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012210:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8012214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801221a:	4a35      	ldr	r2, [pc, #212]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801221c:	430b      	orrs	r3, r1
 801221e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012220:	e003      	b.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012226:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801222a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801223a:	2300      	movs	r3, #0
 801223c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012240:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012244:	460b      	mov	r3, r1
 8012246:	4313      	orrs	r3, r2
 8012248:	d058      	beq.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801224a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801224e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012252:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012256:	d033      	beq.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801225c:	d82c      	bhi.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801225e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012262:	d02f      	beq.n	80122c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012268:	d826      	bhi.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801226a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801226e:	d02b      	beq.n	80122c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012270:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012274:	d820      	bhi.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801227a:	d012      	beq.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801227c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012280:	d81a      	bhi.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012282:	2b00      	cmp	r3, #0
 8012284:	d022      	beq.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801228a:	d115      	bne.n	80122b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801228c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012290:	3308      	adds	r3, #8
 8012292:	2101      	movs	r1, #1
 8012294:	4618      	mov	r0, r3
 8012296:	f001 ffb1 	bl	80141fc <RCCEx_PLL2_Config>
 801229a:	4603      	mov	r3, r0
 801229c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80122a0:	e015      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80122a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a6:	3328      	adds	r3, #40	@ 0x28
 80122a8:	2101      	movs	r1, #1
 80122aa:	4618      	mov	r0, r3
 80122ac:	f002 f858 	bl	8014360 <RCCEx_PLL3_Config>
 80122b0:	4603      	mov	r3, r0
 80122b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80122b6:	e00a      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80122b8:	2301      	movs	r3, #1
 80122ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122be:	e006      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80122c0:	bf00      	nop
 80122c2:	e004      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80122c4:	bf00      	nop
 80122c6:	e002      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80122c8:	bf00      	nop
 80122ca:	e000      	b.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80122cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d10e      	bne.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80122d6:	4b06      	ldr	r3, [pc, #24]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80122d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80122de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80122e6:	4a02      	ldr	r2, [pc, #8]	@ (80122f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80122e8:	430b      	orrs	r3, r1
 80122ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80122ec:	e006      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80122ee:	bf00      	nop
 80122f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80122fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012304:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801230c:	2300      	movs	r3, #0
 801230e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012312:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012316:	460b      	mov	r3, r1
 8012318:	4313      	orrs	r3, r2
 801231a:	d037      	beq.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801231c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012326:	d00e      	beq.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801232c:	d816      	bhi.n	801235c <HAL_RCCEx_PeriphCLKConfig+0x664>
 801232e:	2b00      	cmp	r3, #0
 8012330:	d018      	beq.n	8012364 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8012332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012336:	d111      	bne.n	801235c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012338:	4bc4      	ldr	r3, [pc, #784]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801233c:	4ac3      	ldr	r2, [pc, #780]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801233e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012344:	e00f      	b.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801234a:	3308      	adds	r3, #8
 801234c:	2101      	movs	r1, #1
 801234e:	4618      	mov	r0, r3
 8012350:	f001 ff54 	bl	80141fc <RCCEx_PLL2_Config>
 8012354:	4603      	mov	r3, r0
 8012356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801235a:	e004      	b.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801235c:	2301      	movs	r3, #1
 801235e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012362:	e000      	b.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801236a:	2b00      	cmp	r3, #0
 801236c:	d10a      	bne.n	8012384 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801236e:	4bb7      	ldr	r3, [pc, #732]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012372:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801237a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801237c:	4ab3      	ldr	r2, [pc, #716]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801237e:	430b      	orrs	r3, r1
 8012380:	6513      	str	r3, [r2, #80]	@ 0x50
 8012382:	e003      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801238c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012394:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012398:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801239c:	2300      	movs	r3, #0
 801239e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80123a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80123a6:	460b      	mov	r3, r1
 80123a8:	4313      	orrs	r3, r2
 80123aa:	d039      	beq.n	8012420 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80123ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d81c      	bhi.n	80123f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80123b6:	a201      	add	r2, pc, #4	@ (adr r2, 80123bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80123b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123bc:	080123f9 	.word	0x080123f9
 80123c0:	080123cd 	.word	0x080123cd
 80123c4:	080123db 	.word	0x080123db
 80123c8:	080123f9 	.word	0x080123f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123cc:	4b9f      	ldr	r3, [pc, #636]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123d0:	4a9e      	ldr	r2, [pc, #632]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80123d8:	e00f      	b.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80123da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123de:	3308      	adds	r3, #8
 80123e0:	2102      	movs	r1, #2
 80123e2:	4618      	mov	r0, r3
 80123e4:	f001 ff0a 	bl	80141fc <RCCEx_PLL2_Config>
 80123e8:	4603      	mov	r3, r0
 80123ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80123ee:	e004      	b.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80123f0:	2301      	movs	r3, #1
 80123f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80123f6:	e000      	b.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80123f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80123fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10a      	bne.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012402:	4b92      	ldr	r3, [pc, #584]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012406:	f023 0103 	bic.w	r1, r3, #3
 801240a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801240e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012410:	4a8e      	ldr	r2, [pc, #568]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012412:	430b      	orrs	r3, r1
 8012414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012416:	e003      	b.n	8012420 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801241c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012428:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801242c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012430:	2300      	movs	r3, #0
 8012432:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012436:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801243a:	460b      	mov	r3, r1
 801243c:	4313      	orrs	r3, r2
 801243e:	f000 8099 	beq.w	8012574 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012442:	4b83      	ldr	r3, [pc, #524]	@ (8012650 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4a82      	ldr	r2, [pc, #520]	@ (8012650 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801244c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801244e:	f7f6 feb9 	bl	80091c4 <HAL_GetTick>
 8012452:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012456:	e00b      	b.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012458:	f7f6 feb4 	bl	80091c4 <HAL_GetTick>
 801245c:	4602      	mov	r2, r0
 801245e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	2b64      	cmp	r3, #100	@ 0x64
 8012466:	d903      	bls.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012468:	2303      	movs	r3, #3
 801246a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801246e:	e005      	b.n	801247c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012470:	4b77      	ldr	r3, [pc, #476]	@ (8012650 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012478:	2b00      	cmp	r3, #0
 801247a:	d0ed      	beq.n	8012458 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801247c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012480:	2b00      	cmp	r3, #0
 8012482:	d173      	bne.n	801256c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012484:	4b71      	ldr	r3, [pc, #452]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012486:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801248c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012490:	4053      	eors	r3, r2
 8012492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012496:	2b00      	cmp	r3, #0
 8012498:	d015      	beq.n	80124c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801249a:	4b6c      	ldr	r3, [pc, #432]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801249e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80124a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80124a6:	4b69      	ldr	r3, [pc, #420]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124aa:	4a68      	ldr	r2, [pc, #416]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80124b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80124b2:	4b66      	ldr	r3, [pc, #408]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124b6:	4a65      	ldr	r2, [pc, #404]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80124bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80124be:	4a63      	ldr	r2, [pc, #396]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80124c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80124c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80124ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80124d2:	d118      	bne.n	8012506 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80124d4:	f7f6 fe76 	bl	80091c4 <HAL_GetTick>
 80124d8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80124dc:	e00d      	b.n	80124fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124de:	f7f6 fe71 	bl	80091c4 <HAL_GetTick>
 80124e2:	4602      	mov	r2, r0
 80124e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80124e8:	1ad2      	subs	r2, r2, r3
 80124ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d903      	bls.n	80124fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80124f2:	2303      	movs	r3, #3
 80124f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80124f8:	e005      	b.n	8012506 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80124fa:	4b54      	ldr	r3, [pc, #336]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124fe:	f003 0302 	and.w	r3, r3, #2
 8012502:	2b00      	cmp	r3, #0
 8012504:	d0eb      	beq.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801250a:	2b00      	cmp	r3, #0
 801250c:	d129      	bne.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801250e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012512:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801251a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801251e:	d10e      	bne.n	801253e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012520:	4b4a      	ldr	r3, [pc, #296]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012522:	691b      	ldr	r3, [r3, #16]
 8012524:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801252c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012530:	091a      	lsrs	r2, r3, #4
 8012532:	4b48      	ldr	r3, [pc, #288]	@ (8012654 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012534:	4013      	ands	r3, r2
 8012536:	4a45      	ldr	r2, [pc, #276]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012538:	430b      	orrs	r3, r1
 801253a:	6113      	str	r3, [r2, #16]
 801253c:	e005      	b.n	801254a <HAL_RCCEx_PeriphCLKConfig+0x852>
 801253e:	4b43      	ldr	r3, [pc, #268]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	4a42      	ldr	r2, [pc, #264]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012544:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012548:	6113      	str	r3, [r2, #16]
 801254a:	4b40      	ldr	r3, [pc, #256]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801254c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801254e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801255a:	4a3c      	ldr	r2, [pc, #240]	@ (801264c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801255c:	430b      	orrs	r3, r1
 801255e:	6713      	str	r3, [r2, #112]	@ 0x70
 8012560:	e008      	b.n	8012574 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801256a:	e003      	b.n	8012574 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801256c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257c:	f002 0301 	and.w	r3, r2, #1
 8012580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012584:	2300      	movs	r3, #0
 8012586:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801258a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801258e:	460b      	mov	r3, r1
 8012590:	4313      	orrs	r3, r2
 8012592:	f000 808f 	beq.w	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801259a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801259c:	2b28      	cmp	r3, #40	@ 0x28
 801259e:	d871      	bhi.n	8012684 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80125a0:	a201      	add	r2, pc, #4	@ (adr r2, 80125a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80125a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125a6:	bf00      	nop
 80125a8:	0801268d 	.word	0x0801268d
 80125ac:	08012685 	.word	0x08012685
 80125b0:	08012685 	.word	0x08012685
 80125b4:	08012685 	.word	0x08012685
 80125b8:	08012685 	.word	0x08012685
 80125bc:	08012685 	.word	0x08012685
 80125c0:	08012685 	.word	0x08012685
 80125c4:	08012685 	.word	0x08012685
 80125c8:	08012659 	.word	0x08012659
 80125cc:	08012685 	.word	0x08012685
 80125d0:	08012685 	.word	0x08012685
 80125d4:	08012685 	.word	0x08012685
 80125d8:	08012685 	.word	0x08012685
 80125dc:	08012685 	.word	0x08012685
 80125e0:	08012685 	.word	0x08012685
 80125e4:	08012685 	.word	0x08012685
 80125e8:	0801266f 	.word	0x0801266f
 80125ec:	08012685 	.word	0x08012685
 80125f0:	08012685 	.word	0x08012685
 80125f4:	08012685 	.word	0x08012685
 80125f8:	08012685 	.word	0x08012685
 80125fc:	08012685 	.word	0x08012685
 8012600:	08012685 	.word	0x08012685
 8012604:	08012685 	.word	0x08012685
 8012608:	0801268d 	.word	0x0801268d
 801260c:	08012685 	.word	0x08012685
 8012610:	08012685 	.word	0x08012685
 8012614:	08012685 	.word	0x08012685
 8012618:	08012685 	.word	0x08012685
 801261c:	08012685 	.word	0x08012685
 8012620:	08012685 	.word	0x08012685
 8012624:	08012685 	.word	0x08012685
 8012628:	0801268d 	.word	0x0801268d
 801262c:	08012685 	.word	0x08012685
 8012630:	08012685 	.word	0x08012685
 8012634:	08012685 	.word	0x08012685
 8012638:	08012685 	.word	0x08012685
 801263c:	08012685 	.word	0x08012685
 8012640:	08012685 	.word	0x08012685
 8012644:	08012685 	.word	0x08012685
 8012648:	0801268d 	.word	0x0801268d
 801264c:	58024400 	.word	0x58024400
 8012650:	58024800 	.word	0x58024800
 8012654:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801265c:	3308      	adds	r3, #8
 801265e:	2101      	movs	r1, #1
 8012660:	4618      	mov	r0, r3
 8012662:	f001 fdcb 	bl	80141fc <RCCEx_PLL2_Config>
 8012666:	4603      	mov	r3, r0
 8012668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801266c:	e00f      	b.n	801268e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801266e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012672:	3328      	adds	r3, #40	@ 0x28
 8012674:	2101      	movs	r1, #1
 8012676:	4618      	mov	r0, r3
 8012678:	f001 fe72 	bl	8014360 <RCCEx_PLL3_Config>
 801267c:	4603      	mov	r3, r0
 801267e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012682:	e004      	b.n	801268e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012684:	2301      	movs	r3, #1
 8012686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801268a:	e000      	b.n	801268e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801268c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801268e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012692:	2b00      	cmp	r3, #0
 8012694:	d10a      	bne.n	80126ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012696:	4bbf      	ldr	r3, [pc, #764]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801269a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801269e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126a4:	4abb      	ldr	r2, [pc, #748]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80126a6:	430b      	orrs	r3, r1
 80126a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80126aa:	e003      	b.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80126b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f002 0302 	and.w	r3, r2, #2
 80126c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80126c4:	2300      	movs	r3, #0
 80126c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80126ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80126ce:	460b      	mov	r3, r1
 80126d0:	4313      	orrs	r3, r2
 80126d2:	d041      	beq.n	8012758 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80126d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126da:	2b05      	cmp	r3, #5
 80126dc:	d824      	bhi.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80126de:	a201      	add	r2, pc, #4	@ (adr r2, 80126e4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80126e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e4:	08012731 	.word	0x08012731
 80126e8:	080126fd 	.word	0x080126fd
 80126ec:	08012713 	.word	0x08012713
 80126f0:	08012731 	.word	0x08012731
 80126f4:	08012731 	.word	0x08012731
 80126f8:	08012731 	.word	0x08012731
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80126fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012700:	3308      	adds	r3, #8
 8012702:	2101      	movs	r1, #1
 8012704:	4618      	mov	r0, r3
 8012706:	f001 fd79 	bl	80141fc <RCCEx_PLL2_Config>
 801270a:	4603      	mov	r3, r0
 801270c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012710:	e00f      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012716:	3328      	adds	r3, #40	@ 0x28
 8012718:	2101      	movs	r1, #1
 801271a:	4618      	mov	r0, r3
 801271c:	f001 fe20 	bl	8014360 <RCCEx_PLL3_Config>
 8012720:	4603      	mov	r3, r0
 8012722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012726:	e004      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012728:	2301      	movs	r3, #1
 801272a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801272e:	e000      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012736:	2b00      	cmp	r3, #0
 8012738:	d10a      	bne.n	8012750 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801273a:	4b96      	ldr	r3, [pc, #600]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801273e:	f023 0107 	bic.w	r1, r3, #7
 8012742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012748:	4a92      	ldr	r2, [pc, #584]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801274a:	430b      	orrs	r3, r1
 801274c:	6553      	str	r3, [r2, #84]	@ 0x54
 801274e:	e003      	b.n	8012758 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012760:	f002 0304 	and.w	r3, r2, #4
 8012764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012768:	2300      	movs	r3, #0
 801276a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801276e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012772:	460b      	mov	r3, r1
 8012774:	4313      	orrs	r3, r2
 8012776:	d044      	beq.n	8012802 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012780:	2b05      	cmp	r3, #5
 8012782:	d825      	bhi.n	80127d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012784:	a201      	add	r2, pc, #4	@ (adr r2, 801278c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801278a:	bf00      	nop
 801278c:	080127d9 	.word	0x080127d9
 8012790:	080127a5 	.word	0x080127a5
 8012794:	080127bb 	.word	0x080127bb
 8012798:	080127d9 	.word	0x080127d9
 801279c:	080127d9 	.word	0x080127d9
 80127a0:	080127d9 	.word	0x080127d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80127a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127a8:	3308      	adds	r3, #8
 80127aa:	2101      	movs	r1, #1
 80127ac:	4618      	mov	r0, r3
 80127ae:	f001 fd25 	bl	80141fc <RCCEx_PLL2_Config>
 80127b2:	4603      	mov	r3, r0
 80127b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80127b8:	e00f      	b.n	80127da <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80127ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127be:	3328      	adds	r3, #40	@ 0x28
 80127c0:	2101      	movs	r1, #1
 80127c2:	4618      	mov	r0, r3
 80127c4:	f001 fdcc 	bl	8014360 <RCCEx_PLL3_Config>
 80127c8:	4603      	mov	r3, r0
 80127ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80127ce:	e004      	b.n	80127da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80127d0:	2301      	movs	r3, #1
 80127d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127d6:	e000      	b.n	80127da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80127d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d10b      	bne.n	80127fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80127e2:	4b6c      	ldr	r3, [pc, #432]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127e6:	f023 0107 	bic.w	r1, r3, #7
 80127ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127f2:	4a68      	ldr	r2, [pc, #416]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127f4:	430b      	orrs	r3, r1
 80127f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80127f8:	e003      	b.n	8012802 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280a:	f002 0320 	and.w	r3, r2, #32
 801280e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012812:	2300      	movs	r3, #0
 8012814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012818:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801281c:	460b      	mov	r3, r1
 801281e:	4313      	orrs	r3, r2
 8012820:	d055      	beq.n	80128ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801282a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801282e:	d033      	beq.n	8012898 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012834:	d82c      	bhi.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801283a:	d02f      	beq.n	801289c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801283c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012840:	d826      	bhi.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012846:	d02b      	beq.n	80128a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801284c:	d820      	bhi.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801284e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012852:	d012      	beq.n	801287a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012858:	d81a      	bhi.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801285a:	2b00      	cmp	r3, #0
 801285c:	d022      	beq.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801285e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012862:	d115      	bne.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012868:	3308      	adds	r3, #8
 801286a:	2100      	movs	r1, #0
 801286c:	4618      	mov	r0, r3
 801286e:	f001 fcc5 	bl	80141fc <RCCEx_PLL2_Config>
 8012872:	4603      	mov	r3, r0
 8012874:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012878:	e015      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801287a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801287e:	3328      	adds	r3, #40	@ 0x28
 8012880:	2102      	movs	r1, #2
 8012882:	4618      	mov	r0, r3
 8012884:	f001 fd6c 	bl	8014360 <RCCEx_PLL3_Config>
 8012888:	4603      	mov	r3, r0
 801288a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801288e:	e00a      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012890:	2301      	movs	r3, #1
 8012892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012896:	e006      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012898:	bf00      	nop
 801289a:	e004      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801289c:	bf00      	nop
 801289e:	e002      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80128a0:	bf00      	nop
 80128a2:	e000      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80128a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d10b      	bne.n	80128c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80128ae:	4b39      	ldr	r3, [pc, #228]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80128b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80128be:	4a35      	ldr	r2, [pc, #212]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128c0:	430b      	orrs	r3, r1
 80128c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80128c4:	e003      	b.n	80128ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80128ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80128da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80128de:	2300      	movs	r3, #0
 80128e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80128e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80128e8:	460b      	mov	r3, r1
 80128ea:	4313      	orrs	r3, r2
 80128ec:	d058      	beq.n	80129a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80128ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80128f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80128fa:	d033      	beq.n	8012964 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80128fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012900:	d82c      	bhi.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012906:	d02f      	beq.n	8012968 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801290c:	d826      	bhi.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801290e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012912:	d02b      	beq.n	801296c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012914:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012918:	d820      	bhi.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801291a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801291e:	d012      	beq.n	8012946 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012924:	d81a      	bhi.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012926:	2b00      	cmp	r3, #0
 8012928:	d022      	beq.n	8012970 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801292a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801292e:	d115      	bne.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012934:	3308      	adds	r3, #8
 8012936:	2100      	movs	r1, #0
 8012938:	4618      	mov	r0, r3
 801293a:	f001 fc5f 	bl	80141fc <RCCEx_PLL2_Config>
 801293e:	4603      	mov	r3, r0
 8012940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012944:	e015      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801294a:	3328      	adds	r3, #40	@ 0x28
 801294c:	2102      	movs	r1, #2
 801294e:	4618      	mov	r0, r3
 8012950:	f001 fd06 	bl	8014360 <RCCEx_PLL3_Config>
 8012954:	4603      	mov	r3, r0
 8012956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801295a:	e00a      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801295c:	2301      	movs	r3, #1
 801295e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012962:	e006      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012964:	bf00      	nop
 8012966:	e004      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012968:	bf00      	nop
 801296a:	e002      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801296c:	bf00      	nop
 801296e:	e000      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10e      	bne.n	8012998 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801297a:	4b06      	ldr	r3, [pc, #24]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801297e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801298a:	4a02      	ldr	r2, [pc, #8]	@ (8012994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801298c:	430b      	orrs	r3, r1
 801298e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012990:	e006      	b.n	80129a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012992:	bf00      	nop
 8012994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801299c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80129a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80129ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80129b0:	2300      	movs	r3, #0
 80129b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80129b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80129ba:	460b      	mov	r3, r1
 80129bc:	4313      	orrs	r3, r2
 80129be:	d055      	beq.n	8012a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80129c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80129c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80129cc:	d033      	beq.n	8012a36 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80129ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80129d2:	d82c      	bhi.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80129d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80129d8:	d02f      	beq.n	8012a3a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80129da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80129de:	d826      	bhi.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80129e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80129e4:	d02b      	beq.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80129e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80129ea:	d820      	bhi.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80129ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80129f0:	d012      	beq.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80129f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80129f6:	d81a      	bhi.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d022      	beq.n	8012a42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80129fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a00:	d115      	bne.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a06:	3308      	adds	r3, #8
 8012a08:	2100      	movs	r1, #0
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f001 fbf6 	bl	80141fc <RCCEx_PLL2_Config>
 8012a10:	4603      	mov	r3, r0
 8012a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012a16:	e015      	b.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a1c:	3328      	adds	r3, #40	@ 0x28
 8012a1e:	2102      	movs	r1, #2
 8012a20:	4618      	mov	r0, r3
 8012a22:	f001 fc9d 	bl	8014360 <RCCEx_PLL3_Config>
 8012a26:	4603      	mov	r3, r0
 8012a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012a2c:	e00a      	b.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a34:	e006      	b.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012a36:	bf00      	nop
 8012a38:	e004      	b.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012a3a:	bf00      	nop
 8012a3c:	e002      	b.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012a3e:	bf00      	nop
 8012a40:	e000      	b.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d10b      	bne.n	8012a64 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012a4c:	4ba0      	ldr	r3, [pc, #640]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a5c:	4a9c      	ldr	r2, [pc, #624]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a5e:	430b      	orrs	r3, r1
 8012a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8012a62:	e003      	b.n	8012a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a74:	f002 0308 	and.w	r3, r2, #8
 8012a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012a82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012a86:	460b      	mov	r3, r1
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	d01e      	beq.n	8012aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a98:	d10c      	bne.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a9e:	3328      	adds	r3, #40	@ 0x28
 8012aa0:	2102      	movs	r1, #2
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f001 fc5c 	bl	8014360 <RCCEx_PLL3_Config>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d002      	beq.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012ab4:	4b86      	ldr	r3, [pc, #536]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ab8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ac4:	4a82      	ldr	r2, [pc, #520]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ac6:	430b      	orrs	r3, r1
 8012ac8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	f002 0310 	and.w	r3, r2, #16
 8012ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012ada:	2300      	movs	r3, #0
 8012adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012ae0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	d01e      	beq.n	8012b28 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012af6:	d10c      	bne.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012afc:	3328      	adds	r3, #40	@ 0x28
 8012afe:	2102      	movs	r1, #2
 8012b00:	4618      	mov	r0, r3
 8012b02:	f001 fc2d 	bl	8014360 <RCCEx_PLL3_Config>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d002      	beq.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012b12:	4b6f      	ldr	r3, [pc, #444]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012b22:	4a6b      	ldr	r2, [pc, #428]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b24:	430b      	orrs	r3, r1
 8012b26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012b36:	2300      	movs	r3, #0
 8012b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012b3a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4313      	orrs	r3, r2
 8012b42:	d03e      	beq.n	8012bc2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b50:	d022      	beq.n	8012b98 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012b52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b56:	d81b      	bhi.n	8012b90 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d003      	beq.n	8012b64 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b60:	d00b      	beq.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012b62:	e015      	b.n	8012b90 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b68:	3308      	adds	r3, #8
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f001 fb45 	bl	80141fc <RCCEx_PLL2_Config>
 8012b72:	4603      	mov	r3, r0
 8012b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012b78:	e00f      	b.n	8012b9a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b7e:	3328      	adds	r3, #40	@ 0x28
 8012b80:	2102      	movs	r1, #2
 8012b82:	4618      	mov	r0, r3
 8012b84:	f001 fbec 	bl	8014360 <RCCEx_PLL3_Config>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012b8e:	e004      	b.n	8012b9a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b90:	2301      	movs	r3, #1
 8012b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b96:	e000      	b.n	8012b9a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d10b      	bne.n	8012bba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ba6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bb2:	4a47      	ldr	r2, [pc, #284]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bb4:	430b      	orrs	r3, r1
 8012bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012bb8:	e003      	b.n	8012bc2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012bce:	673b      	str	r3, [r7, #112]	@ 0x70
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8012bd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012bd8:	460b      	mov	r3, r1
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	d03b      	beq.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012be6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012bea:	d01f      	beq.n	8012c2c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012bec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012bf0:	d818      	bhi.n	8012c24 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012bf6:	d003      	beq.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012bf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012bfc:	d007      	beq.n	8012c0e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012bfe:	e011      	b.n	8012c24 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c00:	4b33      	ldr	r3, [pc, #204]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c04:	4a32      	ldr	r2, [pc, #200]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012c0c:	e00f      	b.n	8012c2e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c12:	3328      	adds	r3, #40	@ 0x28
 8012c14:	2101      	movs	r1, #1
 8012c16:	4618      	mov	r0, r3
 8012c18:	f001 fba2 	bl	8014360 <RCCEx_PLL3_Config>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012c22:	e004      	b.n	8012c2e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c24:	2301      	movs	r3, #1
 8012c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c2a:	e000      	b.n	8012c2e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d10b      	bne.n	8012c4e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012c36:	4b26      	ldr	r3, [pc, #152]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c46:	4a22      	ldr	r2, [pc, #136]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c48:	430b      	orrs	r3, r1
 8012c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c4c:	e003      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012c62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c64:	2300      	movs	r3, #0
 8012c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012c68:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	4313      	orrs	r3, r2
 8012c70:	d034      	beq.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d003      	beq.n	8012c84 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c80:	d007      	beq.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012c82:	e011      	b.n	8012ca8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c84:	4b12      	ldr	r3, [pc, #72]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c88:	4a11      	ldr	r2, [pc, #68]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012c90:	e00e      	b.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c96:	3308      	adds	r3, #8
 8012c98:	2102      	movs	r1, #2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f001 faae 	bl	80141fc <RCCEx_PLL2_Config>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012ca6:	e003      	b.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d10d      	bne.n	8012cd4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012cb8:	4b05      	ldr	r3, [pc, #20]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cbc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cc6:	4a02      	ldr	r2, [pc, #8]	@ (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cc8:	430b      	orrs	r3, r1
 8012cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012ccc:	e006      	b.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012cce:	bf00      	nop
 8012cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8012cea:	2300      	movs	r3, #0
 8012cec:	667b      	str	r3, [r7, #100]	@ 0x64
 8012cee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	d00c      	beq.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cfc:	3328      	adds	r3, #40	@ 0x28
 8012cfe:	2102      	movs	r1, #2
 8012d00:	4618      	mov	r0, r3
 8012d02:	f001 fb2d 	bl	8014360 <RCCEx_PLL3_Config>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012d20:	2300      	movs	r3, #0
 8012d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012d24:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012d28:	460b      	mov	r3, r1
 8012d2a:	4313      	orrs	r3, r2
 8012d2c:	d036      	beq.n	8012d9c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d38:	d018      	beq.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d3e:	d811      	bhi.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d44:	d014      	beq.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d4a:	d80b      	bhi.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d011      	beq.n	8012d74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d54:	d106      	bne.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d56:	4bb7      	ldr	r3, [pc, #732]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d5a:	4ab6      	ldr	r2, [pc, #728]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012d62:	e008      	b.n	8012d76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d64:	2301      	movs	r3, #1
 8012d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d6a:	e004      	b.n	8012d76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012d6c:	bf00      	nop
 8012d6e:	e002      	b.n	8012d76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012d70:	bf00      	nop
 8012d72:	e000      	b.n	8012d76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d10a      	bne.n	8012d94 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012d7e:	4bad      	ldr	r3, [pc, #692]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012d8c:	4aa9      	ldr	r2, [pc, #676]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d8e:	430b      	orrs	r3, r1
 8012d90:	6553      	str	r3, [r2, #84]	@ 0x54
 8012d92:	e003      	b.n	8012d9c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8012daa:	2300      	movs	r3, #0
 8012dac:	657b      	str	r3, [r7, #84]	@ 0x54
 8012dae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012db2:	460b      	mov	r3, r1
 8012db4:	4313      	orrs	r3, r2
 8012db6:	d009      	beq.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012db8:	4b9e      	ldr	r3, [pc, #632]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dc6:	4a9b      	ldr	r2, [pc, #620]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dc8:	430b      	orrs	r3, r1
 8012dca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012dda:	2300      	movs	r3, #0
 8012ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012dde:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012de2:	460b      	mov	r3, r1
 8012de4:	4313      	orrs	r3, r2
 8012de6:	d009      	beq.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012de8:	4b92      	ldr	r3, [pc, #584]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012dec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012df6:	4a8f      	ldr	r2, [pc, #572]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012df8:	430b      	orrs	r3, r1
 8012dfa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e04:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012e12:	460b      	mov	r3, r1
 8012e14:	4313      	orrs	r3, r2
 8012e16:	d00e      	beq.n	8012e36 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012e18:	4b86      	ldr	r3, [pc, #536]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	4a85      	ldr	r2, [pc, #532]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012e22:	6113      	str	r3, [r2, #16]
 8012e24:	4b83      	ldr	r3, [pc, #524]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e26:	6919      	ldr	r1, [r3, #16]
 8012e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012e30:	4a80      	ldr	r2, [pc, #512]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e32:	430b      	orrs	r3, r1
 8012e34:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012e44:	2300      	movs	r3, #0
 8012e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012e48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	d009      	beq.n	8012e66 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012e52:	4b78      	ldr	r3, [pc, #480]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012e56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e60:	4a74      	ldr	r2, [pc, #464]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e62:	430b      	orrs	r3, r1
 8012e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e74:	2300      	movs	r3, #0
 8012e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	d00a      	beq.n	8012e98 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012e82:	4b6c      	ldr	r3, [pc, #432]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e86:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012e92:	4a68      	ldr	r2, [pc, #416]	@ (8013034 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e94:	430b      	orrs	r3, r1
 8012e96:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea0:	2100      	movs	r1, #0
 8012ea2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012eaa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012eae:	460b      	mov	r3, r1
 8012eb0:	4313      	orrs	r3, r2
 8012eb2:	d011      	beq.n	8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eb8:	3308      	adds	r3, #8
 8012eba:	2100      	movs	r1, #0
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f001 f99d 	bl	80141fc <RCCEx_PLL2_Config>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d003      	beq.n	8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	6239      	str	r1, [r7, #32]
 8012ee4:	f003 0302 	and.w	r3, r3, #2
 8012ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012eea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012eee:	460b      	mov	r3, r1
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	d011      	beq.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ef8:	3308      	adds	r3, #8
 8012efa:	2101      	movs	r1, #1
 8012efc:	4618      	mov	r0, r3
 8012efe:	f001 f97d 	bl	80141fc <RCCEx_PLL2_Config>
 8012f02:	4603      	mov	r3, r0
 8012f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d003      	beq.n	8012f18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f20:	2100      	movs	r1, #0
 8012f22:	61b9      	str	r1, [r7, #24]
 8012f24:	f003 0304 	and.w	r3, r3, #4
 8012f28:	61fb      	str	r3, [r7, #28]
 8012f2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4313      	orrs	r3, r2
 8012f32:	d011      	beq.n	8012f58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f38:	3308      	adds	r3, #8
 8012f3a:	2102      	movs	r1, #2
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f001 f95d 	bl	80141fc <RCCEx_PLL2_Config>
 8012f42:	4603      	mov	r3, r0
 8012f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d003      	beq.n	8012f58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	2100      	movs	r1, #0
 8012f62:	6139      	str	r1, [r7, #16]
 8012f64:	f003 0308 	and.w	r3, r3, #8
 8012f68:	617b      	str	r3, [r7, #20]
 8012f6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012f6e:	460b      	mov	r3, r1
 8012f70:	4313      	orrs	r3, r2
 8012f72:	d011      	beq.n	8012f98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f78:	3328      	adds	r3, #40	@ 0x28
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f001 f9ef 	bl	8014360 <RCCEx_PLL3_Config>
 8012f82:	4603      	mov	r3, r0
 8012f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d003      	beq.n	8012f98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	60b9      	str	r1, [r7, #8]
 8012fa4:	f003 0310 	and.w	r3, r3, #16
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012fae:	460b      	mov	r3, r1
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	d011      	beq.n	8012fd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fb8:	3328      	adds	r3, #40	@ 0x28
 8012fba:	2101      	movs	r1, #1
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f001 f9cf 	bl	8014360 <RCCEx_PLL3_Config>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d003      	beq.n	8012fd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	6039      	str	r1, [r7, #0]
 8012fe4:	f003 0320 	and.w	r3, r3, #32
 8012fe8:	607b      	str	r3, [r7, #4]
 8012fea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4313      	orrs	r3, r2
 8012ff2:	d011      	beq.n	8013018 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ff8:	3328      	adds	r3, #40	@ 0x28
 8012ffa:	2102      	movs	r1, #2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f001 f9af 	bl	8014360 <RCCEx_PLL3_Config>
 8013002:	4603      	mov	r3, r0
 8013004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801300c:	2b00      	cmp	r3, #0
 801300e:	d003      	beq.n	8013018 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8013018:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 801301c:	2b00      	cmp	r3, #0
 801301e:	d101      	bne.n	8013024 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	e000      	b.n	8013026 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8013024:	2301      	movs	r3, #1
}
 8013026:	4618      	mov	r0, r3
 8013028:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801302c:	46bd      	mov	sp, r7
 801302e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013032:	bf00      	nop
 8013034:	58024400 	.word	0x58024400

08013038 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b090      	sub	sp, #64	@ 0x40
 801303c:	af00      	add	r7, sp, #0
 801303e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013046:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801304a:	430b      	orrs	r3, r1
 801304c:	f040 8094 	bne.w	8013178 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013050:	4b9b      	ldr	r3, [pc, #620]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013054:	f003 0307 	and.w	r3, r3, #7
 8013058:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305c:	2b04      	cmp	r3, #4
 801305e:	f200 8087 	bhi.w	8013170 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013062:	a201      	add	r2, pc, #4	@ (adr r2, 8013068 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013068:	0801307d 	.word	0x0801307d
 801306c:	080130a5 	.word	0x080130a5
 8013070:	080130cd 	.word	0x080130cd
 8013074:	08013169 	.word	0x08013169
 8013078:	080130f5 	.word	0x080130f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801307c:	4b90      	ldr	r3, [pc, #576]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013088:	d108      	bne.n	801309c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801308a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801308e:	4618      	mov	r0, r3
 8013090:	f000 ff62 	bl	8013f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013098:	f000 bc93 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801309c:	2300      	movs	r3, #0
 801309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130a0:	f000 bc8f 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80130a4:	4b86      	ldr	r3, [pc, #536]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80130ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80130b0:	d108      	bne.n	80130c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80130b2:	f107 0318 	add.w	r3, r7, #24
 80130b6:	4618      	mov	r0, r3
 80130b8:	f000 fca6 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80130c0:	f000 bc7f 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130c8:	f000 bc7b 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80130cc:	4b7c      	ldr	r3, [pc, #496]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80130d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80130d8:	d108      	bne.n	80130ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80130da:	f107 030c 	add.w	r3, r7, #12
 80130de:	4618      	mov	r0, r3
 80130e0:	f000 fde6 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80130e8:	f000 bc6b 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80130ec:	2300      	movs	r3, #0
 80130ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130f0:	f000 bc67 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80130f4:	4b72      	ldr	r3, [pc, #456]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80130f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80130fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80130fe:	4b70      	ldr	r3, [pc, #448]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f003 0304 	and.w	r3, r3, #4
 8013106:	2b04      	cmp	r3, #4
 8013108:	d10c      	bne.n	8013124 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801310c:	2b00      	cmp	r3, #0
 801310e:	d109      	bne.n	8013124 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013110:	4b6b      	ldr	r3, [pc, #428]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	08db      	lsrs	r3, r3, #3
 8013116:	f003 0303 	and.w	r3, r3, #3
 801311a:	4a6a      	ldr	r2, [pc, #424]	@ (80132c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801311c:	fa22 f303 	lsr.w	r3, r2, r3
 8013120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013122:	e01f      	b.n	8013164 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013124:	4b66      	ldr	r3, [pc, #408]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801312c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013130:	d106      	bne.n	8013140 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8013132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013138:	d102      	bne.n	8013140 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801313a:	4b63      	ldr	r3, [pc, #396]	@ (80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801313c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801313e:	e011      	b.n	8013164 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013140:	4b5f      	ldr	r3, [pc, #380]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801314c:	d106      	bne.n	801315c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013154:	d102      	bne.n	801315c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013156:	4b5d      	ldr	r3, [pc, #372]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801315a:	e003      	b.n	8013164 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801315c:	2300      	movs	r3, #0
 801315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013160:	f000 bc2f 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013164:	f000 bc2d 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013168:	4b59      	ldr	r3, [pc, #356]	@ (80132d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801316c:	f000 bc29 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013170:	2300      	movs	r3, #0
 8013172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013174:	f000 bc25 	b.w	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013178:	e9d7 2300 	ldrd	r2, r3, [r7]
 801317c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013180:	430b      	orrs	r3, r1
 8013182:	f040 80a7 	bne.w	80132d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013186:	4b4e      	ldr	r3, [pc, #312]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801318a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801318e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013196:	d054      	beq.n	8013242 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801319a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801319e:	f200 808b 	bhi.w	80132b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80131a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80131a8:	f000 8083 	beq.w	80132b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80131ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80131b2:	f200 8081 	bhi.w	80132b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80131b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80131bc:	d02f      	beq.n	801321e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80131be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80131c4:	d878      	bhi.n	80132b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80131c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d004      	beq.n	80131d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80131cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80131d2:	d012      	beq.n	80131fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80131d4:	e070      	b.n	80132b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80131d6:	4b3a      	ldr	r3, [pc, #232]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80131de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80131e2:	d107      	bne.n	80131f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80131e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80131e8:	4618      	mov	r0, r3
 80131ea:	f000 feb5 	bl	8013f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80131ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80131f2:	e3e6      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80131f4:	2300      	movs	r3, #0
 80131f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131f8:	e3e3      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80131fa:	4b31      	ldr	r3, [pc, #196]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013206:	d107      	bne.n	8013218 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013208:	f107 0318 	add.w	r3, r7, #24
 801320c:	4618      	mov	r0, r3
 801320e:	f000 fbfb 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013216:	e3d4      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013218:	2300      	movs	r3, #0
 801321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801321c:	e3d1      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801321e:	4b28      	ldr	r3, [pc, #160]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801322a:	d107      	bne.n	801323c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801322c:	f107 030c 	add.w	r3, r7, #12
 8013230:	4618      	mov	r0, r3
 8013232:	f000 fd3d 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801323a:	e3c2      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801323c:	2300      	movs	r3, #0
 801323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013240:	e3bf      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013242:	4b1f      	ldr	r3, [pc, #124]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013246:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801324a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801324c:	4b1c      	ldr	r3, [pc, #112]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	f003 0304 	and.w	r3, r3, #4
 8013254:	2b04      	cmp	r3, #4
 8013256:	d10c      	bne.n	8013272 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801325a:	2b00      	cmp	r3, #0
 801325c:	d109      	bne.n	8013272 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801325e:	4b18      	ldr	r3, [pc, #96]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	08db      	lsrs	r3, r3, #3
 8013264:	f003 0303 	and.w	r3, r3, #3
 8013268:	4a16      	ldr	r2, [pc, #88]	@ (80132c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801326a:	fa22 f303 	lsr.w	r3, r2, r3
 801326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013270:	e01e      	b.n	80132b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013272:	4b13      	ldr	r3, [pc, #76]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801327a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801327e:	d106      	bne.n	801328e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013286:	d102      	bne.n	801328e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013288:	4b0f      	ldr	r3, [pc, #60]	@ (80132c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801328c:	e010      	b.n	80132b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801328e:	4b0c      	ldr	r3, [pc, #48]	@ (80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801329a:	d106      	bne.n	80132aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801329c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801329e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80132a2:	d102      	bne.n	80132aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80132a4:	4b09      	ldr	r3, [pc, #36]	@ (80132cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80132a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132a8:	e002      	b.n	80132b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80132aa:	2300      	movs	r3, #0
 80132ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80132ae:	e388      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132b0:	e387      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80132b2:	4b07      	ldr	r3, [pc, #28]	@ (80132d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80132b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132b6:	e384      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80132b8:	2300      	movs	r3, #0
 80132ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132bc:	e381      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132be:	bf00      	nop
 80132c0:	58024400 	.word	0x58024400
 80132c4:	03d09000 	.word	0x03d09000
 80132c8:	003d0900 	.word	0x003d0900
 80132cc:	016e3600 	.word	0x016e3600
 80132d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80132d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132d8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80132dc:	430b      	orrs	r3, r1
 80132de:	f040 809c 	bne.w	801341a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80132e2:	4b9e      	ldr	r3, [pc, #632]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132e6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80132ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80132ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80132f2:	d054      	beq.n	801339e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80132f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80132fa:	f200 808b 	bhi.w	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80132fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013300:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013304:	f000 8083 	beq.w	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8013308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801330e:	f200 8081 	bhi.w	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013318:	d02f      	beq.n	801337a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801331c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013320:	d878      	bhi.n	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013324:	2b00      	cmp	r3, #0
 8013326:	d004      	beq.n	8013332 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801332a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801332e:	d012      	beq.n	8013356 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8013330:	e070      	b.n	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013332:	4b8a      	ldr	r3, [pc, #552]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801333a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801333e:	d107      	bne.n	8013350 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013344:	4618      	mov	r0, r3
 8013346:	f000 fe07 	bl	8013f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801334e:	e338      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013350:	2300      	movs	r3, #0
 8013352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013354:	e335      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013356:	4b81      	ldr	r3, [pc, #516]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801335e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013362:	d107      	bne.n	8013374 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013364:	f107 0318 	add.w	r3, r7, #24
 8013368:	4618      	mov	r0, r3
 801336a:	f000 fb4d 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013372:	e326      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013374:	2300      	movs	r3, #0
 8013376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013378:	e323      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801337a:	4b78      	ldr	r3, [pc, #480]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013386:	d107      	bne.n	8013398 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013388:	f107 030c 	add.w	r3, r7, #12
 801338c:	4618      	mov	r0, r3
 801338e:	f000 fc8f 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013396:	e314      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801339c:	e311      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801339e:	4b6f      	ldr	r3, [pc, #444]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80133a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80133a8:	4b6c      	ldr	r3, [pc, #432]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	f003 0304 	and.w	r3, r3, #4
 80133b0:	2b04      	cmp	r3, #4
 80133b2:	d10c      	bne.n	80133ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80133b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d109      	bne.n	80133ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80133ba:	4b68      	ldr	r3, [pc, #416]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	08db      	lsrs	r3, r3, #3
 80133c0:	f003 0303 	and.w	r3, r3, #3
 80133c4:	4a66      	ldr	r2, [pc, #408]	@ (8013560 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80133c6:	fa22 f303 	lsr.w	r3, r2, r3
 80133ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133cc:	e01e      	b.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80133ce:	4b63      	ldr	r3, [pc, #396]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80133d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133da:	d106      	bne.n	80133ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80133dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80133e2:	d102      	bne.n	80133ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80133e4:	4b5f      	ldr	r3, [pc, #380]	@ (8013564 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80133e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133e8:	e010      	b.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80133ea:	4b5c      	ldr	r3, [pc, #368]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80133f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80133f6:	d106      	bne.n	8013406 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80133f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133fe:	d102      	bne.n	8013406 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013400:	4b59      	ldr	r3, [pc, #356]	@ (8013568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013404:	e002      	b.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013406:	2300      	movs	r3, #0
 8013408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801340a:	e2da      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801340c:	e2d9      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801340e:	4b57      	ldr	r3, [pc, #348]	@ (801356c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013412:	e2d6      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013414:	2300      	movs	r3, #0
 8013416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013418:	e2d3      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801341a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801341e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8013422:	430b      	orrs	r3, r1
 8013424:	f040 80a7 	bne.w	8013576 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013428:	4b4c      	ldr	r3, [pc, #304]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801342a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801342c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013430:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013438:	d055      	beq.n	80134e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013440:	f200 8096 	bhi.w	8013570 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801344a:	f000 8084 	beq.w	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013450:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013454:	f200 808c 	bhi.w	8013570 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801345a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801345e:	d030      	beq.n	80134c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013466:	f200 8083 	bhi.w	8013570 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801346c:	2b00      	cmp	r3, #0
 801346e:	d004      	beq.n	801347a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013476:	d012      	beq.n	801349e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013478:	e07a      	b.n	8013570 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801347a:	4b38      	ldr	r3, [pc, #224]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013486:	d107      	bne.n	8013498 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801348c:	4618      	mov	r0, r3
 801348e:	f000 fd63 	bl	8013f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013496:	e294      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013498:	2300      	movs	r3, #0
 801349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801349c:	e291      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801349e:	4b2f      	ldr	r3, [pc, #188]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80134a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80134aa:	d107      	bne.n	80134bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134ac:	f107 0318 	add.w	r3, r7, #24
 80134b0:	4618      	mov	r0, r3
 80134b2:	f000 faa9 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134ba:	e282      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134bc:	2300      	movs	r3, #0
 80134be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134c0:	e27f      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80134c2:	4b26      	ldr	r3, [pc, #152]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80134ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134ce:	d107      	bne.n	80134e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134d0:	f107 030c 	add.w	r3, r7, #12
 80134d4:	4618      	mov	r0, r3
 80134d6:	f000 fbeb 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134de:	e270      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134e0:	2300      	movs	r3, #0
 80134e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134e4:	e26d      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80134e6:	4b1d      	ldr	r3, [pc, #116]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80134ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80134f0:	4b1a      	ldr	r3, [pc, #104]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f003 0304 	and.w	r3, r3, #4
 80134f8:	2b04      	cmp	r3, #4
 80134fa:	d10c      	bne.n	8013516 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80134fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d109      	bne.n	8013516 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013502:	4b16      	ldr	r3, [pc, #88]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	08db      	lsrs	r3, r3, #3
 8013508:	f003 0303 	and.w	r3, r3, #3
 801350c:	4a14      	ldr	r2, [pc, #80]	@ (8013560 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801350e:	fa22 f303 	lsr.w	r3, r2, r3
 8013512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013514:	e01e      	b.n	8013554 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013516:	4b11      	ldr	r3, [pc, #68]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801351e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013522:	d106      	bne.n	8013532 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801352a:	d102      	bne.n	8013532 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801352c:	4b0d      	ldr	r3, [pc, #52]	@ (8013564 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013530:	e010      	b.n	8013554 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013532:	4b0a      	ldr	r3, [pc, #40]	@ (801355c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801353a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801353e:	d106      	bne.n	801354e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013546:	d102      	bne.n	801354e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013548:	4b07      	ldr	r3, [pc, #28]	@ (8013568 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801354a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801354c:	e002      	b.n	8013554 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801354e:	2300      	movs	r3, #0
 8013550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013552:	e236      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013554:	e235      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013556:	4b05      	ldr	r3, [pc, #20]	@ (801356c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801355a:	e232      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801355c:	58024400 	.word	0x58024400
 8013560:	03d09000 	.word	0x03d09000
 8013564:	003d0900 	.word	0x003d0900
 8013568:	016e3600 	.word	0x016e3600
 801356c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013570:	2300      	movs	r3, #0
 8013572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013574:	e225      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013576:	e9d7 2300 	ldrd	r2, r3, [r7]
 801357a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801357e:	430b      	orrs	r3, r1
 8013580:	f040 8085 	bne.w	801368e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013584:	4b9c      	ldr	r3, [pc, #624]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013588:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801358c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013594:	d06b      	beq.n	801366e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801359c:	d874      	bhi.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80135a4:	d056      	beq.n	8013654 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80135a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80135ac:	d86c      	bhi.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80135ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80135b4:	d03b      	beq.n	801362e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80135b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80135bc:	d864      	bhi.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80135be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135c4:	d021      	beq.n	801360a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80135c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135cc:	d85c      	bhi.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80135ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d004      	beq.n	80135de <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80135d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135da:	d004      	beq.n	80135e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80135dc:	e054      	b.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80135de:	f7fe fb5f 	bl	8011ca0 <HAL_RCC_GetPCLK1Freq>
 80135e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80135e4:	e1ed      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80135e6:	4b84      	ldr	r3, [pc, #528]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80135f2:	d107      	bne.n	8013604 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135f4:	f107 0318 	add.w	r3, r7, #24
 80135f8:	4618      	mov	r0, r3
 80135fa:	f000 fa05 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013602:	e1de      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013604:	2300      	movs	r3, #0
 8013606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013608:	e1db      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801360a:	4b7b      	ldr	r3, [pc, #492]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013616:	d107      	bne.n	8013628 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013618:	f107 030c 	add.w	r3, r7, #12
 801361c:	4618      	mov	r0, r3
 801361e:	f000 fb47 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013626:	e1cc      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013628:	2300      	movs	r3, #0
 801362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801362c:	e1c9      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801362e:	4b72      	ldr	r3, [pc, #456]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f003 0304 	and.w	r3, r3, #4
 8013636:	2b04      	cmp	r3, #4
 8013638:	d109      	bne.n	801364e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801363a:	4b6f      	ldr	r3, [pc, #444]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	08db      	lsrs	r3, r3, #3
 8013640:	f003 0303 	and.w	r3, r3, #3
 8013644:	4a6d      	ldr	r2, [pc, #436]	@ (80137fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013646:	fa22 f303 	lsr.w	r3, r2, r3
 801364a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801364c:	e1b9      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013652:	e1b6      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013654:	4b68      	ldr	r3, [pc, #416]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801365c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013660:	d102      	bne.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013662:	4b67      	ldr	r3, [pc, #412]	@ (8013800 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013666:	e1ac      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013668:	2300      	movs	r3, #0
 801366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801366c:	e1a9      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801366e:	4b62      	ldr	r3, [pc, #392]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801367a:	d102      	bne.n	8013682 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801367c:	4b61      	ldr	r3, [pc, #388]	@ (8013804 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013680:	e19f      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013682:	2300      	movs	r3, #0
 8013684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013686:	e19c      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801368c:	e199      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801368e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013692:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013696:	430b      	orrs	r3, r1
 8013698:	d173      	bne.n	8013782 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801369a:	4b57      	ldr	r3, [pc, #348]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801369e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80136a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80136a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80136aa:	d02f      	beq.n	801370c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80136ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80136b2:	d863      	bhi.n	801377c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80136b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d004      	beq.n	80136c4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80136ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80136c0:	d012      	beq.n	80136e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80136c2:	e05b      	b.n	801377c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80136c4:	4b4c      	ldr	r3, [pc, #304]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80136cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80136d0:	d107      	bne.n	80136e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136d2:	f107 0318 	add.w	r3, r7, #24
 80136d6:	4618      	mov	r0, r3
 80136d8:	f000 f996 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136e0:	e16f      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136e2:	2300      	movs	r3, #0
 80136e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136e6:	e16c      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80136e8:	4b43      	ldr	r3, [pc, #268]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80136f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136f4:	d107      	bne.n	8013706 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136f6:	f107 030c 	add.w	r3, r7, #12
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 fad8 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013704:	e15d      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801370a:	e15a      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801370c:	4b3a      	ldr	r3, [pc, #232]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013710:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013714:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013716:	4b38      	ldr	r3, [pc, #224]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f003 0304 	and.w	r3, r3, #4
 801371e:	2b04      	cmp	r3, #4
 8013720:	d10c      	bne.n	801373c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013724:	2b00      	cmp	r3, #0
 8013726:	d109      	bne.n	801373c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013728:	4b33      	ldr	r3, [pc, #204]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	08db      	lsrs	r3, r3, #3
 801372e:	f003 0303 	and.w	r3, r3, #3
 8013732:	4a32      	ldr	r2, [pc, #200]	@ (80137fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013734:	fa22 f303 	lsr.w	r3, r2, r3
 8013738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801373a:	e01e      	b.n	801377a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801373c:	4b2e      	ldr	r3, [pc, #184]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013748:	d106      	bne.n	8013758 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801374c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013750:	d102      	bne.n	8013758 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013752:	4b2b      	ldr	r3, [pc, #172]	@ (8013800 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013756:	e010      	b.n	801377a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013758:	4b27      	ldr	r3, [pc, #156]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013764:	d106      	bne.n	8013774 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801376c:	d102      	bne.n	8013774 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801376e:	4b25      	ldr	r3, [pc, #148]	@ (8013804 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013772:	e002      	b.n	801377a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013774:	2300      	movs	r3, #0
 8013776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013778:	e123      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801377a:	e122      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801377c:	2300      	movs	r3, #0
 801377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013780:	e11f      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013786:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801378a:	430b      	orrs	r3, r1
 801378c:	d13c      	bne.n	8013808 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801378e:	4b1a      	ldr	r3, [pc, #104]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013796:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379a:	2b00      	cmp	r3, #0
 801379c:	d004      	beq.n	80137a8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80137a4:	d012      	beq.n	80137cc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80137a6:	e023      	b.n	80137f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80137a8:	4b13      	ldr	r3, [pc, #76]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80137b4:	d107      	bne.n	80137c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80137b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80137ba:	4618      	mov	r0, r3
 80137bc:	f000 fbcc 	bl	8013f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80137c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137c4:	e0fd      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137ca:	e0fa      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80137cc:	4b0a      	ldr	r3, [pc, #40]	@ (80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137d8:	d107      	bne.n	80137ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137da:	f107 0318 	add.w	r3, r7, #24
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 f912 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80137e4:	6a3b      	ldr	r3, [r7, #32]
 80137e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137e8:	e0eb      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137ea:	2300      	movs	r3, #0
 80137ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137ee:	e0e8      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80137f0:	2300      	movs	r3, #0
 80137f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137f4:	e0e5      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137f6:	bf00      	nop
 80137f8:	58024400 	.word	0x58024400
 80137fc:	03d09000 	.word	0x03d09000
 8013800:	003d0900 	.word	0x003d0900
 8013804:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013808:	e9d7 2300 	ldrd	r2, r3, [r7]
 801380c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013810:	430b      	orrs	r3, r1
 8013812:	f040 8085 	bne.w	8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013816:	4b6d      	ldr	r3, [pc, #436]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801381a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801381e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013826:	d06b      	beq.n	8013900 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801382a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801382e:	d874      	bhi.n	801391a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013836:	d056      	beq.n	80138e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801383a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801383e:	d86c      	bhi.n	801391a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013846:	d03b      	beq.n	80138c0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801384a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801384e:	d864      	bhi.n	801391a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013856:	d021      	beq.n	801389c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801385e:	d85c      	bhi.n	801391a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013862:	2b00      	cmp	r3, #0
 8013864:	d004      	beq.n	8013870 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801386c:	d004      	beq.n	8013878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801386e:	e054      	b.n	801391a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013870:	f000 f8b4 	bl	80139dc <HAL_RCCEx_GetD3PCLK1Freq>
 8013874:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013876:	e0a4      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013878:	4b54      	ldr	r3, [pc, #336]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013884:	d107      	bne.n	8013896 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013886:	f107 0318 	add.w	r3, r7, #24
 801388a:	4618      	mov	r0, r3
 801388c:	f000 f8bc 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013894:	e095      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013896:	2300      	movs	r3, #0
 8013898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801389a:	e092      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801389c:	4b4b      	ldr	r3, [pc, #300]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80138a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138a8:	d107      	bne.n	80138ba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138aa:	f107 030c 	add.w	r3, r7, #12
 80138ae:	4618      	mov	r0, r3
 80138b0:	f000 f9fe 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138b8:	e083      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80138ba:	2300      	movs	r3, #0
 80138bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138be:	e080      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80138c0:	4b42      	ldr	r3, [pc, #264]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f003 0304 	and.w	r3, r3, #4
 80138c8:	2b04      	cmp	r3, #4
 80138ca:	d109      	bne.n	80138e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138cc:	4b3f      	ldr	r3, [pc, #252]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	08db      	lsrs	r3, r3, #3
 80138d2:	f003 0303 	and.w	r3, r3, #3
 80138d6:	4a3e      	ldr	r2, [pc, #248]	@ (80139d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80138d8:	fa22 f303 	lsr.w	r3, r2, r3
 80138dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138de:	e070      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80138e0:	2300      	movs	r3, #0
 80138e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138e4:	e06d      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80138e6:	4b39      	ldr	r3, [pc, #228]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80138f2:	d102      	bne.n	80138fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80138f4:	4b37      	ldr	r3, [pc, #220]	@ (80139d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80138f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138f8:	e063      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80138fa:	2300      	movs	r3, #0
 80138fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138fe:	e060      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013900:	4b32      	ldr	r3, [pc, #200]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801390c:	d102      	bne.n	8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801390e:	4b32      	ldr	r3, [pc, #200]	@ (80139d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013912:	e056      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013914:	2300      	movs	r3, #0
 8013916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013918:	e053      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801391e:	e050      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013924:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013928:	430b      	orrs	r3, r1
 801392a:	d148      	bne.n	80139be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801392c:	4b27      	ldr	r3, [pc, #156]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013930:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013934:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801393c:	d02a      	beq.n	8013994 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013944:	d838      	bhi.n	80139b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	2b00      	cmp	r3, #0
 801394a:	d004      	beq.n	8013956 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801394e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013952:	d00d      	beq.n	8013970 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013954:	e030      	b.n	80139b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013956:	4b1d      	ldr	r3, [pc, #116]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801395e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013962:	d102      	bne.n	801396a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013964:	4b1c      	ldr	r3, [pc, #112]	@ (80139d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013968:	e02b      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801396e:	e028      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013970:	4b16      	ldr	r3, [pc, #88]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801397c:	d107      	bne.n	801398e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801397e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013982:	4618      	mov	r0, r3
 8013984:	f000 fae8 	bl	8013f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801398c:	e019      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801398e:	2300      	movs	r3, #0
 8013990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013992:	e016      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013994:	4b0d      	ldr	r3, [pc, #52]	@ (80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801399c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139a0:	d107      	bne.n	80139b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139a2:	f107 0318 	add.w	r3, r7, #24
 80139a6:	4618      	mov	r0, r3
 80139a8:	f000 f82e 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139b0:	e007      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139b2:	2300      	movs	r3, #0
 80139b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139b6:	e004      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80139b8:	2300      	movs	r3, #0
 80139ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139bc:	e001      	b.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80139be:	2300      	movs	r3, #0
 80139c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80139c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3740      	adds	r7, #64	@ 0x40
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	58024400 	.word	0x58024400
 80139d0:	03d09000 	.word	0x03d09000
 80139d4:	003d0900 	.word	0x003d0900
 80139d8:	016e3600 	.word	0x016e3600

080139dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80139e0:	f7fe f92e 	bl	8011c40 <HAL_RCC_GetHCLKFreq>
 80139e4:	4602      	mov	r2, r0
 80139e6:	4b06      	ldr	r3, [pc, #24]	@ (8013a00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80139e8:	6a1b      	ldr	r3, [r3, #32]
 80139ea:	091b      	lsrs	r3, r3, #4
 80139ec:	f003 0307 	and.w	r3, r3, #7
 80139f0:	4904      	ldr	r1, [pc, #16]	@ (8013a04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80139f2:	5ccb      	ldrb	r3, [r1, r3]
 80139f4:	f003 031f 	and.w	r3, r3, #31
 80139f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	58024400 	.word	0x58024400
 8013a04:	0801e83c 	.word	0x0801e83c

08013a08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b089      	sub	sp, #36	@ 0x24
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a10:	4ba1      	ldr	r3, [pc, #644]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a14:	f003 0303 	and.w	r3, r3, #3
 8013a18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a1e:	0b1b      	lsrs	r3, r3, #12
 8013a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013a26:	4b9c      	ldr	r3, [pc, #624]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a2a:	091b      	lsrs	r3, r3, #4
 8013a2c:	f003 0301 	and.w	r3, r3, #1
 8013a30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013a32:	4b99      	ldr	r3, [pc, #612]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a36:	08db      	lsrs	r3, r3, #3
 8013a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	fb02 f303 	mul.w	r3, r2, r3
 8013a42:	ee07 3a90 	vmov	s15, r3
 8013a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	f000 8111 	beq.w	8013c78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	2b02      	cmp	r3, #2
 8013a5a:	f000 8083 	beq.w	8013b64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	2b02      	cmp	r3, #2
 8013a62:	f200 80a1 	bhi.w	8013ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d003      	beq.n	8013a74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013a6c:	69bb      	ldr	r3, [r7, #24]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d056      	beq.n	8013b20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013a72:	e099      	b.n	8013ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013a74:	4b88      	ldr	r3, [pc, #544]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f003 0320 	and.w	r3, r3, #32
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d02d      	beq.n	8013adc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a80:	4b85      	ldr	r3, [pc, #532]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	08db      	lsrs	r3, r3, #3
 8013a86:	f003 0303 	and.w	r3, r3, #3
 8013a8a:	4a84      	ldr	r2, [pc, #528]	@ (8013c9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8013a90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	ee07 3a90 	vmov	s15, r3
 8013a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	ee07 3a90 	vmov	s15, r3
 8013aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ab2:	ee07 3a90 	vmov	s15, r3
 8013ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8013abe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013ada:	e087      	b.n	8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	ee07 3a90 	vmov	s15, r3
 8013ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013aee:	4b6a      	ldr	r3, [pc, #424]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013af6:	ee07 3a90 	vmov	s15, r3
 8013afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013b1e:	e065      	b.n	8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b32:	4b59      	ldr	r3, [pc, #356]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b3a:	ee07 3a90 	vmov	s15, r3
 8013b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013b62:	e043      	b.n	8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	ee07 3a90 	vmov	s15, r3
 8013b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b76:	4b48      	ldr	r3, [pc, #288]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b7e:	ee07 3a90 	vmov	s15, r3
 8013b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ba6:	e021      	b.n	8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	ee07 3a90 	vmov	s15, r3
 8013bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bba:	4b37      	ldr	r3, [pc, #220]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bc2:	ee07 3a90 	vmov	s15, r3
 8013bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013bea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013bec:	4b2a      	ldr	r3, [pc, #168]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bf0:	0a5b      	lsrs	r3, r3, #9
 8013bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013bf6:	ee07 3a90 	vmov	s15, r3
 8013bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c12:	ee17 2a90 	vmov	r2, s15
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c1e:	0c1b      	lsrs	r3, r3, #16
 8013c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c24:	ee07 3a90 	vmov	s15, r3
 8013c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c40:	ee17 2a90 	vmov	r2, s15
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013c48:	4b13      	ldr	r3, [pc, #76]	@ (8013c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c4c:	0e1b      	lsrs	r3, r3, #24
 8013c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c52:	ee07 3a90 	vmov	s15, r3
 8013c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c6e:	ee17 2a90 	vmov	r2, s15
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013c76:	e008      	b.n	8013c8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2200      	movs	r2, #0
 8013c88:	609a      	str	r2, [r3, #8]
}
 8013c8a:	bf00      	nop
 8013c8c:	3724      	adds	r7, #36	@ 0x24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	58024400 	.word	0x58024400
 8013c9c:	03d09000 	.word	0x03d09000
 8013ca0:	46000000 	.word	0x46000000
 8013ca4:	4c742400 	.word	0x4c742400
 8013ca8:	4a742400 	.word	0x4a742400
 8013cac:	4bb71b00 	.word	0x4bb71b00

08013cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b089      	sub	sp, #36	@ 0x24
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cbc:	f003 0303 	and.w	r3, r3, #3
 8013cc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cc6:	0d1b      	lsrs	r3, r3, #20
 8013cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ccc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013cce:	4b9c      	ldr	r3, [pc, #624]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cd2:	0a1b      	lsrs	r3, r3, #8
 8013cd4:	f003 0301 	and.w	r3, r3, #1
 8013cd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013cda:	4b99      	ldr	r3, [pc, #612]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cde:	08db      	lsrs	r3, r3, #3
 8013ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ce4:	693a      	ldr	r2, [r7, #16]
 8013ce6:	fb02 f303 	mul.w	r3, r2, r3
 8013cea:	ee07 3a90 	vmov	s15, r3
 8013cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f000 8111 	beq.w	8013f20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	2b02      	cmp	r3, #2
 8013d02:	f000 8083 	beq.w	8013e0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	2b02      	cmp	r3, #2
 8013d0a:	f200 80a1 	bhi.w	8013e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013d0e:	69bb      	ldr	r3, [r7, #24]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d003      	beq.n	8013d1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013d14:	69bb      	ldr	r3, [r7, #24]
 8013d16:	2b01      	cmp	r3, #1
 8013d18:	d056      	beq.n	8013dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013d1a:	e099      	b.n	8013e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013d1c:	4b88      	ldr	r3, [pc, #544]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f003 0320 	and.w	r3, r3, #32
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d02d      	beq.n	8013d84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013d28:	4b85      	ldr	r3, [pc, #532]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	08db      	lsrs	r3, r3, #3
 8013d2e:	f003 0303 	and.w	r3, r3, #3
 8013d32:	4a84      	ldr	r2, [pc, #528]	@ (8013f44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013d34:	fa22 f303 	lsr.w	r3, r2, r3
 8013d38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	ee07 3a90 	vmov	s15, r3
 8013d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	ee07 3a90 	vmov	s15, r3
 8013d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d52:	4b7b      	ldr	r3, [pc, #492]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d5a:	ee07 3a90 	vmov	s15, r3
 8013d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013d82:	e087      	b.n	8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	ee07 3a90 	vmov	s15, r3
 8013d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013f4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d96:	4b6a      	ldr	r3, [pc, #424]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d9e:	ee07 3a90 	vmov	s15, r3
 8013da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013dc6:	e065      	b.n	8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	ee07 3a90 	vmov	s15, r3
 8013dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dda:	4b59      	ldr	r3, [pc, #356]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013de2:	ee07 3a90 	vmov	s15, r3
 8013de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e0a:	e043      	b.n	8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	ee07 3a90 	vmov	s15, r3
 8013e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e1e:	4b48      	ldr	r3, [pc, #288]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e26:	ee07 3a90 	vmov	s15, r3
 8013e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e4e:	e021      	b.n	8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	ee07 3a90 	vmov	s15, r3
 8013e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e62:	4b37      	ldr	r3, [pc, #220]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e6a:	ee07 3a90 	vmov	s15, r3
 8013e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013e94:	4b2a      	ldr	r3, [pc, #168]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e98:	0a5b      	lsrs	r3, r3, #9
 8013e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e9e:	ee07 3a90 	vmov	s15, r3
 8013ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8013eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013eba:	ee17 2a90 	vmov	r2, s15
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ec6:	0c1b      	lsrs	r3, r3, #16
 8013ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ecc:	ee07 3a90 	vmov	s15, r3
 8013ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ee8:	ee17 2a90 	vmov	r2, s15
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013ef0:	4b13      	ldr	r3, [pc, #76]	@ (8013f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ef4:	0e1b      	lsrs	r3, r3, #24
 8013ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013efa:	ee07 3a90 	vmov	s15, r3
 8013efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f16:	ee17 2a90 	vmov	r2, s15
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013f1e:	e008      	b.n	8013f32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	609a      	str	r2, [r3, #8]
}
 8013f32:	bf00      	nop
 8013f34:	3724      	adds	r7, #36	@ 0x24
 8013f36:	46bd      	mov	sp, r7
 8013f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop
 8013f40:	58024400 	.word	0x58024400
 8013f44:	03d09000 	.word	0x03d09000
 8013f48:	46000000 	.word	0x46000000
 8013f4c:	4c742400 	.word	0x4c742400
 8013f50:	4a742400 	.word	0x4a742400
 8013f54:	4bb71b00 	.word	0x4bb71b00

08013f58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b089      	sub	sp, #36	@ 0x24
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013f60:	4ba0      	ldr	r3, [pc, #640]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f64:	f003 0303 	and.w	r3, r3, #3
 8013f68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8013f6a:	4b9e      	ldr	r3, [pc, #632]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f6e:	091b      	lsrs	r3, r3, #4
 8013f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013f74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013f76:	4b9b      	ldr	r3, [pc, #620]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013f80:	4b98      	ldr	r3, [pc, #608]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f84:	08db      	lsrs	r3, r3, #3
 8013f86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f8a:	693a      	ldr	r2, [r7, #16]
 8013f8c:	fb02 f303 	mul.w	r3, r2, r3
 8013f90:	ee07 3a90 	vmov	s15, r3
 8013f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	f000 8111 	beq.w	80141c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8013fa4:	69bb      	ldr	r3, [r7, #24]
 8013fa6:	2b02      	cmp	r3, #2
 8013fa8:	f000 8083 	beq.w	80140b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	2b02      	cmp	r3, #2
 8013fb0:	f200 80a1 	bhi.w	80140f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d003      	beq.n	8013fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8013fba:	69bb      	ldr	r3, [r7, #24]
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d056      	beq.n	801406e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013fc0:	e099      	b.n	80140f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013fc2:	4b88      	ldr	r3, [pc, #544]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f003 0320 	and.w	r3, r3, #32
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d02d      	beq.n	801402a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013fce:	4b85      	ldr	r3, [pc, #532]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	08db      	lsrs	r3, r3, #3
 8013fd4:	f003 0303 	and.w	r3, r3, #3
 8013fd8:	4a83      	ldr	r2, [pc, #524]	@ (80141e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013fda:	fa22 f303 	lsr.w	r3, r2, r3
 8013fde:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	ee07 3a90 	vmov	s15, r3
 8013fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	ee07 3a90 	vmov	s15, r3
 8013ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ff8:	4b7a      	ldr	r3, [pc, #488]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014000:	ee07 3a90 	vmov	s15, r3
 8014004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014008:	ed97 6a03 	vldr	s12, [r7, #12]
 801400c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80141ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801401c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014024:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014028:	e087      	b.n	801413a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	ee07 3a90 	vmov	s15, r3
 8014030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014034:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80141f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801403c:	4b69      	ldr	r3, [pc, #420]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014044:	ee07 3a90 	vmov	s15, r3
 8014048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801404c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014050:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80141ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801405c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801406c:	e065      	b.n	801413a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	ee07 3a90 	vmov	s15, r3
 8014074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014078:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80141f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801407c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014080:	4b58      	ldr	r3, [pc, #352]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014088:	ee07 3a90 	vmov	s15, r3
 801408c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014090:	ed97 6a03 	vldr	s12, [r7, #12]
 8014094:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80141ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801409c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140b0:	e043      	b.n	801413a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	ee07 3a90 	vmov	s15, r3
 80140b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80141f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80140c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140c4:	4b47      	ldr	r3, [pc, #284]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140cc:	ee07 3a90 	vmov	s15, r3
 80140d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80140d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80141ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80140dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140f4:	e021      	b.n	801413a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	ee07 3a90 	vmov	s15, r3
 80140fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014100:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80141f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014108:	4b36      	ldr	r3, [pc, #216]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014110:	ee07 3a90 	vmov	s15, r3
 8014114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014118:	ed97 6a03 	vldr	s12, [r7, #12]
 801411c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80141ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801412c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014134:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014138:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801413a:	4b2a      	ldr	r3, [pc, #168]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801413e:	0a5b      	lsrs	r3, r3, #9
 8014140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014144:	ee07 3a90 	vmov	s15, r3
 8014148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801414c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014154:	edd7 6a07 	vldr	s13, [r7, #28]
 8014158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801415c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014160:	ee17 2a90 	vmov	r2, s15
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014168:	4b1e      	ldr	r3, [pc, #120]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801416c:	0c1b      	lsrs	r3, r3, #16
 801416e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014172:	ee07 3a90 	vmov	s15, r3
 8014176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801417a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801417e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014182:	edd7 6a07 	vldr	s13, [r7, #28]
 8014186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801418e:	ee17 2a90 	vmov	r2, s15
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014196:	4b13      	ldr	r3, [pc, #76]	@ (80141e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801419a:	0e1b      	lsrs	r3, r3, #24
 801419c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141a0:	ee07 3a90 	vmov	s15, r3
 80141a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80141b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141bc:	ee17 2a90 	vmov	r2, s15
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80141c4:	e008      	b.n	80141d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2200      	movs	r2, #0
 80141ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2200      	movs	r2, #0
 80141d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2200      	movs	r2, #0
 80141d6:	609a      	str	r2, [r3, #8]
}
 80141d8:	bf00      	nop
 80141da:	3724      	adds	r7, #36	@ 0x24
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr
 80141e4:	58024400 	.word	0x58024400
 80141e8:	03d09000 	.word	0x03d09000
 80141ec:	46000000 	.word	0x46000000
 80141f0:	4c742400 	.word	0x4c742400
 80141f4:	4a742400 	.word	0x4a742400
 80141f8:	4bb71b00 	.word	0x4bb71b00

080141fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014206:	2300      	movs	r3, #0
 8014208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801420a:	4b53      	ldr	r3, [pc, #332]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 801420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801420e:	f003 0303 	and.w	r3, r3, #3
 8014212:	2b03      	cmp	r3, #3
 8014214:	d101      	bne.n	801421a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	e099      	b.n	801434e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801421a:	4b4f      	ldr	r3, [pc, #316]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4a4e      	ldr	r2, [pc, #312]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014220:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014226:	f7f4 ffcd 	bl	80091c4 <HAL_GetTick>
 801422a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801422c:	e008      	b.n	8014240 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801422e:	f7f4 ffc9 	bl	80091c4 <HAL_GetTick>
 8014232:	4602      	mov	r2, r0
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	2b02      	cmp	r3, #2
 801423a:	d901      	bls.n	8014240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801423c:	2303      	movs	r3, #3
 801423e:	e086      	b.n	801434e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014240:	4b45      	ldr	r3, [pc, #276]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014248:	2b00      	cmp	r3, #0
 801424a:	d1f0      	bne.n	801422e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801424c:	4b42      	ldr	r3, [pc, #264]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 801424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014250:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	031b      	lsls	r3, r3, #12
 801425a:	493f      	ldr	r1, [pc, #252]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 801425c:	4313      	orrs	r3, r2
 801425e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	3b01      	subs	r3, #1
 8014266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	689b      	ldr	r3, [r3, #8]
 801426e:	3b01      	subs	r3, #1
 8014270:	025b      	lsls	r3, r3, #9
 8014272:	b29b      	uxth	r3, r3
 8014274:	431a      	orrs	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	3b01      	subs	r3, #1
 801427c:	041b      	lsls	r3, r3, #16
 801427e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014282:	431a      	orrs	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	691b      	ldr	r3, [r3, #16]
 8014288:	3b01      	subs	r3, #1
 801428a:	061b      	lsls	r3, r3, #24
 801428c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014290:	4931      	ldr	r1, [pc, #196]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014292:	4313      	orrs	r3, r2
 8014294:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014296:	4b30      	ldr	r3, [pc, #192]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801429a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	695b      	ldr	r3, [r3, #20]
 80142a2:	492d      	ldr	r1, [pc, #180]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142a4:	4313      	orrs	r3, r2
 80142a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80142a8:	4b2b      	ldr	r3, [pc, #172]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ac:	f023 0220 	bic.w	r2, r3, #32
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	699b      	ldr	r3, [r3, #24]
 80142b4:	4928      	ldr	r1, [pc, #160]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142b6:	4313      	orrs	r3, r2
 80142b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80142ba:	4b27      	ldr	r3, [pc, #156]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142be:	4a26      	ldr	r2, [pc, #152]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142c0:	f023 0310 	bic.w	r3, r3, #16
 80142c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80142c6:	4b24      	ldr	r3, [pc, #144]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80142ca:	4b24      	ldr	r3, [pc, #144]	@ (801435c <RCCEx_PLL2_Config+0x160>)
 80142cc:	4013      	ands	r3, r2
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	69d2      	ldr	r2, [r2, #28]
 80142d2:	00d2      	lsls	r2, r2, #3
 80142d4:	4920      	ldr	r1, [pc, #128]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142d6:	4313      	orrs	r3, r2
 80142d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80142da:	4b1f      	ldr	r3, [pc, #124]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142de:	4a1e      	ldr	r2, [pc, #120]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142e0:	f043 0310 	orr.w	r3, r3, #16
 80142e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d106      	bne.n	80142fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80142ec:	4b1a      	ldr	r3, [pc, #104]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142f0:	4a19      	ldr	r2, [pc, #100]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 80142f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80142f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80142f8:	e00f      	b.n	801431a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	2b01      	cmp	r3, #1
 80142fe:	d106      	bne.n	801430e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014300:	4b15      	ldr	r3, [pc, #84]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014304:	4a14      	ldr	r2, [pc, #80]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801430a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801430c:	e005      	b.n	801431a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801430e:	4b12      	ldr	r3, [pc, #72]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014312:	4a11      	ldr	r2, [pc, #68]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014318:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801431a:	4b0f      	ldr	r3, [pc, #60]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	4a0e      	ldr	r2, [pc, #56]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014320:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014326:	f7f4 ff4d 	bl	80091c4 <HAL_GetTick>
 801432a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801432c:	e008      	b.n	8014340 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801432e:	f7f4 ff49 	bl	80091c4 <HAL_GetTick>
 8014332:	4602      	mov	r2, r0
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	1ad3      	subs	r3, r2, r3
 8014338:	2b02      	cmp	r3, #2
 801433a:	d901      	bls.n	8014340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801433c:	2303      	movs	r3, #3
 801433e:	e006      	b.n	801434e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014340:	4b05      	ldr	r3, [pc, #20]	@ (8014358 <RCCEx_PLL2_Config+0x15c>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014348:	2b00      	cmp	r3, #0
 801434a:	d0f0      	beq.n	801432e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801434c:	7bfb      	ldrb	r3, [r7, #15]
}
 801434e:	4618      	mov	r0, r3
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop
 8014358:	58024400 	.word	0x58024400
 801435c:	ffff0007 	.word	0xffff0007

08014360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801436a:	2300      	movs	r3, #0
 801436c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801436e:	4b53      	ldr	r3, [pc, #332]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014372:	f003 0303 	and.w	r3, r3, #3
 8014376:	2b03      	cmp	r3, #3
 8014378:	d101      	bne.n	801437e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801437a:	2301      	movs	r3, #1
 801437c:	e099      	b.n	80144b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801437e:	4b4f      	ldr	r3, [pc, #316]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a4e      	ldr	r2, [pc, #312]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801438a:	f7f4 ff1b 	bl	80091c4 <HAL_GetTick>
 801438e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014390:	e008      	b.n	80143a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014392:	f7f4 ff17 	bl	80091c4 <HAL_GetTick>
 8014396:	4602      	mov	r2, r0
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	1ad3      	subs	r3, r2, r3
 801439c:	2b02      	cmp	r3, #2
 801439e:	d901      	bls.n	80143a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80143a0:	2303      	movs	r3, #3
 80143a2:	e086      	b.n	80144b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80143a4:	4b45      	ldr	r3, [pc, #276]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d1f0      	bne.n	8014392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80143b0:	4b42      	ldr	r3, [pc, #264]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 80143b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	051b      	lsls	r3, r3, #20
 80143be:	493f      	ldr	r1, [pc, #252]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 80143c0:	4313      	orrs	r3, r2
 80143c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	685b      	ldr	r3, [r3, #4]
 80143c8:	3b01      	subs	r3, #1
 80143ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	689b      	ldr	r3, [r3, #8]
 80143d2:	3b01      	subs	r3, #1
 80143d4:	025b      	lsls	r3, r3, #9
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	431a      	orrs	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	3b01      	subs	r3, #1
 80143e0:	041b      	lsls	r3, r3, #16
 80143e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80143e6:	431a      	orrs	r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	691b      	ldr	r3, [r3, #16]
 80143ec:	3b01      	subs	r3, #1
 80143ee:	061b      	lsls	r3, r3, #24
 80143f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80143f4:	4931      	ldr	r1, [pc, #196]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 80143f6:	4313      	orrs	r3, r2
 80143f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80143fa:	4b30      	ldr	r3, [pc, #192]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 80143fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	695b      	ldr	r3, [r3, #20]
 8014406:	492d      	ldr	r1, [pc, #180]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014408:	4313      	orrs	r3, r2
 801440a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801440c:	4b2b      	ldr	r3, [pc, #172]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 801440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014410:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	699b      	ldr	r3, [r3, #24]
 8014418:	4928      	ldr	r1, [pc, #160]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 801441a:	4313      	orrs	r3, r2
 801441c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801441e:	4b27      	ldr	r3, [pc, #156]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014422:	4a26      	ldr	r2, [pc, #152]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014428:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801442a:	4b24      	ldr	r3, [pc, #144]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 801442c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801442e:	4b24      	ldr	r3, [pc, #144]	@ (80144c0 <RCCEx_PLL3_Config+0x160>)
 8014430:	4013      	ands	r3, r2
 8014432:	687a      	ldr	r2, [r7, #4]
 8014434:	69d2      	ldr	r2, [r2, #28]
 8014436:	00d2      	lsls	r2, r2, #3
 8014438:	4920      	ldr	r1, [pc, #128]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 801443a:	4313      	orrs	r3, r2
 801443c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801443e:	4b1f      	ldr	r3, [pc, #124]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014442:	4a1e      	ldr	r2, [pc, #120]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d106      	bne.n	801445e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014450:	4b1a      	ldr	r3, [pc, #104]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014454:	4a19      	ldr	r2, [pc, #100]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014456:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801445a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801445c:	e00f      	b.n	801447e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d106      	bne.n	8014472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014464:	4b15      	ldr	r3, [pc, #84]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014468:	4a14      	ldr	r2, [pc, #80]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 801446a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801446e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014470:	e005      	b.n	801447e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014472:	4b12      	ldr	r3, [pc, #72]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014476:	4a11      	ldr	r2, [pc, #68]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801447c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801447e:	4b0f      	ldr	r3, [pc, #60]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	4a0e      	ldr	r2, [pc, #56]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 8014484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801448a:	f7f4 fe9b 	bl	80091c4 <HAL_GetTick>
 801448e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014490:	e008      	b.n	80144a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014492:	f7f4 fe97 	bl	80091c4 <HAL_GetTick>
 8014496:	4602      	mov	r2, r0
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	2b02      	cmp	r3, #2
 801449e:	d901      	bls.n	80144a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80144a0:	2303      	movs	r3, #3
 80144a2:	e006      	b.n	80144b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80144a4:	4b05      	ldr	r3, [pc, #20]	@ (80144bc <RCCEx_PLL3_Config+0x15c>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d0f0      	beq.n	8014492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3710      	adds	r7, #16
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	58024400 	.word	0x58024400
 80144c0:	ffff0007 	.word	0xffff0007

080144c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80144d2:	2301      	movs	r3, #1
 80144d4:	e10f      	b.n	80146f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2200      	movs	r2, #0
 80144da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a87      	ldr	r2, [pc, #540]	@ (8014700 <HAL_SPI_Init+0x23c>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d00f      	beq.n	8014506 <HAL_SPI_Init+0x42>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a86      	ldr	r2, [pc, #536]	@ (8014704 <HAL_SPI_Init+0x240>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d00a      	beq.n	8014506 <HAL_SPI_Init+0x42>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a84      	ldr	r2, [pc, #528]	@ (8014708 <HAL_SPI_Init+0x244>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d005      	beq.n	8014506 <HAL_SPI_Init+0x42>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	2b0f      	cmp	r3, #15
 8014500:	d901      	bls.n	8014506 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8014502:	2301      	movs	r3, #1
 8014504:	e0f7      	b.n	80146f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f001 fd22 	bl	8015f50 <SPI_GetPacketSize>
 801450c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4a7b      	ldr	r2, [pc, #492]	@ (8014700 <HAL_SPI_Init+0x23c>)
 8014514:	4293      	cmp	r3, r2
 8014516:	d00c      	beq.n	8014532 <HAL_SPI_Init+0x6e>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4a79      	ldr	r2, [pc, #484]	@ (8014704 <HAL_SPI_Init+0x240>)
 801451e:	4293      	cmp	r3, r2
 8014520:	d007      	beq.n	8014532 <HAL_SPI_Init+0x6e>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4a78      	ldr	r2, [pc, #480]	@ (8014708 <HAL_SPI_Init+0x244>)
 8014528:	4293      	cmp	r3, r2
 801452a:	d002      	beq.n	8014532 <HAL_SPI_Init+0x6e>
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2b08      	cmp	r3, #8
 8014530:	d811      	bhi.n	8014556 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014536:	4a72      	ldr	r2, [pc, #456]	@ (8014700 <HAL_SPI_Init+0x23c>)
 8014538:	4293      	cmp	r3, r2
 801453a:	d009      	beq.n	8014550 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	4a70      	ldr	r2, [pc, #448]	@ (8014704 <HAL_SPI_Init+0x240>)
 8014542:	4293      	cmp	r3, r2
 8014544:	d004      	beq.n	8014550 <HAL_SPI_Init+0x8c>
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	4a6f      	ldr	r2, [pc, #444]	@ (8014708 <HAL_SPI_Init+0x244>)
 801454c:	4293      	cmp	r3, r2
 801454e:	d104      	bne.n	801455a <HAL_SPI_Init+0x96>
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b10      	cmp	r3, #16
 8014554:	d901      	bls.n	801455a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014556:	2301      	movs	r3, #1
 8014558:	e0cd      	b.n	80146f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014560:	b2db      	uxtb	r3, r3
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2200      	movs	r2, #0
 801456a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f7f3 fb7c 	bl	8007c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2202      	movs	r2, #2
 8014578:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	681a      	ldr	r2, [r3, #0]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f022 0201 	bic.w	r2, r2, #1
 801458a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	689b      	ldr	r3, [r3, #8]
 8014592:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014596:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	699b      	ldr	r3, [r3, #24]
 801459c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80145a0:	d119      	bne.n	80145d6 <HAL_SPI_Init+0x112>
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80145aa:	d103      	bne.n	80145b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d008      	beq.n	80145c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d10c      	bne.n	80145d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80145c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80145c4:	d107      	bne.n	80145d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80145d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00f      	beq.n	8014602 <HAL_SPI_Init+0x13e>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	2b06      	cmp	r3, #6
 80145e8:	d90b      	bls.n	8014602 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	430a      	orrs	r2, r1
 80145fe:	601a      	str	r2, [r3, #0]
 8014600:	e007      	b.n	8014612 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014610:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	69da      	ldr	r2, [r3, #28]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801461a:	431a      	orrs	r2, r3
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	431a      	orrs	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014624:	ea42 0103 	orr.w	r1, r2, r3
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	68da      	ldr	r2, [r3, #12]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	430a      	orrs	r2, r1
 8014632:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801463c:	431a      	orrs	r2, r3
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014642:	431a      	orrs	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	699b      	ldr	r3, [r3, #24]
 8014648:	431a      	orrs	r2, r3
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	691b      	ldr	r3, [r3, #16]
 801464e:	431a      	orrs	r2, r3
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	695b      	ldr	r3, [r3, #20]
 8014654:	431a      	orrs	r2, r3
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6a1b      	ldr	r3, [r3, #32]
 801465a:	431a      	orrs	r2, r3
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	431a      	orrs	r2, r3
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014666:	431a      	orrs	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	689b      	ldr	r3, [r3, #8]
 801466c:	431a      	orrs	r2, r3
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014672:	ea42 0103 	orr.w	r1, r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	430a      	orrs	r2, r1
 8014680:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d113      	bne.n	80146b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801469c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	689b      	ldr	r3, [r3, #8]
 80146a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80146b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	f022 0201 	bic.w	r2, r2, #1
 80146c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	685b      	ldr	r3, [r3, #4]
 80146c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d00a      	beq.n	80146e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	68db      	ldr	r3, [r3, #12]
 80146d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	430a      	orrs	r2, r1
 80146e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2200      	movs	r2, #0
 80146e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2201      	movs	r2, #1
 80146f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80146f4:	2300      	movs	r3, #0
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	40013000 	.word	0x40013000
 8014704:	40003800 	.word	0x40003800
 8014708:	40003c00 	.word	0x40003c00

0801470c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b088      	sub	sp, #32
 8014710:	af02      	add	r7, sp, #8
 8014712:	60f8      	str	r0, [r7, #12]
 8014714:	60b9      	str	r1, [r7, #8]
 8014716:	603b      	str	r3, [r7, #0]
 8014718:	4613      	mov	r3, r2
 801471a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	3320      	adds	r3, #32
 8014722:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014724:	f7f4 fd4e 	bl	80091c4 <HAL_GetTick>
 8014728:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014730:	b2db      	uxtb	r3, r3
 8014732:	2b01      	cmp	r3, #1
 8014734:	d001      	beq.n	801473a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014736:	2302      	movs	r3, #2
 8014738:	e1d1      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d002      	beq.n	8014746 <HAL_SPI_Transmit+0x3a>
 8014740:	88fb      	ldrh	r3, [r7, #6]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d101      	bne.n	801474a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014746:	2301      	movs	r3, #1
 8014748:	e1c9      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014750:	2b01      	cmp	r3, #1
 8014752:	d101      	bne.n	8014758 <HAL_SPI_Transmit+0x4c>
 8014754:	2302      	movs	r3, #2
 8014756:	e1c2      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2201      	movs	r2, #1
 801475c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2203      	movs	r2, #3
 8014764:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2200      	movs	r2, #0
 801476c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	88fa      	ldrh	r2, [r7, #6]
 801477a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	88fa      	ldrh	r2, [r7, #6]
 8014782:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2200      	movs	r2, #0
 801478a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	2200      	movs	r2, #0
 8014790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2200      	movs	r2, #0
 8014798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2200      	movs	r2, #0
 80147a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2200      	movs	r2, #0
 80147a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	689b      	ldr	r3, [r3, #8]
 80147ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80147b0:	d108      	bne.n	80147c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80147c0:	601a      	str	r2, [r3, #0]
 80147c2:	e009      	b.n	80147d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80147d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	685a      	ldr	r2, [r3, #4]
 80147de:	4b96      	ldr	r3, [pc, #600]	@ (8014a38 <HAL_SPI_Transmit+0x32c>)
 80147e0:	4013      	ands	r3, r2
 80147e2:	88f9      	ldrh	r1, [r7, #6]
 80147e4:	68fa      	ldr	r2, [r7, #12]
 80147e6:	6812      	ldr	r2, [r2, #0]
 80147e8:	430b      	orrs	r3, r1
 80147ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	681a      	ldr	r2, [r3, #0]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f042 0201 	orr.w	r2, r2, #1
 80147fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014804:	d107      	bne.n	8014816 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	2b0f      	cmp	r3, #15
 801481c:	d947      	bls.n	80148ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801481e:	e03f      	b.n	80148a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	695b      	ldr	r3, [r3, #20]
 8014826:	f003 0302 	and.w	r3, r3, #2
 801482a:	2b02      	cmp	r3, #2
 801482c:	d114      	bne.n	8014858 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	6812      	ldr	r2, [r2, #0]
 8014838:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801483e:	1d1a      	adds	r2, r3, #4
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801484a:	b29b      	uxth	r3, r3
 801484c:	3b01      	subs	r3, #1
 801484e:	b29a      	uxth	r2, r3
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014856:	e023      	b.n	80148a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014858:	f7f4 fcb4 	bl	80091c4 <HAL_GetTick>
 801485c:	4602      	mov	r2, r0
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	1ad3      	subs	r3, r2, r3
 8014862:	683a      	ldr	r2, [r7, #0]
 8014864:	429a      	cmp	r2, r3
 8014866:	d803      	bhi.n	8014870 <HAL_SPI_Transmit+0x164>
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801486e:	d102      	bne.n	8014876 <HAL_SPI_Transmit+0x16a>
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d114      	bne.n	80148a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014876:	68f8      	ldr	r0, [r7, #12]
 8014878:	f001 fa9c 	bl	8015db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014882:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2201      	movs	r2, #1
 8014890:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2200      	movs	r2, #0
 8014898:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801489c:	2303      	movs	r3, #3
 801489e:	e11e      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148a6:	b29b      	uxth	r3, r3
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d1b9      	bne.n	8014820 <HAL_SPI_Transmit+0x114>
 80148ac:	e0f1      	b.n	8014a92 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	2b07      	cmp	r3, #7
 80148b4:	f240 80e6 	bls.w	8014a84 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80148b8:	e05d      	b.n	8014976 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	695b      	ldr	r3, [r3, #20]
 80148c0:	f003 0302 	and.w	r3, r3, #2
 80148c4:	2b02      	cmp	r3, #2
 80148c6:	d132      	bne.n	801492e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d918      	bls.n	8014906 <HAL_SPI_Transmit+0x1fa>
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d014      	beq.n	8014906 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	6812      	ldr	r2, [r2, #0]
 80148e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148ec:	1d1a      	adds	r2, r3, #4
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	3b02      	subs	r3, #2
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014904:	e037      	b.n	8014976 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801490a:	881a      	ldrh	r2, [r3, #0]
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014914:	1c9a      	adds	r2, r3, #2
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014920:	b29b      	uxth	r3, r3
 8014922:	3b01      	subs	r3, #1
 8014924:	b29a      	uxth	r2, r3
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801492c:	e023      	b.n	8014976 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801492e:	f7f4 fc49 	bl	80091c4 <HAL_GetTick>
 8014932:	4602      	mov	r2, r0
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	683a      	ldr	r2, [r7, #0]
 801493a:	429a      	cmp	r2, r3
 801493c:	d803      	bhi.n	8014946 <HAL_SPI_Transmit+0x23a>
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014944:	d102      	bne.n	801494c <HAL_SPI_Transmit+0x240>
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d114      	bne.n	8014976 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801494c:	68f8      	ldr	r0, [r7, #12]
 801494e:	f001 fa31 	bl	8015db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014958:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2201      	movs	r2, #1
 8014966:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	2200      	movs	r2, #0
 801496e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014972:	2303      	movs	r3, #3
 8014974:	e0b3      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801497c:	b29b      	uxth	r3, r3
 801497e:	2b00      	cmp	r3, #0
 8014980:	d19b      	bne.n	80148ba <HAL_SPI_Transmit+0x1ae>
 8014982:	e086      	b.n	8014a92 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	695b      	ldr	r3, [r3, #20]
 801498a:	f003 0302 	and.w	r3, r3, #2
 801498e:	2b02      	cmp	r3, #2
 8014990:	d154      	bne.n	8014a3c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014998:	b29b      	uxth	r3, r3
 801499a:	2b03      	cmp	r3, #3
 801499c:	d918      	bls.n	80149d0 <HAL_SPI_Transmit+0x2c4>
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149a2:	2b40      	cmp	r3, #64	@ 0x40
 80149a4:	d914      	bls.n	80149d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	6812      	ldr	r2, [r2, #0]
 80149b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149b6:	1d1a      	adds	r2, r3, #4
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	3b04      	subs	r3, #4
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80149ce:	e059      	b.n	8014a84 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	2b01      	cmp	r3, #1
 80149da:	d917      	bls.n	8014a0c <HAL_SPI_Transmit+0x300>
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d013      	beq.n	8014a0c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149e8:	881a      	ldrh	r2, [r3, #0]
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149f2:	1c9a      	adds	r2, r3, #2
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	3b02      	subs	r3, #2
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014a0a:	e03b      	b.n	8014a84 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	3320      	adds	r3, #32
 8014a16:	7812      	ldrb	r2, [r2, #0]
 8014a18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a1e:	1c5a      	adds	r2, r3, #1
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	3b01      	subs	r3, #1
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014a36:	e025      	b.n	8014a84 <HAL_SPI_Transmit+0x378>
 8014a38:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014a3c:	f7f4 fbc2 	bl	80091c4 <HAL_GetTick>
 8014a40:	4602      	mov	r2, r0
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	683a      	ldr	r2, [r7, #0]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d803      	bhi.n	8014a54 <HAL_SPI_Transmit+0x348>
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a52:	d102      	bne.n	8014a5a <HAL_SPI_Transmit+0x34e>
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d114      	bne.n	8014a84 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	f001 f9aa 	bl	8015db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2201      	movs	r2, #1
 8014a74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014a80:	2303      	movs	r3, #3
 8014a82:	e02c      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f47f af79 	bne.w	8014984 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	9300      	str	r3, [sp, #0]
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	2108      	movs	r1, #8
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f001 fa29 	bl	8015ef4 <SPI_WaitOnFlagUntilTimeout>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d007      	beq.n	8014ab8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014aae:	f043 0220 	orr.w	r2, r3, #32
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f001 f97b 	bl	8015db4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014ad8:	2301      	movs	r3, #1
 8014ada:	e000      	b.n	8014ade <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014adc:	2300      	movs	r3, #0
  }
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3718      	adds	r7, #24
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop

08014ae8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b088      	sub	sp, #32
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	603b      	str	r3, [r7, #0]
 8014af4:	4613      	mov	r3, r2
 8014af6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014afc:	095b      	lsrs	r3, r3, #5
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	3301      	adds	r3, #1
 8014b02:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	3330      	adds	r3, #48	@ 0x30
 8014b0a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014b0c:	f7f4 fb5a 	bl	80091c4 <HAL_GetTick>
 8014b10:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014b18:	b2db      	uxtb	r3, r3
 8014b1a:	2b01      	cmp	r3, #1
 8014b1c:	d001      	beq.n	8014b22 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014b1e:	2302      	movs	r3, #2
 8014b20:	e250      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <HAL_SPI_Receive+0x46>
 8014b28:	88fb      	ldrh	r3, [r7, #6]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d101      	bne.n	8014b32 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014b2e:	2301      	movs	r3, #1
 8014b30:	e248      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d101      	bne.n	8014b40 <HAL_SPI_Receive+0x58>
 8014b3c:	2302      	movs	r3, #2
 8014b3e:	e241      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2201      	movs	r2, #1
 8014b44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2204      	movs	r2, #4
 8014b4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2200      	movs	r2, #0
 8014b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	68ba      	ldr	r2, [r7, #8]
 8014b5c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	88fa      	ldrh	r2, [r7, #6]
 8014b62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	88fa      	ldrh	r2, [r7, #6]
 8014b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2200      	movs	r2, #0
 8014b72:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2200      	movs	r2, #0
 8014b78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	2200      	movs	r2, #0
 8014b88:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	689b      	ldr	r3, [r3, #8]
 8014b94:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014b98:	d108      	bne.n	8014bac <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014ba8:	601a      	str	r2, [r3, #0]
 8014baa:	e009      	b.n	8014bc0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014bbe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	685a      	ldr	r2, [r3, #4]
 8014bc6:	4b95      	ldr	r3, [pc, #596]	@ (8014e1c <HAL_SPI_Receive+0x334>)
 8014bc8:	4013      	ands	r3, r2
 8014bca:	88f9      	ldrh	r1, [r7, #6]
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	6812      	ldr	r2, [r2, #0]
 8014bd0:	430b      	orrs	r3, r1
 8014bd2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	f042 0201 	orr.w	r2, r2, #1
 8014be2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014bec:	d107      	bne.n	8014bfe <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014bfc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	2b0f      	cmp	r3, #15
 8014c04:	d96c      	bls.n	8014ce0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014c06:	e064      	b.n	8014cd2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	695b      	ldr	r3, [r3, #20]
 8014c0e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	695b      	ldr	r3, [r3, #20]
 8014c16:	f003 0301 	and.w	r3, r3, #1
 8014c1a:	2b01      	cmp	r3, #1
 8014c1c:	d114      	bne.n	8014c48 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014c28:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c2e:	1d1a      	adds	r2, r3, #4
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	b29a      	uxth	r2, r3
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c46:	e044      	b.n	8014cd2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	8bfa      	ldrh	r2, [r7, #30]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d919      	bls.n	8014c8a <HAL_SPI_Receive+0x1a2>
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d014      	beq.n	8014c8a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014c6a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c70:	1d1a      	adds	r2, r3, #4
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c7c:	b29b      	uxth	r3, r3
 8014c7e:	3b01      	subs	r3, #1
 8014c80:	b29a      	uxth	r2, r3
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c88:	e023      	b.n	8014cd2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c8a:	f7f4 fa9b 	bl	80091c4 <HAL_GetTick>
 8014c8e:	4602      	mov	r2, r0
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	1ad3      	subs	r3, r2, r3
 8014c94:	683a      	ldr	r2, [r7, #0]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d803      	bhi.n	8014ca2 <HAL_SPI_Receive+0x1ba>
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ca0:	d102      	bne.n	8014ca8 <HAL_SPI_Receive+0x1c0>
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d114      	bne.n	8014cd2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014ca8:	68f8      	ldr	r0, [r7, #12]
 8014caa:	f001 f883 	bl	8015db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014cce:	2303      	movs	r3, #3
 8014cd0:	e178      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d194      	bne.n	8014c08 <HAL_SPI_Receive+0x120>
 8014cde:	e15e      	b.n	8014f9e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	68db      	ldr	r3, [r3, #12]
 8014ce4:	2b07      	cmp	r3, #7
 8014ce6:	f240 8153 	bls.w	8014f90 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014cea:	e08f      	b.n	8014e0c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	695b      	ldr	r3, [r3, #20]
 8014cf2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	695b      	ldr	r3, [r3, #20]
 8014cfa:	f003 0301 	and.w	r3, r3, #1
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	d114      	bne.n	8014d2c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d06:	69ba      	ldr	r2, [r7, #24]
 8014d08:	8812      	ldrh	r2, [r2, #0]
 8014d0a:	b292      	uxth	r2, r2
 8014d0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d12:	1c9a      	adds	r2, r3, #2
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d1e:	b29b      	uxth	r3, r3
 8014d20:	3b01      	subs	r3, #1
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d2a:	e06f      	b.n	8014e0c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	8bfa      	ldrh	r2, [r7, #30]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d924      	bls.n	8014d84 <HAL_SPI_Receive+0x29c>
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d01f      	beq.n	8014d84 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d48:	69ba      	ldr	r2, [r7, #24]
 8014d4a:	8812      	ldrh	r2, [r2, #0]
 8014d4c:	b292      	uxth	r2, r2
 8014d4e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d54:	1c9a      	adds	r2, r3, #2
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d5e:	69ba      	ldr	r2, [r7, #24]
 8014d60:	8812      	ldrh	r2, [r2, #0]
 8014d62:	b292      	uxth	r2, r2
 8014d64:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d6a:	1c9a      	adds	r2, r3, #2
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	3b02      	subs	r3, #2
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d82:	e043      	b.n	8014e0c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	d119      	bne.n	8014dc4 <HAL_SPI_Receive+0x2dc>
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d014      	beq.n	8014dc4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d9e:	69ba      	ldr	r2, [r7, #24]
 8014da0:	8812      	ldrh	r2, [r2, #0]
 8014da2:	b292      	uxth	r2, r2
 8014da4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014daa:	1c9a      	adds	r2, r3, #2
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	3b01      	subs	r3, #1
 8014dba:	b29a      	uxth	r2, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014dc2:	e023      	b.n	8014e0c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014dc4:	f7f4 f9fe 	bl	80091c4 <HAL_GetTick>
 8014dc8:	4602      	mov	r2, r0
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	683a      	ldr	r2, [r7, #0]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d803      	bhi.n	8014ddc <HAL_SPI_Receive+0x2f4>
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dda:	d102      	bne.n	8014de2 <HAL_SPI_Receive+0x2fa>
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d114      	bne.n	8014e0c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f000 ffe6 	bl	8015db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014dee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2200      	movs	r2, #0
 8014e04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e08:	2303      	movs	r3, #3
 8014e0a:	e0db      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	f47f af69 	bne.w	8014cec <HAL_SPI_Receive+0x204>
 8014e1a:	e0c0      	b.n	8014f9e <HAL_SPI_Receive+0x4b6>
 8014e1c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	695b      	ldr	r3, [r3, #20]
 8014e26:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	695b      	ldr	r3, [r3, #20]
 8014e2e:	f003 0301 	and.w	r3, r3, #1
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	d117      	bne.n	8014e66 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e42:	7812      	ldrb	r2, [r2, #0]
 8014e44:	b2d2      	uxtb	r2, r2
 8014e46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e4c:	1c5a      	adds	r2, r3, #1
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	3b01      	subs	r3, #1
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e64:	e094      	b.n	8014f90 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	8bfa      	ldrh	r2, [r7, #30]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d946      	bls.n	8014f02 <HAL_SPI_Receive+0x41a>
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d041      	beq.n	8014f02 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e8a:	7812      	ldrb	r2, [r2, #0]
 8014e8c:	b2d2      	uxtb	r2, r2
 8014e8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e94:	1c5a      	adds	r2, r3, #1
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ea6:	7812      	ldrb	r2, [r2, #0]
 8014ea8:	b2d2      	uxtb	r2, r2
 8014eaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014eb0:	1c5a      	adds	r2, r3, #1
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ec2:	7812      	ldrb	r2, [r2, #0]
 8014ec4:	b2d2      	uxtb	r2, r2
 8014ec6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ecc:	1c5a      	adds	r2, r3, #1
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ede:	7812      	ldrb	r2, [r2, #0]
 8014ee0:	b2d2      	uxtb	r2, r2
 8014ee2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ee8:	1c5a      	adds	r2, r3, #1
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	3b04      	subs	r3, #4
 8014ef8:	b29a      	uxth	r2, r3
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f00:	e046      	b.n	8014f90 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	2b03      	cmp	r3, #3
 8014f0c:	d81c      	bhi.n	8014f48 <HAL_SPI_Receive+0x460>
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d017      	beq.n	8014f48 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f24:	7812      	ldrb	r2, [r2, #0]
 8014f26:	b2d2      	uxtb	r2, r2
 8014f28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	3b01      	subs	r3, #1
 8014f3e:	b29a      	uxth	r2, r3
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f46:	e023      	b.n	8014f90 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014f48:	f7f4 f93c 	bl	80091c4 <HAL_GetTick>
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	1ad3      	subs	r3, r2, r3
 8014f52:	683a      	ldr	r2, [r7, #0]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d803      	bhi.n	8014f60 <HAL_SPI_Receive+0x478>
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f5e:	d102      	bne.n	8014f66 <HAL_SPI_Receive+0x47e>
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d114      	bne.n	8014f90 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014f66:	68f8      	ldr	r0, [r7, #12]
 8014f68:	f000 ff24 	bl	8015db4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014f72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2200      	movs	r2, #0
 8014f88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014f8c:	2303      	movs	r3, #3
 8014f8e:	e019      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	f47f af41 	bne.w	8014e20 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014f9e:	68f8      	ldr	r0, [r7, #12]
 8014fa0:	f000 ff08 	bl	8015db4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	2201      	movs	r2, #1
 8014fa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d001      	beq.n	8014fc2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	e000      	b.n	8014fc4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8014fc2:	2300      	movs	r3, #0
  }
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3720      	adds	r7, #32
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b08e      	sub	sp, #56	@ 0x38
 8014fd0:	af02      	add	r7, sp, #8
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	60b9      	str	r1, [r7, #8]
 8014fd6:	607a      	str	r2, [r7, #4]
 8014fd8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	3320      	adds	r3, #32
 8014fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	3330      	adds	r3, #48	@ 0x30
 8014fe8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fee:	095b      	lsrs	r3, r3, #5
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ff6:	f7f4 f8e5 	bl	80091c4 <HAL_GetTick>
 8014ffa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8014ffc:	887b      	ldrh	r3, [r7, #2]
 8014ffe:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8015000:	887b      	ldrh	r3, [r7, #2]
 8015002:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801500a:	b2db      	uxtb	r3, r3
 801500c:	2b01      	cmp	r3, #1
 801500e:	d001      	beq.n	8015014 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8015010:	2302      	movs	r3, #2
 8015012:	e310      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d005      	beq.n	8015026 <HAL_SPI_TransmitReceive+0x5a>
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d002      	beq.n	8015026 <HAL_SPI_TransmitReceive+0x5a>
 8015020:	887b      	ldrh	r3, [r7, #2]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d101      	bne.n	801502a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8015026:	2301      	movs	r3, #1
 8015028:	e305      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015030:	2b01      	cmp	r3, #1
 8015032:	d101      	bne.n	8015038 <HAL_SPI_TransmitReceive+0x6c>
 8015034:	2302      	movs	r3, #2
 8015036:	e2fe      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2201      	movs	r2, #1
 801503c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2205      	movs	r2, #5
 8015044:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2200      	movs	r2, #0
 801504c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	887a      	ldrh	r2, [r7, #2]
 801505a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	887a      	ldrh	r2, [r7, #2]
 8015062:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	68ba      	ldr	r2, [r7, #8]
 801506a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	887a      	ldrh	r2, [r7, #2]
 8015070:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	887a      	ldrh	r2, [r7, #2]
 8015078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	2200      	movs	r2, #0
 8015080:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	2200      	movs	r2, #0
 8015086:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	68da      	ldr	r2, [r3, #12]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015096:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	4a70      	ldr	r2, [pc, #448]	@ (8015260 <HAL_SPI_TransmitReceive+0x294>)
 801509e:	4293      	cmp	r3, r2
 80150a0:	d009      	beq.n	80150b6 <HAL_SPI_TransmitReceive+0xea>
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	4a6f      	ldr	r2, [pc, #444]	@ (8015264 <HAL_SPI_TransmitReceive+0x298>)
 80150a8:	4293      	cmp	r3, r2
 80150aa:	d004      	beq.n	80150b6 <HAL_SPI_TransmitReceive+0xea>
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	4a6d      	ldr	r2, [pc, #436]	@ (8015268 <HAL_SPI_TransmitReceive+0x29c>)
 80150b2:	4293      	cmp	r3, r2
 80150b4:	d102      	bne.n	80150bc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80150b6:	2310      	movs	r3, #16
 80150b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80150ba:	e001      	b.n	80150c0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80150bc:	2308      	movs	r3, #8
 80150be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	685a      	ldr	r2, [r3, #4]
 80150c6:	4b69      	ldr	r3, [pc, #420]	@ (801526c <HAL_SPI_TransmitReceive+0x2a0>)
 80150c8:	4013      	ands	r3, r2
 80150ca:	8879      	ldrh	r1, [r7, #2]
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	6812      	ldr	r2, [r2, #0]
 80150d0:	430b      	orrs	r3, r1
 80150d2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	681a      	ldr	r2, [r3, #0]
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f042 0201 	orr.w	r2, r2, #1
 80150e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80150ec:	d107      	bne.n	80150fe <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	681a      	ldr	r2, [r3, #0]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80150fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	68db      	ldr	r3, [r3, #12]
 8015102:	2b0f      	cmp	r3, #15
 8015104:	f240 80a2 	bls.w	801524c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8015108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801510a:	089b      	lsrs	r3, r3, #2
 801510c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801510e:	e094      	b.n	801523a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	695b      	ldr	r3, [r3, #20]
 8015116:	f003 0302 	and.w	r3, r3, #2
 801511a:	2b02      	cmp	r3, #2
 801511c:	d120      	bne.n	8015160 <HAL_SPI_TransmitReceive+0x194>
 801511e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015120:	2b00      	cmp	r3, #0
 8015122:	d01d      	beq.n	8015160 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015124:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015126:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801512c:	429a      	cmp	r2, r3
 801512e:	d217      	bcs.n	8015160 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	6812      	ldr	r2, [r2, #0]
 801513a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015140:	1d1a      	adds	r2, r3, #4
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801514c:	b29b      	uxth	r3, r3
 801514e:	3b01      	subs	r3, #1
 8015150:	b29a      	uxth	r2, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801515e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	695b      	ldr	r3, [r3, #20]
 8015166:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015168:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801516a:	2b00      	cmp	r3, #0
 801516c:	d065      	beq.n	801523a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	695b      	ldr	r3, [r3, #20]
 8015174:	f003 0301 	and.w	r3, r3, #1
 8015178:	2b01      	cmp	r3, #1
 801517a:	d118      	bne.n	80151ae <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015184:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015186:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801518c:	1d1a      	adds	r2, r3, #4
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015198:	b29b      	uxth	r3, r3
 801519a:	3b01      	subs	r3, #1
 801519c:	b29a      	uxth	r2, r3
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80151ac:	e045      	b.n	801523a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80151ae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80151b0:	8bfb      	ldrh	r3, [r7, #30]
 80151b2:	429a      	cmp	r2, r3
 80151b4:	d21d      	bcs.n	80151f2 <HAL_SPI_TransmitReceive+0x226>
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d018      	beq.n	80151f2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80151ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151d0:	1d1a      	adds	r2, r3, #4
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151dc:	b29b      	uxth	r3, r3
 80151de:	3b01      	subs	r3, #1
 80151e0:	b29a      	uxth	r2, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80151f0:	e023      	b.n	801523a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80151f2:	f7f3 ffe7 	bl	80091c4 <HAL_GetTick>
 80151f6:	4602      	mov	r2, r0
 80151f8:	69bb      	ldr	r3, [r7, #24]
 80151fa:	1ad3      	subs	r3, r2, r3
 80151fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80151fe:	429a      	cmp	r2, r3
 8015200:	d803      	bhi.n	801520a <HAL_SPI_TransmitReceive+0x23e>
 8015202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015208:	d102      	bne.n	8015210 <HAL_SPI_TransmitReceive+0x244>
 801520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801520c:	2b00      	cmp	r3, #0
 801520e:	d114      	bne.n	801523a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f000 fdcf 	bl	8015db4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801521c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2201      	movs	r2, #1
 801522a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2200      	movs	r2, #0
 8015232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015236:	2303      	movs	r3, #3
 8015238:	e1fd      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801523a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801523c:	2b00      	cmp	r3, #0
 801523e:	f47f af67 	bne.w	8015110 <HAL_SPI_TransmitReceive+0x144>
 8015242:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015244:	2b00      	cmp	r3, #0
 8015246:	f47f af63 	bne.w	8015110 <HAL_SPI_TransmitReceive+0x144>
 801524a:	e1ce      	b.n	80155ea <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	68db      	ldr	r3, [r3, #12]
 8015250:	2b07      	cmp	r3, #7
 8015252:	f240 81c2 	bls.w	80155da <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8015256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015258:	085b      	lsrs	r3, r3, #1
 801525a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801525c:	e0c9      	b.n	80153f2 <HAL_SPI_TransmitReceive+0x426>
 801525e:	bf00      	nop
 8015260:	40013000 	.word	0x40013000
 8015264:	40003800 	.word	0x40003800
 8015268:	40003c00 	.word	0x40003c00
 801526c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	695b      	ldr	r3, [r3, #20]
 8015276:	f003 0302 	and.w	r3, r3, #2
 801527a:	2b02      	cmp	r3, #2
 801527c:	d11f      	bne.n	80152be <HAL_SPI_TransmitReceive+0x2f2>
 801527e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015280:	2b00      	cmp	r3, #0
 8015282:	d01c      	beq.n	80152be <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015284:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015286:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801528c:	429a      	cmp	r2, r3
 801528e:	d216      	bcs.n	80152be <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015294:	881a      	ldrh	r2, [r3, #0]
 8015296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015298:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801529e:	1c9a      	adds	r2, r3, #2
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	3b01      	subs	r3, #1
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80152bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	695b      	ldr	r3, [r3, #20]
 80152c4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80152c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 8092 	beq.w	80153f2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	695b      	ldr	r3, [r3, #20]
 80152d4:	f003 0301 	and.w	r3, r3, #1
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d118      	bne.n	801530e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152e0:	6a3a      	ldr	r2, [r7, #32]
 80152e2:	8812      	ldrh	r2, [r2, #0]
 80152e4:	b292      	uxth	r2, r2
 80152e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ec:	1c9a      	adds	r2, r3, #2
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152f8:	b29b      	uxth	r3, r3
 80152fa:	3b01      	subs	r3, #1
 80152fc:	b29a      	uxth	r2, r3
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801530a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801530c:	e071      	b.n	80153f2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801530e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015310:	8bfb      	ldrh	r3, [r7, #30]
 8015312:	429a      	cmp	r2, r3
 8015314:	d228      	bcs.n	8015368 <HAL_SPI_TransmitReceive+0x39c>
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801531c:	2b00      	cmp	r3, #0
 801531e:	d023      	beq.n	8015368 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015324:	6a3a      	ldr	r2, [r7, #32]
 8015326:	8812      	ldrh	r2, [r2, #0]
 8015328:	b292      	uxth	r2, r2
 801532a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015330:	1c9a      	adds	r2, r3, #2
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801533a:	6a3a      	ldr	r2, [r7, #32]
 801533c:	8812      	ldrh	r2, [r2, #0]
 801533e:	b292      	uxth	r2, r2
 8015340:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015346:	1c9a      	adds	r2, r3, #2
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015352:	b29b      	uxth	r3, r3
 8015354:	3b02      	subs	r3, #2
 8015356:	b29a      	uxth	r2, r3
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015364:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015366:	e044      	b.n	80153f2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015368:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801536a:	2b01      	cmp	r3, #1
 801536c:	d11d      	bne.n	80153aa <HAL_SPI_TransmitReceive+0x3de>
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015374:	2b00      	cmp	r3, #0
 8015376:	d018      	beq.n	80153aa <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801537c:	6a3a      	ldr	r2, [r7, #32]
 801537e:	8812      	ldrh	r2, [r2, #0]
 8015380:	b292      	uxth	r2, r2
 8015382:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015388:	1c9a      	adds	r2, r3, #2
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015394:	b29b      	uxth	r3, r3
 8015396:	3b01      	subs	r3, #1
 8015398:	b29a      	uxth	r2, r3
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80153a8:	e023      	b.n	80153f2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80153aa:	f7f3 ff0b 	bl	80091c4 <HAL_GetTick>
 80153ae:	4602      	mov	r2, r0
 80153b0:	69bb      	ldr	r3, [r7, #24]
 80153b2:	1ad3      	subs	r3, r2, r3
 80153b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80153b6:	429a      	cmp	r2, r3
 80153b8:	d803      	bhi.n	80153c2 <HAL_SPI_TransmitReceive+0x3f6>
 80153ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153c0:	d102      	bne.n	80153c8 <HAL_SPI_TransmitReceive+0x3fc>
 80153c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d114      	bne.n	80153f2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f000 fcf3 	bl	8015db4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80153d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2201      	movs	r2, #1
 80153e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2200      	movs	r2, #0
 80153ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80153ee:	2303      	movs	r3, #3
 80153f0:	e121      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80153f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	f47f af3b 	bne.w	8015270 <HAL_SPI_TransmitReceive+0x2a4>
 80153fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	f47f af37 	bne.w	8015270 <HAL_SPI_TransmitReceive+0x2a4>
 8015402:	e0f2      	b.n	80155ea <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	695b      	ldr	r3, [r3, #20]
 801540a:	f003 0302 	and.w	r3, r3, #2
 801540e:	2b02      	cmp	r3, #2
 8015410:	d121      	bne.n	8015456 <HAL_SPI_TransmitReceive+0x48a>
 8015412:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015414:	2b00      	cmp	r3, #0
 8015416:	d01e      	beq.n	8015456 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015418:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801541a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015420:	429a      	cmp	r2, r3
 8015422:	d218      	bcs.n	8015456 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	3320      	adds	r3, #32
 801542e:	7812      	ldrb	r2, [r2, #0]
 8015430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015436:	1c5a      	adds	r2, r3, #1
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015442:	b29b      	uxth	r3, r3
 8015444:	3b01      	subs	r3, #1
 8015446:	b29a      	uxth	r2, r3
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015454:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	695b      	ldr	r3, [r3, #20]
 801545c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801545e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015460:	2b00      	cmp	r3, #0
 8015462:	f000 80ba 	beq.w	80155da <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	695b      	ldr	r3, [r3, #20]
 801546c:	f003 0301 	and.w	r3, r3, #1
 8015470:	2b01      	cmp	r3, #1
 8015472:	d11b      	bne.n	80154ac <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015480:	7812      	ldrb	r2, [r2, #0]
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801548a:	1c5a      	adds	r2, r3, #1
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015496:	b29b      	uxth	r3, r3
 8015498:	3b01      	subs	r3, #1
 801549a:	b29a      	uxth	r2, r3
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154a8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80154aa:	e096      	b.n	80155da <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80154ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154ae:	8bfb      	ldrh	r3, [r7, #30]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d24a      	bcs.n	801554a <HAL_SPI_TransmitReceive+0x57e>
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d045      	beq.n	801554a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154ca:	7812      	ldrb	r2, [r2, #0]
 80154cc:	b2d2      	uxtb	r2, r2
 80154ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154d4:	1c5a      	adds	r2, r3, #1
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154e6:	7812      	ldrb	r2, [r2, #0]
 80154e8:	b2d2      	uxtb	r2, r2
 80154ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154f0:	1c5a      	adds	r2, r3, #1
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015502:	7812      	ldrb	r2, [r2, #0]
 8015504:	b2d2      	uxtb	r2, r2
 8015506:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801550c:	1c5a      	adds	r2, r3, #1
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801551e:	7812      	ldrb	r2, [r2, #0]
 8015520:	b2d2      	uxtb	r2, r2
 8015522:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015528:	1c5a      	adds	r2, r3, #1
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015534:	b29b      	uxth	r3, r3
 8015536:	3b04      	subs	r3, #4
 8015538:	b29a      	uxth	r2, r3
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015546:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015548:	e047      	b.n	80155da <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801554a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801554c:	2b03      	cmp	r3, #3
 801554e:	d820      	bhi.n	8015592 <HAL_SPI_TransmitReceive+0x5c6>
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015556:	2b00      	cmp	r3, #0
 8015558:	d01b      	beq.n	8015592 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015566:	7812      	ldrb	r2, [r2, #0]
 8015568:	b2d2      	uxtb	r2, r2
 801556a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015570:	1c5a      	adds	r2, r3, #1
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801557c:	b29b      	uxth	r3, r3
 801557e:	3b01      	subs	r3, #1
 8015580:	b29a      	uxth	r2, r3
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801558e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015590:	e023      	b.n	80155da <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015592:	f7f3 fe17 	bl	80091c4 <HAL_GetTick>
 8015596:	4602      	mov	r2, r0
 8015598:	69bb      	ldr	r3, [r7, #24]
 801559a:	1ad3      	subs	r3, r2, r3
 801559c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801559e:	429a      	cmp	r2, r3
 80155a0:	d803      	bhi.n	80155aa <HAL_SPI_TransmitReceive+0x5de>
 80155a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155a8:	d102      	bne.n	80155b0 <HAL_SPI_TransmitReceive+0x5e4>
 80155aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d114      	bne.n	80155da <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 fbff 	bl	8015db4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2201      	movs	r2, #1
 80155ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2200      	movs	r2, #0
 80155d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80155d6:	2303      	movs	r3, #3
 80155d8:	e02d      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80155da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f47f af11 	bne.w	8015404 <HAL_SPI_TransmitReceive+0x438>
 80155e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f47f af0d 	bne.w	8015404 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80155ea:	69bb      	ldr	r3, [r7, #24]
 80155ec:	9300      	str	r3, [sp, #0]
 80155ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155f0:	2200      	movs	r2, #0
 80155f2:	2108      	movs	r1, #8
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f000 fc7d 	bl	8015ef4 <SPI_WaitOnFlagUntilTimeout>
 80155fa:	4603      	mov	r3, r0
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d007      	beq.n	8015610 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015606:	f043 0220 	orr.w	r2, r3, #32
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015610:	68f8      	ldr	r0, [r7, #12]
 8015612:	f000 fbcf 	bl	8015db4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	2201      	movs	r2, #1
 801561a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2200      	movs	r2, #0
 8015622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801562c:	2b00      	cmp	r3, #0
 801562e:	d001      	beq.n	8015634 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015630:	2301      	movs	r3, #1
 8015632:	e000      	b.n	8015636 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8015634:	2300      	movs	r3, #0
  }
}
 8015636:	4618      	mov	r0, r3
 8015638:	3730      	adds	r7, #48	@ 0x30
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop

08015640 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b084      	sub	sp, #16
 8015644:	af00      	add	r7, sp, #0
 8015646:	60f8      	str	r0, [r7, #12]
 8015648:	60b9      	str	r1, [r7, #8]
 801564a:	4613      	mov	r3, r2
 801564c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015654:	b2db      	uxtb	r3, r3
 8015656:	2b01      	cmp	r3, #1
 8015658:	d001      	beq.n	801565e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801565a:	2302      	movs	r3, #2
 801565c:	e126      	b.n	80158ac <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d002      	beq.n	801566a <HAL_SPI_Transmit_DMA+0x2a>
 8015664:	88fb      	ldrh	r3, [r7, #6]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d101      	bne.n	801566e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801566a:	2301      	movs	r3, #1
 801566c:	e11e      	b.n	80158ac <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015674:	2b01      	cmp	r3, #1
 8015676:	d101      	bne.n	801567c <HAL_SPI_Transmit_DMA+0x3c>
 8015678:	2302      	movs	r3, #2
 801567a:	e117      	b.n	80158ac <HAL_SPI_Transmit_DMA+0x26c>
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2201      	movs	r2, #1
 8015680:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	2203      	movs	r2, #3
 8015688:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	2200      	movs	r2, #0
 8015690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	88fa      	ldrh	r2, [r7, #6]
 801569e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	88fa      	ldrh	r2, [r7, #6]
 80156a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	2200      	movs	r2, #0
 80156ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2200      	movs	r2, #0
 80156b4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2200      	movs	r2, #0
 80156ba:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	2200      	movs	r2, #0
 80156c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2200      	movs	r2, #0
 80156c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80156d4:	d108      	bne.n	80156e8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	e009      	b.n	80156fc <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	68db      	ldr	r3, [r3, #12]
 80156ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80156fa:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	2b0f      	cmp	r3, #15
 8015702:	d905      	bls.n	8015710 <HAL_SPI_Transmit_DMA+0xd0>
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015708:	699b      	ldr	r3, [r3, #24]
 801570a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801570e:	d10f      	bne.n	8015730 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015714:	2b07      	cmp	r3, #7
 8015716:	d911      	bls.n	801573c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801571c:	699b      	ldr	r3, [r3, #24]
 801571e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015722:	d00b      	beq.n	801573c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015728:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801572a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801572e:	d005      	beq.n	801573c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2200      	movs	r2, #0
 8015734:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015738:	2301      	movs	r3, #1
 801573a:	e0b7      	b.n	80158ac <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	68db      	ldr	r3, [r3, #12]
 8015740:	2b07      	cmp	r3, #7
 8015742:	d820      	bhi.n	8015786 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015748:	699b      	ldr	r3, [r3, #24]
 801574a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801574e:	d109      	bne.n	8015764 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015756:	b29b      	uxth	r3, r3
 8015758:	3301      	adds	r3, #1
 801575a:	105b      	asrs	r3, r3, #1
 801575c:	b29a      	uxth	r2, r3
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015768:	699b      	ldr	r3, [r3, #24]
 801576a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801576e:	d11e      	bne.n	80157ae <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015776:	b29b      	uxth	r3, r3
 8015778:	3303      	adds	r3, #3
 801577a:	109b      	asrs	r3, r3, #2
 801577c:	b29a      	uxth	r2, r3
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015784:	e013      	b.n	80157ae <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	68db      	ldr	r3, [r3, #12]
 801578a:	2b0f      	cmp	r3, #15
 801578c:	d80f      	bhi.n	80157ae <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015792:	699b      	ldr	r3, [r3, #24]
 8015794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015798:	d109      	bne.n	80157ae <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	3301      	adds	r3, #1
 80157a4:	105b      	asrs	r3, r3, #1
 80157a6:	b29a      	uxth	r2, r3
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157b2:	4a40      	ldr	r2, [pc, #256]	@ (80158b4 <HAL_SPI_Transmit_DMA+0x274>)
 80157b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157ba:	4a3f      	ldr	r2, [pc, #252]	@ (80158b8 <HAL_SPI_Transmit_DMA+0x278>)
 80157bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157c2:	4a3e      	ldr	r2, [pc, #248]	@ (80158bc <HAL_SPI_Transmit_DMA+0x27c>)
 80157c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157ca:	2200      	movs	r2, #0
 80157cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	689a      	ldr	r2, [r3, #8]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80157dc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157e6:	4619      	mov	r1, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	3320      	adds	r3, #32
 80157ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80157f8:	f7f6 f972 	bl	800bae0 <HAL_DMA_Start_IT>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d011      	beq.n	8015826 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015808:	f043 0210 	orr.w	r2, r3, #16
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2201      	movs	r2, #1
 8015816:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	2200      	movs	r2, #0
 801581e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015822:	2301      	movs	r3, #1
 8015824:	e042      	b.n	80158ac <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801582a:	69db      	ldr	r3, [r3, #28]
 801582c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015830:	d108      	bne.n	8015844 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	6859      	ldr	r1, [r3, #4]
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	681a      	ldr	r2, [r3, #0]
 801583c:	4b20      	ldr	r3, [pc, #128]	@ (80158c0 <HAL_SPI_Transmit_DMA+0x280>)
 801583e:	400b      	ands	r3, r1
 8015840:	6053      	str	r3, [r2, #4]
 8015842:	e009      	b.n	8015858 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	685a      	ldr	r2, [r3, #4]
 801584a:	4b1d      	ldr	r3, [pc, #116]	@ (80158c0 <HAL_SPI_Transmit_DMA+0x280>)
 801584c:	4013      	ands	r3, r2
 801584e:	88f9      	ldrh	r1, [r7, #6]
 8015850:	68fa      	ldr	r2, [r7, #12]
 8015852:	6812      	ldr	r2, [r2, #0]
 8015854:	430b      	orrs	r3, r1
 8015856:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	689a      	ldr	r2, [r3, #8]
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015866:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	691a      	ldr	r2, [r3, #16]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015876:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	681a      	ldr	r2, [r3, #0]
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	f042 0201 	orr.w	r2, r2, #1
 8015886:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	685b      	ldr	r3, [r3, #4]
 801588c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015890:	d107      	bne.n	80158a2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	681a      	ldr	r2, [r3, #0]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80158a0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2200      	movs	r2, #0
 80158a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80158aa:	2300      	movs	r3, #0
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3710      	adds	r7, #16
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	08015d1f 	.word	0x08015d1f
 80158b8:	08015cd9 	.word	0x08015cd9
 80158bc:	08015d3b 	.word	0x08015d3b
 80158c0:	ffff0000 	.word	0xffff0000

080158c4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b08a      	sub	sp, #40	@ 0x28
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	691b      	ldr	r3, [r3, #16]
 80158d2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	695b      	ldr	r3, [r3, #20]
 80158da:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80158dc:	6a3a      	ldr	r2, [r7, #32]
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	4013      	ands	r3, r2
 80158e2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	689b      	ldr	r3, [r3, #8]
 80158ea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80158ec:	2300      	movs	r3, #0
 80158ee:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80158f6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	3330      	adds	r3, #48	@ 0x30
 80158fe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015906:	2b00      	cmp	r3, #0
 8015908:	d010      	beq.n	801592c <HAL_SPI_IRQHandler+0x68>
 801590a:	6a3b      	ldr	r3, [r7, #32]
 801590c:	f003 0308 	and.w	r3, r3, #8
 8015910:	2b00      	cmp	r3, #0
 8015912:	d00b      	beq.n	801592c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	699a      	ldr	r2, [r3, #24]
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015922:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 f9cd 	bl	8015cc4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801592a:	e192      	b.n	8015c52 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015932:	2b00      	cmp	r3, #0
 8015934:	d113      	bne.n	801595e <HAL_SPI_IRQHandler+0x9a>
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	f003 0320 	and.w	r3, r3, #32
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10e      	bne.n	801595e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015946:	2b00      	cmp	r3, #0
 8015948:	d009      	beq.n	801595e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	4798      	blx	r3
    handled = 1UL;
 801595a:	2301      	movs	r3, #1
 801595c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015964:	2b00      	cmp	r3, #0
 8015966:	d10f      	bne.n	8015988 <HAL_SPI_IRQHandler+0xc4>
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	f003 0301 	and.w	r3, r3, #1
 801596e:	2b00      	cmp	r3, #0
 8015970:	d00a      	beq.n	8015988 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015978:	2b00      	cmp	r3, #0
 801597a:	d105      	bne.n	8015988 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	4798      	blx	r3
    handled = 1UL;
 8015984:	2301      	movs	r3, #1
 8015986:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	f003 0320 	and.w	r3, r3, #32
 801598e:	2b00      	cmp	r3, #0
 8015990:	d10f      	bne.n	80159b2 <HAL_SPI_IRQHandler+0xee>
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	f003 0302 	and.w	r3, r3, #2
 8015998:	2b00      	cmp	r3, #0
 801599a:	d00a      	beq.n	80159b2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d105      	bne.n	80159b2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	4798      	blx	r3
    handled = 1UL;
 80159ae:	2301      	movs	r3, #1
 80159b0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80159b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f040 8147 	bne.w	8015c48 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80159ba:	69bb      	ldr	r3, [r7, #24]
 80159bc:	f003 0308 	and.w	r3, r3, #8
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f000 808b 	beq.w	8015adc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	699a      	ldr	r2, [r3, #24]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	f042 0208 	orr.w	r2, r2, #8
 80159d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	699a      	ldr	r2, [r3, #24]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	f042 0210 	orr.w	r2, r2, #16
 80159e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	699a      	ldr	r2, [r3, #24]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80159f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	691a      	ldr	r2, [r3, #16]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	f022 0208 	bic.w	r2, r2, #8
 8015a04:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d13d      	bne.n	8015a90 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015a14:	e036      	b.n	8015a84 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	68db      	ldr	r3, [r3, #12]
 8015a1a:	2b0f      	cmp	r3, #15
 8015a1c:	d90b      	bls.n	8015a36 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015a28:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a2e:	1d1a      	adds	r2, r3, #4
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	665a      	str	r2, [r3, #100]	@ 0x64
 8015a34:	e01d      	b.n	8015a72 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	68db      	ldr	r3, [r3, #12]
 8015a3a:	2b07      	cmp	r3, #7
 8015a3c:	d90b      	bls.n	8015a56 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a42:	68fa      	ldr	r2, [r7, #12]
 8015a44:	8812      	ldrh	r2, [r2, #0]
 8015a46:	b292      	uxth	r2, r2
 8015a48:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a4e:	1c9a      	adds	r2, r3, #2
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	665a      	str	r2, [r3, #100]	@ 0x64
 8015a54:	e00d      	b.n	8015a72 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a62:	7812      	ldrb	r2, [r2, #0]
 8015a64:	b2d2      	uxtb	r2, r2
 8015a66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a6c:	1c5a      	adds	r2, r3, #1
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	3b01      	subs	r3, #1
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d1c2      	bne.n	8015a16 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 f98f 	bl	8015db4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2201      	movs	r2, #1
 8015a9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d003      	beq.n	8015ab0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 f901 	bl	8015cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015aae:	e0d0      	b.n	8015c52 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015ab0:	7cfb      	ldrb	r3, [r7, #19]
 8015ab2:	2b05      	cmp	r3, #5
 8015ab4:	d103      	bne.n	8015abe <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f000 f8e6 	bl	8015c88 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015abc:	e0c6      	b.n	8015c4c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015abe:	7cfb      	ldrb	r3, [r7, #19]
 8015ac0:	2b04      	cmp	r3, #4
 8015ac2:	d103      	bne.n	8015acc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f000 f8d5 	bl	8015c74 <HAL_SPI_RxCpltCallback>
    return;
 8015aca:	e0bf      	b.n	8015c4c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015acc:	7cfb      	ldrb	r3, [r7, #19]
 8015ace:	2b03      	cmp	r3, #3
 8015ad0:	f040 80bc 	bne.w	8015c4c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 f8c3 	bl	8015c60 <HAL_SPI_TxCpltCallback>
    return;
 8015ada:	e0b7      	b.n	8015c4c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015adc:	69bb      	ldr	r3, [r7, #24]
 8015ade:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f000 80b5 	beq.w	8015c52 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015ae8:	69bb      	ldr	r3, [r7, #24]
 8015aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d00f      	beq.n	8015b12 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015af8:	f043 0204 	orr.w	r2, r3, #4
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	699a      	ldr	r2, [r3, #24]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015b10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d00f      	beq.n	8015b3c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b22:	f043 0201 	orr.w	r2, r3, #1
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	699a      	ldr	r2, [r3, #24]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015b3a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d00f      	beq.n	8015b66 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b4c:	f043 0208 	orr.w	r2, r3, #8
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	699a      	ldr	r2, [r3, #24]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015b64:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	f003 0320 	and.w	r3, r3, #32
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d00f      	beq.n	8015b90 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	699a      	ldr	r2, [r3, #24]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	f042 0220 	orr.w	r2, r2, #32
 8015b8e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d05a      	beq.n	8015c50 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	681a      	ldr	r2, [r3, #0]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	f022 0201 	bic.w	r2, r2, #1
 8015ba8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	6919      	ldr	r1, [r3, #16]
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681a      	ldr	r2, [r3, #0]
 8015bb4:	4b28      	ldr	r3, [pc, #160]	@ (8015c58 <HAL_SPI_IRQHandler+0x394>)
 8015bb6:	400b      	ands	r3, r1
 8015bb8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015bc0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015bc4:	d138      	bne.n	8015c38 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	689a      	ldr	r2, [r3, #8]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015bd4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d013      	beq.n	8015c06 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015be2:	4a1e      	ldr	r2, [pc, #120]	@ (8015c5c <HAL_SPI_IRQHandler+0x398>)
 8015be4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7f6 fd00 	bl	800c5f0 <HAL_DMA_Abort_IT>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d007      	beq.n	8015c06 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d020      	beq.n	8015c50 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c12:	4a12      	ldr	r2, [pc, #72]	@ (8015c5c <HAL_SPI_IRQHandler+0x398>)
 8015c14:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f7f6 fce8 	bl	800c5f0 <HAL_DMA_Abort_IT>
 8015c20:	4603      	mov	r3, r0
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d014      	beq.n	8015c50 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015c36:	e00b      	b.n	8015c50 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f000 f835 	bl	8015cb0 <HAL_SPI_ErrorCallback>
    return;
 8015c46:	e003      	b.n	8015c50 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015c48:	bf00      	nop
 8015c4a:	e002      	b.n	8015c52 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015c4c:	bf00      	nop
 8015c4e:	e000      	b.n	8015c52 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015c50:	bf00      	nop
  }
}
 8015c52:	3728      	adds	r7, #40	@ 0x28
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	fffffc94 	.word	0xfffffc94
 8015c5c:	08015d81 	.word	0x08015d81

08015c60 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8015c68:	bf00      	nop
 8015c6a:	370c      	adds	r7, #12
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c72:	4770      	bx	lr

08015c74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015c74:	b480      	push	{r7}
 8015c76:	b083      	sub	sp, #12
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015c7c:	bf00      	nop
 8015c7e:	370c      	adds	r7, #12
 8015c80:	46bd      	mov	sp, r7
 8015c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c86:	4770      	bx	lr

08015c88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015c88:	b480      	push	{r7}
 8015c8a:	b083      	sub	sp, #12
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015c90:	bf00      	nop
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr

08015c9c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015ca4:	bf00      	nop
 8015ca6:	370c      	adds	r7, #12
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b083      	sub	sp, #12
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015cb8:	bf00      	nop
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr

08015cc4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015ccc:	bf00      	nop
 8015cce:	370c      	adds	r7, #12
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd6:	4770      	bx	lr

08015cd8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ce4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	2b07      	cmp	r3, #7
 8015cf0:	d011      	beq.n	8015d16 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015cf6:	69db      	ldr	r3, [r3, #28]
 8015cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015cfc:	d103      	bne.n	8015d06 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f7ff ffae 	bl	8015c60 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015d04:	e007      	b.n	8015d16 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	691a      	ldr	r2, [r3, #16]
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	f042 0208 	orr.w	r2, r2, #8
 8015d14:	611a      	str	r2, [r3, #16]
}
 8015d16:	bf00      	nop
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}

08015d1e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015d1e:	b580      	push	{r7, lr}
 8015d20:	b084      	sub	sp, #16
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d2a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f7ff ffb5 	bl	8015c9c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015d32:	bf00      	nop
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}

08015d3a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b084      	sub	sp, #16
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d46:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f7f7 fdcf 	bl	800d8ec <HAL_DMA_GetError>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b02      	cmp	r3, #2
 8015d52:	d011      	beq.n	8015d78 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f000 f82d 	bl	8015db4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d60:	f043 0210 	orr.w	r2, r3, #16
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015d72:	68f8      	ldr	r0, [r7, #12]
 8015d74:	f7ff ff9c 	bl	8015cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015d78:	bf00      	nop
 8015d7a:	3710      	adds	r7, #16
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b084      	sub	sp, #16
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	2200      	movs	r2, #0
 8015d92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	2201      	movs	r2, #1
 8015da2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015da6:	68f8      	ldr	r0, [r7, #12]
 8015da8:	f7ff ff82 	bl	8015cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015dac:	bf00      	nop
 8015dae:	3710      	adds	r7, #16
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b085      	sub	sp, #20
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	695b      	ldr	r3, [r3, #20]
 8015dc2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	699a      	ldr	r2, [r3, #24]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	f042 0208 	orr.w	r2, r2, #8
 8015dd2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	699a      	ldr	r2, [r3, #24]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	f042 0210 	orr.w	r2, r2, #16
 8015de2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	681a      	ldr	r2, [r3, #0]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f022 0201 	bic.w	r2, r2, #1
 8015df2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	6919      	ldr	r1, [r3, #16]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681a      	ldr	r2, [r3, #0]
 8015dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8015ef0 <SPI_CloseTransfer+0x13c>)
 8015e00:	400b      	ands	r3, r1
 8015e02:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	689a      	ldr	r2, [r3, #8]
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015e12:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015e1a:	b2db      	uxtb	r3, r3
 8015e1c:	2b04      	cmp	r3, #4
 8015e1e:	d014      	beq.n	8015e4a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	f003 0320 	and.w	r3, r3, #32
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d00f      	beq.n	8015e4a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	699a      	ldr	r2, [r3, #24]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	f042 0220 	orr.w	r2, r2, #32
 8015e48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	2b03      	cmp	r3, #3
 8015e54:	d014      	beq.n	8015e80 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d00f      	beq.n	8015e80 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e66:	f043 0204 	orr.w	r2, r3, #4
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	699a      	ldr	r2, [r3, #24]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e7e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d00f      	beq.n	8015eaa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e90:	f043 0201 	orr.w	r2, r3, #1
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	699a      	ldr	r2, [r3, #24]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015ea8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00f      	beq.n	8015ed4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eba:	f043 0208 	orr.w	r2, r3, #8
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	699a      	ldr	r2, [r3, #24]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015ed2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2200      	movs	r2, #0
 8015ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015ee4:	bf00      	nop
 8015ee6:	3714      	adds	r7, #20
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr
 8015ef0:	fffffc90 	.word	0xfffffc90

08015ef4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	603b      	str	r3, [r7, #0]
 8015f00:	4613      	mov	r3, r2
 8015f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015f04:	e010      	b.n	8015f28 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015f06:	f7f3 f95d 	bl	80091c4 <HAL_GetTick>
 8015f0a:	4602      	mov	r2, r0
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	683a      	ldr	r2, [r7, #0]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d803      	bhi.n	8015f1e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f1c:	d102      	bne.n	8015f24 <SPI_WaitOnFlagUntilTimeout+0x30>
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d101      	bne.n	8015f28 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015f24:	2303      	movs	r3, #3
 8015f26:	e00f      	b.n	8015f48 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	695a      	ldr	r2, [r3, #20]
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	4013      	ands	r3, r2
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	429a      	cmp	r2, r3
 8015f36:	bf0c      	ite	eq
 8015f38:	2301      	moveq	r3, #1
 8015f3a:	2300      	movne	r3, #0
 8015f3c:	b2db      	uxtb	r3, r3
 8015f3e:	461a      	mov	r2, r3
 8015f40:	79fb      	ldrb	r3, [r7, #7]
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d0df      	beq.n	8015f06 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3710      	adds	r7, #16
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015f50:	b480      	push	{r7}
 8015f52:	b085      	sub	sp, #20
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f5c:	095b      	lsrs	r3, r3, #5
 8015f5e:	3301      	adds	r3, #1
 8015f60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	3301      	adds	r3, #1
 8015f68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	3307      	adds	r3, #7
 8015f6e:	08db      	lsrs	r3, r3, #3
 8015f70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	68fa      	ldr	r2, [r7, #12]
 8015f76:	fb02 f303 	mul.w	r3, r2, r3
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3714      	adds	r7, #20
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr

08015f86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b082      	sub	sp, #8
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d101      	bne.n	8015f98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015f94:	2301      	movs	r3, #1
 8015f96:	e049      	b.n	801602c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d106      	bne.n	8015fb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7f2 ff13 	bl	8008dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2202      	movs	r2, #2
 8015fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681a      	ldr	r2, [r3, #0]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	3304      	adds	r3, #4
 8015fc2:	4619      	mov	r1, r3
 8015fc4:	4610      	mov	r0, r2
 8015fc6:	f000 fedb 	bl	8016d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	2201      	movs	r2, #1
 8015fce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2201      	movs	r2, #1
 8015fde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2201      	movs	r2, #1
 8015fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2201      	movs	r2, #1
 8015ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2201      	movs	r2, #1
 8015ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	2201      	movs	r2, #1
 8016006:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2201      	movs	r2, #1
 801600e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2201      	movs	r2, #1
 8016016:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	2201      	movs	r2, #1
 801601e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2201      	movs	r2, #1
 8016026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801602a:	2300      	movs	r3, #0
}
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016034:	b480      	push	{r7}
 8016036:	b085      	sub	sp, #20
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016042:	b2db      	uxtb	r3, r3
 8016044:	2b01      	cmp	r3, #1
 8016046:	d001      	beq.n	801604c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016048:	2301      	movs	r3, #1
 801604a:	e056      	b.n	80160fa <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2202      	movs	r2, #2
 8016050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	4a2b      	ldr	r2, [pc, #172]	@ (8016108 <HAL_TIM_Base_Start+0xd4>)
 801605a:	4293      	cmp	r3, r2
 801605c:	d02c      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016066:	d027      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	4a27      	ldr	r2, [pc, #156]	@ (801610c <HAL_TIM_Base_Start+0xd8>)
 801606e:	4293      	cmp	r3, r2
 8016070:	d022      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	4a26      	ldr	r2, [pc, #152]	@ (8016110 <HAL_TIM_Base_Start+0xdc>)
 8016078:	4293      	cmp	r3, r2
 801607a:	d01d      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4a24      	ldr	r2, [pc, #144]	@ (8016114 <HAL_TIM_Base_Start+0xe0>)
 8016082:	4293      	cmp	r3, r2
 8016084:	d018      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	4a23      	ldr	r2, [pc, #140]	@ (8016118 <HAL_TIM_Base_Start+0xe4>)
 801608c:	4293      	cmp	r3, r2
 801608e:	d013      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	4a21      	ldr	r2, [pc, #132]	@ (801611c <HAL_TIM_Base_Start+0xe8>)
 8016096:	4293      	cmp	r3, r2
 8016098:	d00e      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	4a20      	ldr	r2, [pc, #128]	@ (8016120 <HAL_TIM_Base_Start+0xec>)
 80160a0:	4293      	cmp	r3, r2
 80160a2:	d009      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4a1e      	ldr	r2, [pc, #120]	@ (8016124 <HAL_TIM_Base_Start+0xf0>)
 80160aa:	4293      	cmp	r3, r2
 80160ac:	d004      	beq.n	80160b8 <HAL_TIM_Base_Start+0x84>
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	4a1d      	ldr	r2, [pc, #116]	@ (8016128 <HAL_TIM_Base_Start+0xf4>)
 80160b4:	4293      	cmp	r3, r2
 80160b6:	d115      	bne.n	80160e4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	689a      	ldr	r2, [r3, #8]
 80160be:	4b1b      	ldr	r3, [pc, #108]	@ (801612c <HAL_TIM_Base_Start+0xf8>)
 80160c0:	4013      	ands	r3, r2
 80160c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	2b06      	cmp	r3, #6
 80160c8:	d015      	beq.n	80160f6 <HAL_TIM_Base_Start+0xc2>
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80160d0:	d011      	beq.n	80160f6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	681a      	ldr	r2, [r3, #0]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f042 0201 	orr.w	r2, r2, #1
 80160e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80160e2:	e008      	b.n	80160f6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	681a      	ldr	r2, [r3, #0]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	f042 0201 	orr.w	r2, r2, #1
 80160f2:	601a      	str	r2, [r3, #0]
 80160f4:	e000      	b.n	80160f8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80160f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80160f8:	2300      	movs	r3, #0
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3714      	adds	r7, #20
 80160fe:	46bd      	mov	sp, r7
 8016100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	40010000 	.word	0x40010000
 801610c:	40000400 	.word	0x40000400
 8016110:	40000800 	.word	0x40000800
 8016114:	40000c00 	.word	0x40000c00
 8016118:	40010400 	.word	0x40010400
 801611c:	40001800 	.word	0x40001800
 8016120:	40014000 	.word	0x40014000
 8016124:	4000e000 	.word	0x4000e000
 8016128:	4000e400 	.word	0x4000e400
 801612c:	00010007 	.word	0x00010007

08016130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016130:	b480      	push	{r7}
 8016132:	b085      	sub	sp, #20
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801613e:	b2db      	uxtb	r3, r3
 8016140:	2b01      	cmp	r3, #1
 8016142:	d001      	beq.n	8016148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016144:	2301      	movs	r3, #1
 8016146:	e05e      	b.n	8016206 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2202      	movs	r2, #2
 801614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	68da      	ldr	r2, [r3, #12]
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	f042 0201 	orr.w	r2, r2, #1
 801615e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	4a2b      	ldr	r2, [pc, #172]	@ (8016214 <HAL_TIM_Base_Start_IT+0xe4>)
 8016166:	4293      	cmp	r3, r2
 8016168:	d02c      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016172:	d027      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	4a27      	ldr	r2, [pc, #156]	@ (8016218 <HAL_TIM_Base_Start_IT+0xe8>)
 801617a:	4293      	cmp	r3, r2
 801617c:	d022      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	4a26      	ldr	r2, [pc, #152]	@ (801621c <HAL_TIM_Base_Start_IT+0xec>)
 8016184:	4293      	cmp	r3, r2
 8016186:	d01d      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	4a24      	ldr	r2, [pc, #144]	@ (8016220 <HAL_TIM_Base_Start_IT+0xf0>)
 801618e:	4293      	cmp	r3, r2
 8016190:	d018      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	4a23      	ldr	r2, [pc, #140]	@ (8016224 <HAL_TIM_Base_Start_IT+0xf4>)
 8016198:	4293      	cmp	r3, r2
 801619a:	d013      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	4a21      	ldr	r2, [pc, #132]	@ (8016228 <HAL_TIM_Base_Start_IT+0xf8>)
 80161a2:	4293      	cmp	r3, r2
 80161a4:	d00e      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	4a20      	ldr	r2, [pc, #128]	@ (801622c <HAL_TIM_Base_Start_IT+0xfc>)
 80161ac:	4293      	cmp	r3, r2
 80161ae:	d009      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	4a1e      	ldr	r2, [pc, #120]	@ (8016230 <HAL_TIM_Base_Start_IT+0x100>)
 80161b6:	4293      	cmp	r3, r2
 80161b8:	d004      	beq.n	80161c4 <HAL_TIM_Base_Start_IT+0x94>
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	4a1d      	ldr	r2, [pc, #116]	@ (8016234 <HAL_TIM_Base_Start_IT+0x104>)
 80161c0:	4293      	cmp	r3, r2
 80161c2:	d115      	bne.n	80161f0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	689a      	ldr	r2, [r3, #8]
 80161ca:	4b1b      	ldr	r3, [pc, #108]	@ (8016238 <HAL_TIM_Base_Start_IT+0x108>)
 80161cc:	4013      	ands	r3, r2
 80161ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2b06      	cmp	r3, #6
 80161d4:	d015      	beq.n	8016202 <HAL_TIM_Base_Start_IT+0xd2>
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80161dc:	d011      	beq.n	8016202 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	681a      	ldr	r2, [r3, #0]
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f042 0201 	orr.w	r2, r2, #1
 80161ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80161ee:	e008      	b.n	8016202 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f042 0201 	orr.w	r2, r2, #1
 80161fe:	601a      	str	r2, [r3, #0]
 8016200:	e000      	b.n	8016204 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016204:	2300      	movs	r3, #0
}
 8016206:	4618      	mov	r0, r3
 8016208:	3714      	adds	r7, #20
 801620a:	46bd      	mov	sp, r7
 801620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016210:	4770      	bx	lr
 8016212:	bf00      	nop
 8016214:	40010000 	.word	0x40010000
 8016218:	40000400 	.word	0x40000400
 801621c:	40000800 	.word	0x40000800
 8016220:	40000c00 	.word	0x40000c00
 8016224:	40010400 	.word	0x40010400
 8016228:	40001800 	.word	0x40001800
 801622c:	40014000 	.word	0x40014000
 8016230:	4000e000 	.word	0x4000e000
 8016234:	4000e400 	.word	0x4000e400
 8016238:	00010007 	.word	0x00010007

0801623c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d101      	bne.n	801624e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801624a:	2301      	movs	r3, #1
 801624c:	e049      	b.n	80162e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016254:	b2db      	uxtb	r3, r3
 8016256:	2b00      	cmp	r3, #0
 8016258:	d106      	bne.n	8016268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2200      	movs	r2, #0
 801625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f7f2 fd2e 	bl	8008cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2202      	movs	r2, #2
 801626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	3304      	adds	r3, #4
 8016278:	4619      	mov	r1, r3
 801627a:	4610      	mov	r0, r2
 801627c:	f000 fd80 	bl	8016d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2201      	movs	r2, #1
 8016284:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2201      	movs	r2, #1
 801628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2201      	movs	r2, #1
 8016294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2201      	movs	r2, #1
 801629c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2201      	movs	r2, #1
 80162a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2201      	movs	r2, #1
 80162ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2201      	movs	r2, #1
 80162b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	2201      	movs	r2, #1
 80162bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2201      	movs	r2, #1
 80162c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2201      	movs	r2, #1
 80162cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2201      	movs	r2, #1
 80162d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2201      	movs	r2, #1
 80162dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80162e0:	2300      	movs	r3, #0
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
	...

080162ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d109      	bne.n	8016310 <HAL_TIM_PWM_Start+0x24>
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016302:	b2db      	uxtb	r3, r3
 8016304:	2b01      	cmp	r3, #1
 8016306:	bf14      	ite	ne
 8016308:	2301      	movne	r3, #1
 801630a:	2300      	moveq	r3, #0
 801630c:	b2db      	uxtb	r3, r3
 801630e:	e03c      	b.n	801638a <HAL_TIM_PWM_Start+0x9e>
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	2b04      	cmp	r3, #4
 8016314:	d109      	bne.n	801632a <HAL_TIM_PWM_Start+0x3e>
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801631c:	b2db      	uxtb	r3, r3
 801631e:	2b01      	cmp	r3, #1
 8016320:	bf14      	ite	ne
 8016322:	2301      	movne	r3, #1
 8016324:	2300      	moveq	r3, #0
 8016326:	b2db      	uxtb	r3, r3
 8016328:	e02f      	b.n	801638a <HAL_TIM_PWM_Start+0x9e>
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	2b08      	cmp	r3, #8
 801632e:	d109      	bne.n	8016344 <HAL_TIM_PWM_Start+0x58>
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016336:	b2db      	uxtb	r3, r3
 8016338:	2b01      	cmp	r3, #1
 801633a:	bf14      	ite	ne
 801633c:	2301      	movne	r3, #1
 801633e:	2300      	moveq	r3, #0
 8016340:	b2db      	uxtb	r3, r3
 8016342:	e022      	b.n	801638a <HAL_TIM_PWM_Start+0x9e>
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	2b0c      	cmp	r3, #12
 8016348:	d109      	bne.n	801635e <HAL_TIM_PWM_Start+0x72>
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016350:	b2db      	uxtb	r3, r3
 8016352:	2b01      	cmp	r3, #1
 8016354:	bf14      	ite	ne
 8016356:	2301      	movne	r3, #1
 8016358:	2300      	moveq	r3, #0
 801635a:	b2db      	uxtb	r3, r3
 801635c:	e015      	b.n	801638a <HAL_TIM_PWM_Start+0x9e>
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	2b10      	cmp	r3, #16
 8016362:	d109      	bne.n	8016378 <HAL_TIM_PWM_Start+0x8c>
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801636a:	b2db      	uxtb	r3, r3
 801636c:	2b01      	cmp	r3, #1
 801636e:	bf14      	ite	ne
 8016370:	2301      	movne	r3, #1
 8016372:	2300      	moveq	r3, #0
 8016374:	b2db      	uxtb	r3, r3
 8016376:	e008      	b.n	801638a <HAL_TIM_PWM_Start+0x9e>
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801637e:	b2db      	uxtb	r3, r3
 8016380:	2b01      	cmp	r3, #1
 8016382:	bf14      	ite	ne
 8016384:	2301      	movne	r3, #1
 8016386:	2300      	moveq	r3, #0
 8016388:	b2db      	uxtb	r3, r3
 801638a:	2b00      	cmp	r3, #0
 801638c:	d001      	beq.n	8016392 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801638e:	2301      	movs	r3, #1
 8016390:	e0ab      	b.n	80164ea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d104      	bne.n	80163a2 <HAL_TIM_PWM_Start+0xb6>
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2202      	movs	r2, #2
 801639c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80163a0:	e023      	b.n	80163ea <HAL_TIM_PWM_Start+0xfe>
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	2b04      	cmp	r3, #4
 80163a6:	d104      	bne.n	80163b2 <HAL_TIM_PWM_Start+0xc6>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2202      	movs	r2, #2
 80163ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80163b0:	e01b      	b.n	80163ea <HAL_TIM_PWM_Start+0xfe>
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	2b08      	cmp	r3, #8
 80163b6:	d104      	bne.n	80163c2 <HAL_TIM_PWM_Start+0xd6>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2202      	movs	r2, #2
 80163bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80163c0:	e013      	b.n	80163ea <HAL_TIM_PWM_Start+0xfe>
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	2b0c      	cmp	r3, #12
 80163c6:	d104      	bne.n	80163d2 <HAL_TIM_PWM_Start+0xe6>
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2202      	movs	r2, #2
 80163cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80163d0:	e00b      	b.n	80163ea <HAL_TIM_PWM_Start+0xfe>
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	2b10      	cmp	r3, #16
 80163d6:	d104      	bne.n	80163e2 <HAL_TIM_PWM_Start+0xf6>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2202      	movs	r2, #2
 80163dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80163e0:	e003      	b.n	80163ea <HAL_TIM_PWM_Start+0xfe>
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2202      	movs	r2, #2
 80163e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	2201      	movs	r2, #1
 80163f0:	6839      	ldr	r1, [r7, #0]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f001 fa1a 	bl	801782c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	4a3d      	ldr	r2, [pc, #244]	@ (80164f4 <HAL_TIM_PWM_Start+0x208>)
 80163fe:	4293      	cmp	r3, r2
 8016400:	d013      	beq.n	801642a <HAL_TIM_PWM_Start+0x13e>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	4a3c      	ldr	r2, [pc, #240]	@ (80164f8 <HAL_TIM_PWM_Start+0x20c>)
 8016408:	4293      	cmp	r3, r2
 801640a:	d00e      	beq.n	801642a <HAL_TIM_PWM_Start+0x13e>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	4a3a      	ldr	r2, [pc, #232]	@ (80164fc <HAL_TIM_PWM_Start+0x210>)
 8016412:	4293      	cmp	r3, r2
 8016414:	d009      	beq.n	801642a <HAL_TIM_PWM_Start+0x13e>
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	4a39      	ldr	r2, [pc, #228]	@ (8016500 <HAL_TIM_PWM_Start+0x214>)
 801641c:	4293      	cmp	r3, r2
 801641e:	d004      	beq.n	801642a <HAL_TIM_PWM_Start+0x13e>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	4a37      	ldr	r2, [pc, #220]	@ (8016504 <HAL_TIM_PWM_Start+0x218>)
 8016426:	4293      	cmp	r3, r2
 8016428:	d101      	bne.n	801642e <HAL_TIM_PWM_Start+0x142>
 801642a:	2301      	movs	r3, #1
 801642c:	e000      	b.n	8016430 <HAL_TIM_PWM_Start+0x144>
 801642e:	2300      	movs	r3, #0
 8016430:	2b00      	cmp	r3, #0
 8016432:	d007      	beq.n	8016444 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016442:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	4a2a      	ldr	r2, [pc, #168]	@ (80164f4 <HAL_TIM_PWM_Start+0x208>)
 801644a:	4293      	cmp	r3, r2
 801644c:	d02c      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016456:	d027      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	4a2a      	ldr	r2, [pc, #168]	@ (8016508 <HAL_TIM_PWM_Start+0x21c>)
 801645e:	4293      	cmp	r3, r2
 8016460:	d022      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	4a29      	ldr	r2, [pc, #164]	@ (801650c <HAL_TIM_PWM_Start+0x220>)
 8016468:	4293      	cmp	r3, r2
 801646a:	d01d      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	4a27      	ldr	r2, [pc, #156]	@ (8016510 <HAL_TIM_PWM_Start+0x224>)
 8016472:	4293      	cmp	r3, r2
 8016474:	d018      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	4a1f      	ldr	r2, [pc, #124]	@ (80164f8 <HAL_TIM_PWM_Start+0x20c>)
 801647c:	4293      	cmp	r3, r2
 801647e:	d013      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	4a23      	ldr	r2, [pc, #140]	@ (8016514 <HAL_TIM_PWM_Start+0x228>)
 8016486:	4293      	cmp	r3, r2
 8016488:	d00e      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	4a1b      	ldr	r2, [pc, #108]	@ (80164fc <HAL_TIM_PWM_Start+0x210>)
 8016490:	4293      	cmp	r3, r2
 8016492:	d009      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	4a1f      	ldr	r2, [pc, #124]	@ (8016518 <HAL_TIM_PWM_Start+0x22c>)
 801649a:	4293      	cmp	r3, r2
 801649c:	d004      	beq.n	80164a8 <HAL_TIM_PWM_Start+0x1bc>
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	4a1e      	ldr	r2, [pc, #120]	@ (801651c <HAL_TIM_PWM_Start+0x230>)
 80164a4:	4293      	cmp	r3, r2
 80164a6:	d115      	bne.n	80164d4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	689a      	ldr	r2, [r3, #8]
 80164ae:	4b1c      	ldr	r3, [pc, #112]	@ (8016520 <HAL_TIM_PWM_Start+0x234>)
 80164b0:	4013      	ands	r3, r2
 80164b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	2b06      	cmp	r3, #6
 80164b8:	d015      	beq.n	80164e6 <HAL_TIM_PWM_Start+0x1fa>
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80164c0:	d011      	beq.n	80164e6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	681a      	ldr	r2, [r3, #0]
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	f042 0201 	orr.w	r2, r2, #1
 80164d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164d2:	e008      	b.n	80164e6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	f042 0201 	orr.w	r2, r2, #1
 80164e2:	601a      	str	r2, [r3, #0]
 80164e4:	e000      	b.n	80164e8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80164e8:	2300      	movs	r3, #0
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3710      	adds	r7, #16
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	40010000 	.word	0x40010000
 80164f8:	40010400 	.word	0x40010400
 80164fc:	40014000 	.word	0x40014000
 8016500:	40014400 	.word	0x40014400
 8016504:	40014800 	.word	0x40014800
 8016508:	40000400 	.word	0x40000400
 801650c:	40000800 	.word	0x40000800
 8016510:	40000c00 	.word	0x40000c00
 8016514:	40001800 	.word	0x40001800
 8016518:	4000e000 	.word	0x4000e000
 801651c:	4000e400 	.word	0x4000e400
 8016520:	00010007 	.word	0x00010007

08016524 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d101      	bne.n	8016536 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016532:	2301      	movs	r3, #1
 8016534:	e049      	b.n	80165ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801653c:	b2db      	uxtb	r3, r3
 801653e:	2b00      	cmp	r3, #0
 8016540:	d106      	bne.n	8016550 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2200      	movs	r2, #0
 8016546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7f2 fbf4 	bl	8008d38 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	2202      	movs	r2, #2
 8016554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	3304      	adds	r3, #4
 8016560:	4619      	mov	r1, r3
 8016562:	4610      	mov	r0, r2
 8016564:	f000 fc0c 	bl	8016d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2201      	movs	r2, #1
 801656c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2201      	movs	r2, #1
 8016574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2201      	movs	r2, #1
 801657c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2201      	movs	r2, #1
 8016584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2201      	movs	r2, #1
 801658c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2201      	movs	r2, #1
 8016594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2201      	movs	r2, #1
 801659c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2201      	movs	r2, #1
 80165a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2201      	movs	r2, #1
 80165ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2201      	movs	r2, #1
 80165b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2201      	movs	r2, #1
 80165bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2201      	movs	r2, #1
 80165c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b084      	sub	sp, #16
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	691b      	ldr	r3, [r3, #16]
 80165e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	f003 0302 	and.w	r3, r3, #2
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d020      	beq.n	8016636 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	f003 0302 	and.w	r3, r3, #2
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d01b      	beq.n	8016636 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	f06f 0202 	mvn.w	r2, #2
 8016606:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2201      	movs	r2, #1
 801660c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	699b      	ldr	r3, [r3, #24]
 8016614:	f003 0303 	and.w	r3, r3, #3
 8016618:	2b00      	cmp	r3, #0
 801661a:	d003      	beq.n	8016624 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f000 fb91 	bl	8016d44 <HAL_TIM_IC_CaptureCallback>
 8016622:	e005      	b.n	8016630 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f000 fb83 	bl	8016d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f000 fb94 	bl	8016d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2200      	movs	r2, #0
 8016634:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	f003 0304 	and.w	r3, r3, #4
 801663c:	2b00      	cmp	r3, #0
 801663e:	d020      	beq.n	8016682 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	f003 0304 	and.w	r3, r3, #4
 8016646:	2b00      	cmp	r3, #0
 8016648:	d01b      	beq.n	8016682 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	f06f 0204 	mvn.w	r2, #4
 8016652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2202      	movs	r2, #2
 8016658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	699b      	ldr	r3, [r3, #24]
 8016660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016664:	2b00      	cmp	r3, #0
 8016666:	d003      	beq.n	8016670 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f000 fb6b 	bl	8016d44 <HAL_TIM_IC_CaptureCallback>
 801666e:	e005      	b.n	801667c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 fb5d 	bl	8016d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f000 fb6e 	bl	8016d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2200      	movs	r2, #0
 8016680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	f003 0308 	and.w	r3, r3, #8
 8016688:	2b00      	cmp	r3, #0
 801668a:	d020      	beq.n	80166ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	f003 0308 	and.w	r3, r3, #8
 8016692:	2b00      	cmp	r3, #0
 8016694:	d01b      	beq.n	80166ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	f06f 0208 	mvn.w	r2, #8
 801669e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2204      	movs	r2, #4
 80166a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	69db      	ldr	r3, [r3, #28]
 80166ac:	f003 0303 	and.w	r3, r3, #3
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d003      	beq.n	80166bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f000 fb45 	bl	8016d44 <HAL_TIM_IC_CaptureCallback>
 80166ba:	e005      	b.n	80166c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f000 fb37 	bl	8016d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f000 fb48 	bl	8016d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	f003 0310 	and.w	r3, r3, #16
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d020      	beq.n	801671a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	f003 0310 	and.w	r3, r3, #16
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d01b      	beq.n	801671a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f06f 0210 	mvn.w	r2, #16
 80166ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2208      	movs	r2, #8
 80166f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	69db      	ldr	r3, [r3, #28]
 80166f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d003      	beq.n	8016708 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f000 fb1f 	bl	8016d44 <HAL_TIM_IC_CaptureCallback>
 8016706:	e005      	b.n	8016714 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f000 fb11 	bl	8016d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f000 fb22 	bl	8016d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801671a:	68bb      	ldr	r3, [r7, #8]
 801671c:	f003 0301 	and.w	r3, r3, #1
 8016720:	2b00      	cmp	r3, #0
 8016722:	d00c      	beq.n	801673e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	f003 0301 	and.w	r3, r3, #1
 801672a:	2b00      	cmp	r3, #0
 801672c:	d007      	beq.n	801673e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	f06f 0201 	mvn.w	r2, #1
 8016736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f7ef fae7 	bl	8005d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016744:	2b00      	cmp	r3, #0
 8016746:	d104      	bne.n	8016752 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016748:	68bb      	ldr	r3, [r7, #8]
 801674a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801674e:	2b00      	cmp	r3, #0
 8016750:	d00c      	beq.n	801676c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016758:	2b00      	cmp	r3, #0
 801675a:	d007      	beq.n	801676c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f001 f9b8 	bl	8017adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016772:	2b00      	cmp	r3, #0
 8016774:	d00c      	beq.n	8016790 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801677c:	2b00      	cmp	r3, #0
 801677e:	d007      	beq.n	8016790 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f001 f9b0 	bl	8017af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016796:	2b00      	cmp	r3, #0
 8016798:	d00c      	beq.n	80167b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d007      	beq.n	80167b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80167ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f000 fadc 	bl	8016d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	f003 0320 	and.w	r3, r3, #32
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d00c      	beq.n	80167d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	f003 0320 	and.w	r3, r3, #32
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d007      	beq.n	80167d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f06f 0220 	mvn.w	r2, #32
 80167d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f001 f978 	bl	8017ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80167d8:	bf00      	nop
 80167da:	3710      	adds	r7, #16
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b086      	sub	sp, #24
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80167ec:	2300      	movs	r3, #0
 80167ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80167f6:	2b01      	cmp	r3, #1
 80167f8:	d101      	bne.n	80167fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80167fa:	2302      	movs	r3, #2
 80167fc:	e088      	b.n	8016910 <HAL_TIM_IC_ConfigChannel+0x130>
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	2201      	movs	r2, #1
 8016802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d11b      	bne.n	8016844 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801681c:	f000 fe32 	bl	8017484 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	699a      	ldr	r2, [r3, #24]
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	f022 020c 	bic.w	r2, r2, #12
 801682e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	6999      	ldr	r1, [r3, #24]
 8016836:	68bb      	ldr	r3, [r7, #8]
 8016838:	689a      	ldr	r2, [r3, #8]
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	430a      	orrs	r2, r1
 8016840:	619a      	str	r2, [r3, #24]
 8016842:	e060      	b.n	8016906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2b04      	cmp	r3, #4
 8016848:	d11c      	bne.n	8016884 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801685a:	f000 fec2 	bl	80175e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	699a      	ldr	r2, [r3, #24]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801686c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	6999      	ldr	r1, [r3, #24]
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	021a      	lsls	r2, r3, #8
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	430a      	orrs	r2, r1
 8016880:	619a      	str	r2, [r3, #24]
 8016882:	e040      	b.n	8016906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2b08      	cmp	r3, #8
 8016888:	d11b      	bne.n	80168c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016892:	68bb      	ldr	r3, [r7, #8]
 8016894:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801689a:	f000 ff0f 	bl	80176bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	69da      	ldr	r2, [r3, #28]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f022 020c 	bic.w	r2, r2, #12
 80168ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	69d9      	ldr	r1, [r3, #28]
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	689a      	ldr	r2, [r3, #8]
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	430a      	orrs	r2, r1
 80168be:	61da      	str	r2, [r3, #28]
 80168c0:	e021      	b.n	8016906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b0c      	cmp	r3, #12
 80168c6:	d11c      	bne.n	8016902 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80168d8:	f000 ff2c 	bl	8017734 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	69da      	ldr	r2, [r3, #28]
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80168ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	69d9      	ldr	r1, [r3, #28]
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	689b      	ldr	r3, [r3, #8]
 80168f6:	021a      	lsls	r2, r3, #8
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	430a      	orrs	r2, r1
 80168fe:	61da      	str	r2, [r3, #28]
 8016900:	e001      	b.n	8016906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016902:	2301      	movs	r3, #1
 8016904:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2200      	movs	r2, #0
 801690a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016910:	4618      	mov	r0, r3
 8016912:	3718      	adds	r7, #24
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b086      	sub	sp, #24
 801691c:	af00      	add	r7, sp, #0
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016924:	2300      	movs	r3, #0
 8016926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801692e:	2b01      	cmp	r3, #1
 8016930:	d101      	bne.n	8016936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016932:	2302      	movs	r3, #2
 8016934:	e0ff      	b.n	8016b36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	2201      	movs	r2, #1
 801693a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2b14      	cmp	r3, #20
 8016942:	f200 80f0 	bhi.w	8016b26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016946:	a201      	add	r2, pc, #4	@ (adr r2, 801694c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801694c:	080169a1 	.word	0x080169a1
 8016950:	08016b27 	.word	0x08016b27
 8016954:	08016b27 	.word	0x08016b27
 8016958:	08016b27 	.word	0x08016b27
 801695c:	080169e1 	.word	0x080169e1
 8016960:	08016b27 	.word	0x08016b27
 8016964:	08016b27 	.word	0x08016b27
 8016968:	08016b27 	.word	0x08016b27
 801696c:	08016a23 	.word	0x08016a23
 8016970:	08016b27 	.word	0x08016b27
 8016974:	08016b27 	.word	0x08016b27
 8016978:	08016b27 	.word	0x08016b27
 801697c:	08016a63 	.word	0x08016a63
 8016980:	08016b27 	.word	0x08016b27
 8016984:	08016b27 	.word	0x08016b27
 8016988:	08016b27 	.word	0x08016b27
 801698c:	08016aa5 	.word	0x08016aa5
 8016990:	08016b27 	.word	0x08016b27
 8016994:	08016b27 	.word	0x08016b27
 8016998:	08016b27 	.word	0x08016b27
 801699c:	08016ae5 	.word	0x08016ae5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	68b9      	ldr	r1, [r7, #8]
 80169a6:	4618      	mov	r0, r3
 80169a8:	f000 fa96 	bl	8016ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	699a      	ldr	r2, [r3, #24]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f042 0208 	orr.w	r2, r2, #8
 80169ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	699a      	ldr	r2, [r3, #24]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	f022 0204 	bic.w	r2, r2, #4
 80169ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	6999      	ldr	r1, [r3, #24]
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	691a      	ldr	r2, [r3, #16]
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	430a      	orrs	r2, r1
 80169dc:	619a      	str	r2, [r3, #24]
      break;
 80169de:	e0a5      	b.n	8016b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	68b9      	ldr	r1, [r7, #8]
 80169e6:	4618      	mov	r0, r3
 80169e8:	f000 fb06 	bl	8016ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	699a      	ldr	r2, [r3, #24]
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80169fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	699a      	ldr	r2, [r3, #24]
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	6999      	ldr	r1, [r3, #24]
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	691b      	ldr	r3, [r3, #16]
 8016a16:	021a      	lsls	r2, r3, #8
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	430a      	orrs	r2, r1
 8016a1e:	619a      	str	r2, [r3, #24]
      break;
 8016a20:	e084      	b.n	8016b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	68b9      	ldr	r1, [r7, #8]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f000 fb6f 	bl	801710c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	69da      	ldr	r2, [r3, #28]
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f042 0208 	orr.w	r2, r2, #8
 8016a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	69da      	ldr	r2, [r3, #28]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	f022 0204 	bic.w	r2, r2, #4
 8016a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	69d9      	ldr	r1, [r3, #28]
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	691a      	ldr	r2, [r3, #16]
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	430a      	orrs	r2, r1
 8016a5e:	61da      	str	r2, [r3, #28]
      break;
 8016a60:	e064      	b.n	8016b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	68b9      	ldr	r1, [r7, #8]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f000 fbd7 	bl	801721c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	69da      	ldr	r2, [r3, #28]
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	69da      	ldr	r2, [r3, #28]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	69d9      	ldr	r1, [r3, #28]
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	691b      	ldr	r3, [r3, #16]
 8016a98:	021a      	lsls	r2, r3, #8
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	430a      	orrs	r2, r1
 8016aa0:	61da      	str	r2, [r3, #28]
      break;
 8016aa2:	e043      	b.n	8016b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	68b9      	ldr	r1, [r7, #8]
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f000 fc20 	bl	80172f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	f042 0208 	orr.w	r2, r2, #8
 8016abe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	f022 0204 	bic.w	r2, r2, #4
 8016ace:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	691a      	ldr	r2, [r3, #16]
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	430a      	orrs	r2, r1
 8016ae0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016ae2:	e023      	b.n	8016b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	68b9      	ldr	r1, [r7, #8]
 8016aea:	4618      	mov	r0, r3
 8016aec:	f000 fc64 	bl	80173b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016afe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	691b      	ldr	r3, [r3, #16]
 8016b1a:	021a      	lsls	r2, r3, #8
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	430a      	orrs	r2, r1
 8016b22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016b24:	e002      	b.n	8016b2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016b26:	2301      	movs	r3, #1
 8016b28:	75fb      	strb	r3, [r7, #23]
      break;
 8016b2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3718      	adds	r7, #24
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop

08016b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b084      	sub	sp, #16
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016b54:	2b01      	cmp	r3, #1
 8016b56:	d101      	bne.n	8016b5c <HAL_TIM_ConfigClockSource+0x1c>
 8016b58:	2302      	movs	r3, #2
 8016b5a:	e0dc      	b.n	8016d16 <HAL_TIM_ConfigClockSource+0x1d6>
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2201      	movs	r2, #1
 8016b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2202      	movs	r2, #2
 8016b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	689b      	ldr	r3, [r3, #8]
 8016b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016b74:	68ba      	ldr	r2, [r7, #8]
 8016b76:	4b6a      	ldr	r3, [pc, #424]	@ (8016d20 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016b78:	4013      	ands	r3, r2
 8016b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	68ba      	ldr	r2, [r7, #8]
 8016b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	4a64      	ldr	r2, [pc, #400]	@ (8016d24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016b92:	4293      	cmp	r3, r2
 8016b94:	f000 80a9 	beq.w	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016b98:	4a62      	ldr	r2, [pc, #392]	@ (8016d24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	f200 80ae 	bhi.w	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016ba0:	4a61      	ldr	r2, [pc, #388]	@ (8016d28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016ba2:	4293      	cmp	r3, r2
 8016ba4:	f000 80a1 	beq.w	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016ba8:	4a5f      	ldr	r2, [pc, #380]	@ (8016d28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016baa:	4293      	cmp	r3, r2
 8016bac:	f200 80a6 	bhi.w	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8016d2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	f000 8099 	beq.w	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8016d2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	f200 809e 	bhi.w	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016bc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016bc4:	f000 8091 	beq.w	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016bc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016bcc:	f200 8096 	bhi.w	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016bd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016bd4:	f000 8089 	beq.w	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016bd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016bdc:	f200 808e 	bhi.w	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016be4:	d03e      	beq.n	8016c64 <HAL_TIM_ConfigClockSource+0x124>
 8016be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016bea:	f200 8087 	bhi.w	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016bf2:	f000 8086 	beq.w	8016d02 <HAL_TIM_ConfigClockSource+0x1c2>
 8016bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016bfa:	d87f      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016bfc:	2b70      	cmp	r3, #112	@ 0x70
 8016bfe:	d01a      	beq.n	8016c36 <HAL_TIM_ConfigClockSource+0xf6>
 8016c00:	2b70      	cmp	r3, #112	@ 0x70
 8016c02:	d87b      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016c04:	2b60      	cmp	r3, #96	@ 0x60
 8016c06:	d050      	beq.n	8016caa <HAL_TIM_ConfigClockSource+0x16a>
 8016c08:	2b60      	cmp	r3, #96	@ 0x60
 8016c0a:	d877      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016c0c:	2b50      	cmp	r3, #80	@ 0x50
 8016c0e:	d03c      	beq.n	8016c8a <HAL_TIM_ConfigClockSource+0x14a>
 8016c10:	2b50      	cmp	r3, #80	@ 0x50
 8016c12:	d873      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016c14:	2b40      	cmp	r3, #64	@ 0x40
 8016c16:	d058      	beq.n	8016cca <HAL_TIM_ConfigClockSource+0x18a>
 8016c18:	2b40      	cmp	r3, #64	@ 0x40
 8016c1a:	d86f      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016c1c:	2b30      	cmp	r3, #48	@ 0x30
 8016c1e:	d064      	beq.n	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016c20:	2b30      	cmp	r3, #48	@ 0x30
 8016c22:	d86b      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016c24:	2b20      	cmp	r3, #32
 8016c26:	d060      	beq.n	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016c28:	2b20      	cmp	r3, #32
 8016c2a:	d867      	bhi.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d05c      	beq.n	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016c30:	2b10      	cmp	r3, #16
 8016c32:	d05a      	beq.n	8016cea <HAL_TIM_ConfigClockSource+0x1aa>
 8016c34:	e062      	b.n	8016cfc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016c46:	f000 fdd1 	bl	80177ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	689b      	ldr	r3, [r3, #8]
 8016c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016c52:	68bb      	ldr	r3, [r7, #8]
 8016c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	68ba      	ldr	r2, [r7, #8]
 8016c60:	609a      	str	r2, [r3, #8]
      break;
 8016c62:	e04f      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016c74:	f000 fdba 	bl	80177ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	689a      	ldr	r2, [r3, #8]
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016c86:	609a      	str	r2, [r3, #8]
      break;
 8016c88:	e03c      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c96:	461a      	mov	r2, r3
 8016c98:	f000 fc74 	bl	8017584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	2150      	movs	r1, #80	@ 0x50
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f000 fd84 	bl	80177b0 <TIM_ITRx_SetConfig>
      break;
 8016ca8:	e02c      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	f000 fcd0 	bl	801765c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	2160      	movs	r1, #96	@ 0x60
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fd74 	bl	80177b0 <TIM_ITRx_SetConfig>
      break;
 8016cc8:	e01c      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	f000 fc54 	bl	8017584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2140      	movs	r1, #64	@ 0x40
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f000 fd64 	bl	80177b0 <TIM_ITRx_SetConfig>
      break;
 8016ce8:	e00c      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	4610      	mov	r0, r2
 8016cf6:	f000 fd5b 	bl	80177b0 <TIM_ITRx_SetConfig>
      break;
 8016cfa:	e003      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8016d00:	e000      	b.n	8016d04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2201      	movs	r2, #1
 8016d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d16:	4618      	mov	r0, r3
 8016d18:	3710      	adds	r7, #16
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	bd80      	pop	{r7, pc}
 8016d1e:	bf00      	nop
 8016d20:	ffceff88 	.word	0xffceff88
 8016d24:	00100040 	.word	0x00100040
 8016d28:	00100030 	.word	0x00100030
 8016d2c:	00100020 	.word	0x00100020

08016d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016d30:	b480      	push	{r7}
 8016d32:	b083      	sub	sp, #12
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016d38:	bf00      	nop
 8016d3a:	370c      	adds	r7, #12
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr

08016d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016d44:	b480      	push	{r7}
 8016d46:	b083      	sub	sp, #12
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016d4c:	bf00      	nop
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016d58:	b480      	push	{r7}
 8016d5a:	b083      	sub	sp, #12
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016d60:	bf00      	nop
 8016d62:	370c      	adds	r7, #12
 8016d64:	46bd      	mov	sp, r7
 8016d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6a:	4770      	bx	lr

08016d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	b083      	sub	sp, #12
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016d74:	bf00      	nop
 8016d76:	370c      	adds	r7, #12
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7e:	4770      	bx	lr

08016d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016d80:	b480      	push	{r7}
 8016d82:	b085      	sub	sp, #20
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
 8016d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	4a47      	ldr	r2, [pc, #284]	@ (8016eb0 <TIM_Base_SetConfig+0x130>)
 8016d94:	4293      	cmp	r3, r2
 8016d96:	d013      	beq.n	8016dc0 <TIM_Base_SetConfig+0x40>
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016d9e:	d00f      	beq.n	8016dc0 <TIM_Base_SetConfig+0x40>
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	4a44      	ldr	r2, [pc, #272]	@ (8016eb4 <TIM_Base_SetConfig+0x134>)
 8016da4:	4293      	cmp	r3, r2
 8016da6:	d00b      	beq.n	8016dc0 <TIM_Base_SetConfig+0x40>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	4a43      	ldr	r2, [pc, #268]	@ (8016eb8 <TIM_Base_SetConfig+0x138>)
 8016dac:	4293      	cmp	r3, r2
 8016dae:	d007      	beq.n	8016dc0 <TIM_Base_SetConfig+0x40>
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	4a42      	ldr	r2, [pc, #264]	@ (8016ebc <TIM_Base_SetConfig+0x13c>)
 8016db4:	4293      	cmp	r3, r2
 8016db6:	d003      	beq.n	8016dc0 <TIM_Base_SetConfig+0x40>
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	4a41      	ldr	r2, [pc, #260]	@ (8016ec0 <TIM_Base_SetConfig+0x140>)
 8016dbc:	4293      	cmp	r3, r2
 8016dbe:	d108      	bne.n	8016dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	685b      	ldr	r3, [r3, #4]
 8016dcc:	68fa      	ldr	r2, [r7, #12]
 8016dce:	4313      	orrs	r3, r2
 8016dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	4a36      	ldr	r2, [pc, #216]	@ (8016eb0 <TIM_Base_SetConfig+0x130>)
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	d027      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016de0:	d023      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	4a33      	ldr	r2, [pc, #204]	@ (8016eb4 <TIM_Base_SetConfig+0x134>)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d01f      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	4a32      	ldr	r2, [pc, #200]	@ (8016eb8 <TIM_Base_SetConfig+0x138>)
 8016dee:	4293      	cmp	r3, r2
 8016df0:	d01b      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	4a31      	ldr	r2, [pc, #196]	@ (8016ebc <TIM_Base_SetConfig+0x13c>)
 8016df6:	4293      	cmp	r3, r2
 8016df8:	d017      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4a30      	ldr	r2, [pc, #192]	@ (8016ec0 <TIM_Base_SetConfig+0x140>)
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d013      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	4a2f      	ldr	r2, [pc, #188]	@ (8016ec4 <TIM_Base_SetConfig+0x144>)
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d00f      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8016ec8 <TIM_Base_SetConfig+0x148>)
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	d00b      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	4a2d      	ldr	r2, [pc, #180]	@ (8016ecc <TIM_Base_SetConfig+0x14c>)
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d007      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8016ed0 <TIM_Base_SetConfig+0x150>)
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	d003      	beq.n	8016e2a <TIM_Base_SetConfig+0xaa>
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	4a2b      	ldr	r2, [pc, #172]	@ (8016ed4 <TIM_Base_SetConfig+0x154>)
 8016e26:	4293      	cmp	r3, r2
 8016e28:	d108      	bne.n	8016e3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	68db      	ldr	r3, [r3, #12]
 8016e36:	68fa      	ldr	r2, [r7, #12]
 8016e38:	4313      	orrs	r3, r2
 8016e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	695b      	ldr	r3, [r3, #20]
 8016e46:	4313      	orrs	r3, r2
 8016e48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	689a      	ldr	r2, [r3, #8]
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	4a14      	ldr	r2, [pc, #80]	@ (8016eb0 <TIM_Base_SetConfig+0x130>)
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	d00f      	beq.n	8016e82 <TIM_Base_SetConfig+0x102>
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	4a16      	ldr	r2, [pc, #88]	@ (8016ec0 <TIM_Base_SetConfig+0x140>)
 8016e66:	4293      	cmp	r3, r2
 8016e68:	d00b      	beq.n	8016e82 <TIM_Base_SetConfig+0x102>
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	4a15      	ldr	r2, [pc, #84]	@ (8016ec4 <TIM_Base_SetConfig+0x144>)
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d007      	beq.n	8016e82 <TIM_Base_SetConfig+0x102>
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	4a14      	ldr	r2, [pc, #80]	@ (8016ec8 <TIM_Base_SetConfig+0x148>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d003      	beq.n	8016e82 <TIM_Base_SetConfig+0x102>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	4a13      	ldr	r2, [pc, #76]	@ (8016ecc <TIM_Base_SetConfig+0x14c>)
 8016e7e:	4293      	cmp	r3, r2
 8016e80:	d103      	bne.n	8016e8a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	691a      	ldr	r2, [r3, #16]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	f043 0204 	orr.w	r2, r3, #4
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2201      	movs	r2, #1
 8016e9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	68fa      	ldr	r2, [r7, #12]
 8016ea0:	601a      	str	r2, [r3, #0]
}
 8016ea2:	bf00      	nop
 8016ea4:	3714      	adds	r7, #20
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop
 8016eb0:	40010000 	.word	0x40010000
 8016eb4:	40000400 	.word	0x40000400
 8016eb8:	40000800 	.word	0x40000800
 8016ebc:	40000c00 	.word	0x40000c00
 8016ec0:	40010400 	.word	0x40010400
 8016ec4:	40014000 	.word	0x40014000
 8016ec8:	40014400 	.word	0x40014400
 8016ecc:	40014800 	.word	0x40014800
 8016ed0:	4000e000 	.word	0x4000e000
 8016ed4:	4000e400 	.word	0x4000e400

08016ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ed8:	b480      	push	{r7}
 8016eda:	b087      	sub	sp, #28
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
 8016ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	6a1b      	ldr	r3, [r3, #32]
 8016ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6a1b      	ldr	r3, [r3, #32]
 8016eec:	f023 0201 	bic.w	r2, r3, #1
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	699b      	ldr	r3, [r3, #24]
 8016efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016f00:	68fa      	ldr	r2, [r7, #12]
 8016f02:	4b37      	ldr	r3, [pc, #220]	@ (8016fe0 <TIM_OC1_SetConfig+0x108>)
 8016f04:	4013      	ands	r3, r2
 8016f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	f023 0303 	bic.w	r3, r3, #3
 8016f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	68fa      	ldr	r2, [r7, #12]
 8016f16:	4313      	orrs	r3, r2
 8016f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016f1a:	697b      	ldr	r3, [r7, #20]
 8016f1c:	f023 0302 	bic.w	r3, r3, #2
 8016f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	689b      	ldr	r3, [r3, #8]
 8016f26:	697a      	ldr	r2, [r7, #20]
 8016f28:	4313      	orrs	r3, r2
 8016f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8016fe4 <TIM_OC1_SetConfig+0x10c>)
 8016f30:	4293      	cmp	r3, r2
 8016f32:	d00f      	beq.n	8016f54 <TIM_OC1_SetConfig+0x7c>
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	4a2c      	ldr	r2, [pc, #176]	@ (8016fe8 <TIM_OC1_SetConfig+0x110>)
 8016f38:	4293      	cmp	r3, r2
 8016f3a:	d00b      	beq.n	8016f54 <TIM_OC1_SetConfig+0x7c>
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8016fec <TIM_OC1_SetConfig+0x114>)
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d007      	beq.n	8016f54 <TIM_OC1_SetConfig+0x7c>
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	4a2a      	ldr	r2, [pc, #168]	@ (8016ff0 <TIM_OC1_SetConfig+0x118>)
 8016f48:	4293      	cmp	r3, r2
 8016f4a:	d003      	beq.n	8016f54 <TIM_OC1_SetConfig+0x7c>
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	4a29      	ldr	r2, [pc, #164]	@ (8016ff4 <TIM_OC1_SetConfig+0x11c>)
 8016f50:	4293      	cmp	r3, r2
 8016f52:	d10c      	bne.n	8016f6e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	f023 0308 	bic.w	r3, r3, #8
 8016f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	68db      	ldr	r3, [r3, #12]
 8016f60:	697a      	ldr	r2, [r7, #20]
 8016f62:	4313      	orrs	r3, r2
 8016f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	f023 0304 	bic.w	r3, r3, #4
 8016f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	4a1c      	ldr	r2, [pc, #112]	@ (8016fe4 <TIM_OC1_SetConfig+0x10c>)
 8016f72:	4293      	cmp	r3, r2
 8016f74:	d00f      	beq.n	8016f96 <TIM_OC1_SetConfig+0xbe>
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	4a1b      	ldr	r2, [pc, #108]	@ (8016fe8 <TIM_OC1_SetConfig+0x110>)
 8016f7a:	4293      	cmp	r3, r2
 8016f7c:	d00b      	beq.n	8016f96 <TIM_OC1_SetConfig+0xbe>
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	4a1a      	ldr	r2, [pc, #104]	@ (8016fec <TIM_OC1_SetConfig+0x114>)
 8016f82:	4293      	cmp	r3, r2
 8016f84:	d007      	beq.n	8016f96 <TIM_OC1_SetConfig+0xbe>
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	4a19      	ldr	r2, [pc, #100]	@ (8016ff0 <TIM_OC1_SetConfig+0x118>)
 8016f8a:	4293      	cmp	r3, r2
 8016f8c:	d003      	beq.n	8016f96 <TIM_OC1_SetConfig+0xbe>
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	4a18      	ldr	r2, [pc, #96]	@ (8016ff4 <TIM_OC1_SetConfig+0x11c>)
 8016f92:	4293      	cmp	r3, r2
 8016f94:	d111      	bne.n	8016fba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	695b      	ldr	r3, [r3, #20]
 8016faa:	693a      	ldr	r2, [r7, #16]
 8016fac:	4313      	orrs	r3, r2
 8016fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	699b      	ldr	r3, [r3, #24]
 8016fb4:	693a      	ldr	r2, [r7, #16]
 8016fb6:	4313      	orrs	r3, r2
 8016fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	693a      	ldr	r2, [r7, #16]
 8016fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	68fa      	ldr	r2, [r7, #12]
 8016fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	685a      	ldr	r2, [r3, #4]
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	697a      	ldr	r2, [r7, #20]
 8016fd2:	621a      	str	r2, [r3, #32]
}
 8016fd4:	bf00      	nop
 8016fd6:	371c      	adds	r7, #28
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fde:	4770      	bx	lr
 8016fe0:	fffeff8f 	.word	0xfffeff8f
 8016fe4:	40010000 	.word	0x40010000
 8016fe8:	40010400 	.word	0x40010400
 8016fec:	40014000 	.word	0x40014000
 8016ff0:	40014400 	.word	0x40014400
 8016ff4:	40014800 	.word	0x40014800

08016ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ff8:	b480      	push	{r7}
 8016ffa:	b087      	sub	sp, #28
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
 8017000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6a1b      	ldr	r3, [r3, #32]
 8017006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6a1b      	ldr	r3, [r3, #32]
 801700c:	f023 0210 	bic.w	r2, r3, #16
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	699b      	ldr	r3, [r3, #24]
 801701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017020:	68fa      	ldr	r2, [r7, #12]
 8017022:	4b34      	ldr	r3, [pc, #208]	@ (80170f4 <TIM_OC2_SetConfig+0xfc>)
 8017024:	4013      	ands	r3, r2
 8017026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	021b      	lsls	r3, r3, #8
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	4313      	orrs	r3, r2
 801703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	f023 0320 	bic.w	r3, r3, #32
 8017042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	011b      	lsls	r3, r3, #4
 801704a:	697a      	ldr	r2, [r7, #20]
 801704c:	4313      	orrs	r3, r2
 801704e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	4a29      	ldr	r2, [pc, #164]	@ (80170f8 <TIM_OC2_SetConfig+0x100>)
 8017054:	4293      	cmp	r3, r2
 8017056:	d003      	beq.n	8017060 <TIM_OC2_SetConfig+0x68>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	4a28      	ldr	r2, [pc, #160]	@ (80170fc <TIM_OC2_SetConfig+0x104>)
 801705c:	4293      	cmp	r3, r2
 801705e:	d10d      	bne.n	801707c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017060:	697b      	ldr	r3, [r7, #20]
 8017062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	011b      	lsls	r3, r3, #4
 801706e:	697a      	ldr	r2, [r7, #20]
 8017070:	4313      	orrs	r3, r2
 8017072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801707a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	4a1e      	ldr	r2, [pc, #120]	@ (80170f8 <TIM_OC2_SetConfig+0x100>)
 8017080:	4293      	cmp	r3, r2
 8017082:	d00f      	beq.n	80170a4 <TIM_OC2_SetConfig+0xac>
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	4a1d      	ldr	r2, [pc, #116]	@ (80170fc <TIM_OC2_SetConfig+0x104>)
 8017088:	4293      	cmp	r3, r2
 801708a:	d00b      	beq.n	80170a4 <TIM_OC2_SetConfig+0xac>
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	4a1c      	ldr	r2, [pc, #112]	@ (8017100 <TIM_OC2_SetConfig+0x108>)
 8017090:	4293      	cmp	r3, r2
 8017092:	d007      	beq.n	80170a4 <TIM_OC2_SetConfig+0xac>
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	4a1b      	ldr	r2, [pc, #108]	@ (8017104 <TIM_OC2_SetConfig+0x10c>)
 8017098:	4293      	cmp	r3, r2
 801709a:	d003      	beq.n	80170a4 <TIM_OC2_SetConfig+0xac>
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	4a1a      	ldr	r2, [pc, #104]	@ (8017108 <TIM_OC2_SetConfig+0x110>)
 80170a0:	4293      	cmp	r3, r2
 80170a2:	d113      	bne.n	80170cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80170aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80170b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	695b      	ldr	r3, [r3, #20]
 80170b8:	009b      	lsls	r3, r3, #2
 80170ba:	693a      	ldr	r2, [r7, #16]
 80170bc:	4313      	orrs	r3, r2
 80170be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	699b      	ldr	r3, [r3, #24]
 80170c4:	009b      	lsls	r3, r3, #2
 80170c6:	693a      	ldr	r2, [r7, #16]
 80170c8:	4313      	orrs	r3, r2
 80170ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	693a      	ldr	r2, [r7, #16]
 80170d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	68fa      	ldr	r2, [r7, #12]
 80170d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	685a      	ldr	r2, [r3, #4]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	697a      	ldr	r2, [r7, #20]
 80170e4:	621a      	str	r2, [r3, #32]
}
 80170e6:	bf00      	nop
 80170e8:	371c      	adds	r7, #28
 80170ea:	46bd      	mov	sp, r7
 80170ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f0:	4770      	bx	lr
 80170f2:	bf00      	nop
 80170f4:	feff8fff 	.word	0xfeff8fff
 80170f8:	40010000 	.word	0x40010000
 80170fc:	40010400 	.word	0x40010400
 8017100:	40014000 	.word	0x40014000
 8017104:	40014400 	.word	0x40014400
 8017108:	40014800 	.word	0x40014800

0801710c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801710c:	b480      	push	{r7}
 801710e:	b087      	sub	sp, #28
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	6a1b      	ldr	r3, [r3, #32]
 801711a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	6a1b      	ldr	r3, [r3, #32]
 8017120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	69db      	ldr	r3, [r3, #28]
 8017132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017134:	68fa      	ldr	r2, [r7, #12]
 8017136:	4b33      	ldr	r3, [pc, #204]	@ (8017204 <TIM_OC3_SetConfig+0xf8>)
 8017138:	4013      	ands	r3, r2
 801713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	f023 0303 	bic.w	r3, r3, #3
 8017142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	68fa      	ldr	r2, [r7, #12]
 801714a:	4313      	orrs	r3, r2
 801714c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	021b      	lsls	r3, r3, #8
 801715c:	697a      	ldr	r2, [r7, #20]
 801715e:	4313      	orrs	r3, r2
 8017160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	4a28      	ldr	r2, [pc, #160]	@ (8017208 <TIM_OC3_SetConfig+0xfc>)
 8017166:	4293      	cmp	r3, r2
 8017168:	d003      	beq.n	8017172 <TIM_OC3_SetConfig+0x66>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	4a27      	ldr	r2, [pc, #156]	@ (801720c <TIM_OC3_SetConfig+0x100>)
 801716e:	4293      	cmp	r3, r2
 8017170:	d10d      	bne.n	801718e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	68db      	ldr	r3, [r3, #12]
 801717e:	021b      	lsls	r3, r3, #8
 8017180:	697a      	ldr	r2, [r7, #20]
 8017182:	4313      	orrs	r3, r2
 8017184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017186:	697b      	ldr	r3, [r7, #20]
 8017188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801718c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	4a1d      	ldr	r2, [pc, #116]	@ (8017208 <TIM_OC3_SetConfig+0xfc>)
 8017192:	4293      	cmp	r3, r2
 8017194:	d00f      	beq.n	80171b6 <TIM_OC3_SetConfig+0xaa>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	4a1c      	ldr	r2, [pc, #112]	@ (801720c <TIM_OC3_SetConfig+0x100>)
 801719a:	4293      	cmp	r3, r2
 801719c:	d00b      	beq.n	80171b6 <TIM_OC3_SetConfig+0xaa>
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	4a1b      	ldr	r2, [pc, #108]	@ (8017210 <TIM_OC3_SetConfig+0x104>)
 80171a2:	4293      	cmp	r3, r2
 80171a4:	d007      	beq.n	80171b6 <TIM_OC3_SetConfig+0xaa>
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	4a1a      	ldr	r2, [pc, #104]	@ (8017214 <TIM_OC3_SetConfig+0x108>)
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d003      	beq.n	80171b6 <TIM_OC3_SetConfig+0xaa>
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	4a19      	ldr	r2, [pc, #100]	@ (8017218 <TIM_OC3_SetConfig+0x10c>)
 80171b2:	4293      	cmp	r3, r2
 80171b4:	d113      	bne.n	80171de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80171b6:	693b      	ldr	r3, [r7, #16]
 80171b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80171bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80171c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	695b      	ldr	r3, [r3, #20]
 80171ca:	011b      	lsls	r3, r3, #4
 80171cc:	693a      	ldr	r2, [r7, #16]
 80171ce:	4313      	orrs	r3, r2
 80171d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	699b      	ldr	r3, [r3, #24]
 80171d6:	011b      	lsls	r3, r3, #4
 80171d8:	693a      	ldr	r2, [r7, #16]
 80171da:	4313      	orrs	r3, r2
 80171dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	693a      	ldr	r2, [r7, #16]
 80171e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	68fa      	ldr	r2, [r7, #12]
 80171e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	685a      	ldr	r2, [r3, #4]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	697a      	ldr	r2, [r7, #20]
 80171f6:	621a      	str	r2, [r3, #32]
}
 80171f8:	bf00      	nop
 80171fa:	371c      	adds	r7, #28
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr
 8017204:	fffeff8f 	.word	0xfffeff8f
 8017208:	40010000 	.word	0x40010000
 801720c:	40010400 	.word	0x40010400
 8017210:	40014000 	.word	0x40014000
 8017214:	40014400 	.word	0x40014400
 8017218:	40014800 	.word	0x40014800

0801721c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801721c:	b480      	push	{r7}
 801721e:	b087      	sub	sp, #28
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6a1b      	ldr	r3, [r3, #32]
 801722a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	6a1b      	ldr	r3, [r3, #32]
 8017230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	69db      	ldr	r3, [r3, #28]
 8017242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017244:	68fa      	ldr	r2, [r7, #12]
 8017246:	4b24      	ldr	r3, [pc, #144]	@ (80172d8 <TIM_OC4_SetConfig+0xbc>)
 8017248:	4013      	ands	r3, r2
 801724a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	021b      	lsls	r3, r3, #8
 801725a:	68fa      	ldr	r2, [r7, #12]
 801725c:	4313      	orrs	r3, r2
 801725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	689b      	ldr	r3, [r3, #8]
 801726c:	031b      	lsls	r3, r3, #12
 801726e:	693a      	ldr	r2, [r7, #16]
 8017270:	4313      	orrs	r3, r2
 8017272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	4a19      	ldr	r2, [pc, #100]	@ (80172dc <TIM_OC4_SetConfig+0xc0>)
 8017278:	4293      	cmp	r3, r2
 801727a:	d00f      	beq.n	801729c <TIM_OC4_SetConfig+0x80>
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	4a18      	ldr	r2, [pc, #96]	@ (80172e0 <TIM_OC4_SetConfig+0xc4>)
 8017280:	4293      	cmp	r3, r2
 8017282:	d00b      	beq.n	801729c <TIM_OC4_SetConfig+0x80>
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	4a17      	ldr	r2, [pc, #92]	@ (80172e4 <TIM_OC4_SetConfig+0xc8>)
 8017288:	4293      	cmp	r3, r2
 801728a:	d007      	beq.n	801729c <TIM_OC4_SetConfig+0x80>
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	4a16      	ldr	r2, [pc, #88]	@ (80172e8 <TIM_OC4_SetConfig+0xcc>)
 8017290:	4293      	cmp	r3, r2
 8017292:	d003      	beq.n	801729c <TIM_OC4_SetConfig+0x80>
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	4a15      	ldr	r2, [pc, #84]	@ (80172ec <TIM_OC4_SetConfig+0xd0>)
 8017298:	4293      	cmp	r3, r2
 801729a:	d109      	bne.n	80172b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80172a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	695b      	ldr	r3, [r3, #20]
 80172a8:	019b      	lsls	r3, r3, #6
 80172aa:	697a      	ldr	r2, [r7, #20]
 80172ac:	4313      	orrs	r3, r2
 80172ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	697a      	ldr	r2, [r7, #20]
 80172b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	68fa      	ldr	r2, [r7, #12]
 80172ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80172bc:	683b      	ldr	r3, [r7, #0]
 80172be:	685a      	ldr	r2, [r3, #4]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	693a      	ldr	r2, [r7, #16]
 80172c8:	621a      	str	r2, [r3, #32]
}
 80172ca:	bf00      	nop
 80172cc:	371c      	adds	r7, #28
 80172ce:	46bd      	mov	sp, r7
 80172d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	feff8fff 	.word	0xfeff8fff
 80172dc:	40010000 	.word	0x40010000
 80172e0:	40010400 	.word	0x40010400
 80172e4:	40014000 	.word	0x40014000
 80172e8:	40014400 	.word	0x40014400
 80172ec:	40014800 	.word	0x40014800

080172f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80172f0:	b480      	push	{r7}
 80172f2:	b087      	sub	sp, #28
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6a1b      	ldr	r3, [r3, #32]
 80172fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6a1b      	ldr	r3, [r3, #32]
 8017304:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	685b      	ldr	r3, [r3, #4]
 8017310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017318:	68fa      	ldr	r2, [r7, #12]
 801731a:	4b21      	ldr	r3, [pc, #132]	@ (80173a0 <TIM_OC5_SetConfig+0xb0>)
 801731c:	4013      	ands	r3, r2
 801731e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	68fa      	ldr	r2, [r7, #12]
 8017326:	4313      	orrs	r3, r2
 8017328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	689b      	ldr	r3, [r3, #8]
 8017336:	041b      	lsls	r3, r3, #16
 8017338:	693a      	ldr	r2, [r7, #16]
 801733a:	4313      	orrs	r3, r2
 801733c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	4a18      	ldr	r2, [pc, #96]	@ (80173a4 <TIM_OC5_SetConfig+0xb4>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d00f      	beq.n	8017366 <TIM_OC5_SetConfig+0x76>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	4a17      	ldr	r2, [pc, #92]	@ (80173a8 <TIM_OC5_SetConfig+0xb8>)
 801734a:	4293      	cmp	r3, r2
 801734c:	d00b      	beq.n	8017366 <TIM_OC5_SetConfig+0x76>
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	4a16      	ldr	r2, [pc, #88]	@ (80173ac <TIM_OC5_SetConfig+0xbc>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d007      	beq.n	8017366 <TIM_OC5_SetConfig+0x76>
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	4a15      	ldr	r2, [pc, #84]	@ (80173b0 <TIM_OC5_SetConfig+0xc0>)
 801735a:	4293      	cmp	r3, r2
 801735c:	d003      	beq.n	8017366 <TIM_OC5_SetConfig+0x76>
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	4a14      	ldr	r2, [pc, #80]	@ (80173b4 <TIM_OC5_SetConfig+0xc4>)
 8017362:	4293      	cmp	r3, r2
 8017364:	d109      	bne.n	801737a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801736c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	695b      	ldr	r3, [r3, #20]
 8017372:	021b      	lsls	r3, r3, #8
 8017374:	697a      	ldr	r2, [r7, #20]
 8017376:	4313      	orrs	r3, r2
 8017378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	697a      	ldr	r2, [r7, #20]
 801737e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	68fa      	ldr	r2, [r7, #12]
 8017384:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	685a      	ldr	r2, [r3, #4]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	693a      	ldr	r2, [r7, #16]
 8017392:	621a      	str	r2, [r3, #32]
}
 8017394:	bf00      	nop
 8017396:	371c      	adds	r7, #28
 8017398:	46bd      	mov	sp, r7
 801739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739e:	4770      	bx	lr
 80173a0:	fffeff8f 	.word	0xfffeff8f
 80173a4:	40010000 	.word	0x40010000
 80173a8:	40010400 	.word	0x40010400
 80173ac:	40014000 	.word	0x40014000
 80173b0:	40014400 	.word	0x40014400
 80173b4:	40014800 	.word	0x40014800

080173b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80173b8:	b480      	push	{r7}
 80173ba:	b087      	sub	sp, #28
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
 80173c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	6a1b      	ldr	r3, [r3, #32]
 80173c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6a1b      	ldr	r3, [r3, #32]
 80173cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	685b      	ldr	r3, [r3, #4]
 80173d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80173de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	4b22      	ldr	r3, [pc, #136]	@ (801746c <TIM_OC6_SetConfig+0xb4>)
 80173e4:	4013      	ands	r3, r2
 80173e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	021b      	lsls	r3, r3, #8
 80173ee:	68fa      	ldr	r2, [r7, #12]
 80173f0:	4313      	orrs	r3, r2
 80173f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80173f4:	693b      	ldr	r3, [r7, #16]
 80173f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80173fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	689b      	ldr	r3, [r3, #8]
 8017400:	051b      	lsls	r3, r3, #20
 8017402:	693a      	ldr	r2, [r7, #16]
 8017404:	4313      	orrs	r3, r2
 8017406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	4a19      	ldr	r2, [pc, #100]	@ (8017470 <TIM_OC6_SetConfig+0xb8>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d00f      	beq.n	8017430 <TIM_OC6_SetConfig+0x78>
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	4a18      	ldr	r2, [pc, #96]	@ (8017474 <TIM_OC6_SetConfig+0xbc>)
 8017414:	4293      	cmp	r3, r2
 8017416:	d00b      	beq.n	8017430 <TIM_OC6_SetConfig+0x78>
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	4a17      	ldr	r2, [pc, #92]	@ (8017478 <TIM_OC6_SetConfig+0xc0>)
 801741c:	4293      	cmp	r3, r2
 801741e:	d007      	beq.n	8017430 <TIM_OC6_SetConfig+0x78>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	4a16      	ldr	r2, [pc, #88]	@ (801747c <TIM_OC6_SetConfig+0xc4>)
 8017424:	4293      	cmp	r3, r2
 8017426:	d003      	beq.n	8017430 <TIM_OC6_SetConfig+0x78>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	4a15      	ldr	r2, [pc, #84]	@ (8017480 <TIM_OC6_SetConfig+0xc8>)
 801742c:	4293      	cmp	r3, r2
 801742e:	d109      	bne.n	8017444 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	695b      	ldr	r3, [r3, #20]
 801743c:	029b      	lsls	r3, r3, #10
 801743e:	697a      	ldr	r2, [r7, #20]
 8017440:	4313      	orrs	r3, r2
 8017442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	697a      	ldr	r2, [r7, #20]
 8017448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	68fa      	ldr	r2, [r7, #12]
 801744e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	685a      	ldr	r2, [r3, #4]
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	693a      	ldr	r2, [r7, #16]
 801745c:	621a      	str	r2, [r3, #32]
}
 801745e:	bf00      	nop
 8017460:	371c      	adds	r7, #28
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr
 801746a:	bf00      	nop
 801746c:	feff8fff 	.word	0xfeff8fff
 8017470:	40010000 	.word	0x40010000
 8017474:	40010400 	.word	0x40010400
 8017478:	40014000 	.word	0x40014000
 801747c:	40014400 	.word	0x40014400
 8017480:	40014800 	.word	0x40014800

08017484 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017484:	b480      	push	{r7}
 8017486:	b087      	sub	sp, #28
 8017488:	af00      	add	r7, sp, #0
 801748a:	60f8      	str	r0, [r7, #12]
 801748c:	60b9      	str	r1, [r7, #8]
 801748e:	607a      	str	r2, [r7, #4]
 8017490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	6a1b      	ldr	r3, [r3, #32]
 8017496:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	6a1b      	ldr	r3, [r3, #32]
 801749c:	f023 0201 	bic.w	r2, r3, #1
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	699b      	ldr	r3, [r3, #24]
 80174a8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	4a2c      	ldr	r2, [pc, #176]	@ (8017560 <TIM_TI1_SetConfig+0xdc>)
 80174ae:	4293      	cmp	r3, r2
 80174b0:	d023      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80174b8:	d01f      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	4a29      	ldr	r2, [pc, #164]	@ (8017564 <TIM_TI1_SetConfig+0xe0>)
 80174be:	4293      	cmp	r3, r2
 80174c0:	d01b      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	4a28      	ldr	r2, [pc, #160]	@ (8017568 <TIM_TI1_SetConfig+0xe4>)
 80174c6:	4293      	cmp	r3, r2
 80174c8:	d017      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	4a27      	ldr	r2, [pc, #156]	@ (801756c <TIM_TI1_SetConfig+0xe8>)
 80174ce:	4293      	cmp	r3, r2
 80174d0:	d013      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	4a26      	ldr	r2, [pc, #152]	@ (8017570 <TIM_TI1_SetConfig+0xec>)
 80174d6:	4293      	cmp	r3, r2
 80174d8:	d00f      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	4a25      	ldr	r2, [pc, #148]	@ (8017574 <TIM_TI1_SetConfig+0xf0>)
 80174de:	4293      	cmp	r3, r2
 80174e0:	d00b      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	4a24      	ldr	r2, [pc, #144]	@ (8017578 <TIM_TI1_SetConfig+0xf4>)
 80174e6:	4293      	cmp	r3, r2
 80174e8:	d007      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	4a23      	ldr	r2, [pc, #140]	@ (801757c <TIM_TI1_SetConfig+0xf8>)
 80174ee:	4293      	cmp	r3, r2
 80174f0:	d003      	beq.n	80174fa <TIM_TI1_SetConfig+0x76>
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	4a22      	ldr	r2, [pc, #136]	@ (8017580 <TIM_TI1_SetConfig+0xfc>)
 80174f6:	4293      	cmp	r3, r2
 80174f8:	d101      	bne.n	80174fe <TIM_TI1_SetConfig+0x7a>
 80174fa:	2301      	movs	r3, #1
 80174fc:	e000      	b.n	8017500 <TIM_TI1_SetConfig+0x7c>
 80174fe:	2300      	movs	r3, #0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d008      	beq.n	8017516 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	f023 0303 	bic.w	r3, r3, #3
 801750a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801750c:	697a      	ldr	r2, [r7, #20]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	4313      	orrs	r3, r2
 8017512:	617b      	str	r3, [r7, #20]
 8017514:	e003      	b.n	801751e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	f043 0301 	orr.w	r3, r3, #1
 801751c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801751e:	697b      	ldr	r3, [r7, #20]
 8017520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	011b      	lsls	r3, r3, #4
 801752a:	b2db      	uxtb	r3, r3
 801752c:	697a      	ldr	r2, [r7, #20]
 801752e:	4313      	orrs	r3, r2
 8017530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017532:	693b      	ldr	r3, [r7, #16]
 8017534:	f023 030a 	bic.w	r3, r3, #10
 8017538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	f003 030a 	and.w	r3, r3, #10
 8017540:	693a      	ldr	r2, [r7, #16]
 8017542:	4313      	orrs	r3, r2
 8017544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	697a      	ldr	r2, [r7, #20]
 801754a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	693a      	ldr	r2, [r7, #16]
 8017550:	621a      	str	r2, [r3, #32]
}
 8017552:	bf00      	nop
 8017554:	371c      	adds	r7, #28
 8017556:	46bd      	mov	sp, r7
 8017558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755c:	4770      	bx	lr
 801755e:	bf00      	nop
 8017560:	40010000 	.word	0x40010000
 8017564:	40000400 	.word	0x40000400
 8017568:	40000800 	.word	0x40000800
 801756c:	40000c00 	.word	0x40000c00
 8017570:	40010400 	.word	0x40010400
 8017574:	40001800 	.word	0x40001800
 8017578:	40014000 	.word	0x40014000
 801757c:	4000e000 	.word	0x4000e000
 8017580:	4000e400 	.word	0x4000e400

08017584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017584:	b480      	push	{r7}
 8017586:	b087      	sub	sp, #28
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	6a1b      	ldr	r3, [r3, #32]
 8017594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	6a1b      	ldr	r3, [r3, #32]
 801759a:	f023 0201 	bic.w	r2, r3, #1
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	699b      	ldr	r3, [r3, #24]
 80175a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80175ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	011b      	lsls	r3, r3, #4
 80175b4:	693a      	ldr	r2, [r7, #16]
 80175b6:	4313      	orrs	r3, r2
 80175b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80175ba:	697b      	ldr	r3, [r7, #20]
 80175bc:	f023 030a 	bic.w	r3, r3, #10
 80175c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80175c2:	697a      	ldr	r2, [r7, #20]
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	4313      	orrs	r3, r2
 80175c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	693a      	ldr	r2, [r7, #16]
 80175ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	697a      	ldr	r2, [r7, #20]
 80175d4:	621a      	str	r2, [r3, #32]
}
 80175d6:	bf00      	nop
 80175d8:	371c      	adds	r7, #28
 80175da:	46bd      	mov	sp, r7
 80175dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e0:	4770      	bx	lr

080175e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80175e2:	b480      	push	{r7}
 80175e4:	b087      	sub	sp, #28
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	60f8      	str	r0, [r7, #12]
 80175ea:	60b9      	str	r1, [r7, #8]
 80175ec:	607a      	str	r2, [r7, #4]
 80175ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	6a1b      	ldr	r3, [r3, #32]
 80175f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	6a1b      	ldr	r3, [r3, #32]
 80175fa:	f023 0210 	bic.w	r2, r3, #16
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	699b      	ldr	r3, [r3, #24]
 8017606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801760e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	021b      	lsls	r3, r3, #8
 8017614:	693a      	ldr	r2, [r7, #16]
 8017616:	4313      	orrs	r3, r2
 8017618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	031b      	lsls	r3, r3, #12
 8017626:	b29b      	uxth	r3, r3
 8017628:	693a      	ldr	r2, [r7, #16]
 801762a:	4313      	orrs	r3, r2
 801762c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017634:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	011b      	lsls	r3, r3, #4
 801763a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801763e:	697a      	ldr	r2, [r7, #20]
 8017640:	4313      	orrs	r3, r2
 8017642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	693a      	ldr	r2, [r7, #16]
 8017648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	697a      	ldr	r2, [r7, #20]
 801764e:	621a      	str	r2, [r3, #32]
}
 8017650:	bf00      	nop
 8017652:	371c      	adds	r7, #28
 8017654:	46bd      	mov	sp, r7
 8017656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765a:	4770      	bx	lr

0801765c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801765c:	b480      	push	{r7}
 801765e:	b087      	sub	sp, #28
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6a1b      	ldr	r3, [r3, #32]
 801766c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	6a1b      	ldr	r3, [r3, #32]
 8017672:	f023 0210 	bic.w	r2, r3, #16
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	699b      	ldr	r3, [r3, #24]
 801767e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	031b      	lsls	r3, r3, #12
 801768c:	693a      	ldr	r2, [r7, #16]
 801768e:	4313      	orrs	r3, r2
 8017690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	011b      	lsls	r3, r3, #4
 801769e:	697a      	ldr	r2, [r7, #20]
 80176a0:	4313      	orrs	r3, r2
 80176a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	693a      	ldr	r2, [r7, #16]
 80176a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	697a      	ldr	r2, [r7, #20]
 80176ae:	621a      	str	r2, [r3, #32]
}
 80176b0:	bf00      	nop
 80176b2:	371c      	adds	r7, #28
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr

080176bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80176bc:	b480      	push	{r7}
 80176be:	b087      	sub	sp, #28
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
 80176c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	6a1b      	ldr	r3, [r3, #32]
 80176ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	6a1b      	ldr	r3, [r3, #32]
 80176d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	69db      	ldr	r3, [r3, #28]
 80176e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	f023 0303 	bic.w	r3, r3, #3
 80176e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80176ea:	693a      	ldr	r2, [r7, #16]
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	4313      	orrs	r3, r2
 80176f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80176f2:	693b      	ldr	r3, [r7, #16]
 80176f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80176f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	011b      	lsls	r3, r3, #4
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	693a      	ldr	r2, [r7, #16]
 8017702:	4313      	orrs	r3, r2
 8017704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 801770c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801770e:	68bb      	ldr	r3, [r7, #8]
 8017710:	021b      	lsls	r3, r3, #8
 8017712:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017716:	697a      	ldr	r2, [r7, #20]
 8017718:	4313      	orrs	r3, r2
 801771a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	693a      	ldr	r2, [r7, #16]
 8017720:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	697a      	ldr	r2, [r7, #20]
 8017726:	621a      	str	r2, [r3, #32]
}
 8017728:	bf00      	nop
 801772a:	371c      	adds	r7, #28
 801772c:	46bd      	mov	sp, r7
 801772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017732:	4770      	bx	lr

08017734 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017734:	b480      	push	{r7}
 8017736:	b087      	sub	sp, #28
 8017738:	af00      	add	r7, sp, #0
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	60b9      	str	r1, [r7, #8]
 801773e:	607a      	str	r2, [r7, #4]
 8017740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	6a1b      	ldr	r3, [r3, #32]
 8017746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	6a1b      	ldr	r3, [r3, #32]
 801774c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	69db      	ldr	r3, [r3, #28]
 8017758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801775a:	693b      	ldr	r3, [r7, #16]
 801775c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017760:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	021b      	lsls	r3, r3, #8
 8017766:	693a      	ldr	r2, [r7, #16]
 8017768:	4313      	orrs	r3, r2
 801776a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801776c:	693b      	ldr	r3, [r7, #16]
 801776e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017772:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	031b      	lsls	r3, r3, #12
 8017778:	b29b      	uxth	r3, r3
 801777a:	693a      	ldr	r2, [r7, #16]
 801777c:	4313      	orrs	r3, r2
 801777e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017786:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	031b      	lsls	r3, r3, #12
 801778c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017790:	697a      	ldr	r2, [r7, #20]
 8017792:	4313      	orrs	r3, r2
 8017794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	693a      	ldr	r2, [r7, #16]
 801779a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	697a      	ldr	r2, [r7, #20]
 80177a0:	621a      	str	r2, [r3, #32]
}
 80177a2:	bf00      	nop
 80177a4:	371c      	adds	r7, #28
 80177a6:	46bd      	mov	sp, r7
 80177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ac:	4770      	bx	lr
	...

080177b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80177b0:	b480      	push	{r7}
 80177b2:	b085      	sub	sp, #20
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
 80177b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	689b      	ldr	r3, [r3, #8]
 80177be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80177c0:	68fa      	ldr	r2, [r7, #12]
 80177c2:	4b09      	ldr	r3, [pc, #36]	@ (80177e8 <TIM_ITRx_SetConfig+0x38>)
 80177c4:	4013      	ands	r3, r2
 80177c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80177c8:	683a      	ldr	r2, [r7, #0]
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	4313      	orrs	r3, r2
 80177ce:	f043 0307 	orr.w	r3, r3, #7
 80177d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	68fa      	ldr	r2, [r7, #12]
 80177d8:	609a      	str	r2, [r3, #8]
}
 80177da:	bf00      	nop
 80177dc:	3714      	adds	r7, #20
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	ffcfff8f 	.word	0xffcfff8f

080177ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80177ec:	b480      	push	{r7}
 80177ee:	b087      	sub	sp, #28
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	60f8      	str	r0, [r7, #12]
 80177f4:	60b9      	str	r1, [r7, #8]
 80177f6:	607a      	str	r2, [r7, #4]
 80177f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	689b      	ldr	r3, [r3, #8]
 80177fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	021a      	lsls	r2, r3, #8
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	431a      	orrs	r2, r3
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	4313      	orrs	r3, r2
 8017814:	697a      	ldr	r2, [r7, #20]
 8017816:	4313      	orrs	r3, r2
 8017818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	697a      	ldr	r2, [r7, #20]
 801781e:	609a      	str	r2, [r3, #8]
}
 8017820:	bf00      	nop
 8017822:	371c      	adds	r7, #28
 8017824:	46bd      	mov	sp, r7
 8017826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782a:	4770      	bx	lr

0801782c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801782c:	b480      	push	{r7}
 801782e:	b087      	sub	sp, #28
 8017830:	af00      	add	r7, sp, #0
 8017832:	60f8      	str	r0, [r7, #12]
 8017834:	60b9      	str	r1, [r7, #8]
 8017836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	f003 031f 	and.w	r3, r3, #31
 801783e:	2201      	movs	r2, #1
 8017840:	fa02 f303 	lsl.w	r3, r2, r3
 8017844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	6a1a      	ldr	r2, [r3, #32]
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	43db      	mvns	r3, r3
 801784e:	401a      	ands	r2, r3
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	6a1a      	ldr	r2, [r3, #32]
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	f003 031f 	and.w	r3, r3, #31
 801785e:	6879      	ldr	r1, [r7, #4]
 8017860:	fa01 f303 	lsl.w	r3, r1, r3
 8017864:	431a      	orrs	r2, r3
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	621a      	str	r2, [r3, #32]
}
 801786a:	bf00      	nop
 801786c:	371c      	adds	r7, #28
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr
	...

08017878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017878:	b480      	push	{r7}
 801787a:	b085      	sub	sp, #20
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
 8017880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017888:	2b01      	cmp	r3, #1
 801788a:	d101      	bne.n	8017890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801788c:	2302      	movs	r3, #2
 801788e:	e077      	b.n	8017980 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	2201      	movs	r2, #1
 8017894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2202      	movs	r2, #2
 801789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	689b      	ldr	r3, [r3, #8]
 80178ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	4a35      	ldr	r2, [pc, #212]	@ (801798c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80178b6:	4293      	cmp	r3, r2
 80178b8:	d004      	beq.n	80178c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	4a34      	ldr	r2, [pc, #208]	@ (8017990 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80178c0:	4293      	cmp	r3, r2
 80178c2:	d108      	bne.n	80178d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80178ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	685b      	ldr	r3, [r3, #4]
 80178d0:	68fa      	ldr	r2, [r7, #12]
 80178d2:	4313      	orrs	r3, r2
 80178d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80178dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	68fa      	ldr	r2, [r7, #12]
 80178e4:	4313      	orrs	r3, r2
 80178e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	68fa      	ldr	r2, [r7, #12]
 80178ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4a25      	ldr	r2, [pc, #148]	@ (801798c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d02c      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017902:	d027      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	4a22      	ldr	r2, [pc, #136]	@ (8017994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d022      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	4a21      	ldr	r2, [pc, #132]	@ (8017998 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017914:	4293      	cmp	r3, r2
 8017916:	d01d      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	4a1f      	ldr	r2, [pc, #124]	@ (801799c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801791e:	4293      	cmp	r3, r2
 8017920:	d018      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4a1a      	ldr	r2, [pc, #104]	@ (8017990 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017928:	4293      	cmp	r3, r2
 801792a:	d013      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	4a1b      	ldr	r2, [pc, #108]	@ (80179a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017932:	4293      	cmp	r3, r2
 8017934:	d00e      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	4a1a      	ldr	r2, [pc, #104]	@ (80179a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801793c:	4293      	cmp	r3, r2
 801793e:	d009      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	4a18      	ldr	r2, [pc, #96]	@ (80179a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017946:	4293      	cmp	r3, r2
 8017948:	d004      	beq.n	8017954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	4a17      	ldr	r2, [pc, #92]	@ (80179ac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017950:	4293      	cmp	r3, r2
 8017952:	d10c      	bne.n	801796e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801795a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	689b      	ldr	r3, [r3, #8]
 8017960:	68ba      	ldr	r2, [r7, #8]
 8017962:	4313      	orrs	r3, r2
 8017964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	68ba      	ldr	r2, [r7, #8]
 801796c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2201      	movs	r2, #1
 8017972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	2200      	movs	r2, #0
 801797a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801797e:	2300      	movs	r3, #0
}
 8017980:	4618      	mov	r0, r3
 8017982:	3714      	adds	r7, #20
 8017984:	46bd      	mov	sp, r7
 8017986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798a:	4770      	bx	lr
 801798c:	40010000 	.word	0x40010000
 8017990:	40010400 	.word	0x40010400
 8017994:	40000400 	.word	0x40000400
 8017998:	40000800 	.word	0x40000800
 801799c:	40000c00 	.word	0x40000c00
 80179a0:	40001800 	.word	0x40001800
 80179a4:	40014000 	.word	0x40014000
 80179a8:	4000e000 	.word	0x4000e000
 80179ac:	4000e400 	.word	0x4000e400

080179b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80179b0:	b480      	push	{r7}
 80179b2:	b085      	sub	sp, #20
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80179ba:	2300      	movs	r3, #0
 80179bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80179c4:	2b01      	cmp	r3, #1
 80179c6:	d101      	bne.n	80179cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80179c8:	2302      	movs	r3, #2
 80179ca:	e073      	b.n	8017ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2201      	movs	r2, #1
 80179d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80179da:	683b      	ldr	r3, [r7, #0]
 80179dc:	68db      	ldr	r3, [r3, #12]
 80179de:	4313      	orrs	r3, r2
 80179e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	689b      	ldr	r3, [r3, #8]
 80179ec:	4313      	orrs	r3, r2
 80179ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	685b      	ldr	r3, [r3, #4]
 80179fa:	4313      	orrs	r3, r2
 80179fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017a04:	683b      	ldr	r3, [r7, #0]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	4313      	orrs	r3, r2
 8017a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	691b      	ldr	r3, [r3, #16]
 8017a16:	4313      	orrs	r3, r2
 8017a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017a20:	683b      	ldr	r3, [r7, #0]
 8017a22:	695b      	ldr	r3, [r3, #20]
 8017a24:	4313      	orrs	r3, r2
 8017a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017a2e:	683b      	ldr	r3, [r7, #0]
 8017a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a32:	4313      	orrs	r3, r2
 8017a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017a3c:	683b      	ldr	r3, [r7, #0]
 8017a3e:	699b      	ldr	r3, [r3, #24]
 8017a40:	041b      	lsls	r3, r3, #16
 8017a42:	4313      	orrs	r3, r2
 8017a44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	69db      	ldr	r3, [r3, #28]
 8017a50:	4313      	orrs	r3, r2
 8017a52:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	4a19      	ldr	r2, [pc, #100]	@ (8017ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d004      	beq.n	8017a68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	4a18      	ldr	r2, [pc, #96]	@ (8017ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017a64:	4293      	cmp	r3, r2
 8017a66:	d11c      	bne.n	8017aa2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a72:	051b      	lsls	r3, r3, #20
 8017a74:	4313      	orrs	r3, r2
 8017a76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	6a1b      	ldr	r3, [r3, #32]
 8017a82:	4313      	orrs	r3, r2
 8017a84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a90:	4313      	orrs	r3, r2
 8017a92:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a9e:	4313      	orrs	r3, r2
 8017aa0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	68fa      	ldr	r2, [r7, #12]
 8017aa8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2200      	movs	r2, #0
 8017aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017ab2:	2300      	movs	r3, #0
}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	3714      	adds	r7, #20
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abe:	4770      	bx	lr
 8017ac0:	40010000 	.word	0x40010000
 8017ac4:	40010400 	.word	0x40010400

08017ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017ac8:	b480      	push	{r7}
 8017aca:	b083      	sub	sp, #12
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017ad0:	bf00      	nop
 8017ad2:	370c      	adds	r7, #12
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ada:	4770      	bx	lr

08017adc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017adc:	b480      	push	{r7}
 8017ade:	b083      	sub	sp, #12
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017ae4:	bf00      	nop
 8017ae6:	370c      	adds	r7, #12
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aee:	4770      	bx	lr

08017af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017af0:	b480      	push	{r7}
 8017af2:	b083      	sub	sp, #12
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017af8:	bf00      	nop
 8017afa:	370c      	adds	r7, #12
 8017afc:	46bd      	mov	sp, r7
 8017afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b02:	4770      	bx	lr

08017b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d101      	bne.n	8017b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017b12:	2301      	movs	r3, #1
 8017b14:	e042      	b.n	8017b9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d106      	bne.n	8017b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	2200      	movs	r2, #0
 8017b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7f1 fa29 	bl	8008f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2224      	movs	r2, #36	@ 0x24
 8017b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	681a      	ldr	r2, [r3, #0]
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	f022 0201 	bic.w	r2, r2, #1
 8017b44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d002      	beq.n	8017b54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f001 fbf8 	bl	8019344 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f000 fd89 	bl	801866c <UART_SetConfig>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d101      	bne.n	8017b64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017b60:	2301      	movs	r3, #1
 8017b62:	e01b      	b.n	8017b9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	685a      	ldr	r2, [r3, #4]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	689a      	ldr	r2, [r3, #8]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	f042 0201 	orr.w	r2, r2, #1
 8017b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f001 fc77 	bl	8019488 <UART_CheckIdleState>
 8017b9a:	4603      	mov	r3, r0
}
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	3708      	adds	r7, #8
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}

08017ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b08a      	sub	sp, #40	@ 0x28
 8017ba8:	af02      	add	r7, sp, #8
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	60b9      	str	r1, [r7, #8]
 8017bae:	603b      	str	r3, [r7, #0]
 8017bb0:	4613      	mov	r3, r2
 8017bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017bba:	2b20      	cmp	r3, #32
 8017bbc:	d17b      	bne.n	8017cb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d002      	beq.n	8017bca <HAL_UART_Transmit+0x26>
 8017bc4:	88fb      	ldrh	r3, [r7, #6]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d101      	bne.n	8017bce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017bca:	2301      	movs	r3, #1
 8017bcc:	e074      	b.n	8017cb8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2221      	movs	r2, #33	@ 0x21
 8017bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017bde:	f7f1 faf1 	bl	80091c4 <HAL_GetTick>
 8017be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	88fa      	ldrh	r2, [r7, #6]
 8017be8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	88fa      	ldrh	r2, [r7, #6]
 8017bf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	689b      	ldr	r3, [r3, #8]
 8017bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017bfc:	d108      	bne.n	8017c10 <HAL_UART_Transmit+0x6c>
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	691b      	ldr	r3, [r3, #16]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d104      	bne.n	8017c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017c06:	2300      	movs	r3, #0
 8017c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	61bb      	str	r3, [r7, #24]
 8017c0e:	e003      	b.n	8017c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017c10:	68bb      	ldr	r3, [r7, #8]
 8017c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017c14:	2300      	movs	r3, #0
 8017c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017c18:	e030      	b.n	8017c7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	9300      	str	r3, [sp, #0]
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	2200      	movs	r2, #0
 8017c22:	2180      	movs	r1, #128	@ 0x80
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f001 fcd9 	bl	80195dc <UART_WaitOnFlagUntilTimeout>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d005      	beq.n	8017c3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	2220      	movs	r2, #32
 8017c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017c38:	2303      	movs	r3, #3
 8017c3a:	e03d      	b.n	8017cb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017c3c:	69fb      	ldr	r3, [r7, #28]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d10b      	bne.n	8017c5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017c42:	69bb      	ldr	r3, [r7, #24]
 8017c44:	881b      	ldrh	r3, [r3, #0]
 8017c46:	461a      	mov	r2, r3
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017c50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017c52:	69bb      	ldr	r3, [r7, #24]
 8017c54:	3302      	adds	r3, #2
 8017c56:	61bb      	str	r3, [r7, #24]
 8017c58:	e007      	b.n	8017c6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017c5a:	69fb      	ldr	r3, [r7, #28]
 8017c5c:	781a      	ldrb	r2, [r3, #0]
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017c64:	69fb      	ldr	r3, [r7, #28]
 8017c66:	3301      	adds	r3, #1
 8017c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017c70:	b29b      	uxth	r3, r3
 8017c72:	3b01      	subs	r3, #1
 8017c74:	b29a      	uxth	r2, r3
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d1c8      	bne.n	8017c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	697b      	ldr	r3, [r7, #20]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	2140      	movs	r1, #64	@ 0x40
 8017c92:	68f8      	ldr	r0, [r7, #12]
 8017c94:	f001 fca2 	bl	80195dc <UART_WaitOnFlagUntilTimeout>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d005      	beq.n	8017caa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	2220      	movs	r2, #32
 8017ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017ca6:	2303      	movs	r3, #3
 8017ca8:	e006      	b.n	8017cb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	2220      	movs	r2, #32
 8017cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	e000      	b.n	8017cb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017cb6:	2302      	movs	r3, #2
  }
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3720      	adds	r7, #32
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	b091      	sub	sp, #68	@ 0x44
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	60f8      	str	r0, [r7, #12]
 8017cc8:	60b9      	str	r1, [r7, #8]
 8017cca:	4613      	mov	r3, r2
 8017ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017cd4:	2b20      	cmp	r3, #32
 8017cd6:	d178      	bne.n	8017dca <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d002      	beq.n	8017ce4 <HAL_UART_Transmit_IT+0x24>
 8017cde:	88fb      	ldrh	r3, [r7, #6]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d101      	bne.n	8017ce8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e071      	b.n	8017dcc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	68ba      	ldr	r2, [r7, #8]
 8017cec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	88fa      	ldrh	r2, [r7, #6]
 8017cf2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	88fa      	ldrh	r2, [r7, #6]
 8017cfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2200      	movs	r2, #0
 8017d02:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2200      	movs	r2, #0
 8017d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	2221      	movs	r2, #33	@ 0x21
 8017d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017d1c:	d12a      	bne.n	8017d74 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	689b      	ldr	r3, [r3, #8]
 8017d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017d26:	d107      	bne.n	8017d38 <HAL_UART_Transmit_IT+0x78>
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	691b      	ldr	r3, [r3, #16]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d103      	bne.n	8017d38 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	4a29      	ldr	r2, [pc, #164]	@ (8017dd8 <HAL_UART_Transmit_IT+0x118>)
 8017d34:	679a      	str	r2, [r3, #120]	@ 0x78
 8017d36:	e002      	b.n	8017d3e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	4a28      	ldr	r2, [pc, #160]	@ (8017ddc <HAL_UART_Transmit_IT+0x11c>)
 8017d3c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	3308      	adds	r3, #8
 8017d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d48:	e853 3f00 	ldrex	r3, [r3]
 8017d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	3308      	adds	r3, #8
 8017d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017d5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8017d60:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017d66:	e841 2300 	strex	r3, r2, [r1]
 8017d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8017d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d1e5      	bne.n	8017d3e <HAL_UART_Transmit_IT+0x7e>
 8017d72:	e028      	b.n	8017dc6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	689b      	ldr	r3, [r3, #8]
 8017d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017d7c:	d107      	bne.n	8017d8e <HAL_UART_Transmit_IT+0xce>
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	691b      	ldr	r3, [r3, #16]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d103      	bne.n	8017d8e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	4a15      	ldr	r2, [pc, #84]	@ (8017de0 <HAL_UART_Transmit_IT+0x120>)
 8017d8a:	679a      	str	r2, [r3, #120]	@ 0x78
 8017d8c:	e002      	b.n	8017d94 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	4a14      	ldr	r2, [pc, #80]	@ (8017de4 <HAL_UART_Transmit_IT+0x124>)
 8017d92:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	e853 3f00 	ldrex	r3, [r3]
 8017da0:	613b      	str	r3, [r7, #16]
   return(result);
 8017da2:	693b      	ldr	r3, [r7, #16]
 8017da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	461a      	mov	r2, r3
 8017db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017db2:	623b      	str	r3, [r7, #32]
 8017db4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017db6:	69f9      	ldr	r1, [r7, #28]
 8017db8:	6a3a      	ldr	r2, [r7, #32]
 8017dba:	e841 2300 	strex	r3, r2, [r1]
 8017dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d1e6      	bne.n	8017d94 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	e000      	b.n	8017dcc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8017dca:	2302      	movs	r3, #2
  }
}
 8017dcc:	4618      	mov	r0, r3
 8017dce:	3744      	adds	r7, #68	@ 0x44
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd6:	4770      	bx	lr
 8017dd8:	08019c47 	.word	0x08019c47
 8017ddc:	08019b67 	.word	0x08019b67
 8017de0:	08019aa5 	.word	0x08019aa5
 8017de4:	080199ed 	.word	0x080199ed

08017de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b08a      	sub	sp, #40	@ 0x28
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	4613      	mov	r3, r2
 8017df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017dfc:	2b20      	cmp	r3, #32
 8017dfe:	d137      	bne.n	8017e70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d002      	beq.n	8017e0c <HAL_UART_Receive_IT+0x24>
 8017e06:	88fb      	ldrh	r3, [r7, #6]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d101      	bne.n	8017e10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	e030      	b.n	8017e72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	2200      	movs	r2, #0
 8017e14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	4a18      	ldr	r2, [pc, #96]	@ (8017e7c <HAL_UART_Receive_IT+0x94>)
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d01f      	beq.n	8017e60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	685b      	ldr	r3, [r3, #4]
 8017e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d018      	beq.n	8017e60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	e853 3f00 	ldrex	r3, [r3]
 8017e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	461a      	mov	r2, r3
 8017e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e4c:	623b      	str	r3, [r7, #32]
 8017e4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e50:	69f9      	ldr	r1, [r7, #28]
 8017e52:	6a3a      	ldr	r2, [r7, #32]
 8017e54:	e841 2300 	strex	r3, r2, [r1]
 8017e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8017e5a:	69bb      	ldr	r3, [r7, #24]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1e6      	bne.n	8017e2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017e60:	88fb      	ldrh	r3, [r7, #6]
 8017e62:	461a      	mov	r2, r3
 8017e64:	68b9      	ldr	r1, [r7, #8]
 8017e66:	68f8      	ldr	r0, [r7, #12]
 8017e68:	f001 fc26 	bl	80196b8 <UART_Start_Receive_IT>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	e000      	b.n	8017e72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017e70:	2302      	movs	r3, #2
  }
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3728      	adds	r7, #40	@ 0x28
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	58000c00 	.word	0x58000c00

08017e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b0ba      	sub	sp, #232	@ 0xe8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	69db      	ldr	r3, [r3, #28]
 8017e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	689b      	ldr	r3, [r3, #8]
 8017ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017eaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017eae:	4013      	ands	r3, r2
 8017eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d11b      	bne.n	8017ef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ec0:	f003 0320 	and.w	r3, r3, #32
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d015      	beq.n	8017ef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ecc:	f003 0320 	and.w	r3, r3, #32
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d105      	bne.n	8017ee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d009      	beq.n	8017ef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f000 8393 	beq.w	8018610 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	4798      	blx	r3
      }
      return;
 8017ef2:	e38d      	b.n	8018610 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	f000 8123 	beq.w	8018144 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017efe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017f02:	4b8d      	ldr	r3, [pc, #564]	@ (8018138 <HAL_UART_IRQHandler+0x2b8>)
 8017f04:	4013      	ands	r3, r2
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d106      	bne.n	8017f18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017f0e:	4b8b      	ldr	r3, [pc, #556]	@ (801813c <HAL_UART_IRQHandler+0x2bc>)
 8017f10:	4013      	ands	r3, r2
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	f000 8116 	beq.w	8018144 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f1c:	f003 0301 	and.w	r3, r3, #1
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d011      	beq.n	8017f48 <HAL_UART_IRQHandler+0xc8>
 8017f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d00b      	beq.n	8017f48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	2201      	movs	r2, #1
 8017f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f3e:	f043 0201 	orr.w	r2, r3, #1
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f4c:	f003 0302 	and.w	r3, r3, #2
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d011      	beq.n	8017f78 <HAL_UART_IRQHandler+0xf8>
 8017f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017f58:	f003 0301 	and.w	r3, r3, #1
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d00b      	beq.n	8017f78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	2202      	movs	r2, #2
 8017f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f6e:	f043 0204 	orr.w	r2, r3, #4
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f7c:	f003 0304 	and.w	r3, r3, #4
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d011      	beq.n	8017fa8 <HAL_UART_IRQHandler+0x128>
 8017f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017f88:	f003 0301 	and.w	r3, r3, #1
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d00b      	beq.n	8017fa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2204      	movs	r2, #4
 8017f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f9e:	f043 0202 	orr.w	r2, r3, #2
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fac:	f003 0308 	and.w	r3, r3, #8
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d017      	beq.n	8017fe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017fb8:	f003 0320 	and.w	r3, r3, #32
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d105      	bne.n	8017fcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8018138 <HAL_UART_IRQHandler+0x2b8>)
 8017fc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d00b      	beq.n	8017fe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	2208      	movs	r2, #8
 8017fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017fda:	f043 0208 	orr.w	r2, r3, #8
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d012      	beq.n	8018016 <HAL_UART_IRQHandler+0x196>
 8017ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d00c      	beq.n	8018016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801800c:	f043 0220 	orr.w	r2, r3, #32
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801801c:	2b00      	cmp	r3, #0
 801801e:	f000 82f9 	beq.w	8018614 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018026:	f003 0320 	and.w	r3, r3, #32
 801802a:	2b00      	cmp	r3, #0
 801802c:	d013      	beq.n	8018056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801802e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018032:	f003 0320 	and.w	r3, r3, #32
 8018036:	2b00      	cmp	r3, #0
 8018038:	d105      	bne.n	8018046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801803a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801803e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018042:	2b00      	cmp	r3, #0
 8018044:	d007      	beq.n	8018056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801804a:	2b00      	cmp	r3, #0
 801804c:	d003      	beq.n	8018056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018052:	6878      	ldr	r0, [r7, #4]
 8018054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801805c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	689b      	ldr	r3, [r3, #8]
 8018066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801806a:	2b40      	cmp	r3, #64	@ 0x40
 801806c:	d005      	beq.n	801807a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801806e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018076:	2b00      	cmp	r3, #0
 8018078:	d054      	beq.n	8018124 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801807a:	6878      	ldr	r0, [r7, #4]
 801807c:	f001 fc3e 	bl	80198fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	689b      	ldr	r3, [r3, #8]
 8018086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801808a:	2b40      	cmp	r3, #64	@ 0x40
 801808c:	d146      	bne.n	801811c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	3308      	adds	r3, #8
 8018094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801809c:	e853 3f00 	ldrex	r3, [r3]
 80180a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80180a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80180a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80180ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	3308      	adds	r3, #8
 80180b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80180ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80180be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80180c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80180ca:	e841 2300 	strex	r3, r2, [r1]
 80180ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80180d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d1d9      	bne.n	801808e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d017      	beq.n	8018114 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180ea:	4a15      	ldr	r2, [pc, #84]	@ (8018140 <HAL_UART_IRQHandler+0x2c0>)
 80180ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7f4 fa7b 	bl	800c5f0 <HAL_DMA_Abort_IT>
 80180fa:	4603      	mov	r3, r0
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d019      	beq.n	8018134 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801810e:	4610      	mov	r0, r2
 8018110:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018112:	e00f      	b.n	8018134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f000 fa93 	bl	8018640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801811a:	e00b      	b.n	8018134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801811c:	6878      	ldr	r0, [r7, #4]
 801811e:	f000 fa8f 	bl	8018640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018122:	e007      	b.n	8018134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f000 fa8b 	bl	8018640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	2200      	movs	r2, #0
 801812e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8018132:	e26f      	b.n	8018614 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018134:	bf00      	nop
    return;
 8018136:	e26d      	b.n	8018614 <HAL_UART_IRQHandler+0x794>
 8018138:	10000001 	.word	0x10000001
 801813c:	04000120 	.word	0x04000120
 8018140:	080199c9 	.word	0x080199c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018148:	2b01      	cmp	r3, #1
 801814a:	f040 8203 	bne.w	8018554 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018152:	f003 0310 	and.w	r3, r3, #16
 8018156:	2b00      	cmp	r3, #0
 8018158:	f000 81fc 	beq.w	8018554 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801815c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018160:	f003 0310 	and.w	r3, r3, #16
 8018164:	2b00      	cmp	r3, #0
 8018166:	f000 81f5 	beq.w	8018554 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2210      	movs	r2, #16
 8018170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	689b      	ldr	r3, [r3, #8]
 8018178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801817c:	2b40      	cmp	r3, #64	@ 0x40
 801817e:	f040 816d 	bne.w	801845c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	4aa4      	ldr	r2, [pc, #656]	@ (801841c <HAL_UART_IRQHandler+0x59c>)
 801818c:	4293      	cmp	r3, r2
 801818e:	d068      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4aa1      	ldr	r2, [pc, #644]	@ (8018420 <HAL_UART_IRQHandler+0x5a0>)
 801819a:	4293      	cmp	r3, r2
 801819c:	d061      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	4a9f      	ldr	r2, [pc, #636]	@ (8018424 <HAL_UART_IRQHandler+0x5a4>)
 80181a8:	4293      	cmp	r3, r2
 80181aa:	d05a      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	4a9c      	ldr	r2, [pc, #624]	@ (8018428 <HAL_UART_IRQHandler+0x5a8>)
 80181b6:	4293      	cmp	r3, r2
 80181b8:	d053      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	4a9a      	ldr	r2, [pc, #616]	@ (801842c <HAL_UART_IRQHandler+0x5ac>)
 80181c4:	4293      	cmp	r3, r2
 80181c6:	d04c      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	4a97      	ldr	r2, [pc, #604]	@ (8018430 <HAL_UART_IRQHandler+0x5b0>)
 80181d2:	4293      	cmp	r3, r2
 80181d4:	d045      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4a95      	ldr	r2, [pc, #596]	@ (8018434 <HAL_UART_IRQHandler+0x5b4>)
 80181e0:	4293      	cmp	r3, r2
 80181e2:	d03e      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	4a92      	ldr	r2, [pc, #584]	@ (8018438 <HAL_UART_IRQHandler+0x5b8>)
 80181ee:	4293      	cmp	r3, r2
 80181f0:	d037      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	4a90      	ldr	r2, [pc, #576]	@ (801843c <HAL_UART_IRQHandler+0x5bc>)
 80181fc:	4293      	cmp	r3, r2
 80181fe:	d030      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	4a8d      	ldr	r2, [pc, #564]	@ (8018440 <HAL_UART_IRQHandler+0x5c0>)
 801820a:	4293      	cmp	r3, r2
 801820c:	d029      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4a8b      	ldr	r2, [pc, #556]	@ (8018444 <HAL_UART_IRQHandler+0x5c4>)
 8018218:	4293      	cmp	r3, r2
 801821a:	d022      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4a88      	ldr	r2, [pc, #544]	@ (8018448 <HAL_UART_IRQHandler+0x5c8>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d01b      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	4a86      	ldr	r2, [pc, #536]	@ (801844c <HAL_UART_IRQHandler+0x5cc>)
 8018234:	4293      	cmp	r3, r2
 8018236:	d014      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4a83      	ldr	r2, [pc, #524]	@ (8018450 <HAL_UART_IRQHandler+0x5d0>)
 8018242:	4293      	cmp	r3, r2
 8018244:	d00d      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	4a81      	ldr	r2, [pc, #516]	@ (8018454 <HAL_UART_IRQHandler+0x5d4>)
 8018250:	4293      	cmp	r3, r2
 8018252:	d006      	beq.n	8018262 <HAL_UART_IRQHandler+0x3e2>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4a7e      	ldr	r2, [pc, #504]	@ (8018458 <HAL_UART_IRQHandler+0x5d8>)
 801825e:	4293      	cmp	r3, r2
 8018260:	d106      	bne.n	8018270 <HAL_UART_IRQHandler+0x3f0>
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	b29b      	uxth	r3, r3
 801826e:	e005      	b.n	801827c <HAL_UART_IRQHandler+0x3fc>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	b29b      	uxth	r3, r3
 801827c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018284:	2b00      	cmp	r3, #0
 8018286:	f000 80ad 	beq.w	80183e4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018290:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018294:	429a      	cmp	r2, r3
 8018296:	f080 80a5 	bcs.w	80183e4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80182a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182aa:	69db      	ldr	r3, [r3, #28]
 80182ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80182b0:	f000 8087 	beq.w	80183c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80182c0:	e853 3f00 	ldrex	r3, [r3]
 80182c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80182c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80182cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80182d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	461a      	mov	r2, r3
 80182da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80182de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80182e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80182ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80182ee:	e841 2300 	strex	r3, r2, [r1]
 80182f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80182f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d1da      	bne.n	80182b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	3308      	adds	r3, #8
 8018304:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018308:	e853 3f00 	ldrex	r3, [r3]
 801830c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801830e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018310:	f023 0301 	bic.w	r3, r3, #1
 8018314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	3308      	adds	r3, #8
 801831e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8018322:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8018326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018328:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801832a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801832e:	e841 2300 	strex	r3, r2, [r1]
 8018332:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8018334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018336:	2b00      	cmp	r3, #0
 8018338:	d1e1      	bne.n	80182fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	3308      	adds	r3, #8
 8018340:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018344:	e853 3f00 	ldrex	r3, [r3]
 8018348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801834a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801834c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	3308      	adds	r3, #8
 801835a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801835e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018360:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018366:	e841 2300 	strex	r3, r2, [r1]
 801836a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801836c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801836e:	2b00      	cmp	r3, #0
 8018370:	d1e3      	bne.n	801833a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2220      	movs	r2, #32
 8018376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	2200      	movs	r2, #0
 801837e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018388:	e853 3f00 	ldrex	r3, [r3]
 801838c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801838e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018390:	f023 0310 	bic.w	r3, r3, #16
 8018394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	461a      	mov	r2, r3
 801839e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80183a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80183a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80183a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80183aa:	e841 2300 	strex	r3, r2, [r1]
 80183ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80183b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d1e4      	bne.n	8018380 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183bc:	4618      	mov	r0, r3
 80183be:	f7f3 fdf9 	bl	800bfb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	2202      	movs	r2, #2
 80183c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	1ad3      	subs	r3, r2, r3
 80183d8:	b29b      	uxth	r3, r3
 80183da:	4619      	mov	r1, r3
 80183dc:	6878      	ldr	r0, [r7, #4]
 80183de:	f000 f939 	bl	8018654 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80183e2:	e119      	b.n	8018618 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80183ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80183ee:	429a      	cmp	r2, r3
 80183f0:	f040 8112 	bne.w	8018618 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183fa:	69db      	ldr	r3, [r3, #28]
 80183fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018400:	f040 810a 	bne.w	8018618 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2202      	movs	r2, #2
 8018408:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018410:	4619      	mov	r1, r3
 8018412:	6878      	ldr	r0, [r7, #4]
 8018414:	f000 f91e 	bl	8018654 <HAL_UARTEx_RxEventCallback>
      return;
 8018418:	e0fe      	b.n	8018618 <HAL_UART_IRQHandler+0x798>
 801841a:	bf00      	nop
 801841c:	40020010 	.word	0x40020010
 8018420:	40020028 	.word	0x40020028
 8018424:	40020040 	.word	0x40020040
 8018428:	40020058 	.word	0x40020058
 801842c:	40020070 	.word	0x40020070
 8018430:	40020088 	.word	0x40020088
 8018434:	400200a0 	.word	0x400200a0
 8018438:	400200b8 	.word	0x400200b8
 801843c:	40020410 	.word	0x40020410
 8018440:	40020428 	.word	0x40020428
 8018444:	40020440 	.word	0x40020440
 8018448:	40020458 	.word	0x40020458
 801844c:	40020470 	.word	0x40020470
 8018450:	40020488 	.word	0x40020488
 8018454:	400204a0 	.word	0x400204a0
 8018458:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018468:	b29b      	uxth	r3, r3
 801846a:	1ad3      	subs	r3, r2, r3
 801846c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018476:	b29b      	uxth	r3, r3
 8018478:	2b00      	cmp	r3, #0
 801847a:	f000 80cf 	beq.w	801861c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801847e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018482:	2b00      	cmp	r3, #0
 8018484:	f000 80ca 	beq.w	801861c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801848e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018490:	e853 3f00 	ldrex	r3, [r3]
 8018494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801849c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	461a      	mov	r2, r3
 80184a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80184aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80184ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80184b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80184b2:	e841 2300 	strex	r3, r2, [r1]
 80184b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80184b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d1e4      	bne.n	8018488 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	3308      	adds	r3, #8
 80184c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c8:	e853 3f00 	ldrex	r3, [r3]
 80184cc:	623b      	str	r3, [r7, #32]
   return(result);
 80184ce:	6a3a      	ldr	r2, [r7, #32]
 80184d0:	4b55      	ldr	r3, [pc, #340]	@ (8018628 <HAL_UART_IRQHandler+0x7a8>)
 80184d2:	4013      	ands	r3, r2
 80184d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	3308      	adds	r3, #8
 80184de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80184e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80184e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80184e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80184ea:	e841 2300 	strex	r3, r2, [r1]
 80184ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80184f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d1e3      	bne.n	80184be <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	2220      	movs	r2, #32
 80184fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2200      	movs	r2, #0
 8018502:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2200      	movs	r2, #0
 8018508:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018510:	693b      	ldr	r3, [r7, #16]
 8018512:	e853 3f00 	ldrex	r3, [r3]
 8018516:	60fb      	str	r3, [r7, #12]
   return(result);
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	f023 0310 	bic.w	r3, r3, #16
 801851e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	461a      	mov	r2, r3
 8018528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801852c:	61fb      	str	r3, [r7, #28]
 801852e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018530:	69b9      	ldr	r1, [r7, #24]
 8018532:	69fa      	ldr	r2, [r7, #28]
 8018534:	e841 2300 	strex	r3, r2, [r1]
 8018538:	617b      	str	r3, [r7, #20]
   return(result);
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d1e4      	bne.n	801850a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	2202      	movs	r2, #2
 8018544:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801854a:	4619      	mov	r1, r3
 801854c:	6878      	ldr	r0, [r7, #4]
 801854e:	f000 f881 	bl	8018654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018552:	e063      	b.n	801861c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801855c:	2b00      	cmp	r3, #0
 801855e:	d00e      	beq.n	801857e <HAL_UART_IRQHandler+0x6fe>
 8018560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018568:	2b00      	cmp	r3, #0
 801856a:	d008      	beq.n	801857e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018576:	6878      	ldr	r0, [r7, #4]
 8018578:	f002 f926 	bl	801a7c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801857c:	e051      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018586:	2b00      	cmp	r3, #0
 8018588:	d014      	beq.n	80185b4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801858a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801858e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018592:	2b00      	cmp	r3, #0
 8018594:	d105      	bne.n	80185a2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801859a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d008      	beq.n	80185b4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d03a      	beq.n	8018620 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	4798      	blx	r3
    }
    return;
 80185b2:	e035      	b.n	8018620 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80185b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80185b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d009      	beq.n	80185d4 <HAL_UART_IRQHandler+0x754>
 80185c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80185c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d003      	beq.n	80185d4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f001 fbaf 	bl	8019d30 <UART_EndTransmit_IT>
    return;
 80185d2:	e026      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80185d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80185d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d009      	beq.n	80185f4 <HAL_UART_IRQHandler+0x774>
 80185e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80185e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d003      	beq.n	80185f4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80185ec:	6878      	ldr	r0, [r7, #4]
 80185ee:	f002 f8ff 	bl	801a7f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80185f2:	e016      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80185f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80185f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d010      	beq.n	8018622 <HAL_UART_IRQHandler+0x7a2>
 8018600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018604:	2b00      	cmp	r3, #0
 8018606:	da0c      	bge.n	8018622 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f002 f8e7 	bl	801a7dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801860e:	e008      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018610:	bf00      	nop
 8018612:	e006      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018614:	bf00      	nop
 8018616:	e004      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018618:	bf00      	nop
 801861a:	e002      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
      return;
 801861c:	bf00      	nop
 801861e:	e000      	b.n	8018622 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018620:	bf00      	nop
  }
}
 8018622:	37e8      	adds	r7, #232	@ 0xe8
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}
 8018628:	effffffe 	.word	0xeffffffe

0801862c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801862c:	b480      	push	{r7}
 801862e:	b083      	sub	sp, #12
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018634:	bf00      	nop
 8018636:	370c      	adds	r7, #12
 8018638:	46bd      	mov	sp, r7
 801863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863e:	4770      	bx	lr

08018640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018648:	bf00      	nop
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
 801865c:	460b      	mov	r3, r1
 801865e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018660:	bf00      	nop
 8018662:	370c      	adds	r7, #12
 8018664:	46bd      	mov	sp, r7
 8018666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866a:	4770      	bx	lr

0801866c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801866c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018670:	b092      	sub	sp, #72	@ 0x48
 8018672:	af00      	add	r7, sp, #0
 8018674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018676:	2300      	movs	r3, #0
 8018678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	689a      	ldr	r2, [r3, #8]
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	691b      	ldr	r3, [r3, #16]
 8018684:	431a      	orrs	r2, r3
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	695b      	ldr	r3, [r3, #20]
 801868a:	431a      	orrs	r2, r3
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	69db      	ldr	r3, [r3, #28]
 8018690:	4313      	orrs	r3, r2
 8018692:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	681a      	ldr	r2, [r3, #0]
 801869a:	4bbe      	ldr	r3, [pc, #760]	@ (8018994 <UART_SetConfig+0x328>)
 801869c:	4013      	ands	r3, r2
 801869e:	697a      	ldr	r2, [r7, #20]
 80186a0:	6812      	ldr	r2, [r2, #0]
 80186a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80186a4:	430b      	orrs	r3, r1
 80186a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80186a8:	697b      	ldr	r3, [r7, #20]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80186b2:	697b      	ldr	r3, [r7, #20]
 80186b4:	68da      	ldr	r2, [r3, #12]
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	430a      	orrs	r2, r1
 80186bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80186be:	697b      	ldr	r3, [r7, #20]
 80186c0:	699b      	ldr	r3, [r3, #24]
 80186c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80186c4:	697b      	ldr	r3, [r7, #20]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4ab3      	ldr	r2, [pc, #716]	@ (8018998 <UART_SetConfig+0x32c>)
 80186ca:	4293      	cmp	r3, r2
 80186cc:	d004      	beq.n	80186d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80186ce:	697b      	ldr	r3, [r7, #20]
 80186d0:	6a1b      	ldr	r3, [r3, #32]
 80186d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80186d4:	4313      	orrs	r3, r2
 80186d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80186d8:	697b      	ldr	r3, [r7, #20]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	689a      	ldr	r2, [r3, #8]
 80186de:	4baf      	ldr	r3, [pc, #700]	@ (801899c <UART_SetConfig+0x330>)
 80186e0:	4013      	ands	r3, r2
 80186e2:	697a      	ldr	r2, [r7, #20]
 80186e4:	6812      	ldr	r2, [r2, #0]
 80186e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80186e8:	430b      	orrs	r3, r1
 80186ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80186ec:	697b      	ldr	r3, [r7, #20]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186f2:	f023 010f 	bic.w	r1, r3, #15
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	430a      	orrs	r2, r1
 8018700:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	4aa6      	ldr	r2, [pc, #664]	@ (80189a0 <UART_SetConfig+0x334>)
 8018708:	4293      	cmp	r3, r2
 801870a:	d177      	bne.n	80187fc <UART_SetConfig+0x190>
 801870c:	4ba5      	ldr	r3, [pc, #660]	@ (80189a4 <UART_SetConfig+0x338>)
 801870e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018710:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018714:	2b28      	cmp	r3, #40	@ 0x28
 8018716:	d86d      	bhi.n	80187f4 <UART_SetConfig+0x188>
 8018718:	a201      	add	r2, pc, #4	@ (adr r2, 8018720 <UART_SetConfig+0xb4>)
 801871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801871e:	bf00      	nop
 8018720:	080187c5 	.word	0x080187c5
 8018724:	080187f5 	.word	0x080187f5
 8018728:	080187f5 	.word	0x080187f5
 801872c:	080187f5 	.word	0x080187f5
 8018730:	080187f5 	.word	0x080187f5
 8018734:	080187f5 	.word	0x080187f5
 8018738:	080187f5 	.word	0x080187f5
 801873c:	080187f5 	.word	0x080187f5
 8018740:	080187cd 	.word	0x080187cd
 8018744:	080187f5 	.word	0x080187f5
 8018748:	080187f5 	.word	0x080187f5
 801874c:	080187f5 	.word	0x080187f5
 8018750:	080187f5 	.word	0x080187f5
 8018754:	080187f5 	.word	0x080187f5
 8018758:	080187f5 	.word	0x080187f5
 801875c:	080187f5 	.word	0x080187f5
 8018760:	080187d5 	.word	0x080187d5
 8018764:	080187f5 	.word	0x080187f5
 8018768:	080187f5 	.word	0x080187f5
 801876c:	080187f5 	.word	0x080187f5
 8018770:	080187f5 	.word	0x080187f5
 8018774:	080187f5 	.word	0x080187f5
 8018778:	080187f5 	.word	0x080187f5
 801877c:	080187f5 	.word	0x080187f5
 8018780:	080187dd 	.word	0x080187dd
 8018784:	080187f5 	.word	0x080187f5
 8018788:	080187f5 	.word	0x080187f5
 801878c:	080187f5 	.word	0x080187f5
 8018790:	080187f5 	.word	0x080187f5
 8018794:	080187f5 	.word	0x080187f5
 8018798:	080187f5 	.word	0x080187f5
 801879c:	080187f5 	.word	0x080187f5
 80187a0:	080187e5 	.word	0x080187e5
 80187a4:	080187f5 	.word	0x080187f5
 80187a8:	080187f5 	.word	0x080187f5
 80187ac:	080187f5 	.word	0x080187f5
 80187b0:	080187f5 	.word	0x080187f5
 80187b4:	080187f5 	.word	0x080187f5
 80187b8:	080187f5 	.word	0x080187f5
 80187bc:	080187f5 	.word	0x080187f5
 80187c0:	080187ed 	.word	0x080187ed
 80187c4:	2301      	movs	r3, #1
 80187c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ca:	e326      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187cc:	2304      	movs	r3, #4
 80187ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187d2:	e322      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187d4:	2308      	movs	r3, #8
 80187d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187da:	e31e      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187dc:	2310      	movs	r3, #16
 80187de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187e2:	e31a      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187e4:	2320      	movs	r3, #32
 80187e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ea:	e316      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187ec:	2340      	movs	r3, #64	@ 0x40
 80187ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187f2:	e312      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187f4:	2380      	movs	r3, #128	@ 0x80
 80187f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187fa:	e30e      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	4a69      	ldr	r2, [pc, #420]	@ (80189a8 <UART_SetConfig+0x33c>)
 8018802:	4293      	cmp	r3, r2
 8018804:	d130      	bne.n	8018868 <UART_SetConfig+0x1fc>
 8018806:	4b67      	ldr	r3, [pc, #412]	@ (80189a4 <UART_SetConfig+0x338>)
 8018808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801880a:	f003 0307 	and.w	r3, r3, #7
 801880e:	2b05      	cmp	r3, #5
 8018810:	d826      	bhi.n	8018860 <UART_SetConfig+0x1f4>
 8018812:	a201      	add	r2, pc, #4	@ (adr r2, 8018818 <UART_SetConfig+0x1ac>)
 8018814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018818:	08018831 	.word	0x08018831
 801881c:	08018839 	.word	0x08018839
 8018820:	08018841 	.word	0x08018841
 8018824:	08018849 	.word	0x08018849
 8018828:	08018851 	.word	0x08018851
 801882c:	08018859 	.word	0x08018859
 8018830:	2300      	movs	r3, #0
 8018832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018836:	e2f0      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018838:	2304      	movs	r3, #4
 801883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801883e:	e2ec      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018840:	2308      	movs	r3, #8
 8018842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018846:	e2e8      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018848:	2310      	movs	r3, #16
 801884a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801884e:	e2e4      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018850:	2320      	movs	r3, #32
 8018852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018856:	e2e0      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018858:	2340      	movs	r3, #64	@ 0x40
 801885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885e:	e2dc      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018860:	2380      	movs	r3, #128	@ 0x80
 8018862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018866:	e2d8      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018868:	697b      	ldr	r3, [r7, #20]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	4a4f      	ldr	r2, [pc, #316]	@ (80189ac <UART_SetConfig+0x340>)
 801886e:	4293      	cmp	r3, r2
 8018870:	d130      	bne.n	80188d4 <UART_SetConfig+0x268>
 8018872:	4b4c      	ldr	r3, [pc, #304]	@ (80189a4 <UART_SetConfig+0x338>)
 8018874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018876:	f003 0307 	and.w	r3, r3, #7
 801887a:	2b05      	cmp	r3, #5
 801887c:	d826      	bhi.n	80188cc <UART_SetConfig+0x260>
 801887e:	a201      	add	r2, pc, #4	@ (adr r2, 8018884 <UART_SetConfig+0x218>)
 8018880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018884:	0801889d 	.word	0x0801889d
 8018888:	080188a5 	.word	0x080188a5
 801888c:	080188ad 	.word	0x080188ad
 8018890:	080188b5 	.word	0x080188b5
 8018894:	080188bd 	.word	0x080188bd
 8018898:	080188c5 	.word	0x080188c5
 801889c:	2300      	movs	r3, #0
 801889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188a2:	e2ba      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188a4:	2304      	movs	r3, #4
 80188a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188aa:	e2b6      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188ac:	2308      	movs	r3, #8
 80188ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188b2:	e2b2      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188b4:	2310      	movs	r3, #16
 80188b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ba:	e2ae      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188bc:	2320      	movs	r3, #32
 80188be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c2:	e2aa      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188c4:	2340      	movs	r3, #64	@ 0x40
 80188c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ca:	e2a6      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188cc:	2380      	movs	r3, #128	@ 0x80
 80188ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188d2:	e2a2      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80188d4:	697b      	ldr	r3, [r7, #20]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	4a35      	ldr	r2, [pc, #212]	@ (80189b0 <UART_SetConfig+0x344>)
 80188da:	4293      	cmp	r3, r2
 80188dc:	d130      	bne.n	8018940 <UART_SetConfig+0x2d4>
 80188de:	4b31      	ldr	r3, [pc, #196]	@ (80189a4 <UART_SetConfig+0x338>)
 80188e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80188e2:	f003 0307 	and.w	r3, r3, #7
 80188e6:	2b05      	cmp	r3, #5
 80188e8:	d826      	bhi.n	8018938 <UART_SetConfig+0x2cc>
 80188ea:	a201      	add	r2, pc, #4	@ (adr r2, 80188f0 <UART_SetConfig+0x284>)
 80188ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188f0:	08018909 	.word	0x08018909
 80188f4:	08018911 	.word	0x08018911
 80188f8:	08018919 	.word	0x08018919
 80188fc:	08018921 	.word	0x08018921
 8018900:	08018929 	.word	0x08018929
 8018904:	08018931 	.word	0x08018931
 8018908:	2300      	movs	r3, #0
 801890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801890e:	e284      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018910:	2304      	movs	r3, #4
 8018912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018916:	e280      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018918:	2308      	movs	r3, #8
 801891a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801891e:	e27c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018920:	2310      	movs	r3, #16
 8018922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018926:	e278      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018928:	2320      	movs	r3, #32
 801892a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801892e:	e274      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018930:	2340      	movs	r3, #64	@ 0x40
 8018932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018936:	e270      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018938:	2380      	movs	r3, #128	@ 0x80
 801893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801893e:	e26c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	4a1b      	ldr	r2, [pc, #108]	@ (80189b4 <UART_SetConfig+0x348>)
 8018946:	4293      	cmp	r3, r2
 8018948:	d142      	bne.n	80189d0 <UART_SetConfig+0x364>
 801894a:	4b16      	ldr	r3, [pc, #88]	@ (80189a4 <UART_SetConfig+0x338>)
 801894c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801894e:	f003 0307 	and.w	r3, r3, #7
 8018952:	2b05      	cmp	r3, #5
 8018954:	d838      	bhi.n	80189c8 <UART_SetConfig+0x35c>
 8018956:	a201      	add	r2, pc, #4	@ (adr r2, 801895c <UART_SetConfig+0x2f0>)
 8018958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801895c:	08018975 	.word	0x08018975
 8018960:	0801897d 	.word	0x0801897d
 8018964:	08018985 	.word	0x08018985
 8018968:	0801898d 	.word	0x0801898d
 801896c:	080189b9 	.word	0x080189b9
 8018970:	080189c1 	.word	0x080189c1
 8018974:	2300      	movs	r3, #0
 8018976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801897a:	e24e      	b.n	8018e1a <UART_SetConfig+0x7ae>
 801897c:	2304      	movs	r3, #4
 801897e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018982:	e24a      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018984:	2308      	movs	r3, #8
 8018986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801898a:	e246      	b.n	8018e1a <UART_SetConfig+0x7ae>
 801898c:	2310      	movs	r3, #16
 801898e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018992:	e242      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018994:	cfff69f3 	.word	0xcfff69f3
 8018998:	58000c00 	.word	0x58000c00
 801899c:	11fff4ff 	.word	0x11fff4ff
 80189a0:	40011000 	.word	0x40011000
 80189a4:	58024400 	.word	0x58024400
 80189a8:	40004400 	.word	0x40004400
 80189ac:	40004800 	.word	0x40004800
 80189b0:	40004c00 	.word	0x40004c00
 80189b4:	40005000 	.word	0x40005000
 80189b8:	2320      	movs	r3, #32
 80189ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189be:	e22c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80189c0:	2340      	movs	r3, #64	@ 0x40
 80189c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189c6:	e228      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80189c8:	2380      	movs	r3, #128	@ 0x80
 80189ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ce:	e224      	b.n	8018e1a <UART_SetConfig+0x7ae>
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	4ab1      	ldr	r2, [pc, #708]	@ (8018c9c <UART_SetConfig+0x630>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d176      	bne.n	8018ac8 <UART_SetConfig+0x45c>
 80189da:	4bb1      	ldr	r3, [pc, #708]	@ (8018ca0 <UART_SetConfig+0x634>)
 80189dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80189e2:	2b28      	cmp	r3, #40	@ 0x28
 80189e4:	d86c      	bhi.n	8018ac0 <UART_SetConfig+0x454>
 80189e6:	a201      	add	r2, pc, #4	@ (adr r2, 80189ec <UART_SetConfig+0x380>)
 80189e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189ec:	08018a91 	.word	0x08018a91
 80189f0:	08018ac1 	.word	0x08018ac1
 80189f4:	08018ac1 	.word	0x08018ac1
 80189f8:	08018ac1 	.word	0x08018ac1
 80189fc:	08018ac1 	.word	0x08018ac1
 8018a00:	08018ac1 	.word	0x08018ac1
 8018a04:	08018ac1 	.word	0x08018ac1
 8018a08:	08018ac1 	.word	0x08018ac1
 8018a0c:	08018a99 	.word	0x08018a99
 8018a10:	08018ac1 	.word	0x08018ac1
 8018a14:	08018ac1 	.word	0x08018ac1
 8018a18:	08018ac1 	.word	0x08018ac1
 8018a1c:	08018ac1 	.word	0x08018ac1
 8018a20:	08018ac1 	.word	0x08018ac1
 8018a24:	08018ac1 	.word	0x08018ac1
 8018a28:	08018ac1 	.word	0x08018ac1
 8018a2c:	08018aa1 	.word	0x08018aa1
 8018a30:	08018ac1 	.word	0x08018ac1
 8018a34:	08018ac1 	.word	0x08018ac1
 8018a38:	08018ac1 	.word	0x08018ac1
 8018a3c:	08018ac1 	.word	0x08018ac1
 8018a40:	08018ac1 	.word	0x08018ac1
 8018a44:	08018ac1 	.word	0x08018ac1
 8018a48:	08018ac1 	.word	0x08018ac1
 8018a4c:	08018aa9 	.word	0x08018aa9
 8018a50:	08018ac1 	.word	0x08018ac1
 8018a54:	08018ac1 	.word	0x08018ac1
 8018a58:	08018ac1 	.word	0x08018ac1
 8018a5c:	08018ac1 	.word	0x08018ac1
 8018a60:	08018ac1 	.word	0x08018ac1
 8018a64:	08018ac1 	.word	0x08018ac1
 8018a68:	08018ac1 	.word	0x08018ac1
 8018a6c:	08018ab1 	.word	0x08018ab1
 8018a70:	08018ac1 	.word	0x08018ac1
 8018a74:	08018ac1 	.word	0x08018ac1
 8018a78:	08018ac1 	.word	0x08018ac1
 8018a7c:	08018ac1 	.word	0x08018ac1
 8018a80:	08018ac1 	.word	0x08018ac1
 8018a84:	08018ac1 	.word	0x08018ac1
 8018a88:	08018ac1 	.word	0x08018ac1
 8018a8c:	08018ab9 	.word	0x08018ab9
 8018a90:	2301      	movs	r3, #1
 8018a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a96:	e1c0      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018a98:	2304      	movs	r3, #4
 8018a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a9e:	e1bc      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018aa0:	2308      	movs	r3, #8
 8018aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aa6:	e1b8      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018aa8:	2310      	movs	r3, #16
 8018aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aae:	e1b4      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018ab0:	2320      	movs	r3, #32
 8018ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ab6:	e1b0      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018ab8:	2340      	movs	r3, #64	@ 0x40
 8018aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018abe:	e1ac      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018ac0:	2380      	movs	r3, #128	@ 0x80
 8018ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ac6:	e1a8      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	4a75      	ldr	r2, [pc, #468]	@ (8018ca4 <UART_SetConfig+0x638>)
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d130      	bne.n	8018b34 <UART_SetConfig+0x4c8>
 8018ad2:	4b73      	ldr	r3, [pc, #460]	@ (8018ca0 <UART_SetConfig+0x634>)
 8018ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ad6:	f003 0307 	and.w	r3, r3, #7
 8018ada:	2b05      	cmp	r3, #5
 8018adc:	d826      	bhi.n	8018b2c <UART_SetConfig+0x4c0>
 8018ade:	a201      	add	r2, pc, #4	@ (adr r2, 8018ae4 <UART_SetConfig+0x478>)
 8018ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ae4:	08018afd 	.word	0x08018afd
 8018ae8:	08018b05 	.word	0x08018b05
 8018aec:	08018b0d 	.word	0x08018b0d
 8018af0:	08018b15 	.word	0x08018b15
 8018af4:	08018b1d 	.word	0x08018b1d
 8018af8:	08018b25 	.word	0x08018b25
 8018afc:	2300      	movs	r3, #0
 8018afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b02:	e18a      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b04:	2304      	movs	r3, #4
 8018b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b0a:	e186      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b0c:	2308      	movs	r3, #8
 8018b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b12:	e182      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b14:	2310      	movs	r3, #16
 8018b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b1a:	e17e      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b1c:	2320      	movs	r3, #32
 8018b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b22:	e17a      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b24:	2340      	movs	r3, #64	@ 0x40
 8018b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b2a:	e176      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b2c:	2380      	movs	r3, #128	@ 0x80
 8018b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b32:	e172      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	4a5b      	ldr	r2, [pc, #364]	@ (8018ca8 <UART_SetConfig+0x63c>)
 8018b3a:	4293      	cmp	r3, r2
 8018b3c:	d130      	bne.n	8018ba0 <UART_SetConfig+0x534>
 8018b3e:	4b58      	ldr	r3, [pc, #352]	@ (8018ca0 <UART_SetConfig+0x634>)
 8018b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b42:	f003 0307 	and.w	r3, r3, #7
 8018b46:	2b05      	cmp	r3, #5
 8018b48:	d826      	bhi.n	8018b98 <UART_SetConfig+0x52c>
 8018b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8018b50 <UART_SetConfig+0x4e4>)
 8018b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b50:	08018b69 	.word	0x08018b69
 8018b54:	08018b71 	.word	0x08018b71
 8018b58:	08018b79 	.word	0x08018b79
 8018b5c:	08018b81 	.word	0x08018b81
 8018b60:	08018b89 	.word	0x08018b89
 8018b64:	08018b91 	.word	0x08018b91
 8018b68:	2300      	movs	r3, #0
 8018b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b6e:	e154      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b70:	2304      	movs	r3, #4
 8018b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b76:	e150      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b78:	2308      	movs	r3, #8
 8018b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7e:	e14c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b80:	2310      	movs	r3, #16
 8018b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b86:	e148      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b88:	2320      	movs	r3, #32
 8018b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8e:	e144      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b90:	2340      	movs	r3, #64	@ 0x40
 8018b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b96:	e140      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018b98:	2380      	movs	r3, #128	@ 0x80
 8018b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9e:	e13c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	4a41      	ldr	r2, [pc, #260]	@ (8018cac <UART_SetConfig+0x640>)
 8018ba6:	4293      	cmp	r3, r2
 8018ba8:	f040 8082 	bne.w	8018cb0 <UART_SetConfig+0x644>
 8018bac:	4b3c      	ldr	r3, [pc, #240]	@ (8018ca0 <UART_SetConfig+0x634>)
 8018bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018bb4:	2b28      	cmp	r3, #40	@ 0x28
 8018bb6:	d86d      	bhi.n	8018c94 <UART_SetConfig+0x628>
 8018bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8018bc0 <UART_SetConfig+0x554>)
 8018bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bbe:	bf00      	nop
 8018bc0:	08018c65 	.word	0x08018c65
 8018bc4:	08018c95 	.word	0x08018c95
 8018bc8:	08018c95 	.word	0x08018c95
 8018bcc:	08018c95 	.word	0x08018c95
 8018bd0:	08018c95 	.word	0x08018c95
 8018bd4:	08018c95 	.word	0x08018c95
 8018bd8:	08018c95 	.word	0x08018c95
 8018bdc:	08018c95 	.word	0x08018c95
 8018be0:	08018c6d 	.word	0x08018c6d
 8018be4:	08018c95 	.word	0x08018c95
 8018be8:	08018c95 	.word	0x08018c95
 8018bec:	08018c95 	.word	0x08018c95
 8018bf0:	08018c95 	.word	0x08018c95
 8018bf4:	08018c95 	.word	0x08018c95
 8018bf8:	08018c95 	.word	0x08018c95
 8018bfc:	08018c95 	.word	0x08018c95
 8018c00:	08018c75 	.word	0x08018c75
 8018c04:	08018c95 	.word	0x08018c95
 8018c08:	08018c95 	.word	0x08018c95
 8018c0c:	08018c95 	.word	0x08018c95
 8018c10:	08018c95 	.word	0x08018c95
 8018c14:	08018c95 	.word	0x08018c95
 8018c18:	08018c95 	.word	0x08018c95
 8018c1c:	08018c95 	.word	0x08018c95
 8018c20:	08018c7d 	.word	0x08018c7d
 8018c24:	08018c95 	.word	0x08018c95
 8018c28:	08018c95 	.word	0x08018c95
 8018c2c:	08018c95 	.word	0x08018c95
 8018c30:	08018c95 	.word	0x08018c95
 8018c34:	08018c95 	.word	0x08018c95
 8018c38:	08018c95 	.word	0x08018c95
 8018c3c:	08018c95 	.word	0x08018c95
 8018c40:	08018c85 	.word	0x08018c85
 8018c44:	08018c95 	.word	0x08018c95
 8018c48:	08018c95 	.word	0x08018c95
 8018c4c:	08018c95 	.word	0x08018c95
 8018c50:	08018c95 	.word	0x08018c95
 8018c54:	08018c95 	.word	0x08018c95
 8018c58:	08018c95 	.word	0x08018c95
 8018c5c:	08018c95 	.word	0x08018c95
 8018c60:	08018c8d 	.word	0x08018c8d
 8018c64:	2301      	movs	r3, #1
 8018c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6a:	e0d6      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c6c:	2304      	movs	r3, #4
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e0d2      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c74:	2308      	movs	r3, #8
 8018c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c7a:	e0ce      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c7c:	2310      	movs	r3, #16
 8018c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c82:	e0ca      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c84:	2320      	movs	r3, #32
 8018c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c8a:	e0c6      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c8c:	2340      	movs	r3, #64	@ 0x40
 8018c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c92:	e0c2      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c94:	2380      	movs	r3, #128	@ 0x80
 8018c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c9a:	e0be      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018c9c:	40011400 	.word	0x40011400
 8018ca0:	58024400 	.word	0x58024400
 8018ca4:	40007800 	.word	0x40007800
 8018ca8:	40007c00 	.word	0x40007c00
 8018cac:	40011800 	.word	0x40011800
 8018cb0:	697b      	ldr	r3, [r7, #20]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4aad      	ldr	r2, [pc, #692]	@ (8018f6c <UART_SetConfig+0x900>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d176      	bne.n	8018da8 <UART_SetConfig+0x73c>
 8018cba:	4bad      	ldr	r3, [pc, #692]	@ (8018f70 <UART_SetConfig+0x904>)
 8018cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018cc2:	2b28      	cmp	r3, #40	@ 0x28
 8018cc4:	d86c      	bhi.n	8018da0 <UART_SetConfig+0x734>
 8018cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8018ccc <UART_SetConfig+0x660>)
 8018cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ccc:	08018d71 	.word	0x08018d71
 8018cd0:	08018da1 	.word	0x08018da1
 8018cd4:	08018da1 	.word	0x08018da1
 8018cd8:	08018da1 	.word	0x08018da1
 8018cdc:	08018da1 	.word	0x08018da1
 8018ce0:	08018da1 	.word	0x08018da1
 8018ce4:	08018da1 	.word	0x08018da1
 8018ce8:	08018da1 	.word	0x08018da1
 8018cec:	08018d79 	.word	0x08018d79
 8018cf0:	08018da1 	.word	0x08018da1
 8018cf4:	08018da1 	.word	0x08018da1
 8018cf8:	08018da1 	.word	0x08018da1
 8018cfc:	08018da1 	.word	0x08018da1
 8018d00:	08018da1 	.word	0x08018da1
 8018d04:	08018da1 	.word	0x08018da1
 8018d08:	08018da1 	.word	0x08018da1
 8018d0c:	08018d81 	.word	0x08018d81
 8018d10:	08018da1 	.word	0x08018da1
 8018d14:	08018da1 	.word	0x08018da1
 8018d18:	08018da1 	.word	0x08018da1
 8018d1c:	08018da1 	.word	0x08018da1
 8018d20:	08018da1 	.word	0x08018da1
 8018d24:	08018da1 	.word	0x08018da1
 8018d28:	08018da1 	.word	0x08018da1
 8018d2c:	08018d89 	.word	0x08018d89
 8018d30:	08018da1 	.word	0x08018da1
 8018d34:	08018da1 	.word	0x08018da1
 8018d38:	08018da1 	.word	0x08018da1
 8018d3c:	08018da1 	.word	0x08018da1
 8018d40:	08018da1 	.word	0x08018da1
 8018d44:	08018da1 	.word	0x08018da1
 8018d48:	08018da1 	.word	0x08018da1
 8018d4c:	08018d91 	.word	0x08018d91
 8018d50:	08018da1 	.word	0x08018da1
 8018d54:	08018da1 	.word	0x08018da1
 8018d58:	08018da1 	.word	0x08018da1
 8018d5c:	08018da1 	.word	0x08018da1
 8018d60:	08018da1 	.word	0x08018da1
 8018d64:	08018da1 	.word	0x08018da1
 8018d68:	08018da1 	.word	0x08018da1
 8018d6c:	08018d99 	.word	0x08018d99
 8018d70:	2301      	movs	r3, #1
 8018d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d76:	e050      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018d78:	2304      	movs	r3, #4
 8018d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d7e:	e04c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018d80:	2308      	movs	r3, #8
 8018d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d86:	e048      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018d88:	2310      	movs	r3, #16
 8018d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d8e:	e044      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018d90:	2320      	movs	r3, #32
 8018d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d96:	e040      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018d98:	2340      	movs	r3, #64	@ 0x40
 8018d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d9e:	e03c      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018da0:	2380      	movs	r3, #128	@ 0x80
 8018da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018da6:	e038      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	4a71      	ldr	r2, [pc, #452]	@ (8018f74 <UART_SetConfig+0x908>)
 8018dae:	4293      	cmp	r3, r2
 8018db0:	d130      	bne.n	8018e14 <UART_SetConfig+0x7a8>
 8018db2:	4b6f      	ldr	r3, [pc, #444]	@ (8018f70 <UART_SetConfig+0x904>)
 8018db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018db6:	f003 0307 	and.w	r3, r3, #7
 8018dba:	2b05      	cmp	r3, #5
 8018dbc:	d826      	bhi.n	8018e0c <UART_SetConfig+0x7a0>
 8018dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8018dc4 <UART_SetConfig+0x758>)
 8018dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dc4:	08018ddd 	.word	0x08018ddd
 8018dc8:	08018de5 	.word	0x08018de5
 8018dcc:	08018ded 	.word	0x08018ded
 8018dd0:	08018df5 	.word	0x08018df5
 8018dd4:	08018dfd 	.word	0x08018dfd
 8018dd8:	08018e05 	.word	0x08018e05
 8018ddc:	2302      	movs	r3, #2
 8018dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018de2:	e01a      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018de4:	2304      	movs	r3, #4
 8018de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dea:	e016      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018dec:	2308      	movs	r3, #8
 8018dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018df2:	e012      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018df4:	2310      	movs	r3, #16
 8018df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dfa:	e00e      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018dfc:	2320      	movs	r3, #32
 8018dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e02:	e00a      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018e04:	2340      	movs	r3, #64	@ 0x40
 8018e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e0a:	e006      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018e0c:	2380      	movs	r3, #128	@ 0x80
 8018e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e12:	e002      	b.n	8018e1a <UART_SetConfig+0x7ae>
 8018e14:	2380      	movs	r3, #128	@ 0x80
 8018e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	4a55      	ldr	r2, [pc, #340]	@ (8018f74 <UART_SetConfig+0x908>)
 8018e20:	4293      	cmp	r3, r2
 8018e22:	f040 80f8 	bne.w	8019016 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018e26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018e2a:	2b20      	cmp	r3, #32
 8018e2c:	dc46      	bgt.n	8018ebc <UART_SetConfig+0x850>
 8018e2e:	2b02      	cmp	r3, #2
 8018e30:	db75      	blt.n	8018f1e <UART_SetConfig+0x8b2>
 8018e32:	3b02      	subs	r3, #2
 8018e34:	2b1e      	cmp	r3, #30
 8018e36:	d872      	bhi.n	8018f1e <UART_SetConfig+0x8b2>
 8018e38:	a201      	add	r2, pc, #4	@ (adr r2, 8018e40 <UART_SetConfig+0x7d4>)
 8018e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e3e:	bf00      	nop
 8018e40:	08018ec3 	.word	0x08018ec3
 8018e44:	08018f1f 	.word	0x08018f1f
 8018e48:	08018ecb 	.word	0x08018ecb
 8018e4c:	08018f1f 	.word	0x08018f1f
 8018e50:	08018f1f 	.word	0x08018f1f
 8018e54:	08018f1f 	.word	0x08018f1f
 8018e58:	08018edb 	.word	0x08018edb
 8018e5c:	08018f1f 	.word	0x08018f1f
 8018e60:	08018f1f 	.word	0x08018f1f
 8018e64:	08018f1f 	.word	0x08018f1f
 8018e68:	08018f1f 	.word	0x08018f1f
 8018e6c:	08018f1f 	.word	0x08018f1f
 8018e70:	08018f1f 	.word	0x08018f1f
 8018e74:	08018f1f 	.word	0x08018f1f
 8018e78:	08018eeb 	.word	0x08018eeb
 8018e7c:	08018f1f 	.word	0x08018f1f
 8018e80:	08018f1f 	.word	0x08018f1f
 8018e84:	08018f1f 	.word	0x08018f1f
 8018e88:	08018f1f 	.word	0x08018f1f
 8018e8c:	08018f1f 	.word	0x08018f1f
 8018e90:	08018f1f 	.word	0x08018f1f
 8018e94:	08018f1f 	.word	0x08018f1f
 8018e98:	08018f1f 	.word	0x08018f1f
 8018e9c:	08018f1f 	.word	0x08018f1f
 8018ea0:	08018f1f 	.word	0x08018f1f
 8018ea4:	08018f1f 	.word	0x08018f1f
 8018ea8:	08018f1f 	.word	0x08018f1f
 8018eac:	08018f1f 	.word	0x08018f1f
 8018eb0:	08018f1f 	.word	0x08018f1f
 8018eb4:	08018f1f 	.word	0x08018f1f
 8018eb8:	08018f11 	.word	0x08018f11
 8018ebc:	2b40      	cmp	r3, #64	@ 0x40
 8018ebe:	d02a      	beq.n	8018f16 <UART_SetConfig+0x8aa>
 8018ec0:	e02d      	b.n	8018f1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018ec2:	f7fa fd8b 	bl	80139dc <HAL_RCCEx_GetD3PCLK1Freq>
 8018ec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018ec8:	e02f      	b.n	8018f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7fa fd9a 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018ed8:	e027      	b.n	8018f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018eda:	f107 0318 	add.w	r3, r7, #24
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f7fa fee6 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018ee4:	69fb      	ldr	r3, [r7, #28]
 8018ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018ee8:	e01f      	b.n	8018f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018eea:	4b21      	ldr	r3, [pc, #132]	@ (8018f70 <UART_SetConfig+0x904>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f003 0320 	and.w	r3, r3, #32
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d009      	beq.n	8018f0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8018f70 <UART_SetConfig+0x904>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	08db      	lsrs	r3, r3, #3
 8018efc:	f003 0303 	and.w	r3, r3, #3
 8018f00:	4a1d      	ldr	r2, [pc, #116]	@ (8018f78 <UART_SetConfig+0x90c>)
 8018f02:	fa22 f303 	lsr.w	r3, r2, r3
 8018f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018f08:	e00f      	b.n	8018f2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8018f78 <UART_SetConfig+0x90c>)
 8018f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f0e:	e00c      	b.n	8018f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018f10:	4b1a      	ldr	r3, [pc, #104]	@ (8018f7c <UART_SetConfig+0x910>)
 8018f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f14:	e009      	b.n	8018f2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f1c:	e005      	b.n	8018f2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018f22:	2301      	movs	r3, #1
 8018f24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018f28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	f000 81ee 	beq.w	801930e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f36:	4a12      	ldr	r2, [pc, #72]	@ (8018f80 <UART_SetConfig+0x914>)
 8018f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8018f44:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f46:	697b      	ldr	r3, [r7, #20]
 8018f48:	685a      	ldr	r2, [r3, #4]
 8018f4a:	4613      	mov	r3, r2
 8018f4c:	005b      	lsls	r3, r3, #1
 8018f4e:	4413      	add	r3, r2
 8018f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d305      	bcc.n	8018f62 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018f56:	697b      	ldr	r3, [r7, #20]
 8018f58:	685b      	ldr	r3, [r3, #4]
 8018f5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d910      	bls.n	8018f84 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018f62:	2301      	movs	r3, #1
 8018f64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018f68:	e1d1      	b.n	801930e <UART_SetConfig+0xca2>
 8018f6a:	bf00      	nop
 8018f6c:	40011c00 	.word	0x40011c00
 8018f70:	58024400 	.word	0x58024400
 8018f74:	58000c00 	.word	0x58000c00
 8018f78:	03d09000 	.word	0x03d09000
 8018f7c:	003d0900 	.word	0x003d0900
 8018f80:	0801e854 	.word	0x0801e854
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f86:	2200      	movs	r2, #0
 8018f88:	60bb      	str	r3, [r7, #8]
 8018f8a:	60fa      	str	r2, [r7, #12]
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f90:	4ac0      	ldr	r2, [pc, #768]	@ (8019294 <UART_SetConfig+0xc28>)
 8018f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f96:	b29b      	uxth	r3, r3
 8018f98:	2200      	movs	r2, #0
 8018f9a:	603b      	str	r3, [r7, #0]
 8018f9c:	607a      	str	r2, [r7, #4]
 8018f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018fa6:	f7e7 fa03 	bl	80003b0 <__aeabi_uldivmod>
 8018faa:	4602      	mov	r2, r0
 8018fac:	460b      	mov	r3, r1
 8018fae:	4610      	mov	r0, r2
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	f04f 0200 	mov.w	r2, #0
 8018fb6:	f04f 0300 	mov.w	r3, #0
 8018fba:	020b      	lsls	r3, r1, #8
 8018fbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018fc0:	0202      	lsls	r2, r0, #8
 8018fc2:	6979      	ldr	r1, [r7, #20]
 8018fc4:	6849      	ldr	r1, [r1, #4]
 8018fc6:	0849      	lsrs	r1, r1, #1
 8018fc8:	2000      	movs	r0, #0
 8018fca:	460c      	mov	r4, r1
 8018fcc:	4605      	mov	r5, r0
 8018fce:	eb12 0804 	adds.w	r8, r2, r4
 8018fd2:	eb43 0905 	adc.w	r9, r3, r5
 8018fd6:	697b      	ldr	r3, [r7, #20]
 8018fd8:	685b      	ldr	r3, [r3, #4]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	469a      	mov	sl, r3
 8018fde:	4693      	mov	fp, r2
 8018fe0:	4652      	mov	r2, sl
 8018fe2:	465b      	mov	r3, fp
 8018fe4:	4640      	mov	r0, r8
 8018fe6:	4649      	mov	r1, r9
 8018fe8:	f7e7 f9e2 	bl	80003b0 <__aeabi_uldivmod>
 8018fec:	4602      	mov	r2, r0
 8018fee:	460b      	mov	r3, r1
 8018ff0:	4613      	mov	r3, r2
 8018ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018ffa:	d308      	bcc.n	801900e <UART_SetConfig+0x9a2>
 8018ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019002:	d204      	bcs.n	801900e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8019004:	697b      	ldr	r3, [r7, #20]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801900a:	60da      	str	r2, [r3, #12]
 801900c:	e17f      	b.n	801930e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801900e:	2301      	movs	r3, #1
 8019010:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019014:	e17b      	b.n	801930e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019016:	697b      	ldr	r3, [r7, #20]
 8019018:	69db      	ldr	r3, [r3, #28]
 801901a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801901e:	f040 80bd 	bne.w	801919c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8019022:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019026:	2b20      	cmp	r3, #32
 8019028:	dc48      	bgt.n	80190bc <UART_SetConfig+0xa50>
 801902a:	2b00      	cmp	r3, #0
 801902c:	db7b      	blt.n	8019126 <UART_SetConfig+0xaba>
 801902e:	2b20      	cmp	r3, #32
 8019030:	d879      	bhi.n	8019126 <UART_SetConfig+0xaba>
 8019032:	a201      	add	r2, pc, #4	@ (adr r2, 8019038 <UART_SetConfig+0x9cc>)
 8019034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019038:	080190c3 	.word	0x080190c3
 801903c:	080190cb 	.word	0x080190cb
 8019040:	08019127 	.word	0x08019127
 8019044:	08019127 	.word	0x08019127
 8019048:	080190d3 	.word	0x080190d3
 801904c:	08019127 	.word	0x08019127
 8019050:	08019127 	.word	0x08019127
 8019054:	08019127 	.word	0x08019127
 8019058:	080190e3 	.word	0x080190e3
 801905c:	08019127 	.word	0x08019127
 8019060:	08019127 	.word	0x08019127
 8019064:	08019127 	.word	0x08019127
 8019068:	08019127 	.word	0x08019127
 801906c:	08019127 	.word	0x08019127
 8019070:	08019127 	.word	0x08019127
 8019074:	08019127 	.word	0x08019127
 8019078:	080190f3 	.word	0x080190f3
 801907c:	08019127 	.word	0x08019127
 8019080:	08019127 	.word	0x08019127
 8019084:	08019127 	.word	0x08019127
 8019088:	08019127 	.word	0x08019127
 801908c:	08019127 	.word	0x08019127
 8019090:	08019127 	.word	0x08019127
 8019094:	08019127 	.word	0x08019127
 8019098:	08019127 	.word	0x08019127
 801909c:	08019127 	.word	0x08019127
 80190a0:	08019127 	.word	0x08019127
 80190a4:	08019127 	.word	0x08019127
 80190a8:	08019127 	.word	0x08019127
 80190ac:	08019127 	.word	0x08019127
 80190b0:	08019127 	.word	0x08019127
 80190b4:	08019127 	.word	0x08019127
 80190b8:	08019119 	.word	0x08019119
 80190bc:	2b40      	cmp	r3, #64	@ 0x40
 80190be:	d02e      	beq.n	801911e <UART_SetConfig+0xab2>
 80190c0:	e031      	b.n	8019126 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80190c2:	f7f8 fded 	bl	8011ca0 <HAL_RCC_GetPCLK1Freq>
 80190c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80190c8:	e033      	b.n	8019132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80190ca:	f7f8 fdff 	bl	8011ccc <HAL_RCC_GetPCLK2Freq>
 80190ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80190d0:	e02f      	b.n	8019132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80190d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7fa fc96 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80190dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80190e0:	e027      	b.n	8019132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80190e2:	f107 0318 	add.w	r3, r7, #24
 80190e6:	4618      	mov	r0, r3
 80190e8:	f7fa fde2 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80190ec:	69fb      	ldr	r3, [r7, #28]
 80190ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80190f0:	e01f      	b.n	8019132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80190f2:	4b69      	ldr	r3, [pc, #420]	@ (8019298 <UART_SetConfig+0xc2c>)
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	f003 0320 	and.w	r3, r3, #32
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d009      	beq.n	8019112 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80190fe:	4b66      	ldr	r3, [pc, #408]	@ (8019298 <UART_SetConfig+0xc2c>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	08db      	lsrs	r3, r3, #3
 8019104:	f003 0303 	and.w	r3, r3, #3
 8019108:	4a64      	ldr	r2, [pc, #400]	@ (801929c <UART_SetConfig+0xc30>)
 801910a:	fa22 f303 	lsr.w	r3, r2, r3
 801910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019110:	e00f      	b.n	8019132 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8019112:	4b62      	ldr	r3, [pc, #392]	@ (801929c <UART_SetConfig+0xc30>)
 8019114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019116:	e00c      	b.n	8019132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019118:	4b61      	ldr	r3, [pc, #388]	@ (80192a0 <UART_SetConfig+0xc34>)
 801911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801911c:	e009      	b.n	8019132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801911e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019124:	e005      	b.n	8019132 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8019126:	2300      	movs	r3, #0
 8019128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801912a:	2301      	movs	r3, #1
 801912c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019134:	2b00      	cmp	r3, #0
 8019136:	f000 80ea 	beq.w	801930e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801913e:	4a55      	ldr	r2, [pc, #340]	@ (8019294 <UART_SetConfig+0xc28>)
 8019140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019144:	461a      	mov	r2, r3
 8019146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019148:	fbb3 f3f2 	udiv	r3, r3, r2
 801914c:	005a      	lsls	r2, r3, #1
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	085b      	lsrs	r3, r3, #1
 8019154:	441a      	add	r2, r3
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	685b      	ldr	r3, [r3, #4]
 801915a:	fbb2 f3f3 	udiv	r3, r2, r3
 801915e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019162:	2b0f      	cmp	r3, #15
 8019164:	d916      	bls.n	8019194 <UART_SetConfig+0xb28>
 8019166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801916c:	d212      	bcs.n	8019194 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019170:	b29b      	uxth	r3, r3
 8019172:	f023 030f 	bic.w	r3, r3, #15
 8019176:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801917a:	085b      	lsrs	r3, r3, #1
 801917c:	b29b      	uxth	r3, r3
 801917e:	f003 0307 	and.w	r3, r3, #7
 8019182:	b29a      	uxth	r2, r3
 8019184:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019186:	4313      	orrs	r3, r2
 8019188:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801918a:	697b      	ldr	r3, [r7, #20]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019190:	60da      	str	r2, [r3, #12]
 8019192:	e0bc      	b.n	801930e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019194:	2301      	movs	r3, #1
 8019196:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801919a:	e0b8      	b.n	801930e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801919c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80191a0:	2b20      	cmp	r3, #32
 80191a2:	dc4b      	bgt.n	801923c <UART_SetConfig+0xbd0>
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	f2c0 8087 	blt.w	80192b8 <UART_SetConfig+0xc4c>
 80191aa:	2b20      	cmp	r3, #32
 80191ac:	f200 8084 	bhi.w	80192b8 <UART_SetConfig+0xc4c>
 80191b0:	a201      	add	r2, pc, #4	@ (adr r2, 80191b8 <UART_SetConfig+0xb4c>)
 80191b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191b6:	bf00      	nop
 80191b8:	08019243 	.word	0x08019243
 80191bc:	0801924b 	.word	0x0801924b
 80191c0:	080192b9 	.word	0x080192b9
 80191c4:	080192b9 	.word	0x080192b9
 80191c8:	08019253 	.word	0x08019253
 80191cc:	080192b9 	.word	0x080192b9
 80191d0:	080192b9 	.word	0x080192b9
 80191d4:	080192b9 	.word	0x080192b9
 80191d8:	08019263 	.word	0x08019263
 80191dc:	080192b9 	.word	0x080192b9
 80191e0:	080192b9 	.word	0x080192b9
 80191e4:	080192b9 	.word	0x080192b9
 80191e8:	080192b9 	.word	0x080192b9
 80191ec:	080192b9 	.word	0x080192b9
 80191f0:	080192b9 	.word	0x080192b9
 80191f4:	080192b9 	.word	0x080192b9
 80191f8:	08019273 	.word	0x08019273
 80191fc:	080192b9 	.word	0x080192b9
 8019200:	080192b9 	.word	0x080192b9
 8019204:	080192b9 	.word	0x080192b9
 8019208:	080192b9 	.word	0x080192b9
 801920c:	080192b9 	.word	0x080192b9
 8019210:	080192b9 	.word	0x080192b9
 8019214:	080192b9 	.word	0x080192b9
 8019218:	080192b9 	.word	0x080192b9
 801921c:	080192b9 	.word	0x080192b9
 8019220:	080192b9 	.word	0x080192b9
 8019224:	080192b9 	.word	0x080192b9
 8019228:	080192b9 	.word	0x080192b9
 801922c:	080192b9 	.word	0x080192b9
 8019230:	080192b9 	.word	0x080192b9
 8019234:	080192b9 	.word	0x080192b9
 8019238:	080192ab 	.word	0x080192ab
 801923c:	2b40      	cmp	r3, #64	@ 0x40
 801923e:	d037      	beq.n	80192b0 <UART_SetConfig+0xc44>
 8019240:	e03a      	b.n	80192b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019242:	f7f8 fd2d 	bl	8011ca0 <HAL_RCC_GetPCLK1Freq>
 8019246:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019248:	e03c      	b.n	80192c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801924a:	f7f8 fd3f 	bl	8011ccc <HAL_RCC_GetPCLK2Freq>
 801924e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019250:	e038      	b.n	80192c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019256:	4618      	mov	r0, r3
 8019258:	f7fa fbd6 	bl	8013a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801925c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019260:	e030      	b.n	80192c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019262:	f107 0318 	add.w	r3, r7, #24
 8019266:	4618      	mov	r0, r3
 8019268:	f7fa fd22 	bl	8013cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801926c:	69fb      	ldr	r3, [r7, #28]
 801926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019270:	e028      	b.n	80192c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019272:	4b09      	ldr	r3, [pc, #36]	@ (8019298 <UART_SetConfig+0xc2c>)
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f003 0320 	and.w	r3, r3, #32
 801927a:	2b00      	cmp	r3, #0
 801927c:	d012      	beq.n	80192a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801927e:	4b06      	ldr	r3, [pc, #24]	@ (8019298 <UART_SetConfig+0xc2c>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	08db      	lsrs	r3, r3, #3
 8019284:	f003 0303 	and.w	r3, r3, #3
 8019288:	4a04      	ldr	r2, [pc, #16]	@ (801929c <UART_SetConfig+0xc30>)
 801928a:	fa22 f303 	lsr.w	r3, r2, r3
 801928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019290:	e018      	b.n	80192c4 <UART_SetConfig+0xc58>
 8019292:	bf00      	nop
 8019294:	0801e854 	.word	0x0801e854
 8019298:	58024400 	.word	0x58024400
 801929c:	03d09000 	.word	0x03d09000
 80192a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80192a4:	4b24      	ldr	r3, [pc, #144]	@ (8019338 <UART_SetConfig+0xccc>)
 80192a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192a8:	e00c      	b.n	80192c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80192aa:	4b24      	ldr	r3, [pc, #144]	@ (801933c <UART_SetConfig+0xcd0>)
 80192ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192ae:	e009      	b.n	80192c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80192b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192b6:	e005      	b.n	80192c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80192b8:	2300      	movs	r3, #0
 80192ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80192bc:	2301      	movs	r3, #1
 80192be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80192c2:	bf00      	nop
    }

    if (pclk != 0U)
 80192c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d021      	beq.n	801930e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192ce:	4a1c      	ldr	r2, [pc, #112]	@ (8019340 <UART_SetConfig+0xcd4>)
 80192d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192d4:	461a      	mov	r2, r3
 80192d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80192dc:	697b      	ldr	r3, [r7, #20]
 80192de:	685b      	ldr	r3, [r3, #4]
 80192e0:	085b      	lsrs	r3, r3, #1
 80192e2:	441a      	add	r2, r3
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	685b      	ldr	r3, [r3, #4]
 80192e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80192ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80192ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192f0:	2b0f      	cmp	r3, #15
 80192f2:	d909      	bls.n	8019308 <UART_SetConfig+0xc9c>
 80192f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80192fa:	d205      	bcs.n	8019308 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80192fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192fe:	b29a      	uxth	r2, r3
 8019300:	697b      	ldr	r3, [r7, #20]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	60da      	str	r2, [r3, #12]
 8019306:	e002      	b.n	801930e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019308:	2301      	movs	r3, #1
 801930a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	2201      	movs	r2, #1
 8019312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019316:	697b      	ldr	r3, [r7, #20]
 8019318:	2201      	movs	r2, #1
 801931a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	2200      	movs	r2, #0
 8019322:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019324:	697b      	ldr	r3, [r7, #20]
 8019326:	2200      	movs	r2, #0
 8019328:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801932a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801932e:	4618      	mov	r0, r3
 8019330:	3748      	adds	r7, #72	@ 0x48
 8019332:	46bd      	mov	sp, r7
 8019334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019338:	03d09000 	.word	0x03d09000
 801933c:	003d0900 	.word	0x003d0900
 8019340:	0801e854 	.word	0x0801e854

08019344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019350:	f003 0308 	and.w	r3, r3, #8
 8019354:	2b00      	cmp	r3, #0
 8019356:	d00a      	beq.n	801936e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	430a      	orrs	r2, r1
 801936c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019372:	f003 0301 	and.w	r3, r3, #1
 8019376:	2b00      	cmp	r3, #0
 8019378:	d00a      	beq.n	8019390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	430a      	orrs	r2, r1
 801938e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019394:	f003 0302 	and.w	r3, r3, #2
 8019398:	2b00      	cmp	r3, #0
 801939a:	d00a      	beq.n	80193b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	685b      	ldr	r3, [r3, #4]
 80193a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	430a      	orrs	r2, r1
 80193b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193b6:	f003 0304 	and.w	r3, r3, #4
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d00a      	beq.n	80193d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	685b      	ldr	r3, [r3, #4]
 80193c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	430a      	orrs	r2, r1
 80193d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193d8:	f003 0310 	and.w	r3, r3, #16
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d00a      	beq.n	80193f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	689b      	ldr	r3, [r3, #8]
 80193e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	430a      	orrs	r2, r1
 80193f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193fa:	f003 0320 	and.w	r3, r3, #32
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d00a      	beq.n	8019418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	689b      	ldr	r3, [r3, #8]
 8019408:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	430a      	orrs	r2, r1
 8019416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801941c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019420:	2b00      	cmp	r3, #0
 8019422:	d01a      	beq.n	801945a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	685b      	ldr	r3, [r3, #4]
 801942a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	430a      	orrs	r2, r1
 8019438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801943e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019442:	d10a      	bne.n	801945a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	685b      	ldr	r3, [r3, #4]
 801944a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	430a      	orrs	r2, r1
 8019458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801945e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019462:	2b00      	cmp	r3, #0
 8019464:	d00a      	beq.n	801947c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	430a      	orrs	r2, r1
 801947a:	605a      	str	r2, [r3, #4]
  }
}
 801947c:	bf00      	nop
 801947e:	370c      	adds	r7, #12
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr

08019488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b098      	sub	sp, #96	@ 0x60
 801948c:	af02      	add	r7, sp, #8
 801948e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2200      	movs	r2, #0
 8019494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019498:	f7ef fe94 	bl	80091c4 <HAL_GetTick>
 801949c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	f003 0308 	and.w	r3, r3, #8
 80194a8:	2b08      	cmp	r3, #8
 80194aa:	d12f      	bne.n	801950c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80194ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80194b0:	9300      	str	r3, [sp, #0]
 80194b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194b4:	2200      	movs	r2, #0
 80194b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f000 f88e 	bl	80195dc <UART_WaitOnFlagUntilTimeout>
 80194c0:	4603      	mov	r3, r0
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d022      	beq.n	801950c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194ce:	e853 3f00 	ldrex	r3, [r3]
 80194d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80194d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80194da:	653b      	str	r3, [r7, #80]	@ 0x50
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	461a      	mov	r2, r3
 80194e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80194e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80194ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80194ec:	e841 2300 	strex	r3, r2, [r1]
 80194f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80194f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d1e6      	bne.n	80194c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	2220      	movs	r2, #32
 80194fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	2200      	movs	r2, #0
 8019504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019508:	2303      	movs	r3, #3
 801950a:	e063      	b.n	80195d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f003 0304 	and.w	r3, r3, #4
 8019516:	2b04      	cmp	r3, #4
 8019518:	d149      	bne.n	80195ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801951a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801951e:	9300      	str	r3, [sp, #0]
 8019520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019522:	2200      	movs	r2, #0
 8019524:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f000 f857 	bl	80195dc <UART_WaitOnFlagUntilTimeout>
 801952e:	4603      	mov	r3, r0
 8019530:	2b00      	cmp	r3, #0
 8019532:	d03c      	beq.n	80195ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801953c:	e853 3f00 	ldrex	r3, [r3]
 8019540:	623b      	str	r3, [r7, #32]
   return(result);
 8019542:	6a3b      	ldr	r3, [r7, #32]
 8019544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	461a      	mov	r2, r3
 8019550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019552:	633b      	str	r3, [r7, #48]	@ 0x30
 8019554:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801955a:	e841 2300 	strex	r3, r2, [r1]
 801955e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019562:	2b00      	cmp	r3, #0
 8019564:	d1e6      	bne.n	8019534 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	3308      	adds	r3, #8
 801956c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801956e:	693b      	ldr	r3, [r7, #16]
 8019570:	e853 3f00 	ldrex	r3, [r3]
 8019574:	60fb      	str	r3, [r7, #12]
   return(result);
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	f023 0301 	bic.w	r3, r3, #1
 801957c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	3308      	adds	r3, #8
 8019584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019586:	61fa      	str	r2, [r7, #28]
 8019588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801958a:	69b9      	ldr	r1, [r7, #24]
 801958c:	69fa      	ldr	r2, [r7, #28]
 801958e:	e841 2300 	strex	r3, r2, [r1]
 8019592:	617b      	str	r3, [r7, #20]
   return(result);
 8019594:	697b      	ldr	r3, [r7, #20]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d1e5      	bne.n	8019566 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	2220      	movs	r2, #32
 801959e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	2200      	movs	r2, #0
 80195a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80195aa:	2303      	movs	r3, #3
 80195ac:	e012      	b.n	80195d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	2220      	movs	r2, #32
 80195b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2220      	movs	r2, #32
 80195ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	2200      	movs	r2, #0
 80195c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	2200      	movs	r2, #0
 80195c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2200      	movs	r2, #0
 80195ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80195d2:	2300      	movs	r3, #0
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3758      	adds	r7, #88	@ 0x58
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd80      	pop	{r7, pc}

080195dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b084      	sub	sp, #16
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	60f8      	str	r0, [r7, #12]
 80195e4:	60b9      	str	r1, [r7, #8]
 80195e6:	603b      	str	r3, [r7, #0]
 80195e8:	4613      	mov	r3, r2
 80195ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80195ec:	e04f      	b.n	801968e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80195ee:	69bb      	ldr	r3, [r7, #24]
 80195f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195f4:	d04b      	beq.n	801968e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80195f6:	f7ef fde5 	bl	80091c4 <HAL_GetTick>
 80195fa:	4602      	mov	r2, r0
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	1ad3      	subs	r3, r2, r3
 8019600:	69ba      	ldr	r2, [r7, #24]
 8019602:	429a      	cmp	r2, r3
 8019604:	d302      	bcc.n	801960c <UART_WaitOnFlagUntilTimeout+0x30>
 8019606:	69bb      	ldr	r3, [r7, #24]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d101      	bne.n	8019610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801960c:	2303      	movs	r3, #3
 801960e:	e04e      	b.n	80196ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f003 0304 	and.w	r3, r3, #4
 801961a:	2b00      	cmp	r3, #0
 801961c:	d037      	beq.n	801968e <UART_WaitOnFlagUntilTimeout+0xb2>
 801961e:	68bb      	ldr	r3, [r7, #8]
 8019620:	2b80      	cmp	r3, #128	@ 0x80
 8019622:	d034      	beq.n	801968e <UART_WaitOnFlagUntilTimeout+0xb2>
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	2b40      	cmp	r3, #64	@ 0x40
 8019628:	d031      	beq.n	801968e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	69db      	ldr	r3, [r3, #28]
 8019630:	f003 0308 	and.w	r3, r3, #8
 8019634:	2b08      	cmp	r3, #8
 8019636:	d110      	bne.n	801965a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	2208      	movs	r2, #8
 801963e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019640:	68f8      	ldr	r0, [r7, #12]
 8019642:	f000 f95b 	bl	80198fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	2208      	movs	r2, #8
 801964a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	2200      	movs	r2, #0
 8019652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019656:	2301      	movs	r3, #1
 8019658:	e029      	b.n	80196ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	69db      	ldr	r3, [r3, #28]
 8019660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019668:	d111      	bne.n	801968e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019674:	68f8      	ldr	r0, [r7, #12]
 8019676:	f000 f941 	bl	80198fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	2220      	movs	r2, #32
 801967e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	2200      	movs	r2, #0
 8019686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801968a:	2303      	movs	r3, #3
 801968c:	e00f      	b.n	80196ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	69da      	ldr	r2, [r3, #28]
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	4013      	ands	r3, r2
 8019698:	68ba      	ldr	r2, [r7, #8]
 801969a:	429a      	cmp	r2, r3
 801969c:	bf0c      	ite	eq
 801969e:	2301      	moveq	r3, #1
 80196a0:	2300      	movne	r3, #0
 80196a2:	b2db      	uxtb	r3, r3
 80196a4:	461a      	mov	r2, r3
 80196a6:	79fb      	ldrb	r3, [r7, #7]
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d0a0      	beq.n	80195ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80196ac:	2300      	movs	r3, #0
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	3710      	adds	r7, #16
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}
	...

080196b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80196b8:	b480      	push	{r7}
 80196ba:	b0a3      	sub	sp, #140	@ 0x8c
 80196bc:	af00      	add	r7, sp, #0
 80196be:	60f8      	str	r0, [r7, #12]
 80196c0:	60b9      	str	r1, [r7, #8]
 80196c2:	4613      	mov	r3, r2
 80196c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	68ba      	ldr	r2, [r7, #8]
 80196ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	88fa      	ldrh	r2, [r7, #6]
 80196d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	88fa      	ldrh	r2, [r7, #6]
 80196d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2200      	movs	r2, #0
 80196e0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	689b      	ldr	r3, [r3, #8]
 80196e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80196ea:	d10e      	bne.n	801970a <UART_Start_Receive_IT+0x52>
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	691b      	ldr	r3, [r3, #16]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d105      	bne.n	8019700 <UART_Start_Receive_IT+0x48>
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80196fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80196fe:	e02d      	b.n	801975c <UART_Start_Receive_IT+0xa4>
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	22ff      	movs	r2, #255	@ 0xff
 8019704:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019708:	e028      	b.n	801975c <UART_Start_Receive_IT+0xa4>
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	689b      	ldr	r3, [r3, #8]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d10d      	bne.n	801972e <UART_Start_Receive_IT+0x76>
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	691b      	ldr	r3, [r3, #16]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d104      	bne.n	8019724 <UART_Start_Receive_IT+0x6c>
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	22ff      	movs	r2, #255	@ 0xff
 801971e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019722:	e01b      	b.n	801975c <UART_Start_Receive_IT+0xa4>
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	227f      	movs	r2, #127	@ 0x7f
 8019728:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801972c:	e016      	b.n	801975c <UART_Start_Receive_IT+0xa4>
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	689b      	ldr	r3, [r3, #8]
 8019732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019736:	d10d      	bne.n	8019754 <UART_Start_Receive_IT+0x9c>
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	691b      	ldr	r3, [r3, #16]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d104      	bne.n	801974a <UART_Start_Receive_IT+0x92>
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	227f      	movs	r2, #127	@ 0x7f
 8019744:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019748:	e008      	b.n	801975c <UART_Start_Receive_IT+0xa4>
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	223f      	movs	r2, #63	@ 0x3f
 801974e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019752:	e003      	b.n	801975c <UART_Start_Receive_IT+0xa4>
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	2200      	movs	r2, #0
 8019758:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	2200      	movs	r2, #0
 8019760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	2222      	movs	r2, #34	@ 0x22
 8019768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	3308      	adds	r3, #8
 8019772:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019776:	e853 3f00 	ldrex	r3, [r3]
 801977a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801977c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801977e:	f043 0301 	orr.w	r3, r3, #1
 8019782:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	3308      	adds	r3, #8
 801978c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019790:	673a      	str	r2, [r7, #112]	@ 0x70
 8019792:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019794:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019796:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019798:	e841 2300 	strex	r3, r2, [r1]
 801979c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801979e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d1e3      	bne.n	801976c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80197a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80197ac:	d14f      	bne.n	801984e <UART_Start_Receive_IT+0x196>
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80197b4:	88fa      	ldrh	r2, [r7, #6]
 80197b6:	429a      	cmp	r2, r3
 80197b8:	d349      	bcc.n	801984e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	689b      	ldr	r3, [r3, #8]
 80197be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80197c2:	d107      	bne.n	80197d4 <UART_Start_Receive_IT+0x11c>
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	691b      	ldr	r3, [r3, #16]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d103      	bne.n	80197d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	4a47      	ldr	r2, [pc, #284]	@ (80198ec <UART_Start_Receive_IT+0x234>)
 80197d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80197d2:	e002      	b.n	80197da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	4a46      	ldr	r2, [pc, #280]	@ (80198f0 <UART_Start_Receive_IT+0x238>)
 80197d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	691b      	ldr	r3, [r3, #16]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d01a      	beq.n	8019818 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197ea:	e853 3f00 	ldrex	r3, [r3]
 80197ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80197f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80197f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80197f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	461a      	mov	r2, r3
 8019800:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019806:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019808:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801980a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801980c:	e841 2300 	strex	r3, r2, [r1]
 8019810:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019814:	2b00      	cmp	r3, #0
 8019816:	d1e4      	bne.n	80197e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	3308      	adds	r3, #8
 801981e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019822:	e853 3f00 	ldrex	r3, [r3]
 8019826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801982a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801982e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	3308      	adds	r3, #8
 8019836:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019838:	64ba      	str	r2, [r7, #72]	@ 0x48
 801983a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801983c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801983e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019840:	e841 2300 	strex	r3, r2, [r1]
 8019844:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019848:	2b00      	cmp	r3, #0
 801984a:	d1e5      	bne.n	8019818 <UART_Start_Receive_IT+0x160>
 801984c:	e046      	b.n	80198dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	689b      	ldr	r3, [r3, #8]
 8019852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019856:	d107      	bne.n	8019868 <UART_Start_Receive_IT+0x1b0>
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	691b      	ldr	r3, [r3, #16]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d103      	bne.n	8019868 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	4a24      	ldr	r2, [pc, #144]	@ (80198f4 <UART_Start_Receive_IT+0x23c>)
 8019864:	675a      	str	r2, [r3, #116]	@ 0x74
 8019866:	e002      	b.n	801986e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	4a23      	ldr	r2, [pc, #140]	@ (80198f8 <UART_Start_Receive_IT+0x240>)
 801986c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	691b      	ldr	r3, [r3, #16]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d019      	beq.n	80198aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801987c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801987e:	e853 3f00 	ldrex	r3, [r3]
 8019882:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019886:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801988a:	677b      	str	r3, [r7, #116]	@ 0x74
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	461a      	mov	r2, r3
 8019892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019894:	637b      	str	r3, [r7, #52]	@ 0x34
 8019896:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019898:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801989a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801989c:	e841 2300 	strex	r3, r2, [r1]
 80198a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80198a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1e6      	bne.n	8019876 <UART_Start_Receive_IT+0x1be>
 80198a8:	e018      	b.n	80198dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198b0:	697b      	ldr	r3, [r7, #20]
 80198b2:	e853 3f00 	ldrex	r3, [r3]
 80198b6:	613b      	str	r3, [r7, #16]
   return(result);
 80198b8:	693b      	ldr	r3, [r7, #16]
 80198ba:	f043 0320 	orr.w	r3, r3, #32
 80198be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	461a      	mov	r2, r3
 80198c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80198c8:	623b      	str	r3, [r7, #32]
 80198ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198cc:	69f9      	ldr	r1, [r7, #28]
 80198ce:	6a3a      	ldr	r2, [r7, #32]
 80198d0:	e841 2300 	strex	r3, r2, [r1]
 80198d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80198d6:	69bb      	ldr	r3, [r7, #24]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d1e6      	bne.n	80198aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80198dc:	2300      	movs	r3, #0
}
 80198de:	4618      	mov	r0, r3
 80198e0:	378c      	adds	r7, #140	@ 0x8c
 80198e2:	46bd      	mov	sp, r7
 80198e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	0801a45d 	.word	0x0801a45d
 80198f0:	0801a0f9 	.word	0x0801a0f9
 80198f4:	08019f41 	.word	0x08019f41
 80198f8:	08019d89 	.word	0x08019d89

080198fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80198fc:	b480      	push	{r7}
 80198fe:	b095      	sub	sp, #84	@ 0x54
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801990c:	e853 3f00 	ldrex	r3, [r3]
 8019910:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	461a      	mov	r2, r3
 8019920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019922:	643b      	str	r3, [r7, #64]	@ 0x40
 8019924:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019926:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019928:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801992a:	e841 2300 	strex	r3, r2, [r1]
 801992e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019932:	2b00      	cmp	r3, #0
 8019934:	d1e6      	bne.n	8019904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	3308      	adds	r3, #8
 801993c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801993e:	6a3b      	ldr	r3, [r7, #32]
 8019940:	e853 3f00 	ldrex	r3, [r3]
 8019944:	61fb      	str	r3, [r7, #28]
   return(result);
 8019946:	69fa      	ldr	r2, [r7, #28]
 8019948:	4b1e      	ldr	r3, [pc, #120]	@ (80199c4 <UART_EndRxTransfer+0xc8>)
 801994a:	4013      	ands	r3, r2
 801994c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	3308      	adds	r3, #8
 8019954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019958:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801995a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801995c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801995e:	e841 2300 	strex	r3, r2, [r1]
 8019962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1e5      	bne.n	8019936 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801996e:	2b01      	cmp	r3, #1
 8019970:	d118      	bne.n	80199a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	e853 3f00 	ldrex	r3, [r3]
 801997e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019980:	68bb      	ldr	r3, [r7, #8]
 8019982:	f023 0310 	bic.w	r3, r3, #16
 8019986:	647b      	str	r3, [r7, #68]	@ 0x44
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	461a      	mov	r2, r3
 801998e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019990:	61bb      	str	r3, [r7, #24]
 8019992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019994:	6979      	ldr	r1, [r7, #20]
 8019996:	69ba      	ldr	r2, [r7, #24]
 8019998:	e841 2300 	strex	r3, r2, [r1]
 801999c:	613b      	str	r3, [r7, #16]
   return(result);
 801999e:	693b      	ldr	r3, [r7, #16]
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d1e6      	bne.n	8019972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	2220      	movs	r2, #32
 80199a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2200      	movs	r2, #0
 80199b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	2200      	movs	r2, #0
 80199b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80199b8:	bf00      	nop
 80199ba:	3754      	adds	r7, #84	@ 0x54
 80199bc:	46bd      	mov	sp, r7
 80199be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c2:	4770      	bx	lr
 80199c4:	effffffe 	.word	0xeffffffe

080199c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b084      	sub	sp, #16
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80199d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	2200      	movs	r2, #0
 80199da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80199de:	68f8      	ldr	r0, [r7, #12]
 80199e0:	f7fe fe2e 	bl	8018640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80199e4:	bf00      	nop
 80199e6:	3710      	adds	r7, #16
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}

080199ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80199ec:	b480      	push	{r7}
 80199ee:	b08f      	sub	sp, #60	@ 0x3c
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80199fa:	2b21      	cmp	r3, #33	@ 0x21
 80199fc:	d14c      	bne.n	8019a98 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a04:	b29b      	uxth	r3, r3
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d132      	bne.n	8019a70 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a10:	6a3b      	ldr	r3, [r7, #32]
 8019a12:	e853 3f00 	ldrex	r3, [r3]
 8019a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8019a18:	69fb      	ldr	r3, [r7, #28]
 8019a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	461a      	mov	r2, r3
 8019a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019a30:	e841 2300 	strex	r3, r2, [r1]
 8019a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1e6      	bne.n	8019a0a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	e853 3f00 	ldrex	r3, [r3]
 8019a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	461a      	mov	r2, r3
 8019a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a5a:	61bb      	str	r3, [r7, #24]
 8019a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a5e:	6979      	ldr	r1, [r7, #20]
 8019a60:	69ba      	ldr	r2, [r7, #24]
 8019a62:	e841 2300 	strex	r3, r2, [r1]
 8019a66:	613b      	str	r3, [r7, #16]
   return(result);
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d1e6      	bne.n	8019a3c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019a6e:	e013      	b.n	8019a98 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a74:	781a      	ldrb	r2, [r3, #0]
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a80:	1c5a      	adds	r2, r3, #1
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a8c:	b29b      	uxth	r3, r3
 8019a8e:	3b01      	subs	r3, #1
 8019a90:	b29a      	uxth	r2, r3
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019a98:	bf00      	nop
 8019a9a:	373c      	adds	r7, #60	@ 0x3c
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa2:	4770      	bx	lr

08019aa4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019aa4:	b480      	push	{r7}
 8019aa6:	b091      	sub	sp, #68	@ 0x44
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019ab2:	2b21      	cmp	r3, #33	@ 0x21
 8019ab4:	d151      	bne.n	8019b5a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d132      	bne.n	8019b28 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aca:	e853 3f00 	ldrex	r3, [r3]
 8019ace:	623b      	str	r3, [r7, #32]
   return(result);
 8019ad0:	6a3b      	ldr	r3, [r7, #32]
 8019ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	461a      	mov	r2, r3
 8019ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ae8:	e841 2300 	strex	r3, r2, [r1]
 8019aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d1e6      	bne.n	8019ac2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019afa:	693b      	ldr	r3, [r7, #16]
 8019afc:	e853 3f00 	ldrex	r3, [r3]
 8019b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	461a      	mov	r2, r3
 8019b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b12:	61fb      	str	r3, [r7, #28]
 8019b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b16:	69b9      	ldr	r1, [r7, #24]
 8019b18:	69fa      	ldr	r2, [r7, #28]
 8019b1a:	e841 2300 	strex	r3, r2, [r1]
 8019b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d1e6      	bne.n	8019af4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019b26:	e018      	b.n	8019b5a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b30:	881b      	ldrh	r3, [r3, #0]
 8019b32:	461a      	mov	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019b3c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b42:	1c9a      	adds	r2, r3, #2
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	3b01      	subs	r3, #1
 8019b52:	b29a      	uxth	r2, r3
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019b5a:	bf00      	nop
 8019b5c:	3744      	adds	r7, #68	@ 0x44
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b64:	4770      	bx	lr

08019b66 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b66:	b480      	push	{r7}
 8019b68:	b091      	sub	sp, #68	@ 0x44
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b74:	2b21      	cmp	r3, #33	@ 0x21
 8019b76:	d160      	bne.n	8019c3a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019b7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019b80:	e057      	b.n	8019c32 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d133      	bne.n	8019bf6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	3308      	adds	r3, #8
 8019b94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b98:	e853 3f00 	ldrex	r3, [r3]
 8019b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8019b9e:	6a3b      	ldr	r3, [r7, #32]
 8019ba0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	3308      	adds	r3, #8
 8019bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019bae:	633a      	str	r2, [r7, #48]	@ 0x30
 8019bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019bb6:	e841 2300 	strex	r3, r2, [r1]
 8019bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d1e5      	bne.n	8019b8e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	e853 3f00 	ldrex	r3, [r3]
 8019bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	461a      	mov	r2, r3
 8019bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019be0:	61fb      	str	r3, [r7, #28]
 8019be2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019be4:	69b9      	ldr	r1, [r7, #24]
 8019be6:	69fa      	ldr	r2, [r7, #28]
 8019be8:	e841 2300 	strex	r3, r2, [r1]
 8019bec:	617b      	str	r3, [r7, #20]
   return(result);
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d1e6      	bne.n	8019bc2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019bf4:	e021      	b.n	8019c3a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	69db      	ldr	r3, [r3, #28]
 8019bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d013      	beq.n	8019c2c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c08:	781a      	ldrb	r2, [r3, #0]
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c14:	1c5a      	adds	r2, r3, #1
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	3b01      	subs	r3, #1
 8019c24:	b29a      	uxth	r2, r3
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019c2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c2e:	3b01      	subs	r3, #1
 8019c30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d1a4      	bne.n	8019b82 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019c38:	e7ff      	b.n	8019c3a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019c3a:	bf00      	nop
 8019c3c:	3744      	adds	r7, #68	@ 0x44
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr

08019c46 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019c46:	b480      	push	{r7}
 8019c48:	b091      	sub	sp, #68	@ 0x44
 8019c4a:	af00      	add	r7, sp, #0
 8019c4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019c54:	2b21      	cmp	r3, #33	@ 0x21
 8019c56:	d165      	bne.n	8019d24 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019c5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c60:	e05c      	b.n	8019d1c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c68:	b29b      	uxth	r3, r3
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d133      	bne.n	8019cd6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	3308      	adds	r3, #8
 8019c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c76:	6a3b      	ldr	r3, [r7, #32]
 8019c78:	e853 3f00 	ldrex	r3, [r3]
 8019c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8019c7e:	69fb      	ldr	r3, [r7, #28]
 8019c80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	3308      	adds	r3, #8
 8019c8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019c96:	e841 2300 	strex	r3, r2, [r1]
 8019c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d1e5      	bne.n	8019c6e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	e853 3f00 	ldrex	r3, [r3]
 8019cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8019cb0:	68bb      	ldr	r3, [r7, #8]
 8019cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019cb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cc0:	61bb      	str	r3, [r7, #24]
 8019cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cc4:	6979      	ldr	r1, [r7, #20]
 8019cc6:	69ba      	ldr	r2, [r7, #24]
 8019cc8:	e841 2300 	strex	r3, r2, [r1]
 8019ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8019cce:	693b      	ldr	r3, [r7, #16]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d1e6      	bne.n	8019ca2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019cd4:	e026      	b.n	8019d24 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	69db      	ldr	r3, [r3, #28]
 8019cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d018      	beq.n	8019d16 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cec:	881b      	ldrh	r3, [r3, #0]
 8019cee:	461a      	mov	r2, r3
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019cf8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019cfe:	1c9a      	adds	r2, r3, #2
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	3b01      	subs	r3, #1
 8019d0e:	b29a      	uxth	r2, r3
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019d16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d18:	3b01      	subs	r3, #1
 8019d1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019d1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d19f      	bne.n	8019c62 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019d22:	e7ff      	b.n	8019d24 <UART_TxISR_16BIT_FIFOEN+0xde>
 8019d24:	bf00      	nop
 8019d26:	3744      	adds	r7, #68	@ 0x44
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2e:	4770      	bx	lr

08019d30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b088      	sub	sp, #32
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	e853 3f00 	ldrex	r3, [r3]
 8019d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d46:	68bb      	ldr	r3, [r7, #8]
 8019d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019d4c:	61fb      	str	r3, [r7, #28]
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	461a      	mov	r2, r3
 8019d54:	69fb      	ldr	r3, [r7, #28]
 8019d56:	61bb      	str	r3, [r7, #24]
 8019d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d5a:	6979      	ldr	r1, [r7, #20]
 8019d5c:	69ba      	ldr	r2, [r7, #24]
 8019d5e:	e841 2300 	strex	r3, r2, [r1]
 8019d62:	613b      	str	r3, [r7, #16]
   return(result);
 8019d64:	693b      	ldr	r3, [r7, #16]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d1e6      	bne.n	8019d38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2220      	movs	r2, #32
 8019d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2200      	movs	r2, #0
 8019d76:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019d78:	6878      	ldr	r0, [r7, #4]
 8019d7a:	f7fe fc57 	bl	801862c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d7e:	bf00      	nop
 8019d80:	3720      	adds	r7, #32
 8019d82:	46bd      	mov	sp, r7
 8019d84:	bd80      	pop	{r7, pc}
	...

08019d88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b09c      	sub	sp, #112	@ 0x70
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019d96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019da0:	2b22      	cmp	r3, #34	@ 0x22
 8019da2:	f040 80be 	bne.w	8019f22 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019dac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019db0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019db4:	b2d9      	uxtb	r1, r3
 8019db6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019dba:	b2da      	uxtb	r2, r3
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019dc0:	400a      	ands	r2, r1
 8019dc2:	b2d2      	uxtb	r2, r2
 8019dc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019dca:	1c5a      	adds	r2, r3, #1
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	3b01      	subs	r3, #1
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019de8:	b29b      	uxth	r3, r3
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	f040 80a1 	bne.w	8019f32 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019df8:	e853 3f00 	ldrex	r3, [r3]
 8019dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	461a      	mov	r2, r3
 8019e0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019e10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019e16:	e841 2300 	strex	r3, r2, [r1]
 8019e1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d1e6      	bne.n	8019df0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	3308      	adds	r3, #8
 8019e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e2c:	e853 3f00 	ldrex	r3, [r3]
 8019e30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e34:	f023 0301 	bic.w	r3, r3, #1
 8019e38:	667b      	str	r3, [r7, #100]	@ 0x64
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	3308      	adds	r3, #8
 8019e40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019e42:	647a      	str	r2, [r7, #68]	@ 0x44
 8019e44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019e4a:	e841 2300 	strex	r3, r2, [r1]
 8019e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d1e5      	bne.n	8019e22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	2220      	movs	r2, #32
 8019e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	2200      	movs	r2, #0
 8019e62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	2200      	movs	r2, #0
 8019e68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	4a33      	ldr	r2, [pc, #204]	@ (8019f3c <UART_RxISR_8BIT+0x1b4>)
 8019e70:	4293      	cmp	r3, r2
 8019e72:	d01f      	beq.n	8019eb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	685b      	ldr	r3, [r3, #4]
 8019e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d018      	beq.n	8019eb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e8a:	e853 3f00 	ldrex	r3, [r3]
 8019e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8019e90:	6a3b      	ldr	r3, [r7, #32]
 8019e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	461a      	mov	r2, r3
 8019e9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ea8:	e841 2300 	strex	r3, r2, [r1]
 8019eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d1e6      	bne.n	8019e82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	d12e      	bne.n	8019f1a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	e853 3f00 	ldrex	r3, [r3]
 8019ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	f023 0310 	bic.w	r3, r3, #16
 8019ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	461a      	mov	r2, r3
 8019ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ee0:	61fb      	str	r3, [r7, #28]
 8019ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ee4:	69b9      	ldr	r1, [r7, #24]
 8019ee6:	69fa      	ldr	r2, [r7, #28]
 8019ee8:	e841 2300 	strex	r3, r2, [r1]
 8019eec:	617b      	str	r3, [r7, #20]
   return(result);
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d1e6      	bne.n	8019ec2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	69db      	ldr	r3, [r3, #28]
 8019efa:	f003 0310 	and.w	r3, r3, #16
 8019efe:	2b10      	cmp	r3, #16
 8019f00:	d103      	bne.n	8019f0a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	2210      	movs	r2, #16
 8019f08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019f10:	4619      	mov	r1, r3
 8019f12:	6878      	ldr	r0, [r7, #4]
 8019f14:	f7fe fb9e 	bl	8018654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019f18:	e00b      	b.n	8019f32 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019f1a:	6878      	ldr	r0, [r7, #4]
 8019f1c:	f7ec f99c 	bl	8006258 <HAL_UART_RxCpltCallback>
}
 8019f20:	e007      	b.n	8019f32 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	699a      	ldr	r2, [r3, #24]
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f042 0208 	orr.w	r2, r2, #8
 8019f30:	619a      	str	r2, [r3, #24]
}
 8019f32:	bf00      	nop
 8019f34:	3770      	adds	r7, #112	@ 0x70
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	58000c00 	.word	0x58000c00

08019f40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b09c      	sub	sp, #112	@ 0x70
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019f4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019f58:	2b22      	cmp	r3, #34	@ 0x22
 8019f5a:	f040 80be 	bne.w	801a0da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019f6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019f72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019f76:	4013      	ands	r3, r2
 8019f78:	b29a      	uxth	r2, r3
 8019f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019f7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f82:	1c9a      	adds	r2, r3, #2
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	3b01      	subs	r3, #1
 8019f92:	b29a      	uxth	r2, r3
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	f040 80a1 	bne.w	801a0ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019fb0:	e853 3f00 	ldrex	r3, [r3]
 8019fb4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019fbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	461a      	mov	r2, r3
 8019fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8019fc8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019fcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019fce:	e841 2300 	strex	r3, r2, [r1]
 8019fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d1e6      	bne.n	8019fa8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	3308      	adds	r3, #8
 8019fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fe4:	e853 3f00 	ldrex	r3, [r3]
 8019fe8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fec:	f023 0301 	bic.w	r3, r3, #1
 8019ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	3308      	adds	r3, #8
 8019ff8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 8019ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ffe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a000:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a002:	e841 2300 	strex	r3, r2, [r1]
 801a006:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d1e5      	bne.n	8019fda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2220      	movs	r2, #32
 801a012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	2200      	movs	r2, #0
 801a01a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2200      	movs	r2, #0
 801a020:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	4a33      	ldr	r2, [pc, #204]	@ (801a0f4 <UART_RxISR_16BIT+0x1b4>)
 801a028:	4293      	cmp	r3, r2
 801a02a:	d01f      	beq.n	801a06c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	685b      	ldr	r3, [r3, #4]
 801a032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a036:	2b00      	cmp	r3, #0
 801a038:	d018      	beq.n	801a06c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a040:	6a3b      	ldr	r3, [r7, #32]
 801a042:	e853 3f00 	ldrex	r3, [r3]
 801a046:	61fb      	str	r3, [r7, #28]
   return(result);
 801a048:	69fb      	ldr	r3, [r7, #28]
 801a04a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a04e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	461a      	mov	r2, r3
 801a056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a05a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a05c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a05e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a060:	e841 2300 	strex	r3, r2, [r1]
 801a064:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d1e6      	bne.n	801a03a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a070:	2b01      	cmp	r3, #1
 801a072:	d12e      	bne.n	801a0d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2200      	movs	r2, #0
 801a078:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	e853 3f00 	ldrex	r3, [r3]
 801a086:	60bb      	str	r3, [r7, #8]
   return(result);
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	f023 0310 	bic.w	r3, r3, #16
 801a08e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	461a      	mov	r2, r3
 801a096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a098:	61bb      	str	r3, [r7, #24]
 801a09a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a09c:	6979      	ldr	r1, [r7, #20]
 801a09e:	69ba      	ldr	r2, [r7, #24]
 801a0a0:	e841 2300 	strex	r3, r2, [r1]
 801a0a4:	613b      	str	r3, [r7, #16]
   return(result);
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d1e6      	bne.n	801a07a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	69db      	ldr	r3, [r3, #28]
 801a0b2:	f003 0310 	and.w	r3, r3, #16
 801a0b6:	2b10      	cmp	r3, #16
 801a0b8:	d103      	bne.n	801a0c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	2210      	movs	r2, #16
 801a0c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a0c8:	4619      	mov	r1, r3
 801a0ca:	6878      	ldr	r0, [r7, #4]
 801a0cc:	f7fe fac2 	bl	8018654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a0d0:	e00b      	b.n	801a0ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a0d2:	6878      	ldr	r0, [r7, #4]
 801a0d4:	f7ec f8c0 	bl	8006258 <HAL_UART_RxCpltCallback>
}
 801a0d8:	e007      	b.n	801a0ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	699a      	ldr	r2, [r3, #24]
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	f042 0208 	orr.w	r2, r2, #8
 801a0e8:	619a      	str	r2, [r3, #24]
}
 801a0ea:	bf00      	nop
 801a0ec:	3770      	adds	r7, #112	@ 0x70
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	58000c00 	.word	0x58000c00

0801a0f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b0ac      	sub	sp, #176	@ 0xb0
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a106:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	69db      	ldr	r3, [r3, #28]
 801a110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	689b      	ldr	r3, [r3, #8]
 801a124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a12e:	2b22      	cmp	r3, #34	@ 0x22
 801a130:	f040 8181 	bne.w	801a436 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a13a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a13e:	e124      	b.n	801a38a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a146:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a14a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a14e:	b2d9      	uxtb	r1, r3
 801a150:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a154:	b2da      	uxtb	r2, r3
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a15a:	400a      	ands	r2, r1
 801a15c:	b2d2      	uxtb	r2, r2
 801a15e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a164:	1c5a      	adds	r2, r3, #1
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a170:	b29b      	uxth	r3, r3
 801a172:	3b01      	subs	r3, #1
 801a174:	b29a      	uxth	r2, r3
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	69db      	ldr	r3, [r3, #28]
 801a182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a18a:	f003 0307 	and.w	r3, r3, #7
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d053      	beq.n	801a23a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a196:	f003 0301 	and.w	r3, r3, #1
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d011      	beq.n	801a1c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a19e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a1a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d00b      	beq.n	801a1c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2201      	movs	r2, #1
 801a1b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a1b8:	f043 0201 	orr.w	r2, r3, #1
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a1c6:	f003 0302 	and.w	r3, r3, #2
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d011      	beq.n	801a1f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a1ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a1d2:	f003 0301 	and.w	r3, r3, #1
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d00b      	beq.n	801a1f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	2202      	movs	r2, #2
 801a1e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a1e8:	f043 0204 	orr.w	r2, r3, #4
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a1f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a1f6:	f003 0304 	and.w	r3, r3, #4
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d011      	beq.n	801a222 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a1fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a202:	f003 0301 	and.w	r3, r3, #1
 801a206:	2b00      	cmp	r3, #0
 801a208:	d00b      	beq.n	801a222 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	2204      	movs	r2, #4
 801a210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a218:	f043 0202 	orr.w	r2, r3, #2
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d006      	beq.n	801a23a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f7fe fa07 	bl	8018640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2200      	movs	r2, #0
 801a236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a240:	b29b      	uxth	r3, r3
 801a242:	2b00      	cmp	r3, #0
 801a244:	f040 80a1 	bne.w	801a38a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a24e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a250:	e853 3f00 	ldrex	r3, [r3]
 801a254:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a25c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	461a      	mov	r2, r3
 801a266:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a26a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a26c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a26e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a270:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a272:	e841 2300 	strex	r3, r2, [r1]
 801a276:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d1e4      	bne.n	801a248 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	3308      	adds	r3, #8
 801a284:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a288:	e853 3f00 	ldrex	r3, [r3]
 801a28c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a28e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a290:	4b6f      	ldr	r3, [pc, #444]	@ (801a450 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a292:	4013      	ands	r3, r2
 801a294:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	3308      	adds	r3, #8
 801a29e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a2a2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a2a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a2a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a2aa:	e841 2300 	strex	r3, r2, [r1]
 801a2ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a2b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d1e3      	bne.n	801a27e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	2220      	movs	r2, #32
 801a2ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	2200      	movs	r2, #0
 801a2c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	4a61      	ldr	r2, [pc, #388]	@ (801a454 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a2d0:	4293      	cmp	r3, r2
 801a2d2:	d021      	beq.n	801a318 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d01a      	beq.n	801a318 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a2ea:	e853 3f00 	ldrex	r3, [r3]
 801a2ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a2f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a2f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a2f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	461a      	mov	r2, r3
 801a300:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a304:	657b      	str	r3, [r7, #84]	@ 0x54
 801a306:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a308:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a30a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a30c:	e841 2300 	strex	r3, r2, [r1]
 801a310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a314:	2b00      	cmp	r3, #0
 801a316:	d1e4      	bne.n	801a2e2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a31c:	2b01      	cmp	r3, #1
 801a31e:	d130      	bne.n	801a382 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2200      	movs	r2, #0
 801a324:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a32e:	e853 3f00 	ldrex	r3, [r3]
 801a332:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a336:	f023 0310 	bic.w	r3, r3, #16
 801a33a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	461a      	mov	r2, r3
 801a344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a348:	643b      	str	r3, [r7, #64]	@ 0x40
 801a34a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a34c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a34e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a350:	e841 2300 	strex	r3, r2, [r1]
 801a354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d1e4      	bne.n	801a326 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	69db      	ldr	r3, [r3, #28]
 801a362:	f003 0310 	and.w	r3, r3, #16
 801a366:	2b10      	cmp	r3, #16
 801a368:	d103      	bne.n	801a372 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	2210      	movs	r2, #16
 801a370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a378:	4619      	mov	r1, r3
 801a37a:	6878      	ldr	r0, [r7, #4]
 801a37c:	f7fe f96a 	bl	8018654 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a380:	e00e      	b.n	801a3a0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7eb ff68 	bl	8006258 <HAL_UART_RxCpltCallback>
        break;
 801a388:	e00a      	b.n	801a3a0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a38a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d006      	beq.n	801a3a0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a396:	f003 0320 	and.w	r3, r3, #32
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	f47f aed0 	bne.w	801a140 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a3a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a3aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d049      	beq.n	801a446 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a3b8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d242      	bcs.n	801a446 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	3308      	adds	r3, #8
 801a3c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3c8:	6a3b      	ldr	r3, [r7, #32]
 801a3ca:	e853 3f00 	ldrex	r3, [r3]
 801a3ce:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a3d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	3308      	adds	r3, #8
 801a3e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a3e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a3ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a3ec:	e841 2300 	strex	r3, r2, [r1]
 801a3f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d1e3      	bne.n	801a3c0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	4a17      	ldr	r2, [pc, #92]	@ (801a458 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a3fc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	e853 3f00 	ldrex	r3, [r3]
 801a40a:	60bb      	str	r3, [r7, #8]
   return(result);
 801a40c:	68bb      	ldr	r3, [r7, #8]
 801a40e:	f043 0320 	orr.w	r3, r3, #32
 801a412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	461a      	mov	r2, r3
 801a41c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a420:	61bb      	str	r3, [r7, #24]
 801a422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a424:	6979      	ldr	r1, [r7, #20]
 801a426:	69ba      	ldr	r2, [r7, #24]
 801a428:	e841 2300 	strex	r3, r2, [r1]
 801a42c:	613b      	str	r3, [r7, #16]
   return(result);
 801a42e:	693b      	ldr	r3, [r7, #16]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d1e4      	bne.n	801a3fe <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a434:	e007      	b.n	801a446 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	699a      	ldr	r2, [r3, #24]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	f042 0208 	orr.w	r2, r2, #8
 801a444:	619a      	str	r2, [r3, #24]
}
 801a446:	bf00      	nop
 801a448:	37b0      	adds	r7, #176	@ 0xb0
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}
 801a44e:	bf00      	nop
 801a450:	effffffe 	.word	0xeffffffe
 801a454:	58000c00 	.word	0x58000c00
 801a458:	08019d89 	.word	0x08019d89

0801a45c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b0ae      	sub	sp, #184	@ 0xb8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a46a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	69db      	ldr	r3, [r3, #28]
 801a474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	689b      	ldr	r3, [r3, #8]
 801a488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a492:	2b22      	cmp	r3, #34	@ 0x22
 801a494:	f040 8185 	bne.w	801a7a2 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a49e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a4a2:	e128      	b.n	801a6f6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a4b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a4b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a4ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a4be:	4013      	ands	r3, r2
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a4cc:	1c9a      	adds	r2, r3, #2
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	3b01      	subs	r3, #1
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	69db      	ldr	r3, [r3, #28]
 801a4ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a4ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a4f2:	f003 0307 	and.w	r3, r3, #7
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d053      	beq.n	801a5a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a4fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a4fe:	f003 0301 	and.w	r3, r3, #1
 801a502:	2b00      	cmp	r3, #0
 801a504:	d011      	beq.n	801a52a <UART_RxISR_16BIT_FIFOEN+0xce>
 801a506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d00b      	beq.n	801a52a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	2201      	movs	r2, #1
 801a518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a520:	f043 0201 	orr.w	r2, r3, #1
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a52a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a52e:	f003 0302 	and.w	r3, r3, #2
 801a532:	2b00      	cmp	r3, #0
 801a534:	d011      	beq.n	801a55a <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a53a:	f003 0301 	and.w	r3, r3, #1
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d00b      	beq.n	801a55a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	2202      	movs	r2, #2
 801a548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a550:	f043 0204 	orr.w	r2, r3, #4
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a55a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a55e:	f003 0304 	and.w	r3, r3, #4
 801a562:	2b00      	cmp	r3, #0
 801a564:	d011      	beq.n	801a58a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a56a:	f003 0301 	and.w	r3, r3, #1
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d00b      	beq.n	801a58a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	2204      	movs	r2, #4
 801a578:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a580:	f043 0202 	orr.w	r2, r3, #2
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a590:	2b00      	cmp	r3, #0
 801a592:	d006      	beq.n	801a5a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a594:	6878      	ldr	r0, [r7, #4]
 801a596:	f7fe f853 	bl	8018640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	2200      	movs	r2, #0
 801a59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	f040 80a3 	bne.w	801a6f6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a5b8:	e853 3f00 	ldrex	r3, [r3]
 801a5bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a5be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a5c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	461a      	mov	r2, r3
 801a5ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a5d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a5d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a5da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a5de:	e841 2300 	strex	r3, r2, [r1]
 801a5e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a5e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d1e2      	bne.n	801a5b0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	3308      	adds	r3, #8
 801a5f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a5f4:	e853 3f00 	ldrex	r3, [r3]
 801a5f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a5fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a5fc:	4b6f      	ldr	r3, [pc, #444]	@ (801a7bc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a5fe:	4013      	ands	r3, r2
 801a600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	3308      	adds	r3, #8
 801a60a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a60e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a610:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a612:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a614:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a616:	e841 2300 	strex	r3, r2, [r1]
 801a61a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a61c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d1e3      	bne.n	801a5ea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	2220      	movs	r2, #32
 801a626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	2200      	movs	r2, #0
 801a62e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	2200      	movs	r2, #0
 801a634:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	4a61      	ldr	r2, [pc, #388]	@ (801a7c0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a63c:	4293      	cmp	r3, r2
 801a63e:	d021      	beq.n	801a684 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	685b      	ldr	r3, [r3, #4]
 801a646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d01a      	beq.n	801a684 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a656:	e853 3f00 	ldrex	r3, [r3]
 801a65a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a65e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	461a      	mov	r2, r3
 801a66c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a670:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a672:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a676:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a678:	e841 2300 	strex	r3, r2, [r1]
 801a67c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a67e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a680:	2b00      	cmp	r3, #0
 801a682:	d1e4      	bne.n	801a64e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a688:	2b01      	cmp	r3, #1
 801a68a:	d130      	bne.n	801a6ee <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	2200      	movs	r2, #0
 801a690:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a69a:	e853 3f00 	ldrex	r3, [r3]
 801a69e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6a2:	f023 0310 	bic.w	r3, r3, #16
 801a6a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 801a6b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a6ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a6bc:	e841 2300 	strex	r3, r2, [r1]
 801a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d1e4      	bne.n	801a692 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	69db      	ldr	r3, [r3, #28]
 801a6ce:	f003 0310 	and.w	r3, r3, #16
 801a6d2:	2b10      	cmp	r3, #16
 801a6d4:	d103      	bne.n	801a6de <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	2210      	movs	r2, #16
 801a6dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a6e4:	4619      	mov	r1, r3
 801a6e6:	6878      	ldr	r0, [r7, #4]
 801a6e8:	f7fd ffb4 	bl	8018654 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a6ec:	e00e      	b.n	801a70c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a6ee:	6878      	ldr	r0, [r7, #4]
 801a6f0:	f7eb fdb2 	bl	8006258 <HAL_UART_RxCpltCallback>
        break;
 801a6f4:	e00a      	b.n	801a70c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a6f6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d006      	beq.n	801a70c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a6fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a702:	f003 0320 	and.w	r3, r3, #32
 801a706:	2b00      	cmp	r3, #0
 801a708:	f47f aecc 	bne.w	801a4a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a712:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a716:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d049      	beq.n	801a7b2 <UART_RxISR_16BIT_FIFOEN+0x356>
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a724:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a728:	429a      	cmp	r2, r3
 801a72a:	d242      	bcs.n	801a7b2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	3308      	adds	r3, #8
 801a732:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a736:	e853 3f00 	ldrex	r3, [r3]
 801a73a:	623b      	str	r3, [r7, #32]
   return(result);
 801a73c:	6a3b      	ldr	r3, [r7, #32]
 801a73e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a742:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	3308      	adds	r3, #8
 801a74c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a750:	633a      	str	r2, [r7, #48]	@ 0x30
 801a752:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a758:	e841 2300 	strex	r3, r2, [r1]
 801a75c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a760:	2b00      	cmp	r3, #0
 801a762:	d1e3      	bne.n	801a72c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	4a17      	ldr	r2, [pc, #92]	@ (801a7c4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801a768:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a770:	693b      	ldr	r3, [r7, #16]
 801a772:	e853 3f00 	ldrex	r3, [r3]
 801a776:	60fb      	str	r3, [r7, #12]
   return(result);
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	f043 0320 	orr.w	r3, r3, #32
 801a77e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	461a      	mov	r2, r3
 801a788:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a78c:	61fb      	str	r3, [r7, #28]
 801a78e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a790:	69b9      	ldr	r1, [r7, #24]
 801a792:	69fa      	ldr	r2, [r7, #28]
 801a794:	e841 2300 	strex	r3, r2, [r1]
 801a798:	617b      	str	r3, [r7, #20]
   return(result);
 801a79a:	697b      	ldr	r3, [r7, #20]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d1e4      	bne.n	801a76a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a7a0:	e007      	b.n	801a7b2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	699a      	ldr	r2, [r3, #24]
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	f042 0208 	orr.w	r2, r2, #8
 801a7b0:	619a      	str	r2, [r3, #24]
}
 801a7b2:	bf00      	nop
 801a7b4:	37b8      	adds	r7, #184	@ 0xb8
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}
 801a7ba:	bf00      	nop
 801a7bc:	effffffe 	.word	0xeffffffe
 801a7c0:	58000c00 	.word	0x58000c00
 801a7c4:	08019f41 	.word	0x08019f41

0801a7c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a7c8:	b480      	push	{r7}
 801a7ca:	b083      	sub	sp, #12
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a7d0:	bf00      	nop
 801a7d2:	370c      	adds	r7, #12
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7da:	4770      	bx	lr

0801a7dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a7dc:	b480      	push	{r7}
 801a7de:	b083      	sub	sp, #12
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a7e4:	bf00      	nop
 801a7e6:	370c      	adds	r7, #12
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ee:	4770      	bx	lr

0801a7f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a7f0:	b480      	push	{r7}
 801a7f2:	b083      	sub	sp, #12
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a7f8:	bf00      	nop
 801a7fa:	370c      	adds	r7, #12
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a802:	4770      	bx	lr

0801a804 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a804:	b480      	push	{r7}
 801a806:	b085      	sub	sp, #20
 801a808:	af00      	add	r7, sp, #0
 801a80a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a812:	2b01      	cmp	r3, #1
 801a814:	d101      	bne.n	801a81a <HAL_UARTEx_DisableFifoMode+0x16>
 801a816:	2302      	movs	r3, #2
 801a818:	e027      	b.n	801a86a <HAL_UARTEx_DisableFifoMode+0x66>
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2201      	movs	r2, #1
 801a81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	2224      	movs	r2, #36	@ 0x24
 801a826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	681a      	ldr	r2, [r3, #0]
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	f022 0201 	bic.w	r2, r2, #1
 801a840:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a848:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	2200      	movs	r2, #0
 801a84e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	68fa      	ldr	r2, [r7, #12]
 801a856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	2220      	movs	r2, #32
 801a85c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	2200      	movs	r2, #0
 801a864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a868:	2300      	movs	r3, #0
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	3714      	adds	r7, #20
 801a86e:	46bd      	mov	sp, r7
 801a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a874:	4770      	bx	lr

0801a876 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a876:	b580      	push	{r7, lr}
 801a878:	b084      	sub	sp, #16
 801a87a:	af00      	add	r7, sp, #0
 801a87c:	6078      	str	r0, [r7, #4]
 801a87e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a886:	2b01      	cmp	r3, #1
 801a888:	d101      	bne.n	801a88e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a88a:	2302      	movs	r3, #2
 801a88c:	e02d      	b.n	801a8ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	2201      	movs	r2, #1
 801a892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	2224      	movs	r2, #36	@ 0x24
 801a89a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	681a      	ldr	r2, [r3, #0]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	f022 0201 	bic.w	r2, r2, #1
 801a8b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	689b      	ldr	r3, [r3, #8]
 801a8bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	683a      	ldr	r2, [r7, #0]
 801a8c6:	430a      	orrs	r2, r1
 801a8c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a8ca:	6878      	ldr	r0, [r7, #4]
 801a8cc:	f000 f850 	bl	801a970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	68fa      	ldr	r2, [r7, #12]
 801a8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	2220      	movs	r2, #32
 801a8dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a8e8:	2300      	movs	r3, #0
}
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	3710      	adds	r7, #16
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd80      	pop	{r7, pc}

0801a8f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a8f2:	b580      	push	{r7, lr}
 801a8f4:	b084      	sub	sp, #16
 801a8f6:	af00      	add	r7, sp, #0
 801a8f8:	6078      	str	r0, [r7, #4]
 801a8fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a902:	2b01      	cmp	r3, #1
 801a904:	d101      	bne.n	801a90a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a906:	2302      	movs	r3, #2
 801a908:	e02d      	b.n	801a966 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	2201      	movs	r2, #1
 801a90e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	2224      	movs	r2, #36	@ 0x24
 801a916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f022 0201 	bic.w	r2, r2, #1
 801a930:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	689b      	ldr	r3, [r3, #8]
 801a938:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	683a      	ldr	r2, [r7, #0]
 801a942:	430a      	orrs	r2, r1
 801a944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f000 f812 	bl	801a970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	68fa      	ldr	r2, [r7, #12]
 801a952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	2220      	movs	r2, #32
 801a958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	2200      	movs	r2, #0
 801a960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a964:	2300      	movs	r3, #0
}
 801a966:	4618      	mov	r0, r3
 801a968:	3710      	adds	r7, #16
 801a96a:	46bd      	mov	sp, r7
 801a96c:	bd80      	pop	{r7, pc}
	...

0801a970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a970:	b480      	push	{r7}
 801a972:	b085      	sub	sp, #20
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d108      	bne.n	801a992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2201      	movs	r2, #1
 801a984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	2201      	movs	r2, #1
 801a98c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a990:	e031      	b.n	801a9f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a992:	2310      	movs	r3, #16
 801a994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a996:	2310      	movs	r3, #16
 801a998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	689b      	ldr	r3, [r3, #8]
 801a9a0:	0e5b      	lsrs	r3, r3, #25
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	f003 0307 	and.w	r3, r3, #7
 801a9a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	689b      	ldr	r3, [r3, #8]
 801a9b0:	0f5b      	lsrs	r3, r3, #29
 801a9b2:	b2db      	uxtb	r3, r3
 801a9b4:	f003 0307 	and.w	r3, r3, #7
 801a9b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a9ba:	7bbb      	ldrb	r3, [r7, #14]
 801a9bc:	7b3a      	ldrb	r2, [r7, #12]
 801a9be:	4911      	ldr	r1, [pc, #68]	@ (801aa04 <UARTEx_SetNbDataToProcess+0x94>)
 801a9c0:	5c8a      	ldrb	r2, [r1, r2]
 801a9c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a9c6:	7b3a      	ldrb	r2, [r7, #12]
 801a9c8:	490f      	ldr	r1, [pc, #60]	@ (801aa08 <UARTEx_SetNbDataToProcess+0x98>)
 801a9ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 801a9d0:	b29a      	uxth	r2, r3
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a9d8:	7bfb      	ldrb	r3, [r7, #15]
 801a9da:	7b7a      	ldrb	r2, [r7, #13]
 801a9dc:	4909      	ldr	r1, [pc, #36]	@ (801aa04 <UARTEx_SetNbDataToProcess+0x94>)
 801a9de:	5c8a      	ldrb	r2, [r1, r2]
 801a9e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a9e4:	7b7a      	ldrb	r2, [r7, #13]
 801a9e6:	4908      	ldr	r1, [pc, #32]	@ (801aa08 <UARTEx_SetNbDataToProcess+0x98>)
 801a9e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a9ea:	fb93 f3f2 	sdiv	r3, r3, r2
 801a9ee:	b29a      	uxth	r2, r3
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a9f6:	bf00      	nop
 801a9f8:	3714      	adds	r7, #20
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa00:	4770      	bx	lr
 801aa02:	bf00      	nop
 801aa04:	0801e86c 	.word	0x0801e86c
 801aa08:	0801e874 	.word	0x0801e874

0801aa0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801aa10:	4904      	ldr	r1, [pc, #16]	@ (801aa24 <MX_FATFS_Init+0x18>)
 801aa12:	4805      	ldr	r0, [pc, #20]	@ (801aa28 <MX_FATFS_Init+0x1c>)
 801aa14:	f003 f8d8 	bl	801dbc8 <FATFS_LinkDriver>
 801aa18:	4603      	mov	r3, r0
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	4b03      	ldr	r3, [pc, #12]	@ (801aa2c <MX_FATFS_Init+0x20>)
 801aa1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801aa20:	bf00      	nop
 801aa22:	bd80      	pop	{r7, pc}
 801aa24:	2400054c 	.word	0x2400054c
 801aa28:	24000014 	.word	0x24000014
 801aa2c:	24000548 	.word	0x24000548

0801aa30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801aa30:	b480      	push	{r7}
 801aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801aa34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801aa36:	4618      	mov	r0, r3
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3e:	4770      	bx	lr

0801aa40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b082      	sub	sp, #8
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	4603      	mov	r3, r0
 801aa48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801aa4a:	79fb      	ldrb	r3, [r7, #7]
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f7e9 fbf9 	bl	8004244 <SD_disk_initialize>
 801aa52:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801aa54:	4618      	mov	r0, r3
 801aa56:	3708      	adds	r7, #8
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}

0801aa5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b082      	sub	sp, #8
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	4603      	mov	r3, r0
 801aa64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801aa66:	79fb      	ldrb	r3, [r7, #7]
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f7e9 fcd7 	bl	800441c <SD_disk_status>
 801aa6e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801aa70:	4618      	mov	r0, r3
 801aa72:	3708      	adds	r7, #8
 801aa74:	46bd      	mov	sp, r7
 801aa76:	bd80      	pop	{r7, pc}

0801aa78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b084      	sub	sp, #16
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	60b9      	str	r1, [r7, #8]
 801aa80:	607a      	str	r2, [r7, #4]
 801aa82:	603b      	str	r3, [r7, #0]
 801aa84:	4603      	mov	r3, r0
 801aa86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801aa88:	7bf8      	ldrb	r0, [r7, #15]
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	687a      	ldr	r2, [r7, #4]
 801aa8e:	68b9      	ldr	r1, [r7, #8]
 801aa90:	f7e9 fcda 	bl	8004448 <SD_disk_read>
 801aa94:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801aa96:	4618      	mov	r0, r3
 801aa98:	3710      	adds	r7, #16
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	bd80      	pop	{r7, pc}

0801aa9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801aa9e:	b580      	push	{r7, lr}
 801aaa0:	b084      	sub	sp, #16
 801aaa2:	af00      	add	r7, sp, #0
 801aaa4:	60b9      	str	r1, [r7, #8]
 801aaa6:	607a      	str	r2, [r7, #4]
 801aaa8:	603b      	str	r3, [r7, #0]
 801aaaa:	4603      	mov	r3, r0
 801aaac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801aaae:	7bf8      	ldrb	r0, [r7, #15]
 801aab0:	683b      	ldr	r3, [r7, #0]
 801aab2:	687a      	ldr	r2, [r7, #4]
 801aab4:	68b9      	ldr	r1, [r7, #8]
 801aab6:	f7e9 fd31 	bl	800451c <SD_disk_write>
 801aaba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	3710      	adds	r7, #16
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b082      	sub	sp, #8
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	4603      	mov	r3, r0
 801aacc:	603a      	str	r2, [r7, #0]
 801aace:	71fb      	strb	r3, [r7, #7]
 801aad0:	460b      	mov	r3, r1
 801aad2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801aad4:	79b9      	ldrb	r1, [r7, #6]
 801aad6:	79fb      	ldrb	r3, [r7, #7]
 801aad8:	683a      	ldr	r2, [r7, #0]
 801aada:	4618      	mov	r0, r3
 801aadc:	f7e9 fda2 	bl	8004624 <SD_disk_ioctl>
 801aae0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801aae2:	4618      	mov	r0, r3
 801aae4:	3708      	adds	r7, #8
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}
	...

0801aaec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	4603      	mov	r3, r0
 801aaf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801aaf6:	79fb      	ldrb	r3, [r7, #7]
 801aaf8:	4a08      	ldr	r2, [pc, #32]	@ (801ab1c <disk_status+0x30>)
 801aafa:	009b      	lsls	r3, r3, #2
 801aafc:	4413      	add	r3, r2
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	685b      	ldr	r3, [r3, #4]
 801ab02:	79fa      	ldrb	r2, [r7, #7]
 801ab04:	4905      	ldr	r1, [pc, #20]	@ (801ab1c <disk_status+0x30>)
 801ab06:	440a      	add	r2, r1
 801ab08:	7a12      	ldrb	r2, [r2, #8]
 801ab0a:	4610      	mov	r0, r2
 801ab0c:	4798      	blx	r3
 801ab0e:	4603      	mov	r3, r0
 801ab10:	73fb      	strb	r3, [r7, #15]
  return stat;
 801ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab14:	4618      	mov	r0, r3
 801ab16:	3710      	adds	r7, #16
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	bd80      	pop	{r7, pc}
 801ab1c:	24000768 	.word	0x24000768

0801ab20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b084      	sub	sp, #16
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	4603      	mov	r3, r0
 801ab28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801ab2e:	79fb      	ldrb	r3, [r7, #7]
 801ab30:	4a0e      	ldr	r2, [pc, #56]	@ (801ab6c <disk_initialize+0x4c>)
 801ab32:	5cd3      	ldrb	r3, [r2, r3]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d114      	bne.n	801ab62 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801ab38:	79fb      	ldrb	r3, [r7, #7]
 801ab3a:	4a0c      	ldr	r2, [pc, #48]	@ (801ab6c <disk_initialize+0x4c>)
 801ab3c:	009b      	lsls	r3, r3, #2
 801ab3e:	4413      	add	r3, r2
 801ab40:	685b      	ldr	r3, [r3, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	79fa      	ldrb	r2, [r7, #7]
 801ab46:	4909      	ldr	r1, [pc, #36]	@ (801ab6c <disk_initialize+0x4c>)
 801ab48:	440a      	add	r2, r1
 801ab4a:	7a12      	ldrb	r2, [r2, #8]
 801ab4c:	4610      	mov	r0, r2
 801ab4e:	4798      	blx	r3
 801ab50:	4603      	mov	r3, r0
 801ab52:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801ab54:	7bfb      	ldrb	r3, [r7, #15]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d103      	bne.n	801ab62 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801ab5a:	79fb      	ldrb	r3, [r7, #7]
 801ab5c:	4a03      	ldr	r2, [pc, #12]	@ (801ab6c <disk_initialize+0x4c>)
 801ab5e:	2101      	movs	r1, #1
 801ab60:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801ab62:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab64:	4618      	mov	r0, r3
 801ab66:	3710      	adds	r7, #16
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	24000768 	.word	0x24000768

0801ab70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801ab70:	b590      	push	{r4, r7, lr}
 801ab72:	b087      	sub	sp, #28
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	60b9      	str	r1, [r7, #8]
 801ab78:	607a      	str	r2, [r7, #4]
 801ab7a:	603b      	str	r3, [r7, #0]
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801ab80:	7bfb      	ldrb	r3, [r7, #15]
 801ab82:	4a0a      	ldr	r2, [pc, #40]	@ (801abac <disk_read+0x3c>)
 801ab84:	009b      	lsls	r3, r3, #2
 801ab86:	4413      	add	r3, r2
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	689c      	ldr	r4, [r3, #8]
 801ab8c:	7bfb      	ldrb	r3, [r7, #15]
 801ab8e:	4a07      	ldr	r2, [pc, #28]	@ (801abac <disk_read+0x3c>)
 801ab90:	4413      	add	r3, r2
 801ab92:	7a18      	ldrb	r0, [r3, #8]
 801ab94:	683b      	ldr	r3, [r7, #0]
 801ab96:	687a      	ldr	r2, [r7, #4]
 801ab98:	68b9      	ldr	r1, [r7, #8]
 801ab9a:	47a0      	blx	r4
 801ab9c:	4603      	mov	r3, r0
 801ab9e:	75fb      	strb	r3, [r7, #23]
  return res;
 801aba0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aba2:	4618      	mov	r0, r3
 801aba4:	371c      	adds	r7, #28
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd90      	pop	{r4, r7, pc}
 801abaa:	bf00      	nop
 801abac:	24000768 	.word	0x24000768

0801abb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801abb0:	b590      	push	{r4, r7, lr}
 801abb2:	b087      	sub	sp, #28
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	60b9      	str	r1, [r7, #8]
 801abb8:	607a      	str	r2, [r7, #4]
 801abba:	603b      	str	r3, [r7, #0]
 801abbc:	4603      	mov	r3, r0
 801abbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801abc0:	7bfb      	ldrb	r3, [r7, #15]
 801abc2:	4a0a      	ldr	r2, [pc, #40]	@ (801abec <disk_write+0x3c>)
 801abc4:	009b      	lsls	r3, r3, #2
 801abc6:	4413      	add	r3, r2
 801abc8:	685b      	ldr	r3, [r3, #4]
 801abca:	68dc      	ldr	r4, [r3, #12]
 801abcc:	7bfb      	ldrb	r3, [r7, #15]
 801abce:	4a07      	ldr	r2, [pc, #28]	@ (801abec <disk_write+0x3c>)
 801abd0:	4413      	add	r3, r2
 801abd2:	7a18      	ldrb	r0, [r3, #8]
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	687a      	ldr	r2, [r7, #4]
 801abd8:	68b9      	ldr	r1, [r7, #8]
 801abda:	47a0      	blx	r4
 801abdc:	4603      	mov	r3, r0
 801abde:	75fb      	strb	r3, [r7, #23]
  return res;
 801abe0:	7dfb      	ldrb	r3, [r7, #23]
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	371c      	adds	r7, #28
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd90      	pop	{r4, r7, pc}
 801abea:	bf00      	nop
 801abec:	24000768 	.word	0x24000768

0801abf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b084      	sub	sp, #16
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	4603      	mov	r3, r0
 801abf8:	603a      	str	r2, [r7, #0]
 801abfa:	71fb      	strb	r3, [r7, #7]
 801abfc:	460b      	mov	r3, r1
 801abfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801ac00:	79fb      	ldrb	r3, [r7, #7]
 801ac02:	4a09      	ldr	r2, [pc, #36]	@ (801ac28 <disk_ioctl+0x38>)
 801ac04:	009b      	lsls	r3, r3, #2
 801ac06:	4413      	add	r3, r2
 801ac08:	685b      	ldr	r3, [r3, #4]
 801ac0a:	691b      	ldr	r3, [r3, #16]
 801ac0c:	79fa      	ldrb	r2, [r7, #7]
 801ac0e:	4906      	ldr	r1, [pc, #24]	@ (801ac28 <disk_ioctl+0x38>)
 801ac10:	440a      	add	r2, r1
 801ac12:	7a10      	ldrb	r0, [r2, #8]
 801ac14:	79b9      	ldrb	r1, [r7, #6]
 801ac16:	683a      	ldr	r2, [r7, #0]
 801ac18:	4798      	blx	r3
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	73fb      	strb	r3, [r7, #15]
  return res;
 801ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac20:	4618      	mov	r0, r3
 801ac22:	3710      	adds	r7, #16
 801ac24:	46bd      	mov	sp, r7
 801ac26:	bd80      	pop	{r7, pc}
 801ac28:	24000768 	.word	0x24000768

0801ac2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801ac2c:	b480      	push	{r7}
 801ac2e:	b085      	sub	sp, #20
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	3301      	adds	r3, #1
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801ac3c:	89fb      	ldrh	r3, [r7, #14]
 801ac3e:	021b      	lsls	r3, r3, #8
 801ac40:	b21a      	sxth	r2, r3
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	781b      	ldrb	r3, [r3, #0]
 801ac46:	b21b      	sxth	r3, r3
 801ac48:	4313      	orrs	r3, r2
 801ac4a:	b21b      	sxth	r3, r3
 801ac4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801ac4e:	89fb      	ldrh	r3, [r7, #14]
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3714      	adds	r7, #20
 801ac54:	46bd      	mov	sp, r7
 801ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5a:	4770      	bx	lr

0801ac5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801ac5c:	b480      	push	{r7}
 801ac5e:	b085      	sub	sp, #20
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	3303      	adds	r3, #3
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	021b      	lsls	r3, r3, #8
 801ac70:	687a      	ldr	r2, [r7, #4]
 801ac72:	3202      	adds	r2, #2
 801ac74:	7812      	ldrb	r2, [r2, #0]
 801ac76:	4313      	orrs	r3, r2
 801ac78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	021b      	lsls	r3, r3, #8
 801ac7e:	687a      	ldr	r2, [r7, #4]
 801ac80:	3201      	adds	r2, #1
 801ac82:	7812      	ldrb	r2, [r2, #0]
 801ac84:	4313      	orrs	r3, r2
 801ac86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	021b      	lsls	r3, r3, #8
 801ac8c:	687a      	ldr	r2, [r7, #4]
 801ac8e:	7812      	ldrb	r2, [r2, #0]
 801ac90:	4313      	orrs	r3, r2
 801ac92:	60fb      	str	r3, [r7, #12]
	return rv;
 801ac94:	68fb      	ldr	r3, [r7, #12]
}
 801ac96:	4618      	mov	r0, r3
 801ac98:	3714      	adds	r7, #20
 801ac9a:	46bd      	mov	sp, r7
 801ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aca0:	4770      	bx	lr

0801aca2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801aca2:	b480      	push	{r7}
 801aca4:	b083      	sub	sp, #12
 801aca6:	af00      	add	r7, sp, #0
 801aca8:	6078      	str	r0, [r7, #4]
 801acaa:	460b      	mov	r3, r1
 801acac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	1c5a      	adds	r2, r3, #1
 801acb2:	607a      	str	r2, [r7, #4]
 801acb4:	887a      	ldrh	r2, [r7, #2]
 801acb6:	b2d2      	uxtb	r2, r2
 801acb8:	701a      	strb	r2, [r3, #0]
 801acba:	887b      	ldrh	r3, [r7, #2]
 801acbc:	0a1b      	lsrs	r3, r3, #8
 801acbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	1c5a      	adds	r2, r3, #1
 801acc4:	607a      	str	r2, [r7, #4]
 801acc6:	887a      	ldrh	r2, [r7, #2]
 801acc8:	b2d2      	uxtb	r2, r2
 801acca:	701a      	strb	r2, [r3, #0]
}
 801accc:	bf00      	nop
 801acce:	370c      	adds	r7, #12
 801acd0:	46bd      	mov	sp, r7
 801acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd6:	4770      	bx	lr

0801acd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801acd8:	b480      	push	{r7}
 801acda:	b083      	sub	sp, #12
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
 801ace0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	1c5a      	adds	r2, r3, #1
 801ace6:	607a      	str	r2, [r7, #4]
 801ace8:	683a      	ldr	r2, [r7, #0]
 801acea:	b2d2      	uxtb	r2, r2
 801acec:	701a      	strb	r2, [r3, #0]
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	0a1b      	lsrs	r3, r3, #8
 801acf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	1c5a      	adds	r2, r3, #1
 801acf8:	607a      	str	r2, [r7, #4]
 801acfa:	683a      	ldr	r2, [r7, #0]
 801acfc:	b2d2      	uxtb	r2, r2
 801acfe:	701a      	strb	r2, [r3, #0]
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	0a1b      	lsrs	r3, r3, #8
 801ad04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	1c5a      	adds	r2, r3, #1
 801ad0a:	607a      	str	r2, [r7, #4]
 801ad0c:	683a      	ldr	r2, [r7, #0]
 801ad0e:	b2d2      	uxtb	r2, r2
 801ad10:	701a      	strb	r2, [r3, #0]
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	0a1b      	lsrs	r3, r3, #8
 801ad16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	1c5a      	adds	r2, r3, #1
 801ad1c:	607a      	str	r2, [r7, #4]
 801ad1e:	683a      	ldr	r2, [r7, #0]
 801ad20:	b2d2      	uxtb	r2, r2
 801ad22:	701a      	strb	r2, [r3, #0]
}
 801ad24:	bf00      	nop
 801ad26:	370c      	adds	r7, #12
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2e:	4770      	bx	lr

0801ad30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801ad30:	b480      	push	{r7}
 801ad32:	b087      	sub	sp, #28
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	60f8      	str	r0, [r7, #12]
 801ad38:	60b9      	str	r1, [r7, #8]
 801ad3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d00d      	beq.n	801ad66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801ad4a:	693a      	ldr	r2, [r7, #16]
 801ad4c:	1c53      	adds	r3, r2, #1
 801ad4e:	613b      	str	r3, [r7, #16]
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	1c59      	adds	r1, r3, #1
 801ad54:	6179      	str	r1, [r7, #20]
 801ad56:	7812      	ldrb	r2, [r2, #0]
 801ad58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	3b01      	subs	r3, #1
 801ad5e:	607b      	str	r3, [r7, #4]
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d1f1      	bne.n	801ad4a <mem_cpy+0x1a>
	}
}
 801ad66:	bf00      	nop
 801ad68:	371c      	adds	r7, #28
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad70:	4770      	bx	lr

0801ad72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801ad72:	b480      	push	{r7}
 801ad74:	b087      	sub	sp, #28
 801ad76:	af00      	add	r7, sp, #0
 801ad78:	60f8      	str	r0, [r7, #12]
 801ad7a:	60b9      	str	r1, [r7, #8]
 801ad7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	1c5a      	adds	r2, r3, #1
 801ad86:	617a      	str	r2, [r7, #20]
 801ad88:	68ba      	ldr	r2, [r7, #8]
 801ad8a:	b2d2      	uxtb	r2, r2
 801ad8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	3b01      	subs	r3, #1
 801ad92:	607b      	str	r3, [r7, #4]
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d1f3      	bne.n	801ad82 <mem_set+0x10>
}
 801ad9a:	bf00      	nop
 801ad9c:	bf00      	nop
 801ad9e:	371c      	adds	r7, #28
 801ada0:	46bd      	mov	sp, r7
 801ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada6:	4770      	bx	lr

0801ada8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801ada8:	b480      	push	{r7}
 801adaa:	b089      	sub	sp, #36	@ 0x24
 801adac:	af00      	add	r7, sp, #0
 801adae:	60f8      	str	r0, [r7, #12]
 801adb0:	60b9      	str	r1, [r7, #8]
 801adb2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	61fb      	str	r3, [r7, #28]
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801adbc:	2300      	movs	r3, #0
 801adbe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801adc0:	69fb      	ldr	r3, [r7, #28]
 801adc2:	1c5a      	adds	r2, r3, #1
 801adc4:	61fa      	str	r2, [r7, #28]
 801adc6:	781b      	ldrb	r3, [r3, #0]
 801adc8:	4619      	mov	r1, r3
 801adca:	69bb      	ldr	r3, [r7, #24]
 801adcc:	1c5a      	adds	r2, r3, #1
 801adce:	61ba      	str	r2, [r7, #24]
 801add0:	781b      	ldrb	r3, [r3, #0]
 801add2:	1acb      	subs	r3, r1, r3
 801add4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	3b01      	subs	r3, #1
 801adda:	607b      	str	r3, [r7, #4]
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d002      	beq.n	801ade8 <mem_cmp+0x40>
 801ade2:	697b      	ldr	r3, [r7, #20]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d0eb      	beq.n	801adc0 <mem_cmp+0x18>

	return r;
 801ade8:	697b      	ldr	r3, [r7, #20]
}
 801adea:	4618      	mov	r0, r3
 801adec:	3724      	adds	r7, #36	@ 0x24
 801adee:	46bd      	mov	sp, r7
 801adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf4:	4770      	bx	lr

0801adf6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801adf6:	b480      	push	{r7}
 801adf8:	b083      	sub	sp, #12
 801adfa:	af00      	add	r7, sp, #0
 801adfc:	6078      	str	r0, [r7, #4]
 801adfe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ae00:	e002      	b.n	801ae08 <chk_chr+0x12>
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	3301      	adds	r3, #1
 801ae06:	607b      	str	r3, [r7, #4]
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	781b      	ldrb	r3, [r3, #0]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d005      	beq.n	801ae1c <chk_chr+0x26>
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	461a      	mov	r2, r3
 801ae16:	683b      	ldr	r3, [r7, #0]
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d1f2      	bne.n	801ae02 <chk_chr+0xc>
	return *str;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	781b      	ldrb	r3, [r3, #0]
}
 801ae20:	4618      	mov	r0, r3
 801ae22:	370c      	adds	r7, #12
 801ae24:	46bd      	mov	sp, r7
 801ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae2a:	4770      	bx	lr

0801ae2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ae2c:	b480      	push	{r7}
 801ae2e:	b085      	sub	sp, #20
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ae36:	2300      	movs	r3, #0
 801ae38:	60bb      	str	r3, [r7, #8]
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	60fb      	str	r3, [r7, #12]
 801ae3e:	e029      	b.n	801ae94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ae40:	4a27      	ldr	r2, [pc, #156]	@ (801aee0 <chk_lock+0xb4>)
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	011b      	lsls	r3, r3, #4
 801ae46:	4413      	add	r3, r2
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d01d      	beq.n	801ae8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ae4e:	4a24      	ldr	r2, [pc, #144]	@ (801aee0 <chk_lock+0xb4>)
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	011b      	lsls	r3, r3, #4
 801ae54:	4413      	add	r3, r2
 801ae56:	681a      	ldr	r2, [r3, #0]
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	429a      	cmp	r2, r3
 801ae5e:	d116      	bne.n	801ae8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801ae60:	4a1f      	ldr	r2, [pc, #124]	@ (801aee0 <chk_lock+0xb4>)
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	011b      	lsls	r3, r3, #4
 801ae66:	4413      	add	r3, r2
 801ae68:	3304      	adds	r3, #4
 801ae6a:	681a      	ldr	r2, [r3, #0]
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d10c      	bne.n	801ae8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ae74:	4a1a      	ldr	r2, [pc, #104]	@ (801aee0 <chk_lock+0xb4>)
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	011b      	lsls	r3, r3, #4
 801ae7a:	4413      	add	r3, r2
 801ae7c:	3308      	adds	r3, #8
 801ae7e:	681a      	ldr	r2, [r3, #0]
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801ae84:	429a      	cmp	r2, r3
 801ae86:	d102      	bne.n	801ae8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ae88:	e007      	b.n	801ae9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	3301      	adds	r3, #1
 801ae92:	60fb      	str	r3, [r7, #12]
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d0d2      	beq.n	801ae40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	2b01      	cmp	r3, #1
 801ae9e:	d109      	bne.n	801aeb4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801aea0:	68bb      	ldr	r3, [r7, #8]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d102      	bne.n	801aeac <chk_lock+0x80>
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	2b02      	cmp	r3, #2
 801aeaa:	d101      	bne.n	801aeb0 <chk_lock+0x84>
 801aeac:	2300      	movs	r3, #0
 801aeae:	e010      	b.n	801aed2 <chk_lock+0xa6>
 801aeb0:	2312      	movs	r3, #18
 801aeb2:	e00e      	b.n	801aed2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801aeb4:	683b      	ldr	r3, [r7, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d108      	bne.n	801aecc <chk_lock+0xa0>
 801aeba:	4a09      	ldr	r2, [pc, #36]	@ (801aee0 <chk_lock+0xb4>)
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	011b      	lsls	r3, r3, #4
 801aec0:	4413      	add	r3, r2
 801aec2:	330c      	adds	r3, #12
 801aec4:	881b      	ldrh	r3, [r3, #0]
 801aec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aeca:	d101      	bne.n	801aed0 <chk_lock+0xa4>
 801aecc:	2310      	movs	r3, #16
 801aece:	e000      	b.n	801aed2 <chk_lock+0xa6>
 801aed0:	2300      	movs	r3, #0
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	3714      	adds	r7, #20
 801aed6:	46bd      	mov	sp, r7
 801aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aedc:	4770      	bx	lr
 801aede:	bf00      	nop
 801aee0:	24000558 	.word	0x24000558

0801aee4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801aee4:	b480      	push	{r7}
 801aee6:	b083      	sub	sp, #12
 801aee8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aeea:	2300      	movs	r3, #0
 801aeec:	607b      	str	r3, [r7, #4]
 801aeee:	e002      	b.n	801aef6 <enq_lock+0x12>
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	3301      	adds	r3, #1
 801aef4:	607b      	str	r3, [r7, #4]
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d106      	bne.n	801af0a <enq_lock+0x26>
 801aefc:	4a09      	ldr	r2, [pc, #36]	@ (801af24 <enq_lock+0x40>)
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	011b      	lsls	r3, r3, #4
 801af02:	4413      	add	r3, r2
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d1f2      	bne.n	801aef0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	bf14      	ite	ne
 801af10:	2301      	movne	r3, #1
 801af12:	2300      	moveq	r3, #0
 801af14:	b2db      	uxtb	r3, r3
}
 801af16:	4618      	mov	r0, r3
 801af18:	370c      	adds	r7, #12
 801af1a:	46bd      	mov	sp, r7
 801af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af20:	4770      	bx	lr
 801af22:	bf00      	nop
 801af24:	24000558 	.word	0x24000558

0801af28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801af28:	b480      	push	{r7}
 801af2a:	b085      	sub	sp, #20
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
 801af30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801af32:	2300      	movs	r3, #0
 801af34:	60fb      	str	r3, [r7, #12]
 801af36:	e01f      	b.n	801af78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801af38:	4a41      	ldr	r2, [pc, #260]	@ (801b040 <inc_lock+0x118>)
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	011b      	lsls	r3, r3, #4
 801af3e:	4413      	add	r3, r2
 801af40:	681a      	ldr	r2, [r3, #0]
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	429a      	cmp	r2, r3
 801af48:	d113      	bne.n	801af72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801af4a:	4a3d      	ldr	r2, [pc, #244]	@ (801b040 <inc_lock+0x118>)
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	011b      	lsls	r3, r3, #4
 801af50:	4413      	add	r3, r2
 801af52:	3304      	adds	r3, #4
 801af54:	681a      	ldr	r2, [r3, #0]
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801af5a:	429a      	cmp	r2, r3
 801af5c:	d109      	bne.n	801af72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801af5e:	4a38      	ldr	r2, [pc, #224]	@ (801b040 <inc_lock+0x118>)
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	011b      	lsls	r3, r3, #4
 801af64:	4413      	add	r3, r2
 801af66:	3308      	adds	r3, #8
 801af68:	681a      	ldr	r2, [r3, #0]
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801af6e:	429a      	cmp	r2, r3
 801af70:	d006      	beq.n	801af80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	3301      	adds	r3, #1
 801af76:	60fb      	str	r3, [r7, #12]
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d0dc      	beq.n	801af38 <inc_lock+0x10>
 801af7e:	e000      	b.n	801af82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801af80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	2b01      	cmp	r3, #1
 801af86:	d132      	bne.n	801afee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801af88:	2300      	movs	r3, #0
 801af8a:	60fb      	str	r3, [r7, #12]
 801af8c:	e002      	b.n	801af94 <inc_lock+0x6c>
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	3301      	adds	r3, #1
 801af92:	60fb      	str	r3, [r7, #12]
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d106      	bne.n	801afa8 <inc_lock+0x80>
 801af9a:	4a29      	ldr	r2, [pc, #164]	@ (801b040 <inc_lock+0x118>)
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	011b      	lsls	r3, r3, #4
 801afa0:	4413      	add	r3, r2
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1f2      	bne.n	801af8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	2b01      	cmp	r3, #1
 801afac:	d101      	bne.n	801afb2 <inc_lock+0x8a>
 801afae:	2300      	movs	r3, #0
 801afb0:	e040      	b.n	801b034 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	4922      	ldr	r1, [pc, #136]	@ (801b040 <inc_lock+0x118>)
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	011b      	lsls	r3, r3, #4
 801afbc:	440b      	add	r3, r1
 801afbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	689a      	ldr	r2, [r3, #8]
 801afc4:	491e      	ldr	r1, [pc, #120]	@ (801b040 <inc_lock+0x118>)
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	011b      	lsls	r3, r3, #4
 801afca:	440b      	add	r3, r1
 801afcc:	3304      	adds	r3, #4
 801afce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	695a      	ldr	r2, [r3, #20]
 801afd4:	491a      	ldr	r1, [pc, #104]	@ (801b040 <inc_lock+0x118>)
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	011b      	lsls	r3, r3, #4
 801afda:	440b      	add	r3, r1
 801afdc:	3308      	adds	r3, #8
 801afde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801afe0:	4a17      	ldr	r2, [pc, #92]	@ (801b040 <inc_lock+0x118>)
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	011b      	lsls	r3, r3, #4
 801afe6:	4413      	add	r3, r2
 801afe8:	330c      	adds	r3, #12
 801afea:	2200      	movs	r2, #0
 801afec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d009      	beq.n	801b008 <inc_lock+0xe0>
 801aff4:	4a12      	ldr	r2, [pc, #72]	@ (801b040 <inc_lock+0x118>)
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	011b      	lsls	r3, r3, #4
 801affa:	4413      	add	r3, r2
 801affc:	330c      	adds	r3, #12
 801affe:	881b      	ldrh	r3, [r3, #0]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d001      	beq.n	801b008 <inc_lock+0xe0>
 801b004:	2300      	movs	r3, #0
 801b006:	e015      	b.n	801b034 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d108      	bne.n	801b020 <inc_lock+0xf8>
 801b00e:	4a0c      	ldr	r2, [pc, #48]	@ (801b040 <inc_lock+0x118>)
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	011b      	lsls	r3, r3, #4
 801b014:	4413      	add	r3, r2
 801b016:	330c      	adds	r3, #12
 801b018:	881b      	ldrh	r3, [r3, #0]
 801b01a:	3301      	adds	r3, #1
 801b01c:	b29a      	uxth	r2, r3
 801b01e:	e001      	b.n	801b024 <inc_lock+0xfc>
 801b020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b024:	4906      	ldr	r1, [pc, #24]	@ (801b040 <inc_lock+0x118>)
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	011b      	lsls	r3, r3, #4
 801b02a:	440b      	add	r3, r1
 801b02c:	330c      	adds	r3, #12
 801b02e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	3301      	adds	r3, #1
}
 801b034:	4618      	mov	r0, r3
 801b036:	3714      	adds	r7, #20
 801b038:	46bd      	mov	sp, r7
 801b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03e:	4770      	bx	lr
 801b040:	24000558 	.word	0x24000558

0801b044 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b044:	b480      	push	{r7}
 801b046:	b085      	sub	sp, #20
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	3b01      	subs	r3, #1
 801b050:	607b      	str	r3, [r7, #4]
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d125      	bne.n	801b0a4 <dec_lock+0x60>
		n = Files[i].ctr;
 801b058:	4a17      	ldr	r2, [pc, #92]	@ (801b0b8 <dec_lock+0x74>)
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	011b      	lsls	r3, r3, #4
 801b05e:	4413      	add	r3, r2
 801b060:	330c      	adds	r3, #12
 801b062:	881b      	ldrh	r3, [r3, #0]
 801b064:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b066:	89fb      	ldrh	r3, [r7, #14]
 801b068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b06c:	d101      	bne.n	801b072 <dec_lock+0x2e>
 801b06e:	2300      	movs	r3, #0
 801b070:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b072:	89fb      	ldrh	r3, [r7, #14]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d002      	beq.n	801b07e <dec_lock+0x3a>
 801b078:	89fb      	ldrh	r3, [r7, #14]
 801b07a:	3b01      	subs	r3, #1
 801b07c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b07e:	4a0e      	ldr	r2, [pc, #56]	@ (801b0b8 <dec_lock+0x74>)
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	011b      	lsls	r3, r3, #4
 801b084:	4413      	add	r3, r2
 801b086:	330c      	adds	r3, #12
 801b088:	89fa      	ldrh	r2, [r7, #14]
 801b08a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b08c:	89fb      	ldrh	r3, [r7, #14]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d105      	bne.n	801b09e <dec_lock+0x5a>
 801b092:	4a09      	ldr	r2, [pc, #36]	@ (801b0b8 <dec_lock+0x74>)
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	011b      	lsls	r3, r3, #4
 801b098:	4413      	add	r3, r2
 801b09a:	2200      	movs	r2, #0
 801b09c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	737b      	strb	r3, [r7, #13]
 801b0a2:	e001      	b.n	801b0a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b0a4:	2302      	movs	r3, #2
 801b0a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b0a8:	7b7b      	ldrb	r3, [r7, #13]
}
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	3714      	adds	r7, #20
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b4:	4770      	bx	lr
 801b0b6:	bf00      	nop
 801b0b8:	24000558 	.word	0x24000558

0801b0bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b0bc:	b480      	push	{r7}
 801b0be:	b085      	sub	sp, #20
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	60fb      	str	r3, [r7, #12]
 801b0c8:	e010      	b.n	801b0ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b0ca:	4a0d      	ldr	r2, [pc, #52]	@ (801b100 <clear_lock+0x44>)
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	011b      	lsls	r3, r3, #4
 801b0d0:	4413      	add	r3, r2
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	687a      	ldr	r2, [r7, #4]
 801b0d6:	429a      	cmp	r2, r3
 801b0d8:	d105      	bne.n	801b0e6 <clear_lock+0x2a>
 801b0da:	4a09      	ldr	r2, [pc, #36]	@ (801b100 <clear_lock+0x44>)
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	011b      	lsls	r3, r3, #4
 801b0e0:	4413      	add	r3, r2
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	3301      	adds	r3, #1
 801b0ea:	60fb      	str	r3, [r7, #12]
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d0eb      	beq.n	801b0ca <clear_lock+0xe>
	}
}
 801b0f2:	bf00      	nop
 801b0f4:	bf00      	nop
 801b0f6:	3714      	adds	r7, #20
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fe:	4770      	bx	lr
 801b100:	24000558 	.word	0x24000558

0801b104 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b086      	sub	sp, #24
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b10c:	2300      	movs	r3, #0
 801b10e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	78db      	ldrb	r3, [r3, #3]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d034      	beq.n	801b182 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b11c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	7858      	ldrb	r0, [r3, #1]
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b128:	2301      	movs	r3, #1
 801b12a:	697a      	ldr	r2, [r7, #20]
 801b12c:	f7ff fd40 	bl	801abb0 <disk_write>
 801b130:	4603      	mov	r3, r0
 801b132:	2b00      	cmp	r3, #0
 801b134:	d002      	beq.n	801b13c <sync_window+0x38>
			res = FR_DISK_ERR;
 801b136:	2301      	movs	r3, #1
 801b138:	73fb      	strb	r3, [r7, #15]
 801b13a:	e022      	b.n	801b182 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	2200      	movs	r2, #0
 801b140:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b146:	697a      	ldr	r2, [r7, #20]
 801b148:	1ad2      	subs	r2, r2, r3
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	6a1b      	ldr	r3, [r3, #32]
 801b14e:	429a      	cmp	r2, r3
 801b150:	d217      	bcs.n	801b182 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	789b      	ldrb	r3, [r3, #2]
 801b156:	613b      	str	r3, [r7, #16]
 801b158:	e010      	b.n	801b17c <sync_window+0x78>
					wsect += fs->fsize;
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	6a1b      	ldr	r3, [r3, #32]
 801b15e:	697a      	ldr	r2, [r7, #20]
 801b160:	4413      	add	r3, r2
 801b162:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	7858      	ldrb	r0, [r3, #1]
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b16e:	2301      	movs	r3, #1
 801b170:	697a      	ldr	r2, [r7, #20]
 801b172:	f7ff fd1d 	bl	801abb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b176:	693b      	ldr	r3, [r7, #16]
 801b178:	3b01      	subs	r3, #1
 801b17a:	613b      	str	r3, [r7, #16]
 801b17c:	693b      	ldr	r3, [r7, #16]
 801b17e:	2b01      	cmp	r3, #1
 801b180:	d8eb      	bhi.n	801b15a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b182:	7bfb      	ldrb	r3, [r7, #15]
}
 801b184:	4618      	mov	r0, r3
 801b186:	3718      	adds	r7, #24
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd80      	pop	{r7, pc}

0801b18c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b084      	sub	sp, #16
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
 801b194:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b196:	2300      	movs	r3, #0
 801b198:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b19e:	683a      	ldr	r2, [r7, #0]
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d01b      	beq.n	801b1dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b1a4:	6878      	ldr	r0, [r7, #4]
 801b1a6:	f7ff ffad 	bl	801b104 <sync_window>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b1ae:	7bfb      	ldrb	r3, [r7, #15]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d113      	bne.n	801b1dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	7858      	ldrb	r0, [r3, #1]
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1be:	2301      	movs	r3, #1
 801b1c0:	683a      	ldr	r2, [r7, #0]
 801b1c2:	f7ff fcd5 	bl	801ab70 <disk_read>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d004      	beq.n	801b1d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b1d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b1d2:	2301      	movs	r3, #1
 801b1d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	683a      	ldr	r2, [r7, #0]
 801b1da:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	3710      	adds	r7, #16
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
	...

0801b1e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b1f0:	6878      	ldr	r0, [r7, #4]
 801b1f2:	f7ff ff87 	bl	801b104 <sync_window>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b1fa:	7bfb      	ldrb	r3, [r7, #15]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d159      	bne.n	801b2b4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	781b      	ldrb	r3, [r3, #0]
 801b204:	2b03      	cmp	r3, #3
 801b206:	d149      	bne.n	801b29c <sync_fs+0xb4>
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	791b      	ldrb	r3, [r3, #4]
 801b20c:	2b01      	cmp	r3, #1
 801b20e:	d145      	bne.n	801b29c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	899b      	ldrh	r3, [r3, #12]
 801b21a:	461a      	mov	r2, r3
 801b21c:	2100      	movs	r1, #0
 801b21e:	f7ff fda8 	bl	801ad72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	3338      	adds	r3, #56	@ 0x38
 801b226:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b22a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b22e:	4618      	mov	r0, r3
 801b230:	f7ff fd37 	bl	801aca2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	3338      	adds	r3, #56	@ 0x38
 801b238:	4921      	ldr	r1, [pc, #132]	@ (801b2c0 <sync_fs+0xd8>)
 801b23a:	4618      	mov	r0, r3
 801b23c:	f7ff fd4c 	bl	801acd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	3338      	adds	r3, #56	@ 0x38
 801b244:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b248:	491e      	ldr	r1, [pc, #120]	@ (801b2c4 <sync_fs+0xdc>)
 801b24a:	4618      	mov	r0, r3
 801b24c:	f7ff fd44 	bl	801acd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	3338      	adds	r3, #56	@ 0x38
 801b254:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	699b      	ldr	r3, [r3, #24]
 801b25c:	4619      	mov	r1, r3
 801b25e:	4610      	mov	r0, r2
 801b260:	f7ff fd3a 	bl	801acd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	3338      	adds	r3, #56	@ 0x38
 801b268:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	695b      	ldr	r3, [r3, #20]
 801b270:	4619      	mov	r1, r3
 801b272:	4610      	mov	r0, r2
 801b274:	f7ff fd30 	bl	801acd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b27c:	1c5a      	adds	r2, r3, #1
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	7858      	ldrb	r0, [r3, #1]
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b290:	2301      	movs	r3, #1
 801b292:	f7ff fc8d 	bl	801abb0 <disk_write>
			fs->fsi_flag = 0;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	2200      	movs	r2, #0
 801b29a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	785b      	ldrb	r3, [r3, #1]
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	2100      	movs	r1, #0
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f7ff fca3 	bl	801abf0 <disk_ioctl>
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d001      	beq.n	801b2b4 <sync_fs+0xcc>
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	3710      	adds	r7, #16
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	bd80      	pop	{r7, pc}
 801b2be:	bf00      	nop
 801b2c0:	41615252 	.word	0x41615252
 801b2c4:	61417272 	.word	0x61417272

0801b2c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b2c8:	b480      	push	{r7}
 801b2ca:	b083      	sub	sp, #12
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
 801b2d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	3b02      	subs	r3, #2
 801b2d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	69db      	ldr	r3, [r3, #28]
 801b2dc:	3b02      	subs	r3, #2
 801b2de:	683a      	ldr	r2, [r7, #0]
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	d301      	bcc.n	801b2e8 <clust2sect+0x20>
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	e008      	b.n	801b2fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	895b      	ldrh	r3, [r3, #10]
 801b2ec:	461a      	mov	r2, r3
 801b2ee:	683b      	ldr	r3, [r7, #0]
 801b2f0:	fb03 f202 	mul.w	r2, r3, r2
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b2f8:	4413      	add	r3, r2
}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	370c      	adds	r7, #12
 801b2fe:	46bd      	mov	sp, r7
 801b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b304:	4770      	bx	lr

0801b306 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b306:	b580      	push	{r7, lr}
 801b308:	b086      	sub	sp, #24
 801b30a:	af00      	add	r7, sp, #0
 801b30c:	6078      	str	r0, [r7, #4]
 801b30e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b316:	683b      	ldr	r3, [r7, #0]
 801b318:	2b01      	cmp	r3, #1
 801b31a:	d904      	bls.n	801b326 <get_fat+0x20>
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	69db      	ldr	r3, [r3, #28]
 801b320:	683a      	ldr	r2, [r7, #0]
 801b322:	429a      	cmp	r2, r3
 801b324:	d302      	bcc.n	801b32c <get_fat+0x26>
		val = 1;	/* Internal error */
 801b326:	2301      	movs	r3, #1
 801b328:	617b      	str	r3, [r7, #20]
 801b32a:	e0ba      	b.n	801b4a2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b32c:	f04f 33ff 	mov.w	r3, #4294967295
 801b330:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b332:	693b      	ldr	r3, [r7, #16]
 801b334:	781b      	ldrb	r3, [r3, #0]
 801b336:	2b03      	cmp	r3, #3
 801b338:	f000 8082 	beq.w	801b440 <get_fat+0x13a>
 801b33c:	2b03      	cmp	r3, #3
 801b33e:	f300 80a6 	bgt.w	801b48e <get_fat+0x188>
 801b342:	2b01      	cmp	r3, #1
 801b344:	d002      	beq.n	801b34c <get_fat+0x46>
 801b346:	2b02      	cmp	r3, #2
 801b348:	d055      	beq.n	801b3f6 <get_fat+0xf0>
 801b34a:	e0a0      	b.n	801b48e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	60fb      	str	r3, [r7, #12]
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	085b      	lsrs	r3, r3, #1
 801b354:	68fa      	ldr	r2, [r7, #12]
 801b356:	4413      	add	r3, r2
 801b358:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b35e:	693b      	ldr	r3, [r7, #16]
 801b360:	899b      	ldrh	r3, [r3, #12]
 801b362:	4619      	mov	r1, r3
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	fbb3 f3f1 	udiv	r3, r3, r1
 801b36a:	4413      	add	r3, r2
 801b36c:	4619      	mov	r1, r3
 801b36e:	6938      	ldr	r0, [r7, #16]
 801b370:	f7ff ff0c 	bl	801b18c <move_window>
 801b374:	4603      	mov	r3, r0
 801b376:	2b00      	cmp	r3, #0
 801b378:	f040 808c 	bne.w	801b494 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	1c5a      	adds	r2, r3, #1
 801b380:	60fa      	str	r2, [r7, #12]
 801b382:	693a      	ldr	r2, [r7, #16]
 801b384:	8992      	ldrh	r2, [r2, #12]
 801b386:	fbb3 f1f2 	udiv	r1, r3, r2
 801b38a:	fb01 f202 	mul.w	r2, r1, r2
 801b38e:	1a9b      	subs	r3, r3, r2
 801b390:	693a      	ldr	r2, [r7, #16]
 801b392:	4413      	add	r3, r2
 801b394:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b398:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b39a:	693b      	ldr	r3, [r7, #16]
 801b39c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	899b      	ldrh	r3, [r3, #12]
 801b3a2:	4619      	mov	r1, r3
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3aa:	4413      	add	r3, r2
 801b3ac:	4619      	mov	r1, r3
 801b3ae:	6938      	ldr	r0, [r7, #16]
 801b3b0:	f7ff feec 	bl	801b18c <move_window>
 801b3b4:	4603      	mov	r3, r0
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d16e      	bne.n	801b498 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b3ba:	693b      	ldr	r3, [r7, #16]
 801b3bc:	899b      	ldrh	r3, [r3, #12]
 801b3be:	461a      	mov	r2, r3
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	fbb3 f1f2 	udiv	r1, r3, r2
 801b3c6:	fb01 f202 	mul.w	r2, r1, r2
 801b3ca:	1a9b      	subs	r3, r3, r2
 801b3cc:	693a      	ldr	r2, [r7, #16]
 801b3ce:	4413      	add	r3, r2
 801b3d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b3d4:	021b      	lsls	r3, r3, #8
 801b3d6:	68ba      	ldr	r2, [r7, #8]
 801b3d8:	4313      	orrs	r3, r2
 801b3da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b3dc:	683b      	ldr	r3, [r7, #0]
 801b3de:	f003 0301 	and.w	r3, r3, #1
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d002      	beq.n	801b3ec <get_fat+0xe6>
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	091b      	lsrs	r3, r3, #4
 801b3ea:	e002      	b.n	801b3f2 <get_fat+0xec>
 801b3ec:	68bb      	ldr	r3, [r7, #8]
 801b3ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b3f2:	617b      	str	r3, [r7, #20]
			break;
 801b3f4:	e055      	b.n	801b4a2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b3f6:	693b      	ldr	r3, [r7, #16]
 801b3f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b3fa:	693b      	ldr	r3, [r7, #16]
 801b3fc:	899b      	ldrh	r3, [r3, #12]
 801b3fe:	085b      	lsrs	r3, r3, #1
 801b400:	b29b      	uxth	r3, r3
 801b402:	4619      	mov	r1, r3
 801b404:	683b      	ldr	r3, [r7, #0]
 801b406:	fbb3 f3f1 	udiv	r3, r3, r1
 801b40a:	4413      	add	r3, r2
 801b40c:	4619      	mov	r1, r3
 801b40e:	6938      	ldr	r0, [r7, #16]
 801b410:	f7ff febc 	bl	801b18c <move_window>
 801b414:	4603      	mov	r3, r0
 801b416:	2b00      	cmp	r3, #0
 801b418:	d140      	bne.n	801b49c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b41a:	693b      	ldr	r3, [r7, #16]
 801b41c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b420:	683b      	ldr	r3, [r7, #0]
 801b422:	005b      	lsls	r3, r3, #1
 801b424:	693a      	ldr	r2, [r7, #16]
 801b426:	8992      	ldrh	r2, [r2, #12]
 801b428:	fbb3 f0f2 	udiv	r0, r3, r2
 801b42c:	fb00 f202 	mul.w	r2, r0, r2
 801b430:	1a9b      	subs	r3, r3, r2
 801b432:	440b      	add	r3, r1
 801b434:	4618      	mov	r0, r3
 801b436:	f7ff fbf9 	bl	801ac2c <ld_word>
 801b43a:	4603      	mov	r3, r0
 801b43c:	617b      	str	r3, [r7, #20]
			break;
 801b43e:	e030      	b.n	801b4a2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b440:	693b      	ldr	r3, [r7, #16]
 801b442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b444:	693b      	ldr	r3, [r7, #16]
 801b446:	899b      	ldrh	r3, [r3, #12]
 801b448:	089b      	lsrs	r3, r3, #2
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	4619      	mov	r1, r3
 801b44e:	683b      	ldr	r3, [r7, #0]
 801b450:	fbb3 f3f1 	udiv	r3, r3, r1
 801b454:	4413      	add	r3, r2
 801b456:	4619      	mov	r1, r3
 801b458:	6938      	ldr	r0, [r7, #16]
 801b45a:	f7ff fe97 	bl	801b18c <move_window>
 801b45e:	4603      	mov	r3, r0
 801b460:	2b00      	cmp	r3, #0
 801b462:	d11d      	bne.n	801b4a0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b464:	693b      	ldr	r3, [r7, #16]
 801b466:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b46a:	683b      	ldr	r3, [r7, #0]
 801b46c:	009b      	lsls	r3, r3, #2
 801b46e:	693a      	ldr	r2, [r7, #16]
 801b470:	8992      	ldrh	r2, [r2, #12]
 801b472:	fbb3 f0f2 	udiv	r0, r3, r2
 801b476:	fb00 f202 	mul.w	r2, r0, r2
 801b47a:	1a9b      	subs	r3, r3, r2
 801b47c:	440b      	add	r3, r1
 801b47e:	4618      	mov	r0, r3
 801b480:	f7ff fbec 	bl	801ac5c <ld_dword>
 801b484:	4603      	mov	r3, r0
 801b486:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b48a:	617b      	str	r3, [r7, #20]
			break;
 801b48c:	e009      	b.n	801b4a2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b48e:	2301      	movs	r3, #1
 801b490:	617b      	str	r3, [r7, #20]
 801b492:	e006      	b.n	801b4a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b494:	bf00      	nop
 801b496:	e004      	b.n	801b4a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b498:	bf00      	nop
 801b49a:	e002      	b.n	801b4a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b49c:	bf00      	nop
 801b49e:	e000      	b.n	801b4a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b4a0:	bf00      	nop
		}
	}

	return val;
 801b4a2:	697b      	ldr	r3, [r7, #20]
}
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	3718      	adds	r7, #24
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	bd80      	pop	{r7, pc}

0801b4ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b4ac:	b590      	push	{r4, r7, lr}
 801b4ae:	b089      	sub	sp, #36	@ 0x24
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	60f8      	str	r0, [r7, #12]
 801b4b4:	60b9      	str	r1, [r7, #8]
 801b4b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b4b8:	2302      	movs	r3, #2
 801b4ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b4bc:	68bb      	ldr	r3, [r7, #8]
 801b4be:	2b01      	cmp	r3, #1
 801b4c0:	f240 8109 	bls.w	801b6d6 <put_fat+0x22a>
 801b4c4:	68fb      	ldr	r3, [r7, #12]
 801b4c6:	69db      	ldr	r3, [r3, #28]
 801b4c8:	68ba      	ldr	r2, [r7, #8]
 801b4ca:	429a      	cmp	r2, r3
 801b4cc:	f080 8103 	bcs.w	801b6d6 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	2b03      	cmp	r3, #3
 801b4d6:	f000 80b6 	beq.w	801b646 <put_fat+0x19a>
 801b4da:	2b03      	cmp	r3, #3
 801b4dc:	f300 80fb 	bgt.w	801b6d6 <put_fat+0x22a>
 801b4e0:	2b01      	cmp	r3, #1
 801b4e2:	d003      	beq.n	801b4ec <put_fat+0x40>
 801b4e4:	2b02      	cmp	r3, #2
 801b4e6:	f000 8083 	beq.w	801b5f0 <put_fat+0x144>
 801b4ea:	e0f4      	b.n	801b6d6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	61bb      	str	r3, [r7, #24]
 801b4f0:	69bb      	ldr	r3, [r7, #24]
 801b4f2:	085b      	lsrs	r3, r3, #1
 801b4f4:	69ba      	ldr	r2, [r7, #24]
 801b4f6:	4413      	add	r3, r2
 801b4f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	899b      	ldrh	r3, [r3, #12]
 801b502:	4619      	mov	r1, r3
 801b504:	69bb      	ldr	r3, [r7, #24]
 801b506:	fbb3 f3f1 	udiv	r3, r3, r1
 801b50a:	4413      	add	r3, r2
 801b50c:	4619      	mov	r1, r3
 801b50e:	68f8      	ldr	r0, [r7, #12]
 801b510:	f7ff fe3c 	bl	801b18c <move_window>
 801b514:	4603      	mov	r3, r0
 801b516:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b518:	7ffb      	ldrb	r3, [r7, #31]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	f040 80d4 	bne.w	801b6c8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b526:	69bb      	ldr	r3, [r7, #24]
 801b528:	1c5a      	adds	r2, r3, #1
 801b52a:	61ba      	str	r2, [r7, #24]
 801b52c:	68fa      	ldr	r2, [r7, #12]
 801b52e:	8992      	ldrh	r2, [r2, #12]
 801b530:	fbb3 f0f2 	udiv	r0, r3, r2
 801b534:	fb00 f202 	mul.w	r2, r0, r2
 801b538:	1a9b      	subs	r3, r3, r2
 801b53a:	440b      	add	r3, r1
 801b53c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b53e:	68bb      	ldr	r3, [r7, #8]
 801b540:	f003 0301 	and.w	r3, r3, #1
 801b544:	2b00      	cmp	r3, #0
 801b546:	d00d      	beq.n	801b564 <put_fat+0xb8>
 801b548:	697b      	ldr	r3, [r7, #20]
 801b54a:	781b      	ldrb	r3, [r3, #0]
 801b54c:	b25b      	sxtb	r3, r3
 801b54e:	f003 030f 	and.w	r3, r3, #15
 801b552:	b25a      	sxtb	r2, r3
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	b2db      	uxtb	r3, r3
 801b558:	011b      	lsls	r3, r3, #4
 801b55a:	b25b      	sxtb	r3, r3
 801b55c:	4313      	orrs	r3, r2
 801b55e:	b25b      	sxtb	r3, r3
 801b560:	b2db      	uxtb	r3, r3
 801b562:	e001      	b.n	801b568 <put_fat+0xbc>
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	b2db      	uxtb	r3, r3
 801b568:	697a      	ldr	r2, [r7, #20]
 801b56a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	2201      	movs	r2, #1
 801b570:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	899b      	ldrh	r3, [r3, #12]
 801b57a:	4619      	mov	r1, r3
 801b57c:	69bb      	ldr	r3, [r7, #24]
 801b57e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b582:	4413      	add	r3, r2
 801b584:	4619      	mov	r1, r3
 801b586:	68f8      	ldr	r0, [r7, #12]
 801b588:	f7ff fe00 	bl	801b18c <move_window>
 801b58c:	4603      	mov	r3, r0
 801b58e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b590:	7ffb      	ldrb	r3, [r7, #31]
 801b592:	2b00      	cmp	r3, #0
 801b594:	f040 809a 	bne.w	801b6cc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	899b      	ldrh	r3, [r3, #12]
 801b5a2:	461a      	mov	r2, r3
 801b5a4:	69bb      	ldr	r3, [r7, #24]
 801b5a6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5aa:	fb00 f202 	mul.w	r2, r0, r2
 801b5ae:	1a9b      	subs	r3, r3, r2
 801b5b0:	440b      	add	r3, r1
 801b5b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	f003 0301 	and.w	r3, r3, #1
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d003      	beq.n	801b5c6 <put_fat+0x11a>
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	091b      	lsrs	r3, r3, #4
 801b5c2:	b2db      	uxtb	r3, r3
 801b5c4:	e00e      	b.n	801b5e4 <put_fat+0x138>
 801b5c6:	697b      	ldr	r3, [r7, #20]
 801b5c8:	781b      	ldrb	r3, [r3, #0]
 801b5ca:	b25b      	sxtb	r3, r3
 801b5cc:	f023 030f 	bic.w	r3, r3, #15
 801b5d0:	b25a      	sxtb	r2, r3
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	0a1b      	lsrs	r3, r3, #8
 801b5d6:	b25b      	sxtb	r3, r3
 801b5d8:	f003 030f 	and.w	r3, r3, #15
 801b5dc:	b25b      	sxtb	r3, r3
 801b5de:	4313      	orrs	r3, r2
 801b5e0:	b25b      	sxtb	r3, r3
 801b5e2:	b2db      	uxtb	r3, r3
 801b5e4:	697a      	ldr	r2, [r7, #20]
 801b5e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	2201      	movs	r2, #1
 801b5ec:	70da      	strb	r2, [r3, #3]
			break;
 801b5ee:	e072      	b.n	801b6d6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	899b      	ldrh	r3, [r3, #12]
 801b5f8:	085b      	lsrs	r3, r3, #1
 801b5fa:	b29b      	uxth	r3, r3
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	68bb      	ldr	r3, [r7, #8]
 801b600:	fbb3 f3f1 	udiv	r3, r3, r1
 801b604:	4413      	add	r3, r2
 801b606:	4619      	mov	r1, r3
 801b608:	68f8      	ldr	r0, [r7, #12]
 801b60a:	f7ff fdbf 	bl	801b18c <move_window>
 801b60e:	4603      	mov	r3, r0
 801b610:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b612:	7ffb      	ldrb	r3, [r7, #31]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d15b      	bne.n	801b6d0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	005b      	lsls	r3, r3, #1
 801b622:	68fa      	ldr	r2, [r7, #12]
 801b624:	8992      	ldrh	r2, [r2, #12]
 801b626:	fbb3 f0f2 	udiv	r0, r3, r2
 801b62a:	fb00 f202 	mul.w	r2, r0, r2
 801b62e:	1a9b      	subs	r3, r3, r2
 801b630:	440b      	add	r3, r1
 801b632:	687a      	ldr	r2, [r7, #4]
 801b634:	b292      	uxth	r2, r2
 801b636:	4611      	mov	r1, r2
 801b638:	4618      	mov	r0, r3
 801b63a:	f7ff fb32 	bl	801aca2 <st_word>
			fs->wflag = 1;
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	2201      	movs	r2, #1
 801b642:	70da      	strb	r2, [r3, #3]
			break;
 801b644:	e047      	b.n	801b6d6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	899b      	ldrh	r3, [r3, #12]
 801b64e:	089b      	lsrs	r3, r3, #2
 801b650:	b29b      	uxth	r3, r3
 801b652:	4619      	mov	r1, r3
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	fbb3 f3f1 	udiv	r3, r3, r1
 801b65a:	4413      	add	r3, r2
 801b65c:	4619      	mov	r1, r3
 801b65e:	68f8      	ldr	r0, [r7, #12]
 801b660:	f7ff fd94 	bl	801b18c <move_window>
 801b664:	4603      	mov	r3, r0
 801b666:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b668:	7ffb      	ldrb	r3, [r7, #31]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d132      	bne.n	801b6d4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	009b      	lsls	r3, r3, #2
 801b67e:	68fa      	ldr	r2, [r7, #12]
 801b680:	8992      	ldrh	r2, [r2, #12]
 801b682:	fbb3 f0f2 	udiv	r0, r3, r2
 801b686:	fb00 f202 	mul.w	r2, r0, r2
 801b68a:	1a9b      	subs	r3, r3, r2
 801b68c:	440b      	add	r3, r1
 801b68e:	4618      	mov	r0, r3
 801b690:	f7ff fae4 	bl	801ac5c <ld_dword>
 801b694:	4603      	mov	r3, r0
 801b696:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b69a:	4323      	orrs	r3, r4
 801b69c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b6a4:	68bb      	ldr	r3, [r7, #8]
 801b6a6:	009b      	lsls	r3, r3, #2
 801b6a8:	68fa      	ldr	r2, [r7, #12]
 801b6aa:	8992      	ldrh	r2, [r2, #12]
 801b6ac:	fbb3 f0f2 	udiv	r0, r3, r2
 801b6b0:	fb00 f202 	mul.w	r2, r0, r2
 801b6b4:	1a9b      	subs	r3, r3, r2
 801b6b6:	440b      	add	r3, r1
 801b6b8:	6879      	ldr	r1, [r7, #4]
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f7ff fb0c 	bl	801acd8 <st_dword>
			fs->wflag = 1;
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	2201      	movs	r2, #1
 801b6c4:	70da      	strb	r2, [r3, #3]
			break;
 801b6c6:	e006      	b.n	801b6d6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b6c8:	bf00      	nop
 801b6ca:	e004      	b.n	801b6d6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b6cc:	bf00      	nop
 801b6ce:	e002      	b.n	801b6d6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b6d0:	bf00      	nop
 801b6d2:	e000      	b.n	801b6d6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b6d4:	bf00      	nop
		}
	}
	return res;
 801b6d6:	7ffb      	ldrb	r3, [r7, #31]
}
 801b6d8:	4618      	mov	r0, r3
 801b6da:	3724      	adds	r7, #36	@ 0x24
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	bd90      	pop	{r4, r7, pc}

0801b6e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b088      	sub	sp, #32
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	60f8      	str	r0, [r7, #12]
 801b6e8:	60b9      	str	r1, [r7, #8]
 801b6ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	2b01      	cmp	r3, #1
 801b6fa:	d904      	bls.n	801b706 <remove_chain+0x26>
 801b6fc:	69bb      	ldr	r3, [r7, #24]
 801b6fe:	69db      	ldr	r3, [r3, #28]
 801b700:	68ba      	ldr	r2, [r7, #8]
 801b702:	429a      	cmp	r2, r3
 801b704:	d301      	bcc.n	801b70a <remove_chain+0x2a>
 801b706:	2302      	movs	r3, #2
 801b708:	e04b      	b.n	801b7a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d00c      	beq.n	801b72a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b710:	f04f 32ff 	mov.w	r2, #4294967295
 801b714:	6879      	ldr	r1, [r7, #4]
 801b716:	69b8      	ldr	r0, [r7, #24]
 801b718:	f7ff fec8 	bl	801b4ac <put_fat>
 801b71c:	4603      	mov	r3, r0
 801b71e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b720:	7ffb      	ldrb	r3, [r7, #31]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d001      	beq.n	801b72a <remove_chain+0x4a>
 801b726:	7ffb      	ldrb	r3, [r7, #31]
 801b728:	e03b      	b.n	801b7a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b72a:	68b9      	ldr	r1, [r7, #8]
 801b72c:	68f8      	ldr	r0, [r7, #12]
 801b72e:	f7ff fdea 	bl	801b306 <get_fat>
 801b732:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b734:	697b      	ldr	r3, [r7, #20]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d031      	beq.n	801b79e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b73a:	697b      	ldr	r3, [r7, #20]
 801b73c:	2b01      	cmp	r3, #1
 801b73e:	d101      	bne.n	801b744 <remove_chain+0x64>
 801b740:	2302      	movs	r3, #2
 801b742:	e02e      	b.n	801b7a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b744:	697b      	ldr	r3, [r7, #20]
 801b746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b74a:	d101      	bne.n	801b750 <remove_chain+0x70>
 801b74c:	2301      	movs	r3, #1
 801b74e:	e028      	b.n	801b7a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b750:	2200      	movs	r2, #0
 801b752:	68b9      	ldr	r1, [r7, #8]
 801b754:	69b8      	ldr	r0, [r7, #24]
 801b756:	f7ff fea9 	bl	801b4ac <put_fat>
 801b75a:	4603      	mov	r3, r0
 801b75c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b75e:	7ffb      	ldrb	r3, [r7, #31]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d001      	beq.n	801b768 <remove_chain+0x88>
 801b764:	7ffb      	ldrb	r3, [r7, #31]
 801b766:	e01c      	b.n	801b7a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b768:	69bb      	ldr	r3, [r7, #24]
 801b76a:	699a      	ldr	r2, [r3, #24]
 801b76c:	69bb      	ldr	r3, [r7, #24]
 801b76e:	69db      	ldr	r3, [r3, #28]
 801b770:	3b02      	subs	r3, #2
 801b772:	429a      	cmp	r2, r3
 801b774:	d20b      	bcs.n	801b78e <remove_chain+0xae>
			fs->free_clst++;
 801b776:	69bb      	ldr	r3, [r7, #24]
 801b778:	699b      	ldr	r3, [r3, #24]
 801b77a:	1c5a      	adds	r2, r3, #1
 801b77c:	69bb      	ldr	r3, [r7, #24]
 801b77e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b780:	69bb      	ldr	r3, [r7, #24]
 801b782:	791b      	ldrb	r3, [r3, #4]
 801b784:	f043 0301 	orr.w	r3, r3, #1
 801b788:	b2da      	uxtb	r2, r3
 801b78a:	69bb      	ldr	r3, [r7, #24]
 801b78c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b78e:	697b      	ldr	r3, [r7, #20]
 801b790:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b792:	69bb      	ldr	r3, [r7, #24]
 801b794:	69db      	ldr	r3, [r3, #28]
 801b796:	68ba      	ldr	r2, [r7, #8]
 801b798:	429a      	cmp	r2, r3
 801b79a:	d3c6      	bcc.n	801b72a <remove_chain+0x4a>
 801b79c:	e000      	b.n	801b7a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b79e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b7a0:	2300      	movs	r3, #0
}
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	3720      	adds	r7, #32
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bd80      	pop	{r7, pc}

0801b7aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b7aa:	b580      	push	{r7, lr}
 801b7ac:	b088      	sub	sp, #32
 801b7ae:	af00      	add	r7, sp, #0
 801b7b0:	6078      	str	r0, [r7, #4]
 801b7b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d10d      	bne.n	801b7dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b7c0:	693b      	ldr	r3, [r7, #16]
 801b7c2:	695b      	ldr	r3, [r3, #20]
 801b7c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d004      	beq.n	801b7d6 <create_chain+0x2c>
 801b7cc:	693b      	ldr	r3, [r7, #16]
 801b7ce:	69db      	ldr	r3, [r3, #28]
 801b7d0:	69ba      	ldr	r2, [r7, #24]
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d31b      	bcc.n	801b80e <create_chain+0x64>
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	61bb      	str	r3, [r7, #24]
 801b7da:	e018      	b.n	801b80e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b7dc:	6839      	ldr	r1, [r7, #0]
 801b7de:	6878      	ldr	r0, [r7, #4]
 801b7e0:	f7ff fd91 	bl	801b306 <get_fat>
 801b7e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	2b01      	cmp	r3, #1
 801b7ea:	d801      	bhi.n	801b7f0 <create_chain+0x46>
 801b7ec:	2301      	movs	r3, #1
 801b7ee:	e070      	b.n	801b8d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7f6:	d101      	bne.n	801b7fc <create_chain+0x52>
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	e06a      	b.n	801b8d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b7fc:	693b      	ldr	r3, [r7, #16]
 801b7fe:	69db      	ldr	r3, [r3, #28]
 801b800:	68fa      	ldr	r2, [r7, #12]
 801b802:	429a      	cmp	r2, r3
 801b804:	d201      	bcs.n	801b80a <create_chain+0x60>
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	e063      	b.n	801b8d2 <create_chain+0x128>
		scl = clst;
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b80e:	69bb      	ldr	r3, [r7, #24]
 801b810:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b812:	69fb      	ldr	r3, [r7, #28]
 801b814:	3301      	adds	r3, #1
 801b816:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	69db      	ldr	r3, [r3, #28]
 801b81c:	69fa      	ldr	r2, [r7, #28]
 801b81e:	429a      	cmp	r2, r3
 801b820:	d307      	bcc.n	801b832 <create_chain+0x88>
				ncl = 2;
 801b822:	2302      	movs	r3, #2
 801b824:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b826:	69fa      	ldr	r2, [r7, #28]
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	429a      	cmp	r2, r3
 801b82c:	d901      	bls.n	801b832 <create_chain+0x88>
 801b82e:	2300      	movs	r3, #0
 801b830:	e04f      	b.n	801b8d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b832:	69f9      	ldr	r1, [r7, #28]
 801b834:	6878      	ldr	r0, [r7, #4]
 801b836:	f7ff fd66 	bl	801b306 <get_fat>
 801b83a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d00e      	beq.n	801b860 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	2b01      	cmp	r3, #1
 801b846:	d003      	beq.n	801b850 <create_chain+0xa6>
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b84e:	d101      	bne.n	801b854 <create_chain+0xaa>
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	e03e      	b.n	801b8d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b854:	69fa      	ldr	r2, [r7, #28]
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	429a      	cmp	r2, r3
 801b85a:	d1da      	bne.n	801b812 <create_chain+0x68>
 801b85c:	2300      	movs	r3, #0
 801b85e:	e038      	b.n	801b8d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b860:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b862:	f04f 32ff 	mov.w	r2, #4294967295
 801b866:	69f9      	ldr	r1, [r7, #28]
 801b868:	6938      	ldr	r0, [r7, #16]
 801b86a:	f7ff fe1f 	bl	801b4ac <put_fat>
 801b86e:	4603      	mov	r3, r0
 801b870:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b872:	7dfb      	ldrb	r3, [r7, #23]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d109      	bne.n	801b88c <create_chain+0xe2>
 801b878:	683b      	ldr	r3, [r7, #0]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d006      	beq.n	801b88c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b87e:	69fa      	ldr	r2, [r7, #28]
 801b880:	6839      	ldr	r1, [r7, #0]
 801b882:	6938      	ldr	r0, [r7, #16]
 801b884:	f7ff fe12 	bl	801b4ac <put_fat>
 801b888:	4603      	mov	r3, r0
 801b88a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b88c:	7dfb      	ldrb	r3, [r7, #23]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d116      	bne.n	801b8c0 <create_chain+0x116>
		fs->last_clst = ncl;
 801b892:	693b      	ldr	r3, [r7, #16]
 801b894:	69fa      	ldr	r2, [r7, #28]
 801b896:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b898:	693b      	ldr	r3, [r7, #16]
 801b89a:	699a      	ldr	r2, [r3, #24]
 801b89c:	693b      	ldr	r3, [r7, #16]
 801b89e:	69db      	ldr	r3, [r3, #28]
 801b8a0:	3b02      	subs	r3, #2
 801b8a2:	429a      	cmp	r2, r3
 801b8a4:	d804      	bhi.n	801b8b0 <create_chain+0x106>
 801b8a6:	693b      	ldr	r3, [r7, #16]
 801b8a8:	699b      	ldr	r3, [r3, #24]
 801b8aa:	1e5a      	subs	r2, r3, #1
 801b8ac:	693b      	ldr	r3, [r7, #16]
 801b8ae:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b8b0:	693b      	ldr	r3, [r7, #16]
 801b8b2:	791b      	ldrb	r3, [r3, #4]
 801b8b4:	f043 0301 	orr.w	r3, r3, #1
 801b8b8:	b2da      	uxtb	r2, r3
 801b8ba:	693b      	ldr	r3, [r7, #16]
 801b8bc:	711a      	strb	r2, [r3, #4]
 801b8be:	e007      	b.n	801b8d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b8c0:	7dfb      	ldrb	r3, [r7, #23]
 801b8c2:	2b01      	cmp	r3, #1
 801b8c4:	d102      	bne.n	801b8cc <create_chain+0x122>
 801b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ca:	e000      	b.n	801b8ce <create_chain+0x124>
 801b8cc:	2301      	movs	r3, #1
 801b8ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b8d0:	69fb      	ldr	r3, [r7, #28]
}
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	3720      	adds	r7, #32
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bd80      	pop	{r7, pc}

0801b8da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b8da:	b480      	push	{r7}
 801b8dc:	b087      	sub	sp, #28
 801b8de:	af00      	add	r7, sp, #0
 801b8e0:	6078      	str	r0, [r7, #4]
 801b8e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8ee:	3304      	adds	r3, #4
 801b8f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	899b      	ldrh	r3, [r3, #12]
 801b8f6:	461a      	mov	r2, r3
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8fe:	68fa      	ldr	r2, [r7, #12]
 801b900:	8952      	ldrh	r2, [r2, #10]
 801b902:	fbb3 f3f2 	udiv	r3, r3, r2
 801b906:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b908:	693b      	ldr	r3, [r7, #16]
 801b90a:	1d1a      	adds	r2, r3, #4
 801b90c:	613a      	str	r2, [r7, #16]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b912:	68bb      	ldr	r3, [r7, #8]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d101      	bne.n	801b91c <clmt_clust+0x42>
 801b918:	2300      	movs	r3, #0
 801b91a:	e010      	b.n	801b93e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b91c:	697a      	ldr	r2, [r7, #20]
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	429a      	cmp	r2, r3
 801b922:	d307      	bcc.n	801b934 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b924:	697a      	ldr	r2, [r7, #20]
 801b926:	68bb      	ldr	r3, [r7, #8]
 801b928:	1ad3      	subs	r3, r2, r3
 801b92a:	617b      	str	r3, [r7, #20]
 801b92c:	693b      	ldr	r3, [r7, #16]
 801b92e:	3304      	adds	r3, #4
 801b930:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b932:	e7e9      	b.n	801b908 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b934:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b936:	693b      	ldr	r3, [r7, #16]
 801b938:	681a      	ldr	r2, [r3, #0]
 801b93a:	697b      	ldr	r3, [r7, #20]
 801b93c:	4413      	add	r3, r2
}
 801b93e:	4618      	mov	r0, r3
 801b940:	371c      	adds	r7, #28
 801b942:	46bd      	mov	sp, r7
 801b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b948:	4770      	bx	lr

0801b94a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b94a:	b580      	push	{r7, lr}
 801b94c:	b086      	sub	sp, #24
 801b94e:	af00      	add	r7, sp, #0
 801b950:	6078      	str	r0, [r7, #4]
 801b952:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b960:	d204      	bcs.n	801b96c <dir_sdi+0x22>
 801b962:	683b      	ldr	r3, [r7, #0]
 801b964:	f003 031f 	and.w	r3, r3, #31
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d001      	beq.n	801b970 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b96c:	2302      	movs	r3, #2
 801b96e:	e071      	b.n	801ba54 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	683a      	ldr	r2, [r7, #0]
 801b974:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	689b      	ldr	r3, [r3, #8]
 801b97a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b97c:	697b      	ldr	r3, [r7, #20]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d106      	bne.n	801b990 <dir_sdi+0x46>
 801b982:	693b      	ldr	r3, [r7, #16]
 801b984:	781b      	ldrb	r3, [r3, #0]
 801b986:	2b02      	cmp	r3, #2
 801b988:	d902      	bls.n	801b990 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b98a:	693b      	ldr	r3, [r7, #16]
 801b98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b98e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d10c      	bne.n	801b9b0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b996:	683b      	ldr	r3, [r7, #0]
 801b998:	095b      	lsrs	r3, r3, #5
 801b99a:	693a      	ldr	r2, [r7, #16]
 801b99c:	8912      	ldrh	r2, [r2, #8]
 801b99e:	4293      	cmp	r3, r2
 801b9a0:	d301      	bcc.n	801b9a6 <dir_sdi+0x5c>
 801b9a2:	2302      	movs	r3, #2
 801b9a4:	e056      	b.n	801ba54 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b9a6:	693b      	ldr	r3, [r7, #16]
 801b9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	61da      	str	r2, [r3, #28]
 801b9ae:	e02d      	b.n	801ba0c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	895b      	ldrh	r3, [r3, #10]
 801b9b4:	461a      	mov	r2, r3
 801b9b6:	693b      	ldr	r3, [r7, #16]
 801b9b8:	899b      	ldrh	r3, [r3, #12]
 801b9ba:	fb02 f303 	mul.w	r3, r2, r3
 801b9be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b9c0:	e019      	b.n	801b9f6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6979      	ldr	r1, [r7, #20]
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	f7ff fc9d 	bl	801b306 <get_fat>
 801b9cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b9ce:	697b      	ldr	r3, [r7, #20]
 801b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9d4:	d101      	bne.n	801b9da <dir_sdi+0x90>
 801b9d6:	2301      	movs	r3, #1
 801b9d8:	e03c      	b.n	801ba54 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	2b01      	cmp	r3, #1
 801b9de:	d904      	bls.n	801b9ea <dir_sdi+0xa0>
 801b9e0:	693b      	ldr	r3, [r7, #16]
 801b9e2:	69db      	ldr	r3, [r3, #28]
 801b9e4:	697a      	ldr	r2, [r7, #20]
 801b9e6:	429a      	cmp	r2, r3
 801b9e8:	d301      	bcc.n	801b9ee <dir_sdi+0xa4>
 801b9ea:	2302      	movs	r3, #2
 801b9ec:	e032      	b.n	801ba54 <dir_sdi+0x10a>
			ofs -= csz;
 801b9ee:	683a      	ldr	r2, [r7, #0]
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	1ad3      	subs	r3, r2, r3
 801b9f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b9f6:	683a      	ldr	r2, [r7, #0]
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	429a      	cmp	r2, r3
 801b9fc:	d2e1      	bcs.n	801b9c2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b9fe:	6979      	ldr	r1, [r7, #20]
 801ba00:	6938      	ldr	r0, [r7, #16]
 801ba02:	f7ff fc61 	bl	801b2c8 <clust2sect>
 801ba06:	4602      	mov	r2, r0
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	697a      	ldr	r2, [r7, #20]
 801ba10:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	69db      	ldr	r3, [r3, #28]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d101      	bne.n	801ba1e <dir_sdi+0xd4>
 801ba1a:	2302      	movs	r3, #2
 801ba1c:	e01a      	b.n	801ba54 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	69da      	ldr	r2, [r3, #28]
 801ba22:	693b      	ldr	r3, [r7, #16]
 801ba24:	899b      	ldrh	r3, [r3, #12]
 801ba26:	4619      	mov	r1, r3
 801ba28:	683b      	ldr	r3, [r7, #0]
 801ba2a:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba2e:	441a      	add	r2, r3
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801ba34:	693b      	ldr	r3, [r7, #16]
 801ba36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba3a:	693b      	ldr	r3, [r7, #16]
 801ba3c:	899b      	ldrh	r3, [r3, #12]
 801ba3e:	461a      	mov	r2, r3
 801ba40:	683b      	ldr	r3, [r7, #0]
 801ba42:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba46:	fb00 f202 	mul.w	r2, r0, r2
 801ba4a:	1a9b      	subs	r3, r3, r2
 801ba4c:	18ca      	adds	r2, r1, r3
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ba52:	2300      	movs	r3, #0
}
 801ba54:	4618      	mov	r0, r3
 801ba56:	3718      	adds	r7, #24
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bd80      	pop	{r7, pc}

0801ba5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b086      	sub	sp, #24
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
 801ba64:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	695b      	ldr	r3, [r3, #20]
 801ba70:	3320      	adds	r3, #32
 801ba72:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	69db      	ldr	r3, [r3, #28]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d003      	beq.n	801ba84 <dir_next+0x28>
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ba82:	d301      	bcc.n	801ba88 <dir_next+0x2c>
 801ba84:	2304      	movs	r3, #4
 801ba86:	e0bb      	b.n	801bc00 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	899b      	ldrh	r3, [r3, #12]
 801ba8c:	461a      	mov	r2, r3
 801ba8e:	68bb      	ldr	r3, [r7, #8]
 801ba90:	fbb3 f1f2 	udiv	r1, r3, r2
 801ba94:	fb01 f202 	mul.w	r2, r1, r2
 801ba98:	1a9b      	subs	r3, r3, r2
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	f040 809d 	bne.w	801bbda <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	69db      	ldr	r3, [r3, #28]
 801baa4:	1c5a      	adds	r2, r3, #1
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	699b      	ldr	r3, [r3, #24]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d10b      	bne.n	801baca <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bab2:	68bb      	ldr	r3, [r7, #8]
 801bab4:	095b      	lsrs	r3, r3, #5
 801bab6:	68fa      	ldr	r2, [r7, #12]
 801bab8:	8912      	ldrh	r2, [r2, #8]
 801baba:	4293      	cmp	r3, r2
 801babc:	f0c0 808d 	bcc.w	801bbda <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	2200      	movs	r2, #0
 801bac4:	61da      	str	r2, [r3, #28]
 801bac6:	2304      	movs	r3, #4
 801bac8:	e09a      	b.n	801bc00 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	899b      	ldrh	r3, [r3, #12]
 801bace:	461a      	mov	r2, r3
 801bad0:	68bb      	ldr	r3, [r7, #8]
 801bad2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bad6:	68fa      	ldr	r2, [r7, #12]
 801bad8:	8952      	ldrh	r2, [r2, #10]
 801bada:	3a01      	subs	r2, #1
 801badc:	4013      	ands	r3, r2
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d17b      	bne.n	801bbda <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801bae2:	687a      	ldr	r2, [r7, #4]
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	699b      	ldr	r3, [r3, #24]
 801bae8:	4619      	mov	r1, r3
 801baea:	4610      	mov	r0, r2
 801baec:	f7ff fc0b 	bl	801b306 <get_fat>
 801baf0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801baf2:	697b      	ldr	r3, [r7, #20]
 801baf4:	2b01      	cmp	r3, #1
 801baf6:	d801      	bhi.n	801bafc <dir_next+0xa0>
 801baf8:	2302      	movs	r3, #2
 801bafa:	e081      	b.n	801bc00 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb02:	d101      	bne.n	801bb08 <dir_next+0xac>
 801bb04:	2301      	movs	r3, #1
 801bb06:	e07b      	b.n	801bc00 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	69db      	ldr	r3, [r3, #28]
 801bb0c:	697a      	ldr	r2, [r7, #20]
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d359      	bcc.n	801bbc6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801bb12:	683b      	ldr	r3, [r7, #0]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d104      	bne.n	801bb22 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	61da      	str	r2, [r3, #28]
 801bb1e:	2304      	movs	r3, #4
 801bb20:	e06e      	b.n	801bc00 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bb22:	687a      	ldr	r2, [r7, #4]
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	699b      	ldr	r3, [r3, #24]
 801bb28:	4619      	mov	r1, r3
 801bb2a:	4610      	mov	r0, r2
 801bb2c:	f7ff fe3d 	bl	801b7aa <create_chain>
 801bb30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d101      	bne.n	801bb3c <dir_next+0xe0>
 801bb38:	2307      	movs	r3, #7
 801bb3a:	e061      	b.n	801bc00 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	2b01      	cmp	r3, #1
 801bb40:	d101      	bne.n	801bb46 <dir_next+0xea>
 801bb42:	2302      	movs	r3, #2
 801bb44:	e05c      	b.n	801bc00 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb4c:	d101      	bne.n	801bb52 <dir_next+0xf6>
 801bb4e:	2301      	movs	r3, #1
 801bb50:	e056      	b.n	801bc00 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bb52:	68f8      	ldr	r0, [r7, #12]
 801bb54:	f7ff fad6 	bl	801b104 <sync_window>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d001      	beq.n	801bb62 <dir_next+0x106>
 801bb5e:	2301      	movs	r3, #1
 801bb60:	e04e      	b.n	801bc00 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	899b      	ldrh	r3, [r3, #12]
 801bb6c:	461a      	mov	r2, r3
 801bb6e:	2100      	movs	r1, #0
 801bb70:	f7ff f8ff 	bl	801ad72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bb74:	2300      	movs	r3, #0
 801bb76:	613b      	str	r3, [r7, #16]
 801bb78:	6979      	ldr	r1, [r7, #20]
 801bb7a:	68f8      	ldr	r0, [r7, #12]
 801bb7c:	f7ff fba4 	bl	801b2c8 <clust2sect>
 801bb80:	4602      	mov	r2, r0
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	635a      	str	r2, [r3, #52]	@ 0x34
 801bb86:	e012      	b.n	801bbae <dir_next+0x152>
						fs->wflag = 1;
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	2201      	movs	r2, #1
 801bb8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bb8e:	68f8      	ldr	r0, [r7, #12]
 801bb90:	f7ff fab8 	bl	801b104 <sync_window>
 801bb94:	4603      	mov	r3, r0
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d001      	beq.n	801bb9e <dir_next+0x142>
 801bb9a:	2301      	movs	r3, #1
 801bb9c:	e030      	b.n	801bc00 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bb9e:	693b      	ldr	r3, [r7, #16]
 801bba0:	3301      	adds	r3, #1
 801bba2:	613b      	str	r3, [r7, #16]
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bba8:	1c5a      	adds	r2, r3, #1
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	635a      	str	r2, [r3, #52]	@ 0x34
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	895b      	ldrh	r3, [r3, #10]
 801bbb2:	461a      	mov	r2, r3
 801bbb4:	693b      	ldr	r3, [r7, #16]
 801bbb6:	4293      	cmp	r3, r2
 801bbb8:	d3e6      	bcc.n	801bb88 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bbbe:	693b      	ldr	r3, [r7, #16]
 801bbc0:	1ad2      	subs	r2, r2, r3
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	697a      	ldr	r2, [r7, #20]
 801bbca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bbcc:	6979      	ldr	r1, [r7, #20]
 801bbce:	68f8      	ldr	r0, [r7, #12]
 801bbd0:	f7ff fb7a 	bl	801b2c8 <clust2sect>
 801bbd4:	4602      	mov	r2, r0
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	68ba      	ldr	r2, [r7, #8]
 801bbde:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	899b      	ldrh	r3, [r3, #12]
 801bbea:	461a      	mov	r2, r3
 801bbec:	68bb      	ldr	r3, [r7, #8]
 801bbee:	fbb3 f0f2 	udiv	r0, r3, r2
 801bbf2:	fb00 f202 	mul.w	r2, r0, r2
 801bbf6:	1a9b      	subs	r3, r3, r2
 801bbf8:	18ca      	adds	r2, r1, r3
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bbfe:	2300      	movs	r3, #0
}
 801bc00:	4618      	mov	r0, r3
 801bc02:	3718      	adds	r7, #24
 801bc04:	46bd      	mov	sp, r7
 801bc06:	bd80      	pop	{r7, pc}

0801bc08 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b086      	sub	sp, #24
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
 801bc10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bc18:	2100      	movs	r1, #0
 801bc1a:	6878      	ldr	r0, [r7, #4]
 801bc1c:	f7ff fe95 	bl	801b94a <dir_sdi>
 801bc20:	4603      	mov	r3, r0
 801bc22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc24:	7dfb      	ldrb	r3, [r7, #23]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d12b      	bne.n	801bc82 <dir_alloc+0x7a>
		n = 0;
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	69db      	ldr	r3, [r3, #28]
 801bc32:	4619      	mov	r1, r3
 801bc34:	68f8      	ldr	r0, [r7, #12]
 801bc36:	f7ff faa9 	bl	801b18c <move_window>
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bc3e:	7dfb      	ldrb	r3, [r7, #23]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d11d      	bne.n	801bc80 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	6a1b      	ldr	r3, [r3, #32]
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	2be5      	cmp	r3, #229	@ 0xe5
 801bc4c:	d004      	beq.n	801bc58 <dir_alloc+0x50>
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	6a1b      	ldr	r3, [r3, #32]
 801bc52:	781b      	ldrb	r3, [r3, #0]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d107      	bne.n	801bc68 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bc58:	693b      	ldr	r3, [r7, #16]
 801bc5a:	3301      	adds	r3, #1
 801bc5c:	613b      	str	r3, [r7, #16]
 801bc5e:	693a      	ldr	r2, [r7, #16]
 801bc60:	683b      	ldr	r3, [r7, #0]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d102      	bne.n	801bc6c <dir_alloc+0x64>
 801bc66:	e00c      	b.n	801bc82 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bc68:	2300      	movs	r3, #0
 801bc6a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bc6c:	2101      	movs	r1, #1
 801bc6e:	6878      	ldr	r0, [r7, #4]
 801bc70:	f7ff fef4 	bl	801ba5c <dir_next>
 801bc74:	4603      	mov	r3, r0
 801bc76:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bc78:	7dfb      	ldrb	r3, [r7, #23]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d0d7      	beq.n	801bc2e <dir_alloc+0x26>
 801bc7e:	e000      	b.n	801bc82 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bc80:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bc82:	7dfb      	ldrb	r3, [r7, #23]
 801bc84:	2b04      	cmp	r3, #4
 801bc86:	d101      	bne.n	801bc8c <dir_alloc+0x84>
 801bc88:	2307      	movs	r3, #7
 801bc8a:	75fb      	strb	r3, [r7, #23]
	return res;
 801bc8c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	3718      	adds	r7, #24
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd80      	pop	{r7, pc}

0801bc96 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bc96:	b580      	push	{r7, lr}
 801bc98:	b084      	sub	sp, #16
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	6078      	str	r0, [r7, #4]
 801bc9e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bca0:	683b      	ldr	r3, [r7, #0]
 801bca2:	331a      	adds	r3, #26
 801bca4:	4618      	mov	r0, r3
 801bca6:	f7fe ffc1 	bl	801ac2c <ld_word>
 801bcaa:	4603      	mov	r3, r0
 801bcac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	781b      	ldrb	r3, [r3, #0]
 801bcb2:	2b03      	cmp	r3, #3
 801bcb4:	d109      	bne.n	801bcca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bcb6:	683b      	ldr	r3, [r7, #0]
 801bcb8:	3314      	adds	r3, #20
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f7fe ffb6 	bl	801ac2c <ld_word>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	041b      	lsls	r3, r3, #16
 801bcc4:	68fa      	ldr	r2, [r7, #12]
 801bcc6:	4313      	orrs	r3, r2
 801bcc8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bcca:	68fb      	ldr	r3, [r7, #12]
}
 801bccc:	4618      	mov	r0, r3
 801bcce:	3710      	adds	r7, #16
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	bd80      	pop	{r7, pc}

0801bcd4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b084      	sub	sp, #16
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	60f8      	str	r0, [r7, #12]
 801bcdc:	60b9      	str	r1, [r7, #8]
 801bcde:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801bce0:	68bb      	ldr	r3, [r7, #8]
 801bce2:	331a      	adds	r3, #26
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	b292      	uxth	r2, r2
 801bce8:	4611      	mov	r1, r2
 801bcea:	4618      	mov	r0, r3
 801bcec:	f7fe ffd9 	bl	801aca2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	781b      	ldrb	r3, [r3, #0]
 801bcf4:	2b03      	cmp	r3, #3
 801bcf6:	d109      	bne.n	801bd0c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801bcf8:	68bb      	ldr	r3, [r7, #8]
 801bcfa:	f103 0214 	add.w	r2, r3, #20
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	0c1b      	lsrs	r3, r3, #16
 801bd02:	b29b      	uxth	r3, r3
 801bd04:	4619      	mov	r1, r3
 801bd06:	4610      	mov	r0, r2
 801bd08:	f7fe ffcb 	bl	801aca2 <st_word>
	}
}
 801bd0c:	bf00      	nop
 801bd0e:	3710      	adds	r7, #16
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}

0801bd14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801bd14:	b590      	push	{r4, r7, lr}
 801bd16:	b087      	sub	sp, #28
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
 801bd1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	331a      	adds	r3, #26
 801bd22:	4618      	mov	r0, r3
 801bd24:	f7fe ff82 	bl	801ac2c <ld_word>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d001      	beq.n	801bd32 <cmp_lfn+0x1e>
 801bd2e:	2300      	movs	r3, #0
 801bd30:	e059      	b.n	801bde6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801bd32:	683b      	ldr	r3, [r7, #0]
 801bd34:	781b      	ldrb	r3, [r3, #0]
 801bd36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bd3a:	1e5a      	subs	r2, r3, #1
 801bd3c:	4613      	mov	r3, r2
 801bd3e:	005b      	lsls	r3, r3, #1
 801bd40:	4413      	add	r3, r2
 801bd42:	009b      	lsls	r3, r3, #2
 801bd44:	4413      	add	r3, r2
 801bd46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bd48:	2301      	movs	r3, #1
 801bd4a:	81fb      	strh	r3, [r7, #14]
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	613b      	str	r3, [r7, #16]
 801bd50:	e033      	b.n	801bdba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bd52:	4a27      	ldr	r2, [pc, #156]	@ (801bdf0 <cmp_lfn+0xdc>)
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	4413      	add	r3, r2
 801bd58:	781b      	ldrb	r3, [r3, #0]
 801bd5a:	461a      	mov	r2, r3
 801bd5c:	683b      	ldr	r3, [r7, #0]
 801bd5e:	4413      	add	r3, r2
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7fe ff63 	bl	801ac2c <ld_word>
 801bd66:	4603      	mov	r3, r0
 801bd68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bd6a:	89fb      	ldrh	r3, [r7, #14]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d01a      	beq.n	801bda6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	2bfe      	cmp	r3, #254	@ 0xfe
 801bd74:	d812      	bhi.n	801bd9c <cmp_lfn+0x88>
 801bd76:	89bb      	ldrh	r3, [r7, #12]
 801bd78:	4618      	mov	r0, r3
 801bd7a:	f001 ff71 	bl	801dc60 <ff_wtoupper>
 801bd7e:	4603      	mov	r3, r0
 801bd80:	461c      	mov	r4, r3
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	1c5a      	adds	r2, r3, #1
 801bd86:	617a      	str	r2, [r7, #20]
 801bd88:	005b      	lsls	r3, r3, #1
 801bd8a:	687a      	ldr	r2, [r7, #4]
 801bd8c:	4413      	add	r3, r2
 801bd8e:	881b      	ldrh	r3, [r3, #0]
 801bd90:	4618      	mov	r0, r3
 801bd92:	f001 ff65 	bl	801dc60 <ff_wtoupper>
 801bd96:	4603      	mov	r3, r0
 801bd98:	429c      	cmp	r4, r3
 801bd9a:	d001      	beq.n	801bda0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	e022      	b.n	801bde6 <cmp_lfn+0xd2>
			}
			wc = uc;
 801bda0:	89bb      	ldrh	r3, [r7, #12]
 801bda2:	81fb      	strh	r3, [r7, #14]
 801bda4:	e006      	b.n	801bdb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bda6:	89bb      	ldrh	r3, [r7, #12]
 801bda8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bdac:	4293      	cmp	r3, r2
 801bdae:	d001      	beq.n	801bdb4 <cmp_lfn+0xa0>
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	e018      	b.n	801bde6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bdb4:	693b      	ldr	r3, [r7, #16]
 801bdb6:	3301      	adds	r3, #1
 801bdb8:	613b      	str	r3, [r7, #16]
 801bdba:	693b      	ldr	r3, [r7, #16]
 801bdbc:	2b0c      	cmp	r3, #12
 801bdbe:	d9c8      	bls.n	801bd52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801bdc0:	683b      	ldr	r3, [r7, #0]
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d00b      	beq.n	801bde4 <cmp_lfn+0xd0>
 801bdcc:	89fb      	ldrh	r3, [r7, #14]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d008      	beq.n	801bde4 <cmp_lfn+0xd0>
 801bdd2:	697b      	ldr	r3, [r7, #20]
 801bdd4:	005b      	lsls	r3, r3, #1
 801bdd6:	687a      	ldr	r2, [r7, #4]
 801bdd8:	4413      	add	r3, r2
 801bdda:	881b      	ldrh	r3, [r3, #0]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d001      	beq.n	801bde4 <cmp_lfn+0xd0>
 801bde0:	2300      	movs	r3, #0
 801bde2:	e000      	b.n	801bde6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801bde4:	2301      	movs	r3, #1
}
 801bde6:	4618      	mov	r0, r3
 801bde8:	371c      	adds	r7, #28
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd90      	pop	{r4, r7, pc}
 801bdee:	bf00      	nop
 801bdf0:	0801e8fc 	.word	0x0801e8fc

0801bdf4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b086      	sub	sp, #24
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
 801bdfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801bdfe:	683b      	ldr	r3, [r7, #0]
 801be00:	331a      	adds	r3, #26
 801be02:	4618      	mov	r0, r3
 801be04:	f7fe ff12 	bl	801ac2c <ld_word>
 801be08:	4603      	mov	r3, r0
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d001      	beq.n	801be12 <pick_lfn+0x1e>
 801be0e:	2300      	movs	r3, #0
 801be10:	e04d      	b.n	801beae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801be12:	683b      	ldr	r3, [r7, #0]
 801be14:	781b      	ldrb	r3, [r3, #0]
 801be16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801be1a:	1e5a      	subs	r2, r3, #1
 801be1c:	4613      	mov	r3, r2
 801be1e:	005b      	lsls	r3, r3, #1
 801be20:	4413      	add	r3, r2
 801be22:	009b      	lsls	r3, r3, #2
 801be24:	4413      	add	r3, r2
 801be26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801be28:	2301      	movs	r3, #1
 801be2a:	81fb      	strh	r3, [r7, #14]
 801be2c:	2300      	movs	r3, #0
 801be2e:	613b      	str	r3, [r7, #16]
 801be30:	e028      	b.n	801be84 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801be32:	4a21      	ldr	r2, [pc, #132]	@ (801beb8 <pick_lfn+0xc4>)
 801be34:	693b      	ldr	r3, [r7, #16]
 801be36:	4413      	add	r3, r2
 801be38:	781b      	ldrb	r3, [r3, #0]
 801be3a:	461a      	mov	r2, r3
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	4413      	add	r3, r2
 801be40:	4618      	mov	r0, r3
 801be42:	f7fe fef3 	bl	801ac2c <ld_word>
 801be46:	4603      	mov	r3, r0
 801be48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801be4a:	89fb      	ldrh	r3, [r7, #14]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d00f      	beq.n	801be70 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801be50:	697b      	ldr	r3, [r7, #20]
 801be52:	2bfe      	cmp	r3, #254	@ 0xfe
 801be54:	d901      	bls.n	801be5a <pick_lfn+0x66>
 801be56:	2300      	movs	r3, #0
 801be58:	e029      	b.n	801beae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801be5a:	89bb      	ldrh	r3, [r7, #12]
 801be5c:	81fb      	strh	r3, [r7, #14]
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	1c5a      	adds	r2, r3, #1
 801be62:	617a      	str	r2, [r7, #20]
 801be64:	005b      	lsls	r3, r3, #1
 801be66:	687a      	ldr	r2, [r7, #4]
 801be68:	4413      	add	r3, r2
 801be6a:	89fa      	ldrh	r2, [r7, #14]
 801be6c:	801a      	strh	r2, [r3, #0]
 801be6e:	e006      	b.n	801be7e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801be70:	89bb      	ldrh	r3, [r7, #12]
 801be72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be76:	4293      	cmp	r3, r2
 801be78:	d001      	beq.n	801be7e <pick_lfn+0x8a>
 801be7a:	2300      	movs	r3, #0
 801be7c:	e017      	b.n	801beae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801be7e:	693b      	ldr	r3, [r7, #16]
 801be80:	3301      	adds	r3, #1
 801be82:	613b      	str	r3, [r7, #16]
 801be84:	693b      	ldr	r3, [r7, #16]
 801be86:	2b0c      	cmp	r3, #12
 801be88:	d9d3      	bls.n	801be32 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801be8a:	683b      	ldr	r3, [r7, #0]
 801be8c:	781b      	ldrb	r3, [r3, #0]
 801be8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801be92:	2b00      	cmp	r3, #0
 801be94:	d00a      	beq.n	801beac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801be96:	697b      	ldr	r3, [r7, #20]
 801be98:	2bfe      	cmp	r3, #254	@ 0xfe
 801be9a:	d901      	bls.n	801bea0 <pick_lfn+0xac>
 801be9c:	2300      	movs	r3, #0
 801be9e:	e006      	b.n	801beae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801bea0:	697b      	ldr	r3, [r7, #20]
 801bea2:	005b      	lsls	r3, r3, #1
 801bea4:	687a      	ldr	r2, [r7, #4]
 801bea6:	4413      	add	r3, r2
 801bea8:	2200      	movs	r2, #0
 801beaa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801beac:	2301      	movs	r3, #1
}
 801beae:	4618      	mov	r0, r3
 801beb0:	3718      	adds	r7, #24
 801beb2:	46bd      	mov	sp, r7
 801beb4:	bd80      	pop	{r7, pc}
 801beb6:	bf00      	nop
 801beb8:	0801e8fc 	.word	0x0801e8fc

0801bebc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b088      	sub	sp, #32
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	60f8      	str	r0, [r7, #12]
 801bec4:	60b9      	str	r1, [r7, #8]
 801bec6:	4611      	mov	r1, r2
 801bec8:	461a      	mov	r2, r3
 801beca:	460b      	mov	r3, r1
 801becc:	71fb      	strb	r3, [r7, #7]
 801bece:	4613      	mov	r3, r2
 801bed0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801bed2:	68bb      	ldr	r3, [r7, #8]
 801bed4:	330d      	adds	r3, #13
 801bed6:	79ba      	ldrb	r2, [r7, #6]
 801bed8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801beda:	68bb      	ldr	r3, [r7, #8]
 801bedc:	330b      	adds	r3, #11
 801bede:	220f      	movs	r2, #15
 801bee0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	330c      	adds	r3, #12
 801bee6:	2200      	movs	r2, #0
 801bee8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801beea:	68bb      	ldr	r3, [r7, #8]
 801beec:	331a      	adds	r3, #26
 801beee:	2100      	movs	r1, #0
 801bef0:	4618      	mov	r0, r3
 801bef2:	f7fe fed6 	bl	801aca2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801bef6:	79fb      	ldrb	r3, [r7, #7]
 801bef8:	1e5a      	subs	r2, r3, #1
 801befa:	4613      	mov	r3, r2
 801befc:	005b      	lsls	r3, r3, #1
 801befe:	4413      	add	r3, r2
 801bf00:	009b      	lsls	r3, r3, #2
 801bf02:	4413      	add	r3, r2
 801bf04:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801bf06:	2300      	movs	r3, #0
 801bf08:	82fb      	strh	r3, [r7, #22]
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801bf0e:	8afb      	ldrh	r3, [r7, #22]
 801bf10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bf14:	4293      	cmp	r3, r2
 801bf16:	d007      	beq.n	801bf28 <put_lfn+0x6c>
 801bf18:	69fb      	ldr	r3, [r7, #28]
 801bf1a:	1c5a      	adds	r2, r3, #1
 801bf1c:	61fa      	str	r2, [r7, #28]
 801bf1e:	005b      	lsls	r3, r3, #1
 801bf20:	68fa      	ldr	r2, [r7, #12]
 801bf22:	4413      	add	r3, r2
 801bf24:	881b      	ldrh	r3, [r3, #0]
 801bf26:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801bf28:	4a17      	ldr	r2, [pc, #92]	@ (801bf88 <put_lfn+0xcc>)
 801bf2a:	69bb      	ldr	r3, [r7, #24]
 801bf2c:	4413      	add	r3, r2
 801bf2e:	781b      	ldrb	r3, [r3, #0]
 801bf30:	461a      	mov	r2, r3
 801bf32:	68bb      	ldr	r3, [r7, #8]
 801bf34:	4413      	add	r3, r2
 801bf36:	8afa      	ldrh	r2, [r7, #22]
 801bf38:	4611      	mov	r1, r2
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f7fe feb1 	bl	801aca2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801bf40:	8afb      	ldrh	r3, [r7, #22]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d102      	bne.n	801bf4c <put_lfn+0x90>
 801bf46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bf4a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801bf4c:	69bb      	ldr	r3, [r7, #24]
 801bf4e:	3301      	adds	r3, #1
 801bf50:	61bb      	str	r3, [r7, #24]
 801bf52:	69bb      	ldr	r3, [r7, #24]
 801bf54:	2b0c      	cmp	r3, #12
 801bf56:	d9da      	bls.n	801bf0e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801bf58:	8afb      	ldrh	r3, [r7, #22]
 801bf5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bf5e:	4293      	cmp	r3, r2
 801bf60:	d006      	beq.n	801bf70 <put_lfn+0xb4>
 801bf62:	69fb      	ldr	r3, [r7, #28]
 801bf64:	005b      	lsls	r3, r3, #1
 801bf66:	68fa      	ldr	r2, [r7, #12]
 801bf68:	4413      	add	r3, r2
 801bf6a:	881b      	ldrh	r3, [r3, #0]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d103      	bne.n	801bf78 <put_lfn+0xbc>
 801bf70:	79fb      	ldrb	r3, [r7, #7]
 801bf72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf76:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	79fa      	ldrb	r2, [r7, #7]
 801bf7c:	701a      	strb	r2, [r3, #0]
}
 801bf7e:	bf00      	nop
 801bf80:	3720      	adds	r7, #32
 801bf82:	46bd      	mov	sp, r7
 801bf84:	bd80      	pop	{r7, pc}
 801bf86:	bf00      	nop
 801bf88:	0801e8fc 	.word	0x0801e8fc

0801bf8c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b08c      	sub	sp, #48	@ 0x30
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	60f8      	str	r0, [r7, #12]
 801bf94:	60b9      	str	r1, [r7, #8]
 801bf96:	607a      	str	r2, [r7, #4]
 801bf98:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801bf9a:	220b      	movs	r2, #11
 801bf9c:	68b9      	ldr	r1, [r7, #8]
 801bf9e:	68f8      	ldr	r0, [r7, #12]
 801bfa0:	f7fe fec6 	bl	801ad30 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801bfa4:	683b      	ldr	r3, [r7, #0]
 801bfa6:	2b05      	cmp	r3, #5
 801bfa8:	d929      	bls.n	801bffe <gen_numname+0x72>
		sr = seq;
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801bfae:	e020      	b.n	801bff2 <gen_numname+0x66>
			wc = *lfn++;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	1c9a      	adds	r2, r3, #2
 801bfb4:	607a      	str	r2, [r7, #4]
 801bfb6:	881b      	ldrh	r3, [r3, #0]
 801bfb8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801bfba:	2300      	movs	r3, #0
 801bfbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bfbe:	e015      	b.n	801bfec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801bfc0:	69fb      	ldr	r3, [r7, #28]
 801bfc2:	005a      	lsls	r2, r3, #1
 801bfc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bfc6:	f003 0301 	and.w	r3, r3, #1
 801bfca:	4413      	add	r3, r2
 801bfcc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801bfce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bfd0:	085b      	lsrs	r3, r3, #1
 801bfd2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801bfd4:	69fb      	ldr	r3, [r7, #28]
 801bfd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d003      	beq.n	801bfe6 <gen_numname+0x5a>
 801bfde:	69fa      	ldr	r2, [r7, #28]
 801bfe0:	4b30      	ldr	r3, [pc, #192]	@ (801c0a4 <gen_numname+0x118>)
 801bfe2:	4053      	eors	r3, r2
 801bfe4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801bfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfe8:	3301      	adds	r3, #1
 801bfea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfee:	2b0f      	cmp	r3, #15
 801bff0:	d9e6      	bls.n	801bfc0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	881b      	ldrh	r3, [r3, #0]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d1da      	bne.n	801bfb0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801bffa:	69fb      	ldr	r3, [r7, #28]
 801bffc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801bffe:	2307      	movs	r3, #7
 801c000:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c002:	683b      	ldr	r3, [r7, #0]
 801c004:	b2db      	uxtb	r3, r3
 801c006:	f003 030f 	and.w	r3, r3, #15
 801c00a:	b2db      	uxtb	r3, r3
 801c00c:	3330      	adds	r3, #48	@ 0x30
 801c00e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c016:	2b39      	cmp	r3, #57	@ 0x39
 801c018:	d904      	bls.n	801c024 <gen_numname+0x98>
 801c01a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c01e:	3307      	adds	r3, #7
 801c020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c026:	1e5a      	subs	r2, r3, #1
 801c028:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c02a:	3330      	adds	r3, #48	@ 0x30
 801c02c:	443b      	add	r3, r7
 801c02e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c032:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c036:	683b      	ldr	r3, [r7, #0]
 801c038:	091b      	lsrs	r3, r3, #4
 801c03a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c03c:	683b      	ldr	r3, [r7, #0]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d1df      	bne.n	801c002 <gen_numname+0x76>
	ns[i] = '~';
 801c042:	f107 0214 	add.w	r2, r7, #20
 801c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c048:	4413      	add	r3, r2
 801c04a:	227e      	movs	r2, #126	@ 0x7e
 801c04c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c04e:	2300      	movs	r3, #0
 801c050:	627b      	str	r3, [r7, #36]	@ 0x24
 801c052:	e002      	b.n	801c05a <gen_numname+0xce>
 801c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c056:	3301      	adds	r3, #1
 801c058:	627b      	str	r3, [r7, #36]	@ 0x24
 801c05a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c05e:	429a      	cmp	r2, r3
 801c060:	d205      	bcs.n	801c06e <gen_numname+0xe2>
 801c062:	68fa      	ldr	r2, [r7, #12]
 801c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c066:	4413      	add	r3, r2
 801c068:	781b      	ldrb	r3, [r3, #0]
 801c06a:	2b20      	cmp	r3, #32
 801c06c:	d1f2      	bne.n	801c054 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c070:	2b07      	cmp	r3, #7
 801c072:	d807      	bhi.n	801c084 <gen_numname+0xf8>
 801c074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c076:	1c5a      	adds	r2, r3, #1
 801c078:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c07a:	3330      	adds	r3, #48	@ 0x30
 801c07c:	443b      	add	r3, r7
 801c07e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c082:	e000      	b.n	801c086 <gen_numname+0xfa>
 801c084:	2120      	movs	r1, #32
 801c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c088:	1c5a      	adds	r2, r3, #1
 801c08a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c08c:	68fa      	ldr	r2, [r7, #12]
 801c08e:	4413      	add	r3, r2
 801c090:	460a      	mov	r2, r1
 801c092:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c096:	2b07      	cmp	r3, #7
 801c098:	d9e9      	bls.n	801c06e <gen_numname+0xe2>
}
 801c09a:	bf00      	nop
 801c09c:	bf00      	nop
 801c09e:	3730      	adds	r7, #48	@ 0x30
 801c0a0:	46bd      	mov	sp, r7
 801c0a2:	bd80      	pop	{r7, pc}
 801c0a4:	00011021 	.word	0x00011021

0801c0a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c0a8:	b480      	push	{r7}
 801c0aa:	b085      	sub	sp, #20
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c0b4:	230b      	movs	r3, #11
 801c0b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c0b8:	7bfb      	ldrb	r3, [r7, #15]
 801c0ba:	b2da      	uxtb	r2, r3
 801c0bc:	0852      	lsrs	r2, r2, #1
 801c0be:	01db      	lsls	r3, r3, #7
 801c0c0:	4313      	orrs	r3, r2
 801c0c2:	b2da      	uxtb	r2, r3
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	1c59      	adds	r1, r3, #1
 801c0c8:	6079      	str	r1, [r7, #4]
 801c0ca:	781b      	ldrb	r3, [r3, #0]
 801c0cc:	4413      	add	r3, r2
 801c0ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c0d0:	68bb      	ldr	r3, [r7, #8]
 801c0d2:	3b01      	subs	r3, #1
 801c0d4:	60bb      	str	r3, [r7, #8]
 801c0d6:	68bb      	ldr	r3, [r7, #8]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d1ed      	bne.n	801c0b8 <sum_sfn+0x10>
	return sum;
 801c0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c0de:	4618      	mov	r0, r3
 801c0e0:	3714      	adds	r7, #20
 801c0e2:	46bd      	mov	sp, r7
 801c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0e8:	4770      	bx	lr

0801c0ea <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c0ea:	b580      	push	{r7, lr}
 801c0ec:	b086      	sub	sp, #24
 801c0ee:	af00      	add	r7, sp, #0
 801c0f0:	6078      	str	r0, [r7, #4]
 801c0f2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c0f4:	2304      	movs	r3, #4
 801c0f6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c0fe:	23ff      	movs	r3, #255	@ 0xff
 801c100:	757b      	strb	r3, [r7, #21]
 801c102:	23ff      	movs	r3, #255	@ 0xff
 801c104:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c106:	e081      	b.n	801c20c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	69db      	ldr	r3, [r3, #28]
 801c10c:	4619      	mov	r1, r3
 801c10e:	6938      	ldr	r0, [r7, #16]
 801c110:	f7ff f83c 	bl	801b18c <move_window>
 801c114:	4603      	mov	r3, r0
 801c116:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c118:	7dfb      	ldrb	r3, [r7, #23]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d17c      	bne.n	801c218 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	6a1b      	ldr	r3, [r3, #32]
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c126:	7dbb      	ldrb	r3, [r7, #22]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d102      	bne.n	801c132 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c12c:	2304      	movs	r3, #4
 801c12e:	75fb      	strb	r3, [r7, #23]
 801c130:	e077      	b.n	801c222 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6a1b      	ldr	r3, [r3, #32]
 801c136:	330b      	adds	r3, #11
 801c138:	781b      	ldrb	r3, [r3, #0]
 801c13a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c13e:	73fb      	strb	r3, [r7, #15]
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	7bfa      	ldrb	r2, [r7, #15]
 801c144:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c146:	7dbb      	ldrb	r3, [r7, #22]
 801c148:	2be5      	cmp	r3, #229	@ 0xe5
 801c14a:	d00e      	beq.n	801c16a <dir_read+0x80>
 801c14c:	7dbb      	ldrb	r3, [r7, #22]
 801c14e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c150:	d00b      	beq.n	801c16a <dir_read+0x80>
 801c152:	7bfb      	ldrb	r3, [r7, #15]
 801c154:	f023 0320 	bic.w	r3, r3, #32
 801c158:	2b08      	cmp	r3, #8
 801c15a:	bf0c      	ite	eq
 801c15c:	2301      	moveq	r3, #1
 801c15e:	2300      	movne	r3, #0
 801c160:	b2db      	uxtb	r3, r3
 801c162:	461a      	mov	r2, r3
 801c164:	683b      	ldr	r3, [r7, #0]
 801c166:	4293      	cmp	r3, r2
 801c168:	d002      	beq.n	801c170 <dir_read+0x86>
				ord = 0xFF;
 801c16a:	23ff      	movs	r3, #255	@ 0xff
 801c16c:	757b      	strb	r3, [r7, #21]
 801c16e:	e044      	b.n	801c1fa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c170:	7bfb      	ldrb	r3, [r7, #15]
 801c172:	2b0f      	cmp	r3, #15
 801c174:	d12f      	bne.n	801c1d6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c176:	7dbb      	ldrb	r3, [r7, #22]
 801c178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d00d      	beq.n	801c19c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	6a1b      	ldr	r3, [r3, #32]
 801c184:	7b5b      	ldrb	r3, [r3, #13]
 801c186:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c188:	7dbb      	ldrb	r3, [r7, #22]
 801c18a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c18e:	75bb      	strb	r3, [r7, #22]
 801c190:	7dbb      	ldrb	r3, [r7, #22]
 801c192:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	695a      	ldr	r2, [r3, #20]
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c19c:	7dba      	ldrb	r2, [r7, #22]
 801c19e:	7d7b      	ldrb	r3, [r7, #21]
 801c1a0:	429a      	cmp	r2, r3
 801c1a2:	d115      	bne.n	801c1d0 <dir_read+0xe6>
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	6a1b      	ldr	r3, [r3, #32]
 801c1a8:	330d      	adds	r3, #13
 801c1aa:	781b      	ldrb	r3, [r3, #0]
 801c1ac:	7d3a      	ldrb	r2, [r7, #20]
 801c1ae:	429a      	cmp	r2, r3
 801c1b0:	d10e      	bne.n	801c1d0 <dir_read+0xe6>
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	691a      	ldr	r2, [r3, #16]
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6a1b      	ldr	r3, [r3, #32]
 801c1ba:	4619      	mov	r1, r3
 801c1bc:	4610      	mov	r0, r2
 801c1be:	f7ff fe19 	bl	801bdf4 <pick_lfn>
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d003      	beq.n	801c1d0 <dir_read+0xe6>
 801c1c8:	7d7b      	ldrb	r3, [r7, #21]
 801c1ca:	3b01      	subs	r3, #1
 801c1cc:	b2db      	uxtb	r3, r3
 801c1ce:	e000      	b.n	801c1d2 <dir_read+0xe8>
 801c1d0:	23ff      	movs	r3, #255	@ 0xff
 801c1d2:	757b      	strb	r3, [r7, #21]
 801c1d4:	e011      	b.n	801c1fa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c1d6:	7d7b      	ldrb	r3, [r7, #21]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d109      	bne.n	801c1f0 <dir_read+0x106>
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	6a1b      	ldr	r3, [r3, #32]
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7ff ff61 	bl	801c0a8 <sum_sfn>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	461a      	mov	r2, r3
 801c1ea:	7d3b      	ldrb	r3, [r7, #20]
 801c1ec:	4293      	cmp	r3, r2
 801c1ee:	d015      	beq.n	801c21c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	f04f 32ff 	mov.w	r2, #4294967295
 801c1f6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c1f8:	e010      	b.n	801c21c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c1fa:	2100      	movs	r1, #0
 801c1fc:	6878      	ldr	r0, [r7, #4]
 801c1fe:	f7ff fc2d 	bl	801ba5c <dir_next>
 801c202:	4603      	mov	r3, r0
 801c204:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c206:	7dfb      	ldrb	r3, [r7, #23]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d109      	bne.n	801c220 <dir_read+0x136>
	while (dp->sect) {
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	69db      	ldr	r3, [r3, #28]
 801c210:	2b00      	cmp	r3, #0
 801c212:	f47f af79 	bne.w	801c108 <dir_read+0x1e>
 801c216:	e004      	b.n	801c222 <dir_read+0x138>
		if (res != FR_OK) break;
 801c218:	bf00      	nop
 801c21a:	e002      	b.n	801c222 <dir_read+0x138>
					break;
 801c21c:	bf00      	nop
 801c21e:	e000      	b.n	801c222 <dir_read+0x138>
		if (res != FR_OK) break;
 801c220:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c222:	7dfb      	ldrb	r3, [r7, #23]
 801c224:	2b00      	cmp	r3, #0
 801c226:	d002      	beq.n	801c22e <dir_read+0x144>
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	2200      	movs	r2, #0
 801c22c:	61da      	str	r2, [r3, #28]
	return res;
 801c22e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c230:	4618      	mov	r0, r3
 801c232:	3718      	adds	r7, #24
 801c234:	46bd      	mov	sp, r7
 801c236:	bd80      	pop	{r7, pc}

0801c238 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b086      	sub	sp, #24
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c246:	2100      	movs	r1, #0
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	f7ff fb7e 	bl	801b94a <dir_sdi>
 801c24e:	4603      	mov	r3, r0
 801c250:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c252:	7dfb      	ldrb	r3, [r7, #23]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d001      	beq.n	801c25c <dir_find+0x24>
 801c258:	7dfb      	ldrb	r3, [r7, #23]
 801c25a:	e0a9      	b.n	801c3b0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c25c:	23ff      	movs	r3, #255	@ 0xff
 801c25e:	753b      	strb	r3, [r7, #20]
 801c260:	7d3b      	ldrb	r3, [r7, #20]
 801c262:	757b      	strb	r3, [r7, #21]
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f04f 32ff 	mov.w	r2, #4294967295
 801c26a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	69db      	ldr	r3, [r3, #28]
 801c270:	4619      	mov	r1, r3
 801c272:	6938      	ldr	r0, [r7, #16]
 801c274:	f7fe ff8a 	bl	801b18c <move_window>
 801c278:	4603      	mov	r3, r0
 801c27a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c27c:	7dfb      	ldrb	r3, [r7, #23]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	f040 8090 	bne.w	801c3a4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	6a1b      	ldr	r3, [r3, #32]
 801c288:	781b      	ldrb	r3, [r3, #0]
 801c28a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c28c:	7dbb      	ldrb	r3, [r7, #22]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d102      	bne.n	801c298 <dir_find+0x60>
 801c292:	2304      	movs	r3, #4
 801c294:	75fb      	strb	r3, [r7, #23]
 801c296:	e08a      	b.n	801c3ae <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	6a1b      	ldr	r3, [r3, #32]
 801c29c:	330b      	adds	r3, #11
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c2a4:	73fb      	strb	r3, [r7, #15]
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	7bfa      	ldrb	r2, [r7, #15]
 801c2aa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c2ac:	7dbb      	ldrb	r3, [r7, #22]
 801c2ae:	2be5      	cmp	r3, #229	@ 0xe5
 801c2b0:	d007      	beq.n	801c2c2 <dir_find+0x8a>
 801c2b2:	7bfb      	ldrb	r3, [r7, #15]
 801c2b4:	f003 0308 	and.w	r3, r3, #8
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d009      	beq.n	801c2d0 <dir_find+0x98>
 801c2bc:	7bfb      	ldrb	r3, [r7, #15]
 801c2be:	2b0f      	cmp	r3, #15
 801c2c0:	d006      	beq.n	801c2d0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c2c2:	23ff      	movs	r3, #255	@ 0xff
 801c2c4:	757b      	strb	r3, [r7, #21]
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	f04f 32ff 	mov.w	r2, #4294967295
 801c2cc:	631a      	str	r2, [r3, #48]	@ 0x30
 801c2ce:	e05e      	b.n	801c38e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c2d0:	7bfb      	ldrb	r3, [r7, #15]
 801c2d2:	2b0f      	cmp	r3, #15
 801c2d4:	d136      	bne.n	801c344 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d154      	bne.n	801c38e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c2e4:	7dbb      	ldrb	r3, [r7, #22]
 801c2e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d00d      	beq.n	801c30a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6a1b      	ldr	r3, [r3, #32]
 801c2f2:	7b5b      	ldrb	r3, [r3, #13]
 801c2f4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c2f6:	7dbb      	ldrb	r3, [r7, #22]
 801c2f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c2fc:	75bb      	strb	r3, [r7, #22]
 801c2fe:	7dbb      	ldrb	r3, [r7, #22]
 801c300:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	695a      	ldr	r2, [r3, #20]
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c30a:	7dba      	ldrb	r2, [r7, #22]
 801c30c:	7d7b      	ldrb	r3, [r7, #21]
 801c30e:	429a      	cmp	r2, r3
 801c310:	d115      	bne.n	801c33e <dir_find+0x106>
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6a1b      	ldr	r3, [r3, #32]
 801c316:	330d      	adds	r3, #13
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	7d3a      	ldrb	r2, [r7, #20]
 801c31c:	429a      	cmp	r2, r3
 801c31e:	d10e      	bne.n	801c33e <dir_find+0x106>
 801c320:	693b      	ldr	r3, [r7, #16]
 801c322:	691a      	ldr	r2, [r3, #16]
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	6a1b      	ldr	r3, [r3, #32]
 801c328:	4619      	mov	r1, r3
 801c32a:	4610      	mov	r0, r2
 801c32c:	f7ff fcf2 	bl	801bd14 <cmp_lfn>
 801c330:	4603      	mov	r3, r0
 801c332:	2b00      	cmp	r3, #0
 801c334:	d003      	beq.n	801c33e <dir_find+0x106>
 801c336:	7d7b      	ldrb	r3, [r7, #21]
 801c338:	3b01      	subs	r3, #1
 801c33a:	b2db      	uxtb	r3, r3
 801c33c:	e000      	b.n	801c340 <dir_find+0x108>
 801c33e:	23ff      	movs	r3, #255	@ 0xff
 801c340:	757b      	strb	r3, [r7, #21]
 801c342:	e024      	b.n	801c38e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c344:	7d7b      	ldrb	r3, [r7, #21]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d109      	bne.n	801c35e <dir_find+0x126>
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	6a1b      	ldr	r3, [r3, #32]
 801c34e:	4618      	mov	r0, r3
 801c350:	f7ff feaa 	bl	801c0a8 <sum_sfn>
 801c354:	4603      	mov	r3, r0
 801c356:	461a      	mov	r2, r3
 801c358:	7d3b      	ldrb	r3, [r7, #20]
 801c35a:	4293      	cmp	r3, r2
 801c35c:	d024      	beq.n	801c3a8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c364:	f003 0301 	and.w	r3, r3, #1
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d10a      	bne.n	801c382 <dir_find+0x14a>
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	6a18      	ldr	r0, [r3, #32]
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	3324      	adds	r3, #36	@ 0x24
 801c374:	220b      	movs	r2, #11
 801c376:	4619      	mov	r1, r3
 801c378:	f7fe fd16 	bl	801ada8 <mem_cmp>
 801c37c:	4603      	mov	r3, r0
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d014      	beq.n	801c3ac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c382:	23ff      	movs	r3, #255	@ 0xff
 801c384:	757b      	strb	r3, [r7, #21]
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	f04f 32ff 	mov.w	r2, #4294967295
 801c38c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c38e:	2100      	movs	r1, #0
 801c390:	6878      	ldr	r0, [r7, #4]
 801c392:	f7ff fb63 	bl	801ba5c <dir_next>
 801c396:	4603      	mov	r3, r0
 801c398:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c39a:	7dfb      	ldrb	r3, [r7, #23]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	f43f af65 	beq.w	801c26c <dir_find+0x34>
 801c3a2:	e004      	b.n	801c3ae <dir_find+0x176>
		if (res != FR_OK) break;
 801c3a4:	bf00      	nop
 801c3a6:	e002      	b.n	801c3ae <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c3a8:	bf00      	nop
 801c3aa:	e000      	b.n	801c3ae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c3ac:	bf00      	nop

	return res;
 801c3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	3718      	adds	r7, #24
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd80      	pop	{r7, pc}

0801c3b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c3b8:	b580      	push	{r7, lr}
 801c3ba:	b08c      	sub	sp, #48	@ 0x30
 801c3bc:	af00      	add	r7, sp, #0
 801c3be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c3cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d001      	beq.n	801c3d8 <dir_register+0x20>
 801c3d4:	2306      	movs	r3, #6
 801c3d6:	e0e0      	b.n	801c59a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c3d8:	2300      	movs	r3, #0
 801c3da:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3dc:	e002      	b.n	801c3e4 <dir_register+0x2c>
 801c3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3e0:	3301      	adds	r3, #1
 801c3e2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3e4:	69fb      	ldr	r3, [r7, #28]
 801c3e6:	691a      	ldr	r2, [r3, #16]
 801c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ea:	005b      	lsls	r3, r3, #1
 801c3ec:	4413      	add	r3, r2
 801c3ee:	881b      	ldrh	r3, [r3, #0]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d1f4      	bne.n	801c3de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c3fa:	f107 030c 	add.w	r3, r7, #12
 801c3fe:	220c      	movs	r2, #12
 801c400:	4618      	mov	r0, r3
 801c402:	f7fe fc95 	bl	801ad30 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c406:	7dfb      	ldrb	r3, [r7, #23]
 801c408:	f003 0301 	and.w	r3, r3, #1
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d032      	beq.n	801c476 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2240      	movs	r2, #64	@ 0x40
 801c414:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c418:	2301      	movs	r3, #1
 801c41a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c41c:	e016      	b.n	801c44c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c424:	69fb      	ldr	r3, [r7, #28]
 801c426:	691a      	ldr	r2, [r3, #16]
 801c428:	f107 010c 	add.w	r1, r7, #12
 801c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42e:	f7ff fdad 	bl	801bf8c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c432:	6878      	ldr	r0, [r7, #4]
 801c434:	f7ff ff00 	bl	801c238 <dir_find>
 801c438:	4603      	mov	r3, r0
 801c43a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c43e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c442:	2b00      	cmp	r3, #0
 801c444:	d106      	bne.n	801c454 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c448:	3301      	adds	r3, #1
 801c44a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c44e:	2b63      	cmp	r3, #99	@ 0x63
 801c450:	d9e5      	bls.n	801c41e <dir_register+0x66>
 801c452:	e000      	b.n	801c456 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c454:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c458:	2b64      	cmp	r3, #100	@ 0x64
 801c45a:	d101      	bne.n	801c460 <dir_register+0xa8>
 801c45c:	2307      	movs	r3, #7
 801c45e:	e09c      	b.n	801c59a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c464:	2b04      	cmp	r3, #4
 801c466:	d002      	beq.n	801c46e <dir_register+0xb6>
 801c468:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c46c:	e095      	b.n	801c59a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c46e:	7dfa      	ldrb	r2, [r7, #23]
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c476:	7dfb      	ldrb	r3, [r7, #23]
 801c478:	f003 0302 	and.w	r3, r3, #2
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d007      	beq.n	801c490 <dir_register+0xd8>
 801c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c482:	330c      	adds	r3, #12
 801c484:	4a47      	ldr	r2, [pc, #284]	@ (801c5a4 <dir_register+0x1ec>)
 801c486:	fba2 2303 	umull	r2, r3, r2, r3
 801c48a:	089b      	lsrs	r3, r3, #2
 801c48c:	3301      	adds	r3, #1
 801c48e:	e000      	b.n	801c492 <dir_register+0xda>
 801c490:	2301      	movs	r3, #1
 801c492:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c494:	6a39      	ldr	r1, [r7, #32]
 801c496:	6878      	ldr	r0, [r7, #4]
 801c498:	f7ff fbb6 	bl	801bc08 <dir_alloc>
 801c49c:	4603      	mov	r3, r0
 801c49e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c4a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d148      	bne.n	801c53c <dir_register+0x184>
 801c4aa:	6a3b      	ldr	r3, [r7, #32]
 801c4ac:	3b01      	subs	r3, #1
 801c4ae:	623b      	str	r3, [r7, #32]
 801c4b0:	6a3b      	ldr	r3, [r7, #32]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d042      	beq.n	801c53c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	695a      	ldr	r2, [r3, #20]
 801c4ba:	6a3b      	ldr	r3, [r7, #32]
 801c4bc:	015b      	lsls	r3, r3, #5
 801c4be:	1ad3      	subs	r3, r2, r3
 801c4c0:	4619      	mov	r1, r3
 801c4c2:	6878      	ldr	r0, [r7, #4]
 801c4c4:	f7ff fa41 	bl	801b94a <dir_sdi>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d132      	bne.n	801c53c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	3324      	adds	r3, #36	@ 0x24
 801c4da:	4618      	mov	r0, r3
 801c4dc:	f7ff fde4 	bl	801c0a8 <sum_sfn>
 801c4e0:	4603      	mov	r3, r0
 801c4e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	69db      	ldr	r3, [r3, #28]
 801c4e8:	4619      	mov	r1, r3
 801c4ea:	69f8      	ldr	r0, [r7, #28]
 801c4ec:	f7fe fe4e 	bl	801b18c <move_window>
 801c4f0:	4603      	mov	r3, r0
 801c4f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c4f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d11d      	bne.n	801c53a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c4fe:	69fb      	ldr	r3, [r7, #28]
 801c500:	6918      	ldr	r0, [r3, #16]
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	6a19      	ldr	r1, [r3, #32]
 801c506:	6a3b      	ldr	r3, [r7, #32]
 801c508:	b2da      	uxtb	r2, r3
 801c50a:	7efb      	ldrb	r3, [r7, #27]
 801c50c:	f7ff fcd6 	bl	801bebc <put_lfn>
				fs->wflag = 1;
 801c510:	69fb      	ldr	r3, [r7, #28]
 801c512:	2201      	movs	r2, #1
 801c514:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c516:	2100      	movs	r1, #0
 801c518:	6878      	ldr	r0, [r7, #4]
 801c51a:	f7ff fa9f 	bl	801ba5c <dir_next>
 801c51e:	4603      	mov	r3, r0
 801c520:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c524:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d107      	bne.n	801c53c <dir_register+0x184>
 801c52c:	6a3b      	ldr	r3, [r7, #32]
 801c52e:	3b01      	subs	r3, #1
 801c530:	623b      	str	r3, [r7, #32]
 801c532:	6a3b      	ldr	r3, [r7, #32]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d1d5      	bne.n	801c4e4 <dir_register+0x12c>
 801c538:	e000      	b.n	801c53c <dir_register+0x184>
				if (res != FR_OK) break;
 801c53a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c53c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c540:	2b00      	cmp	r3, #0
 801c542:	d128      	bne.n	801c596 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	69db      	ldr	r3, [r3, #28]
 801c548:	4619      	mov	r1, r3
 801c54a:	69f8      	ldr	r0, [r7, #28]
 801c54c:	f7fe fe1e 	bl	801b18c <move_window>
 801c550:	4603      	mov	r3, r0
 801c552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c556:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d11b      	bne.n	801c596 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	6a1b      	ldr	r3, [r3, #32]
 801c562:	2220      	movs	r2, #32
 801c564:	2100      	movs	r1, #0
 801c566:	4618      	mov	r0, r3
 801c568:	f7fe fc03 	bl	801ad72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	6a18      	ldr	r0, [r3, #32]
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	3324      	adds	r3, #36	@ 0x24
 801c574:	220b      	movs	r2, #11
 801c576:	4619      	mov	r1, r3
 801c578:	f7fe fbda 	bl	801ad30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	6a1b      	ldr	r3, [r3, #32]
 801c586:	330c      	adds	r3, #12
 801c588:	f002 0218 	and.w	r2, r2, #24
 801c58c:	b2d2      	uxtb	r2, r2
 801c58e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	2201      	movs	r2, #1
 801c594:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c59a:	4618      	mov	r0, r3
 801c59c:	3730      	adds	r7, #48	@ 0x30
 801c59e:	46bd      	mov	sp, r7
 801c5a0:	bd80      	pop	{r7, pc}
 801c5a2:	bf00      	nop
 801c5a4:	4ec4ec4f 	.word	0x4ec4ec4f

0801c5a8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b086      	sub	sp, #24
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	695b      	ldr	r3, [r3, #20]
 801c5ba:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5c4:	d007      	beq.n	801c5d6 <dir_remove+0x2e>
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c5ca:	4619      	mov	r1, r3
 801c5cc:	6878      	ldr	r0, [r7, #4]
 801c5ce:	f7ff f9bc 	bl	801b94a <dir_sdi>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	e000      	b.n	801c5d8 <dir_remove+0x30>
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c5da:	7dfb      	ldrb	r3, [r7, #23]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d128      	bne.n	801c632 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	69db      	ldr	r3, [r3, #28]
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	6938      	ldr	r0, [r7, #16]
 801c5e8:	f7fe fdd0 	bl	801b18c <move_window>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c5f0:	7dfb      	ldrb	r3, [r7, #23]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d115      	bne.n	801c622 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	6a1b      	ldr	r3, [r3, #32]
 801c5fa:	22e5      	movs	r2, #229	@ 0xe5
 801c5fc:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	2201      	movs	r2, #1
 801c602:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	695b      	ldr	r3, [r3, #20]
 801c608:	68fa      	ldr	r2, [r7, #12]
 801c60a:	429a      	cmp	r2, r3
 801c60c:	d90b      	bls.n	801c626 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c60e:	2100      	movs	r1, #0
 801c610:	6878      	ldr	r0, [r7, #4]
 801c612:	f7ff fa23 	bl	801ba5c <dir_next>
 801c616:	4603      	mov	r3, r0
 801c618:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c61a:	7dfb      	ldrb	r3, [r7, #23]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d0df      	beq.n	801c5e0 <dir_remove+0x38>
 801c620:	e002      	b.n	801c628 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c622:	bf00      	nop
 801c624:	e000      	b.n	801c628 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c626:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c628:	7dfb      	ldrb	r3, [r7, #23]
 801c62a:	2b04      	cmp	r3, #4
 801c62c:	d101      	bne.n	801c632 <dir_remove+0x8a>
 801c62e:	2302      	movs	r3, #2
 801c630:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c632:	7dfb      	ldrb	r3, [r7, #23]
}
 801c634:	4618      	mov	r0, r3
 801c636:	3718      	adds	r7, #24
 801c638:	46bd      	mov	sp, r7
 801c63a:	bd80      	pop	{r7, pc}

0801c63c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b08a      	sub	sp, #40	@ 0x28
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
 801c644:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	613b      	str	r3, [r7, #16]
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	691b      	ldr	r3, [r3, #16]
 801c652:	60fb      	str	r3, [r7, #12]
 801c654:	2300      	movs	r3, #0
 801c656:	617b      	str	r3, [r7, #20]
 801c658:	697b      	ldr	r3, [r7, #20]
 801c65a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c65c:	69bb      	ldr	r3, [r7, #24]
 801c65e:	1c5a      	adds	r2, r3, #1
 801c660:	61ba      	str	r2, [r7, #24]
 801c662:	693a      	ldr	r2, [r7, #16]
 801c664:	4413      	add	r3, r2
 801c666:	781b      	ldrb	r3, [r3, #0]
 801c668:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c66a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c66c:	2b1f      	cmp	r3, #31
 801c66e:	d940      	bls.n	801c6f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c672:	2b2f      	cmp	r3, #47	@ 0x2f
 801c674:	d006      	beq.n	801c684 <create_name+0x48>
 801c676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c678:	2b5c      	cmp	r3, #92	@ 0x5c
 801c67a:	d110      	bne.n	801c69e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c67c:	e002      	b.n	801c684 <create_name+0x48>
 801c67e:	69bb      	ldr	r3, [r7, #24]
 801c680:	3301      	adds	r3, #1
 801c682:	61bb      	str	r3, [r7, #24]
 801c684:	693a      	ldr	r2, [r7, #16]
 801c686:	69bb      	ldr	r3, [r7, #24]
 801c688:	4413      	add	r3, r2
 801c68a:	781b      	ldrb	r3, [r3, #0]
 801c68c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c68e:	d0f6      	beq.n	801c67e <create_name+0x42>
 801c690:	693a      	ldr	r2, [r7, #16]
 801c692:	69bb      	ldr	r3, [r7, #24]
 801c694:	4413      	add	r3, r2
 801c696:	781b      	ldrb	r3, [r3, #0]
 801c698:	2b5c      	cmp	r3, #92	@ 0x5c
 801c69a:	d0f0      	beq.n	801c67e <create_name+0x42>
			break;
 801c69c:	e02a      	b.n	801c6f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c69e:	697b      	ldr	r3, [r7, #20]
 801c6a0:	2bfe      	cmp	r3, #254	@ 0xfe
 801c6a2:	d901      	bls.n	801c6a8 <create_name+0x6c>
 801c6a4:	2306      	movs	r3, #6
 801c6a6:	e17d      	b.n	801c9a4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c6a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6aa:	b2db      	uxtb	r3, r3
 801c6ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c6ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6b0:	2101      	movs	r1, #1
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f001 fa98 	bl	801dbe8 <ff_convert>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c6bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d101      	bne.n	801c6c6 <create_name+0x8a>
 801c6c2:	2306      	movs	r3, #6
 801c6c4:	e16e      	b.n	801c9a4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c6c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6c8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c6ca:	d809      	bhi.n	801c6e0 <create_name+0xa4>
 801c6cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6ce:	4619      	mov	r1, r3
 801c6d0:	488d      	ldr	r0, [pc, #564]	@ (801c908 <create_name+0x2cc>)
 801c6d2:	f7fe fb90 	bl	801adf6 <chk_chr>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d001      	beq.n	801c6e0 <create_name+0xa4>
 801c6dc:	2306      	movs	r3, #6
 801c6de:	e161      	b.n	801c9a4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c6e0:	697b      	ldr	r3, [r7, #20]
 801c6e2:	1c5a      	adds	r2, r3, #1
 801c6e4:	617a      	str	r2, [r7, #20]
 801c6e6:	005b      	lsls	r3, r3, #1
 801c6e8:	68fa      	ldr	r2, [r7, #12]
 801c6ea:	4413      	add	r3, r2
 801c6ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c6ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c6f0:	e7b4      	b.n	801c65c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c6f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c6f4:	693a      	ldr	r2, [r7, #16]
 801c6f6:	69bb      	ldr	r3, [r7, #24]
 801c6f8:	441a      	add	r2, r3
 801c6fa:	683b      	ldr	r3, [r7, #0]
 801c6fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c6fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c700:	2b1f      	cmp	r3, #31
 801c702:	d801      	bhi.n	801c708 <create_name+0xcc>
 801c704:	2304      	movs	r3, #4
 801c706:	e000      	b.n	801c70a <create_name+0xce>
 801c708:	2300      	movs	r3, #0
 801c70a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c70e:	e011      	b.n	801c734 <create_name+0xf8>
		w = lfn[di - 1];
 801c710:	697a      	ldr	r2, [r7, #20]
 801c712:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c716:	4413      	add	r3, r2
 801c718:	005b      	lsls	r3, r3, #1
 801c71a:	68fa      	ldr	r2, [r7, #12]
 801c71c:	4413      	add	r3, r2
 801c71e:	881b      	ldrh	r3, [r3, #0]
 801c720:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c724:	2b20      	cmp	r3, #32
 801c726:	d002      	beq.n	801c72e <create_name+0xf2>
 801c728:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c72a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c72c:	d106      	bne.n	801c73c <create_name+0x100>
		di--;
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	3b01      	subs	r3, #1
 801c732:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c734:	697b      	ldr	r3, [r7, #20]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d1ea      	bne.n	801c710 <create_name+0xd4>
 801c73a:	e000      	b.n	801c73e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c73c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c73e:	697b      	ldr	r3, [r7, #20]
 801c740:	005b      	lsls	r3, r3, #1
 801c742:	68fa      	ldr	r2, [r7, #12]
 801c744:	4413      	add	r3, r2
 801c746:	2200      	movs	r2, #0
 801c748:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d101      	bne.n	801c754 <create_name+0x118>
 801c750:	2306      	movs	r3, #6
 801c752:	e127      	b.n	801c9a4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	3324      	adds	r3, #36	@ 0x24
 801c758:	220b      	movs	r2, #11
 801c75a:	2120      	movs	r1, #32
 801c75c:	4618      	mov	r0, r3
 801c75e:	f7fe fb08 	bl	801ad72 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c762:	2300      	movs	r3, #0
 801c764:	61bb      	str	r3, [r7, #24]
 801c766:	e002      	b.n	801c76e <create_name+0x132>
 801c768:	69bb      	ldr	r3, [r7, #24]
 801c76a:	3301      	adds	r3, #1
 801c76c:	61bb      	str	r3, [r7, #24]
 801c76e:	69bb      	ldr	r3, [r7, #24]
 801c770:	005b      	lsls	r3, r3, #1
 801c772:	68fa      	ldr	r2, [r7, #12]
 801c774:	4413      	add	r3, r2
 801c776:	881b      	ldrh	r3, [r3, #0]
 801c778:	2b20      	cmp	r3, #32
 801c77a:	d0f5      	beq.n	801c768 <create_name+0x12c>
 801c77c:	69bb      	ldr	r3, [r7, #24]
 801c77e:	005b      	lsls	r3, r3, #1
 801c780:	68fa      	ldr	r2, [r7, #12]
 801c782:	4413      	add	r3, r2
 801c784:	881b      	ldrh	r3, [r3, #0]
 801c786:	2b2e      	cmp	r3, #46	@ 0x2e
 801c788:	d0ee      	beq.n	801c768 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c78a:	69bb      	ldr	r3, [r7, #24]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d009      	beq.n	801c7a4 <create_name+0x168>
 801c790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c794:	f043 0303 	orr.w	r3, r3, #3
 801c798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c79c:	e002      	b.n	801c7a4 <create_name+0x168>
 801c79e:	697b      	ldr	r3, [r7, #20]
 801c7a0:	3b01      	subs	r3, #1
 801c7a2:	617b      	str	r3, [r7, #20]
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d009      	beq.n	801c7be <create_name+0x182>
 801c7aa:	697a      	ldr	r2, [r7, #20]
 801c7ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c7b0:	4413      	add	r3, r2
 801c7b2:	005b      	lsls	r3, r3, #1
 801c7b4:	68fa      	ldr	r2, [r7, #12]
 801c7b6:	4413      	add	r3, r2
 801c7b8:	881b      	ldrh	r3, [r3, #0]
 801c7ba:	2b2e      	cmp	r3, #46	@ 0x2e
 801c7bc:	d1ef      	bne.n	801c79e <create_name+0x162>

	i = b = 0; ni = 8;
 801c7be:	2300      	movs	r3, #0
 801c7c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	623b      	str	r3, [r7, #32]
 801c7c8:	2308      	movs	r3, #8
 801c7ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c7cc:	69bb      	ldr	r3, [r7, #24]
 801c7ce:	1c5a      	adds	r2, r3, #1
 801c7d0:	61ba      	str	r2, [r7, #24]
 801c7d2:	005b      	lsls	r3, r3, #1
 801c7d4:	68fa      	ldr	r2, [r7, #12]
 801c7d6:	4413      	add	r3, r2
 801c7d8:	881b      	ldrh	r3, [r3, #0]
 801c7da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c7dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	f000 8090 	beq.w	801c904 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c7e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7e6:	2b20      	cmp	r3, #32
 801c7e8:	d006      	beq.n	801c7f8 <create_name+0x1bc>
 801c7ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7ec:	2b2e      	cmp	r3, #46	@ 0x2e
 801c7ee:	d10a      	bne.n	801c806 <create_name+0x1ca>
 801c7f0:	69ba      	ldr	r2, [r7, #24]
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	429a      	cmp	r2, r3
 801c7f6:	d006      	beq.n	801c806 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c7fc:	f043 0303 	orr.w	r3, r3, #3
 801c800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c804:	e07d      	b.n	801c902 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c806:	6a3a      	ldr	r2, [r7, #32]
 801c808:	69fb      	ldr	r3, [r7, #28]
 801c80a:	429a      	cmp	r2, r3
 801c80c:	d203      	bcs.n	801c816 <create_name+0x1da>
 801c80e:	69ba      	ldr	r2, [r7, #24]
 801c810:	697b      	ldr	r3, [r7, #20]
 801c812:	429a      	cmp	r2, r3
 801c814:	d123      	bne.n	801c85e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c816:	69fb      	ldr	r3, [r7, #28]
 801c818:	2b0b      	cmp	r3, #11
 801c81a:	d106      	bne.n	801c82a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c81c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c820:	f043 0303 	orr.w	r3, r3, #3
 801c824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c828:	e075      	b.n	801c916 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c82a:	69ba      	ldr	r2, [r7, #24]
 801c82c:	697b      	ldr	r3, [r7, #20]
 801c82e:	429a      	cmp	r2, r3
 801c830:	d005      	beq.n	801c83e <create_name+0x202>
 801c832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c836:	f043 0303 	orr.w	r3, r3, #3
 801c83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c83e:	69ba      	ldr	r2, [r7, #24]
 801c840:	697b      	ldr	r3, [r7, #20]
 801c842:	429a      	cmp	r2, r3
 801c844:	d866      	bhi.n	801c914 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c846:	697b      	ldr	r3, [r7, #20]
 801c848:	61bb      	str	r3, [r7, #24]
 801c84a:	2308      	movs	r3, #8
 801c84c:	623b      	str	r3, [r7, #32]
 801c84e:	230b      	movs	r3, #11
 801c850:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c852:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c856:	009b      	lsls	r3, r3, #2
 801c858:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c85c:	e051      	b.n	801c902 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c860:	2b7f      	cmp	r3, #127	@ 0x7f
 801c862:	d914      	bls.n	801c88e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c866:	2100      	movs	r1, #0
 801c868:	4618      	mov	r0, r3
 801c86a:	f001 f9bd 	bl	801dbe8 <ff_convert>
 801c86e:	4603      	mov	r3, r0
 801c870:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c874:	2b00      	cmp	r3, #0
 801c876:	d004      	beq.n	801c882 <create_name+0x246>
 801c878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c87a:	3b80      	subs	r3, #128	@ 0x80
 801c87c:	4a23      	ldr	r2, [pc, #140]	@ (801c90c <create_name+0x2d0>)
 801c87e:	5cd3      	ldrb	r3, [r2, r3]
 801c880:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c886:	f043 0302 	orr.w	r3, r3, #2
 801c88a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c88e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c890:	2b00      	cmp	r3, #0
 801c892:	d007      	beq.n	801c8a4 <create_name+0x268>
 801c894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c896:	4619      	mov	r1, r3
 801c898:	481d      	ldr	r0, [pc, #116]	@ (801c910 <create_name+0x2d4>)
 801c89a:	f7fe faac 	bl	801adf6 <chk_chr>
 801c89e:	4603      	mov	r3, r0
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d008      	beq.n	801c8b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c8a4:	235f      	movs	r3, #95	@ 0x5f
 801c8a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8ac:	f043 0303 	orr.w	r3, r3, #3
 801c8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c8b4:	e01b      	b.n	801c8ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c8b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8b8:	2b40      	cmp	r3, #64	@ 0x40
 801c8ba:	d909      	bls.n	801c8d0 <create_name+0x294>
 801c8bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8be:	2b5a      	cmp	r3, #90	@ 0x5a
 801c8c0:	d806      	bhi.n	801c8d0 <create_name+0x294>
					b |= 2;
 801c8c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8c6:	f043 0302 	orr.w	r3, r3, #2
 801c8ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c8ce:	e00e      	b.n	801c8ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c8d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8d2:	2b60      	cmp	r3, #96	@ 0x60
 801c8d4:	d90b      	bls.n	801c8ee <create_name+0x2b2>
 801c8d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8d8:	2b7a      	cmp	r3, #122	@ 0x7a
 801c8da:	d808      	bhi.n	801c8ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c8dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8e0:	f043 0301 	orr.w	r3, r3, #1
 801c8e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c8e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8ea:	3b20      	subs	r3, #32
 801c8ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c8ee:	6a3b      	ldr	r3, [r7, #32]
 801c8f0:	1c5a      	adds	r2, r3, #1
 801c8f2:	623a      	str	r2, [r7, #32]
 801c8f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c8f6:	b2d1      	uxtb	r1, r2
 801c8f8:	687a      	ldr	r2, [r7, #4]
 801c8fa:	4413      	add	r3, r2
 801c8fc:	460a      	mov	r2, r1
 801c8fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c902:	e763      	b.n	801c7cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c904:	bf00      	nop
 801c906:	e006      	b.n	801c916 <create_name+0x2da>
 801c908:	0801e7e4 	.word	0x0801e7e4
 801c90c:	0801e87c 	.word	0x0801e87c
 801c910:	0801e7f0 	.word	0x0801e7f0
			if (si > di) break;			/* No extension */
 801c914:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c91c:	2be5      	cmp	r3, #229	@ 0xe5
 801c91e:	d103      	bne.n	801c928 <create_name+0x2ec>
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	2205      	movs	r2, #5
 801c924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c928:	69fb      	ldr	r3, [r7, #28]
 801c92a:	2b08      	cmp	r3, #8
 801c92c:	d104      	bne.n	801c938 <create_name+0x2fc>
 801c92e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c932:	009b      	lsls	r3, r3, #2
 801c934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c938:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c93c:	f003 030c 	and.w	r3, r3, #12
 801c940:	2b0c      	cmp	r3, #12
 801c942:	d005      	beq.n	801c950 <create_name+0x314>
 801c944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c948:	f003 0303 	and.w	r3, r3, #3
 801c94c:	2b03      	cmp	r3, #3
 801c94e:	d105      	bne.n	801c95c <create_name+0x320>
 801c950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c954:	f043 0302 	orr.w	r3, r3, #2
 801c958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c95c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c960:	f003 0302 	and.w	r3, r3, #2
 801c964:	2b00      	cmp	r3, #0
 801c966:	d117      	bne.n	801c998 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c968:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c96c:	f003 0303 	and.w	r3, r3, #3
 801c970:	2b01      	cmp	r3, #1
 801c972:	d105      	bne.n	801c980 <create_name+0x344>
 801c974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c978:	f043 0310 	orr.w	r3, r3, #16
 801c97c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c980:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c984:	f003 030c 	and.w	r3, r3, #12
 801c988:	2b04      	cmp	r3, #4
 801c98a:	d105      	bne.n	801c998 <create_name+0x35c>
 801c98c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c990:	f043 0308 	orr.w	r3, r3, #8
 801c994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c99e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c9a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	3728      	adds	r7, #40	@ 0x28
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}

0801c9ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b086      	sub	sp, #24
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
 801c9b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c9ba:	693b      	ldr	r3, [r7, #16]
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c9c0:	e002      	b.n	801c9c8 <follow_path+0x1c>
 801c9c2:	683b      	ldr	r3, [r7, #0]
 801c9c4:	3301      	adds	r3, #1
 801c9c6:	603b      	str	r3, [r7, #0]
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	781b      	ldrb	r3, [r3, #0]
 801c9cc:	2b2f      	cmp	r3, #47	@ 0x2f
 801c9ce:	d0f8      	beq.n	801c9c2 <follow_path+0x16>
 801c9d0:	683b      	ldr	r3, [r7, #0]
 801c9d2:	781b      	ldrb	r3, [r3, #0]
 801c9d4:	2b5c      	cmp	r3, #92	@ 0x5c
 801c9d6:	d0f4      	beq.n	801c9c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c9d8:	693b      	ldr	r3, [r7, #16]
 801c9da:	2200      	movs	r2, #0
 801c9dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	781b      	ldrb	r3, [r3, #0]
 801c9e2:	2b1f      	cmp	r3, #31
 801c9e4:	d80a      	bhi.n	801c9fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	2280      	movs	r2, #128	@ 0x80
 801c9ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c9ee:	2100      	movs	r1, #0
 801c9f0:	6878      	ldr	r0, [r7, #4]
 801c9f2:	f7fe ffaa 	bl	801b94a <dir_sdi>
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	75fb      	strb	r3, [r7, #23]
 801c9fa:	e048      	b.n	801ca8e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c9fc:	463b      	mov	r3, r7
 801c9fe:	4619      	mov	r1, r3
 801ca00:	6878      	ldr	r0, [r7, #4]
 801ca02:	f7ff fe1b 	bl	801c63c <create_name>
 801ca06:	4603      	mov	r3, r0
 801ca08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ca0a:	7dfb      	ldrb	r3, [r7, #23]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d139      	bne.n	801ca84 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801ca10:	6878      	ldr	r0, [r7, #4]
 801ca12:	f7ff fc11 	bl	801c238 <dir_find>
 801ca16:	4603      	mov	r3, r0
 801ca18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ca20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801ca22:	7dfb      	ldrb	r3, [r7, #23]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d00a      	beq.n	801ca3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ca28:	7dfb      	ldrb	r3, [r7, #23]
 801ca2a:	2b04      	cmp	r3, #4
 801ca2c:	d12c      	bne.n	801ca88 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801ca2e:	7afb      	ldrb	r3, [r7, #11]
 801ca30:	f003 0304 	and.w	r3, r3, #4
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d127      	bne.n	801ca88 <follow_path+0xdc>
 801ca38:	2305      	movs	r3, #5
 801ca3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801ca3c:	e024      	b.n	801ca88 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ca3e:	7afb      	ldrb	r3, [r7, #11]
 801ca40:	f003 0304 	and.w	r3, r3, #4
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d121      	bne.n	801ca8c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ca48:	693b      	ldr	r3, [r7, #16]
 801ca4a:	799b      	ldrb	r3, [r3, #6]
 801ca4c:	f003 0310 	and.w	r3, r3, #16
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d102      	bne.n	801ca5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ca54:	2305      	movs	r3, #5
 801ca56:	75fb      	strb	r3, [r7, #23]
 801ca58:	e019      	b.n	801ca8e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	695b      	ldr	r3, [r3, #20]
 801ca64:	68fa      	ldr	r2, [r7, #12]
 801ca66:	8992      	ldrh	r2, [r2, #12]
 801ca68:	fbb3 f0f2 	udiv	r0, r3, r2
 801ca6c:	fb00 f202 	mul.w	r2, r0, r2
 801ca70:	1a9b      	subs	r3, r3, r2
 801ca72:	440b      	add	r3, r1
 801ca74:	4619      	mov	r1, r3
 801ca76:	68f8      	ldr	r0, [r7, #12]
 801ca78:	f7ff f90d 	bl	801bc96 <ld_clust>
 801ca7c:	4602      	mov	r2, r0
 801ca7e:	693b      	ldr	r3, [r7, #16]
 801ca80:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ca82:	e7bb      	b.n	801c9fc <follow_path+0x50>
			if (res != FR_OK) break;
 801ca84:	bf00      	nop
 801ca86:	e002      	b.n	801ca8e <follow_path+0xe2>
				break;
 801ca88:	bf00      	nop
 801ca8a:	e000      	b.n	801ca8e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ca8c:	bf00      	nop
			}
		}
	}

	return res;
 801ca8e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ca90:	4618      	mov	r0, r3
 801ca92:	3718      	adds	r7, #24
 801ca94:	46bd      	mov	sp, r7
 801ca96:	bd80      	pop	{r7, pc}

0801ca98 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ca98:	b480      	push	{r7}
 801ca9a:	b087      	sub	sp, #28
 801ca9c:	af00      	add	r7, sp, #0
 801ca9e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801caa0:	f04f 33ff 	mov.w	r3, #4294967295
 801caa4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d031      	beq.n	801cb12 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	617b      	str	r3, [r7, #20]
 801cab4:	e002      	b.n	801cabc <get_ldnumber+0x24>
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	3301      	adds	r3, #1
 801caba:	617b      	str	r3, [r7, #20]
 801cabc:	697b      	ldr	r3, [r7, #20]
 801cabe:	781b      	ldrb	r3, [r3, #0]
 801cac0:	2b1f      	cmp	r3, #31
 801cac2:	d903      	bls.n	801cacc <get_ldnumber+0x34>
 801cac4:	697b      	ldr	r3, [r7, #20]
 801cac6:	781b      	ldrb	r3, [r3, #0]
 801cac8:	2b3a      	cmp	r3, #58	@ 0x3a
 801caca:	d1f4      	bne.n	801cab6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801cacc:	697b      	ldr	r3, [r7, #20]
 801cace:	781b      	ldrb	r3, [r3, #0]
 801cad0:	2b3a      	cmp	r3, #58	@ 0x3a
 801cad2:	d11c      	bne.n	801cb0e <get_ldnumber+0x76>
			tp = *path;
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	1c5a      	adds	r2, r3, #1
 801cade:	60fa      	str	r2, [r7, #12]
 801cae0:	781b      	ldrb	r3, [r3, #0]
 801cae2:	3b30      	subs	r3, #48	@ 0x30
 801cae4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801cae6:	68bb      	ldr	r3, [r7, #8]
 801cae8:	2b09      	cmp	r3, #9
 801caea:	d80e      	bhi.n	801cb0a <get_ldnumber+0x72>
 801caec:	68fa      	ldr	r2, [r7, #12]
 801caee:	697b      	ldr	r3, [r7, #20]
 801caf0:	429a      	cmp	r2, r3
 801caf2:	d10a      	bne.n	801cb0a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801caf4:	68bb      	ldr	r3, [r7, #8]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d107      	bne.n	801cb0a <get_ldnumber+0x72>
					vol = (int)i;
 801cafa:	68bb      	ldr	r3, [r7, #8]
 801cafc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	3301      	adds	r3, #1
 801cb02:	617b      	str	r3, [r7, #20]
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	697a      	ldr	r2, [r7, #20]
 801cb08:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801cb0a:	693b      	ldr	r3, [r7, #16]
 801cb0c:	e002      	b.n	801cb14 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cb0e:	2300      	movs	r3, #0
 801cb10:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801cb12:	693b      	ldr	r3, [r7, #16]
}
 801cb14:	4618      	mov	r0, r3
 801cb16:	371c      	adds	r7, #28
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb1e:	4770      	bx	lr

0801cb20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cb20:	b580      	push	{r7, lr}
 801cb22:	b082      	sub	sp, #8
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	6078      	str	r0, [r7, #4]
 801cb28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	70da      	strb	r2, [r3, #3]
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	f04f 32ff 	mov.w	r2, #4294967295
 801cb36:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801cb38:	6839      	ldr	r1, [r7, #0]
 801cb3a:	6878      	ldr	r0, [r7, #4]
 801cb3c:	f7fe fb26 	bl	801b18c <move_window>
 801cb40:	4603      	mov	r3, r0
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d001      	beq.n	801cb4a <check_fs+0x2a>
 801cb46:	2304      	movs	r3, #4
 801cb48:	e038      	b.n	801cbbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	3338      	adds	r3, #56	@ 0x38
 801cb4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cb52:	4618      	mov	r0, r3
 801cb54:	f7fe f86a 	bl	801ac2c <ld_word>
 801cb58:	4603      	mov	r3, r0
 801cb5a:	461a      	mov	r2, r3
 801cb5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cb60:	429a      	cmp	r2, r3
 801cb62:	d001      	beq.n	801cb68 <check_fs+0x48>
 801cb64:	2303      	movs	r3, #3
 801cb66:	e029      	b.n	801cbbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cb6e:	2be9      	cmp	r3, #233	@ 0xe9
 801cb70:	d009      	beq.n	801cb86 <check_fs+0x66>
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cb78:	2beb      	cmp	r3, #235	@ 0xeb
 801cb7a:	d11e      	bne.n	801cbba <check_fs+0x9a>
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cb82:	2b90      	cmp	r3, #144	@ 0x90
 801cb84:	d119      	bne.n	801cbba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	3338      	adds	r3, #56	@ 0x38
 801cb8a:	3336      	adds	r3, #54	@ 0x36
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	f7fe f865 	bl	801ac5c <ld_dword>
 801cb92:	4603      	mov	r3, r0
 801cb94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cb98:	4a0a      	ldr	r2, [pc, #40]	@ (801cbc4 <check_fs+0xa4>)
 801cb9a:	4293      	cmp	r3, r2
 801cb9c:	d101      	bne.n	801cba2 <check_fs+0x82>
 801cb9e:	2300      	movs	r3, #0
 801cba0:	e00c      	b.n	801cbbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	3338      	adds	r3, #56	@ 0x38
 801cba6:	3352      	adds	r3, #82	@ 0x52
 801cba8:	4618      	mov	r0, r3
 801cbaa:	f7fe f857 	bl	801ac5c <ld_dword>
 801cbae:	4603      	mov	r3, r0
 801cbb0:	4a05      	ldr	r2, [pc, #20]	@ (801cbc8 <check_fs+0xa8>)
 801cbb2:	4293      	cmp	r3, r2
 801cbb4:	d101      	bne.n	801cbba <check_fs+0x9a>
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	e000      	b.n	801cbbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cbba:	2302      	movs	r3, #2
}
 801cbbc:	4618      	mov	r0, r3
 801cbbe:	3708      	adds	r7, #8
 801cbc0:	46bd      	mov	sp, r7
 801cbc2:	bd80      	pop	{r7, pc}
 801cbc4:	00544146 	.word	0x00544146
 801cbc8:	33544146 	.word	0x33544146

0801cbcc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b096      	sub	sp, #88	@ 0x58
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	60f8      	str	r0, [r7, #12]
 801cbd4:	60b9      	str	r1, [r7, #8]
 801cbd6:	4613      	mov	r3, r2
 801cbd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cbda:	68bb      	ldr	r3, [r7, #8]
 801cbdc:	2200      	movs	r2, #0
 801cbde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cbe0:	68f8      	ldr	r0, [r7, #12]
 801cbe2:	f7ff ff59 	bl	801ca98 <get_ldnumber>
 801cbe6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cbe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	da01      	bge.n	801cbf2 <find_volume+0x26>
 801cbee:	230b      	movs	r3, #11
 801cbf0:	e265      	b.n	801d0be <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cbf2:	4a9f      	ldr	r2, [pc, #636]	@ (801ce70 <find_volume+0x2a4>)
 801cbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cbf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cbfa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d101      	bne.n	801cc06 <find_volume+0x3a>
 801cc02:	230c      	movs	r3, #12
 801cc04:	e25b      	b.n	801d0be <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cc06:	68bb      	ldr	r3, [r7, #8]
 801cc08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cc0c:	79fb      	ldrb	r3, [r7, #7]
 801cc0e:	f023 0301 	bic.w	r3, r3, #1
 801cc12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc16:	781b      	ldrb	r3, [r3, #0]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d01a      	beq.n	801cc52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc1e:	785b      	ldrb	r3, [r3, #1]
 801cc20:	4618      	mov	r0, r3
 801cc22:	f7fd ff63 	bl	801aaec <disk_status>
 801cc26:	4603      	mov	r3, r0
 801cc28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cc2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cc30:	f003 0301 	and.w	r3, r3, #1
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d10c      	bne.n	801cc52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cc38:	79fb      	ldrb	r3, [r7, #7]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d007      	beq.n	801cc4e <find_volume+0x82>
 801cc3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cc42:	f003 0304 	and.w	r3, r3, #4
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d001      	beq.n	801cc4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cc4a:	230a      	movs	r3, #10
 801cc4c:	e237      	b.n	801d0be <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cc4e:	2300      	movs	r3, #0
 801cc50:	e235      	b.n	801d0be <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc54:	2200      	movs	r2, #0
 801cc56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc5a:	b2da      	uxtb	r2, r3
 801cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc62:	785b      	ldrb	r3, [r3, #1]
 801cc64:	4618      	mov	r0, r3
 801cc66:	f7fd ff5b 	bl	801ab20 <disk_initialize>
 801cc6a:	4603      	mov	r3, r0
 801cc6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cc70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cc74:	f003 0301 	and.w	r3, r3, #1
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d001      	beq.n	801cc80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cc7c:	2303      	movs	r3, #3
 801cc7e:	e21e      	b.n	801d0be <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cc80:	79fb      	ldrb	r3, [r7, #7]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d007      	beq.n	801cc96 <find_volume+0xca>
 801cc86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cc8a:	f003 0304 	and.w	r3, r3, #4
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d001      	beq.n	801cc96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cc92:	230a      	movs	r3, #10
 801cc94:	e213      	b.n	801d0be <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc98:	7858      	ldrb	r0, [r3, #1]
 801cc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc9c:	330c      	adds	r3, #12
 801cc9e:	461a      	mov	r2, r3
 801cca0:	2102      	movs	r1, #2
 801cca2:	f7fd ffa5 	bl	801abf0 <disk_ioctl>
 801cca6:	4603      	mov	r3, r0
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d001      	beq.n	801ccb0 <find_volume+0xe4>
 801ccac:	2301      	movs	r3, #1
 801ccae:	e206      	b.n	801d0be <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccb2:	899b      	ldrh	r3, [r3, #12]
 801ccb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ccb8:	d80d      	bhi.n	801ccd6 <find_volume+0x10a>
 801ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccbc:	899b      	ldrh	r3, [r3, #12]
 801ccbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ccc2:	d308      	bcc.n	801ccd6 <find_volume+0x10a>
 801ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccc6:	899b      	ldrh	r3, [r3, #12]
 801ccc8:	461a      	mov	r2, r3
 801ccca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cccc:	899b      	ldrh	r3, [r3, #12]
 801ccce:	3b01      	subs	r3, #1
 801ccd0:	4013      	ands	r3, r2
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d001      	beq.n	801ccda <find_volume+0x10e>
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	e1f1      	b.n	801d0be <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801ccda:	2300      	movs	r3, #0
 801ccdc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801ccde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cce0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cce2:	f7ff ff1d 	bl	801cb20 <check_fs>
 801cce6:	4603      	mov	r3, r0
 801cce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801ccec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ccf0:	2b02      	cmp	r3, #2
 801ccf2:	d149      	bne.n	801cd88 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801ccf4:	2300      	movs	r3, #0
 801ccf6:	643b      	str	r3, [r7, #64]	@ 0x40
 801ccf8:	e01e      	b.n	801cd38 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801ccfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccfc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801cd00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd02:	011b      	lsls	r3, r3, #4
 801cd04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801cd08:	4413      	add	r3, r2
 801cd0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd0e:	3304      	adds	r3, #4
 801cd10:	781b      	ldrb	r3, [r3, #0]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d006      	beq.n	801cd24 <find_volume+0x158>
 801cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd18:	3308      	adds	r3, #8
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	f7fd ff9e 	bl	801ac5c <ld_dword>
 801cd20:	4602      	mov	r2, r0
 801cd22:	e000      	b.n	801cd26 <find_volume+0x15a>
 801cd24:	2200      	movs	r2, #0
 801cd26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd28:	009b      	lsls	r3, r3, #2
 801cd2a:	3358      	adds	r3, #88	@ 0x58
 801cd2c:	443b      	add	r3, r7
 801cd2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd34:	3301      	adds	r3, #1
 801cd36:	643b      	str	r3, [r7, #64]	@ 0x40
 801cd38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd3a:	2b03      	cmp	r3, #3
 801cd3c:	d9dd      	bls.n	801ccfa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801cd3e:	2300      	movs	r3, #0
 801cd40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801cd42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d002      	beq.n	801cd4e <find_volume+0x182>
 801cd48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd4a:	3b01      	subs	r3, #1
 801cd4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801cd4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd50:	009b      	lsls	r3, r3, #2
 801cd52:	3358      	adds	r3, #88	@ 0x58
 801cd54:	443b      	add	r3, r7
 801cd56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cd5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cd5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d005      	beq.n	801cd6e <find_volume+0x1a2>
 801cd62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cd64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cd66:	f7ff fedb 	bl	801cb20 <check_fs>
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	e000      	b.n	801cd70 <find_volume+0x1a4>
 801cd6e:	2303      	movs	r3, #3
 801cd70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801cd74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cd78:	2b01      	cmp	r3, #1
 801cd7a:	d905      	bls.n	801cd88 <find_volume+0x1bc>
 801cd7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd7e:	3301      	adds	r3, #1
 801cd80:	643b      	str	r3, [r7, #64]	@ 0x40
 801cd82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd84:	2b03      	cmp	r3, #3
 801cd86:	d9e2      	bls.n	801cd4e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801cd88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cd8c:	2b04      	cmp	r3, #4
 801cd8e:	d101      	bne.n	801cd94 <find_volume+0x1c8>
 801cd90:	2301      	movs	r3, #1
 801cd92:	e194      	b.n	801d0be <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801cd94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cd98:	2b01      	cmp	r3, #1
 801cd9a:	d901      	bls.n	801cda0 <find_volume+0x1d4>
 801cd9c:	230d      	movs	r3, #13
 801cd9e:	e18e      	b.n	801d0be <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801cda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cda2:	3338      	adds	r3, #56	@ 0x38
 801cda4:	330b      	adds	r3, #11
 801cda6:	4618      	mov	r0, r3
 801cda8:	f7fd ff40 	bl	801ac2c <ld_word>
 801cdac:	4603      	mov	r3, r0
 801cdae:	461a      	mov	r2, r3
 801cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdb2:	899b      	ldrh	r3, [r3, #12]
 801cdb4:	429a      	cmp	r2, r3
 801cdb6:	d001      	beq.n	801cdbc <find_volume+0x1f0>
 801cdb8:	230d      	movs	r3, #13
 801cdba:	e180      	b.n	801d0be <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdbe:	3338      	adds	r3, #56	@ 0x38
 801cdc0:	3316      	adds	r3, #22
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7fd ff32 	bl	801ac2c <ld_word>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801cdcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d106      	bne.n	801cde0 <find_volume+0x214>
 801cdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdd4:	3338      	adds	r3, #56	@ 0x38
 801cdd6:	3324      	adds	r3, #36	@ 0x24
 801cdd8:	4618      	mov	r0, r3
 801cdda:	f7fd ff3f 	bl	801ac5c <ld_dword>
 801cdde:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cde2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cde4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801cde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cde8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801cdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801cdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdf2:	789b      	ldrb	r3, [r3, #2]
 801cdf4:	2b01      	cmp	r3, #1
 801cdf6:	d005      	beq.n	801ce04 <find_volume+0x238>
 801cdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdfa:	789b      	ldrb	r3, [r3, #2]
 801cdfc:	2b02      	cmp	r3, #2
 801cdfe:	d001      	beq.n	801ce04 <find_volume+0x238>
 801ce00:	230d      	movs	r3, #13
 801ce02:	e15c      	b.n	801d0be <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801ce04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce06:	789b      	ldrb	r3, [r3, #2]
 801ce08:	461a      	mov	r2, r3
 801ce0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce0c:	fb02 f303 	mul.w	r3, r2, r3
 801ce10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801ce12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801ce18:	461a      	mov	r2, r3
 801ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce20:	895b      	ldrh	r3, [r3, #10]
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d008      	beq.n	801ce38 <find_volume+0x26c>
 801ce26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce28:	895b      	ldrh	r3, [r3, #10]
 801ce2a:	461a      	mov	r2, r3
 801ce2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce2e:	895b      	ldrh	r3, [r3, #10]
 801ce30:	3b01      	subs	r3, #1
 801ce32:	4013      	ands	r3, r2
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d001      	beq.n	801ce3c <find_volume+0x270>
 801ce38:	230d      	movs	r3, #13
 801ce3a:	e140      	b.n	801d0be <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801ce3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce3e:	3338      	adds	r3, #56	@ 0x38
 801ce40:	3311      	adds	r3, #17
 801ce42:	4618      	mov	r0, r3
 801ce44:	f7fd fef2 	bl	801ac2c <ld_word>
 801ce48:	4603      	mov	r3, r0
 801ce4a:	461a      	mov	r2, r3
 801ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801ce50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce52:	891b      	ldrh	r3, [r3, #8]
 801ce54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce56:	8992      	ldrh	r2, [r2, #12]
 801ce58:	0952      	lsrs	r2, r2, #5
 801ce5a:	b292      	uxth	r2, r2
 801ce5c:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce60:	fb01 f202 	mul.w	r2, r1, r2
 801ce64:	1a9b      	subs	r3, r3, r2
 801ce66:	b29b      	uxth	r3, r3
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d003      	beq.n	801ce74 <find_volume+0x2a8>
 801ce6c:	230d      	movs	r3, #13
 801ce6e:	e126      	b.n	801d0be <find_volume+0x4f2>
 801ce70:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce76:	3338      	adds	r3, #56	@ 0x38
 801ce78:	3313      	adds	r3, #19
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	f7fd fed6 	bl	801ac2c <ld_word>
 801ce80:	4603      	mov	r3, r0
 801ce82:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801ce84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d106      	bne.n	801ce98 <find_volume+0x2cc>
 801ce8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce8c:	3338      	adds	r3, #56	@ 0x38
 801ce8e:	3320      	adds	r3, #32
 801ce90:	4618      	mov	r0, r3
 801ce92:	f7fd fee3 	bl	801ac5c <ld_dword>
 801ce96:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801ce98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce9a:	3338      	adds	r3, #56	@ 0x38
 801ce9c:	330e      	adds	r3, #14
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7fd fec4 	bl	801ac2c <ld_word>
 801cea4:	4603      	mov	r3, r0
 801cea6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801cea8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d101      	bne.n	801ceb2 <find_volume+0x2e6>
 801ceae:	230d      	movs	r3, #13
 801ceb0:	e105      	b.n	801d0be <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801ceb2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ceb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ceb6:	4413      	add	r3, r2
 801ceb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ceba:	8911      	ldrh	r1, [r2, #8]
 801cebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cebe:	8992      	ldrh	r2, [r2, #12]
 801cec0:	0952      	lsrs	r2, r2, #5
 801cec2:	b292      	uxth	r2, r2
 801cec4:	fbb1 f2f2 	udiv	r2, r1, r2
 801cec8:	b292      	uxth	r2, r2
 801ceca:	4413      	add	r3, r2
 801cecc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801cece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ced0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d201      	bcs.n	801ceda <find_volume+0x30e>
 801ced6:	230d      	movs	r3, #13
 801ced8:	e0f1      	b.n	801d0be <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801ceda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cede:	1ad3      	subs	r3, r2, r3
 801cee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cee2:	8952      	ldrh	r2, [r2, #10]
 801cee4:	fbb3 f3f2 	udiv	r3, r3, r2
 801cee8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801ceea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d101      	bne.n	801cef4 <find_volume+0x328>
 801cef0:	230d      	movs	r3, #13
 801cef2:	e0e4      	b.n	801d0be <find_volume+0x4f2>
		fmt = FS_FAT32;
 801cef4:	2303      	movs	r3, #3
 801cef6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cefc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801cf00:	4293      	cmp	r3, r2
 801cf02:	d802      	bhi.n	801cf0a <find_volume+0x33e>
 801cf04:	2302      	movs	r3, #2
 801cf06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf0c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801cf10:	4293      	cmp	r3, r2
 801cf12:	d802      	bhi.n	801cf1a <find_volume+0x34e>
 801cf14:	2301      	movs	r3, #1
 801cf16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801cf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf1c:	1c9a      	adds	r2, r3, #2
 801cf1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf20:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801cf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cf26:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801cf28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cf2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf2c:	441a      	add	r2, r3
 801cf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf30:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801cf32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf36:	441a      	add	r2, r3
 801cf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf3a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801cf3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cf40:	2b03      	cmp	r3, #3
 801cf42:	d11e      	bne.n	801cf82 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801cf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf46:	3338      	adds	r3, #56	@ 0x38
 801cf48:	332a      	adds	r3, #42	@ 0x2a
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f7fd fe6e 	bl	801ac2c <ld_word>
 801cf50:	4603      	mov	r3, r0
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d001      	beq.n	801cf5a <find_volume+0x38e>
 801cf56:	230d      	movs	r3, #13
 801cf58:	e0b1      	b.n	801d0be <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801cf5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf5c:	891b      	ldrh	r3, [r3, #8]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d001      	beq.n	801cf66 <find_volume+0x39a>
 801cf62:	230d      	movs	r3, #13
 801cf64:	e0ab      	b.n	801d0be <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801cf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf68:	3338      	adds	r3, #56	@ 0x38
 801cf6a:	332c      	adds	r3, #44	@ 0x2c
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	f7fd fe75 	bl	801ac5c <ld_dword>
 801cf72:	4602      	mov	r2, r0
 801cf74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf76:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801cf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf7a:	69db      	ldr	r3, [r3, #28]
 801cf7c:	009b      	lsls	r3, r3, #2
 801cf7e:	647b      	str	r3, [r7, #68]	@ 0x44
 801cf80:	e01f      	b.n	801cfc2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801cf82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf84:	891b      	ldrh	r3, [r3, #8]
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d101      	bne.n	801cf8e <find_volume+0x3c2>
 801cf8a:	230d      	movs	r3, #13
 801cf8c:	e097      	b.n	801d0be <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cf92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cf94:	441a      	add	r2, r3
 801cf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf98:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801cf9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cf9e:	2b02      	cmp	r3, #2
 801cfa0:	d103      	bne.n	801cfaa <find_volume+0x3de>
 801cfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa4:	69db      	ldr	r3, [r3, #28]
 801cfa6:	005b      	lsls	r3, r3, #1
 801cfa8:	e00a      	b.n	801cfc0 <find_volume+0x3f4>
 801cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfac:	69da      	ldr	r2, [r3, #28]
 801cfae:	4613      	mov	r3, r2
 801cfb0:	005b      	lsls	r3, r3, #1
 801cfb2:	4413      	add	r3, r2
 801cfb4:	085a      	lsrs	r2, r3, #1
 801cfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb8:	69db      	ldr	r3, [r3, #28]
 801cfba:	f003 0301 	and.w	r3, r3, #1
 801cfbe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801cfc0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801cfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc4:	6a1a      	ldr	r2, [r3, #32]
 801cfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc8:	899b      	ldrh	r3, [r3, #12]
 801cfca:	4619      	mov	r1, r3
 801cfcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfce:	440b      	add	r3, r1
 801cfd0:	3b01      	subs	r3, #1
 801cfd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cfd4:	8989      	ldrh	r1, [r1, #12]
 801cfd6:	fbb3 f3f1 	udiv	r3, r3, r1
 801cfda:	429a      	cmp	r2, r3
 801cfdc:	d201      	bcs.n	801cfe2 <find_volume+0x416>
 801cfde:	230d      	movs	r3, #13
 801cfe0:	e06d      	b.n	801d0be <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801cfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 801cfe8:	619a      	str	r2, [r3, #24]
 801cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfec:	699a      	ldr	r2, [r3, #24]
 801cfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff4:	2280      	movs	r2, #128	@ 0x80
 801cff6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801cff8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cffc:	2b03      	cmp	r3, #3
 801cffe:	d149      	bne.n	801d094 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d002:	3338      	adds	r3, #56	@ 0x38
 801d004:	3330      	adds	r3, #48	@ 0x30
 801d006:	4618      	mov	r0, r3
 801d008:	f7fd fe10 	bl	801ac2c <ld_word>
 801d00c:	4603      	mov	r3, r0
 801d00e:	2b01      	cmp	r3, #1
 801d010:	d140      	bne.n	801d094 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d014:	3301      	adds	r3, #1
 801d016:	4619      	mov	r1, r3
 801d018:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d01a:	f7fe f8b7 	bl	801b18c <move_window>
 801d01e:	4603      	mov	r3, r0
 801d020:	2b00      	cmp	r3, #0
 801d022:	d137      	bne.n	801d094 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d026:	2200      	movs	r2, #0
 801d028:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d02c:	3338      	adds	r3, #56	@ 0x38
 801d02e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d032:	4618      	mov	r0, r3
 801d034:	f7fd fdfa 	bl	801ac2c <ld_word>
 801d038:	4603      	mov	r3, r0
 801d03a:	461a      	mov	r2, r3
 801d03c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d040:	429a      	cmp	r2, r3
 801d042:	d127      	bne.n	801d094 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d046:	3338      	adds	r3, #56	@ 0x38
 801d048:	4618      	mov	r0, r3
 801d04a:	f7fd fe07 	bl	801ac5c <ld_dword>
 801d04e:	4603      	mov	r3, r0
 801d050:	4a1d      	ldr	r2, [pc, #116]	@ (801d0c8 <find_volume+0x4fc>)
 801d052:	4293      	cmp	r3, r2
 801d054:	d11e      	bne.n	801d094 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d058:	3338      	adds	r3, #56	@ 0x38
 801d05a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d05e:	4618      	mov	r0, r3
 801d060:	f7fd fdfc 	bl	801ac5c <ld_dword>
 801d064:	4603      	mov	r3, r0
 801d066:	4a19      	ldr	r2, [pc, #100]	@ (801d0cc <find_volume+0x500>)
 801d068:	4293      	cmp	r3, r2
 801d06a:	d113      	bne.n	801d094 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06e:	3338      	adds	r3, #56	@ 0x38
 801d070:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d074:	4618      	mov	r0, r3
 801d076:	f7fd fdf1 	bl	801ac5c <ld_dword>
 801d07a:	4602      	mov	r2, r0
 801d07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d07e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d082:	3338      	adds	r3, #56	@ 0x38
 801d084:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d088:	4618      	mov	r0, r3
 801d08a:	f7fd fde7 	bl	801ac5c <ld_dword>
 801d08e:	4602      	mov	r2, r0
 801d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d092:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d096:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d09a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d09c:	4b0c      	ldr	r3, [pc, #48]	@ (801d0d0 <find_volume+0x504>)
 801d09e:	881b      	ldrh	r3, [r3, #0]
 801d0a0:	3301      	adds	r3, #1
 801d0a2:	b29a      	uxth	r2, r3
 801d0a4:	4b0a      	ldr	r3, [pc, #40]	@ (801d0d0 <find_volume+0x504>)
 801d0a6:	801a      	strh	r2, [r3, #0]
 801d0a8:	4b09      	ldr	r3, [pc, #36]	@ (801d0d0 <find_volume+0x504>)
 801d0aa:	881a      	ldrh	r2, [r3, #0]
 801d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0b2:	4a08      	ldr	r2, [pc, #32]	@ (801d0d4 <find_volume+0x508>)
 801d0b4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d0b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d0b8:	f7fe f800 	bl	801b0bc <clear_lock>
#endif
	return FR_OK;
 801d0bc:	2300      	movs	r3, #0
}
 801d0be:	4618      	mov	r0, r3
 801d0c0:	3758      	adds	r7, #88	@ 0x58
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
 801d0c6:	bf00      	nop
 801d0c8:	41615252 	.word	0x41615252
 801d0cc:	61417272 	.word	0x61417272
 801d0d0:	24000554 	.word	0x24000554
 801d0d4:	24000568 	.word	0x24000568

0801d0d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	b084      	sub	sp, #16
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
 801d0e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d0e2:	2309      	movs	r3, #9
 801d0e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d01c      	beq.n	801d126 <validate+0x4e>
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d018      	beq.n	801d126 <validate+0x4e>
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	781b      	ldrb	r3, [r3, #0]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d013      	beq.n	801d126 <validate+0x4e>
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	889a      	ldrh	r2, [r3, #4]
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	88db      	ldrh	r3, [r3, #6]
 801d108:	429a      	cmp	r2, r3
 801d10a:	d10c      	bne.n	801d126 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	785b      	ldrb	r3, [r3, #1]
 801d112:	4618      	mov	r0, r3
 801d114:	f7fd fcea 	bl	801aaec <disk_status>
 801d118:	4603      	mov	r3, r0
 801d11a:	f003 0301 	and.w	r3, r3, #1
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d101      	bne.n	801d126 <validate+0x4e>
			res = FR_OK;
 801d122:	2300      	movs	r3, #0
 801d124:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d126:	7bfb      	ldrb	r3, [r7, #15]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d102      	bne.n	801d132 <validate+0x5a>
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	e000      	b.n	801d134 <validate+0x5c>
 801d132:	2300      	movs	r3, #0
 801d134:	683a      	ldr	r2, [r7, #0]
 801d136:	6013      	str	r3, [r2, #0]
	return res;
 801d138:	7bfb      	ldrb	r3, [r7, #15]
}
 801d13a:	4618      	mov	r0, r3
 801d13c:	3710      	adds	r7, #16
 801d13e:	46bd      	mov	sp, r7
 801d140:	bd80      	pop	{r7, pc}
	...

0801d144 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b088      	sub	sp, #32
 801d148:	af00      	add	r7, sp, #0
 801d14a:	60f8      	str	r0, [r7, #12]
 801d14c:	60b9      	str	r1, [r7, #8]
 801d14e:	4613      	mov	r3, r2
 801d150:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d152:	68bb      	ldr	r3, [r7, #8]
 801d154:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d156:	f107 0310 	add.w	r3, r7, #16
 801d15a:	4618      	mov	r0, r3
 801d15c:	f7ff fc9c 	bl	801ca98 <get_ldnumber>
 801d160:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d162:	69fb      	ldr	r3, [r7, #28]
 801d164:	2b00      	cmp	r3, #0
 801d166:	da01      	bge.n	801d16c <f_mount+0x28>
 801d168:	230b      	movs	r3, #11
 801d16a:	e02b      	b.n	801d1c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d16c:	4a17      	ldr	r2, [pc, #92]	@ (801d1cc <f_mount+0x88>)
 801d16e:	69fb      	ldr	r3, [r7, #28]
 801d170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d174:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d176:	69bb      	ldr	r3, [r7, #24]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d005      	beq.n	801d188 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d17c:	69b8      	ldr	r0, [r7, #24]
 801d17e:	f7fd ff9d 	bl	801b0bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d182:	69bb      	ldr	r3, [r7, #24]
 801d184:	2200      	movs	r2, #0
 801d186:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d002      	beq.n	801d194 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	2200      	movs	r2, #0
 801d192:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d194:	68fa      	ldr	r2, [r7, #12]
 801d196:	490d      	ldr	r1, [pc, #52]	@ (801d1cc <f_mount+0x88>)
 801d198:	69fb      	ldr	r3, [r7, #28]
 801d19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d002      	beq.n	801d1aa <f_mount+0x66>
 801d1a4:	79fb      	ldrb	r3, [r7, #7]
 801d1a6:	2b01      	cmp	r3, #1
 801d1a8:	d001      	beq.n	801d1ae <f_mount+0x6a>
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	e00a      	b.n	801d1c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d1ae:	f107 010c 	add.w	r1, r7, #12
 801d1b2:	f107 0308 	add.w	r3, r7, #8
 801d1b6:	2200      	movs	r2, #0
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	f7ff fd07 	bl	801cbcc <find_volume>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	3720      	adds	r7, #32
 801d1c8:	46bd      	mov	sp, r7
 801d1ca:	bd80      	pop	{r7, pc}
 801d1cc:	24000550 	.word	0x24000550

0801d1d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d1d0:	b580      	push	{r7, lr}
 801d1d2:	b09a      	sub	sp, #104	@ 0x68
 801d1d4:	af00      	add	r7, sp, #0
 801d1d6:	60f8      	str	r0, [r7, #12]
 801d1d8:	60b9      	str	r1, [r7, #8]
 801d1da:	4613      	mov	r3, r2
 801d1dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d101      	bne.n	801d1e8 <f_open+0x18>
 801d1e4:	2309      	movs	r3, #9
 801d1e6:	e1b7      	b.n	801d558 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d1e8:	79fb      	ldrb	r3, [r7, #7]
 801d1ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d1ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d1f0:	79fa      	ldrb	r2, [r7, #7]
 801d1f2:	f107 0114 	add.w	r1, r7, #20
 801d1f6:	f107 0308 	add.w	r3, r7, #8
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	f7ff fce6 	bl	801cbcc <find_volume>
 801d200:	4603      	mov	r3, r0
 801d202:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d206:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	f040 819b 	bne.w	801d546 <f_open+0x376>
		dj.obj.fs = fs;
 801d210:	697b      	ldr	r3, [r7, #20]
 801d212:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d214:	68ba      	ldr	r2, [r7, #8]
 801d216:	f107 0318 	add.w	r3, r7, #24
 801d21a:	4611      	mov	r1, r2
 801d21c:	4618      	mov	r0, r3
 801d21e:	f7ff fbc5 	bl	801c9ac <follow_path>
 801d222:	4603      	mov	r3, r0
 801d224:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d228:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d118      	bne.n	801d262 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d234:	b25b      	sxtb	r3, r3
 801d236:	2b00      	cmp	r3, #0
 801d238:	da03      	bge.n	801d242 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d23a:	2306      	movs	r3, #6
 801d23c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d240:	e00f      	b.n	801d262 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d242:	79fb      	ldrb	r3, [r7, #7]
 801d244:	2b01      	cmp	r3, #1
 801d246:	bf8c      	ite	hi
 801d248:	2301      	movhi	r3, #1
 801d24a:	2300      	movls	r3, #0
 801d24c:	b2db      	uxtb	r3, r3
 801d24e:	461a      	mov	r2, r3
 801d250:	f107 0318 	add.w	r3, r7, #24
 801d254:	4611      	mov	r1, r2
 801d256:	4618      	mov	r0, r3
 801d258:	f7fd fde8 	bl	801ae2c <chk_lock>
 801d25c:	4603      	mov	r3, r0
 801d25e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d262:	79fb      	ldrb	r3, [r7, #7]
 801d264:	f003 031c 	and.w	r3, r3, #28
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d07f      	beq.n	801d36c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d26c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d270:	2b00      	cmp	r3, #0
 801d272:	d017      	beq.n	801d2a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d274:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d278:	2b04      	cmp	r3, #4
 801d27a:	d10e      	bne.n	801d29a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d27c:	f7fd fe32 	bl	801aee4 <enq_lock>
 801d280:	4603      	mov	r3, r0
 801d282:	2b00      	cmp	r3, #0
 801d284:	d006      	beq.n	801d294 <f_open+0xc4>
 801d286:	f107 0318 	add.w	r3, r7, #24
 801d28a:	4618      	mov	r0, r3
 801d28c:	f7ff f894 	bl	801c3b8 <dir_register>
 801d290:	4603      	mov	r3, r0
 801d292:	e000      	b.n	801d296 <f_open+0xc6>
 801d294:	2312      	movs	r3, #18
 801d296:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d29a:	79fb      	ldrb	r3, [r7, #7]
 801d29c:	f043 0308 	orr.w	r3, r3, #8
 801d2a0:	71fb      	strb	r3, [r7, #7]
 801d2a2:	e010      	b.n	801d2c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d2a4:	7fbb      	ldrb	r3, [r7, #30]
 801d2a6:	f003 0311 	and.w	r3, r3, #17
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d003      	beq.n	801d2b6 <f_open+0xe6>
					res = FR_DENIED;
 801d2ae:	2307      	movs	r3, #7
 801d2b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d2b4:	e007      	b.n	801d2c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d2b6:	79fb      	ldrb	r3, [r7, #7]
 801d2b8:	f003 0304 	and.w	r3, r3, #4
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d002      	beq.n	801d2c6 <f_open+0xf6>
 801d2c0:	2308      	movs	r3, #8
 801d2c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d2c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d168      	bne.n	801d3a0 <f_open+0x1d0>
 801d2ce:	79fb      	ldrb	r3, [r7, #7]
 801d2d0:	f003 0308 	and.w	r3, r3, #8
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d063      	beq.n	801d3a0 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d2d8:	f7fd fbaa 	bl	801aa30 <get_fattime>
 801d2dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e0:	330e      	adds	r3, #14
 801d2e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	f7fd fcf7 	bl	801acd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2ec:	3316      	adds	r3, #22
 801d2ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	f7fd fcf1 	bl	801acd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f8:	330b      	adds	r3, #11
 801d2fa:	2220      	movs	r2, #32
 801d2fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d2fe:	697b      	ldr	r3, [r7, #20]
 801d300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d302:	4611      	mov	r1, r2
 801d304:	4618      	mov	r0, r3
 801d306:	f7fe fcc6 	bl	801bc96 <ld_clust>
 801d30a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d30c:	697b      	ldr	r3, [r7, #20]
 801d30e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d310:	2200      	movs	r2, #0
 801d312:	4618      	mov	r0, r3
 801d314:	f7fe fcde 	bl	801bcd4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d31a:	331c      	adds	r3, #28
 801d31c:	2100      	movs	r1, #0
 801d31e:	4618      	mov	r0, r3
 801d320:	f7fd fcda 	bl	801acd8 <st_dword>
					fs->wflag = 1;
 801d324:	697b      	ldr	r3, [r7, #20]
 801d326:	2201      	movs	r2, #1
 801d328:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d037      	beq.n	801d3a0 <f_open+0x1d0>
						dw = fs->winsect;
 801d330:	697b      	ldr	r3, [r7, #20]
 801d332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d334:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d336:	f107 0318 	add.w	r3, r7, #24
 801d33a:	2200      	movs	r2, #0
 801d33c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d33e:	4618      	mov	r0, r3
 801d340:	f7fe f9ce 	bl	801b6e0 <remove_chain>
 801d344:	4603      	mov	r3, r0
 801d346:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d34a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d126      	bne.n	801d3a0 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d352:	697b      	ldr	r3, [r7, #20]
 801d354:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d356:	4618      	mov	r0, r3
 801d358:	f7fd ff18 	bl	801b18c <move_window>
 801d35c:	4603      	mov	r3, r0
 801d35e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d362:	697b      	ldr	r3, [r7, #20]
 801d364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d366:	3a01      	subs	r2, #1
 801d368:	615a      	str	r2, [r3, #20]
 801d36a:	e019      	b.n	801d3a0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d36c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d370:	2b00      	cmp	r3, #0
 801d372:	d115      	bne.n	801d3a0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d374:	7fbb      	ldrb	r3, [r7, #30]
 801d376:	f003 0310 	and.w	r3, r3, #16
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d003      	beq.n	801d386 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d37e:	2304      	movs	r3, #4
 801d380:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d384:	e00c      	b.n	801d3a0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d386:	79fb      	ldrb	r3, [r7, #7]
 801d388:	f003 0302 	and.w	r3, r3, #2
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d007      	beq.n	801d3a0 <f_open+0x1d0>
 801d390:	7fbb      	ldrb	r3, [r7, #30]
 801d392:	f003 0301 	and.w	r3, r3, #1
 801d396:	2b00      	cmp	r3, #0
 801d398:	d002      	beq.n	801d3a0 <f_open+0x1d0>
						res = FR_DENIED;
 801d39a:	2307      	movs	r3, #7
 801d39c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d3a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d126      	bne.n	801d3f6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d3a8:	79fb      	ldrb	r3, [r7, #7]
 801d3aa:	f003 0308 	and.w	r3, r3, #8
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d003      	beq.n	801d3ba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d3b2:	79fb      	ldrb	r3, [r7, #7]
 801d3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d3ba:	697b      	ldr	r3, [r7, #20]
 801d3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d3c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d3c8:	79fb      	ldrb	r3, [r7, #7]
 801d3ca:	2b01      	cmp	r3, #1
 801d3cc:	bf8c      	ite	hi
 801d3ce:	2301      	movhi	r3, #1
 801d3d0:	2300      	movls	r3, #0
 801d3d2:	b2db      	uxtb	r3, r3
 801d3d4:	461a      	mov	r2, r3
 801d3d6:	f107 0318 	add.w	r3, r7, #24
 801d3da:	4611      	mov	r1, r2
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7fd fda3 	bl	801af28 <inc_lock>
 801d3e2:	4602      	mov	r2, r0
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	691b      	ldr	r3, [r3, #16]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d102      	bne.n	801d3f6 <f_open+0x226>
 801d3f0:	2302      	movs	r3, #2
 801d3f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d3f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	f040 80a3 	bne.w	801d546 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d400:	697b      	ldr	r3, [r7, #20]
 801d402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d404:	4611      	mov	r1, r2
 801d406:	4618      	mov	r0, r3
 801d408:	f7fe fc45 	bl	801bc96 <ld_clust>
 801d40c:	4602      	mov	r2, r0
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d414:	331c      	adds	r3, #28
 801d416:	4618      	mov	r0, r3
 801d418:	f7fd fc20 	bl	801ac5c <ld_dword>
 801d41c:	4602      	mov	r2, r0
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	2200      	movs	r2, #0
 801d426:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d428:	697a      	ldr	r2, [r7, #20]
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d42e:	697b      	ldr	r3, [r7, #20]
 801d430:	88da      	ldrh	r2, [r3, #6]
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	79fa      	ldrb	r2, [r7, #7]
 801d43a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	2200      	movs	r2, #0
 801d440:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	2200      	movs	r2, #0
 801d446:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	2200      	movs	r2, #0
 801d44c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	3330      	adds	r3, #48	@ 0x30
 801d452:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d456:	2100      	movs	r1, #0
 801d458:	4618      	mov	r0, r3
 801d45a:	f7fd fc8a 	bl	801ad72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d45e:	79fb      	ldrb	r3, [r7, #7]
 801d460:	f003 0320 	and.w	r3, r3, #32
 801d464:	2b00      	cmp	r3, #0
 801d466:	d06e      	beq.n	801d546 <f_open+0x376>
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	68db      	ldr	r3, [r3, #12]
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d06a      	beq.n	801d546 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	68da      	ldr	r2, [r3, #12]
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d478:	697b      	ldr	r3, [r7, #20]
 801d47a:	895b      	ldrh	r3, [r3, #10]
 801d47c:	461a      	mov	r2, r3
 801d47e:	697b      	ldr	r3, [r7, #20]
 801d480:	899b      	ldrh	r3, [r3, #12]
 801d482:	fb02 f303 	mul.w	r3, r2, r3
 801d486:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	689b      	ldr	r3, [r3, #8]
 801d48c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	68db      	ldr	r3, [r3, #12]
 801d492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d494:	e016      	b.n	801d4c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d49a:	4618      	mov	r0, r3
 801d49c:	f7fd ff33 	bl	801b306 <get_fat>
 801d4a0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d4a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d4a4:	2b01      	cmp	r3, #1
 801d4a6:	d802      	bhi.n	801d4ae <f_open+0x2de>
 801d4a8:	2302      	movs	r3, #2
 801d4aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d4ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4b4:	d102      	bne.n	801d4bc <f_open+0x2ec>
 801d4b6:	2301      	movs	r3, #1
 801d4b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d4bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d4be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d4c0:	1ad3      	subs	r3, r2, r3
 801d4c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d4c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d103      	bne.n	801d4d4 <f_open+0x304>
 801d4cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d4ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d4d0:	429a      	cmp	r2, r3
 801d4d2:	d8e0      	bhi.n	801d496 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d4d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d4da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d131      	bne.n	801d546 <f_open+0x376>
 801d4e2:	697b      	ldr	r3, [r7, #20]
 801d4e4:	899b      	ldrh	r3, [r3, #12]
 801d4e6:	461a      	mov	r2, r3
 801d4e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d4ea:	fbb3 f1f2 	udiv	r1, r3, r2
 801d4ee:	fb01 f202 	mul.w	r2, r1, r2
 801d4f2:	1a9b      	subs	r3, r3, r2
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d026      	beq.n	801d546 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d4f8:	697b      	ldr	r3, [r7, #20]
 801d4fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	f7fd fee3 	bl	801b2c8 <clust2sect>
 801d502:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d506:	2b00      	cmp	r3, #0
 801d508:	d103      	bne.n	801d512 <f_open+0x342>
						res = FR_INT_ERR;
 801d50a:	2302      	movs	r3, #2
 801d50c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d510:	e019      	b.n	801d546 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d512:	697b      	ldr	r3, [r7, #20]
 801d514:	899b      	ldrh	r3, [r3, #12]
 801d516:	461a      	mov	r2, r3
 801d518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d51a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d51e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d520:	441a      	add	r2, r3
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d526:	697b      	ldr	r3, [r7, #20]
 801d528:	7858      	ldrb	r0, [r3, #1]
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	6a1a      	ldr	r2, [r3, #32]
 801d534:	2301      	movs	r3, #1
 801d536:	f7fd fb1b 	bl	801ab70 <disk_read>
 801d53a:	4603      	mov	r3, r0
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d002      	beq.n	801d546 <f_open+0x376>
 801d540:	2301      	movs	r3, #1
 801d542:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d546:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d002      	beq.n	801d554 <f_open+0x384>
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	2200      	movs	r2, #0
 801d552:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d554:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d558:	4618      	mov	r0, r3
 801d55a:	3768      	adds	r7, #104	@ 0x68
 801d55c:	46bd      	mov	sp, r7
 801d55e:	bd80      	pop	{r7, pc}

0801d560 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b08c      	sub	sp, #48	@ 0x30
 801d564:	af00      	add	r7, sp, #0
 801d566:	60f8      	str	r0, [r7, #12]
 801d568:	60b9      	str	r1, [r7, #8]
 801d56a:	607a      	str	r2, [r7, #4]
 801d56c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d56e:	68bb      	ldr	r3, [r7, #8]
 801d570:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d572:	683b      	ldr	r3, [r7, #0]
 801d574:	2200      	movs	r2, #0
 801d576:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	f107 0210 	add.w	r2, r7, #16
 801d57e:	4611      	mov	r1, r2
 801d580:	4618      	mov	r0, r3
 801d582:	f7ff fda9 	bl	801d0d8 <validate>
 801d586:	4603      	mov	r3, r0
 801d588:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d58c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d590:	2b00      	cmp	r3, #0
 801d592:	d107      	bne.n	801d5a4 <f_write+0x44>
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	7d5b      	ldrb	r3, [r3, #21]
 801d598:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d59c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d002      	beq.n	801d5aa <f_write+0x4a>
 801d5a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d5a8:	e16a      	b.n	801d880 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	7d1b      	ldrb	r3, [r3, #20]
 801d5ae:	f003 0302 	and.w	r3, r3, #2
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d101      	bne.n	801d5ba <f_write+0x5a>
 801d5b6:	2307      	movs	r3, #7
 801d5b8:	e162      	b.n	801d880 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	699a      	ldr	r2, [r3, #24]
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	441a      	add	r2, r3
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	699b      	ldr	r3, [r3, #24]
 801d5c6:	429a      	cmp	r2, r3
 801d5c8:	f080 814c 	bcs.w	801d864 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	699b      	ldr	r3, [r3, #24]
 801d5d0:	43db      	mvns	r3, r3
 801d5d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d5d4:	e146      	b.n	801d864 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	699b      	ldr	r3, [r3, #24]
 801d5da:	693a      	ldr	r2, [r7, #16]
 801d5dc:	8992      	ldrh	r2, [r2, #12]
 801d5de:	fbb3 f1f2 	udiv	r1, r3, r2
 801d5e2:	fb01 f202 	mul.w	r2, r1, r2
 801d5e6:	1a9b      	subs	r3, r3, r2
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	f040 80f1 	bne.w	801d7d0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	699b      	ldr	r3, [r3, #24]
 801d5f2:	693a      	ldr	r2, [r7, #16]
 801d5f4:	8992      	ldrh	r2, [r2, #12]
 801d5f6:	fbb3 f3f2 	udiv	r3, r3, r2
 801d5fa:	693a      	ldr	r2, [r7, #16]
 801d5fc:	8952      	ldrh	r2, [r2, #10]
 801d5fe:	3a01      	subs	r2, #1
 801d600:	4013      	ands	r3, r2
 801d602:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d604:	69bb      	ldr	r3, [r7, #24]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d143      	bne.n	801d692 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	699b      	ldr	r3, [r3, #24]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d10c      	bne.n	801d62c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	689b      	ldr	r3, [r3, #8]
 801d616:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d11a      	bne.n	801d654 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	2100      	movs	r1, #0
 801d622:	4618      	mov	r0, r3
 801d624:	f7fe f8c1 	bl	801b7aa <create_chain>
 801d628:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d62a:	e013      	b.n	801d654 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d630:	2b00      	cmp	r3, #0
 801d632:	d007      	beq.n	801d644 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	699b      	ldr	r3, [r3, #24]
 801d638:	4619      	mov	r1, r3
 801d63a:	68f8      	ldr	r0, [r7, #12]
 801d63c:	f7fe f94d 	bl	801b8da <clmt_clust>
 801d640:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d642:	e007      	b.n	801d654 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d644:	68fa      	ldr	r2, [r7, #12]
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	69db      	ldr	r3, [r3, #28]
 801d64a:	4619      	mov	r1, r3
 801d64c:	4610      	mov	r0, r2
 801d64e:	f7fe f8ac 	bl	801b7aa <create_chain>
 801d652:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d656:	2b00      	cmp	r3, #0
 801d658:	f000 8109 	beq.w	801d86e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d65e:	2b01      	cmp	r3, #1
 801d660:	d104      	bne.n	801d66c <f_write+0x10c>
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	2202      	movs	r2, #2
 801d666:	755a      	strb	r2, [r3, #21]
 801d668:	2302      	movs	r3, #2
 801d66a:	e109      	b.n	801d880 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d672:	d104      	bne.n	801d67e <f_write+0x11e>
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	2201      	movs	r2, #1
 801d678:	755a      	strb	r2, [r3, #21]
 801d67a:	2301      	movs	r3, #1
 801d67c:	e100      	b.n	801d880 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d682:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	689b      	ldr	r3, [r3, #8]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d102      	bne.n	801d692 <f_write+0x132>
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d690:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	7d1b      	ldrb	r3, [r3, #20]
 801d696:	b25b      	sxtb	r3, r3
 801d698:	2b00      	cmp	r3, #0
 801d69a:	da18      	bge.n	801d6ce <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d69c:	693b      	ldr	r3, [r7, #16]
 801d69e:	7858      	ldrb	r0, [r3, #1]
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	6a1a      	ldr	r2, [r3, #32]
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	f7fd fa80 	bl	801abb0 <disk_write>
 801d6b0:	4603      	mov	r3, r0
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d004      	beq.n	801d6c0 <f_write+0x160>
 801d6b6:	68fb      	ldr	r3, [r7, #12]
 801d6b8:	2201      	movs	r2, #1
 801d6ba:	755a      	strb	r2, [r3, #21]
 801d6bc:	2301      	movs	r3, #1
 801d6be:	e0df      	b.n	801d880 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	7d1b      	ldrb	r3, [r3, #20]
 801d6c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d6c8:	b2da      	uxtb	r2, r3
 801d6ca:	68fb      	ldr	r3, [r7, #12]
 801d6cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d6ce:	693a      	ldr	r2, [r7, #16]
 801d6d0:	68fb      	ldr	r3, [r7, #12]
 801d6d2:	69db      	ldr	r3, [r3, #28]
 801d6d4:	4619      	mov	r1, r3
 801d6d6:	4610      	mov	r0, r2
 801d6d8:	f7fd fdf6 	bl	801b2c8 <clust2sect>
 801d6dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d6de:	697b      	ldr	r3, [r7, #20]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d104      	bne.n	801d6ee <f_write+0x18e>
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	2202      	movs	r2, #2
 801d6e8:	755a      	strb	r2, [r3, #21]
 801d6ea:	2302      	movs	r3, #2
 801d6ec:	e0c8      	b.n	801d880 <f_write+0x320>
			sect += csect;
 801d6ee:	697a      	ldr	r2, [r7, #20]
 801d6f0:	69bb      	ldr	r3, [r7, #24]
 801d6f2:	4413      	add	r3, r2
 801d6f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d6f6:	693b      	ldr	r3, [r7, #16]
 801d6f8:	899b      	ldrh	r3, [r3, #12]
 801d6fa:	461a      	mov	r2, r3
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	fbb3 f3f2 	udiv	r3, r3, r2
 801d702:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d704:	6a3b      	ldr	r3, [r7, #32]
 801d706:	2b00      	cmp	r3, #0
 801d708:	d043      	beq.n	801d792 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d70a:	69ba      	ldr	r2, [r7, #24]
 801d70c:	6a3b      	ldr	r3, [r7, #32]
 801d70e:	4413      	add	r3, r2
 801d710:	693a      	ldr	r2, [r7, #16]
 801d712:	8952      	ldrh	r2, [r2, #10]
 801d714:	4293      	cmp	r3, r2
 801d716:	d905      	bls.n	801d724 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d718:	693b      	ldr	r3, [r7, #16]
 801d71a:	895b      	ldrh	r3, [r3, #10]
 801d71c:	461a      	mov	r2, r3
 801d71e:	69bb      	ldr	r3, [r7, #24]
 801d720:	1ad3      	subs	r3, r2, r3
 801d722:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d724:	693b      	ldr	r3, [r7, #16]
 801d726:	7858      	ldrb	r0, [r3, #1]
 801d728:	6a3b      	ldr	r3, [r7, #32]
 801d72a:	697a      	ldr	r2, [r7, #20]
 801d72c:	69f9      	ldr	r1, [r7, #28]
 801d72e:	f7fd fa3f 	bl	801abb0 <disk_write>
 801d732:	4603      	mov	r3, r0
 801d734:	2b00      	cmp	r3, #0
 801d736:	d004      	beq.n	801d742 <f_write+0x1e2>
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	2201      	movs	r2, #1
 801d73c:	755a      	strb	r2, [r3, #21]
 801d73e:	2301      	movs	r3, #1
 801d740:	e09e      	b.n	801d880 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	6a1a      	ldr	r2, [r3, #32]
 801d746:	697b      	ldr	r3, [r7, #20]
 801d748:	1ad3      	subs	r3, r2, r3
 801d74a:	6a3a      	ldr	r2, [r7, #32]
 801d74c:	429a      	cmp	r2, r3
 801d74e:	d918      	bls.n	801d782 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	6a1a      	ldr	r2, [r3, #32]
 801d75a:	697b      	ldr	r3, [r7, #20]
 801d75c:	1ad3      	subs	r3, r2, r3
 801d75e:	693a      	ldr	r2, [r7, #16]
 801d760:	8992      	ldrh	r2, [r2, #12]
 801d762:	fb02 f303 	mul.w	r3, r2, r3
 801d766:	69fa      	ldr	r2, [r7, #28]
 801d768:	18d1      	adds	r1, r2, r3
 801d76a:	693b      	ldr	r3, [r7, #16]
 801d76c:	899b      	ldrh	r3, [r3, #12]
 801d76e:	461a      	mov	r2, r3
 801d770:	f7fd fade 	bl	801ad30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	7d1b      	ldrb	r3, [r3, #20]
 801d778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d77c:	b2da      	uxtb	r2, r3
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d782:	693b      	ldr	r3, [r7, #16]
 801d784:	899b      	ldrh	r3, [r3, #12]
 801d786:	461a      	mov	r2, r3
 801d788:	6a3b      	ldr	r3, [r7, #32]
 801d78a:	fb02 f303 	mul.w	r3, r2, r3
 801d78e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d790:	e04b      	b.n	801d82a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	6a1b      	ldr	r3, [r3, #32]
 801d796:	697a      	ldr	r2, [r7, #20]
 801d798:	429a      	cmp	r2, r3
 801d79a:	d016      	beq.n	801d7ca <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	699a      	ldr	r2, [r3, #24]
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d210      	bcs.n	801d7ca <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d7a8:	693b      	ldr	r3, [r7, #16]
 801d7aa:	7858      	ldrb	r0, [r3, #1]
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	697a      	ldr	r2, [r7, #20]
 801d7b6:	f7fd f9db 	bl	801ab70 <disk_read>
 801d7ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d004      	beq.n	801d7ca <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	2201      	movs	r2, #1
 801d7c4:	755a      	strb	r2, [r3, #21]
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	e05a      	b.n	801d880 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	697a      	ldr	r2, [r7, #20]
 801d7ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d7d0:	693b      	ldr	r3, [r7, #16]
 801d7d2:	899b      	ldrh	r3, [r3, #12]
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	699b      	ldr	r3, [r3, #24]
 801d7da:	693a      	ldr	r2, [r7, #16]
 801d7dc:	8992      	ldrh	r2, [r2, #12]
 801d7de:	fbb3 f1f2 	udiv	r1, r3, r2
 801d7e2:	fb01 f202 	mul.w	r2, r1, r2
 801d7e6:	1a9b      	subs	r3, r3, r2
 801d7e8:	1ac3      	subs	r3, r0, r3
 801d7ea:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d7ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	429a      	cmp	r2, r3
 801d7f2:	d901      	bls.n	801d7f8 <f_write+0x298>
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	699b      	ldr	r3, [r3, #24]
 801d802:	693a      	ldr	r2, [r7, #16]
 801d804:	8992      	ldrh	r2, [r2, #12]
 801d806:	fbb3 f0f2 	udiv	r0, r3, r2
 801d80a:	fb00 f202 	mul.w	r2, r0, r2
 801d80e:	1a9b      	subs	r3, r3, r2
 801d810:	440b      	add	r3, r1
 801d812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d814:	69f9      	ldr	r1, [r7, #28]
 801d816:	4618      	mov	r0, r3
 801d818:	f7fd fa8a 	bl	801ad30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	7d1b      	ldrb	r3, [r3, #20]
 801d820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d824:	b2da      	uxtb	r2, r3
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d82a:	69fa      	ldr	r2, [r7, #28]
 801d82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d82e:	4413      	add	r3, r2
 801d830:	61fb      	str	r3, [r7, #28]
 801d832:	68fb      	ldr	r3, [r7, #12]
 801d834:	699a      	ldr	r2, [r3, #24]
 801d836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d838:	441a      	add	r2, r3
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	619a      	str	r2, [r3, #24]
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	68da      	ldr	r2, [r3, #12]
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	699b      	ldr	r3, [r3, #24]
 801d846:	429a      	cmp	r2, r3
 801d848:	bf38      	it	cc
 801d84a:	461a      	movcc	r2, r3
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	60da      	str	r2, [r3, #12]
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	681a      	ldr	r2, [r3, #0]
 801d854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d856:	441a      	add	r2, r3
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	601a      	str	r2, [r3, #0]
 801d85c:	687a      	ldr	r2, [r7, #4]
 801d85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d860:	1ad3      	subs	r3, r2, r3
 801d862:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	2b00      	cmp	r3, #0
 801d868:	f47f aeb5 	bne.w	801d5d6 <f_write+0x76>
 801d86c:	e000      	b.n	801d870 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d86e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	7d1b      	ldrb	r3, [r3, #20]
 801d874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d878:	b2da      	uxtb	r2, r3
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d87e:	2300      	movs	r3, #0
}
 801d880:	4618      	mov	r0, r3
 801d882:	3730      	adds	r7, #48	@ 0x30
 801d884:	46bd      	mov	sp, r7
 801d886:	bd80      	pop	{r7, pc}

0801d888 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b086      	sub	sp, #24
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	f107 0208 	add.w	r2, r7, #8
 801d896:	4611      	mov	r1, r2
 801d898:	4618      	mov	r0, r3
 801d89a:	f7ff fc1d 	bl	801d0d8 <validate>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d8a2:	7dfb      	ldrb	r3, [r7, #23]
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d168      	bne.n	801d97a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	7d1b      	ldrb	r3, [r3, #20]
 801d8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d062      	beq.n	801d97a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	7d1b      	ldrb	r3, [r3, #20]
 801d8b8:	b25b      	sxtb	r3, r3
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	da15      	bge.n	801d8ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d8be:	68bb      	ldr	r3, [r7, #8]
 801d8c0:	7858      	ldrb	r0, [r3, #1]
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	6a1a      	ldr	r2, [r3, #32]
 801d8cc:	2301      	movs	r3, #1
 801d8ce:	f7fd f96f 	bl	801abb0 <disk_write>
 801d8d2:	4603      	mov	r3, r0
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d001      	beq.n	801d8dc <f_sync+0x54>
 801d8d8:	2301      	movs	r3, #1
 801d8da:	e04f      	b.n	801d97c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	7d1b      	ldrb	r3, [r3, #20]
 801d8e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d8e4:	b2da      	uxtb	r2, r3
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d8ea:	f7fd f8a1 	bl	801aa30 <get_fattime>
 801d8ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d8f0:	68ba      	ldr	r2, [r7, #8]
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8f6:	4619      	mov	r1, r3
 801d8f8:	4610      	mov	r0, r2
 801d8fa:	f7fd fc47 	bl	801b18c <move_window>
 801d8fe:	4603      	mov	r3, r0
 801d900:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d902:	7dfb      	ldrb	r3, [r7, #23]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d138      	bne.n	801d97a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d90c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	330b      	adds	r3, #11
 801d912:	781a      	ldrb	r2, [r3, #0]
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	330b      	adds	r3, #11
 801d918:	f042 0220 	orr.w	r2, r2, #32
 801d91c:	b2d2      	uxtb	r2, r2
 801d91e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	6818      	ldr	r0, [r3, #0]
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	689b      	ldr	r3, [r3, #8]
 801d928:	461a      	mov	r2, r3
 801d92a:	68f9      	ldr	r1, [r7, #12]
 801d92c:	f7fe f9d2 	bl	801bcd4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	f103 021c 	add.w	r2, r3, #28
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	68db      	ldr	r3, [r3, #12]
 801d93a:	4619      	mov	r1, r3
 801d93c:	4610      	mov	r0, r2
 801d93e:	f7fd f9cb 	bl	801acd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	3316      	adds	r3, #22
 801d946:	6939      	ldr	r1, [r7, #16]
 801d948:	4618      	mov	r0, r3
 801d94a:	f7fd f9c5 	bl	801acd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	3312      	adds	r3, #18
 801d952:	2100      	movs	r1, #0
 801d954:	4618      	mov	r0, r3
 801d956:	f7fd f9a4 	bl	801aca2 <st_word>
					fs->wflag = 1;
 801d95a:	68bb      	ldr	r3, [r7, #8]
 801d95c:	2201      	movs	r2, #1
 801d95e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d960:	68bb      	ldr	r3, [r7, #8]
 801d962:	4618      	mov	r0, r3
 801d964:	f7fd fc40 	bl	801b1e8 <sync_fs>
 801d968:	4603      	mov	r3, r0
 801d96a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	7d1b      	ldrb	r3, [r3, #20]
 801d970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d974:	b2da      	uxtb	r2, r3
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d97a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d97c:	4618      	mov	r0, r3
 801d97e:	3718      	adds	r7, #24
 801d980:	46bd      	mov	sp, r7
 801d982:	bd80      	pop	{r7, pc}

0801d984 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b084      	sub	sp, #16
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d98c:	6878      	ldr	r0, [r7, #4]
 801d98e:	f7ff ff7b 	bl	801d888 <f_sync>
 801d992:	4603      	mov	r3, r0
 801d994:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d996:	7bfb      	ldrb	r3, [r7, #15]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d118      	bne.n	801d9ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	f107 0208 	add.w	r2, r7, #8
 801d9a2:	4611      	mov	r1, r2
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	f7ff fb97 	bl	801d0d8 <validate>
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d9ae:	7bfb      	ldrb	r3, [r7, #15]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d10c      	bne.n	801d9ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	691b      	ldr	r3, [r3, #16]
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	f7fd fb43 	bl	801b044 <dec_lock>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d9c2:	7bfb      	ldrb	r3, [r7, #15]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d102      	bne.n	801d9ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	2200      	movs	r2, #0
 801d9cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	3710      	adds	r7, #16
 801d9d4:	46bd      	mov	sp, r7
 801d9d6:	bd80      	pop	{r7, pc}

0801d9d8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b0a0      	sub	sp, #128	@ 0x80
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d9e0:	2300      	movs	r3, #0
 801d9e2:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d9e4:	f107 010c 	add.w	r1, r7, #12
 801d9e8:	1d3b      	adds	r3, r7, #4
 801d9ea:	2202      	movs	r2, #2
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	f7ff f8ed 	bl	801cbcc <find_volume>
 801d9f2:	4603      	mov	r3, r0
 801d9f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d9fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da00:	2b00      	cmp	r3, #0
 801da02:	f040 808e 	bne.w	801db22 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801da06:	687a      	ldr	r2, [r7, #4]
 801da08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da0c:	4611      	mov	r1, r2
 801da0e:	4618      	mov	r0, r3
 801da10:	f7fe ffcc 	bl	801c9ac <follow_path>
 801da14:	4603      	mov	r3, r0
 801da16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801da1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d108      	bne.n	801da34 <f_unlink+0x5c>
 801da22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da26:	2102      	movs	r1, #2
 801da28:	4618      	mov	r0, r3
 801da2a:	f7fd f9ff 	bl	801ae2c <chk_lock>
 801da2e:	4603      	mov	r3, r0
 801da30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801da34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d172      	bne.n	801db22 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801da3c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801da40:	b25b      	sxtb	r3, r3
 801da42:	2b00      	cmp	r3, #0
 801da44:	da03      	bge.n	801da4e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801da46:	2306      	movs	r3, #6
 801da48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801da4c:	e008      	b.n	801da60 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801da4e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801da52:	f003 0301 	and.w	r3, r3, #1
 801da56:	2b00      	cmp	r3, #0
 801da58:	d002      	beq.n	801da60 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801da5a:	2307      	movs	r3, #7
 801da5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801da60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da64:	2b00      	cmp	r3, #0
 801da66:	d134      	bne.n	801dad2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801da6c:	4611      	mov	r1, r2
 801da6e:	4618      	mov	r0, r3
 801da70:	f7fe f911 	bl	801bc96 <ld_clust>
 801da74:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801da76:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801da7a:	f003 0310 	and.w	r3, r3, #16
 801da7e:	2b00      	cmp	r3, #0
 801da80:	d027      	beq.n	801dad2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801da86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da88:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801da8a:	f107 0310 	add.w	r3, r7, #16
 801da8e:	2100      	movs	r1, #0
 801da90:	4618      	mov	r0, r3
 801da92:	f7fd ff5a 	bl	801b94a <dir_sdi>
 801da96:	4603      	mov	r3, r0
 801da98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801da9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d116      	bne.n	801dad2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801daa4:	f107 0310 	add.w	r3, r7, #16
 801daa8:	2100      	movs	r1, #0
 801daaa:	4618      	mov	r0, r3
 801daac:	f7fe fb1d 	bl	801c0ea <dir_read>
 801dab0:	4603      	mov	r3, r0
 801dab2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801dab6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801daba:	2b00      	cmp	r3, #0
 801dabc:	d102      	bne.n	801dac4 <f_unlink+0xec>
 801dabe:	2307      	movs	r3, #7
 801dac0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801dac4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dac8:	2b04      	cmp	r3, #4
 801daca:	d102      	bne.n	801dad2 <f_unlink+0xfa>
 801dacc:	2300      	movs	r3, #0
 801dace:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801dad2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d123      	bne.n	801db22 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801dada:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dade:	4618      	mov	r0, r3
 801dae0:	f7fe fd62 	bl	801c5a8 <dir_remove>
 801dae4:	4603      	mov	r3, r0
 801dae6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801daea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d10c      	bne.n	801db0c <f_unlink+0x134>
 801daf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d009      	beq.n	801db0c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801daf8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dafc:	2200      	movs	r2, #0
 801dafe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801db00:	4618      	mov	r0, r3
 801db02:	f7fd fded 	bl	801b6e0 <remove_chain>
 801db06:	4603      	mov	r3, r0
 801db08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801db0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db10:	2b00      	cmp	r3, #0
 801db12:	d106      	bne.n	801db22 <f_unlink+0x14a>
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	4618      	mov	r0, r3
 801db18:	f7fd fb66 	bl	801b1e8 <sync_fs>
 801db1c:	4603      	mov	r3, r0
 801db1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801db22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801db26:	4618      	mov	r0, r3
 801db28:	3780      	adds	r7, #128	@ 0x80
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}
	...

0801db30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801db30:	b480      	push	{r7}
 801db32:	b087      	sub	sp, #28
 801db34:	af00      	add	r7, sp, #0
 801db36:	60f8      	str	r0, [r7, #12]
 801db38:	60b9      	str	r1, [r7, #8]
 801db3a:	4613      	mov	r3, r2
 801db3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801db3e:	2301      	movs	r3, #1
 801db40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801db42:	2300      	movs	r3, #0
 801db44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801db46:	4b1f      	ldr	r3, [pc, #124]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db48:	7a5b      	ldrb	r3, [r3, #9]
 801db4a:	b2db      	uxtb	r3, r3
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d131      	bne.n	801dbb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801db50:	4b1c      	ldr	r3, [pc, #112]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db52:	7a5b      	ldrb	r3, [r3, #9]
 801db54:	b2db      	uxtb	r3, r3
 801db56:	461a      	mov	r2, r3
 801db58:	4b1a      	ldr	r3, [pc, #104]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db5a:	2100      	movs	r1, #0
 801db5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801db5e:	4b19      	ldr	r3, [pc, #100]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db60:	7a5b      	ldrb	r3, [r3, #9]
 801db62:	b2db      	uxtb	r3, r3
 801db64:	4a17      	ldr	r2, [pc, #92]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db66:	009b      	lsls	r3, r3, #2
 801db68:	4413      	add	r3, r2
 801db6a:	68fa      	ldr	r2, [r7, #12]
 801db6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801db6e:	4b15      	ldr	r3, [pc, #84]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db70:	7a5b      	ldrb	r3, [r3, #9]
 801db72:	b2db      	uxtb	r3, r3
 801db74:	461a      	mov	r2, r3
 801db76:	4b13      	ldr	r3, [pc, #76]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db78:	4413      	add	r3, r2
 801db7a:	79fa      	ldrb	r2, [r7, #7]
 801db7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801db7e:	4b11      	ldr	r3, [pc, #68]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db80:	7a5b      	ldrb	r3, [r3, #9]
 801db82:	b2db      	uxtb	r3, r3
 801db84:	1c5a      	adds	r2, r3, #1
 801db86:	b2d1      	uxtb	r1, r2
 801db88:	4a0e      	ldr	r2, [pc, #56]	@ (801dbc4 <FATFS_LinkDriverEx+0x94>)
 801db8a:	7251      	strb	r1, [r2, #9]
 801db8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801db8e:	7dbb      	ldrb	r3, [r7, #22]
 801db90:	3330      	adds	r3, #48	@ 0x30
 801db92:	b2da      	uxtb	r2, r3
 801db94:	68bb      	ldr	r3, [r7, #8]
 801db96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801db98:	68bb      	ldr	r3, [r7, #8]
 801db9a:	3301      	adds	r3, #1
 801db9c:	223a      	movs	r2, #58	@ 0x3a
 801db9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dba0:	68bb      	ldr	r3, [r7, #8]
 801dba2:	3302      	adds	r3, #2
 801dba4:	222f      	movs	r2, #47	@ 0x2f
 801dba6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dba8:	68bb      	ldr	r3, [r7, #8]
 801dbaa:	3303      	adds	r3, #3
 801dbac:	2200      	movs	r2, #0
 801dbae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dbb4:	7dfb      	ldrb	r3, [r7, #23]
}
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	371c      	adds	r7, #28
 801dbba:	46bd      	mov	sp, r7
 801dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc0:	4770      	bx	lr
 801dbc2:	bf00      	nop
 801dbc4:	24000768 	.word	0x24000768

0801dbc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b082      	sub	sp, #8
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
 801dbd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dbd2:	2200      	movs	r2, #0
 801dbd4:	6839      	ldr	r1, [r7, #0]
 801dbd6:	6878      	ldr	r0, [r7, #4]
 801dbd8:	f7ff ffaa 	bl	801db30 <FATFS_LinkDriverEx>
 801dbdc:	4603      	mov	r3, r0
}
 801dbde:	4618      	mov	r0, r3
 801dbe0:	3708      	adds	r7, #8
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	bd80      	pop	{r7, pc}
	...

0801dbe8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801dbe8:	b480      	push	{r7}
 801dbea:	b085      	sub	sp, #20
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	4603      	mov	r3, r0
 801dbf0:	6039      	str	r1, [r7, #0]
 801dbf2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dbf4:	88fb      	ldrh	r3, [r7, #6]
 801dbf6:	2b7f      	cmp	r3, #127	@ 0x7f
 801dbf8:	d802      	bhi.n	801dc00 <ff_convert+0x18>
		c = chr;
 801dbfa:	88fb      	ldrh	r3, [r7, #6]
 801dbfc:	81fb      	strh	r3, [r7, #14]
 801dbfe:	e025      	b.n	801dc4c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dc00:	683b      	ldr	r3, [r7, #0]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d00b      	beq.n	801dc1e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dc06:	88fb      	ldrh	r3, [r7, #6]
 801dc08:	2bff      	cmp	r3, #255	@ 0xff
 801dc0a:	d805      	bhi.n	801dc18 <ff_convert+0x30>
 801dc0c:	88fb      	ldrh	r3, [r7, #6]
 801dc0e:	3b80      	subs	r3, #128	@ 0x80
 801dc10:	4a12      	ldr	r2, [pc, #72]	@ (801dc5c <ff_convert+0x74>)
 801dc12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dc16:	e000      	b.n	801dc1a <ff_convert+0x32>
 801dc18:	2300      	movs	r3, #0
 801dc1a:	81fb      	strh	r3, [r7, #14]
 801dc1c:	e016      	b.n	801dc4c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dc1e:	2300      	movs	r3, #0
 801dc20:	81fb      	strh	r3, [r7, #14]
 801dc22:	e009      	b.n	801dc38 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dc24:	89fb      	ldrh	r3, [r7, #14]
 801dc26:	4a0d      	ldr	r2, [pc, #52]	@ (801dc5c <ff_convert+0x74>)
 801dc28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dc2c:	88fa      	ldrh	r2, [r7, #6]
 801dc2e:	429a      	cmp	r2, r3
 801dc30:	d006      	beq.n	801dc40 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dc32:	89fb      	ldrh	r3, [r7, #14]
 801dc34:	3301      	adds	r3, #1
 801dc36:	81fb      	strh	r3, [r7, #14]
 801dc38:	89fb      	ldrh	r3, [r7, #14]
 801dc3a:	2b7f      	cmp	r3, #127	@ 0x7f
 801dc3c:	d9f2      	bls.n	801dc24 <ff_convert+0x3c>
 801dc3e:	e000      	b.n	801dc42 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dc40:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dc42:	89fb      	ldrh	r3, [r7, #14]
 801dc44:	3380      	adds	r3, #128	@ 0x80
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	b2db      	uxtb	r3, r3
 801dc4a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801dc4c:	89fb      	ldrh	r3, [r7, #14]
}
 801dc4e:	4618      	mov	r0, r3
 801dc50:	3714      	adds	r7, #20
 801dc52:	46bd      	mov	sp, r7
 801dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc58:	4770      	bx	lr
 801dc5a:	bf00      	nop
 801dc5c:	0801e90c 	.word	0x0801e90c

0801dc60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801dc60:	b480      	push	{r7}
 801dc62:	b087      	sub	sp, #28
 801dc64:	af00      	add	r7, sp, #0
 801dc66:	4603      	mov	r3, r0
 801dc68:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801dc6a:	88fb      	ldrh	r3, [r7, #6]
 801dc6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dc70:	d201      	bcs.n	801dc76 <ff_wtoupper+0x16>
 801dc72:	4b3e      	ldr	r3, [pc, #248]	@ (801dd6c <ff_wtoupper+0x10c>)
 801dc74:	e000      	b.n	801dc78 <ff_wtoupper+0x18>
 801dc76:	4b3e      	ldr	r3, [pc, #248]	@ (801dd70 <ff_wtoupper+0x110>)
 801dc78:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801dc7a:	697b      	ldr	r3, [r7, #20]
 801dc7c:	1c9a      	adds	r2, r3, #2
 801dc7e:	617a      	str	r2, [r7, #20]
 801dc80:	881b      	ldrh	r3, [r3, #0]
 801dc82:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dc84:	8a7b      	ldrh	r3, [r7, #18]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d068      	beq.n	801dd5c <ff_wtoupper+0xfc>
 801dc8a:	88fa      	ldrh	r2, [r7, #6]
 801dc8c:	8a7b      	ldrh	r3, [r7, #18]
 801dc8e:	429a      	cmp	r2, r3
 801dc90:	d364      	bcc.n	801dd5c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dc92:	697b      	ldr	r3, [r7, #20]
 801dc94:	1c9a      	adds	r2, r3, #2
 801dc96:	617a      	str	r2, [r7, #20]
 801dc98:	881b      	ldrh	r3, [r3, #0]
 801dc9a:	823b      	strh	r3, [r7, #16]
 801dc9c:	8a3b      	ldrh	r3, [r7, #16]
 801dc9e:	0a1b      	lsrs	r3, r3, #8
 801dca0:	81fb      	strh	r3, [r7, #14]
 801dca2:	8a3b      	ldrh	r3, [r7, #16]
 801dca4:	b2db      	uxtb	r3, r3
 801dca6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dca8:	88fa      	ldrh	r2, [r7, #6]
 801dcaa:	8a79      	ldrh	r1, [r7, #18]
 801dcac:	8a3b      	ldrh	r3, [r7, #16]
 801dcae:	440b      	add	r3, r1
 801dcb0:	429a      	cmp	r2, r3
 801dcb2:	da49      	bge.n	801dd48 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dcb4:	89fb      	ldrh	r3, [r7, #14]
 801dcb6:	2b08      	cmp	r3, #8
 801dcb8:	d84f      	bhi.n	801dd5a <ff_wtoupper+0xfa>
 801dcba:	a201      	add	r2, pc, #4	@ (adr r2, 801dcc0 <ff_wtoupper+0x60>)
 801dcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcc0:	0801dce5 	.word	0x0801dce5
 801dcc4:	0801dcf7 	.word	0x0801dcf7
 801dcc8:	0801dd0d 	.word	0x0801dd0d
 801dccc:	0801dd15 	.word	0x0801dd15
 801dcd0:	0801dd1d 	.word	0x0801dd1d
 801dcd4:	0801dd25 	.word	0x0801dd25
 801dcd8:	0801dd2d 	.word	0x0801dd2d
 801dcdc:	0801dd35 	.word	0x0801dd35
 801dce0:	0801dd3d 	.word	0x0801dd3d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dce4:	88fa      	ldrh	r2, [r7, #6]
 801dce6:	8a7b      	ldrh	r3, [r7, #18]
 801dce8:	1ad3      	subs	r3, r2, r3
 801dcea:	005b      	lsls	r3, r3, #1
 801dcec:	697a      	ldr	r2, [r7, #20]
 801dcee:	4413      	add	r3, r2
 801dcf0:	881b      	ldrh	r3, [r3, #0]
 801dcf2:	80fb      	strh	r3, [r7, #6]
 801dcf4:	e027      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dcf6:	88fa      	ldrh	r2, [r7, #6]
 801dcf8:	8a7b      	ldrh	r3, [r7, #18]
 801dcfa:	1ad3      	subs	r3, r2, r3
 801dcfc:	b29b      	uxth	r3, r3
 801dcfe:	f003 0301 	and.w	r3, r3, #1
 801dd02:	b29b      	uxth	r3, r3
 801dd04:	88fa      	ldrh	r2, [r7, #6]
 801dd06:	1ad3      	subs	r3, r2, r3
 801dd08:	80fb      	strh	r3, [r7, #6]
 801dd0a:	e01c      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dd0c:	88fb      	ldrh	r3, [r7, #6]
 801dd0e:	3b10      	subs	r3, #16
 801dd10:	80fb      	strh	r3, [r7, #6]
 801dd12:	e018      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dd14:	88fb      	ldrh	r3, [r7, #6]
 801dd16:	3b20      	subs	r3, #32
 801dd18:	80fb      	strh	r3, [r7, #6]
 801dd1a:	e014      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801dd1c:	88fb      	ldrh	r3, [r7, #6]
 801dd1e:	3b30      	subs	r3, #48	@ 0x30
 801dd20:	80fb      	strh	r3, [r7, #6]
 801dd22:	e010      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801dd24:	88fb      	ldrh	r3, [r7, #6]
 801dd26:	3b1a      	subs	r3, #26
 801dd28:	80fb      	strh	r3, [r7, #6]
 801dd2a:	e00c      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801dd2c:	88fb      	ldrh	r3, [r7, #6]
 801dd2e:	3308      	adds	r3, #8
 801dd30:	80fb      	strh	r3, [r7, #6]
 801dd32:	e008      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801dd34:	88fb      	ldrh	r3, [r7, #6]
 801dd36:	3b50      	subs	r3, #80	@ 0x50
 801dd38:	80fb      	strh	r3, [r7, #6]
 801dd3a:	e004      	b.n	801dd46 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801dd3c:	88fb      	ldrh	r3, [r7, #6]
 801dd3e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801dd42:	80fb      	strh	r3, [r7, #6]
 801dd44:	bf00      	nop
			}
			break;
 801dd46:	e008      	b.n	801dd5a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801dd48:	89fb      	ldrh	r3, [r7, #14]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d195      	bne.n	801dc7a <ff_wtoupper+0x1a>
 801dd4e:	8a3b      	ldrh	r3, [r7, #16]
 801dd50:	005b      	lsls	r3, r3, #1
 801dd52:	697a      	ldr	r2, [r7, #20]
 801dd54:	4413      	add	r3, r2
 801dd56:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801dd58:	e78f      	b.n	801dc7a <ff_wtoupper+0x1a>
			break;
 801dd5a:	bf00      	nop
	}

	return chr;
 801dd5c:	88fb      	ldrh	r3, [r7, #6]
}
 801dd5e:	4618      	mov	r0, r3
 801dd60:	371c      	adds	r7, #28
 801dd62:	46bd      	mov	sp, r7
 801dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd68:	4770      	bx	lr
 801dd6a:	bf00      	nop
 801dd6c:	0801ea0c 	.word	0x0801ea0c
 801dd70:	0801ec00 	.word	0x0801ec00

0801dd74 <memset>:
 801dd74:	4402      	add	r2, r0
 801dd76:	4603      	mov	r3, r0
 801dd78:	4293      	cmp	r3, r2
 801dd7a:	d100      	bne.n	801dd7e <memset+0xa>
 801dd7c:	4770      	bx	lr
 801dd7e:	f803 1b01 	strb.w	r1, [r3], #1
 801dd82:	e7f9      	b.n	801dd78 <memset+0x4>

0801dd84 <__errno>:
 801dd84:	4b01      	ldr	r3, [pc, #4]	@ (801dd8c <__errno+0x8>)
 801dd86:	6818      	ldr	r0, [r3, #0]
 801dd88:	4770      	bx	lr
 801dd8a:	bf00      	nop
 801dd8c:	24000028 	.word	0x24000028

0801dd90 <__libc_init_array>:
 801dd90:	b570      	push	{r4, r5, r6, lr}
 801dd92:	4d0d      	ldr	r5, [pc, #52]	@ (801ddc8 <__libc_init_array+0x38>)
 801dd94:	4c0d      	ldr	r4, [pc, #52]	@ (801ddcc <__libc_init_array+0x3c>)
 801dd96:	1b64      	subs	r4, r4, r5
 801dd98:	10a4      	asrs	r4, r4, #2
 801dd9a:	2600      	movs	r6, #0
 801dd9c:	42a6      	cmp	r6, r4
 801dd9e:	d109      	bne.n	801ddb4 <__libc_init_array+0x24>
 801dda0:	4d0b      	ldr	r5, [pc, #44]	@ (801ddd0 <__libc_init_array+0x40>)
 801dda2:	4c0c      	ldr	r4, [pc, #48]	@ (801ddd4 <__libc_init_array+0x44>)
 801dda4:	f000 fd00 	bl	801e7a8 <_init>
 801dda8:	1b64      	subs	r4, r4, r5
 801ddaa:	10a4      	asrs	r4, r4, #2
 801ddac:	2600      	movs	r6, #0
 801ddae:	42a6      	cmp	r6, r4
 801ddb0:	d105      	bne.n	801ddbe <__libc_init_array+0x2e>
 801ddb2:	bd70      	pop	{r4, r5, r6, pc}
 801ddb4:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddb8:	4798      	blx	r3
 801ddba:	3601      	adds	r6, #1
 801ddbc:	e7ee      	b.n	801dd9c <__libc_init_array+0xc>
 801ddbe:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddc2:	4798      	blx	r3
 801ddc4:	3601      	adds	r6, #1
 801ddc6:	e7f2      	b.n	801ddae <__libc_init_array+0x1e>
 801ddc8:	080205f0 	.word	0x080205f0
 801ddcc:	080205f0 	.word	0x080205f0
 801ddd0:	080205f0 	.word	0x080205f0
 801ddd4:	080205f4 	.word	0x080205f4

0801ddd8 <atan2>:
 801ddd8:	f000 baaa 	b.w	801e330 <__ieee754_atan2>
 801dddc:	0000      	movs	r0, r0
	...

0801dde0 <sqrt>:
 801dde0:	b508      	push	{r3, lr}
 801dde2:	ed2d 8b04 	vpush	{d8-d9}
 801dde6:	eeb0 8b40 	vmov.f64	d8, d0
 801ddea:	f000 fa9d 	bl	801e328 <__ieee754_sqrt>
 801ddee:	eeb4 8b48 	vcmp.f64	d8, d8
 801ddf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddf6:	d60c      	bvs.n	801de12 <sqrt+0x32>
 801ddf8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801de18 <sqrt+0x38>
 801ddfc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801de00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de04:	d505      	bpl.n	801de12 <sqrt+0x32>
 801de06:	f7ff ffbd 	bl	801dd84 <__errno>
 801de0a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801de0e:	2321      	movs	r3, #33	@ 0x21
 801de10:	6003      	str	r3, [r0, #0]
 801de12:	ecbd 8b04 	vpop	{d8-d9}
 801de16:	bd08      	pop	{r3, pc}
	...

0801de20 <checkint>:
 801de20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801de24:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801de28:	429a      	cmp	r2, r3
 801de2a:	b570      	push	{r4, r5, r6, lr}
 801de2c:	dd2a      	ble.n	801de84 <checkint+0x64>
 801de2e:	f240 4333 	movw	r3, #1075	@ 0x433
 801de32:	429a      	cmp	r2, r3
 801de34:	dc24      	bgt.n	801de80 <checkint+0x60>
 801de36:	1a9b      	subs	r3, r3, r2
 801de38:	f1a3 0620 	sub.w	r6, r3, #32
 801de3c:	f04f 32ff 	mov.w	r2, #4294967295
 801de40:	fa02 f403 	lsl.w	r4, r2, r3
 801de44:	fa02 f606 	lsl.w	r6, r2, r6
 801de48:	f1c3 0520 	rsb	r5, r3, #32
 801de4c:	fa22 f505 	lsr.w	r5, r2, r5
 801de50:	4334      	orrs	r4, r6
 801de52:	432c      	orrs	r4, r5
 801de54:	409a      	lsls	r2, r3
 801de56:	ea20 0202 	bic.w	r2, r0, r2
 801de5a:	ea21 0404 	bic.w	r4, r1, r4
 801de5e:	4322      	orrs	r2, r4
 801de60:	f1a3 0420 	sub.w	r4, r3, #32
 801de64:	f1c3 0220 	rsb	r2, r3, #32
 801de68:	d10c      	bne.n	801de84 <checkint+0x64>
 801de6a:	40d8      	lsrs	r0, r3
 801de6c:	fa01 f302 	lsl.w	r3, r1, r2
 801de70:	4318      	orrs	r0, r3
 801de72:	40e1      	lsrs	r1, r4
 801de74:	4308      	orrs	r0, r1
 801de76:	f000 0001 	and.w	r0, r0, #1
 801de7a:	f1d0 0002 	rsbs	r0, r0, #2
 801de7e:	bd70      	pop	{r4, r5, r6, pc}
 801de80:	2002      	movs	r0, #2
 801de82:	e7fc      	b.n	801de7e <checkint+0x5e>
 801de84:	2000      	movs	r0, #0
 801de86:	e7fa      	b.n	801de7e <checkint+0x5e>

0801de88 <pow>:
 801de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de8c:	ee10 4a90 	vmov	r4, s1
 801de90:	ed2d 8b0a 	vpush	{d8-d12}
 801de94:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801de98:	ee11 aa90 	vmov	sl, s3
 801de9c:	f108 32ff 	add.w	r2, r8, #4294967295
 801dea0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801dea4:	429a      	cmp	r2, r3
 801dea6:	ee10 5a10 	vmov	r5, s0
 801deaa:	ee11 0a10 	vmov	r0, s2
 801deae:	b087      	sub	sp, #28
 801deb0:	46c4      	mov	ip, r8
 801deb2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801deb6:	d806      	bhi.n	801dec6 <pow+0x3e>
 801deb8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801debc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801dec0:	2b7f      	cmp	r3, #127	@ 0x7f
 801dec2:	f240 8157 	bls.w	801e174 <pow+0x2ec>
 801dec6:	1802      	adds	r2, r0, r0
 801dec8:	eb4a 010a 	adc.w	r1, sl, sl
 801decc:	f06f 0b01 	mvn.w	fp, #1
 801ded0:	1e57      	subs	r7, r2, #1
 801ded2:	f141 33ff 	adc.w	r3, r1, #4294967295
 801ded6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801deda:	45bb      	cmp	fp, r7
 801dedc:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dee0:	d242      	bcs.n	801df68 <pow+0xe0>
 801dee2:	ea52 0301 	orrs.w	r3, r2, r1
 801dee6:	f04f 0300 	mov.w	r3, #0
 801deea:	d10c      	bne.n	801df06 <pow+0x7e>
 801deec:	196d      	adds	r5, r5, r5
 801deee:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801def2:	4164      	adcs	r4, r4
 801def4:	42ab      	cmp	r3, r5
 801def6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801defa:	41a3      	sbcs	r3, r4
 801defc:	f0c0 808f 	bcc.w	801e01e <pow+0x196>
 801df00:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801df04:	e02b      	b.n	801df5e <pow+0xd6>
 801df06:	4ed4      	ldr	r6, [pc, #848]	@ (801e258 <pow+0x3d0>)
 801df08:	42b4      	cmp	r4, r6
 801df0a:	bf08      	it	eq
 801df0c:	429d      	cmpeq	r5, r3
 801df0e:	d109      	bne.n	801df24 <pow+0x9c>
 801df10:	1800      	adds	r0, r0, r0
 801df12:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801df16:	eb4a 0a0a 	adc.w	sl, sl, sl
 801df1a:	4283      	cmp	r3, r0
 801df1c:	4bcf      	ldr	r3, [pc, #828]	@ (801e25c <pow+0x3d4>)
 801df1e:	eb73 030a 	sbcs.w	r3, r3, sl
 801df22:	e7eb      	b.n	801defc <pow+0x74>
 801df24:	196d      	adds	r5, r5, r5
 801df26:	48ce      	ldr	r0, [pc, #824]	@ (801e260 <pow+0x3d8>)
 801df28:	4164      	adcs	r4, r4
 801df2a:	42ab      	cmp	r3, r5
 801df2c:	eb70 0604 	sbcs.w	r6, r0, r4
 801df30:	d375      	bcc.n	801e01e <pow+0x196>
 801df32:	4281      	cmp	r1, r0
 801df34:	bf08      	it	eq
 801df36:	429a      	cmpeq	r2, r3
 801df38:	d171      	bne.n	801e01e <pow+0x196>
 801df3a:	4aca      	ldr	r2, [pc, #808]	@ (801e264 <pow+0x3dc>)
 801df3c:	4294      	cmp	r4, r2
 801df3e:	bf08      	it	eq
 801df40:	429d      	cmpeq	r5, r3
 801df42:	d0dd      	beq.n	801df00 <pow+0x78>
 801df44:	4294      	cmp	r4, r2
 801df46:	ea6f 0a0a 	mvn.w	sl, sl
 801df4a:	bf34      	ite	cc
 801df4c:	2400      	movcc	r4, #0
 801df4e:	2401      	movcs	r4, #1
 801df50:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801df54:	4554      	cmp	r4, sl
 801df56:	f040 81dc 	bne.w	801e312 <pow+0x48a>
 801df5a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801df5e:	b007      	add	sp, #28
 801df60:	ecbd 8b0a 	vpop	{d8-d12}
 801df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df68:	196f      	adds	r7, r5, r5
 801df6a:	eb44 0904 	adc.w	r9, r4, r4
 801df6e:	1e7a      	subs	r2, r7, #1
 801df70:	f169 0300 	sbc.w	r3, r9, #0
 801df74:	4593      	cmp	fp, r2
 801df76:	eb7e 0303 	sbcs.w	r3, lr, r3
 801df7a:	d225      	bcs.n	801dfc8 <pow+0x140>
 801df7c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801df80:	2c00      	cmp	r4, #0
 801df82:	da13      	bge.n	801dfac <pow+0x124>
 801df84:	4651      	mov	r1, sl
 801df86:	f7ff ff4b 	bl	801de20 <checkint>
 801df8a:	2801      	cmp	r0, #1
 801df8c:	d10e      	bne.n	801dfac <pow+0x124>
 801df8e:	eeb1 0b40 	vneg.f64	d0, d0
 801df92:	ea57 0909 	orrs.w	r9, r7, r9
 801df96:	d10b      	bne.n	801dfb0 <pow+0x128>
 801df98:	f1ba 0f00 	cmp.w	sl, #0
 801df9c:	dadf      	bge.n	801df5e <pow+0xd6>
 801df9e:	b007      	add	sp, #28
 801dfa0:	ecbd 8b0a 	vpop	{d8-d12}
 801dfa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfa8:	f000 bbba 	b.w	801e720 <__math_divzero>
 801dfac:	2000      	movs	r0, #0
 801dfae:	e7f0      	b.n	801df92 <pow+0x10a>
 801dfb0:	f1ba 0f00 	cmp.w	sl, #0
 801dfb4:	dad3      	bge.n	801df5e <pow+0xd6>
 801dfb6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dfba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dfbe:	ed8d 7b00 	vstr	d7, [sp]
 801dfc2:	ed9d 0b00 	vldr	d0, [sp]
 801dfc6:	e7ca      	b.n	801df5e <pow+0xd6>
 801dfc8:	2c00      	cmp	r4, #0
 801dfca:	da2b      	bge.n	801e024 <pow+0x19c>
 801dfcc:	4651      	mov	r1, sl
 801dfce:	f7ff ff27 	bl	801de20 <checkint>
 801dfd2:	b930      	cbnz	r0, 801dfe2 <pow+0x15a>
 801dfd4:	b007      	add	sp, #28
 801dfd6:	ecbd 8b0a 	vpop	{d8-d12}
 801dfda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfde:	f000 bbb7 	b.w	801e750 <__math_invalid>
 801dfe2:	1e41      	subs	r1, r0, #1
 801dfe4:	4248      	negs	r0, r1
 801dfe6:	4148      	adcs	r0, r1
 801dfe8:	0480      	lsls	r0, r0, #18
 801dfea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dfee:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801dff2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801dff6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801dffa:	2b7f      	cmp	r3, #127	@ 0x7f
 801dffc:	d92d      	bls.n	801e05a <pow+0x1d2>
 801dffe:	4b96      	ldr	r3, [pc, #600]	@ (801e258 <pow+0x3d0>)
 801e000:	2000      	movs	r0, #0
 801e002:	429c      	cmp	r4, r3
 801e004:	bf08      	it	eq
 801e006:	4285      	cmpeq	r5, r0
 801e008:	f43f af7a 	beq.w	801df00 <pow+0x78>
 801e00c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e010:	428a      	cmp	r2, r1
 801e012:	d80c      	bhi.n	801e02e <pow+0x1a6>
 801e014:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e018:	42a8      	cmp	r0, r5
 801e01a:	41a3      	sbcs	r3, r4
 801e01c:	d204      	bcs.n	801e028 <pow+0x1a0>
 801e01e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e022:	e79c      	b.n	801df5e <pow+0xd6>
 801e024:	2000      	movs	r0, #0
 801e026:	e7e4      	b.n	801dff2 <pow+0x16a>
 801e028:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e02c:	e797      	b.n	801df5e <pow+0xd6>
 801e02e:	2d01      	cmp	r5, #1
 801e030:	eb74 0303 	sbcs.w	r3, r4, r3
 801e034:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e038:	bf34      	ite	cc
 801e03a:	2301      	movcc	r3, #1
 801e03c:	2300      	movcs	r3, #0
 801e03e:	4296      	cmp	r6, r2
 801e040:	bf8c      	ite	hi
 801e042:	2600      	movhi	r6, #0
 801e044:	2601      	movls	r6, #1
 801e046:	42b3      	cmp	r3, r6
 801e048:	f000 809c 	beq.w	801e184 <pow+0x2fc>
 801e04c:	b007      	add	sp, #28
 801e04e:	ecbd 8b0a 	vpop	{d8-d12}
 801e052:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e056:	f000 bb5b 	b.w	801e710 <__math_oflow>
 801e05a:	f1bc 0f00 	cmp.w	ip, #0
 801e05e:	d10a      	bne.n	801e076 <pow+0x1ee>
 801e060:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e248 <pow+0x3c0>
 801e064:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e068:	ec53 2b17 	vmov	r2, r3, d7
 801e06c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e070:	4615      	mov	r5, r2
 801e072:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e076:	4a7c      	ldr	r2, [pc, #496]	@ (801e268 <pow+0x3e0>)
 801e078:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e07c:	4422      	add	r2, r4
 801e07e:	1513      	asrs	r3, r2, #20
 801e080:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e084:	ee03 3a10 	vmov	s6, r3
 801e088:	0d12      	lsrs	r2, r2, #20
 801e08a:	4b78      	ldr	r3, [pc, #480]	@ (801e26c <pow+0x3e4>)
 801e08c:	0512      	lsls	r2, r2, #20
 801e08e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e092:	1aa7      	subs	r7, r4, r2
 801e094:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e098:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e09c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e0a0:	1e2e      	subs	r6, r5, #0
 801e0a2:	ec47 6b14 	vmov	d4, r6, r7
 801e0a6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e0aa:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e0ae:	ed93 5b00 	vldr	d5, [r3]
 801e0b2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e0b6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e0ba:	ed93 5b02 	vldr	d5, [r3, #8]
 801e0be:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e0c2:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e0c6:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e0ca:	ed93 5b04 	vldr	d5, [r3, #16]
 801e0ce:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e0d2:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e0d6:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e0da:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e0de:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e0e2:	eeb0 9b40 	vmov.f64	d9, d0
 801e0e6:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e0ea:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e0ee:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e0f2:	ed93 5b06 	vldr	d5, [r3, #24]
 801e0f6:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e0fa:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e0fe:	ed93 4b08 	vldr	d4, [r3, #32]
 801e102:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e106:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e10a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e10e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e112:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e116:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e11a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e11e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e122:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e126:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e12a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e12e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e132:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e136:	ee16 3a90 	vmov	r3, s13
 801e13a:	eeb0 5b46 	vmov.f64	d5, d6
 801e13e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e142:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e146:	18b2      	adds	r2, r6, r2
 801e148:	2a3e      	cmp	r2, #62	@ 0x3e
 801e14a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e14e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e152:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e156:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e15a:	d91b      	bls.n	801e194 <pow+0x30c>
 801e15c:	2a00      	cmp	r2, #0
 801e15e:	da0b      	bge.n	801e178 <pow+0x2f0>
 801e160:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e164:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e168:	2800      	cmp	r0, #0
 801e16a:	f43f aef8 	beq.w	801df5e <pow+0xd6>
 801e16e:	eeb1 0b40 	vneg.f64	d0, d0
 801e172:	e6f4      	b.n	801df5e <pow+0xd6>
 801e174:	2000      	movs	r0, #0
 801e176:	e77e      	b.n	801e076 <pow+0x1ee>
 801e178:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e17c:	d909      	bls.n	801e192 <pow+0x30a>
 801e17e:	2b00      	cmp	r3, #0
 801e180:	f6bf af64 	bge.w	801e04c <pow+0x1c4>
 801e184:	b007      	add	sp, #28
 801e186:	ecbd 8b0a 	vpop	{d8-d12}
 801e18a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e18e:	f000 bab7 	b.w	801e700 <__math_uflow>
 801e192:	2600      	movs	r6, #0
 801e194:	4936      	ldr	r1, [pc, #216]	@ (801e270 <pow+0x3e8>)
 801e196:	ed91 4b02 	vldr	d4, [r1, #8]
 801e19a:	ed91 3b00 	vldr	d3, [r1]
 801e19e:	eeb0 7b44 	vmov.f64	d7, d4
 801e1a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e1a6:	ee17 5a10 	vmov	r5, s14
 801e1aa:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e1ae:	ed91 4b04 	vldr	d4, [r1, #16]
 801e1b2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e1b6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e1ba:	ed91 4b06 	vldr	d4, [r1, #24]
 801e1be:	18dc      	adds	r4, r3, r3
 801e1c0:	f104 030f 	add.w	r3, r4, #15
 801e1c4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e1c8:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e1cc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e1d0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e1d4:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e1d8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e1dc:	ed91 4b08 	vldr	d4, [r1, #32]
 801e1e0:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e1e4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e1e8:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e1ec:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e1f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e1f4:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e1f8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e1fc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e200:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e204:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e208:	1940      	adds	r0, r0, r5
 801e20a:	2700      	movs	r7, #0
 801e20c:	eb17 020c 	adds.w	r2, r7, ip
 801e210:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e214:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e218:	2e00      	cmp	r6, #0
 801e21a:	d175      	bne.n	801e308 <pow+0x480>
 801e21c:	42bd      	cmp	r5, r7
 801e21e:	db29      	blt.n	801e274 <pow+0x3ec>
 801e220:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e224:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e228:	4610      	mov	r0, r2
 801e22a:	ec41 0b10 	vmov	d0, r0, r1
 801e22e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e232:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e250 <pow+0x3c8>
 801e236:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e23a:	b007      	add	sp, #28
 801e23c:	ecbd 8b0a 	vpop	{d8-d12}
 801e240:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e244:	f000 ba9c 	b.w	801e780 <__math_check_oflow>
 801e248:	00000000 	.word	0x00000000
 801e24c:	43300000 	.word	0x43300000
 801e250:	00000000 	.word	0x00000000
 801e254:	7f000000 	.word	0x7f000000
 801e258:	3ff00000 	.word	0x3ff00000
 801e25c:	fff00000 	.word	0xfff00000
 801e260:	ffe00000 	.word	0xffe00000
 801e264:	7fe00000 	.word	0x7fe00000
 801e268:	c0196aab 	.word	0xc0196aab
 801e26c:	0801ecc0 	.word	0x0801ecc0
 801e270:	0801fd78 	.word	0x0801fd78
 801e274:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e278:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e27c:	4610      	mov	r0, r2
 801e27e:	ec41 0b15 	vmov	d5, r0, r1
 801e282:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e286:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e28a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e28e:	eeb0 4bc7 	vabs.f64	d4, d7
 801e292:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e29a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e318 <pow+0x490>
 801e29e:	d52a      	bpl.n	801e2f6 <pow+0x46e>
 801e2a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e2a4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2ac:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e2b0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e2b4:	bf58      	it	pl
 801e2b6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e2ba:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e2be:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e2c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e2c6:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e2ca:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e2ce:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e2d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2da:	d104      	bne.n	801e2e6 <pow+0x45e>
 801e2dc:	4632      	mov	r2, r6
 801e2de:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e2e2:	ec43 2b17 	vmov	d7, r2, r3
 801e2e6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e2ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e2ee:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e2f2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e2f6:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e2fa:	b007      	add	sp, #28
 801e2fc:	ecbd 8b0a 	vpop	{d8-d12}
 801e300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e304:	f000 ba33 	b.w	801e76e <__math_check_uflow>
 801e308:	ec43 2b10 	vmov	d0, r2, r3
 801e30c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e310:	e625      	b.n	801df5e <pow+0xd6>
 801e312:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e320 <pow+0x498>
 801e316:	e622      	b.n	801df5e <pow+0xd6>
 801e318:	00000000 	.word	0x00000000
 801e31c:	00100000 	.word	0x00100000
	...

0801e328 <__ieee754_sqrt>:
 801e328:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e32c:	4770      	bx	lr
	...

0801e330 <__ieee754_atan2>:
 801e330:	ee11 1a10 	vmov	r1, s2
 801e334:	eeb0 7b40 	vmov.f64	d7, d0
 801e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e33a:	ee11 5a90 	vmov	r5, s3
 801e33e:	424b      	negs	r3, r1
 801e340:	4f59      	ldr	r7, [pc, #356]	@ (801e4a8 <__ieee754_atan2+0x178>)
 801e342:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e346:	430b      	orrs	r3, r1
 801e348:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e34c:	42bb      	cmp	r3, r7
 801e34e:	d80d      	bhi.n	801e36c <__ieee754_atan2+0x3c>
 801e350:	ee10 ca10 	vmov	ip, s0
 801e354:	ee17 6a90 	vmov	r6, s15
 801e358:	f1cc 0000 	rsb	r0, ip, #0
 801e35c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e360:	ea40 000c 	orr.w	r0, r0, ip
 801e364:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e368:	42b8      	cmp	r0, r7
 801e36a:	d904      	bls.n	801e376 <__ieee754_atan2+0x46>
 801e36c:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e370:	eeb0 0b47 	vmov.f64	d0, d7
 801e374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e376:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e37a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e37e:	4308      	orrs	r0, r1
 801e380:	d103      	bne.n	801e38a <__ieee754_atan2+0x5a>
 801e382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e386:	f000 b897 	b.w	801e4b8 <atan>
 801e38a:	17ac      	asrs	r4, r5, #30
 801e38c:	f004 0402 	and.w	r4, r4, #2
 801e390:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e394:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e398:	d107      	bne.n	801e3aa <__ieee754_atan2+0x7a>
 801e39a:	2c02      	cmp	r4, #2
 801e39c:	d05c      	beq.n	801e458 <__ieee754_atan2+0x128>
 801e39e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e470 <__ieee754_atan2+0x140>
 801e3a2:	2c03      	cmp	r4, #3
 801e3a4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e3a8:	e7e2      	b.n	801e370 <__ieee754_atan2+0x40>
 801e3aa:	4311      	orrs	r1, r2
 801e3ac:	d107      	bne.n	801e3be <__ieee754_atan2+0x8e>
 801e3ae:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e478 <__ieee754_atan2+0x148>
 801e3b2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e480 <__ieee754_atan2+0x150>
 801e3b6:	2e00      	cmp	r6, #0
 801e3b8:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e3bc:	e7d8      	b.n	801e370 <__ieee754_atan2+0x40>
 801e3be:	42ba      	cmp	r2, r7
 801e3c0:	d10f      	bne.n	801e3e2 <__ieee754_atan2+0xb2>
 801e3c2:	4293      	cmp	r3, r2
 801e3c4:	f104 34ff 	add.w	r4, r4, #4294967295
 801e3c8:	d107      	bne.n	801e3da <__ieee754_atan2+0xaa>
 801e3ca:	2c02      	cmp	r4, #2
 801e3cc:	d847      	bhi.n	801e45e <__ieee754_atan2+0x12e>
 801e3ce:	4b37      	ldr	r3, [pc, #220]	@ (801e4ac <__ieee754_atan2+0x17c>)
 801e3d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e3d4:	ed93 7b00 	vldr	d7, [r3]
 801e3d8:	e7ca      	b.n	801e370 <__ieee754_atan2+0x40>
 801e3da:	2c02      	cmp	r4, #2
 801e3dc:	d842      	bhi.n	801e464 <__ieee754_atan2+0x134>
 801e3de:	4b34      	ldr	r3, [pc, #208]	@ (801e4b0 <__ieee754_atan2+0x180>)
 801e3e0:	e7f6      	b.n	801e3d0 <__ieee754_atan2+0xa0>
 801e3e2:	42bb      	cmp	r3, r7
 801e3e4:	d0e3      	beq.n	801e3ae <__ieee754_atan2+0x7e>
 801e3e6:	1a9b      	subs	r3, r3, r2
 801e3e8:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e3ec:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e3f0:	da1a      	bge.n	801e428 <__ieee754_atan2+0xf8>
 801e3f2:	2d00      	cmp	r5, #0
 801e3f4:	da01      	bge.n	801e3fa <__ieee754_atan2+0xca>
 801e3f6:	323c      	adds	r2, #60	@ 0x3c
 801e3f8:	db19      	blt.n	801e42e <__ieee754_atan2+0xfe>
 801e3fa:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e3fe:	f000 f955 	bl	801e6ac <fabs>
 801e402:	f000 f859 	bl	801e4b8 <atan>
 801e406:	eeb0 7b40 	vmov.f64	d7, d0
 801e40a:	2c01      	cmp	r4, #1
 801e40c:	d012      	beq.n	801e434 <__ieee754_atan2+0x104>
 801e40e:	2c02      	cmp	r4, #2
 801e410:	d019      	beq.n	801e446 <__ieee754_atan2+0x116>
 801e412:	2c00      	cmp	r4, #0
 801e414:	d0ac      	beq.n	801e370 <__ieee754_atan2+0x40>
 801e416:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e488 <__ieee754_atan2+0x158>
 801e41a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e41e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e490 <__ieee754_atan2+0x160>
 801e422:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e426:	e7a3      	b.n	801e370 <__ieee754_atan2+0x40>
 801e428:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e478 <__ieee754_atan2+0x148>
 801e42c:	e7ed      	b.n	801e40a <__ieee754_atan2+0xda>
 801e42e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e498 <__ieee754_atan2+0x168>
 801e432:	e7ea      	b.n	801e40a <__ieee754_atan2+0xda>
 801e434:	ee17 1a90 	vmov	r1, s15
 801e438:	ec53 2b17 	vmov	r2, r3, d7
 801e43c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e440:	ec43 2b17 	vmov	d7, r2, r3
 801e444:	e794      	b.n	801e370 <__ieee754_atan2+0x40>
 801e446:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e488 <__ieee754_atan2+0x158>
 801e44a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e44e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e490 <__ieee754_atan2+0x160>
 801e452:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e456:	e78b      	b.n	801e370 <__ieee754_atan2+0x40>
 801e458:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e490 <__ieee754_atan2+0x160>
 801e45c:	e788      	b.n	801e370 <__ieee754_atan2+0x40>
 801e45e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e4a0 <__ieee754_atan2+0x170>
 801e462:	e785      	b.n	801e370 <__ieee754_atan2+0x40>
 801e464:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e498 <__ieee754_atan2+0x168>
 801e468:	e782      	b.n	801e370 <__ieee754_atan2+0x40>
 801e46a:	bf00      	nop
 801e46c:	f3af 8000 	nop.w
 801e470:	54442d18 	.word	0x54442d18
 801e474:	c00921fb 	.word	0xc00921fb
 801e478:	54442d18 	.word	0x54442d18
 801e47c:	3ff921fb 	.word	0x3ff921fb
 801e480:	54442d18 	.word	0x54442d18
 801e484:	bff921fb 	.word	0xbff921fb
 801e488:	33145c07 	.word	0x33145c07
 801e48c:	3ca1a626 	.word	0x3ca1a626
 801e490:	54442d18 	.word	0x54442d18
 801e494:	400921fb 	.word	0x400921fb
	...
 801e4a0:	54442d18 	.word	0x54442d18
 801e4a4:	3fe921fb 	.word	0x3fe921fb
 801e4a8:	7ff00000 	.word	0x7ff00000
 801e4ac:	0801fd20 	.word	0x0801fd20
 801e4b0:	0801fd08 	.word	0x0801fd08
 801e4b4:	00000000 	.word	0x00000000

0801e4b8 <atan>:
 801e4b8:	b538      	push	{r3, r4, r5, lr}
 801e4ba:	eeb0 7b40 	vmov.f64	d7, d0
 801e4be:	ee17 5a90 	vmov	r5, s15
 801e4c2:	4b73      	ldr	r3, [pc, #460]	@ (801e690 <atan+0x1d8>)
 801e4c4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e4c8:	429c      	cmp	r4, r3
 801e4ca:	d913      	bls.n	801e4f4 <atan+0x3c>
 801e4cc:	4b71      	ldr	r3, [pc, #452]	@ (801e694 <atan+0x1dc>)
 801e4ce:	429c      	cmp	r4, r3
 801e4d0:	d803      	bhi.n	801e4da <atan+0x22>
 801e4d2:	d107      	bne.n	801e4e4 <atan+0x2c>
 801e4d4:	ee10 3a10 	vmov	r3, s0
 801e4d8:	b123      	cbz	r3, 801e4e4 <atan+0x2c>
 801e4da:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e4de:	eeb0 0b47 	vmov.f64	d0, d7
 801e4e2:	bd38      	pop	{r3, r4, r5, pc}
 801e4e4:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e620 <atan+0x168>
 801e4e8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e628 <atan+0x170>
 801e4ec:	2d00      	cmp	r5, #0
 801e4ee:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e4f2:	e7f4      	b.n	801e4de <atan+0x26>
 801e4f4:	4b68      	ldr	r3, [pc, #416]	@ (801e698 <atan+0x1e0>)
 801e4f6:	429c      	cmp	r4, r3
 801e4f8:	d811      	bhi.n	801e51e <atan+0x66>
 801e4fa:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e4fe:	429c      	cmp	r4, r3
 801e500:	d80a      	bhi.n	801e518 <atan+0x60>
 801e502:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e506:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e630 <atan+0x178>
 801e50a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e50e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e516:	dce2      	bgt.n	801e4de <atan+0x26>
 801e518:	f04f 33ff 	mov.w	r3, #4294967295
 801e51c:	e013      	b.n	801e546 <atan+0x8e>
 801e51e:	f000 f8c5 	bl	801e6ac <fabs>
 801e522:	4b5e      	ldr	r3, [pc, #376]	@ (801e69c <atan+0x1e4>)
 801e524:	429c      	cmp	r4, r3
 801e526:	d84f      	bhi.n	801e5c8 <atan+0x110>
 801e528:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e52c:	429c      	cmp	r4, r3
 801e52e:	d841      	bhi.n	801e5b4 <atan+0xfc>
 801e530:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e534:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e538:	2300      	movs	r3, #0
 801e53a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e53e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e542:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e546:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e638 <atan+0x180>
 801e54a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e54e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e552:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e640 <atan+0x188>
 801e556:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e55a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e648 <atan+0x190>
 801e55e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e562:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e650 <atan+0x198>
 801e566:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e56a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e658 <atan+0x1a0>
 801e56e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e572:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e660 <atan+0x1a8>
 801e576:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e668 <atan+0x1b0>
 801e57a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e57e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e670 <atan+0x1b8>
 801e582:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e586:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e678 <atan+0x1c0>
 801e58a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e58e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e680 <atan+0x1c8>
 801e592:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e596:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e688 <atan+0x1d0>
 801e59a:	1c5a      	adds	r2, r3, #1
 801e59c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e5a0:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e5a4:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e5a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e5ac:	d121      	bne.n	801e5f2 <atan+0x13a>
 801e5ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e5b2:	e794      	b.n	801e4de <atan+0x26>
 801e5b4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e5b8:	2301      	movs	r3, #1
 801e5ba:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e5be:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e5c2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e5c6:	e7be      	b.n	801e546 <atan+0x8e>
 801e5c8:	4b35      	ldr	r3, [pc, #212]	@ (801e6a0 <atan+0x1e8>)
 801e5ca:	429c      	cmp	r4, r3
 801e5cc:	d20b      	bcs.n	801e5e6 <atan+0x12e>
 801e5ce:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e5d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e5d6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e5da:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e5de:	2302      	movs	r3, #2
 801e5e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e5e4:	e7af      	b.n	801e546 <atan+0x8e>
 801e5e6:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e5ea:	2303      	movs	r3, #3
 801e5ec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e5f0:	e7a9      	b.n	801e546 <atan+0x8e>
 801e5f2:	4a2c      	ldr	r2, [pc, #176]	@ (801e6a4 <atan+0x1ec>)
 801e5f4:	492c      	ldr	r1, [pc, #176]	@ (801e6a8 <atan+0x1f0>)
 801e5f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e5fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e5fe:	ed93 5b00 	vldr	d5, [r3]
 801e602:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e606:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e60a:	ed92 7b00 	vldr	d7, [r2]
 801e60e:	2d00      	cmp	r5, #0
 801e610:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e614:	bfb8      	it	lt
 801e616:	eeb1 7b47 	vneglt.f64	d7, d7
 801e61a:	e760      	b.n	801e4de <atan+0x26>
 801e61c:	f3af 8000 	nop.w
 801e620:	54442d18 	.word	0x54442d18
 801e624:	bff921fb 	.word	0xbff921fb
 801e628:	54442d18 	.word	0x54442d18
 801e62c:	3ff921fb 	.word	0x3ff921fb
 801e630:	8800759c 	.word	0x8800759c
 801e634:	7e37e43c 	.word	0x7e37e43c
 801e638:	e322da11 	.word	0xe322da11
 801e63c:	3f90ad3a 	.word	0x3f90ad3a
 801e640:	24760deb 	.word	0x24760deb
 801e644:	3fa97b4b 	.word	0x3fa97b4b
 801e648:	a0d03d51 	.word	0xa0d03d51
 801e64c:	3fb10d66 	.word	0x3fb10d66
 801e650:	c54c206e 	.word	0xc54c206e
 801e654:	3fb745cd 	.word	0x3fb745cd
 801e658:	920083ff 	.word	0x920083ff
 801e65c:	3fc24924 	.word	0x3fc24924
 801e660:	5555550d 	.word	0x5555550d
 801e664:	3fd55555 	.word	0x3fd55555
 801e668:	52defd9a 	.word	0x52defd9a
 801e66c:	bfadde2d 	.word	0xbfadde2d
 801e670:	2c6a6c2f 	.word	0x2c6a6c2f
 801e674:	bfa2b444 	.word	0xbfa2b444
 801e678:	af749a6d 	.word	0xaf749a6d
 801e67c:	bfb3b0f2 	.word	0xbfb3b0f2
 801e680:	fe231671 	.word	0xfe231671
 801e684:	bfbc71c6 	.word	0xbfbc71c6
 801e688:	9998ebc4 	.word	0x9998ebc4
 801e68c:	bfc99999 	.word	0xbfc99999
 801e690:	440fffff 	.word	0x440fffff
 801e694:	7ff00000 	.word	0x7ff00000
 801e698:	3fdbffff 	.word	0x3fdbffff
 801e69c:	3ff2ffff 	.word	0x3ff2ffff
 801e6a0:	40038000 	.word	0x40038000
 801e6a4:	0801fd58 	.word	0x0801fd58
 801e6a8:	0801fd38 	.word	0x0801fd38

0801e6ac <fabs>:
 801e6ac:	ec51 0b10 	vmov	r0, r1, d0
 801e6b0:	4602      	mov	r2, r0
 801e6b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e6b6:	ec43 2b10 	vmov	d0, r2, r3
 801e6ba:	4770      	bx	lr

0801e6bc <with_errno>:
 801e6bc:	b510      	push	{r4, lr}
 801e6be:	ed2d 8b02 	vpush	{d8}
 801e6c2:	eeb0 8b40 	vmov.f64	d8, d0
 801e6c6:	4604      	mov	r4, r0
 801e6c8:	f7ff fb5c 	bl	801dd84 <__errno>
 801e6cc:	eeb0 0b48 	vmov.f64	d0, d8
 801e6d0:	ecbd 8b02 	vpop	{d8}
 801e6d4:	6004      	str	r4, [r0, #0]
 801e6d6:	bd10      	pop	{r4, pc}

0801e6d8 <xflow>:
 801e6d8:	b082      	sub	sp, #8
 801e6da:	b158      	cbz	r0, 801e6f4 <xflow+0x1c>
 801e6dc:	eeb1 7b40 	vneg.f64	d7, d0
 801e6e0:	ed8d 7b00 	vstr	d7, [sp]
 801e6e4:	ed9d 7b00 	vldr	d7, [sp]
 801e6e8:	2022      	movs	r0, #34	@ 0x22
 801e6ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e6ee:	b002      	add	sp, #8
 801e6f0:	f7ff bfe4 	b.w	801e6bc <with_errno>
 801e6f4:	eeb0 7b40 	vmov.f64	d7, d0
 801e6f8:	e7f2      	b.n	801e6e0 <xflow+0x8>
 801e6fa:	0000      	movs	r0, r0
 801e6fc:	0000      	movs	r0, r0
	...

0801e700 <__math_uflow>:
 801e700:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e708 <__math_uflow+0x8>
 801e704:	f7ff bfe8 	b.w	801e6d8 <xflow>
 801e708:	00000000 	.word	0x00000000
 801e70c:	10000000 	.word	0x10000000

0801e710 <__math_oflow>:
 801e710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e718 <__math_oflow+0x8>
 801e714:	f7ff bfe0 	b.w	801e6d8 <xflow>
 801e718:	00000000 	.word	0x00000000
 801e71c:	70000000 	.word	0x70000000

0801e720 <__math_divzero>:
 801e720:	b082      	sub	sp, #8
 801e722:	2800      	cmp	r0, #0
 801e724:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e728:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e72c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e730:	ed8d 7b00 	vstr	d7, [sp]
 801e734:	ed9d 0b00 	vldr	d0, [sp]
 801e738:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e748 <__math_divzero+0x28>
 801e73c:	2022      	movs	r0, #34	@ 0x22
 801e73e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e742:	b002      	add	sp, #8
 801e744:	f7ff bfba 	b.w	801e6bc <with_errno>
	...

0801e750 <__math_invalid>:
 801e750:	eeb0 7b40 	vmov.f64	d7, d0
 801e754:	eeb4 7b47 	vcmp.f64	d7, d7
 801e758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e75c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e760:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e764:	d602      	bvs.n	801e76c <__math_invalid+0x1c>
 801e766:	2021      	movs	r0, #33	@ 0x21
 801e768:	f7ff bfa8 	b.w	801e6bc <with_errno>
 801e76c:	4770      	bx	lr

0801e76e <__math_check_uflow>:
 801e76e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e776:	d102      	bne.n	801e77e <__math_check_uflow+0x10>
 801e778:	2022      	movs	r0, #34	@ 0x22
 801e77a:	f7ff bf9f 	b.w	801e6bc <with_errno>
 801e77e:	4770      	bx	lr

0801e780 <__math_check_oflow>:
 801e780:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e7a0 <__math_check_oflow+0x20>
 801e784:	eeb0 7bc0 	vabs.f64	d7, d0
 801e788:	eeb4 7b46 	vcmp.f64	d7, d6
 801e78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e790:	dd02      	ble.n	801e798 <__math_check_oflow+0x18>
 801e792:	2022      	movs	r0, #34	@ 0x22
 801e794:	f7ff bf92 	b.w	801e6bc <with_errno>
 801e798:	4770      	bx	lr
 801e79a:	bf00      	nop
 801e79c:	f3af 8000 	nop.w
 801e7a0:	ffffffff 	.word	0xffffffff
 801e7a4:	7fefffff 	.word	0x7fefffff

0801e7a8 <_init>:
 801e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7aa:	bf00      	nop
 801e7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7ae:	bc08      	pop	{r3}
 801e7b0:	469e      	mov	lr, r3
 801e7b2:	4770      	bx	lr

0801e7b4 <_fini>:
 801e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7b6:	bf00      	nop
 801e7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7ba:	bc08      	pop	{r3}
 801e7bc:	469e      	mov	lr, r3
 801e7be:	4770      	bx	lr
