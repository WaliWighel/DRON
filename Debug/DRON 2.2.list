
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8c0  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801eb90  0801eb90  00024b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080209b8  080209b8  000269b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080209c0  080209c0  000269c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080209c4  080209c4  000269c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  080209c8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020a40  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020a40  000278ac  2**0
                  ALLOC
  9 .IRAM         0000420e  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031f2e  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee0  00000000  00000000  0007b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  00081550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2e  00000000  00000000  000839b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  000855de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038809  00000000  00000000  000c1f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1cf  00000000  00000000  000fa79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0026896a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f94  00000000  00000000  002689b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801eb78 	.word	0x0801eb78

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801eb78 	.word	0x0801eb78

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa96 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fa60 	bl	800ebec <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000cc 	.word	0x000000cc

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e fa3d 	bl	800ebec <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000fc 	.word	0x000000fc
 80007b8:	000000cc 	.word	0x000000cc

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000f8 	.word	0x000000f8

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f8de 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f8c6 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fade 	bl	800ee20 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fac8 	bl	800ee20 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f98d 	bl	800ebec <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	000000a6 	.word	0x000000a6
 80009b0:	000000a8 	.word	0x000000a8
 80009b4:	000000aa 	.word	0x000000aa
 80009b8:	000000a0 	.word	0x000000a0
 80009bc:	000000a2 	.word	0x000000a2
 80009c0:	000000a4 	.word	0x000000a4
 80009c4:	000000ac 	.word	0x000000ac
 80009c8:	000000ae 	.word	0x000000ae
 80009cc:	000000b0 	.word	0x000000b0
 80009d0:	000000b2 	.word	0x000000b2
 80009d4:	000000b4 	.word	0x000000b4

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	000000a4 	.word	0x000000a4
 8000a74:	000000a2 	.word	0x000000a2
 8000a78:	000000d0 	.word	0x000000d0
 8000a7c:	000000b2 	.word	0x000000b2
 8000a80:	000000b4 	.word	0x000000b4
 8000a84:	000000d4 	.word	0x000000d4
 8000a88:	000000d8 	.word	0x000000d8
 8000a8c:	000000e8 	.word	0x000000e8

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000c0 	.word	0x000000c0
 8000d18:	000000cc 	.word	0x000000cc
 8000d1c:	000000a4 	.word	0x000000a4
 8000d20:	000000a2 	.word	0x000000a2
 8000d24:	000000d0 	.word	0x000000d0
 8000d28:	000000b2 	.word	0x000000b2
 8000d2c:	000000b4 	.word	0x000000b4
 8000d30:	000000d4 	.word	0x000000d4
 8000d34:	000000d8 	.word	0x000000d8
 8000d38:	000000dc 	.word	0x000000dc
 8000d3c:	000000ae 	.word	0x000000ae
 8000d40:	000000a8 	.word	0x000000a8
 8000d44:	000000e4 	.word	0x000000e4
 8000d48:	000000a6 	.word	0x000000a6
 8000d4c:	000000e0 	.word	0x000000e0
 8000d50:	000000aa 	.word	0x000000aa
 8000d54:	000000ac 	.word	0x000000ac
 8000d58:	000000a0 	.word	0x000000a0
 8000d5c:	000000b8 	.word	0x000000b8
 8000d60:	000000bc 	.word	0x000000bc
 8000d64:	000000ec 	.word	0x000000ec
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fc13 	bl	80095ac <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fbfd 	bl	80095ac <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000c4 	.word	0x000000c4
 8000de8:	000000e8 	.word	0x000000e8
 8000dec:	000000c8 	.word	0x000000c8
 8000df0:	000000ec 	.word	0x000000ec

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000f4 	.word	0x000000f4

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fbaf 	bl	80166bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fba9 	bl	80166bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fba3 	bl	80166bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb9d 	bl	80166bc <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fc33 	bl	800e824 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 faf3 	bl	80095ac <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X, Mag_Z, heading;
//float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 8000fea:	2370      	movs	r3, #112	@ 0x70
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fcdd 	bl	800e9c4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 800100a:	23a0      	movs	r3, #160	@ 0xa0
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fccd 	bl	800e9c4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fcbd 	bl	800e9c4 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f008 faac 	bl	80095ac <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f107 030e 	add.w	r3, r7, #14
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	220a      	movs	r2, #10
 800106a:	213c      	movs	r1, #60	@ 0x3c
 800106c:	f00d fdbe 	bl	800ebec <HAL_I2C_Mem_Read>

	if(status != 0x48){
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	2b48      	cmp	r3, #72	@ 0x48
 8001074:	d002      	beq.n	800107c <HMC5883L_Init+0xa4>
		status = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e001      	b.n	8001080 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f008 fa93 	bl	80095ac <HAL_Delay>

	return status;
 8001086:	7bbb      	ldrb	r3, [r7, #14]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400009c 	.word	0x2400009c

08001094 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 800109a:	23b6      	movs	r3, #182	@ 0xb6
 800109c:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HMC5883L_Get_Z_Start+0x40>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2306      	movs	r3, #6
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	463b      	mov	r3, r7
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	213c      	movs	r1, #60	@ 0x3c
 80010b4:	f00d fd9a 	bl	800ebec <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2400009c 	.word	0x2400009c

080010d8 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x28>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2306      	movs	r3, #6
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	213c      	movs	r1, #60	@ 0x3c
 80010f0:	f00d ff20 	bl	800ef34 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400009c 	.word	0x2400009c
 8001104:	00000070 	.word	0x00000070
 8001108:	000041fd 	.word	0x000041fd
 800110c:	00000000 	.word	0x00000000

08001110 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		Mag_X = (((int16_t)HMC5883L_Data_IT[1]<<8) | HMC5883L_Data_IT[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 8001114:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4a31      	ldr	r2, [pc, #196]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001128:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 800112c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (((int16_t)HMC5883L_Data_IT[3]<<8) | HMC5883L_Data_IT[2]) * 2.56;// 2.56 - scale
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001142:	7892      	ldrb	r2, [r2, #2]
 8001144:	4313      	orrs	r3, r2
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HMC5883L_Get_Z_End_IT+0xd8>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Y = (((int16_t)HMC5883L_Data_IT[5]<<8) | HMC5883L_Data_IT[4]) * 2.56;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001168:	7912      	ldrb	r2, [r2, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001174:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001178:	ee27 7b06 	vmul.f64	d7, d7, d6
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	heading = (atan2(Mag_X, Mag_Y))*180/M_PI;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001192:	edd3 6a00 	vldr	s13, [r3]
 8001196:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800119a:	eeb0 1b46 	vmov.f64	d1, d6
 800119e:	eeb0 0b47 	vmov.f64	d0, d7
 80011a2:	f01d f801 	bl	801e1a8 <atan2>
 80011a6:	eeb0 7b40 	vmov.f64	d7, d0
 80011aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80011d0 <HMC5883L_Get_Z_End_IT+0xc0>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80011d8 <HMC5883L_Get_Z_End_IT+0xc8>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	47ae147b 	.word	0x47ae147b
 80011cc:	40047ae1 	.word	0x40047ae1
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40668000 	.word	0x40668000
 80011d8:	54442d18 	.word	0x54442d18
 80011dc:	400921fb 	.word	0x400921fb
 80011e0:	00000070 	.word	0x00000070
 80011e4:	00000060 	.word	0x00000060
 80011e8:	00000058 	.word	0x00000058
 80011ec:	0000005c 	.word	0x0000005c
 80011f0:	00000064 	.word	0x00000064

080011f4 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 80011f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	e014      	b.n	8001238 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 800120e:	f7ff ff41 	bl	8001094 <HMC5883L_Get_Z_Start>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	17da      	asrs	r2, r3, #31
 8001218:	461c      	mov	r4, r3
 800121a:	4615      	mov	r5, r2
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	eb12 0804 	adds.w	r8, r2, r4
 8001224:	eb43 0905 	adc.w	r9, r3, r5
 8001228:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 800122c:	2064      	movs	r0, #100	@ 0x64
 800122e:	f008 f9bd 	bl	80095ac <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b09      	cmp	r3, #9
 800123c:	dde7      	ble.n	800120e <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 800123e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001242:	f04f 020a 	mov.w	r2, #10
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f7ff f861 	bl	8000310 <__aeabi_ldivmod>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	b213      	sxth	r3, r2
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001260 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001268:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MPU6050_INIT+0x58>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800126e:	f000 f825 	bl	80012bc <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 8001272:	f000 f88f 	bl	8001394 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 8001276:	2005      	movs	r0, #5
 8001278:	f000 f838 	bl	80012ec <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 800127c:	2008      	movs	r0, #8
 800127e:	f000 f851 	bl	8001324 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 8001282:	2008      	movs	r0, #8
 8001284:	f000 f86a 	bl	800135c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001288:	f000 fd3e 	bl	8001d08 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 800128c:	f000 f89a 	bl	80013c4 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f008 f98b 	bl	80095ac <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 8001296:	f000 fd1f 	bl	8001cd8 <MPU6050_READ_ID>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b68      	cmp	r3, #104	@ 0x68
 80012a2:	d002      	beq.n	80012aa <MPU6050_INIT+0x4a>
		status = 0;//error
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	240000a0 	.word	0x240000a0

080012bc <MPU6050_RESET>:


void MPU6050_RESET(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MPU6050_RESET+0x2c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	226b      	movs	r2, #107	@ 0x6b
 80012da:	21d0      	movs	r1, #208	@ 0xd0
 80012dc:	f00d fb72 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MPU6050_CONFIG_DLPF+0x34>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221a      	movs	r2, #26
 8001310:	21d0      	movs	r1, #208	@ 0xd0
 8001312:	f00d fb57 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000a0 	.word	0x240000a0

08001324 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MPU6050_CONFIG_GYRO+0x34>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	221b      	movs	r2, #27
 8001348:	21d0      	movs	r1, #208	@ 0xd0
 800134a:	f00d fb3b 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240000a0 	.word	0x240000a0

0800135c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af04      	add	r7, sp, #16
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MPU6050_CONFIG_ACCEL+0x34>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 030f 	add.w	r3, r7, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	221c      	movs	r2, #28
 8001380:	21d0      	movs	r1, #208	@ 0xd0
 8001382:	f00d fb1f 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240000a0 	.word	0x240000a0

08001394 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2219      	movs	r2, #25
 80013b2:	21d0      	movs	r1, #208	@ 0xd0
 80013b4:	f00d fb06 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	240000a0 	.word	0x240000a0

080013c4 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	226a      	movs	r2, #106	@ 0x6a
 80013e2:	21d0      	movs	r1, #208	@ 0xd0
 80013e4:	f00d faee 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240000a0 	.word	0x240000a0

080013f4 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6178      	str	r0, [r7, #20]
 80013fc:	6139      	str	r1, [r7, #16]
 80013fe:	60fa      	str	r2, [r7, #12]
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
 8001406:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e06b      	b.n	800150c <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001434:	f000 fbcc 	bl	8001bd0 <MPU6050_GET_ACCEL_FULLVALUE_X>
 8001438:	4603      	mov	r3, r0
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001442:	ed97 7a00 	vldr	s14, [r7]
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 8001456:	f000 fbdb 	bl	8001c10 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800145a:	4603      	mov	r3, r0
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001464:	ed97 7a00 	vldr	s14, [r7]
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 8001478:	f000 fbde 	bl	8001c38 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 800147c:	4603      	mov	r3, r0
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	ed97 7a00 	vldr	s14, [r7]
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 800149a:	f000 fbe1 	bl	8001c60 <MPU6050_GET_GYRO_FULLVALUE_X>
 800149e:	4603      	mov	r3, r0
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 80014bc:	f000 fbe4 	bl	8001c88 <MPU6050_GET_GYRO_FULLVALUE_Y>
 80014c0:	4603      	mov	r3, r0
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 80014de:	f000 fbe7 	bl	8001cb0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 80014e2:	4603      	mov	r3, r0
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80014f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f008 f853 	bl	80095ac <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001512:	db8f      	blt.n	8001434 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001514:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001518:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 8001526:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800152a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800152e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 8001538:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800153c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 800155e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001562:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 8001570:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001574:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800157e:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 8001582:	ed97 7a08 	vldr	s14, [r7, #32]
 8001586:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001590:	edc3 7a00 	vstr	s15, [r3]
}
 8001594:	bf00      	nop
 8001596:	3738      	adds	r7, #56	@ 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	447a0000 	.word	0x447a0000

080015a0 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80015aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80015ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80015b2:	60b8      	str	r0, [r7, #8]
 80015b4:	6079      	str	r1, [r7, #4]
	float axan,ayan;
	float ang1 = sqrt((ax*ax)+(az*az));
 80015b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	eeb0 0b47 	vmov.f64	d0, d7
 80015d2:	f01c fded 	bl	801e1b0 <sqrt>
 80015d6:	eeb0 7b40 	vmov.f64	d7, d0
 80015da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float ang2 = sqrt((ay*ay)+(az*az));
 80015e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fa:	eeb0 0b47 	vmov.f64	d0, d7
 80015fe:	f01c fdd7 	bl	801e1b0 <sqrt>
 8001602:	eeb0 7b40 	vmov.f64	d7, d0
 8001606:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800160a:	edc7 7a08 	vstr	s15, [r7, #32]
	axan = -1*(atan(ax/ang2));
 800160e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001612:	ed97 7a08 	vldr	s14, [r7, #32]
 8001616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161e:	eeb0 0b47 	vmov.f64	d0, d7
 8001622:	f01c fde5 	bl	801e1f0 <atan>
 8001626:	eeb0 7b40 	vmov.f64	d7, d0
 800162a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800162e:	eef1 7a67 	vneg.f32	s15, s15
 8001632:	edc7 7a07 	vstr	s15, [r7, #28]
	ayan= atan(ay/ang1);
 8001636:	edd7 6a04 	vldr	s13, [r7, #16]
 800163a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800163e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001646:	eeb0 0b47 	vmov.f64	d0, d7
 800164a:	f01c fdd1 	bl	801e1f0 <atan>
 800164e:	eeb0 7b40 	vmov.f64	d7, d0
 8001652:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001656:	edc7 7a06 	vstr	s15, [r7, #24]

//	*ax_ang = (axan*180)/M_PI;
//	*ay_ang = (ayan*180)/M_PI;

	*ay_ang = (axan*180)/M_PI;//x = y poniewaz x gyro to y acc
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800166a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 80016a8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 800166e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001672:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edc3 7a00 	vstr	s15, [r3]
	*ax_ang = (ayan*180)/M_PI;
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80016b0 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800168c:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 80016a8 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 8001690:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001694:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	edc3 7a00 	vstr	s15, [r3]
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	43340000 	.word	0x43340000

080016b4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	@ 0x50
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80016bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016be:	627a      	str	r2, [r7, #36]	@ 0x24
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	ed87 0a07 	vstr	s0, [r7, #28]
 80016c6:	edc7 0a06 	vstr	s1, [r7, #24]
 80016ca:	ed87 1a05 	vstr	s2, [r7, #20]
 80016ce:	edc7 1a04 	vstr	s3, [r7, #16]
 80016d2:	ed87 2a03 	vstr	s4, [r7, #12]
 80016d6:	edc7 2a02 	vstr	s5, [r7, #8]
 80016da:	ed87 3a01 	vstr	s6, [r7, #4]
 80016de:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 80016e2:	4b4e      	ldr	r3, [pc, #312]	@ (800181c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	230e      	movs	r3, #14
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	223b      	movs	r2, #59	@ 0x3b
 80016f8:	21d0      	movs	r1, #208	@ 0xd0
 80016fa:	f00d fa77 	bl	800ebec <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 80016fe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21b      	sxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800170c:	4313      	orrs	r3, r2
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001716:	edd7 7a00 	vldr	s15, [r7]
 800171a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800171e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001728:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800172c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21b      	sxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800173a:	4313      	orrs	r3, r2
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001744:	edd7 7a00 	vldr	s15, [r7]
 8001748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800175a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21b      	sxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001768:	4313      	orrs	r3, r2
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800177a:	edd7 7a05 	vldr	s15, [r7, #20]
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 8001788:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21b      	sxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001796:	4313      	orrs	r3, r2
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80017b6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21b      	sxth	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80017c4:	4313      	orrs	r3, r2
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017e0:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 80017e4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80017f2:	4313      	orrs	r3, r2
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001804:	edd7 7a02 	vldr	s15, [r7, #8]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001812:	bf00      	nop
 8001814:	3740      	adds	r7, #64	@ 0x40
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	240000a0 	.word	0x240000a0

08001820 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	230e      	movs	r3, #14
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	223b      	movs	r2, #59	@ 0x3b
 8001836:	21d0      	movs	r1, #208	@ 0xd0
 8001838:	f00d fb7c 	bl	800ef34 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]


}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	240000a0 	.word	0x240000a0
 800184c:	00000048 	.word	0x00000048
 8001850:	000041fc 	.word	0x000041fc

08001854 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001854:	b480      	push	{r7}
 8001856:	b08d      	sub	sp, #52	@ 0x34
 8001858:	af00      	add	r7, sp, #0
 800185a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800185c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800185e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001860:	623b      	str	r3, [r7, #32]
 8001862:	ed87 0a07 	vstr	s0, [r7, #28]
 8001866:	edc7 0a06 	vstr	s1, [r7, #24]
 800186a:	ed87 1a05 	vstr	s2, [r7, #20]
 800186e:	edc7 1a04 	vstr	s3, [r7, #16]
 8001872:	ed87 2a03 	vstr	s4, [r7, #12]
 8001876:	edc7 2a02 	vstr	s5, [r7, #8]
 800187a:	ed87 3a01 	vstr	s6, [r7, #4]
 800187e:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21b      	sxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4b45      	ldr	r3, [pc, #276]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	4313      	orrs	r3, r2
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189a:	edd7 7a00 	vldr	s15, [r7]
 800189e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ac:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80018b0:	4b3c      	ldr	r3, [pc, #240]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018b2:	789b      	ldrb	r3, [r3, #2]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	4313      	orrs	r3, r2
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c8:	edd7 7a00 	vldr	s15, [r7]
 80018cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018da:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 80018de:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018f6:	edd7 7a00 	vldr	s15, [r7]
 80018fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800190e:	7a1b      	ldrb	r3, [r3, #8]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21b      	sxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001918:	7a5b      	ldrb	r3, [r3, #9]
 800191a:	4313      	orrs	r3, r2
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001924:	edd7 7a01 	vldr	s15, [r7, #4]
 8001928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800192c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800193c:	7a9b      	ldrb	r3, [r3, #10]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21b      	sxth	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001946:	7adb      	ldrb	r3, [r3, #11]
 8001948:	4313      	orrs	r3, r2
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001952:	edd7 7a01 	vldr	s15, [r7, #4]
 8001956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800195a:	edd7 7a03 	vldr	s15, [r7, #12]
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001964:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800196a:	7b1b      	ldrb	r3, [r3, #12]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21b      	sxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001974:	7b5b      	ldrb	r3, [r3, #13]
 8001976:	4313      	orrs	r3, r2
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001980:	edd7 7a01 	vldr	s15, [r7, #4]
 8001984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001988:	edd7 7a02 	vldr	s15, [r7, #8]
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001992:	edc3 7a00 	vstr	s15, [r3]
}
 8001996:	bf00      	nop
 8001998:	3734      	adds	r7, #52	@ 0x34
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	00000048 	.word	0x00000048

080019a8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	61f8      	str	r0, [r7, #28]
 80019b0:	ed87 0a06 	vstr	s0, [r7, #24]
 80019b4:	edc7 0a05 	vstr	s1, [r7, #20]
 80019b8:	ed87 1a04 	vstr	s2, [r7, #16]
 80019bc:	edc7 1a03 	vstr	s3, [r7, #12]
 80019c0:	ed87 2a02 	vstr	s4, [r7, #8]
 80019c4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80019c8:	edd7 2a01 	vldr	s5, [r7, #4]
 80019cc:	ed97 2a02 	vldr	s4, [r7, #8]
 80019d0:	edd7 1a03 	vldr	s3, [r7, #12]
 80019d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80019d8:	edd7 0a05 	vldr	s1, [r7, #20]
 80019dc:	ed97 0a06 	vldr	s0, [r7, #24]
 80019e0:	69f8      	ldr	r0, [r7, #28]
 80019e2:	f000 f9a9 	bl	8001d38 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MPU6050_GET_ACCEL_YH+0x2c>)
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2301      	movs	r3, #1
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	223d      	movs	r2, #61	@ 0x3d
 8001a0a:	21d0      	movs	r1, #208	@ 0xd0
 8001a0c:	f00d f8ee 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	240000a0 	.word	0x240000a0

08001a20 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	223e      	movs	r2, #62	@ 0x3e
 8001a3a:	21d0      	movs	r1, #208	@ 0xd0
 8001a3c:	f00d f8d6 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	240000a0 	.word	0x240000a0

08001a50 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2301      	movs	r3, #1
 8001a68:	223f      	movs	r2, #63	@ 0x3f
 8001a6a:	21d0      	movs	r1, #208	@ 0xd0
 8001a6c:	f00d f8be 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	240000a0 	.word	0x240000a0

08001a80 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2301      	movs	r3, #1
 8001a98:	2240      	movs	r2, #64	@ 0x40
 8001a9a:	21d0      	movs	r1, #208	@ 0xd0
 8001a9c:	f00d f8a6 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	240000a0 	.word	0x240000a0

08001ab0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <MPU6050_GET_GYRO_XH+0x2c>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	2301      	movs	r3, #1
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2243      	movs	r2, #67	@ 0x43
 8001aca:	21d0      	movs	r1, #208	@ 0xd0
 8001acc:	f00d f88e 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	240000a0 	.word	0x240000a0

08001ae0 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MPU6050_GET_GYRO_XL+0x2c>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	2301      	movs	r3, #1
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2301      	movs	r3, #1
 8001af8:	2244      	movs	r2, #68	@ 0x44
 8001afa:	21d0      	movs	r1, #208	@ 0xd0
 8001afc:	f00d f876 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001b00:	79fb      	ldrb	r3, [r7, #7]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	240000a0 	.word	0x240000a0

08001b10 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MPU6050_GET_GYRO_YH+0x2c>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2245      	movs	r2, #69	@ 0x45
 8001b2a:	21d0      	movs	r1, #208	@ 0xd0
 8001b2c:	f00d f85e 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <MPU6050_GET_GYRO_YL+0x2c>)
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	2246      	movs	r2, #70	@ 0x46
 8001b5a:	21d0      	movs	r1, #208	@ 0xd0
 8001b5c:	f00d f846 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	240000a0 	.word	0x240000a0

08001b70 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MPU6050_GET_GYRO_ZH+0x2c>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2301      	movs	r3, #1
 8001b88:	2247      	movs	r2, #71	@ 0x47
 8001b8a:	21d0      	movs	r1, #208	@ 0xd0
 8001b8c:	f00d f82e 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001b90:	79fb      	ldrb	r3, [r7, #7]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	240000a0 	.word	0x240000a0

08001ba0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2248      	movs	r2, #72	@ 0x48
 8001bba:	21d0      	movs	r1, #208	@ 0xd0
 8001bbc:	f00d f816 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	240000a0 	.word	0x240000a0

08001bd0 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2302      	movs	r3, #2
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2301      	movs	r3, #1
 8001be8:	223b      	movs	r2, #59	@ 0x3b
 8001bea:	21d0      	movs	r1, #208	@ 0xd0
 8001bec:	f00c fffe 	bl	800ebec <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001bf0:	793b      	ldrb	r3, [r7, #4]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	797b      	ldrb	r3, [r7, #5]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	240000a0 	.word	0x240000a0

08001c10 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001c16:	f7ff feeb 	bl	80019f0 <MPU6050_GET_ACCEL_YH>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21c      	sxth	r4, r3
 8001c20:	f7ff fefe 	bl	8001a20 <MPU6050_GET_ACCEL_YL>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001c3e:	f7ff ff07 	bl	8001a50 <MPU6050_GET_ACCEL_ZH>
 8001c42:	4603      	mov	r3, r0
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	b21c      	sxth	r4, r3
 8001c48:	f7ff ff1a 	bl	8001a80 <MPU6050_GET_ACCEL_ZL>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4323      	orrs	r3, r4
 8001c52:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}

08001c60 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001c66:	f7ff ff23 	bl	8001ab0 <MPU6050_GET_GYRO_XH>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21c      	sxth	r4, r3
 8001c70:	f7ff ff36 	bl	8001ae0 <MPU6050_GET_GYRO_XL>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4323      	orrs	r3, r4
 8001c7a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}

08001c88 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001c8e:	f7ff ff3f 	bl	8001b10 <MPU6050_GET_GYRO_YH>
 8001c92:	4603      	mov	r3, r0
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	f7ff ff52 	bl	8001b40 <MPU6050_GET_GYRO_YL>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4323      	orrs	r3, r4
 8001ca2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}

08001cb0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001cb6:	f7ff ff5b 	bl	8001b70 <MPU6050_GET_GYRO_ZH>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21c      	sxth	r4, r3
 8001cc0:	f7ff ff6e 	bl	8001ba0 <MPU6050_GET_GYRO_ZL>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4323      	orrs	r3, r4
 8001cca:	80fb      	strh	r3, [r7, #6]
	return data;
 8001ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}

08001cd8 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <MPU6050_READ_ID+0x2c>)
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	2275      	movs	r2, #117	@ 0x75
 8001cf2:	21d0      	movs	r1, #208	@ 0xd0
 8001cf4:	f00c ff7a 	bl	800ebec <HAL_I2C_Mem_Read>
	return data;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	b25b      	sxtb	r3, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	240000a0 	.word	0x240000a0

08001d08 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2301      	movs	r3, #1
 8001d24:	2237      	movs	r2, #55	@ 0x37
 8001d26:	21d0      	movs	r1, #208	@ 0xd0
 8001d28:	f00c fe4c 	bl	800e9c4 <HAL_I2C_Mem_Write>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	240000a0 	.word	0x240000a0

08001d38 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	61f8      	str	r0, [r7, #28]
 8001d40:	ed87 0a06 	vstr	s0, [r7, #24]
 8001d44:	edc7 0a05 	vstr	s1, [r7, #20]
 8001d48:	ed87 1a04 	vstr	s2, [r7, #16]
 8001d4c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d50:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d54:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001d58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d60:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001e20 <Complementary_getFilter+0xe8>
 8001d64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d68:	4b31      	ldr	r3, [pc, #196]	@ (8001e30 <Complementary_getFilter+0xf8>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d84:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001e28 <Complementary_getFilter+0xf0>
 8001d88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da2:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001e20 <Complementary_getFilter+0xe8>
 8001da6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001daa:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <Complementary_getFilter+0xf8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dc6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001e28 <Complementary_getFilter+0xf0>
 8001dca:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001dce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <Complementary_getFilter+0xf8>)
 8001dde:	ed93 7a00 	vldr	s14, [r3]
 8001de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	47ae147b 	.word	0x47ae147b
 8001e24:	3f947ae1 	.word	0x3f947ae1
 8001e28:	f5c28f5c 	.word	0xf5c28f5c
 8001e2c:	3fef5c28 	.word	0x3fef5c28
 8001e30:	0801ec04 	.word	0x0801ec04

08001e34 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f007 fbb4 	bl	80095ac <HAL_Delay>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <nRF24_SendSpi+0x28>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	f012 fe39 	bl	8014adc <HAL_SPI_Transmit>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	240000a4 	.word	0x240000a4

08001e78 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <nRF24_ReadSpi+0x28>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	f013 f811 	bl	8014eb8 <HAL_SPI_Receive>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	240000a4 	.word	0x240000a4

08001ea4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <nRF24_ReadRegister+0x44>)
 8001eb8:	f00c fcb4 	bl	800e824 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ffc3 	bl	8001e4c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001ec6:	f107 030f 	add.w	r3, r7, #15
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ffd3 	bl	8001e78 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <nRF24_ReadRegister+0x44>)
 8001ed8:	f00c fca4 	bl	800e824 <HAL_GPIO_WritePin>

	return result;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	58020400 	.word	0x58020400

08001eec <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f00:	2200      	movs	r2, #0
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <nRF24_ReadRegisters+0x44>)
 8001f06:	f00c fc8d 	bl	800e824 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff9c 	bl	8001e4c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	f7ff ffad 	bl	8001e78 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <nRF24_ReadRegisters+0x44>)
 8001f24:	f00c fc7e 	bl	800e824 <HAL_GPIO_WritePin>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	58020400 	.word	0x58020400

08001f34 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001f52:	2200      	movs	r2, #0
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	4809      	ldr	r0, [pc, #36]	@ (8001f7c <nRF24_WriteRegister+0x48>)
 8001f58:	f00c fc64 	bl	800e824 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2102      	movs	r1, #2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff72 	bl	8001e4c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <nRF24_WriteRegister+0x48>)
 8001f6e:	f00c fc59 	bl	800e824 <HAL_GPIO_WritePin>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	58020400 	.word	0x58020400

08001f80 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f043 0320 	orr.w	r3, r3, #32
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	480b      	ldr	r0, [pc, #44]	@ (8001fcc <nRF24_WriteRegisters+0x4c>)
 8001fa0:	f00c fc40 	bl	800e824 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff4f 	bl	8001e4c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001fae:	79bb      	ldrb	r3, [r7, #6]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff ff4a 	bl	8001e4c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2180      	movs	r1, #128	@ 0x80
 8001fbc:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <nRF24_WriteRegisters+0x4c>)
 8001fbe:	f00c fc31 	bl	800e824 <HAL_GPIO_WritePin>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	58020400 	.word	0x58020400

08001fd0 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001fd6:	f000 f84d 	bl	8002074 <nRF24_ReadConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001fde:	4910      	ldr	r1, [pc, #64]	@ (8002020 <nRF24_RX_Mode+0x50>)
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 f9f6 	bl	80023d2 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f843 	bl	8002084 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001ffe:	2070      	movs	r0, #112	@ 0x70
 8002000:	f000 f89b 	bl	800213a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002004:	f000 f8a8 	bl	8002158 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002008:	f000 f8c0 	bl	800218c <nRF24_FlushTX>

	NRF24_CE_HIGH;
 800200c:	2201      	movs	r2, #1
 800200e:	2140      	movs	r1, #64	@ 0x40
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <nRF24_RX_Mode+0x54>)
 8002012:	f00c fc07 	bl	800e824 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	240000a8 	.word	0x240000a8
 8002024:	58020400 	.word	0x58020400

08002028 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800202e:	2200      	movs	r2, #0
 8002030:	2140      	movs	r1, #64	@ 0x40
 8002032:	480f      	ldr	r0, [pc, #60]	@ (8002070 <nRF24_TX_Mode+0x48>)
 8002034:	f00c fbf6 	bl	800e824 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002038:	f000 f81c 	bl	8002074 <nRF24_ReadConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f816 	bl	8002084 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002058:	2070      	movs	r0, #112	@ 0x70
 800205a:	f000 f86e 	bl	800213a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800205e:	f000 f87b 	bl	8002158 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002062:	f000 f893 	bl	800218c <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	58020400 	.word	0x58020400

08002074 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff ff13 	bl	8001ea4 <nRF24_ReadRegister>
 800207e:	4603      	mov	r3, r0
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}

08002084 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4619      	mov	r1, r3
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff ff4e 	bl	8001f34 <nRF24_WriteRegister>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020aa:	2006      	movs	r0, #6
 80020ac:	f7ff fefa 	bl	8001ea4 <nRF24_ReadRegister>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	f023 0307 	bic.w	r3, r3, #7
 80020ba:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	4619      	mov	r1, r3
 80020d0:	2006      	movs	r0, #6
 80020d2:	f7ff ff2f 	bl	8001f34 <nRF24_WriteRegister>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020e8:	2006      	movs	r0, #6
 80020ea:	f7ff fedb 	bl	8001ea4 <nRF24_ReadRegister>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80020f8:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d104      	bne.n	800210a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	f043 0320 	orr.w	r3, r3, #32
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e006      	b.n	8002118 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d103      	bne.n	8002118 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	4619      	mov	r1, r3
 800211c:	2006      	movs	r0, #6
 800211e:	f7ff ff09 	bl	8001f34 <nRF24_WriteRegister>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800212e:	2007      	movs	r0, #7
 8002130:	f7ff feb8 	bl	8001ea4 <nRF24_ReadRegister>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}

0800213a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	4619      	mov	r1, r3
 8002148:	2007      	movs	r0, #7
 800214a:	f7ff fef3 	bl	8001f34 <nRF24_WriteRegister>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800215e:	23e2      	movs	r3, #226	@ 0xe2
 8002160:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	4808      	ldr	r0, [pc, #32]	@ (8002188 <nRF24_FlushRX+0x30>)
 8002168:	f00c fb5c 	bl	800e824 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fe6b 	bl	8001e4c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002176:	2201      	movs	r2, #1
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	4803      	ldr	r0, [pc, #12]	@ (8002188 <nRF24_FlushRX+0x30>)
 800217c:	f00c fb52 	bl	800e824 <HAL_GPIO_WritePin>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58020400 	.word	0x58020400

0800218c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002192:	23e1      	movs	r3, #225	@ 0xe1
 8002194:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002196:	2200      	movs	r2, #0
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	4808      	ldr	r0, [pc, #32]	@ (80021bc <nRF24_FlushTX+0x30>)
 800219c:	f00c fb42 	bl	800e824 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	2101      	movs	r1, #1
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fe51 	bl	8001e4c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80021aa:	2201      	movs	r2, #1
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	4803      	ldr	r0, [pc, #12]	@ (80021bc <nRF24_FlushTX+0x30>)
 80021b0:	f00c fb38 	bl	800e824 <HAL_GPIO_WritePin>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	58020400 	.word	0x58020400

080021c0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021ca:	f7ff ff53 	bl	8002074 <nRF24_ReadConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e003      	b.n	80021ea <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	f023 0308 	bic.w	r3, r3, #8
 80021e8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff49 	bl	8002084 <nRF24_WriteConfig>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002204:	f7ff ff36 	bl	8002074 <nRF24_ReadConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d104      	bne.n	800221c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e003      	b.n	8002224 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff2c 	bl	8002084 <nRF24_WriteConfig>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	b25a      	sxtb	r2, r3
 800224a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	b25b      	sxtb	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b25b      	sxtb	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	2004      	movs	r0, #4
 800225e:	f7ff fe69 	bl	8001f34 <nRF24_WriteRegister>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	2005      	movs	r0, #5
 8002280:	f7ff fe58 	bl	8001f34 <nRF24_WriteRegister>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	460a      	mov	r2, r1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d901      	bls.n	80022a6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80022a2:	2305      	movs	r3, #5
 80022a4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	3311      	adds	r3, #17
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	79bb      	ldrb	r3, [r7, #6]
 80022ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f7ff fe3c 	bl	8001f34 <nRF24_WriteRegister>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d901      	bls.n	80022de <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80022da:	2305      	movs	r3, #5
 80022dc:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80022de:	2002      	movs	r0, #2
 80022e0:	f7ff fde0 	bl	8001ea4 <nRF24_ReadRegister>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10a      	bne.n	8002304 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2201      	movs	r2, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	b25a      	sxtb	r2, r3
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e00b      	b.n	800231c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	2201      	movs	r2, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	b25b      	sxtb	r3, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	b25a      	sxtb	r2, r3
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4013      	ands	r3, r2
 8002318:	b25b      	sxtb	r3, r3
 800231a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4619      	mov	r1, r3
 8002320:	2002      	movs	r0, #2
 8002322:	f7ff fe07 	bl	8001f34 <nRF24_WriteRegister>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	460a      	mov	r2, r1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	4613      	mov	r3, r2
 800233c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d901      	bls.n	8002348 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002344:	2305      	movs	r3, #5
 8002346:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff fdab 	bl	8001ea4 <nRF24_ReadRegister>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10a      	bne.n	800236e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	b25a      	sxtb	r2, r3
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4313      	orrs	r3, r2
 8002368:	b25b      	sxtb	r3, r3
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e00b      	b.n	8002386 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2201      	movs	r2, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	b25b      	sxtb	r3, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	b25a      	sxtb	r2, r3
 800237c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002380:	4013      	ands	r3, r2
 8002382:	b25b      	sxtb	r3, r3
 8002384:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	4619      	mov	r1, r3
 800238a:	2001      	movs	r0, #1
 800238c:	f7ff fdd2 	bl	8001f34 <nRF24_WriteRegister>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d901      	bls.n	80023ac <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80023a8:	2305      	movs	r3, #5
 80023aa:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d801      	bhi.n	80023b6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80023b2:	2303      	movs	r3, #3
 80023b4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	3b02      	subs	r3, #2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	2003      	movs	r0, #3
 80023c6:	f7ff fdb5 	bl	8001f34 <nRF24_WriteRegister>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	6039      	str	r1, [r7, #0]
 80023dc:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <nRF24_SetRXAddress+0x18>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d11d      	bne.n	8002426 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e00d      	b.n	800240c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	441a      	add	r2, r3
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	f1c3 0302 	rsb	r3, r3, #2
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	3310      	adds	r3, #16
 8002400:	443b      	add	r3, r7
 8002402:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3301      	adds	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d9ee      	bls.n	80023f0 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	330a      	adds	r3, #10
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	2203      	movs	r2, #3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fdae 	bl	8001f80 <nRF24_WriteRegisters>
	{
 8002424:	e00a      	b.n	800243c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	330a      	adds	r3, #10
 800242a:	b2da      	uxtb	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	3302      	adds	r3, #2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7ff fd7d 	bl	8001f34 <nRF24_WriteRegister>
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2203      	movs	r2, #3
 8002452:	4619      	mov	r1, r3
 8002454:	200a      	movs	r0, #10
 8002456:	f7ff fd49 	bl	8001eec <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e00c      	b.n	800247a <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	f1c3 0302 	rsb	r3, r3, #2
 8002468:	3210      	adds	r2, #16
 800246a:	443a      	add	r2, r7
 800246c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002470:	4a16      	ldr	r2, [pc, #88]	@ (80024cc <nRF24_SetTXAddress+0x88>)
 8002472:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	3301      	adds	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d9ef      	bls.n	8002460 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e00d      	b.n	80024a2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	441a      	add	r2, r3
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	f1c3 0302 	rsb	r3, r3, #2
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	3310      	adds	r3, #16
 8002496:	443b      	add	r3, r7
 8002498:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3301      	adds	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d9ee      	bls.n	8002486 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2203      	movs	r2, #3
 80024ae:	4619      	mov	r1, r3
 80024b0:	200a      	movs	r0, #10
 80024b2:	f7ff fd65 	bl	8001f80 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	2203      	movs	r2, #3
 80024bc:	4619      	mov	r1, r3
 80024be:	2010      	movs	r0, #16
 80024c0:	f7ff fd5e 	bl	8001f80 <nRF24_WriteRegisters>

}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	240000a8 	.word	0x240000a8

080024d0 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80024d6:	f7ff fe28 	bl	800212a <nRF24_ReadStatus>
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80024e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe26 	bl	800213a <nRF24_WriteStatus>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002500:	f7ff fdb8 	bl	8002074 <nRF24_ReadConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e003      	b.n	8002520 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800251e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fdae 	bl	8002084 <nRF24_WriteConfig>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800253a:	f7ff fd9b 	bl	8002074 <nRF24_ReadConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e003      	b.n	800255a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	f023 0320 	bic.w	r3, r3, #32
 8002558:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fd91 	bl	8002084 <nRF24_WriteConfig>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002574:	f7ff fd7e 	bl	8002074 <nRF24_ReadConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e003      	b.n	8002594 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	f023 0310 	bic.w	r3, r3, #16
 8002592:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd74 	bl	8002084 <nRF24_WriteConfig>
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025ac:	2220      	movs	r2, #32
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	20a0      	movs	r0, #160	@ 0xa0
 80025b2:	f7ff fce5 	bl	8001f80 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80025c6:	2201      	movs	r2, #1
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4810      	ldr	r0, [pc, #64]	@ (800260c <nRF24_WaitTX+0x4c>)
 80025cc:	f00c f92a 	bl	800e824 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80025d0:	2001      	movs	r0, #1
 80025d2:	f7ff fc2f 	bl	8001e34 <nRF24_Delay>
	NRF24_CE_LOW;
 80025d6:	2200      	movs	r2, #0
 80025d8:	2140      	movs	r1, #64	@ 0x40
 80025da:	480c      	ldr	r0, [pc, #48]	@ (800260c <nRF24_WaitTX+0x4c>)
 80025dc:	f00c f922 	bl	800e824 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7ff fc27 	bl	8001e34 <nRF24_Delay>
		status = nRF24_ReadStatus();
 80025e6:	f7ff fda0 	bl	800212a <nRF24_ReadStatus>
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <nRF24_WaitTX+0x42>
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ee      	beq.n	80025e0 <nRF24_WaitTX+0x20>

}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	58020400 	.word	0x58020400

08002610 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002618:	2220      	movs	r2, #32
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	2061      	movs	r0, #97	@ 0x61
 800261e:	f7ff fc65 	bl	8001eec <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002622:	2140      	movs	r1, #64	@ 0x40
 8002624:	2007      	movs	r0, #7
 8002626:	f7ff fc85 	bl	8001f34 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800262a:	f7ff fd7e 	bl	800212a <nRF24_ReadStatus>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002638:	2120      	movs	r1, #32
 800263a:	2007      	movs	r0, #7
 800263c:	f7ff fc7a 	bl	8001f34 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002652:	f000 f811 	bl	8002678 <nRF24_ReadFifoStatus>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	fa42 f303 	asr.w	r3, r2, r3
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 800267c:	2017      	movs	r0, #23
 800267e:	f7ff fc11 	bl	8001ea4 <nRF24_ReadRegister>
 8002682:	4603      	mov	r3, r0
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}

08002688 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002690:	4a25      	ldr	r2, [pc, #148]	@ (8002728 <nRF24_Init+0xa0>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002696:	2200      	movs	r2, #0
 8002698:	2140      	movs	r1, #64	@ 0x40
 800269a:	4824      	ldr	r0, [pc, #144]	@ (800272c <nRF24_Init+0xa4>)
 800269c:	f00c f8c2 	bl	800e824 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80026a0:	2201      	movs	r2, #1
 80026a2:	2180      	movs	r1, #128	@ 0x80
 80026a4:	4821      	ldr	r0, [pc, #132]	@ (800272c <nRF24_Init+0xa4>)
 80026a6:	f00c f8bd 	bl	800e824 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80026aa:	200a      	movs	r0, #10
 80026ac:	f006 ff7e 	bl	80095ac <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80026b0:	2003      	movs	r0, #3
 80026b2:	f7ff fcf5 	bl	80020a0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff fd11 	bl	80020de <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff fd7f 	bl	80021c0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fd99 	bl	80021fa <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80026c8:	2100      	movs	r1, #0
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7ff fdb2 	bl	8002234 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80026d0:	2100      	movs	r1, #0
 80026d2:	201c      	movs	r0, #28
 80026d4:	f7ff fc2e 	bl	8001f34 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80026d8:	2120      	movs	r1, #32
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff fdd6 	bl	800228c <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 80026e0:	200f      	movs	r0, #15
 80026e2:	f7ff fdc2 	bl	800226a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80026e6:	2101      	movs	r1, #1
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff fdeb 	bl	80022c4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80026ee:	2101      	movs	r1, #1
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff fe1c 	bl	800232e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80026f6:	2003      	movs	r0, #3
 80026f8:	f7ff fe4e 	bl	8002398 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f006 ff55 	bl	80095ac <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fef7 	bl	80024f6 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff ff11 	bl	8002530 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff ff2b 	bl	800256a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002714:	2001      	movs	r0, #1
 8002716:	f006 ff49 	bl	80095ac <HAL_Delay>

	nRF24_ClearInterrupts();
 800271a:	f7ff fed9 	bl	80024d0 <nRF24_ClearInterrupts>


}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	240000a4 	.word	0x240000a4
 800272c:	58020400 	.word	0x58020400

08002730 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002744:	f3bf 8f4f 	dsb	sy
}
 8002748:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <__NVIC_SystemReset+0x24>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002752:	4904      	ldr	r1, [pc, #16]	@ (8002764 <__NVIC_SystemReset+0x24>)
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <__NVIC_SystemReset+0x28>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800275a:	f3bf 8f4f 	dsb	sy
}
 800275e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <__NVIC_SystemReset+0x20>
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	05fa0004 	.word	0x05fa0004

0800276c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
 8002776:	2300      	movs	r3, #0
 8002778:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 800277a:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <interpretcommand+0x8c>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e02e      	b.n	80027e4 <interpretcommand+0x78>

		if(words[j] == ' '){
 8002786:	4a1d      	ldr	r2, [pc, #116]	@ (80027fc <interpretcommand+0x90>)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b20      	cmp	r3, #32
 8002790:	d102      	bne.n	8002798 <interpretcommand+0x2c>
			vcount++;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	3301      	adds	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <interpretcommand+0x44>
			command[j] = words[j];
 800279e:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <interpretcommand+0x90>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	7819      	ldrb	r1, [r3, #0]
 80027a6:	4a16      	ldr	r2, [pc, #88]	@ (8002800 <interpretcommand+0x94>)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	460a      	mov	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d113      	bne.n	80027de <interpretcommand+0x72>
			value1[J1] = words[j];
 80027b6:	7dbb      	ldrb	r3, [r7, #22]
 80027b8:	4910      	ldr	r1, [pc, #64]	@ (80027fc <interpretcommand+0x90>)
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	440a      	add	r2, r1
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	3318      	adds	r3, #24
 80027c2:	443b      	add	r3, r7
 80027c4:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80027c8:	7dba      	ldrb	r2, [r7, #22]
 80027ca:	7dbb      	ldrb	r3, [r7, #22]
 80027cc:	3218      	adds	r2, #24
 80027ce:	443a      	add	r2, r7
 80027d0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80027d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <interpretcommand+0x98>)
 80027d6:	54d1      	strb	r1, [r2, r3]
			J1++;
 80027d8:	7dbb      	ldrb	r3, [r7, #22]
 80027da:	3301      	adds	r3, #1
 80027dc:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	3301      	adds	r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80027e8:	ddcd      	ble.n	8002786 <interpretcommand+0x1a>
		}
	}
}
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	000041e6 	.word	0x000041e6
 80027fc:	000041dc 	.word	0x000041dc
 8002800:	000041d8 	.word	0x000041d8
 8002804:	000041c8 	.word	0x000041c8

08002808 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b50      	cmp	r3, #80	@ 0x50
 8002818:	d14c      	bne.n	80028b4 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800281a:	4bd5      	ldr	r3, [pc, #852]	@ (8002b70 <executecommand+0x368>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b74 <executecommand+0x36c>
 800282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800282e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b78 <executecommand+0x370>
 8002832:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002836:	4bce      	ldr	r3, [pc, #824]	@ (8002b70 <executecommand+0x368>)
 8002838:	789b      	ldrb	r3, [r3, #2]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b74 <executecommand+0x36c>
 8002846:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800284a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800284e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002856:	4bc6      	ldr	r3, [pc, #792]	@ (8002b70 <executecommand+0x368>)
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002862:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b74 <executecommand+0x36c>
 8002866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800286a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286e:	4bc0      	ldr	r3, [pc, #768]	@ (8002b70 <executecommand+0x368>)
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b74 <executecommand+0x36c>
 800287e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002882:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002886:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800288a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b70 <executecommand+0x368>)
 8002890:	795b      	ldrb	r3, [r3, #5]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b74 <executecommand+0x36c>
 800289e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028a2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b78 <executecommand+0x370>
 80028a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ae:	4bb3      	ldr	r3, [pc, #716]	@ (8002b7c <executecommand+0x374>)
 80028b0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b49      	cmp	r3, #73	@ 0x49
 80028ba:	d14f      	bne.n	800295c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80028bc:	4bac      	ldr	r3, [pc, #688]	@ (8002b70 <executecommand+0x368>)
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b74 <executecommand+0x36c>
 80028cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028d0:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b78 <executecommand+0x370>
 80028d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d8:	4ba5      	ldr	r3, [pc, #660]	@ (8002b70 <executecommand+0x368>)
 80028da:	789b      	ldrb	r3, [r3, #2]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b74 <executecommand+0x36c>
 80028e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028ec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b70 <executecommand+0x368>)
 80028fa:	78db      	ldrb	r3, [r3, #3]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002904:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b74 <executecommand+0x36c>
 8002908:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800290c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002910:	4b97      	ldr	r3, [pc, #604]	@ (8002b70 <executecommand+0x368>)
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b74 <executecommand+0x36c>
 8002920:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002924:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002928:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	4b8f      	ldr	r3, [pc, #572]	@ (8002b70 <executecommand+0x368>)
 8002932:	795b      	ldrb	r3, [r3, #5]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b74 <executecommand+0x36c>
 8002940:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002944:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b78 <executecommand+0x370>
 8002948:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	4b8b      	ldr	r3, [pc, #556]	@ (8002b80 <executecommand+0x378>)
 8002952:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002956:	4b8b      	ldr	r3, [pc, #556]	@ (8002b84 <executecommand+0x37c>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b44      	cmp	r3, #68	@ 0x44
 8002962:	d14c      	bne.n	80029fe <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002964:	4b82      	ldr	r3, [pc, #520]	@ (8002b70 <executecommand+0x368>)
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b74 <executecommand+0x36c>
 8002974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002978:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002b88 <executecommand+0x380>
 800297c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002980:	4b7b      	ldr	r3, [pc, #492]	@ (8002b70 <executecommand+0x368>)
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b74 <executecommand+0x36c>
 8002990:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002994:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b78 <executecommand+0x370>
 8002998:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a0:	4b73      	ldr	r3, [pc, #460]	@ (8002b70 <executecommand+0x368>)
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ac:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b74 <executecommand+0x36c>
 80029b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029b4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b70 <executecommand+0x368>)
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029cc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b74 <executecommand+0x36c>
 80029d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d8:	4b65      	ldr	r3, [pc, #404]	@ (8002b70 <executecommand+0x368>)
 80029da:	795b      	ldrb	r3, [r3, #5]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b74 <executecommand+0x36c>
 80029e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029ec:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f8:	4b64      	ldr	r3, [pc, #400]	@ (8002b8c <executecommand+0x384>)
 80029fa:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b70      	cmp	r3, #112	@ 0x70
 8002a04:	d14c      	bne.n	8002aa0 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a06:	4b5a      	ldr	r3, [pc, #360]	@ (8002b70 <executecommand+0x368>)
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a12:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b74 <executecommand+0x36c>
 8002a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a1a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b78 <executecommand+0x370>
 8002a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a22:	4b53      	ldr	r3, [pc, #332]	@ (8002b70 <executecommand+0x368>)
 8002a24:	789b      	ldrb	r3, [r3, #2]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b74 <executecommand+0x36c>
 8002a32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a36:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a42:	4b4b      	ldr	r3, [pc, #300]	@ (8002b70 <executecommand+0x368>)
 8002a44:	78db      	ldrb	r3, [r3, #3]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b74 <executecommand+0x36c>
 8002a52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5a:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <executecommand+0x368>)
 8002a5c:	791b      	ldrb	r3, [r3, #4]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b74 <executecommand+0x36c>
 8002a6a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a6e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a72:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <executecommand+0x368>)
 8002a7c:	795b      	ldrb	r3, [r3, #5]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a86:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b74 <executecommand+0x36c>
 8002a8a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a8e:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b78 <executecommand+0x370>
 8002a92:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b90 <executecommand+0x388>)
 8002a9c:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b69      	cmp	r3, #105	@ 0x69
 8002aa6:	d14f      	bne.n	8002b48 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002aa8:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <executecommand+0x368>)
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b74 <executecommand+0x36c>
 8002ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002abc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b78 <executecommand+0x370>
 8002ac0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <executecommand+0x368>)
 8002ac6:	789b      	ldrb	r3, [r3, #2]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b74 <executecommand+0x36c>
 8002ad4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ad8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002adc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae4:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <executecommand+0x368>)
 8002ae6:	78db      	ldrb	r3, [r3, #3]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b74 <executecommand+0x36c>
 8002af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <executecommand+0x368>)
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b08:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b74 <executecommand+0x36c>
 8002b0c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b10:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <executecommand+0x368>)
 8002b1e:	795b      	ldrb	r3, [r3, #5]
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b28:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b74 <executecommand+0x36c>
 8002b2c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b30:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b78 <executecommand+0x370>
 8002b34:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <executecommand+0x38c>)
 8002b3e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <executecommand+0x390>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b64      	cmp	r3, #100	@ 0x64
 8002b4e:	d164      	bne.n	8002c1a <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b50:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <executecommand+0x368>)
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b74 <executecommand+0x36c>
 8002b60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b64:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b88 <executecommand+0x380>
 8002b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6c:	e016      	b.n	8002b9c <executecommand+0x394>
 8002b6e:	bf00      	nop
 8002b70:	000041c8 	.word	0x000041c8
 8002b74:	42400000 	.word	0x42400000
 8002b78:	42c80000 	.word	0x42c80000
 8002b7c:	000040f4 	.word	0x000040f4
 8002b80:	00004100 	.word	0x00004100
 8002b84:	000040c4 	.word	0x000040c4
 8002b88:	447a0000 	.word	0x447a0000
 8002b8c:	0000410c 	.word	0x0000410c
 8002b90:	00004154 	.word	0x00004154
 8002b94:	00004160 	.word	0x00004160
 8002b98:	000040d0 	.word	0x000040d0
 8002b9c:	4bd3      	ldr	r3, [pc, #844]	@ (8002eec <executecommand+0x6e4>)
 8002b9e:	789b      	ldrb	r3, [r3, #2]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba8:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002ef0 <executecommand+0x6e8>
 8002bac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bb0:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002ef4 <executecommand+0x6ec>
 8002bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bbc:	4bcb      	ldr	r3, [pc, #812]	@ (8002eec <executecommand+0x6e4>)
 8002bbe:	78db      	ldrb	r3, [r3, #3]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc8:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002ef0 <executecommand+0x6e8>
 8002bcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bd0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002bd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	4bc3      	ldr	r3, [pc, #780]	@ (8002eec <executecommand+0x6e4>)
 8002bde:	791b      	ldrb	r3, [r3, #4]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be8:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002ef0 <executecommand+0x6e8>
 8002bec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	4bbd      	ldr	r3, [pc, #756]	@ (8002eec <executecommand+0x6e4>)
 8002bf6:	795b      	ldrb	r3, [r3, #5]
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c00:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002ef0 <executecommand+0x6e8>
 8002c04:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c08:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	4bb8      	ldr	r3, [pc, #736]	@ (8002ef8 <executecommand+0x6f0>)
 8002c16:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b46      	cmp	r3, #70	@ 0x46
 8002c20:	d150      	bne.n	8002cc4 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c22:	4bb2      	ldr	r3, [pc, #712]	@ (8002eec <executecommand+0x6e4>)
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002ef0 <executecommand+0x6e8>
 8002c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c36:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002efc <executecommand+0x6f4>
 8002c3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c3e:	4bab      	ldr	r3, [pc, #684]	@ (8002eec <executecommand+0x6e4>)
 8002c40:	789b      	ldrb	r3, [r3, #2]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002ef0 <executecommand+0x6e8>
 8002c4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c52:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002ef4 <executecommand+0x6ec>
 8002c56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5e:	4ba3      	ldr	r3, [pc, #652]	@ (8002eec <executecommand+0x6e4>)
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002ef0 <executecommand+0x6e8>
 8002c6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c72:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c7e:	4b9b      	ldr	r3, [pc, #620]	@ (8002eec <executecommand+0x6e4>)
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002ef0 <executecommand+0x6e8>
 8002c8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c96:	4b95      	ldr	r3, [pc, #596]	@ (8002eec <executecommand+0x6e4>)
 8002c98:	795b      	ldrb	r3, [r3, #5]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca2:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002ef0 <executecommand+0x6e8>
 8002ca6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002caa:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002cae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cba:	ee17 3a90 	vmov	r3, s15
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002f00 <executecommand+0x6f8>)
 8002cc2:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b66      	cmp	r3, #102	@ 0x66
 8002cca:	d150      	bne.n	8002d6e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002ccc:	4b87      	ldr	r3, [pc, #540]	@ (8002eec <executecommand+0x6e4>)
 8002cce:	785b      	ldrb	r3, [r3, #1]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002ef0 <executecommand+0x6e8>
 8002cdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ce0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002efc <executecommand+0x6f4>
 8002ce4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ce8:	4b80      	ldr	r3, [pc, #512]	@ (8002eec <executecommand+0x6e4>)
 8002cea:	789b      	ldrb	r3, [r3, #2]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002ef0 <executecommand+0x6e8>
 8002cf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cfc:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002ef4 <executecommand+0x6ec>
 8002d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d08:	4b78      	ldr	r3, [pc, #480]	@ (8002eec <executecommand+0x6e4>)
 8002d0a:	78db      	ldrb	r3, [r3, #3]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d14:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002ef0 <executecommand+0x6e8>
 8002d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d1c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d28:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <executecommand+0x6e4>)
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d34:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002ef0 <executecommand+0x6e8>
 8002d38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d40:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <executecommand+0x6e4>)
 8002d42:	795b      	ldrb	r3, [r3, #5]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002ef0 <executecommand+0x6e8>
 8002d50:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d54:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d58:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	ee17 3a90 	vmov	r3, s15
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b66      	ldr	r3, [pc, #408]	@ (8002f04 <executecommand+0x6fc>)
 8002d6c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b61      	cmp	r3, #97	@ 0x61
 8002d74:	d14c      	bne.n	8002e10 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <executecommand+0x6e4>)
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d82:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002ef0 <executecommand+0x6e8>
 8002d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d8a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002ef4 <executecommand+0x6ec>
 8002d8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d92:	4b56      	ldr	r3, [pc, #344]	@ (8002eec <executecommand+0x6e4>)
 8002d94:	789b      	ldrb	r3, [r3, #2]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002ef0 <executecommand+0x6e8>
 8002da2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002da6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002daa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db2:	4b4e      	ldr	r3, [pc, #312]	@ (8002eec <executecommand+0x6e4>)
 8002db4:	78db      	ldrb	r3, [r3, #3]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbe:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002ef0 <executecommand+0x6e8>
 8002dc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dca:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <executecommand+0x6e4>)
 8002dcc:	791b      	ldrb	r3, [r3, #4]
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd6:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002ef0 <executecommand+0x6e8>
 8002dda:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dde:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002de2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <executecommand+0x6e4>)
 8002dec:	795b      	ldrb	r3, [r3, #5]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002ef0 <executecommand+0x6e8>
 8002dfa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dfe:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002ef4 <executecommand+0x6ec>
 8002e02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f08 <executecommand+0x700>)
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b62      	cmp	r3, #98	@ 0x62
 8002e16:	d14f      	bne.n	8002eb8 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002e18:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <executecommand+0x6e4>)
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e24:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002ef0 <executecommand+0x6e8>
 8002e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e2c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002ef4 <executecommand+0x6ec>
 8002e30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e34:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <executecommand+0x6e4>)
 8002e36:	789b      	ldrb	r3, [r3, #2]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002ef0 <executecommand+0x6e8>
 8002e44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e48:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e54:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <executecommand+0x6e4>)
 8002e56:	78db      	ldrb	r3, [r3, #3]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e60:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002ef0 <executecommand+0x6e8>
 8002e64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <executecommand+0x6e4>)
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e78:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002ef0 <executecommand+0x6e8>
 8002e7c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e80:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <executecommand+0x6e4>)
 8002e8e:	795b      	ldrb	r3, [r3, #5]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e98:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002ef0 <executecommand+0x6e8>
 8002e9c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ea0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002ef4 <executecommand+0x6ec>
 8002ea4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <executecommand+0x704>)
 8002eae:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002eb2:	4b17      	ldr	r3, [pc, #92]	@ (8002f10 <executecommand+0x708>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b63      	cmp	r3, #99	@ 0x63
 8002ebe:	d166      	bne.n	8002f8e <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <executecommand+0x6e4>)
 8002ec2:	785b      	ldrb	r3, [r3, #1]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ef0 <executecommand+0x6e8>
 8002ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ed4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002efc <executecommand+0x6f4>
 8002ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002edc:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <executecommand+0x6e4>)
 8002ede:	789b      	ldrb	r3, [r3, #2]
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee8:	e018      	b.n	8002f1c <executecommand+0x714>
 8002eea:	bf00      	nop
 8002eec:	000041c8 	.word	0x000041c8
 8002ef0:	42400000 	.word	0x42400000
 8002ef4:	42c80000 	.word	0x42c80000
 8002ef8:	0000416c 	.word	0x0000416c
 8002efc:	447a0000 	.word	0x447a0000
 8002f00:	00004084 	.word	0x00004084
 8002f04:	00004086 	.word	0x00004086
 8002f08:	000040f8 	.word	0x000040f8
 8002f0c:	00004104 	.word	0x00004104
 8002f10:	000040c8 	.word	0x000040c8
 8002f14:	42400000 	.word	0x42400000
 8002f18:	42c80000 	.word	0x42c80000
 8002f1c:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002f14 <executecommand+0x70c>
 8002f20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f24:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002f18 <executecommand+0x710>
 8002f28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f30:	4bd5      	ldr	r3, [pc, #852]	@ (8003288 <executecommand+0xa80>)
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3c:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 800328c <executecommand+0xa84>
 8002f40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f44:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f50:	4bcd      	ldr	r3, [pc, #820]	@ (8003288 <executecommand+0xa80>)
 8002f52:	791b      	ldrb	r3, [r3, #4]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 800328c <executecommand+0xa84>
 8002f60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f68:	4bc7      	ldr	r3, [pc, #796]	@ (8003288 <executecommand+0xa80>)
 8002f6a:	795b      	ldrb	r3, [r3, #5]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 800328c <executecommand+0xa84>
 8002f78:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f7c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	4bc1      	ldr	r3, [pc, #772]	@ (8003290 <executecommand+0xa88>)
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b65      	cmp	r3, #101	@ 0x65
 8002f94:	d14c      	bne.n	8003030 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f96:	4bbc      	ldr	r3, [pc, #752]	@ (8003288 <executecommand+0xa80>)
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800328c <executecommand+0xa84>
 8002fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002faa:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003294 <executecommand+0xa8c>
 8002fae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fb2:	4bb5      	ldr	r3, [pc, #724]	@ (8003288 <executecommand+0xa80>)
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 800328c <executecommand+0xa84>
 8002fc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fc6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd2:	4bad      	ldr	r3, [pc, #692]	@ (8003288 <executecommand+0xa80>)
 8002fd4:	78db      	ldrb	r3, [r3, #3]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6aab 	vldr	s13, [pc, #684]	@ 800328c <executecommand+0xa84>
 8002fe2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fea:	4ba7      	ldr	r3, [pc, #668]	@ (8003288 <executecommand+0xa80>)
 8002fec:	791b      	ldrb	r3, [r3, #4]
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff6:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 800328c <executecommand+0xa84>
 8002ffa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ffe:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003002:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800300a:	4b9f      	ldr	r3, [pc, #636]	@ (8003288 <executecommand+0xa80>)
 800300c:	795b      	ldrb	r3, [r3, #5]
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003016:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 800328c <executecommand+0xa84>
 800301a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800301e:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 8003294 <executecommand+0xa8c>
 8003022:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	4b9b      	ldr	r3, [pc, #620]	@ (8003298 <executecommand+0xa90>)
 800302c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b67      	cmp	r3, #103	@ 0x67
 8003036:	d14f      	bne.n	80030d8 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003038:	4b93      	ldr	r3, [pc, #588]	@ (8003288 <executecommand+0xa80>)
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003044:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800328c <executecommand+0xa84>
 8003048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800304c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003294 <executecommand+0xa8c>
 8003050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003054:	4b8c      	ldr	r3, [pc, #560]	@ (8003288 <executecommand+0xa80>)
 8003056:	789b      	ldrb	r3, [r3, #2]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003060:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 800328c <executecommand+0xa84>
 8003064:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003068:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800306c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003074:	4b84      	ldr	r3, [pc, #528]	@ (8003288 <executecommand+0xa80>)
 8003076:	78db      	ldrb	r3, [r3, #3]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003080:	eddf 6a82 	vldr	s13, [pc, #520]	@ 800328c <executecommand+0xa84>
 8003084:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800308c:	4b7e      	ldr	r3, [pc, #504]	@ (8003288 <executecommand+0xa80>)
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003098:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 800328c <executecommand+0xa84>
 800309c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ac:	4b76      	ldr	r3, [pc, #472]	@ (8003288 <executecommand+0xa80>)
 80030ae:	795b      	ldrb	r3, [r3, #5]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800328c <executecommand+0xa84>
 80030bc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030c0:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 8003294 <executecommand+0xa8c>
 80030c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	4b73      	ldr	r3, [pc, #460]	@ (800329c <executecommand+0xa94>)
 80030ce:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 80030d2:	4b73      	ldr	r3, [pc, #460]	@ (80032a0 <executecommand+0xa98>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b68      	cmp	r3, #104	@ 0x68
 80030de:	d14c      	bne.n	800317a <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <executecommand+0xa80>)
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ec:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800328c <executecommand+0xa84>
 80030f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f4:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80032a4 <executecommand+0xa9c>
 80030f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030fc:	4b62      	ldr	r3, [pc, #392]	@ (8003288 <executecommand+0xa80>)
 80030fe:	789b      	ldrb	r3, [r3, #2]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800328c <executecommand+0xa84>
 800310c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003110:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003294 <executecommand+0xa8c>
 8003114:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311c:	4b5a      	ldr	r3, [pc, #360]	@ (8003288 <executecommand+0xa80>)
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003128:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800328c <executecommand+0xa84>
 800312c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003130:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313c:	4b52      	ldr	r3, [pc, #328]	@ (8003288 <executecommand+0xa80>)
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800328c <executecommand+0xa84>
 800314c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003154:	4b4c      	ldr	r3, [pc, #304]	@ (8003288 <executecommand+0xa80>)
 8003156:	795b      	ldrb	r3, [r3, #5]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800328c <executecommand+0xa84>
 8003164:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003168:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800316c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	4b4c      	ldr	r3, [pc, #304]	@ (80032a8 <executecommand+0xaa0>)
 8003176:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b6a      	cmp	r3, #106	@ 0x6a
 8003180:	d14c      	bne.n	800321c <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003182:	4b41      	ldr	r3, [pc, #260]	@ (8003288 <executecommand+0xa80>)
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800328c <executecommand+0xa84>
 8003192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003196:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003294 <executecommand+0xa8c>
 800319a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800319e:	4b3a      	ldr	r3, [pc, #232]	@ (8003288 <executecommand+0xa80>)
 80031a0:	789b      	ldrb	r3, [r3, #2]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800328c <executecommand+0xa84>
 80031ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031b2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031be:	4b32      	ldr	r3, [pc, #200]	@ (8003288 <executecommand+0xa80>)
 80031c0:	78db      	ldrb	r3, [r3, #3]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800328c <executecommand+0xa84>
 80031ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003288 <executecommand+0xa80>)
 80031d8:	791b      	ldrb	r3, [r3, #4]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800328c <executecommand+0xa84>
 80031e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ea:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <executecommand+0xa80>)
 80031f8:	795b      	ldrb	r3, [r3, #5]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800328c <executecommand+0xa84>
 8003206:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8003294 <executecommand+0xa8c>
 800320e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <executecommand+0xaa4>)
 8003218:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b6b      	cmp	r3, #107	@ 0x6b
 8003222:	d167      	bne.n	80032f4 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003224:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <executecommand+0xa80>)
 8003226:	785b      	ldrb	r3, [r3, #1]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003230:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800328c <executecommand+0xa84>
 8003234:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003238:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003294 <executecommand+0xa8c>
 800323c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <executecommand+0xa80>)
 8003242:	789b      	ldrb	r3, [r3, #2]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800328c <executecommand+0xa84>
 8003250:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003254:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800325c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <executecommand+0xa80>)
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800328c <executecommand+0xa84>
 8003270:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <executecommand+0xa80>)
 800327a:	791b      	ldrb	r3, [r3, #4]
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003284:	e016      	b.n	80032b4 <executecommand+0xaac>
 8003286:	bf00      	nop
 8003288:	000041c8 	.word	0x000041c8
 800328c:	42400000 	.word	0x42400000
 8003290:	00004110 	.word	0x00004110
 8003294:	42c80000 	.word	0x42c80000
 8003298:	00004158 	.word	0x00004158
 800329c:	00004164 	.word	0x00004164
 80032a0:	000040d4 	.word	0x000040d4
 80032a4:	447a0000 	.word	0x447a0000
 80032a8:	00004170 	.word	0x00004170
 80032ac:	000040fc 	.word	0x000040fc
 80032b0:	42400000 	.word	0x42400000
 80032b4:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80032b0 <executecommand+0xaa8>
 80032b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032bc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c8:	4bba      	ldr	r3, [pc, #744]	@ (80035b4 <executecommand+0xdac>)
 80032ca:	795b      	ldrb	r3, [r3, #5]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d4:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80035b8 <executecommand+0xdb0>
 80032d8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032dc:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80035bc <executecommand+0xdb4>
 80032e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e8:	4bb5      	ldr	r3, [pc, #724]	@ (80035c0 <executecommand+0xdb8>)
 80032ea:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 80032ee:	4bb5      	ldr	r3, [pc, #724]	@ (80035c4 <executecommand+0xdbc>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b6c      	cmp	r3, #108	@ 0x6c
 80032fa:	d14c      	bne.n	8003396 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80032fc:	4bad      	ldr	r3, [pc, #692]	@ (80035b4 <executecommand+0xdac>)
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003308:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80035b8 <executecommand+0xdb0>
 800330c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003310:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035c8 <executecommand+0xdc0>
 8003314:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003318:	4ba6      	ldr	r3, [pc, #664]	@ (80035b4 <executecommand+0xdac>)
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80035b8 <executecommand+0xdb0>
 8003328:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800332c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80035bc <executecommand+0xdb4>
 8003330:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003338:	4b9e      	ldr	r3, [pc, #632]	@ (80035b4 <executecommand+0xdac>)
 800333a:	78db      	ldrb	r3, [r3, #3]
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003344:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80035b8 <executecommand+0xdb0>
 8003348:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800334c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003358:	4b96      	ldr	r3, [pc, #600]	@ (80035b4 <executecommand+0xdac>)
 800335a:	791b      	ldrb	r3, [r3, #4]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003364:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80035b8 <executecommand+0xdb0>
 8003368:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800336c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003370:	4b90      	ldr	r3, [pc, #576]	@ (80035b4 <executecommand+0xdac>)
 8003372:	795b      	ldrb	r3, [r3, #5]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80035b8 <executecommand+0xdb0>
 8003380:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003384:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003388:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800338c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003390:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <executecommand+0xdc4>)
 8003392:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b6d      	cmp	r3, #109	@ 0x6d
 800339c:	d14c      	bne.n	8003438 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800339e:	4b85      	ldr	r3, [pc, #532]	@ (80035b4 <executecommand+0xdac>)
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80035b8 <executecommand+0xdb0>
 80033ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033b2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80035bc <executecommand+0xdb4>
 80033b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033ba:	4b7e      	ldr	r3, [pc, #504]	@ (80035b4 <executecommand+0xdac>)
 80033bc:	789b      	ldrb	r3, [r3, #2]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80035b8 <executecommand+0xdb0>
 80033ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033ce:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033da:	4b76      	ldr	r3, [pc, #472]	@ (80035b4 <executecommand+0xdac>)
 80033dc:	78db      	ldrb	r3, [r3, #3]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80035b8 <executecommand+0xdb0>
 80033ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f2:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <executecommand+0xdac>)
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80035b8 <executecommand+0xdb0>
 8003402:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003406:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800340a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800340e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003412:	4b68      	ldr	r3, [pc, #416]	@ (80035b4 <executecommand+0xdac>)
 8003414:	795b      	ldrb	r3, [r3, #5]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80035b8 <executecommand+0xdb0>
 8003422:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003426:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80035bc <executecommand+0xdb4>
 800342a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	4b67      	ldr	r3, [pc, #412]	@ (80035d0 <executecommand+0xdc8>)
 8003434:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b6e      	cmp	r3, #110	@ 0x6e
 800343e:	d14f      	bne.n	80034e0 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003440:	4b5c      	ldr	r3, [pc, #368]	@ (80035b4 <executecommand+0xdac>)
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80035b8 <executecommand+0xdb0>
 8003450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003454:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80035bc <executecommand+0xdb4>
 8003458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800345c:	4b55      	ldr	r3, [pc, #340]	@ (80035b4 <executecommand+0xdac>)
 800345e:	789b      	ldrb	r3, [r3, #2]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003468:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80035b8 <executecommand+0xdb0>
 800346c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003470:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003474:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800347c:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <executecommand+0xdac>)
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003488:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80035b8 <executecommand+0xdb0>
 800348c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003494:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <executecommand+0xdac>)
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80035b8 <executecommand+0xdb0>
 80034a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034a8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b4:	4b3f      	ldr	r3, [pc, #252]	@ (80035b4 <executecommand+0xdac>)
 80034b6:	795b      	ldrb	r3, [r3, #5]
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80035b8 <executecommand+0xdb0>
 80034c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034c8:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80035bc <executecommand+0xdb4>
 80034cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d4:	4b3f      	ldr	r3, [pc, #252]	@ (80035d4 <executecommand+0xdcc>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 80034da:	4b3f      	ldr	r3, [pc, #252]	@ (80035d8 <executecommand+0xdd0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b6f      	cmp	r3, #111	@ 0x6f
 80034e6:	d14c      	bne.n	8003582 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80034e8:	4b32      	ldr	r3, [pc, #200]	@ (80035b4 <executecommand+0xdac>)
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035b8 <executecommand+0xdb0>
 80034f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034fc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80035c8 <executecommand+0xdc0>
 8003500:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003504:	4b2b      	ldr	r3, [pc, #172]	@ (80035b4 <executecommand+0xdac>)
 8003506:	789b      	ldrb	r3, [r3, #2]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80035b8 <executecommand+0xdb0>
 8003514:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003518:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80035bc <executecommand+0xdb4>
 800351c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003524:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <executecommand+0xdac>)
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80035b8 <executecommand+0xdb0>
 8003534:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003538:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800353c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <executecommand+0xdac>)
 8003546:	791b      	ldrb	r3, [r3, #4]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003550:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80035b8 <executecommand+0xdb0>
 8003554:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355c:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <executecommand+0xdac>)
 800355e:	795b      	ldrb	r3, [r3, #5]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003568:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80035b8 <executecommand+0xdb0>
 800356c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003570:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003574:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	4b17      	ldr	r3, [pc, #92]	@ (80035dc <executecommand+0xdd4>)
 800357e:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b72      	cmp	r3, #114	@ 0x72
 8003588:	d101      	bne.n	800358e <executecommand+0xd86>
		NVIC_SystemReset();
 800358a:	f7ff f8d9 	bl	8002740 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e007      	b.n	80035a4 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 8003594:	4a07      	ldr	r2, [pc, #28]	@ (80035b4 <executecommand+0xdac>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3301      	adds	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b0e      	cmp	r3, #14
 80035a8:	ddf4      	ble.n	8003594 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	000041c8 	.word	0x000041c8
 80035b8:	42400000 	.word	0x42400000
 80035bc:	42c80000 	.word	0x42c80000
 80035c0:	00004108 	.word	0x00004108
 80035c4:	000040cc 	.word	0x000040cc
 80035c8:	447a0000 	.word	0x447a0000
 80035cc:	00004114 	.word	0x00004114
 80035d0:	0000415c 	.word	0x0000415c
 80035d4:	00004168 	.word	0x00004168
 80035d8:	000040d8 	.word	0x000040d8
 80035dc:	00004174 	.word	0x00004174

080035e0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	@ 0x28
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2224      	movs	r2, #36	@ 0x24
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f01a fda9 	bl	801e144 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80035f2:	4b2e      	ldr	r3, [pc, #184]	@ (80036ac <MX_ADC2_Init+0xcc>)
 80035f4:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <MX_ADC2_Init+0xd0>)
 80035f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035f8:	4b2c      	ldr	r3, [pc, #176]	@ (80036ac <MX_ADC2_Init+0xcc>)
 80035fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003600:	4b2a      	ldr	r3, [pc, #168]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003602:	2208      	movs	r2, #8
 8003604:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003606:	4b29      	ldr	r3, [pc, #164]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800360c:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <MX_ADC2_Init+0xcc>)
 800360e:	2204      	movs	r2, #4
 8003610:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003612:	4b26      	ldr	r3, [pc, #152]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003614:	2200      	movs	r2, #0
 8003616:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003618:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <MX_ADC2_Init+0xcc>)
 800361a:	2200      	movs	r2, #0
 800361c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003620:	2201      	movs	r2, #1
 8003622:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003624:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800362c:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <MX_ADC2_Init+0xcc>)
 800362e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003634:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <MX_ADC2_Init+0xcc>)
 800363e:	2203      	movs	r2, #3
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003642:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003644:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003648:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800364a:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <MX_ADC2_Init+0xcc>)
 800364c:	2200      	movs	r2, #0
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003650:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003658:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_ADC2_Init+0xcc>)
 800365a:	2201      	movs	r2, #1
 800365c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800365e:	4813      	ldr	r0, [pc, #76]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003660:	f006 faee 	bl	8009c40 <HAL_ADC_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800366a:	f004 fc35 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <MX_ADC2_Init+0xd4>)
 8003670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003672:	2306      	movs	r3, #6
 8003674:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8003676:	2307      	movs	r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800367a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800367e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003680:	2304      	movs	r3, #4
 8003682:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4806      	ldr	r0, [pc, #24]	@ (80036ac <MX_ADC2_Init+0xcc>)
 8003694:	f007 f81a 	bl	800a6cc <HAL_ADC_ConfigChannel>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 800369e:	f004 fc1b 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	3728      	adds	r7, #40	@ 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	240000ac 	.word	0x240000ac
 80036b0:	40022100 	.word	0x40022100
 80036b4:	19200040 	.word	0x19200040

080036b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	@ 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <HAL_ADC_MspInit+0xf0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d162      	bne.n	80037a0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036da:	4b34      	ldr	r3, [pc, #208]	@ (80037ac <HAL_ADC_MspInit+0xf4>)
 80036dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036e0:	4a32      	ldr	r2, [pc, #200]	@ (80037ac <HAL_ADC_MspInit+0xf4>)
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036ea:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_ADC_MspInit+0xf4>)
 80036ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036f8:	4b2c      	ldr	r3, [pc, #176]	@ (80037ac <HAL_ADC_MspInit+0xf4>)
 80036fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036fe:	4a2b      	ldr	r2, [pc, #172]	@ (80037ac <HAL_ADC_MspInit+0xf4>)
 8003700:	f043 0320 	orr.w	r3, r3, #32
 8003704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003708:	4b28      	ldr	r3, [pc, #160]	@ (80037ac <HAL_ADC_MspInit+0xf4>)
 800370a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003716:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800371c:	2303      	movs	r3, #3
 800371e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4619      	mov	r1, r3
 800372a:	4821      	ldr	r0, [pc, #132]	@ (80037b0 <HAL_ADC_MspInit+0xf8>)
 800372c:	f00a feba 	bl	800e4a4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003730:	4b20      	ldr	r3, [pc, #128]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003732:	4a21      	ldr	r2, [pc, #132]	@ (80037b8 <HAL_ADC_MspInit+0x100>)
 8003734:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003736:	4b1f      	ldr	r3, [pc, #124]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003738:	220a      	movs	r2, #10
 800373a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800373c:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003742:	4b1c      	ldr	r3, [pc, #112]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003744:	2200      	movs	r2, #0
 8003746:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 800374a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800374e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003750:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003752:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003756:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003758:	4b16      	ldr	r3, [pc, #88]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 800375a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800375e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003760:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003762:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003766:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003768:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 800376a:	2200      	movs	r2, #0
 800376c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376e:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003770:	2200      	movs	r2, #0
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003774:	480f      	ldr	r0, [pc, #60]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003776:	f008 f843 	bl	800b800 <HAL_DMA_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003780:	f004 fbaa 	bl	8007ed8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0b      	ldr	r2, [pc, #44]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 8003788:	659a      	str	r2, [r3, #88]	@ 0x58
 800378a:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_ADC_MspInit+0xfc>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003790:	2200      	movs	r2, #0
 8003792:	2100      	movs	r1, #0
 8003794:	2012      	movs	r0, #18
 8003796:	f007 ff86 	bl	800b6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800379a:	2012      	movs	r0, #18
 800379c:	f007 ff9d 	bl	800b6da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80037a0:	bf00      	nop
 80037a2:	3728      	adds	r7, #40	@ 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40022100 	.word	0x40022100
 80037ac:	58024400 	.word	0x58024400
 80037b0:	58021400 	.word	0x58021400
 80037b4:	2400011c 	.word	0x2400011c
 80037b8:	40020410 	.word	0x40020410

080037bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037c2:	4b19      	ldr	r3, [pc, #100]	@ (8003828 <MX_DMA_Init+0x6c>)
 80037c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037c8:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <MX_DMA_Init+0x6c>)
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037d2:	4b15      	ldr	r3, [pc, #84]	@ (8003828 <MX_DMA_Init+0x6c>)
 80037d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <MX_DMA_Init+0x6c>)
 80037e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037e6:	4a10      	ldr	r2, [pc, #64]	@ (8003828 <MX_DMA_Init+0x6c>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <MX_DMA_Init+0x6c>)
 80037f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037fe:	2200      	movs	r2, #0
 8003800:	2100      	movs	r1, #0
 8003802:	200b      	movs	r0, #11
 8003804:	f007 ff4f 	bl	800b6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003808:	200b      	movs	r0, #11
 800380a:	f007 ff66 	bl	800b6da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	2038      	movs	r0, #56	@ 0x38
 8003814:	f007 ff47 	bl	800b6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003818:	2038      	movs	r0, #56	@ 0x38
 800381a:	f007 ff5e 	bl	800b6da <HAL_NVIC_EnableIRQ>

}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	58024400 	.word	0x58024400
 800382c:	00000000 	.word	0x00000000

08003830 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	@ 0x38
 8003834:	af00      	add	r7, sp, #0
 8003836:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 800384c:	4b88      	ldr	r3, [pc, #544]	@ (8003a70 <Thrust_filter+0x240>)
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003856:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 800385a:	4b86      	ldr	r3, [pc, #536]	@ (8003a74 <Thrust_filter+0x244>)
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003864:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003868:	ed97 7b08 	vldr	d7, [r7, #32]
 800386c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003870:	eeb0 0a67 	vmov.f32	s0, s15
 8003874:	f003 fe64 	bl	8007540 <WartoscBezwgledna>
 8003878:	eef0 7a40 	vmov.f32	s15, s0
 800387c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003880:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 8003884:	ed97 7b06 	vldr	d7, [r7, #24]
 8003888:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	f003 fe56 	bl	8007540 <WartoscBezwgledna>
 8003894:	eef0 7a40 	vmov.f32	s15, s0
 8003898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800389c:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80038a0:	ed97 6b08 	vldr	d6, [r7, #32]
 80038a4:	ed97 7b06 	vldr	d7, [r7, #24]
 80038a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038ac:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038b4:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80038b8:	eeb0 0b47 	vmov.f64	d0, d7
 80038bc:	f01a fdd0 	bl	801e460 <pow>
 80038c0:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 80038c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a78 <Thrust_filter+0x248>)
 80038c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ca:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038ce:	4293      	cmp	r3, r2
 80038d0:	dd03      	ble.n	80038da <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 80038d2:	4b69      	ldr	r3, [pc, #420]	@ (8003a78 <Thrust_filter+0x248>)
 80038d4:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038d8:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 80038da:	4b67      	ldr	r3, [pc, #412]	@ (8003a78 <Thrust_filter+0x248>)
 80038dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b66      	ldr	r3, [pc, #408]	@ (8003a7c <Thrust_filter+0x24c>)
 80038e4:	885b      	ldrh	r3, [r3, #2]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80038ec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da13      	bge.n	800391c <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038f4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003900:	eeb0 0a67 	vmov.f32	s0, s15
 8003904:	f003 fe1c 	bl	8007540 <WartoscBezwgledna>
 8003908:	eef0 7a40 	vmov.f32	s15, s0
 800390c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003910:	ee17 3a90 	vmov	r3, s15
 8003914:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 800391c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8097 	beq.w	8003a54 <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 8003926:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003932:	eeb0 0b47 	vmov.f64	d0, d7
 8003936:	f01a fc3b 	bl	801e1b0 <sqrt>
 800393a:	eeb0 7b40 	vmov.f64	d7, d0
 800393e:	eeb0 0b47 	vmov.f64	d0, d7
 8003942:	f01a fc35 	bl	801e1b0 <sqrt>
 8003946:	eeb0 7b40 	vmov.f64	d7, d0
 800394a:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8003a60 <Thrust_filter+0x230>
 800394e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003952:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 8003956:	ed97 7b00 	vldr	d7, [r7]
 800395a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8003a68 <Thrust_filter+0x238>
 800395e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003962:	ed97 7b02 	vldr	d7, [r7, #8]
 8003966:	ee26 5b07 	vmul.f64	d5, d6, d7
 800396a:	ed97 6b04 	vldr	d6, [r7, #16]
 800396e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003972:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 8003976:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 800397e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003982:	eeb1 7b47 	vneg.f64	d7, d7
 8003986:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 800398a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800398e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003992:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d513      	bpl.n	80039c4 <Thrust_filter+0x194>
 800399c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039a0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ac:	dd0a      	ble.n	80039c4 <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 80039ae:	4b34      	ldr	r3, [pc, #208]	@ (8003a80 <Thrust_filter+0x250>)
 80039b0:	ed93 6b00 	vldr	d6, [r3]
 80039b4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039bc:	4b30      	ldr	r3, [pc, #192]	@ (8003a80 <Thrust_filter+0x250>)
 80039be:	ed83 7b00 	vstr	d7, [r3]
 80039c2:	e010      	b.n	80039e6 <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 80039c4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <Thrust_filter+0x24c>)
 80039c6:	885b      	ldrh	r3, [r3, #2]
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039d0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039dc:	ee17 3a90 	vmov	r3, s15
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <Thrust_filter+0x24c>)
 80039e4:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 80039e6:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <Thrust_filter+0x250>)
 80039e8:	ed93 7b00 	vldr	d7, [r3]
 80039ec:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f8:	da09      	bge.n	8003a0e <Thrust_filter+0x1de>
 80039fa:	4b21      	ldr	r3, [pc, #132]	@ (8003a80 <Thrust_filter+0x250>)
 80039fc:	ed93 7b00 	vldr	d7, [r3]
 8003a00:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003a04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	d818      	bhi.n	8003a40 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <Thrust_filter+0x24c>)
 8003a10:	885b      	ldrh	r3, [r3, #2]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <Thrust_filter+0x250>)
 8003a1c:	ed93 7b00 	vldr	d7, [r3]
 8003a20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a28:	ee17 3a90 	vmov	r3, s15
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <Thrust_filter+0x24c>)
 8003a30:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003a32:	4913      	ldr	r1, [pc, #76]	@ (8003a80 <Thrust_filter+0x250>)
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003a40:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <Thrust_filter+0x24c>)
 8003a42:	885b      	ldrh	r3, [r3, #2]
 8003a44:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d903      	bls.n	8003a54 <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <Thrust_filter+0x24c>)
 8003a4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a52:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a54:	bf00      	nop
 8003a56:	3738      	adds	r7, #56	@ 0x38
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	f3af 8000 	nop.w
 8003a60:	00000000 	.word	0x00000000
 8003a64:	409f4000 	.word	0x409f4000
 8003a68:	30553261 	.word	0x30553261
 8003a6c:	3f33a92a 	.word	0x3f33a92a
 8003a70:	00004094 	.word	0x00004094
 8003a74:	00004098 	.word	0x00004098
 8003a78:	00004068 	.word	0x00004068
 8003a7c:	00000184 	.word	0x00000184
 8003a80:	00004070 	.word	0x00004070

08003a84 <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	f200 8380 	bhi.w	800419c <PID_cal+0x718>
 8003a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <PID_cal+0x20>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003bd7 	.word	0x08003bd7
 8003aac:	08003d11 	.word	0x08003d11
 8003ab0:	08003e2b 	.word	0x08003e2b
 8003ab4:	08003f69 	.word	0x08003f69
 8003ab8:	08004083 	.word	0x08004083
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	ed93 7a00 	vldr	s14, [r3]
 8003ac2:	4b8b      	ldr	r3, [pc, #556]	@ (8003cf0 <PID_cal+0x26c>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	ed93 7a00 	vldr	s14, [r3]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3304      	adds	r3, #4
 8003adc:	edd3 6a00 	vldr	s13, [r3]
 8003ae0:	4b84      	ldr	r3, [pc, #528]	@ (8003cf4 <PID_cal+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003af0:	4b81      	ldr	r3, [pc, #516]	@ (8003cf8 <PID_cal+0x274>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3308      	adds	r3, #8
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	4b78      	ldr	r3, [pc, #480]	@ (8003cf0 <PID_cal+0x26c>)
 8003b0e:	edd3 6a00 	vldr	s13, [r3]
 8003b12:	4b7a      	ldr	r3, [pc, #488]	@ (8003cfc <PID_cal+0x278>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003b28:	4b75      	ldr	r3, [pc, #468]	@ (8003d00 <PID_cal+0x27c>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d045      	beq.n	8003bbc <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	330c      	adds	r3, #12
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	4b71      	ldr	r3, [pc, #452]	@ (8003d00 <PID_cal+0x27c>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b44:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf8 <PID_cal+0x274>)
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b4e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b52:	4b6b      	ldr	r3, [pc, #428]	@ (8003d00 <PID_cal+0x27c>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b5e:	4b66      	ldr	r3, [pc, #408]	@ (8003cf8 <PID_cal+0x274>)
 8003b60:	edd3 7a00 	vldr	s15, [r3]
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3310      	adds	r3, #16
 8003b78:	edd3 6a00 	vldr	s13, [r3]
 8003b7c:	4b60      	ldr	r3, [pc, #384]	@ (8003d00 <PID_cal+0x27c>)
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003b88:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf8 <PID_cal+0x274>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b92:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003b96:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003b9a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003b9e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bae:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	ed93 7a00 	vldr	s14, [r3]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003bd4:	e2e3      	b.n	800419e <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	4b49      	ldr	r3, [pc, #292]	@ (8003d04 <PID_cal+0x280>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	ed93 7a00 	vldr	s14, [r3]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	edd3 6a00 	vldr	s13, [r3]
 8003bfa:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <PID_cal+0x284>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <PID_cal+0x274>)
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3308      	adds	r3, #8
 8003c22:	ed93 7a00 	vldr	s14, [r3]
 8003c26:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <PID_cal+0x280>)
 8003c28:	edd3 6a00 	vldr	s13, [r3]
 8003c2c:	4b37      	ldr	r3, [pc, #220]	@ (8003d0c <PID_cal+0x288>)
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003c42:	4b2f      	ldr	r3, [pc, #188]	@ (8003d00 <PID_cal+0x27c>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d045      	beq.n	8003cd6 <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	ed93 7a00 	vldr	s14, [r3]
 8003c52:	4b2b      	ldr	r3, [pc, #172]	@ (8003d00 <PID_cal+0x27c>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c5e:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <PID_cal+0x274>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c68:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c6c:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <PID_cal+0x27c>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <PID_cal+0x274>)
 8003c7a:	edd3 7a00 	vldr	s15, [r3]
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3310      	adds	r3, #16
 8003c92:	edd3 6a00 	vldr	s13, [r3]
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <PID_cal+0x27c>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <PID_cal+0x274>)
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003cac:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003cb0:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003cb4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003cb8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc8:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3310      	adds	r3, #16
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	68d2      	ldr	r2, [r2, #12]
 8003cd4:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	ed93 7a00 	vldr	s14, [r3]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003cee:	e256      	b.n	800419e <PID_cal+0x71a>
 8003cf0:	00004094 	.word	0x00004094
 8003cf4:	000040c4 	.word	0x000040c4
 8003cf8:	0801ec04 	.word	0x0801ec04
 8003cfc:	000040ac 	.word	0x000040ac
 8003d00:	00004086 	.word	0x00004086
 8003d04:	00004098 	.word	0x00004098
 8003d08:	000040c8 	.word	0x000040c8
 8003d0c:	000040b0 	.word	0x000040b0

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	4b8b      	ldr	r3, [pc, #556]	@ (8003f44 <PID_cal+0x4c0>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	ed93 7a00 	vldr	s14, [r3]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	edd3 6a00 	vldr	s13, [r3]
 8003d34:	4b84      	ldr	r3, [pc, #528]	@ (8003f48 <PID_cal+0x4c4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d44:	4b81      	ldr	r3, [pc, #516]	@ (8003f4c <PID_cal+0x4c8>)
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	ed93 7a00 	vldr	s14, [r3]
 8003d60:	4b78      	ldr	r3, [pc, #480]	@ (8003f44 <PID_cal+0x4c0>)
 8003d62:	edd3 6a00 	vldr	s13, [r3]
 8003d66:	4b7a      	ldr	r3, [pc, #488]	@ (8003f50 <PID_cal+0x4cc>)
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	330c      	adds	r3, #12
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003d7c:	4b75      	ldr	r3, [pc, #468]	@ (8003f54 <PID_cal+0x4d0>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d045      	beq.n	8003e10 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	330c      	adds	r3, #12
 8003d88:	ed93 7a00 	vldr	s14, [r3]
 8003d8c:	4b71      	ldr	r3, [pc, #452]	@ (8003f54 <PID_cal+0x4d0>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d98:	4b6c      	ldr	r3, [pc, #432]	@ (8003f4c <PID_cal+0x4c8>)
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003da6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f54 <PID_cal+0x4d0>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db2:	4b66      	ldr	r3, [pc, #408]	@ (8003f4c <PID_cal+0x4c8>)
 8003db4:	edd3 7a00 	vldr	s15, [r3]
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3310      	adds	r3, #16
 8003dcc:	edd3 6a00 	vldr	s13, [r3]
 8003dd0:	4b60      	ldr	r3, [pc, #384]	@ (8003f54 <PID_cal+0x4d0>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8003f4c <PID_cal+0x4c8>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003de6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003dea:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003dee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003df2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e02:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3310      	adds	r3, #16
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	68d2      	ldr	r2, [r2, #12]
 8003e0e:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	ed93 7a00 	vldr	s14, [r3]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003e28:	e1b9      	b.n	800419e <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	ed93 7a00 	vldr	s14, [r3]
 8003e30:	4b49      	ldr	r3, [pc, #292]	@ (8003f58 <PID_cal+0x4d4>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	ed93 7a00 	vldr	s14, [r3]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	edd3 6a00 	vldr	s13, [r3]
 8003e4e:	4b43      	ldr	r3, [pc, #268]	@ (8003f5c <PID_cal+0x4d8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <PID_cal+0x4c8>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3308      	adds	r3, #8
 8003e76:	ed93 7a00 	vldr	s14, [r3]
 8003e7a:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <PID_cal+0x4d4>)
 8003e7c:	edd3 6a00 	vldr	s13, [r3]
 8003e80:	4b37      	ldr	r3, [pc, #220]	@ (8003f60 <PID_cal+0x4dc>)
 8003e82:	edd3 7a00 	vldr	s15, [r3]
 8003e86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003e96:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <PID_cal+0x4e0>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d045      	beq.n	8003f2a <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	ed93 7a00 	vldr	s14, [r3]
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f64 <PID_cal+0x4e0>)
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eb2:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <PID_cal+0x4c8>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ebc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ec0:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <PID_cal+0x4e0>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <PID_cal+0x4c8>)
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	edd3 6a00 	vldr	s13, [r3]
 8003eea:	4b1e      	ldr	r3, [pc, #120]	@ (8003f64 <PID_cal+0x4e0>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <PID_cal+0x4c8>)
 8003ef8:	edd3 7a00 	vldr	s15, [r3]
 8003efc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f00:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003f04:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003f08:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003f0c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	330c      	adds	r3, #12
 8003f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f1c:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3310      	adds	r3, #16
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	68d2      	ldr	r2, [r2, #12]
 8003f28:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	ed93 7a00 	vldr	s14, [r3]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	330c      	adds	r3, #12
 8003f34:	edd3 7a00 	vldr	s15, [r3]
 8003f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003f42:	e12c      	b.n	800419e <PID_cal+0x71a>
 8003f44:	0000409c 	.word	0x0000409c
 8003f48:	000040cc 	.word	0x000040cc
 8003f4c:	0801ec04 	.word	0x0801ec04
 8003f50:	000040b4 	.word	0x000040b4
 8003f54:	00004086 	.word	0x00004086
 8003f58:	000040a0 	.word	0x000040a0
 8003f5c:	000040d0 	.word	0x000040d0
 8003f60:	000040b8 	.word	0x000040b8
 8003f64:	00004084 	.word	0x00004084

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	ed93 7a00 	vldr	s14, [r3]
 8003f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80041ac <PID_cal+0x728>)
 8003f70:	edd3 7a00 	vldr	s15, [r3]
 8003f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	ed93 7a00 	vldr	s14, [r3]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3304      	adds	r3, #4
 8003f88:	edd3 6a00 	vldr	s13, [r3]
 8003f8c:	4b88      	ldr	r3, [pc, #544]	@ (80041b0 <PID_cal+0x72c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f9c:	4b85      	ldr	r3, [pc, #532]	@ (80041b4 <PID_cal+0x730>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80041ac <PID_cal+0x728>)
 8003fba:	edd3 6a00 	vldr	s13, [r3]
 8003fbe:	4b7e      	ldr	r3, [pc, #504]	@ (80041b8 <PID_cal+0x734>)
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd0:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003fd4:	4b79      	ldr	r3, [pc, #484]	@ (80041bc <PID_cal+0x738>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d045      	beq.n	8004068 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	ed93 7a00 	vldr	s14, [r3]
 8003fe4:	4b75      	ldr	r3, [pc, #468]	@ (80041bc <PID_cal+0x738>)
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	ee07 3a90 	vmov	s15, r3
 8003fec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ff0:	4b70      	ldr	r3, [pc, #448]	@ (80041b4 <PID_cal+0x730>)
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ffa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80041bc <PID_cal+0x738>)
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400a:	4b6a      	ldr	r3, [pc, #424]	@ (80041b4 <PID_cal+0x730>)
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800401c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3310      	adds	r3, #16
 8004024:	edd3 6a00 	vldr	s13, [r3]
 8004028:	4b64      	ldr	r3, [pc, #400]	@ (80041bc <PID_cal+0x738>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004034:	4b5f      	ldr	r3, [pc, #380]	@ (80041b4 <PID_cal+0x730>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800403e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004042:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004046:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800404a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800404e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	330c      	adds	r3, #12
 8004056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405a:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3310      	adds	r3, #16
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	ed93 7a00 	vldr	s14, [r3]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	330c      	adds	r3, #12
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004080:	e08d      	b.n	800419e <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	ed93 7a00 	vldr	s14, [r3]
 8004088:	4b4d      	ldr	r3, [pc, #308]	@ (80041c0 <PID_cal+0x73c>)
 800408a:	edd3 7a00 	vldr	s15, [r3]
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3304      	adds	r3, #4
 80040a2:	edd3 6a00 	vldr	s13, [r3]
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <PID_cal+0x740>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040b6:	4b3f      	ldr	r3, [pc, #252]	@ (80041b4 <PID_cal+0x730>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3308      	adds	r3, #8
 80040ce:	ed93 7a00 	vldr	s14, [r3]
 80040d2:	4b3b      	ldr	r3, [pc, #236]	@ (80041c0 <PID_cal+0x73c>)
 80040d4:	edd3 6a00 	vldr	s13, [r3]
 80040d8:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <PID_cal+0x744>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	330c      	adds	r3, #12
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 80040ee:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <PID_cal+0x738>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d045      	beq.n	8004182 <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	330c      	adds	r3, #12
 80040fa:	ed93 7a00 	vldr	s14, [r3]
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <PID_cal+0x738>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800410a:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <PID_cal+0x730>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004114:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004118:	4b28      	ldr	r3, [pc, #160]	@ (80041bc <PID_cal+0x738>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004124:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <PID_cal+0x730>)
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3310      	adds	r3, #16
 800413e:	edd3 6a00 	vldr	s13, [r3]
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <PID_cal+0x738>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <PID_cal+0x730>)
 8004150:	edd3 7a00 	vldr	s15, [r3]
 8004154:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004158:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800415c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004160:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004164:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	330c      	adds	r3, #12
 8004170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004174:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3310      	adds	r3, #16
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	68d2      	ldr	r2, [r2, #12]
 8004180:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	ed93 7a00 	vldr	s14, [r3]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	330c      	adds	r3, #12
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	edc3 7a00 	vstr	s15, [r3]
			break;
 800419a:	e000      	b.n	800419e <PID_cal+0x71a>
		default:
			break;
 800419c:	bf00      	nop
	}
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	000040a4 	.word	0x000040a4
 80041b0:	000040d4 	.word	0x000040d4
 80041b4:	0801ec04 	.word	0x0801ec04
 80041b8:	000040bc 	.word	0x000040bc
 80041bc:	00004084 	.word	0x00004084
 80041c0:	000040a8 	.word	0x000040a8
 80041c4:	000040d8 	.word	0x000040d8
 80041c8:	000040c0 	.word	0x000040c0
 80041cc:	00000000 	.word	0x00000000

080041d0 <Get_batteryvalue>:

void Get_batteryvalue(void){
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 80041d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004248 <Get_batteryvalue+0x78>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80041e4:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8004240 <Get_batteryvalue+0x70>
 80041e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80041f0:	ee17 3a90 	vmov	r3, s15
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <Get_batteryvalue+0x7c>)
 80041f8:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 80041fa:	4b14      	ldr	r3, [pc, #80]	@ (800424c <Get_batteryvalue+0x7c>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	2b63      	cmp	r3, #99	@ 0x63
 8004200:	d902      	bls.n	8004208 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8004202:	4b12      	ldr	r3, [pc, #72]	@ (800424c <Get_batteryvalue+0x7c>)
 8004204:	2264      	movs	r2, #100	@ 0x64
 8004206:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <Get_batteryvalue+0x7c>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	2b18      	cmp	r3, #24
 800420e:	d802      	bhi.n	8004216 <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <Get_batteryvalue+0x7c>)
 8004212:	2207      	movs	r2, #7
 8004214:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 8004216:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <Get_batteryvalue+0x7c>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	2b0a      	cmp	r3, #10
 800421c:	d802      	bhi.n	8004224 <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 800421e:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <Get_batteryvalue+0x7c>)
 8004220:	2209      	movs	r2, #9
 8004222:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <Get_batteryvalue+0x7c>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	2b18      	cmp	r3, #24
 800422a:	d902      	bls.n	8004232 <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 800422c:	4b07      	ldr	r3, [pc, #28]	@ (800424c <Get_batteryvalue+0x7c>)
 800422e:	2208      	movs	r2, #8
 8004230:	829a      	strh	r2, [r3, #20]
	}
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w
 8004240:	7ae147ae 	.word	0x7ae147ae
 8004244:	401dae14 	.word	0x401dae14
 8004248:	24000eb0 	.word	0x24000eb0
 800424c:	00000184 	.word	0x00000184

08004250 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004254:	2200      	movs	r2, #0
 8004256:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800425a:	4802      	ldr	r0, [pc, #8]	@ (8004264 <SELECT+0x14>)
 800425c:	f00a fae2 	bl	800e824 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	58020c00 	.word	0x58020c00

08004268 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800426c:	2201      	movs	r2, #1
 800426e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004272:	4802      	ldr	r0, [pc, #8]	@ (800427c <DESELECT+0x14>)
 8004274:	f00a fad6 	bl	800e824 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	58020c00 	.word	0x58020c00

08004280 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800428a:	bf00      	nop
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <SPI_TxByte+0x2c>)
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004294:	2b20      	cmp	r3, #32
 8004296:	d1f9      	bne.n	800428c <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004298:	1df9      	adds	r1, r7, #7
 800429a:	2364      	movs	r3, #100	@ 0x64
 800429c:	2201      	movs	r2, #1
 800429e:	4804      	ldr	r0, [pc, #16]	@ (80042b0 <SPI_TxByte+0x30>)
 80042a0:	f010 fc1c 	bl	8014adc <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40020010 	.word	0x40020010
 80042b0:	240001ec 	.word	0x240001ec

080042b4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042c0:	bf00      	nop
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <SPI_TxBuffer+0x30>)
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d1f9      	bne.n	80042c2 <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	461a      	mov	r2, r3
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4804      	ldr	r0, [pc, #16]	@ (80042e8 <SPI_TxBuffer+0x34>)
 80042d6:	f011 fb9b 	bl	8015a10 <HAL_SPI_Transmit_DMA>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40020010 	.word	0x40020010
 80042e8:	240001ec 	.word	0x240001ec

080042ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80042f2:	23ff      	movs	r3, #255	@ 0xff
 80042f4:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042f6:	bf00      	nop
 80042f8:	4b09      	ldr	r3, [pc, #36]	@ (8004320 <SPI_RxByte+0x34>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004300:	2b20      	cmp	r3, #32
 8004302:	d1f9      	bne.n	80042f8 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004304:	1dba      	adds	r2, r7, #6
 8004306:	1df9      	adds	r1, r7, #7
 8004308:	2364      	movs	r3, #100	@ 0x64
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2301      	movs	r3, #1
 800430e:	4805      	ldr	r0, [pc, #20]	@ (8004324 <SPI_RxByte+0x38>)
 8004310:	f011 f844 	bl	801539c <HAL_SPI_TransmitReceive>

	return data;
 8004314:	79bb      	ldrb	r3, [r7, #6]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40020010 	.word	0x40020010
 8004324:	240001ec 	.word	0x240001ec

08004328 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004330:	f7ff ffdc 	bl	80042ec <SPI_RxByte>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	701a      	strb	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <SD_ReadyWait+0x30>)
 800434c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004350:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8004352:	f7ff ffcb 	bl	80042ec <SPI_RxByte>
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	2bff      	cmp	r3, #255	@ 0xff
 800435e:	d004      	beq.n	800436a <SD_ReadyWait+0x26>
 8004360:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <SD_ReadyWait+0x30>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f3      	bne.n	8004352 <SD_ReadyWait+0xe>

	return res;
 800436a:	79fb      	ldrb	r3, [r7, #7]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2400037c 	.word	0x2400037c

08004378 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800437e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004382:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004384:	f7ff ff70 	bl	8004268 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	e005      	b.n	800439a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800438e:	20ff      	movs	r0, #255	@ 0xff
 8004390:	f7ff ff76 	bl	8004280 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	3301      	adds	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b09      	cmp	r3, #9
 800439e:	ddf6      	ble.n	800438e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80043a0:	f7ff ff56 	bl	8004250 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80043a4:	2340      	movs	r3, #64	@ 0x40
 80043a6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80043b8:	2395      	movs	r3, #149	@ 0x95
 80043ba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80043bc:	463b      	mov	r3, r7
 80043be:	2106      	movs	r1, #6
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff77 	bl	80042b4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80043c6:	e002      	b.n	80043ce <SD_PowerOn+0x56>
	{
		cnt--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80043ce:	f7ff ff8d 	bl	80042ec <SPI_RxByte>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d002      	beq.n	80043de <SD_PowerOn+0x66>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f4      	bne.n	80043c8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80043de:	f7ff ff43 	bl	8004268 <DESELECT>
	SPI_TxByte(0XFF);
 80043e2:	20ff      	movs	r0, #255	@ 0xff
 80043e4:	f7ff ff4c 	bl	8004280 <SPI_TxByte>

	PowerFlag = 1;
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <SD_PowerOn+0x80>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	24000195 	.word	0x24000195

080043fc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <SD_PowerOff+0x14>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	24000195 	.word	0x24000195

08004414 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <SD_CheckPower+0x14>)
 800441a:	781b      	ldrb	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	24000195 	.word	0x24000195

0800442c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <SD_RxDataBlock+0x5c>)
 8004438:	220a      	movs	r2, #10
 800443a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800443c:	f7ff ff56 	bl	80042ec <SPI_RxByte>
 8004440:	4603      	mov	r3, r0
 8004442:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2bff      	cmp	r3, #255	@ 0xff
 8004448:	d104      	bne.n	8004454 <SD_RxDataBlock+0x28>
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <SD_RxDataBlock+0x5c>)
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f3      	bne.n	800443c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2bfe      	cmp	r3, #254	@ 0xfe
 8004458:	d001      	beq.n	800445e <SD_RxDataBlock+0x32>
 800445a:	2300      	movs	r3, #0
 800445c:	e00f      	b.n	800447e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff5f 	bl	8004328 <SPI_RxBytePtr>
	} while(len--);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	1e5a      	subs	r2, r3, #1
 800446e:	603a      	str	r2, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f4      	bne.n	800445e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8004474:	f7ff ff3a 	bl	80042ec <SPI_RxByte>
	SPI_RxByte();
 8004478:	f7ff ff38 	bl	80042ec <SPI_RxByte>

	return TRUE;
 800447c:	2301      	movs	r3, #1
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	24000378 	.word	0x24000378

0800448c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800449c:	f7ff ff52 	bl	8004344 <SD_ReadyWait>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2bff      	cmp	r3, #255	@ 0xff
 80044a4:	d001      	beq.n	80044aa <SD_TxDataBlock+0x1e>
 80044a6:	2300      	movs	r3, #0
 80044a8:	e02f      	b.n	800450a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fee7 	bl	8004280 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	2bfd      	cmp	r3, #253	@ 0xfd
 80044b6:	d020      	beq.n	80044fa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80044b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fef9 	bl	80042b4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80044c2:	f7ff ff13 	bl	80042ec <SPI_RxByte>
		SPI_RxByte();
 80044c6:	f7ff ff11 	bl	80042ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80044ca:	e00b      	b.n	80044e4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80044cc:	f7ff ff0e 	bl	80042ec <SPI_RxByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d006      	beq.n	80044ec <SD_TxDataBlock+0x60>
			i++;
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	3301      	adds	r3, #1
 80044e2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d9f0      	bls.n	80044cc <SD_TxDataBlock+0x40>
 80044ea:	e000      	b.n	80044ee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80044ec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80044ee:	bf00      	nop
 80044f0:	f7ff fefc 	bl	80042ec <SPI_RxByte>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0fa      	beq.n	80044f0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2b05      	cmp	r3, #5
 8004502:	d101      	bne.n	8004508 <SD_TxDataBlock+0x7c>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <SD_TxDataBlock+0x7e>

	return FALSE;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	6039      	str	r1, [r7, #0]
 800451c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800451e:	f7ff ff11 	bl	8004344 <SD_ReadyWait>
 8004522:	4603      	mov	r3, r0
 8004524:	2bff      	cmp	r3, #255	@ 0xff
 8004526:	d001      	beq.n	800452c <SD_SendCmd+0x1a>
 8004528:	23ff      	movs	r3, #255	@ 0xff
 800452a:	e042      	b.n	80045b2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fea6 	bl	8004280 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	0e1b      	lsrs	r3, r3, #24
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fea0 	bl	8004280 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b2db      	uxtb	r3, r3
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fe9a 	bl	8004280 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fe94 	bl	8004280 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fe8f 	bl	8004280 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d102      	bne.n	800456e <SD_SendCmd+0x5c>
 8004568:	2395      	movs	r3, #149	@ 0x95
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e007      	b.n	800457e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b48      	cmp	r3, #72	@ 0x48
 8004572:	d102      	bne.n	800457a <SD_SendCmd+0x68>
 8004574:	2387      	movs	r3, #135	@ 0x87
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e001      	b.n	800457e <SD_SendCmd+0x6c>
	else crc = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fe7d 	bl	8004280 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b4c      	cmp	r3, #76	@ 0x4c
 800458a:	d101      	bne.n	8004590 <SD_SendCmd+0x7e>
 800458c:	f7ff feae 	bl	80042ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004590:	230a      	movs	r3, #10
 8004592:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004594:	f7ff feaa 	bl	80042ec <SPI_RxByte>
 8004598:	4603      	mov	r3, r0
 800459a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800459c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	da05      	bge.n	80045b0 <SD_SendCmd+0x9e>
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	73bb      	strb	r3, [r7, #14]
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f1      	bne.n	8004594 <SD_SendCmd+0x82>

	return res;
 80045b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <SD_disk_initialize+0x14>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0d6      	b.n	800477e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80045d0:	4b6d      	ldr	r3, [pc, #436]	@ (8004788 <SD_disk_initialize+0x1cc>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <SD_disk_initialize+0x2a>
 80045de:	4b6a      	ldr	r3, [pc, #424]	@ (8004788 <SD_disk_initialize+0x1cc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e0cb      	b.n	800477e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80045e6:	f7ff fec7 	bl	8004378 <SD_PowerOn>

	/* slave select */
	SELECT();
 80045ea:	f7ff fe31 	bl	8004250 <SELECT>

	/* check disk type */
	type = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80045f2:	2100      	movs	r1, #0
 80045f4:	2040      	movs	r0, #64	@ 0x40
 80045f6:	f7ff ff8c 	bl	8004512 <SD_SendCmd>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 80a6 	bne.w	800474e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004602:	4b62      	ldr	r3, [pc, #392]	@ (800478c <SD_disk_initialize+0x1d0>)
 8004604:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004608:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800460a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800460e:	2048      	movs	r0, #72	@ 0x48
 8004610:	f7ff ff7f 	bl	8004512 <SD_SendCmd>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d158      	bne.n	80046cc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e00c      	b.n	800463a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004620:	7bfc      	ldrb	r4, [r7, #15]
 8004622:	f7ff fe63 	bl	80042ec <SPI_RxByte>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	f104 0310 	add.w	r3, r4, #16
 800462e:	443b      	add	r3, r7
 8004630:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	3301      	adds	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d9ef      	bls.n	8004620 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004640:	7abb      	ldrb	r3, [r7, #10]
 8004642:	2b01      	cmp	r3, #1
 8004644:	f040 8083 	bne.w	800474e <SD_disk_initialize+0x192>
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	2baa      	cmp	r3, #170	@ 0xaa
 800464c:	d17f      	bne.n	800474e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800464e:	2100      	movs	r1, #0
 8004650:	2077      	movs	r0, #119	@ 0x77
 8004652:	f7ff ff5e 	bl	8004512 <SD_SendCmd>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d807      	bhi.n	800466c <SD_disk_initialize+0xb0>
 800465c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004660:	2069      	movs	r0, #105	@ 0x69
 8004662:	f7ff ff56 	bl	8004512 <SD_SendCmd>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800466c:	4b47      	ldr	r3, [pc, #284]	@ (800478c <SD_disk_initialize+0x1d0>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1eb      	bne.n	800464e <SD_disk_initialize+0x92>
 8004676:	e000      	b.n	800467a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004678:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800467a:	4b44      	ldr	r3, [pc, #272]	@ (800478c <SD_disk_initialize+0x1d0>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d064      	beq.n	800474e <SD_disk_initialize+0x192>
 8004684:	2100      	movs	r1, #0
 8004686:	207a      	movs	r0, #122	@ 0x7a
 8004688:	f7ff ff43 	bl	8004512 <SD_SendCmd>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d15d      	bne.n	800474e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	e00c      	b.n	80046b2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004698:	7bfc      	ldrb	r4, [r7, #15]
 800469a:	f7ff fe27 	bl	80042ec <SPI_RxByte>
 800469e:	4603      	mov	r3, r0
 80046a0:	461a      	mov	r2, r3
 80046a2:	f104 0310 	add.w	r3, r4, #16
 80046a6:	443b      	add	r3, r7
 80046a8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	3301      	adds	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d9ef      	bls.n	8004698 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80046b8:	7a3b      	ldrb	r3, [r7, #8]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <SD_disk_initialize+0x10a>
 80046c2:	230c      	movs	r3, #12
 80046c4:	e000      	b.n	80046c8 <SD_disk_initialize+0x10c>
 80046c6:	2304      	movs	r3, #4
 80046c8:	73bb      	strb	r3, [r7, #14]
 80046ca:	e040      	b.n	800474e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80046cc:	2100      	movs	r1, #0
 80046ce:	2077      	movs	r0, #119	@ 0x77
 80046d0:	f7ff ff1f 	bl	8004512 <SD_SendCmd>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d808      	bhi.n	80046ec <SD_disk_initialize+0x130>
 80046da:	2100      	movs	r1, #0
 80046dc:	2069      	movs	r0, #105	@ 0x69
 80046de:	f7ff ff18 	bl	8004512 <SD_SendCmd>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d801      	bhi.n	80046ec <SD_disk_initialize+0x130>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e000      	b.n	80046ee <SD_disk_initialize+0x132>
 80046ec:	2301      	movs	r3, #1
 80046ee:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d10e      	bne.n	8004714 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80046f6:	2100      	movs	r1, #0
 80046f8:	2077      	movs	r0, #119	@ 0x77
 80046fa:	f7ff ff0a 	bl	8004512 <SD_SendCmd>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b01      	cmp	r3, #1
 8004702:	d80e      	bhi.n	8004722 <SD_disk_initialize+0x166>
 8004704:	2100      	movs	r1, #0
 8004706:	2069      	movs	r0, #105	@ 0x69
 8004708:	f7ff ff03 	bl	8004512 <SD_SendCmd>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <SD_disk_initialize+0x166>
 8004712:	e00d      	b.n	8004730 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004714:	2100      	movs	r1, #0
 8004716:	2041      	movs	r0, #65	@ 0x41
 8004718:	f7ff fefb 	bl	8004512 <SD_SendCmd>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8004722:	4b1a      	ldr	r3, [pc, #104]	@ (800478c <SD_disk_initialize+0x1d0>)
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e1      	bne.n	80046f0 <SD_disk_initialize+0x134>
 800472c:	e000      	b.n	8004730 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800472e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004730:	4b16      	ldr	r3, [pc, #88]	@ (800478c <SD_disk_initialize+0x1d0>)
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <SD_disk_initialize+0x18e>
 800473a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800473e:	2050      	movs	r0, #80	@ 0x50
 8004740:	f7ff fee7 	bl	8004512 <SD_SendCmd>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <SD_disk_initialize+0x192>
 800474a:	2300      	movs	r3, #0
 800474c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800474e:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <SD_disk_initialize+0x1d4>)
 8004750:	7bbb      	ldrb	r3, [r7, #14]
 8004752:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004754:	f7ff fd88 	bl	8004268 <DESELECT>
	SPI_RxByte();
 8004758:	f7ff fdc8 	bl	80042ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800475c:	7bbb      	ldrb	r3, [r7, #14]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8004762:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <SD_disk_initialize+0x1cc>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <SD_disk_initialize+0x1cc>)
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e001      	b.n	8004778 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004774:	f7ff fe42 	bl	80043fc <SD_PowerOff>
	}

	return Stat;
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <SD_disk_initialize+0x1cc>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bd90      	pop	{r4, r7, pc}
 8004786:	bf00      	nop
 8004788:	24000000 	.word	0x24000000
 800478c:	24000378 	.word	0x24000378
 8004790:	24000194 	.word	0x24000194

08004794 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <SD_disk_status+0x14>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e002      	b.n	80047ae <SD_disk_status+0x1a>
	return Stat;
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <SD_disk_status+0x28>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	24000000 	.word	0x24000000

080047c0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <SD_disk_read+0x1c>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <SD_disk_read+0x20>
 80047dc:	2304      	movs	r3, #4
 80047de:	e051      	b.n	8004884 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047e0:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <SD_disk_read+0xcc>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <SD_disk_read+0x32>
 80047ee:	2303      	movs	r3, #3
 80047f0:	e048      	b.n	8004884 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80047f2:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <SD_disk_read+0xd0>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <SD_disk_read+0x44>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	607b      	str	r3, [r7, #4]

	SELECT();
 8004804:	f7ff fd24 	bl	8004250 <SELECT>

	if (count == 1)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d111      	bne.n	8004832 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	2051      	movs	r0, #81	@ 0x51
 8004812:	f7ff fe7e 	bl	8004512 <SD_SendCmd>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d129      	bne.n	8004870 <SD_disk_read+0xb0>
 800481c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004820:	68b8      	ldr	r0, [r7, #8]
 8004822:	f7ff fe03 	bl	800442c <SD_RxDataBlock>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d021      	beq.n	8004870 <SD_disk_read+0xb0>
 800482c:	2300      	movs	r3, #0
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	e01e      	b.n	8004870 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	2052      	movs	r0, #82	@ 0x52
 8004836:	f7ff fe6c 	bl	8004512 <SD_SendCmd>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d117      	bne.n	8004870 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004844:	68b8      	ldr	r0, [r7, #8]
 8004846:	f7ff fdf1 	bl	800442c <SD_RxDataBlock>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <SD_disk_read+0xa6>
				buff += 512;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004856:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	3b01      	subs	r3, #1
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ed      	bne.n	8004840 <SD_disk_read+0x80>
 8004864:	e000      	b.n	8004868 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004866:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004868:	2100      	movs	r1, #0
 800486a:	204c      	movs	r0, #76	@ 0x4c
 800486c:	f7ff fe51 	bl	8004512 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004870:	f7ff fcfa 	bl	8004268 <DESELECT>
	SPI_RxByte();
 8004874:	f7ff fd3a 	bl	80042ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	24000000 	.word	0x24000000
 8004890:	24000194 	.word	0x24000194

08004894 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <SD_disk_write+0x1c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <SD_disk_write+0x20>
 80048b0:	2304      	movs	r3, #4
 80048b2:	e06b      	b.n	800498c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80048b4:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <SD_disk_write+0x100>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <SD_disk_write+0x32>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e062      	b.n	800498c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80048c6:	4b33      	ldr	r3, [pc, #204]	@ (8004994 <SD_disk_write+0x100>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <SD_disk_write+0x44>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e059      	b.n	800498c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80048d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004998 <SD_disk_write+0x104>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <SD_disk_write+0x56>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	025b      	lsls	r3, r3, #9
 80048e8:	607b      	str	r3, [r7, #4]

	SELECT();
 80048ea:	f7ff fcb1 	bl	8004250 <SELECT>

	if (count == 1)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d110      	bne.n	8004916 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	2058      	movs	r0, #88	@ 0x58
 80048f8:	f7ff fe0b 	bl	8004512 <SD_SendCmd>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d13a      	bne.n	8004978 <SD_disk_write+0xe4>
 8004902:	21fe      	movs	r1, #254	@ 0xfe
 8004904:	68b8      	ldr	r0, [r7, #8]
 8004906:	f7ff fdc1 	bl	800448c <SD_TxDataBlock>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d033      	beq.n	8004978 <SD_disk_write+0xe4>
			count = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	e030      	b.n	8004978 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004916:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <SD_disk_write+0x104>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004922:	2100      	movs	r1, #0
 8004924:	2077      	movs	r0, #119	@ 0x77
 8004926:	f7ff fdf4 	bl	8004512 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	2057      	movs	r0, #87	@ 0x57
 800492e:	f7ff fdf0 	bl	8004512 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	2059      	movs	r0, #89	@ 0x59
 8004936:	f7ff fdec 	bl	8004512 <SD_SendCmd>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11b      	bne.n	8004978 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004940:	21fc      	movs	r1, #252	@ 0xfc
 8004942:	68b8      	ldr	r0, [r7, #8]
 8004944:	f7ff fda2 	bl	800448c <SD_TxDataBlock>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <SD_disk_write+0xd0>
				buff += 512;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004954:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	3b01      	subs	r3, #1
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ee      	bne.n	8004940 <SD_disk_write+0xac>
 8004962:	e000      	b.n	8004966 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004964:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004966:	21fd      	movs	r1, #253	@ 0xfd
 8004968:	2000      	movs	r0, #0
 800496a:	f7ff fd8f 	bl	800448c <SD_TxDataBlock>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <SD_disk_write+0xe4>
			{
				count = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004978:	f7ff fc76 	bl	8004268 <DESELECT>
	SPI_RxByte();
 800497c:	f7ff fcb6 	bl	80042ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	24000000 	.word	0x24000000
 8004998:	24000194 	.word	0x24000194

0800499c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b08b      	sub	sp, #44	@ 0x2c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	603a      	str	r2, [r7, #0]
 80049a6:	71fb      	strb	r3, [r7, #7]
 80049a8:	460b      	mov	r3, r1
 80049aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <SD_disk_ioctl+0x1e>
 80049b6:	2304      	movs	r3, #4
 80049b8:	e113      	b.n	8004be2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80049c0:	79bb      	ldrb	r3, [r7, #6]
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d124      	bne.n	8004a10 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d012      	beq.n	80049f4 <SD_disk_ioctl+0x58>
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	dc1a      	bgt.n	8004a08 <SD_disk_ioctl+0x6c>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <SD_disk_ioctl+0x40>
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d006      	beq.n	80049e8 <SD_disk_ioctl+0x4c>
 80049da:	e015      	b.n	8004a08 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80049dc:	f7ff fd0e 	bl	80043fc <SD_PowerOff>
			res = RES_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049e6:	e0fa      	b.n	8004bde <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80049e8:	f7ff fcc6 	bl	8004378 <SD_PowerOn>
			res = RES_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049f2:	e0f4      	b.n	8004bde <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	1c5c      	adds	r4, r3, #1
 80049f8:	f7ff fd0c 	bl	8004414 <SD_CheckPower>
 80049fc:	4603      	mov	r3, r0
 80049fe:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a06:	e0ea      	b.n	8004bde <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a0e:	e0e6      	b.n	8004bde <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a10:	4b76      	ldr	r3, [pc, #472]	@ (8004bec <SD_disk_ioctl+0x250>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SD_disk_ioctl+0x86>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0df      	b.n	8004be2 <SD_disk_ioctl+0x246>

		SELECT();
 8004a22:	f7ff fc15 	bl	8004250 <SELECT>

		switch (ctrl)
 8004a26:	79bb      	ldrb	r3, [r7, #6]
 8004a28:	2b0d      	cmp	r3, #13
 8004a2a:	f200 80c9 	bhi.w	8004bc0 <SD_disk_ioctl+0x224>
 8004a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <SD_disk_ioctl+0x98>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004b2b 	.word	0x08004b2b
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004b1b 	.word	0x08004b1b
 8004a40:	08004bc1 	.word	0x08004bc1
 8004a44:	08004bc1 	.word	0x08004bc1
 8004a48:	08004bc1 	.word	0x08004bc1
 8004a4c:	08004bc1 	.word	0x08004bc1
 8004a50:	08004bc1 	.word	0x08004bc1
 8004a54:	08004bc1 	.word	0x08004bc1
 8004a58:	08004bc1 	.word	0x08004bc1
 8004a5c:	08004bc1 	.word	0x08004bc1
 8004a60:	08004b3d 	.word	0x08004b3d
 8004a64:	08004b61 	.word	0x08004b61
 8004a68:	08004b85 	.word	0x08004b85
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2049      	movs	r0, #73	@ 0x49
 8004a70:	f7ff fd4f 	bl	8004512 <SD_SendCmd>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 80a6 	bne.w	8004bc8 <SD_disk_ioctl+0x22c>
 8004a7c:	f107 030c 	add.w	r3, r7, #12
 8004a80:	2110      	movs	r1, #16
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff fcd2 	bl	800442c <SD_RxDataBlock>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 809c 	beq.w	8004bc8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004a90:	7b3b      	ldrb	r3, [r7, #12]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10d      	bne.n	8004ab6 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a9a:	7d7b      	ldrb	r3, [r7, #21]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	7d3b      	ldrb	r3, [r7, #20]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004aac:	8bfb      	ldrh	r3, [r7, #30]
 8004aae:	029a      	lsls	r2, r3, #10
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e02d      	b.n	8004b12 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004ab6:	7c7b      	ldrb	r3, [r7, #17]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	7dbb      	ldrb	r3, [r7, #22]
 8004ac0:	09db      	lsrs	r3, r3, #7
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	7d7b      	ldrb	r3, [r7, #21]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 0306 	and.w	r3, r3, #6
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004ade:	7d3b      	ldrb	r3, [r7, #20]
 8004ae0:	099b      	lsrs	r3, r3, #6
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	7cbb      	ldrb	r3, [r7, #18]
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004b04:	8bfa      	ldrh	r2, [r7, #30]
 8004b06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b0a:	3b09      	subs	r3, #9
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004b18:	e056      	b.n	8004bc8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b20:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b28:	e055      	b.n	8004bd6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004b2a:	f7ff fc0b 	bl	8004344 <SD_ReadyWait>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2bff      	cmp	r3, #255	@ 0xff
 8004b32:	d14b      	bne.n	8004bcc <SD_disk_ioctl+0x230>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b3a:	e047      	b.n	8004bcc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	2049      	movs	r0, #73	@ 0x49
 8004b40:	f7ff fce7 	bl	8004512 <SD_SendCmd>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d142      	bne.n	8004bd0 <SD_disk_ioctl+0x234>
 8004b4a:	2110      	movs	r1, #16
 8004b4c:	6a38      	ldr	r0, [r7, #32]
 8004b4e:	f7ff fc6d 	bl	800442c <SD_RxDataBlock>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d03b      	beq.n	8004bd0 <SD_disk_ioctl+0x234>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b5e:	e037      	b.n	8004bd0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b60:	2100      	movs	r1, #0
 8004b62:	204a      	movs	r0, #74	@ 0x4a
 8004b64:	f7ff fcd5 	bl	8004512 <SD_SendCmd>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d132      	bne.n	8004bd4 <SD_disk_ioctl+0x238>
 8004b6e:	2110      	movs	r1, #16
 8004b70:	6a38      	ldr	r0, [r7, #32]
 8004b72:	f7ff fc5b 	bl	800442c <SD_RxDataBlock>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02b      	beq.n	8004bd4 <SD_disk_ioctl+0x238>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b82:	e027      	b.n	8004bd4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004b84:	2100      	movs	r1, #0
 8004b86:	207a      	movs	r0, #122	@ 0x7a
 8004b88:	f7ff fcc3 	bl	8004512 <SD_SendCmd>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d116      	bne.n	8004bc0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b98:	e00b      	b.n	8004bb2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004b9a:	6a3c      	ldr	r4, [r7, #32]
 8004b9c:	1c63      	adds	r3, r4, #1
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	f7ff fba4 	bl	80042ec <SPI_RxByte>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bac:	3301      	adds	r3, #1
 8004bae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004bb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d9ef      	bls.n	8004b9a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004bc6:	e006      	b.n	8004bd6 <SD_disk_ioctl+0x23a>
			break;
 8004bc8:	bf00      	nop
 8004bca:	e004      	b.n	8004bd6 <SD_disk_ioctl+0x23a>
			break;
 8004bcc:	bf00      	nop
 8004bce:	e002      	b.n	8004bd6 <SD_disk_ioctl+0x23a>
			break;
 8004bd0:	bf00      	nop
 8004bd2:	e000      	b.n	8004bd6 <SD_disk_ioctl+0x23a>
			break;
 8004bd4:	bf00      	nop
		}

		DESELECT();
 8004bd6:	f7ff fb47 	bl	8004268 <DESELECT>
		SPI_RxByte();
 8004bda:	f7ff fb87 	bl	80042ec <SPI_RxByte>
	}

	return res;
 8004bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	372c      	adds	r7, #44	@ 0x2c
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd90      	pop	{r4, r7, pc}
 8004bea:	bf00      	nop
 8004bec:	24000000 	.word	0x24000000

08004bf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	@ 0x38
 8004bf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	609a      	str	r2, [r3, #8]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c06:	4b8b      	ldr	r3, [pc, #556]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c0c:	4a89      	ldr	r2, [pc, #548]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c0e:	f043 0310 	orr.w	r3, r3, #16
 8004c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c16:	4b87      	ldr	r3, [pc, #540]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	623b      	str	r3, [r7, #32]
 8004c22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c24:	4b83      	ldr	r3, [pc, #524]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c2a:	4a82      	ldr	r2, [pc, #520]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c34:	4b7f      	ldr	r3, [pc, #508]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c42:	4b7c      	ldr	r3, [pc, #496]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c48:	4a7a      	ldr	r2, [pc, #488]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c52:	4b78      	ldr	r3, [pc, #480]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c60:	4b74      	ldr	r3, [pc, #464]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c66:	4a73      	ldr	r2, [pc, #460]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c68:	f043 0320 	orr.w	r3, r3, #32
 8004c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c70:	4b70      	ldr	r3, [pc, #448]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c84:	4a6b      	ldr	r2, [pc, #428]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c86:	f043 0302 	orr.w	r3, r3, #2
 8004c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c8e:	4b69      	ldr	r3, [pc, #420]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c9c:	4b65      	ldr	r3, [pc, #404]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca2:	4a64      	ldr	r2, [pc, #400]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004ca4:	f043 0308 	orr.w	r3, r3, #8
 8004ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cac:	4b61      	ldr	r3, [pc, #388]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cba:	4b5e      	ldr	r3, [pc, #376]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cca:	4b5a      	ldr	r3, [pc, #360]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd8:	4b56      	ldr	r3, [pc, #344]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cde:	4a55      	ldr	r2, [pc, #340]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ce8:	4b52      	ldr	r3, [pc, #328]	@ (8004e34 <MX_GPIO_Init+0x244>)
 8004cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004cfc:	484e      	ldr	r0, [pc, #312]	@ (8004e38 <MX_GPIO_Init+0x248>)
 8004cfe:	f009 fd91 	bl	800e824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004d02:	2200      	movs	r2, #0
 8004d04:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004d08:	484c      	ldr	r0, [pc, #304]	@ (8004e3c <MX_GPIO_Init+0x24c>)
 8004d0a:	f009 fd8b 	bl	800e824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004d14:	484a      	ldr	r0, [pc, #296]	@ (8004e40 <MX_GPIO_Init+0x250>)
 8004d16:	f009 fd85 	bl	800e824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d20:	4848      	ldr	r0, [pc, #288]	@ (8004e44 <MX_GPIO_Init+0x254>)
 8004d22:	f009 fd7f 	bl	800e824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004d26:	2200      	movs	r2, #0
 8004d28:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004d2c:	4846      	ldr	r0, [pc, #280]	@ (8004e48 <MX_GPIO_Init+0x258>)
 8004d2e:	f009 fd79 	bl	800e824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004d32:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d40:	2300      	movs	r3, #0
 8004d42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d48:	4619      	mov	r1, r3
 8004d4a:	483b      	ldr	r0, [pc, #236]	@ (8004e38 <MX_GPIO_Init+0x248>)
 8004d4c:	f009 fbaa 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004d50:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d56:	2301      	movs	r3, #1
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d66:	4619      	mov	r1, r3
 8004d68:	4834      	ldr	r0, [pc, #208]	@ (8004e3c <MX_GPIO_Init+0x24c>)
 8004d6a:	f009 fb9b 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d80:	4619      	mov	r1, r3
 8004d82:	482e      	ldr	r0, [pc, #184]	@ (8004e3c <MX_GPIO_Init+0x24c>)
 8004d84:	f009 fb8e 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004d88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2300      	movs	r3, #0
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4827      	ldr	r0, [pc, #156]	@ (8004e40 <MX_GPIO_Init+0x250>)
 8004da2:	f009 fb7f 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dac:	2301      	movs	r3, #1
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004db4:	2301      	movs	r3, #1
 8004db6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4820      	ldr	r0, [pc, #128]	@ (8004e40 <MX_GPIO_Init+0x250>)
 8004dc0:	f009 fb70 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4819      	ldr	r0, [pc, #100]	@ (8004e44 <MX_GPIO_Init+0x254>)
 8004dde:	f009 fb61 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004de2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de8:	2301      	movs	r3, #1
 8004dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df0:	2300      	movs	r3, #0
 8004df2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4813      	ldr	r0, [pc, #76]	@ (8004e48 <MX_GPIO_Init+0x258>)
 8004dfc:	f009 fb52 	bl	800e4a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004e00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e14:	4619      	mov	r1, r3
 8004e16:	480b      	ldr	r0, [pc, #44]	@ (8004e44 <MX_GPIO_Init+0x254>)
 8004e18:	f009 fb44 	bl	800e4a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2100      	movs	r1, #0
 8004e20:	2028      	movs	r0, #40	@ 0x28
 8004e22:	f006 fc40 	bl	800b6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e26:	2028      	movs	r0, #40	@ 0x28
 8004e28:	f006 fc57 	bl	800b6da <HAL_NVIC_EnableIRQ>

}
 8004e2c:	bf00      	nop
 8004e2e:	3738      	adds	r7, #56	@ 0x38
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	58024400 	.word	0x58024400
 8004e38:	58021000 	.word	0x58021000
 8004e3c:	58020400 	.word	0x58020400
 8004e40:	58020c00 	.word	0x58020c00
 8004e44:	58021800 	.word	0x58021800
 8004e48:	58020000 	.word	0x58020000

08004e4c <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <MX_I2C5_Init+0x80>)
 8004e54:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004e56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e68:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e74:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004e86:	4810      	ldr	r0, [pc, #64]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e88:	f009 fd00 	bl	800e88c <HAL_I2C_Init>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004e92:	f003 f821 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e96:	2100      	movs	r1, #0
 8004e98:	480b      	ldr	r0, [pc, #44]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004e9a:	f00c f8b9 	bl	8011010 <HAL_I2CEx_ConfigAnalogFilter>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004ea4:	f003 f818 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4807      	ldr	r0, [pc, #28]	@ (8004ec8 <MX_I2C5_Init+0x7c>)
 8004eac:	f00c f8fb 	bl	80110a6 <HAL_I2CEx_ConfigDigitalFilter>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004eb6:	f003 f80f 	bl	8007ed8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004eba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004ebe:	f00c f93f 	bl	8011140 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	24000198 	.word	0x24000198
 8004ecc:	40006400 	.word	0x40006400

08004ed0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0b8      	sub	sp, #224	@ 0xe0
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	22b8      	movs	r2, #184	@ 0xb8
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f019 f927 	bl	801e144 <memset>
  if(i2cHandle->Instance==I2C5)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa8 <HAL_I2C_MspInit+0xd8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d14f      	bne.n	8004fa0 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004f00:	f04f 0208 	mov.w	r2, #8
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004f0c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f00d f8d5 	bl	80120c8 <HAL_RCCEx_PeriphCLKConfig>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004f24:	f002 ffd8 	bl	8007ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f28:	4b20      	ldr	r3, [pc, #128]	@ (8004fac <HAL_I2C_MspInit+0xdc>)
 8004f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_I2C_MspInit+0xdc>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f38:	4b1c      	ldr	r3, [pc, #112]	@ (8004fac <HAL_I2C_MspInit+0xdc>)
 8004f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f4e:	2312      	movs	r3, #18
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004f60:	2304      	movs	r3, #4
 8004f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4810      	ldr	r0, [pc, #64]	@ (8004fb0 <HAL_I2C_MspInit+0xe0>)
 8004f6e:	f009 fa99 	bl	800e4a4 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004f72:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <HAL_I2C_MspInit+0xdc>)
 8004f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f78:	4a0c      	ldr	r2, [pc, #48]	@ (8004fac <HAL_I2C_MspInit+0xdc>)
 8004f7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <HAL_I2C_MspInit+0xdc>)
 8004f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004f90:	2200      	movs	r2, #0
 8004f92:	2101      	movs	r1, #1
 8004f94:	209d      	movs	r0, #157	@ 0x9d
 8004f96:	f006 fb86 	bl	800b6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004f9a:	209d      	movs	r0, #157	@ 0x9d
 8004f9c:	f006 fb9d 	bl	800b6da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	37e0      	adds	r7, #224	@ 0xe0
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40006400 	.word	0x40006400
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	58020800 	.word	0x58020800

08004fb4 <__NVIC_SystemReset>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb8:	f3bf 8f4f 	dsb	sy
}
 8004fbc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <__NVIC_SystemReset+0x24>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004fc6:	4904      	ldr	r1, [pc, #16]	@ (8004fd8 <__NVIC_SystemReset+0x24>)
 8004fc8:	4b04      	ldr	r3, [pc, #16]	@ (8004fdc <__NVIC_SystemReset+0x28>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fce:	f3bf 8f4f 	dsb	sy
}
 8004fd2:	bf00      	nop
    __NOP();
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <__NVIC_SystemReset+0x20>
 8004fd8:	e000ed00 	.word	0xe000ed00
 8004fdc:	05fa0004 	.word	0x05fa0004

08004fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	@ 0x28
 8004fe4:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/

	MPU_Config();
 8004fe6:	f002 ff4b 	bl	8007e80 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fea:	f004 fa4d 	bl	8009488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fee:	f000 ffc7 	bl	8005f80 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004ff2:	f001 f837 	bl	8006064 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ff6:	f7ff fdfb 	bl	8004bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ffa:	f7fe fbdf 	bl	80037bc <MX_DMA_Init>
  MX_I2C5_Init();
 8004ffe:	f7ff ff25 	bl	8004e4c <MX_I2C5_Init>
  MX_SPI6_Init();
 8005002:	f002 ffc5 	bl	8007f90 <MX_SPI6_Init>
  MX_ADC2_Init();
 8005006:	f7fe faeb 	bl	80035e0 <MX_ADC2_Init>
  MX_SPI2_Init();
 800500a:	f002 ff6b 	bl	8007ee4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800500e:	f004 f953 	bl	80092b8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8005012:	f003 fe71 	bl	8008cf8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8005016:	f003 ffe7 	bl	8008fe8 <MX_TIM8_Init>
  MX_TIM3_Init();
 800501a:	f003 ff69 	bl	8008ef0 <MX_TIM3_Init>
  MX_FATFS_Init();
 800501e:	f015 fedd 	bl	801addc <MX_FATFS_Init>
  MX_TIM2_Init();
 8005022:	f003 ff11 	bl	8008e48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8005026:	2201      	movs	r2, #1
 8005028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800502c:	489c      	ldr	r0, [pc, #624]	@ (80052a0 <main+0x2c0>)
 800502e:	f009 fbf9 	bl	800e824 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8005032:	4b9c      	ldr	r3, [pc, #624]	@ (80052a4 <main+0x2c4>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8005038:	4b9b      	ldr	r3, [pc, #620]	@ (80052a8 <main+0x2c8>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 800503e:	4b9b      	ldr	r3, [pc, #620]	@ (80052ac <main+0x2cc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a9b      	ldr	r2, [pc, #620]	@ (80052b0 <main+0x2d0>)
 8005044:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8005046:	4b9b      	ldr	r3, [pc, #620]	@ (80052b4 <main+0x2d4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a99      	ldr	r2, [pc, #612]	@ (80052b0 <main+0x2d0>)
 800504c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 800504e:	4b9a      	ldr	r3, [pc, #616]	@ (80052b8 <main+0x2d8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a97      	ldr	r2, [pc, #604]	@ (80052b0 <main+0x2d0>)
 8005054:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8005056:	4b96      	ldr	r3, [pc, #600]	@ (80052b0 <main+0x2d0>)
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 800505e:	4b97      	ldr	r3, [pc, #604]	@ (80052bc <main+0x2dc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a97      	ldr	r2, [pc, #604]	@ (80052c0 <main+0x2e0>)
 8005064:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8005066:	4b97      	ldr	r3, [pc, #604]	@ (80052c4 <main+0x2e4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a95      	ldr	r2, [pc, #596]	@ (80052c0 <main+0x2e0>)
 800506c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 800506e:	4b96      	ldr	r3, [pc, #600]	@ (80052c8 <main+0x2e8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a93      	ldr	r2, [pc, #588]	@ (80052c0 <main+0x2e0>)
 8005074:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8005076:	4b92      	ldr	r3, [pc, #584]	@ (80052c0 <main+0x2e0>)
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 800507e:	4b93      	ldr	r3, [pc, #588]	@ (80052cc <main+0x2ec>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a93      	ldr	r2, [pc, #588]	@ (80052d0 <main+0x2f0>)
 8005084:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8005086:	4b93      	ldr	r3, [pc, #588]	@ (80052d4 <main+0x2f4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a91      	ldr	r2, [pc, #580]	@ (80052d0 <main+0x2f0>)
 800508c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 800508e:	4b92      	ldr	r3, [pc, #584]	@ (80052d8 <main+0x2f8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a8f      	ldr	r2, [pc, #572]	@ (80052d0 <main+0x2f0>)
 8005094:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8005096:	4b8e      	ldr	r3, [pc, #568]	@ (80052d0 <main+0x2f0>)
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 800509e:	4b8f      	ldr	r3, [pc, #572]	@ (80052dc <main+0x2fc>)
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4b8e      	ldr	r3, [pc, #568]	@ (80052e0 <main+0x300>)
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	4b8d      	ldr	r3, [pc, #564]	@ (80052e4 <main+0x304>)
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	4b8c      	ldr	r3, [pc, #560]	@ (80052e8 <main+0x308>)
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	4b8b      	ldr	r3, [pc, #556]	@ (80052ec <main+0x30c>)
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	4b8a      	ldr	r3, [pc, #552]	@ (80052f0 <main+0x310>)
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 80050ce:	4b89      	ldr	r3, [pc, #548]	@ (80052f4 <main+0x314>)
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 80050d6:	4b88      	ldr	r3, [pc, #544]	@ (80052f8 <main+0x318>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	4b87      	ldr	r3, [pc, #540]	@ (80052fc <main+0x31c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 80050e2:	4b87      	ldr	r3, [pc, #540]	@ (8005300 <main+0x320>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 80050e8:	4b86      	ldr	r3, [pc, #536]	@ (8005304 <main+0x324>)
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	4b85      	ldr	r3, [pc, #532]	@ (8005308 <main+0x328>)
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	4b84      	ldr	r3, [pc, #528]	@ (800530c <main+0x32c>)
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	4b83      	ldr	r3, [pc, #524]	@ (8005310 <main+0x330>)
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8005108:	4b82      	ldr	r3, [pc, #520]	@ (8005314 <main+0x334>)
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8005110:	4b81      	ldr	r3, [pc, #516]	@ (8005318 <main+0x338>)
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005118:	4b80      	ldr	r3, [pc, #512]	@ (800531c <main+0x33c>)
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8005120:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <main+0x340>)
 8005122:	2200      	movs	r2, #0
 8005124:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8005126:	4b7f      	ldr	r3, [pc, #508]	@ (8005324 <main+0x344>)
 8005128:	f242 7210 	movw	r2, #10000	@ 0x2710
 800512c:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 800512e:	4b7e      	ldr	r3, [pc, #504]	@ (8005328 <main+0x348>)
 8005130:	2200      	movs	r2, #0
 8005132:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 8005134:	4b7d      	ldr	r3, [pc, #500]	@ (800532c <main+0x34c>)
 8005136:	2200      	movs	r2, #0
 8005138:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 800513a:	4b7d      	ldr	r3, [pc, #500]	@ (8005330 <main+0x350>)
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8005142:	4b7c      	ldr	r3, [pc, #496]	@ (8005334 <main+0x354>)
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 800514a:	4b7b      	ldr	r3, [pc, #492]	@ (8005338 <main+0x358>)
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8005152:	4b7a      	ldr	r3, [pc, #488]	@ (800533c <main+0x35c>)
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 800515a:	4b79      	ldr	r3, [pc, #484]	@ (8005340 <main+0x360>)
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8005162:	4b78      	ldr	r3, [pc, #480]	@ (8005344 <main+0x364>)
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 800516a:	4b77      	ldr	r3, [pc, #476]	@ (8005348 <main+0x368>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8005170:	4b76      	ldr	r3, [pc, #472]	@ (800534c <main+0x36c>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8005176:	4b76      	ldr	r3, [pc, #472]	@ (8005350 <main+0x370>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 800517c:	4b75      	ldr	r3, [pc, #468]	@ (8005354 <main+0x374>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8005182:	4b75      	ldr	r3, [pc, #468]	@ (8005358 <main+0x378>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005188:	4b74      	ldr	r3, [pc, #464]	@ (800535c <main+0x37c>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 800518e:	4b74      	ldr	r3, [pc, #464]	@ (8005360 <main+0x380>)
 8005190:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005194:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8005196:	4b73      	ldr	r3, [pc, #460]	@ (8005364 <main+0x384>)
 8005198:	f642 1204 	movw	r2, #10500	@ 0x2904
 800519c:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 800519e:	4b72      	ldr	r3, [pc, #456]	@ (8005368 <main+0x388>)
 80051a0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051a4:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 80051a6:	4b71      	ldr	r3, [pc, #452]	@ (800536c <main+0x38c>)
 80051a8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051ac:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 80051ae:	4b70      	ldr	r3, [pc, #448]	@ (8005370 <main+0x390>)
 80051b0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051b4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 80051b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005374 <main+0x394>)
 80051b8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051bc:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 80051be:	4b6e      	ldr	r3, [pc, #440]	@ (8005378 <main+0x398>)
 80051c0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051c4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 80051c6:	4b6d      	ldr	r3, [pc, #436]	@ (800537c <main+0x39c>)
 80051c8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051cc:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 80051ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005380 <main+0x3a0>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 80051d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005384 <main+0x3a4>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 80051da:	4b6b      	ldr	r3, [pc, #428]	@ (8005388 <main+0x3a8>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 80051e0:	4b6a      	ldr	r3, [pc, #424]	@ (800538c <main+0x3ac>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 80051e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005390 <main+0x3b0>)
 80051e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80051ec:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 80051ee:	4b69      	ldr	r3, [pc, #420]	@ (8005394 <main+0x3b4>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	4b68      	ldr	r3, [pc, #416]	@ (8005398 <main+0x3b8>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	4b68      	ldr	r3, [pc, #416]	@ (800539c <main+0x3bc>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005200:	4b67      	ldr	r3, [pc, #412]	@ (80053a0 <main+0x3c0>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	4b67      	ldr	r3, [pc, #412]	@ (80053a4 <main+0x3c4>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 800520c:	4966      	ldr	r1, [pc, #408]	@ (80053a8 <main+0x3c8>)
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9c1 2300 	strd	r2, r3, [r1]

	  p_angular_rate_pitchfactor = 10;
 800521a:	4b64      	ldr	r3, [pc, #400]	@ (80053ac <main+0x3cc>)
 800521c:	4a64      	ldr	r2, [pc, #400]	@ (80053b0 <main+0x3d0>)
 800521e:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 10;
 8005220:	4b64      	ldr	r3, [pc, #400]	@ (80053b4 <main+0x3d4>)
 8005222:	4a63      	ldr	r2, [pc, #396]	@ (80053b0 <main+0x3d0>)
 8005224:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 10;
 8005226:	4b64      	ldr	r3, [pc, #400]	@ (80053b8 <main+0x3d8>)
 8005228:	4a61      	ldr	r2, [pc, #388]	@ (80053b0 <main+0x3d0>)
 800522a:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 0;
 800522c:	4b63      	ldr	r3, [pc, #396]	@ (80053bc <main+0x3dc>)
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 0;
 8005234:	4b62      	ldr	r3, [pc, #392]	@ (80053c0 <main+0x3e0>)
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 800523c:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <main+0x3e4>)
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8005244:	4b60      	ldr	r3, [pc, #384]	@ (80053c8 <main+0x3e8>)
 8005246:	4a61      	ldr	r2, [pc, #388]	@ (80053cc <main+0x3ec>)
 8005248:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 800524a:	4b61      	ldr	r3, [pc, #388]	@ (80053d0 <main+0x3f0>)
 800524c:	4a61      	ldr	r2, [pc, #388]	@ (80053d4 <main+0x3f4>)
 800524e:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8005250:	4b61      	ldr	r3, [pc, #388]	@ (80053d8 <main+0x3f8>)
 8005252:	4a62      	ldr	r2, [pc, #392]	@ (80053dc <main+0x3fc>)
 8005254:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 6.5;//*1.5 6
 8005256:	4b15      	ldr	r3, [pc, #84]	@ (80052ac <main+0x2cc>)
 8005258:	4a61      	ldr	r2, [pc, #388]	@ (80053e0 <main+0x400>)
 800525a:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 4.5;//5
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <main+0x2dc>)
 800525e:	4a61      	ldr	r2, [pc, #388]	@ (80053e4 <main+0x404>)
 8005260:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 3;
 8005262:	4b1a      	ldr	r3, [pc, #104]	@ (80052cc <main+0x2ec>)
 8005264:	4a60      	ldr	r2, [pc, #384]	@ (80053e8 <main+0x408>)
 8005266:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 8;//8
 8005268:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <main+0x2d4>)
 800526a:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800526e:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 10;//10
 8005270:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <main+0x2e4>)
 8005272:	4a4f      	ldr	r2, [pc, #316]	@ (80053b0 <main+0x3d0>)
 8005274:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8005276:	4b17      	ldr	r3, [pc, #92]	@ (80052d4 <main+0x2f4>)
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 25;//25
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <main+0x2d8>)
 8005280:	4a5a      	ldr	r2, [pc, #360]	@ (80053ec <main+0x40c>)
 8005282:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 0;
 8005284:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <main+0x2e8>)
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <main+0x2f8>)
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005294:	4b45      	ldr	r3, [pc, #276]	@ (80053ac <main+0x3cc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a55      	ldr	r2, [pc, #340]	@ (80053f0 <main+0x410>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	e0aa      	b.n	80053f4 <main+0x414>
 800529e:	bf00      	nop
 80052a0:	58021800 	.word	0x58021800
 80052a4:	00000080 	.word	0x00000080
 80052a8:	000041c4 	.word	0x000041c4
 80052ac:	000040f4 	.word	0x000040f4
 80052b0:	00004118 	.word	0x00004118
 80052b4:	00004100 	.word	0x00004100
 80052b8:	0000410c 	.word	0x0000410c
 80052bc:	000040f8 	.word	0x000040f8
 80052c0:	0000412c 	.word	0x0000412c
 80052c4:	00004104 	.word	0x00004104
 80052c8:	00004110 	.word	0x00004110
 80052cc:	000040fc 	.word	0x000040fc
 80052d0:	00004140 	.word	0x00004140
 80052d4:	00004108 	.word	0x00004108
 80052d8:	00004114 	.word	0x00004114
 80052dc:	00000018 	.word	0x00000018
 80052e0:	0000001c 	.word	0x0000001c
 80052e4:	00000020 	.word	0x00000020
 80052e8:	00000024 	.word	0x00000024
 80052ec:	00000028 	.word	0x00000028
 80052f0:	0000002c 	.word	0x0000002c
 80052f4:	00000058 	.word	0x00000058
 80052f8:	00000078 	.word	0x00000078
 80052fc:	0000007c 	.word	0x0000007c
 8005300:	00000084 	.word	0x00000084
 8005304:	000000e8 	.word	0x000000e8
 8005308:	000000ec 	.word	0x000000ec
 800530c:	000000f0 	.word	0x000000f0
 8005310:	000000f4 	.word	0x000000f4
 8005314:	0000405c 	.word	0x0000405c
 8005318:	00004060 	.word	0x00004060
 800531c:	00004064 	.word	0x00004064
 8005320:	00004068 	.word	0x00004068
 8005324:	0000406a 	.word	0x0000406a
 8005328:	00004084 	.word	0x00004084
 800532c:	00004086 	.word	0x00004086
 8005330:	000040ac 	.word	0x000040ac
 8005334:	000040b0 	.word	0x000040b0
 8005338:	000040b4 	.word	0x000040b4
 800533c:	000040b8 	.word	0x000040b8
 8005340:	000040bc 	.word	0x000040bc
 8005344:	000040c0 	.word	0x000040c0
 8005348:	000040c4 	.word	0x000040c4
 800534c:	000040c8 	.word	0x000040c8
 8005350:	000040cc 	.word	0x000040cc
 8005354:	000040d0 	.word	0x000040d0
 8005358:	000040d4 	.word	0x000040d4
 800535c:	000040d8 	.word	0x000040d8
 8005360:	000041b4 	.word	0x000041b4
 8005364:	000041b6 	.word	0x000041b6
 8005368:	000041b8 	.word	0x000041b8
 800536c:	000041ba 	.word	0x000041ba
 8005370:	000041bc 	.word	0x000041bc
 8005374:	000041be 	.word	0x000041be
 8005378:	000041c0 	.word	0x000041c0
 800537c:	000041c2 	.word	0x000041c2
 8005380:	000041e6 	.word	0x000041e6
 8005384:	000041e7 	.word	0x000041e7
 8005388:	000041ec 	.word	0x000041ec
 800538c:	000041f0 	.word	0x000041f0
 8005390:	000041f8 	.word	0x000041f8
 8005394:	000041fc 	.word	0x000041fc
 8005398:	000041fd 	.word	0x000041fd
 800539c:	000041fe 	.word	0x000041fe
 80053a0:	00004200 	.word	0x00004200
 80053a4:	00004204 	.word	0x00004204
 80053a8:	00004070 	.word	0x00004070
 80053ac:	00004154 	.word	0x00004154
 80053b0:	41200000 	.word	0x41200000
 80053b4:	00004158 	.word	0x00004158
 80053b8:	0000415c 	.word	0x0000415c
 80053bc:	00004160 	.word	0x00004160
 80053c0:	00004164 	.word	0x00004164
 80053c4:	00004168 	.word	0x00004168
 80053c8:	0000416c 	.word	0x0000416c
 80053cc:	41f00000 	.word	0x41f00000
 80053d0:	00004170 	.word	0x00004170
 80053d4:	41a00000 	.word	0x41a00000
 80053d8:	00004174 	.word	0x00004174
 80053dc:	40a00000 	.word	0x40a00000
 80053e0:	40d00000 	.word	0x40d00000
 80053e4:	40900000 	.word	0x40900000
 80053e8:	40400000 	.word	0x40400000
 80053ec:	41c80000 	.word	0x41c80000
 80053f0:	00004178 	.word	0x00004178
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80053f4:	4ba6      	ldr	r3, [pc, #664]	@ (8005690 <main+0x6b0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4aa6      	ldr	r2, [pc, #664]	@ (8005694 <main+0x6b4>)
 80053fa:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 80053fc:	4ba6      	ldr	r3, [pc, #664]	@ (8005698 <main+0x6b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4aa4      	ldr	r2, [pc, #656]	@ (8005694 <main+0x6b4>)
 8005402:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005404:	4ba5      	ldr	r3, [pc, #660]	@ (800569c <main+0x6bc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4aa5      	ldr	r2, [pc, #660]	@ (80056a0 <main+0x6c0>)
 800540a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 800540c:	4ba5      	ldr	r3, [pc, #660]	@ (80056a4 <main+0x6c4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4aa3      	ldr	r2, [pc, #652]	@ (80056a0 <main+0x6c0>)
 8005412:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005414:	4ba4      	ldr	r3, [pc, #656]	@ (80056a8 <main+0x6c8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4aa1      	ldr	r2, [pc, #644]	@ (80056a0 <main+0x6c0>)
 800541a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 800541c:	4ba3      	ldr	r3, [pc, #652]	@ (80056ac <main+0x6cc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4aa3      	ldr	r2, [pc, #652]	@ (80056b0 <main+0x6d0>)
 8005422:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005424:	4ba3      	ldr	r3, [pc, #652]	@ (80056b4 <main+0x6d4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4aa1      	ldr	r2, [pc, #644]	@ (80056b0 <main+0x6d0>)
 800542a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 800542c:	4ba2      	ldr	r3, [pc, #648]	@ (80056b8 <main+0x6d8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a9f      	ldr	r2, [pc, #636]	@ (80056b0 <main+0x6d0>)
 8005432:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 8005434:	4ba1      	ldr	r3, [pc, #644]	@ (80056bc <main+0x6dc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4aa1      	ldr	r2, [pc, #644]	@ (80056c0 <main+0x6e0>)
 800543a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 800543c:	4ba1      	ldr	r3, [pc, #644]	@ (80056c4 <main+0x6e4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a9f      	ldr	r2, [pc, #636]	@ (80056c0 <main+0x6e0>)
 8005442:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 8005444:	4ba0      	ldr	r3, [pc, #640]	@ (80056c8 <main+0x6e8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a9d      	ldr	r2, [pc, #628]	@ (80056c0 <main+0x6e0>)
 800544a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 800544c:	4b9f      	ldr	r3, [pc, #636]	@ (80056cc <main+0x6ec>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a9f      	ldr	r2, [pc, #636]	@ (80056d0 <main+0x6f0>)
 8005452:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 8005454:	4b9f      	ldr	r3, [pc, #636]	@ (80056d4 <main+0x6f4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a9d      	ldr	r2, [pc, #628]	@ (80056d0 <main+0x6f0>)
 800545a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 800545c:	4b9e      	ldr	r3, [pc, #632]	@ (80056d8 <main+0x6f8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a9b      	ldr	r2, [pc, #620]	@ (80056d0 <main+0x6f0>)
 8005462:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005464:	4b9d      	ldr	r3, [pc, #628]	@ (80056dc <main+0x6fc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a9d      	ldr	r2, [pc, #628]	@ (80056e0 <main+0x700>)
 800546a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 800546c:	4b9d      	ldr	r3, [pc, #628]	@ (80056e4 <main+0x704>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a9b      	ldr	r2, [pc, #620]	@ (80056e0 <main+0x700>)
 8005472:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005474:	4b9c      	ldr	r3, [pc, #624]	@ (80056e8 <main+0x708>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a99      	ldr	r2, [pc, #612]	@ (80056e0 <main+0x700>)
 800547a:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 800547c:	4b9b      	ldr	r3, [pc, #620]	@ (80056ec <main+0x70c>)
 800547e:	2200      	movs	r2, #0
 8005480:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 8005482:	4b9b      	ldr	r3, [pc, #620]	@ (80056f0 <main+0x710>)
 8005484:	2200      	movs	r2, #0
 8005486:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 8005488:	4b9a      	ldr	r3, [pc, #616]	@ (80056f4 <main+0x714>)
 800548a:	2200      	movs	r2, #0
 800548c:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 800548e:	4b9a      	ldr	r3, [pc, #616]	@ (80056f8 <main+0x718>)
 8005490:	2200      	movs	r2, #0
 8005492:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005494:	4b99      	ldr	r3, [pc, #612]	@ (80056fc <main+0x71c>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 800549c:	4b97      	ldr	r3, [pc, #604]	@ (80056fc <main+0x71c>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 80054a4:	4b95      	ldr	r3, [pc, #596]	@ (80056fc <main+0x71c>)
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 80054ac:	4b93      	ldr	r3, [pc, #588]	@ (80056fc <main+0x71c>)
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 80054b4:	4b91      	ldr	r3, [pc, #580]	@ (80056fc <main+0x71c>)
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 80054bc:	4b8f      	ldr	r3, [pc, #572]	@ (80056fc <main+0x71c>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 80054c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005700 <main+0x720>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 80054cc:	4b8d      	ldr	r3, [pc, #564]	@ (8005704 <main+0x724>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 80054d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005708 <main+0x728>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 80054dc:	4b8b      	ldr	r3, [pc, #556]	@ (800570c <main+0x72c>)
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 80054e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005710 <main+0x730>)
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 80054ec:	4b89      	ldr	r3, [pc, #548]	@ (8005714 <main+0x734>)
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 80054f4:	4b88      	ldr	r3, [pc, #544]	@ (8005718 <main+0x738>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 80054fc:	4b86      	ldr	r3, [pc, #536]	@ (8005718 <main+0x738>)
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 8005504:	4b84      	ldr	r3, [pc, #528]	@ (8005718 <main+0x738>)
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 800550c:	4b83      	ldr	r3, [pc, #524]	@ (800571c <main+0x73c>)
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	4b82      	ldr	r3, [pc, #520]	@ (8005720 <main+0x740>)
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	4b81      	ldr	r3, [pc, #516]	@ (8005724 <main+0x744>)
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	4b80      	ldr	r3, [pc, #512]	@ (8005728 <main+0x748>)
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	4b7f      	ldr	r3, [pc, #508]	@ (800572c <main+0x74c>)
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b7e      	ldr	r3, [pc, #504]	@ (8005730 <main+0x750>)
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 800553c:	4b7d      	ldr	r3, [pc, #500]	@ (8005734 <main+0x754>)
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	4b7c      	ldr	r3, [pc, #496]	@ (8005738 <main+0x758>)
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	4b7b      	ldr	r3, [pc, #492]	@ (800573c <main+0x75c>)
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	4b7a      	ldr	r3, [pc, #488]	@ (8005740 <main+0x760>)
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	4b79      	ldr	r3, [pc, #484]	@ (8005744 <main+0x764>)
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	4b78      	ldr	r3, [pc, #480]	@ (8005748 <main+0x768>)
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 800556c:	4b77      	ldr	r3, [pc, #476]	@ (800574c <main+0x76c>)
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	4b76      	ldr	r3, [pc, #472]	@ (8005750 <main+0x770>)
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	4b75      	ldr	r3, [pc, #468]	@ (8005754 <main+0x774>)
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	4b74      	ldr	r3, [pc, #464]	@ (8005758 <main+0x778>)
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	4b73      	ldr	r3, [pc, #460]	@ (800575c <main+0x77c>)
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	4b72      	ldr	r3, [pc, #456]	@ (8005760 <main+0x780>)
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 800559c:	4b71      	ldr	r3, [pc, #452]	@ (8005764 <main+0x784>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 80055a2:	4b71      	ldr	r3, [pc, #452]	@ (8005768 <main+0x788>)
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 80055aa:	4b70      	ldr	r3, [pc, #448]	@ (800576c <main+0x78c>)
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 80055b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005770 <main+0x790>)
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 80055ba:	4b6e      	ldr	r3, [pc, #440]	@ (8005774 <main+0x794>)
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 80055c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005778 <main+0x798>)
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 80055ca:	4b6c      	ldr	r3, [pc, #432]	@ (800577c <main+0x79c>)
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 80055d2:	4b6b      	ldr	r3, [pc, #428]	@ (8005780 <main+0x7a0>)
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
  	pitch_ar_error = 0;
 80055da:	4b6a      	ldr	r3, [pc, #424]	@ (8005784 <main+0x7a4>)
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 80055e2:	4b69      	ldr	r3, [pc, #420]	@ (8005788 <main+0x7a8>)
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 80055ea:	4b68      	ldr	r3, [pc, #416]	@ (800578c <main+0x7ac>)
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 80055f2:	4a67      	ldr	r2, [pc, #412]	@ (8005790 <main+0x7b0>)
 80055f4:	f107 0308 	add.w	r3, r7, #8
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4611      	mov	r1, r2
 80055fc:	8019      	strh	r1, [r3, #0]
 80055fe:	3302      	adds	r3, #2
 8005600:	0c12      	lsrs	r2, r2, #16
 8005602:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8005604:	4a63      	ldr	r2, [pc, #396]	@ (8005794 <main+0x7b4>)
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4611      	mov	r1, r2
 800560c:	8019      	strh	r1, [r3, #0]
 800560e:	3302      	adds	r3, #2
 8005610:	0c12      	lsrs	r2, r2, #16
 8005612:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8005614:	2201      	movs	r2, #1
 8005616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800561a:	485f      	ldr	r0, [pc, #380]	@ (8005798 <main+0x7b8>)
 800561c:	f009 f902 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005620:	2201      	movs	r2, #1
 8005622:	2108      	movs	r1, #8
 8005624:	485d      	ldr	r0, [pc, #372]	@ (800579c <main+0x7bc>)
 8005626:	f009 f8fd 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_7_1;
 800562a:	2201      	movs	r2, #1
 800562c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005630:	4859      	ldr	r0, [pc, #356]	@ (8005798 <main+0x7b8>)
 8005632:	f009 f8f7 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8005636:	2201      	movs	r2, #1
 8005638:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800563c:	4858      	ldr	r0, [pc, #352]	@ (80057a0 <main+0x7c0>)
 800563e:	f009 f8f1 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005642:	2201      	movs	r2, #1
 8005644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005648:	4854      	ldr	r0, [pc, #336]	@ (800579c <main+0x7bc>)
 800564a:	f009 f8eb 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_Y_1;
 800564e:	2201      	movs	r2, #1
 8005650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005654:	4853      	ldr	r0, [pc, #332]	@ (80057a4 <main+0x7c4>)
 8005656:	f009 f8e5 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_R_1;
 800565a:	2201      	movs	r2, #1
 800565c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005660:	4850      	ldr	r0, [pc, #320]	@ (80057a4 <main+0x7c4>)
 8005662:	f009 f8df 	bl	800e824 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800566a:	f003 ff9f 	bl	80095ac <HAL_Delay>
  	LED_G_0;
 800566e:	2200      	movs	r2, #0
 8005670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005674:	4849      	ldr	r0, [pc, #292]	@ (800579c <main+0x7bc>)
 8005676:	f009 f8d5 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_Y_0;
 800567a:	2200      	movs	r2, #0
 800567c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005680:	4848      	ldr	r0, [pc, #288]	@ (80057a4 <main+0x7c4>)
 8005682:	f009 f8cf 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005686:	2200      	movs	r2, #0
 8005688:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800568c:	e08c      	b.n	80057a8 <main+0x7c8>
 800568e:	bf00      	nop
 8005690:	00004160 	.word	0x00004160
 8005694:	00004178 	.word	0x00004178
 8005698:	0000416c 	.word	0x0000416c
 800569c:	00004158 	.word	0x00004158
 80056a0:	0000418c 	.word	0x0000418c
 80056a4:	00004164 	.word	0x00004164
 80056a8:	00004170 	.word	0x00004170
 80056ac:	0000415c 	.word	0x0000415c
 80056b0:	000041a0 	.word	0x000041a0
 80056b4:	00004168 	.word	0x00004168
 80056b8:	00004174 	.word	0x00004174
 80056bc:	000040f4 	.word	0x000040f4
 80056c0:	00004118 	.word	0x00004118
 80056c4:	00004100 	.word	0x00004100
 80056c8:	0000410c 	.word	0x0000410c
 80056cc:	000040f8 	.word	0x000040f8
 80056d0:	0000412c 	.word	0x0000412c
 80056d4:	00004104 	.word	0x00004104
 80056d8:	00004110 	.word	0x00004110
 80056dc:	000040fc 	.word	0x000040fc
 80056e0:	00004140 	.word	0x00004140
 80056e4:	00004108 	.word	0x00004108
 80056e8:	00004114 	.word	0x00004114
 80056ec:	00004054 	.word	0x00004054
 80056f0:	00004056 	.word	0x00004056
 80056f4:	00004058 	.word	0x00004058
 80056f8:	0000405a 	.word	0x0000405a
 80056fc:	00000088 	.word	0x00000088
 8005700:	000040dc 	.word	0x000040dc
 8005704:	000040e0 	.word	0x000040e0
 8005708:	000040e4 	.word	0x000040e4
 800570c:	000040e8 	.word	0x000040e8
 8005710:	000040ec 	.word	0x000040ec
 8005714:	000040f0 	.word	0x000040f0
 8005718:	00000184 	.word	0x00000184
 800571c:	00000000 	.word	0x00000000
 8005720:	00000004 	.word	0x00000004
 8005724:	00000008 	.word	0x00000008
 8005728:	0000000c 	.word	0x0000000c
 800572c:	00000010 	.word	0x00000010
 8005730:	00000014 	.word	0x00000014
 8005734:	00000018 	.word	0x00000018
 8005738:	0000001c 	.word	0x0000001c
 800573c:	00000020 	.word	0x00000020
 8005740:	00000024 	.word	0x00000024
 8005744:	00000028 	.word	0x00000028
 8005748:	0000002c 	.word	0x0000002c
 800574c:	00000030 	.word	0x00000030
 8005750:	00000034 	.word	0x00000034
 8005754:	00000038 	.word	0x00000038
 8005758:	0000003c 	.word	0x0000003c
 800575c:	00000040 	.word	0x00000040
 8005760:	00000044 	.word	0x00000044
 8005764:	00000180 	.word	0x00000180
 8005768:	00004088 	.word	0x00004088
 800576c:	0000408c 	.word	0x0000408c
 8005770:	00004090 	.word	0x00004090
 8005774:	00004078 	.word	0x00004078
 8005778:	00004094 	.word	0x00004094
 800577c:	00004098 	.word	0x00004098
 8005780:	0000409c 	.word	0x0000409c
 8005784:	000040a0 	.word	0x000040a0
 8005788:	000040a4 	.word	0x000040a4
 800578c:	000040a8 	.word	0x000040a8
 8005790:	0801ebac 	.word	0x0801ebac
 8005794:	0801ebb0 	.word	0x0801ebb0
 8005798:	58020000 	.word	0x58020000
 800579c:	58021000 	.word	0x58021000
 80057a0:	58020c00 	.word	0x58020c00
 80057a4:	58020400 	.word	0x58020400
 80057a8:	48aa      	ldr	r0, [pc, #680]	@ (8005a54 <main+0xa74>)
 80057aa:	f009 f83b 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_5_0;
 80057ae:	2200      	movs	r2, #0
 80057b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057b4:	48a8      	ldr	r0, [pc, #672]	@ (8005a58 <main+0xa78>)
 80057b6:	f009 f835 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_6_0;
 80057ba:	2200      	movs	r2, #0
 80057bc:	2108      	movs	r1, #8
 80057be:	48a7      	ldr	r0, [pc, #668]	@ (8005a5c <main+0xa7c>)
 80057c0:	f009 f830 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_7_0;
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057ca:	48a3      	ldr	r0, [pc, #652]	@ (8005a58 <main+0xa78>)
 80057cc:	f009 f82a 	bl	800e824 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80057d0:	2200      	movs	r2, #0
 80057d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057d6:	48a2      	ldr	r0, [pc, #648]	@ (8005a60 <main+0xa80>)
 80057d8:	f009 f824 	bl	800e824 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 80057dc:	2300      	movs	r3, #0
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	e009      	b.n	80057f6 <main+0x816>
  		Old_Data_stack.olddata[i] = 0;
 80057e2:	4aa0      	ldr	r2, [pc, #640]	@ (8005a64 <main+0xa84>)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80057fc:	dbf1      	blt.n	80057e2 <main+0x802>
  	}
  	Old_Data_stack.start_pointer = 0;
 80057fe:	4b99      	ldr	r3, [pc, #612]	@ (8005a64 <main+0xa84>)
 8005800:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 800580a:	4b96      	ldr	r3, [pc, #600]	@ (8005a64 <main+0xa84>)
 800580c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005810:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005814:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005818:	4b93      	ldr	r3, [pc, #588]	@ (8005a68 <main+0xa88>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 800581e:	4893      	ldr	r0, [pc, #588]	@ (8005a6c <main+0xa8c>)
 8005820:	f010 fdf0 	bl	8016404 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005824:	2201      	movs	r2, #1
 8005826:	4990      	ldr	r1, [pc, #576]	@ (8005a68 <main+0xa88>)
 8005828:	4891      	ldr	r0, [pc, #580]	@ (8005a70 <main+0xa90>)
 800582a:	f004 fc11 	bl	800a050 <HAL_ADC_Start_DMA>
  	LED_R_1;
 800582e:	2201      	movs	r2, #1
 8005830:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005834:	4887      	ldr	r0, [pc, #540]	@ (8005a54 <main+0xa74>)
 8005836:	f008 fff5 	bl	800e824 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 800583a:	bf00      	nop
 800583c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a68 <main+0xa88>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0fb      	beq.n	800583c <main+0x85c>

  	}
  	LED_R_0;
 8005844:	2200      	movs	r2, #0
 8005846:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800584a:	4882      	ldr	r0, [pc, #520]	@ (8005a54 <main+0xa74>)
 800584c:	f008 ffea 	bl	800e824 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005850:	f7fe fcbe 	bl	80041d0 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005854:	2104      	movs	r1, #4
 8005856:	4887      	ldr	r0, [pc, #540]	@ (8005a74 <main+0xa94>)
 8005858:	f010 ff30 	bl	80166bc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800585c:	2108      	movs	r1, #8
 800585e:	4885      	ldr	r0, [pc, #532]	@ (8005a74 <main+0xa94>)
 8005860:	f010 ff2c 	bl	80166bc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005864:	210c      	movs	r1, #12
 8005866:	4883      	ldr	r0, [pc, #524]	@ (8005a74 <main+0xa94>)
 8005868:	f010 ff28 	bl	80166bc <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800586c:	4b82      	ldr	r3, [pc, #520]	@ (8005a78 <main+0xa98>)
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	4618      	mov	r0, r3
 8005874:	f001 fea4 	bl	80075c0 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005878:	4b7f      	ldr	r3, [pc, #508]	@ (8005a78 <main+0xa98>)
 800587a:	8a9b      	ldrh	r3, [r3, #20]
 800587c:	2b07      	cmp	r3, #7
 800587e:	d107      	bne.n	8005890 <main+0x8b0>
  	{
  		LED_R_1;
 8005880:	2201      	movs	r2, #1
 8005882:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005886:	4873      	ldr	r0, [pc, #460]	@ (8005a54 <main+0xa74>)
 8005888:	f008 ffcc 	bl	800e824 <HAL_GPIO_WritePin>
  		while(1){
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <main+0x8ac>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005890:	4b79      	ldr	r3, [pc, #484]	@ (8005a78 <main+0xa98>)
 8005892:	8a9b      	ldrh	r3, [r3, #20]
 8005894:	2b09      	cmp	r3, #9
 8005896:	d107      	bne.n	80058a8 <main+0x8c8>
  		LED_R_1;
 8005898:	2201      	movs	r2, #1
 800589a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800589e:	486d      	ldr	r0, [pc, #436]	@ (8005a54 <main+0xa74>)
 80058a0:	f008 ffc0 	bl	800e824 <HAL_GPIO_WritePin>
  		while(1){
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <main+0x8c4>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80058a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80058ac:	4869      	ldr	r0, [pc, #420]	@ (8005a54 <main+0xa74>)
 80058ae:	f008 ffa1 	bl	800e7f4 <HAL_GPIO_ReadPin>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b71      	ldr	r3, [pc, #452]	@ (8005a7c <main+0xa9c>)
 80058b8:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80058ba:	4b70      	ldr	r3, [pc, #448]	@ (8005a7c <main+0xa9c>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d103      	bne.n	80058ca <main+0x8ea>
		SD_enable_Flag = 0;
 80058c2:	4b6e      	ldr	r3, [pc, #440]	@ (8005a7c <main+0xa9c>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e002      	b.n	80058d0 <main+0x8f0>
	}
	else{
		SD_enable_Flag = 1;
 80058ca:	4b6c      	ldr	r3, [pc, #432]	@ (8005a7c <main+0xa9c>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80058d0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a7c <main+0xa9c>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d15f      	bne.n	8005998 <main+0x9b8>
		LED_uSD_1;
 80058d8:	2201      	movs	r2, #1
 80058da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058de:	4860      	ldr	r0, [pc, #384]	@ (8005a60 <main+0xa80>)
 80058e0:	f008 ffa0 	bl	800e824 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80058e4:	2201      	movs	r2, #1
 80058e6:	4966      	ldr	r1, [pc, #408]	@ (8005a80 <main+0xaa0>)
 80058e8:	4866      	ldr	r0, [pc, #408]	@ (8005a84 <main+0xaa4>)
 80058ea:	f017 fe13 	bl	801d514 <f_mount>
 80058ee:	4603      	mov	r3, r0
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b65      	ldr	r3, [pc, #404]	@ (8005a88 <main+0xaa8>)
 80058f4:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80058f6:	4865      	ldr	r0, [pc, #404]	@ (8005a8c <main+0xaac>)
 80058f8:	f018 fa56 	bl	801dda8 <f_unlink>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	4b61      	ldr	r3, [pc, #388]	@ (8005a88 <main+0xaa8>)
 8005902:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005904:	2201      	movs	r2, #1
 8005906:	495e      	ldr	r1, [pc, #376]	@ (8005a80 <main+0xaa0>)
 8005908:	485e      	ldr	r0, [pc, #376]	@ (8005a84 <main+0xaa4>)
 800590a:	f017 fe03 	bl	801d514 <f_mount>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	4b5d      	ldr	r3, [pc, #372]	@ (8005a88 <main+0xaa8>)
 8005914:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005916:	220a      	movs	r2, #10
 8005918:	495d      	ldr	r1, [pc, #372]	@ (8005a90 <main+0xab0>)
 800591a:	485e      	ldr	r0, [pc, #376]	@ (8005a94 <main+0xab4>)
 800591c:	f017 fe40 	bl	801d5a0 <f_open>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	4b58      	ldr	r3, [pc, #352]	@ (8005a88 <main+0xaa8>)
 8005926:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005928:	2200      	movs	r2, #0
 800592a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800592e:	484c      	ldr	r0, [pc, #304]	@ (8005a60 <main+0xa80>)
 8005930:	f008 ff78 	bl	800e824 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005934:	2201      	movs	r2, #1
 8005936:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800593a:	4849      	ldr	r0, [pc, #292]	@ (8005a60 <main+0xa80>)
 800593c:	f008 ff72 	bl	800e824 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e007      	b.n	8005956 <main+0x976>
			DataToSendBuffer[i] = 49;
 8005946:	4a54      	ldr	r2, [pc, #336]	@ (8005a98 <main+0xab8>)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	4413      	add	r3, r2
 800594c:	2231      	movs	r2, #49	@ 0x31
 800594e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	3301      	adds	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4a50      	ldr	r2, [pc, #320]	@ (8005a9c <main+0xabc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	ddf3      	ble.n	8005946 <main+0x966>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 800595e:	4b50      	ldr	r3, [pc, #320]	@ (8005aa0 <main+0xac0>)
 8005960:	2281      	movs	r2, #129	@ 0x81
 8005962:	494d      	ldr	r1, [pc, #308]	@ (8005a98 <main+0xab8>)
 8005964:	484b      	ldr	r0, [pc, #300]	@ (8005a94 <main+0xab4>)
 8005966:	f017 ffe3 	bl	801d930 <f_write>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	4b46      	ldr	r3, [pc, #280]	@ (8005a88 <main+0xaa8>)
 8005970:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005972:	4848      	ldr	r0, [pc, #288]	@ (8005a94 <main+0xab4>)
 8005974:	f018 f9ee 	bl	801dd54 <f_close>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	4b42      	ldr	r3, [pc, #264]	@ (8005a88 <main+0xaa8>)
 800597e:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005980:	4b41      	ldr	r3, [pc, #260]	@ (8005a88 <main+0xaa8>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <main+0x9ac>
			while(1){
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <main+0x9a8>

			}
		}
		LED_uSD_0;
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005992:	4833      	ldr	r0, [pc, #204]	@ (8005a60 <main+0xa80>)
 8005994:	f008 ff46 	bl	800e824 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005998:	2201      	movs	r2, #1
 800599a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800599e:	482e      	ldr	r0, [pc, #184]	@ (8005a58 <main+0xa78>)
 80059a0:	f008 ff40 	bl	800e824 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80059a4:	483f      	ldr	r0, [pc, #252]	@ (8005aa4 <main+0xac4>)
 80059a6:	f7fb fc5b 	bl	8001260 <MPU6050_INIT>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <main+0x9e0>
			LED_R_1;
 80059b0:	2201      	movs	r2, #1
 80059b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059b6:	4827      	ldr	r0, [pc, #156]	@ (8005a54 <main+0xa74>)
 80059b8:	f008 ff34 	bl	800e824 <HAL_GPIO_WritePin>
			while(1){
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <main+0x9dc>
			}
		}
		LED_Y_1;
 80059c0:	2201      	movs	r2, #1
 80059c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059c6:	4823      	ldr	r0, [pc, #140]	@ (8005a54 <main+0xa74>)
 80059c8:	f008 ff2c 	bl	800e824 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 80059cc:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8005aa8 <main+0xac8>
 80059d0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005aac <main+0xacc>
 80059d4:	4b36      	ldr	r3, [pc, #216]	@ (8005ab0 <main+0xad0>)
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	4b36      	ldr	r3, [pc, #216]	@ (8005ab4 <main+0xad4>)
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	eef0 0a47 	vmov.f32	s1, s14
 80059e0:	eeb0 0a67 	vmov.f32	s0, s15
 80059e4:	4b34      	ldr	r3, [pc, #208]	@ (8005ab8 <main+0xad8>)
 80059e6:	4a35      	ldr	r2, [pc, #212]	@ (8005abc <main+0xadc>)
 80059e8:	4935      	ldr	r1, [pc, #212]	@ (8005ac0 <main+0xae0>)
 80059ea:	4836      	ldr	r0, [pc, #216]	@ (8005ac4 <main+0xae4>)
 80059ec:	f7fb fd02 	bl	80013f4 <MPU6050_CALIBRATION>
		LED_Y_0;
 80059f0:	2200      	movs	r2, #0
 80059f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059f6:	4817      	ldr	r0, [pc, #92]	@ (8005a54 <main+0xa74>)
 80059f8:	f008 ff14 	bl	800e824 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80059fc:	4829      	ldr	r0, [pc, #164]	@ (8005aa4 <main+0xac4>)
 80059fe:	f7fa fe67 	bl	80006d0 <BMP180_init>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <main+0xa38>
			LED_R_1;
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a0e:	4811      	ldr	r0, [pc, #68]	@ (8005a54 <main+0xa74>)
 8005a10:	f008 ff08 	bl	800e824 <HAL_GPIO_WritePin>
			while(1){
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <main+0xa34>
			}
		}
		LED_Y_1;
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a1e:	480d      	ldr	r0, [pc, #52]	@ (8005a54 <main+0xa74>)
 8005a20:	f008 ff00 	bl	800e824 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005a24:	4828      	ldr	r0, [pc, #160]	@ (8005ac8 <main+0xae8>)
 8005a26:	f7fb f9a5 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a30:	4808      	ldr	r0, [pc, #32]	@ (8005a54 <main+0xa74>)
 8005a32:	f008 fef7 	bl	800e824 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005a36:	481b      	ldr	r0, [pc, #108]	@ (8005aa4 <main+0xac4>)
 8005a38:	f7fb face 	bl	8000fd8 <HMC5883L_Init>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d144      	bne.n	8005acc <main+0xaec>
			LED_R_1;
 8005a42:	2201      	movs	r2, #1
 8005a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a48:	4802      	ldr	r0, [pc, #8]	@ (8005a54 <main+0xa74>)
 8005a4a:	f008 feeb 	bl	800e824 <HAL_GPIO_WritePin>
			while(1){
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <main+0xa6e>
 8005a52:	bf00      	nop
 8005a54:	58020400 	.word	0x58020400
 8005a58:	58020000 	.word	0x58020000
 8005a5c:	58021000 	.word	0x58021000
 8005a60:	58020c00 	.word	0x58020c00
 8005a64:	000001a8 	.word	0x000001a8
 8005a68:	24000eb0 	.word	0x24000eb0
 8005a6c:	24000464 	.word	0x24000464
 8005a70:	240000ac 	.word	0x240000ac
 8005a74:	24000380 	.word	0x24000380
 8005a78:	00000184 	.word	0x00000184
 8005a7c:	000041f4 	.word	0x000041f4
 8005a80:	0801eb90 	.word	0x0801eb90
 8005a84:	24000eb4 	.word	0x24000eb4
 8005a88:	24001eec 	.word	0x24001eec
 8005a8c:	0801eb94 	.word	0x0801eb94
 8005a90:	0801eba0 	.word	0x0801eba0
 8005a94:	24001ef0 	.word	0x24001ef0
 8005a98:	24002f28 	.word	0x24002f28
 8005a9c:	0001f7e7 	.word	0x0001f7e7
 8005aa0:	24002f24 	.word	0x24002f24
 8005aa4:	24000198 	.word	0x24000198
 8005aa8:	42830000 	.word	0x42830000
 8005aac:	46000000 	.word	0x46000000
 8005ab0:	00000044 	.word	0x00000044
 8005ab4:	00000040 	.word	0x00000040
 8005ab8:	0000003c 	.word	0x0000003c
 8005abc:	00000038 	.word	0x00000038
 8005ac0:	00000034 	.word	0x00000034
 8005ac4:	00000030 	.word	0x00000030
 8005ac8:	000000f0 	.word	0x000000f0
			}
		}
		LED_Y_1;
 8005acc:	2201      	movs	r2, #1
 8005ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ad2:	488c      	ldr	r0, [pc, #560]	@ (8005d04 <main+0xd24>)
 8005ad4:	f008 fea6 	bl	800e824 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005ad8:	f7fb fb8c 	bl	80011f4 <HMC5883L_Calibration>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4b89      	ldr	r3, [pc, #548]	@ (8005d08 <main+0xd28>)
 8005ae2:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005aea:	4886      	ldr	r0, [pc, #536]	@ (8005d04 <main+0xd24>)
 8005aec:	f008 fe9a 	bl	800e824 <HAL_GPIO_WritePin>

		LED_5_0;
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af6:	4885      	ldr	r0, [pc, #532]	@ (8005d0c <main+0xd2c>)
 8005af8:	f008 fe94 	bl	800e824 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005afc:	4b84      	ldr	r3, [pc, #528]	@ (8005d10 <main+0xd30>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005b02:	4b83      	ldr	r3, [pc, #524]	@ (8005d10 <main+0xd30>)
 8005b04:	220c      	movs	r2, #12
 8005b06:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005b08:	4b81      	ldr	r3, [pc, #516]	@ (8005d10 <main+0xd30>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005b0e:	4b80      	ldr	r3, [pc, #512]	@ (8005d10 <main+0xd30>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005b14:	4b7e      	ldr	r3, [pc, #504]	@ (8005d10 <main+0xd30>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005d10 <main+0xd30>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005b20:	2201      	movs	r2, #1
 8005b22:	2108      	movs	r1, #8
 8005b24:	487b      	ldr	r0, [pc, #492]	@ (8005d14 <main+0xd34>)
 8005b26:	f008 fe7d 	bl	800e824 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005b2a:	487b      	ldr	r0, [pc, #492]	@ (8005d18 <main+0xd38>)
 8005b2c:	f7fc fdac 	bl	8002688 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005b30:	f107 0308 	add.w	r3, r7, #8
 8005b34:	4619      	mov	r1, r3
 8005b36:	2000      	movs	r0, #0
 8005b38:	f7fc fc4b 	bl	80023d2 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fc fc80 	bl	8002444 <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005b44:	f7fc fdf4 	bl	8002730 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005b48:	f7fc fa6e 	bl	8002028 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e007      	b.n	8005b62 <main+0xb82>
			Txcode[i] = 0;
 8005b52:	4a72      	ldr	r2, [pc, #456]	@ (8005d1c <main+0xd3c>)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b1f      	cmp	r3, #31
 8005b66:	ddf4      	ble.n	8005b52 <main+0xb72>
		}
		Txcode[22] = 'd';
 8005b68:	4b6c      	ldr	r3, [pc, #432]	@ (8005d1c <main+0xd3c>)
 8005b6a:	2264      	movs	r2, #100	@ 0x64
 8005b6c:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8005d1c <main+0xd3c>)
 8005b70:	2272      	movs	r2, #114	@ 0x72
 8005b72:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005b74:	4b69      	ldr	r3, [pc, #420]	@ (8005d1c <main+0xd3c>)
 8005b76:	226f      	movs	r2, #111	@ 0x6f
 8005b78:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005b7a:	4b68      	ldr	r3, [pc, #416]	@ (8005d1c <main+0xd3c>)
 8005b7c:	226e      	movs	r2, #110	@ 0x6e
 8005b7e:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005b80:	4b66      	ldr	r3, [pc, #408]	@ (8005d1c <main+0xd3c>)
 8005b82:	2232      	movs	r2, #50	@ 0x32
 8005b84:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005b86:	4b65      	ldr	r3, [pc, #404]	@ (8005d1c <main+0xd3c>)
 8005b88:	2263      	movs	r2, #99	@ 0x63
 8005b8a:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005b8c:	4b63      	ldr	r3, [pc, #396]	@ (8005d1c <main+0xd3c>)
 8005b8e:	2231      	movs	r2, #49	@ 0x31
 8005b90:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005b92:	4b62      	ldr	r3, [pc, #392]	@ (8005d1c <main+0xd3c>)
 8005b94:	227a      	movs	r2, #122	@ 0x7a
 8005b96:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005b98:	4b60      	ldr	r3, [pc, #384]	@ (8005d1c <main+0xd3c>)
 8005b9a:	2261      	movs	r2, #97	@ 0x61
 8005b9c:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d1c <main+0xd3c>)
 8005ba0:	2237      	movs	r2, #55	@ 0x37
 8005ba2:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005ba4:	485d      	ldr	r0, [pc, #372]	@ (8005d1c <main+0xd3c>)
 8005ba6:	f7fc fcfd 	bl	80025a4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005baa:	f7fc fd09 	bl	80025c0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005bae:	f7fc fa0f 	bl	8001fd0 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005bb6:	e022      	b.n	8005bfe <main+0xc1e>
			LED_G_1;
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bbe:	4855      	ldr	r0, [pc, #340]	@ (8005d14 <main+0xd34>)
 8005bc0:	f008 fe30 	bl	800e824 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bca:	484e      	ldr	r0, [pc, #312]	@ (8005d04 <main+0xd24>)
 8005bcc:	f008 fe2a 	bl	800e824 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f003 fceb 	bl	80095ac <HAL_Delay>
			LED_G_0;
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bdc:	484d      	ldr	r0, [pc, #308]	@ (8005d14 <main+0xd34>)
 8005bde:	f008 fe21 	bl	800e824 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005be2:	2200      	movs	r2, #0
 8005be4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005be8:	4846      	ldr	r0, [pc, #280]	@ (8005d04 <main+0xd24>)
 8005bea:	f008 fe1b 	bl	800e824 <HAL_GPIO_WritePin>

			cunter++;
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bf8:	d101      	bne.n	8005bfe <main+0xc1e>
				NVIC_SystemReset();
 8005bfa:	f7ff f9db 	bl	8004fb4 <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f7fc fd22 	bl	8002648 <nRF24_IsBitSetInFifoStatus>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d0d6      	beq.n	8005bb8 <main+0xbd8>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005c0a:	4845      	ldr	r0, [pc, #276]	@ (8005d20 <main+0xd40>)
 8005c0c:	f7fc fd00 	bl	8002610 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005c10:	2200      	movs	r2, #0
 8005c12:	2108      	movs	r1, #8
 8005c14:	483f      	ldr	r0, [pc, #252]	@ (8005d14 <main+0xd34>)
 8005c16:	f008 fe05 	bl	800e824 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e00b      	b.n	8005c38 <main+0xc58>
			Rxcode[i] = RxData[i];
 8005c20:	4a3f      	ldr	r2, [pc, #252]	@ (8005d20 <main+0xd40>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	7819      	ldrb	r1, [r3, #0]
 8005c28:	4a3e      	ldr	r2, [pc, #248]	@ (8005d24 <main+0xd44>)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	460a      	mov	r2, r1
 8005c30:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b15      	cmp	r3, #21
 8005c3c:	ddf0      	ble.n	8005c20 <main+0xc40>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005c3e:	483a      	ldr	r0, [pc, #232]	@ (8005d28 <main+0xd48>)
 8005c40:	f7fb f980 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005c44:	2201      	movs	r2, #1
 8005c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c4a:	4830      	ldr	r0, [pc, #192]	@ (8005d0c <main+0xd2c>)
 8005c4c:	f008 fdea 	bl	800e824 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005c50:	2201      	movs	r2, #1
 8005c52:	4936      	ldr	r1, [pc, #216]	@ (8005d2c <main+0xd4c>)
 8005c54:	4836      	ldr	r0, [pc, #216]	@ (8005d30 <main+0xd50>)
 8005c56:	f012 faaf 	bl	80181b8 <HAL_UART_Receive_IT>
		LED_7_0;
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c60:	482a      	ldr	r0, [pc, #168]	@ (8005d0c <main+0xd2c>)
 8005c62:	f008 fddf 	bl	800e824 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005c66:	4833      	ldr	r0, [pc, #204]	@ (8005d34 <main+0xd54>)
 8005c68:	f010 fc4a 	bl	8016500 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005c6c:	4b28      	ldr	r3, [pc, #160]	@ (8005d10 <main+0xd30>)
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fca4 	bl	80075c0 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005c78:	4b25      	ldr	r3, [pc, #148]	@ (8005d10 <main+0xd30>)
 8005c7a:	8a9b      	ldrh	r3, [r3, #20]
 8005c7c:	2b07      	cmp	r3, #7
 8005c7e:	d107      	bne.n	8005c90 <main+0xcb0>
	  	{
	  		LED_R_1;
 8005c80:	2201      	movs	r2, #1
 8005c82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c86:	481f      	ldr	r0, [pc, #124]	@ (8005d04 <main+0xd24>)
 8005c88:	f008 fdcc 	bl	800e824 <HAL_GPIO_WritePin>
	  		while(1){
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <main+0xcac>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c90:	4b1f      	ldr	r3, [pc, #124]	@ (8005d10 <main+0xd30>)
 8005c92:	8a9b      	ldrh	r3, [r3, #20]
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d107      	bne.n	8005ca8 <main+0xcc8>
	  		LED_R_1;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c9e:	4819      	ldr	r0, [pc, #100]	@ (8005d04 <main+0xd24>)
 8005ca0:	f008 fdc0 	bl	800e824 <HAL_GPIO_WritePin>
	  		while(1){
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <main+0xcc4>
	  		}
	  	}



		STARTUP = 0;
 8005ca8:	4b23      	ldr	r3, [pc, #140]	@ (8005d38 <main+0xd58>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005cae:	4b18      	ldr	r3, [pc, #96]	@ (8005d10 <main+0xd30>)
 8005cb0:	8a9b      	ldrh	r3, [r3, #20]
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d10a      	bne.n	8005ccc <main+0xcec>
	  			LED_R_1;
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cbc:	4811      	ldr	r0, [pc, #68]	@ (8005d04 <main+0xd24>)
 8005cbe:	f008 fdb1 	bl	800e824 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005cc2:	4b13      	ldr	r3, [pc, #76]	@ (8005d10 <main+0xd30>)
 8005cc4:	885b      	ldrh	r3, [r3, #2]
 8005cc6:	b21a      	sxth	r2, r3
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <main+0xd5c>)
 8005cca:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005ccc:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <main+0xd30>)
 8005cce:	8a9b      	ldrh	r3, [r3, #20]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d103      	bne.n	8005cdc <main+0xcfc>
	  			thrust_limit = 10000;
 8005cd4:	4b19      	ldr	r3, [pc, #100]	@ (8005d3c <main+0xd5c>)
 8005cd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005cda:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <main+0xd30>)
 8005cde:	8a9b      	ldrh	r3, [r3, #20]
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d13a      	bne.n	8005d5a <main+0xd7a>
	  			ESC_POWER_1;
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cea:	4815      	ldr	r0, [pc, #84]	@ (8005d40 <main+0xd60>)
 8005cec:	f008 fd9a 	bl	800e824 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cf6:	4803      	ldr	r0, [pc, #12]	@ (8005d04 <main+0xd24>)
 8005cf8:	f008 fd94 	bl	800e824 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005cfc:	4811      	ldr	r0, [pc, #68]	@ (8005d44 <main+0xd64>)
 8005cfe:	f018 f829 	bl	801dd54 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005d02:	e026      	b.n	8005d52 <main+0xd72>
 8005d04:	58020400 	.word	0x58020400
 8005d08:	0000006c 	.word	0x0000006c
 8005d0c:	58020000 	.word	0x58020000
 8005d10:	00000184 	.word	0x00000184
 8005d14:	58021000 	.word	0x58021000
 8005d18:	24000274 	.word	0x24000274
 8005d1c:	00000120 	.word	0x00000120
 8005d20:	00000100 	.word	0x00000100
 8005d24:	00000160 	.word	0x00000160
 8005d28:	24000418 	.word	0x24000418
 8005d2c:	000041e8 	.word	0x000041e8
 8005d30:	240004b0 	.word	0x240004b0
 8005d34:	240003cc 	.word	0x240003cc
 8005d38:	00000080 	.word	0x00000080
 8005d3c:	0000406a 	.word	0x0000406a
 8005d40:	58021800 	.word	0x58021800
 8005d44:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005d48:	200a      	movs	r0, #10
 8005d4a:	f003 fc2f 	bl	80095ac <HAL_Delay>
	  				Get_batteryvalue();
 8005d4e:	f7fe fa3f 	bl	80041d0 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005d52:	4b61      	ldr	r3, [pc, #388]	@ (8005ed8 <main+0xef8>)
 8005d54:	8a9b      	ldrh	r3, [r3, #20]
 8005d56:	2b09      	cmp	r3, #9
 8005d58:	d0f6      	beq.n	8005d48 <main+0xd68>
	  			}
	  		}

	  		if(commandready == 1){
 8005d5a:	4b60      	ldr	r3, [pc, #384]	@ (8005edc <main+0xefc>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d159      	bne.n	8005e16 <main+0xe36>
	  			LED_7_1;
 8005d62:	2201      	movs	r2, #1
 8005d64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d68:	485d      	ldr	r0, [pc, #372]	@ (8005ee0 <main+0xf00>)
 8005d6a:	f008 fd5b 	bl	800e824 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005d6e:	f7fc fcfd 	bl	800276c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005d72:	495c      	ldr	r1, [pc, #368]	@ (8005ee4 <main+0xf04>)
 8005d74:	485c      	ldr	r0, [pc, #368]	@ (8005ee8 <main+0xf08>)
 8005d76:	f7fc fd47 	bl	8002808 <executecommand>
	  			LED_7_0;
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d80:	4857      	ldr	r0, [pc, #348]	@ (8005ee0 <main+0xf00>)
 8005d82:	f008 fd4f 	bl	800e824 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005d86:	4b59      	ldr	r3, [pc, #356]	@ (8005eec <main+0xf0c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a59      	ldr	r2, [pc, #356]	@ (8005ef0 <main+0xf10>)
 8005d8c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005d8e:	4b59      	ldr	r3, [pc, #356]	@ (8005ef4 <main+0xf14>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a57      	ldr	r2, [pc, #348]	@ (8005ef0 <main+0xf10>)
 8005d94:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005d96:	4b58      	ldr	r3, [pc, #352]	@ (8005ef8 <main+0xf18>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a55      	ldr	r2, [pc, #340]	@ (8005ef0 <main+0xf10>)
 8005d9c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005d9e:	4b57      	ldr	r3, [pc, #348]	@ (8005efc <main+0xf1c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a57      	ldr	r2, [pc, #348]	@ (8005f00 <main+0xf20>)
 8005da4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005da6:	4b57      	ldr	r3, [pc, #348]	@ (8005f04 <main+0xf24>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a55      	ldr	r2, [pc, #340]	@ (8005f00 <main+0xf20>)
 8005dac:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005dae:	4b56      	ldr	r3, [pc, #344]	@ (8005f08 <main+0xf28>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a53      	ldr	r2, [pc, #332]	@ (8005f00 <main+0xf20>)
 8005db4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005db6:	4b55      	ldr	r3, [pc, #340]	@ (8005f0c <main+0xf2c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a55      	ldr	r2, [pc, #340]	@ (8005f10 <main+0xf30>)
 8005dbc:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005dbe:	4b55      	ldr	r3, [pc, #340]	@ (8005f14 <main+0xf34>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a53      	ldr	r2, [pc, #332]	@ (8005f10 <main+0xf30>)
 8005dc4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005dc6:	4b54      	ldr	r3, [pc, #336]	@ (8005f18 <main+0xf38>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a51      	ldr	r2, [pc, #324]	@ (8005f10 <main+0xf30>)
 8005dcc:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005dce:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <main+0xf3c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a53      	ldr	r2, [pc, #332]	@ (8005f20 <main+0xf40>)
 8005dd4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005dd6:	4b53      	ldr	r3, [pc, #332]	@ (8005f24 <main+0xf44>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a51      	ldr	r2, [pc, #324]	@ (8005f20 <main+0xf40>)
 8005ddc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005dde:	4b52      	ldr	r3, [pc, #328]	@ (8005f28 <main+0xf48>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a4f      	ldr	r2, [pc, #316]	@ (8005f20 <main+0xf40>)
 8005de4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005de6:	4b51      	ldr	r3, [pc, #324]	@ (8005f2c <main+0xf4c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a51      	ldr	r2, [pc, #324]	@ (8005f30 <main+0xf50>)
 8005dec:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005dee:	4b51      	ldr	r3, [pc, #324]	@ (8005f34 <main+0xf54>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a4f      	ldr	r2, [pc, #316]	@ (8005f30 <main+0xf50>)
 8005df4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005df6:	4b50      	ldr	r3, [pc, #320]	@ (8005f38 <main+0xf58>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8005f30 <main+0xf50>)
 8005dfc:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8005f3c <main+0xf5c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a4f      	ldr	r2, [pc, #316]	@ (8005f40 <main+0xf60>)
 8005e04:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005e06:	4b4f      	ldr	r3, [pc, #316]	@ (8005f44 <main+0xf64>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8005f40 <main+0xf60>)
 8005e0c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f48 <main+0xf68>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a4b      	ldr	r2, [pc, #300]	@ (8005f40 <main+0xf60>)
 8005e14:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005e16:	4b4d      	ldr	r3, [pc, #308]	@ (8005f4c <main+0xf6c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d14d      	bne.n	8005eba <main+0xeda>
 8005e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005f50 <main+0xf70>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d149      	bne.n	8005eba <main+0xeda>
 8005e26:	4b4b      	ldr	r3, [pc, #300]	@ (8005f54 <main+0xf74>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d145      	bne.n	8005eba <main+0xeda>
	  			TIM_inte_SD = 0;
 8005e2e:	4b47      	ldr	r3, [pc, #284]	@ (8005f4c <main+0xf6c>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005e34:	4b48      	ldr	r3, [pc, #288]	@ (8005f58 <main+0xf78>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fd57 	bl	80078ec <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005e3e:	4b46      	ldr	r3, [pc, #280]	@ (8005f58 <main+0xf78>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d12b      	bne.n	8005ea2 <main+0xec2>
	  				SD_In_Use = 1;
 8005e4a:	4b44      	ldr	r3, [pc, #272]	@ (8005f5c <main+0xf7c>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005e50:	2201      	movs	r2, #1
 8005e52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e56:	4842      	ldr	r0, [pc, #264]	@ (8005f60 <main+0xf80>)
 8005e58:	f008 fce4 	bl	800e824 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005e5c:	2232      	movs	r2, #50	@ 0x32
 8005e5e:	4941      	ldr	r1, [pc, #260]	@ (8005f64 <main+0xf84>)
 8005e60:	4841      	ldr	r0, [pc, #260]	@ (8005f68 <main+0xf88>)
 8005e62:	f017 fb9d 	bl	801d5a0 <f_open>
 8005e66:	4603      	mov	r3, r0
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b39      	ldr	r3, [pc, #228]	@ (8005f50 <main+0xf70>)
 8005e6c:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f6c <main+0xf8c>)
 8005e70:	4a3f      	ldr	r2, [pc, #252]	@ (8005f70 <main+0xf90>)
 8005e72:	4940      	ldr	r1, [pc, #256]	@ (8005f74 <main+0xf94>)
 8005e74:	483c      	ldr	r0, [pc, #240]	@ (8005f68 <main+0xf88>)
 8005e76:	f017 fd5b 	bl	801d930 <f_write>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b34      	ldr	r3, [pc, #208]	@ (8005f50 <main+0xf70>)
 8005e80:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005e82:	4839      	ldr	r0, [pc, #228]	@ (8005f68 <main+0xf88>)
 8005e84:	f017 ff66 	bl	801dd54 <f_close>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4b30      	ldr	r3, [pc, #192]	@ (8005f50 <main+0xf70>)
 8005e8e:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005e90:	2200      	movs	r2, #0
 8005e92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e96:	4832      	ldr	r0, [pc, #200]	@ (8005f60 <main+0xf80>)
 8005e98:	f008 fcc4 	bl	800e824 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005f5c <main+0xf7c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8005f58 <main+0xf78>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eaa:	d203      	bcs.n	8005eb4 <main+0xed4>
 8005eac:	4b2a      	ldr	r3, [pc, #168]	@ (8005f58 <main+0xf78>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <main+0xed6>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4a28      	ldr	r2, [pc, #160]	@ (8005f58 <main+0xf78>)
 8005eb8:	6013      	str	r3, [r2, #0]
	  		}

	  		if(TIM_inte == 1){
 8005eba:	4b2f      	ldr	r3, [pc, #188]	@ (8005f78 <main+0xf98>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	f47f aef5 	bne.w	8005cae <main+0xcce>
	  			LED_R_0;
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005eca:	482c      	ldr	r0, [pc, #176]	@ (8005f7c <main+0xf9c>)
 8005ecc:	f008 fcaa 	bl	800e824 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005ed0:	4b29      	ldr	r3, [pc, #164]	@ (8005f78 <main+0xf98>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005ed6:	e6ea      	b.n	8005cae <main+0xcce>
 8005ed8:	00000184 	.word	0x00000184
 8005edc:	000041e6 	.word	0x000041e6
 8005ee0:	58020000 	.word	0x58020000
 8005ee4:	000041c8 	.word	0x000041c8
 8005ee8:	000041d8 	.word	0x000041d8
 8005eec:	000040f4 	.word	0x000040f4
 8005ef0:	00004118 	.word	0x00004118
 8005ef4:	00004100 	.word	0x00004100
 8005ef8:	0000410c 	.word	0x0000410c
 8005efc:	00004154 	.word	0x00004154
 8005f00:	00004178 	.word	0x00004178
 8005f04:	00004160 	.word	0x00004160
 8005f08:	0000416c 	.word	0x0000416c
 8005f0c:	000040f8 	.word	0x000040f8
 8005f10:	0000412c 	.word	0x0000412c
 8005f14:	00004104 	.word	0x00004104
 8005f18:	00004110 	.word	0x00004110
 8005f1c:	00004158 	.word	0x00004158
 8005f20:	0000418c 	.word	0x0000418c
 8005f24:	00004164 	.word	0x00004164
 8005f28:	00004170 	.word	0x00004170
 8005f2c:	000040fc 	.word	0x000040fc
 8005f30:	00004140 	.word	0x00004140
 8005f34:	00004108 	.word	0x00004108
 8005f38:	00004114 	.word	0x00004114
 8005f3c:	0000415c 	.word	0x0000415c
 8005f40:	000041a0 	.word	0x000041a0
 8005f44:	00004168 	.word	0x00004168
 8005f48:	00004174 	.word	0x00004174
 8005f4c:	00000078 	.word	0x00000078
 8005f50:	24001eec 	.word	0x24001eec
 8005f54:	000041f4 	.word	0x000041f4
 8005f58:	000041ec 	.word	0x000041ec
 8005f5c:	000041f0 	.word	0x000041f0
 8005f60:	58020c00 	.word	0x58020c00
 8005f64:	0801eba0 	.word	0x0801eba0
 8005f68:	24001ef0 	.word	0x24001ef0
 8005f6c:	24002f24 	.word	0x24002f24
 8005f70:	0001f7e8 	.word	0x0001f7e8
 8005f74:	24002f28 	.word	0x24002f28
 8005f78:	0000007c 	.word	0x0000007c
 8005f7c:	58020400 	.word	0x58020400

08005f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b09c      	sub	sp, #112	@ 0x70
 8005f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f8a:	224c      	movs	r2, #76	@ 0x4c
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f018 f8d8 	bl	801e144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	2220      	movs	r2, #32
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f018 f8d2 	bl	801e144 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005fa0:	2002      	movs	r0, #2
 8005fa2:	f00b f8f1 	bl	8011188 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	4b2d      	ldr	r3, [pc, #180]	@ (8006060 <SystemClock_Config+0xe0>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	4a2c      	ldr	r2, [pc, #176]	@ (8006060 <SystemClock_Config+0xe0>)
 8005fb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005fb4:	6193      	str	r3, [r2, #24]
 8005fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8006060 <SystemClock_Config+0xe0>)
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005fc2:	bf00      	nop
 8005fc4:	4b26      	ldr	r3, [pc, #152]	@ (8006060 <SystemClock_Config+0xe0>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd0:	d1f8      	bne.n	8005fc4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005fd2:	2311      	movs	r3, #17
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005fd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005fdc:	2380      	movs	r3, #128	@ 0x80
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005fec:	2303      	movs	r3, #3
 8005fee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005ff0:	2344      	movs	r3, #68	@ 0x44
 8005ff2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006000:	230c      	movs	r3, #12
 8006002:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006004:	2300      	movs	r3, #0
 8006006:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8006008:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800600c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800600e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006012:	4618      	mov	r0, r3
 8006014:	f00b f8f2 	bl	80111fc <HAL_RCC_OscConfig>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800601e:	f001 ff5b 	bl	8007ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006022:	233f      	movs	r3, #63	@ 0x3f
 8006024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006026:	2303      	movs	r3, #3
 8006028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800602e:	2308      	movs	r3, #8
 8006030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006032:	2340      	movs	r3, #64	@ 0x40
 8006034:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006036:	2340      	movs	r3, #64	@ 0x40
 8006038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800603a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800603e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006040:	2340      	movs	r3, #64	@ 0x40
 8006042:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	2103      	movs	r1, #3
 8006048:	4618      	mov	r0, r3
 800604a:	f00b fcb1 	bl	80119b0 <HAL_RCC_ClockConfig>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006054:	f001 ff40 	bl	8007ed8 <Error_Handler>
  }
}
 8006058:	bf00      	nop
 800605a:	3770      	adds	r7, #112	@ 0x70
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	58024800 	.word	0x58024800

08006064 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b0ae      	sub	sp, #184	@ 0xb8
 8006068:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800606a:	463b      	mov	r3, r7
 800606c:	22b8      	movs	r2, #184	@ 0xb8
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f018 f867 	bl	801e144 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8006076:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8006082:	2316      	movs	r3, #22
 8006084:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8006086:	23c0      	movs	r3, #192	@ 0xc0
 8006088:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800608a:	2303      	movs	r3, #3
 800608c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800608e:	2302      	movs	r3, #2
 8006090:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006092:	2302      	movs	r3, #2
 8006094:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800609a:	2320      	movs	r3, #32
 800609c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80060a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060ae:	463b      	mov	r3, r7
 80060b0:	4618      	mov	r0, r3
 80060b2:	f00c f809 	bl	80120c8 <HAL_RCCEx_PeriphCLKConfig>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80060bc:	f001 ff0c 	bl	8007ed8 <Error_Handler>
  }
}
 80060c0:	bf00      	nop
 80060c2:	37b8      	adds	r7, #184	@ 0xb8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a89      	ldr	r2, [pc, #548]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	f040 810b 	bne.w	80062f0 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		TIM_inte_SD = 1;
 80060da:	4b88      	ldr	r3, [pc, #544]	@ (80062fc <HAL_TIM_PeriodElapsedCallback+0x234>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 80060e0:	4b87      	ldr	r3, [pc, #540]	@ (8006300 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 80060e6:	4b87      	ldr	r3, [pc, #540]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	4a85      	ldr	r2, [pc, #532]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80060ee:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 80060f0:	4b85      	ldr	r3, [pc, #532]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d113      	bne.n	8006120 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 80060f8:	2201      	movs	r2, #1
 80060fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060fe:	4883      	ldr	r0, [pc, #524]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006100:	f008 fb90 	bl	800e824 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8006104:	f7fa fbb4 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800610e:	487f      	ldr	r0, [pc, #508]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006110:	f008 fb88 	bl	800e824 <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 8006114:	4b7e      	ldr	r3, [pc, #504]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fa50 	bl	80075c0 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 8006120:	4b79      	ldr	r3, [pc, #484]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b0a      	cmp	r3, #10
 8006126:	d10d      	bne.n	8006144 <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 8006128:	2201      	movs	r2, #1
 800612a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800612e:	4877      	ldr	r0, [pc, #476]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006130:	f008 fb78 	bl	800e824 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8006134:	f7fa fb86 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8006138:	2200      	movs	r2, #0
 800613a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800613e:	4873      	ldr	r0, [pc, #460]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006140:	f008 fb70 	bl	800e824 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8006144:	4b70      	ldr	r3, [pc, #448]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b24      	cmp	r3, #36	@ 0x24
 800614a:	d10d      	bne.n	8006168 <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 800614c:	2201      	movs	r2, #1
 800614e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006152:	486e      	ldr	r0, [pc, #440]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006154:	f008 fb66 	bl	800e824 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8006158:	f7fa ffbe 	bl	80010d8 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006162:	486a      	ldr	r0, [pc, #424]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006164:	f008 fb5e 	bl	800e824 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8006168:	4b67      	ldr	r3, [pc, #412]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b26      	cmp	r3, #38	@ 0x26
 800616e:	d10e      	bne.n	800618e <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 8006170:	2201      	movs	r2, #1
 8006172:	2108      	movs	r1, #8
 8006174:	4867      	ldr	r0, [pc, #412]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006176:	f008 fb55 	bl	800e824 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 800617a:	f7fb ff55 	bl	8002028 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 800617e:	4b66      	ldr	r3, [pc, #408]	@ (8006318 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8006184:	2200      	movs	r2, #0
 8006186:	2108      	movs	r1, #8
 8006188:	4862      	ldr	r0, [pc, #392]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800618a:	f008 fb4b 	bl	800e824 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 800618e:	4b5e      	ldr	r3, [pc, #376]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b28      	cmp	r3, #40	@ 0x28
 8006194:	d14c      	bne.n	8006230 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 8006196:	4b61      	ldr	r3, [pc, #388]	@ (800631c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006198:	ed93 7a00 	vldr	s14, [r3]
 800619c:	4b60      	ldr	r3, [pc, #384]	@ (8006320 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800619e:	edd3 7a00 	vldr	s15, [r3]
 80061a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006324 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80061a8:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 80061ac:	f7fa fe22 	bl	8000df4 <BMP180_GET_height>
 80061b0:	eef0 7a40 	vmov.f32	s15, s0
 80061b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b8:	ee17 3a90 	vmov	r3, s15
 80061bc:	b29b      	uxth	r3, r3
 80061be:	b21a      	sxth	r2, r3
 80061c0:	4b53      	ldr	r3, [pc, #332]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061c2:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 80061c4:	4b52      	ldr	r3, [pc, #328]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061c6:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80061ca:	2303      	movs	r3, #3
 80061cc:	2200      	movs	r2, #0
 80061ce:	4956      	ldr	r1, [pc, #344]	@ (8006328 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061d0:	f001 f917 	bl	8007402 <convert_value_to_array>

			Get_batteryvalue();
 80061d4:	f7fd fffc 	bl	80041d0 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 80061d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b218      	sxth	r0, r3
 80061de:	2306      	movs	r3, #6
 80061e0:	2203      	movs	r2, #3
 80061e2:	4951      	ldr	r1, [pc, #324]	@ (8006328 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061e4:	f001 f90d 	bl	8007402 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f103 0216 	add.w	r2, r3, #22
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3316      	adds	r3, #22
 80061f8:	494c      	ldr	r1, [pc, #304]	@ (800632c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80061fa:	5c89      	ldrb	r1, [r1, r2]
 80061fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006328 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061fe:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b09      	cmp	r3, #9
 800620a:	ddf0      	ble.n	80061ee <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 800620c:	2201      	movs	r2, #1
 800620e:	2108      	movs	r1, #8
 8006210:	4840      	ldr	r0, [pc, #256]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006212:	f008 fb07 	bl	800e824 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8006216:	4844      	ldr	r0, [pc, #272]	@ (8006328 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006218:	f7fc f9c4 	bl	80025a4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 800621c:	2201      	movs	r2, #1
 800621e:	2140      	movs	r1, #64	@ 0x40
 8006220:	4843      	ldr	r0, [pc, #268]	@ (8006330 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006222:	f008 faff 	bl	800e824 <HAL_GPIO_WritePin>
			LED_6_0;
 8006226:	2200      	movs	r2, #0
 8006228:	2108      	movs	r1, #8
 800622a:	483a      	ldr	r0, [pc, #232]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800622c:	f008 fafa 	bl	800e824 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8006230:	4b35      	ldr	r3, [pc, #212]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b29      	cmp	r3, #41	@ 0x29
 8006236:	d104      	bne.n	8006242 <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 8006238:	2200      	movs	r2, #0
 800623a:	2140      	movs	r1, #64	@ 0x40
 800623c:	483c      	ldr	r0, [pc, #240]	@ (8006330 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800623e:	f008 faf1 	bl	800e824 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8006242:	4b31      	ldr	r3, [pc, #196]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b29      	cmp	r3, #41	@ 0x29
 8006248:	d916      	bls.n	8006278 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 800624a:	4b33      	ldr	r3, [pc, #204]	@ (8006318 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d012      	beq.n	8006278 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8006252:	f7fb ff6a 	bl	800212a <nRF24_ReadStatus>
 8006256:	4603      	mov	r3, r0
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8006260:	f7fb ff63 	bl	800212a <nRF24_ReadStatus>
 8006264:	4603      	mov	r3, r0
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 800626e:	f7fb feaf 	bl	8001fd0 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8006272:	4b29      	ldr	r3, [pc, #164]	@ (8006318 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8006278:	2201      	movs	r2, #1
 800627a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800627e:	4823      	ldr	r0, [pc, #140]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006280:	f008 fad0 	bl	800e824 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8006284:	f7fb facc 	bl	8001820 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8006288:	2200      	movs	r2, #0
 800628a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800628e:	481f      	ldr	r0, [pc, #124]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006290:	f008 fac8 	bl	800e824 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8006294:	4b1c      	ldr	r3, [pc, #112]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b64      	cmp	r3, #100	@ 0x64
 800629a:	d003      	beq.n	80062a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 800629c:	4b1a      	ldr	r3, [pc, #104]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3301      	adds	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_TIM_PeriodElapsedCallback+0x1de>
 80062a4:	2300      	movs	r3, #0
 80062a6:	4a18      	ldr	r2, [pc, #96]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80062a8:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 80062aa:	4b16      	ldr	r3, [pc, #88]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062b2:	d308      	bcc.n	80062c6 <HAL_TIM_PeriodElapsedCallback+0x1fe>
			LED_R_1;
 80062b4:	2201      	movs	r2, #1
 80062b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80062ba:	481d      	ldr	r0, [pc, #116]	@ (8006330 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80062bc:	f008 fab2 	bl	800e824 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 80062c0:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80062c2:	2202      	movs	r2, #2
 80062c4:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 80062c6:	4b12      	ldr	r3, [pc, #72]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80062c8:	8a5b      	ldrh	r3, [r3, #18]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d110      	bne.n	80062f0 <HAL_TIM_PeriodElapsedCallback+0x228>
			wanted_rool = 0;
 80062ce:	4b19      	ldr	r3, [pc, #100]	@ (8006334 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 80062d6:	4b18      	ldr	r3, [pc, #96]	@ (8006338 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 80062de:	4b17      	ldr	r3, [pc, #92]	@ (800633c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 80062e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80062ea:	b21a      	sxth	r2, r3
 80062ec:	4b14      	ldr	r3, [pc, #80]	@ (8006340 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80062ee:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	240003cc 	.word	0x240003cc
 80062fc:	00000078 	.word	0x00000078
 8006300:	0000007c 	.word	0x0000007c
 8006304:	00000084 	.word	0x00000084
 8006308:	00004200 	.word	0x00004200
 800630c:	58020000 	.word	0x58020000
 8006310:	00000184 	.word	0x00000184
 8006314:	58021000 	.word	0x58021000
 8006318:	00000180 	.word	0x00000180
 800631c:	000000f0 	.word	0x000000f0
 8006320:	000000ec 	.word	0x000000ec
 8006324:	000000f4 	.word	0x000000f4
 8006328:	00000140 	.word	0x00000140
 800632c:	00000120 	.word	0x00000120
 8006330:	58020400 	.word	0x58020400
 8006334:	0000407c 	.word	0x0000407c
 8006338:	00004078 	.word	0x00004078
 800633c:	00004080 	.word	0x00004080
 8006340:	00004068 	.word	0x00004068

08006344 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006354:	f040 812c 	bne.w	80065b0 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8006358:	4b97      	ldr	r3, [pc, #604]	@ (80065b8 <HAL_GPIO_EXTI_Callback+0x274>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 8127 	bne.w	80065b0 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8006362:	2201      	movs	r2, #1
 8006364:	2108      	movs	r1, #8
 8006366:	4895      	ldr	r0, [pc, #596]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x278>)
 8006368:	f008 fa5c 	bl	800e824 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 800636c:	4894      	ldr	r0, [pc, #592]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 800636e:	f7fc f94f 	bl	8002610 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8006372:	2200      	movs	r2, #0
 8006374:	2108      	movs	r1, #8
 8006376:	4891      	ldr	r0, [pc, #580]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x278>)
 8006378:	f008 fa54 	bl	800e824 <HAL_GPIO_WritePin>


			LED_Y_1;
 800637c:	2201      	movs	r2, #1
 800637e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006382:	4890      	ldr	r0, [pc, #576]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006384:	f008 fa4e 	bl	800e824 <HAL_GPIO_WritePin>

			loopnum = 0;
 8006388:	4b8f      	ldr	r3, [pc, #572]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x284>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e011      	b.n	80063b8 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	330c      	adds	r3, #12
 8006398:	4a89      	ldr	r2, [pc, #548]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 800639a:	5cd2      	ldrb	r2, [r2, r3]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	330c      	adds	r3, #12
 80063a0:	498a      	ldr	r1, [pc, #552]	@ (80065cc <HAL_GPIO_EXTI_Callback+0x288>)
 80063a2:	5ccb      	ldrb	r3, [r1, r3]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d104      	bne.n	80063b2 <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 80063a8:	4b87      	ldr	r3, [pc, #540]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x284>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	4a86      	ldr	r2, [pc, #536]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x284>)
 80063b0:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b09      	cmp	r3, #9
 80063bc:	ddea      	ble.n	8006394 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 80063be:	4b82      	ldr	r3, [pc, #520]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x284>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b0a      	cmp	r3, #10
 80063c4:	f040 80e3 	bne.w	800658e <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 80063c8:	2302      	movs	r3, #2
 80063ca:	2200      	movs	r2, #0
 80063cc:	4980      	ldr	r1, [pc, #512]	@ (80065d0 <HAL_GPIO_EXTI_Callback+0x28c>)
 80063ce:	487c      	ldr	r0, [pc, #496]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063d0:	f000 ffc6 	bl	8007360 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 80063d4:	2305      	movs	r3, #5
 80063d6:	2203      	movs	r2, #3
 80063d8:	497e      	ldr	r1, [pc, #504]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80063da:	4879      	ldr	r0, [pc, #484]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063dc:	f000 ffc0 	bl	8007360 <convert_array_to_value>
				if(wobble_strenght == 1){
 80063e0:	4b7d      	ldr	r3, [pc, #500]	@ (80065d8 <HAL_GPIO_EXTI_Callback+0x294>)
 80063e2:	edd3 7a00 	vldr	s15, [r3]
 80063e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063ea:	eef4 7a47 	vcmp.f32	s15, s14
 80063ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f2:	d105      	bne.n	8006400 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80063f4:	2308      	movs	r3, #8
 80063f6:	2206      	movs	r2, #6
 80063f8:	4978      	ldr	r1, [pc, #480]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 80063fa:	4871      	ldr	r0, [pc, #452]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063fc:	f000 ffb0 	bl	8007360 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 8006400:	230b      	movs	r3, #11
 8006402:	2209      	movs	r2, #9
 8006404:	4976      	ldr	r1, [pc, #472]	@ (80065e0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8006406:	486e      	ldr	r0, [pc, #440]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006408:	f000 ffaa 	bl	8007360 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 800640c:	4b75      	ldr	r3, [pc, #468]	@ (80065e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800640e:	2201      	movs	r2, #1
 8006410:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 8006412:	4b6b      	ldr	r3, [pc, #428]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006414:	7ddb      	ldrb	r3, [r3, #23]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d11b      	bne.n	8006452 <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 800641a:	2201      	movs	r2, #1
 800641c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006420:	4871      	ldr	r0, [pc, #452]	@ (80065e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8006422:	f008 f9ff 	bl	800e824 <HAL_GPIO_WritePin>
					LED_R_1;
 8006426:	2201      	movs	r2, #1
 8006428:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800642c:	4865      	ldr	r0, [pc, #404]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x280>)
 800642e:	f008 f9f9 	bl	800e824 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 8006432:	4b6e      	ldr	r3, [pc, #440]	@ (80065ec <HAL_GPIO_EXTI_Callback+0x2a8>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d10b      	bne.n	8006452 <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 800643a:	486d      	ldr	r0, [pc, #436]	@ (80065f0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800643c:	f017 fc8a 	bl	801dd54 <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006440:	2201      	movs	r2, #1
 8006442:	496c      	ldr	r1, [pc, #432]	@ (80065f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8006444:	2000      	movs	r0, #0
 8006446:	f017 f865 	bl	801d514 <f_mount>
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	4b6a      	ldr	r3, [pc, #424]	@ (80065f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006450:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 8006452:	4b62      	ldr	r3, [pc, #392]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 8006454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006458:	f242 720f 	movw	r2, #9999	@ 0x270f
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006460:	4b60      	ldr	r3, [pc, #384]	@ (80065e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006462:	2210      	movs	r2, #16
 8006464:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006468:	4b5c      	ldr	r3, [pc, #368]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 800646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646e:	b29b      	uxth	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	b29b      	uxth	r3, r3
 800647a:	b21a      	sxth	r2, r3
 800647c:	4b57      	ldr	r3, [pc, #348]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 800647e:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006480:	4b56      	ldr	r3, [pc, #344]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 8006482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006486:	b29a      	uxth	r2, r3
 8006488:	4b5c      	ldr	r3, [pc, #368]	@ (80065fc <HAL_GPIO_EXTI_Callback+0x2b8>)
 800648a:	4413      	add	r3, r2
 800648c:	b29b      	uxth	r3, r3
 800648e:	b21a      	sxth	r2, r3
 8006490:	4b52      	ldr	r3, [pc, #328]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 8006492:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 8006494:	4b51      	ldr	r3, [pc, #324]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 8006496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649a:	2b00      	cmp	r3, #0
 800649c:	da02      	bge.n	80064a4 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 800649e:	4b4f      	ldr	r3, [pc, #316]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x298>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 80064a4:	4b4b      	ldr	r3, [pc, #300]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80064a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064aa:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b6:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006600 <HAL_GPIO_EXTI_Callback+0x2bc>
 80064ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c2:	ee17 3a90 	vmov	r3, s15
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006604 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064ca:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 80064cc:	4b40      	ldr	r3, [pc, #256]	@ (80065d0 <HAL_GPIO_EXTI_Callback+0x28c>)
 80064ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064de:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006608 <HAL_GPIO_EXTI_Callback+0x2c4>
 80064e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ea:	ee17 3a90 	vmov	r3, s15
 80064ee:	b21a      	sxth	r2, r3
 80064f0:	4b46      	ldr	r3, [pc, #280]	@ (800660c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064f2:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;// wanted yaw is in deg/s
 80064f4:	4b3a      	ldr	r3, [pc, #232]	@ (80065e0 <HAL_GPIO_EXTI_Callback+0x29c>)
 80064f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064fa:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006506:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006610 <HAL_GPIO_EXTI_Callback+0x2cc>
 800650a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800650e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006512:	ee17 3a90 	vmov	r3, s15
 8006516:	b21a      	sxth	r2, r3
 8006518:	4b3e      	ldr	r3, [pc, #248]	@ (8006614 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800651a:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 800651c:	4b39      	ldr	r3, [pc, #228]	@ (8006604 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800651e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006522:	2b1d      	cmp	r3, #29
 8006524:	dc09      	bgt.n	800653a <HAL_GPIO_EXTI_Callback+0x1f6>
 8006526:	4b37      	ldr	r3, [pc, #220]	@ (8006604 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800652c:	f06f 021d 	mvn.w	r2, #29
 8006530:	4293      	cmp	r3, r2
 8006532:	bfb8      	it	lt
 8006534:	4613      	movlt	r3, r2
 8006536:	b21b      	sxth	r3, r3
 8006538:	e000      	b.n	800653c <HAL_GPIO_EXTI_Callback+0x1f8>
 800653a:	231e      	movs	r3, #30
 800653c:	4a31      	ldr	r2, [pc, #196]	@ (8006604 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800653e:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 8006540:	4b32      	ldr	r3, [pc, #200]	@ (800660c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006546:	2b1d      	cmp	r3, #29
 8006548:	dc09      	bgt.n	800655e <HAL_GPIO_EXTI_Callback+0x21a>
 800654a:	4b30      	ldr	r3, [pc, #192]	@ (800660c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800654c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006550:	f06f 021d 	mvn.w	r2, #29
 8006554:	4293      	cmp	r3, r2
 8006556:	bfb8      	it	lt
 8006558:	4613      	movlt	r3, r2
 800655a:	b21b      	sxth	r3, r3
 800655c:	e000      	b.n	8006560 <HAL_GPIO_EXTI_Callback+0x21c>
 800655e:	231e      	movs	r3, #30
 8006560:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006562:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 8006564:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656a:	2b1d      	cmp	r3, #29
 800656c:	dc09      	bgt.n	8006582 <HAL_GPIO_EXTI_Callback+0x23e>
 800656e:	4b29      	ldr	r3, [pc, #164]	@ (8006614 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006574:	f06f 021d 	mvn.w	r2, #29
 8006578:	4293      	cmp	r3, r2
 800657a:	bfb8      	it	lt
 800657c:	4613      	movlt	r3, r2
 800657e:	b21b      	sxth	r3, r3
 8006580:	e000      	b.n	8006584 <HAL_GPIO_EXTI_Callback+0x240>
 8006582:	231e      	movs	r3, #30
 8006584:	4a23      	ldr	r2, [pc, #140]	@ (8006614 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006586:	8013      	strh	r3, [r2, #0]


				NRF_TIM_Inte = 0;
 8006588:	4b23      	ldr	r3, [pc, #140]	@ (8006618 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 800658e:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x284>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d006      	beq.n	80065a4 <HAL_GPIO_EXTI_Callback+0x260>
 8006596:	4b0c      	ldr	r3, [pc, #48]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x284>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b09      	cmp	r3, #9
 800659c:	d802      	bhi.n	80065a4 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 800659e:	4b11      	ldr	r3, [pc, #68]	@ (80065e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80065a0:	2203      	movs	r2, #3
 80065a2:	825a      	strh	r2, [r3, #18]
	  			}
	  			LED_Y_0;
 80065a4:	2200      	movs	r2, #0
 80065a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80065aa:	4806      	ldr	r0, [pc, #24]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x280>)
 80065ac:	f008 f93a 	bl	800e824 <HAL_GPIO_WritePin>
		}
	}
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	00000080 	.word	0x00000080
 80065bc:	58021000 	.word	0x58021000
 80065c0:	00000100 	.word	0x00000100
 80065c4:	58020400 	.word	0x58020400
 80065c8:	00004204 	.word	0x00004204
 80065cc:	00000160 	.word	0x00000160
 80065d0:	0000420a 	.word	0x0000420a
 80065d4:	00004208 	.word	0x00004208
 80065d8:	000041f8 	.word	0x000041f8
 80065dc:	00004068 	.word	0x00004068
 80065e0:	0000420c 	.word	0x0000420c
 80065e4:	00000184 	.word	0x00000184
 80065e8:	58021800 	.word	0x58021800
 80065ec:	000041f4 	.word	0x000041f4
 80065f0:	24001ef0 	.word	0x24001ef0
 80065f4:	0801eb90 	.word	0x0801eb90
 80065f8:	24001eec 	.word	0x24001eec
 80065fc:	ffffd8f0 	.word	0xffffd8f0
 8006600:	3f266666 	.word	0x3f266666
 8006604:	00004056 	.word	0x00004056
 8006608:	3f28f5c3 	.word	0x3f28f5c3
 800660c:	00004054 	.word	0x00004054
 8006610:	3f19999a 	.word	0x3f19999a
 8006614:	00004058 	.word	0x00004058
 8006618:	00000084 	.word	0x00000084

0800661c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8006624:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	4b24      	ldr	r3, [pc, #144]	@ (80066bc <HAL_UART_RxCpltCallback+0xa0>)
 800662c:	7819      	ldrb	r1, [r3, #0]
 800662e:	4b24      	ldr	r3, [pc, #144]	@ (80066c0 <HAL_UART_RxCpltCallback+0xa4>)
 8006630:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8006632:	4b21      	ldr	r3, [pc, #132]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	4b21      	ldr	r3, [pc, #132]	@ (80066c0 <HAL_UART_RxCpltCallback+0xa4>)
 800663a:	5c9b      	ldrb	r3, [r3, r2]
 800663c:	2b0d      	cmp	r3, #13
 800663e:	d11a      	bne.n	8006676 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006640:	230a      	movs	r3, #10
 8006642:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006644:	f107 010f 	add.w	r1, r7, #15
 8006648:	2364      	movs	r3, #100	@ 0x64
 800664a:	2201      	movs	r2, #1
 800664c:	481d      	ldr	r0, [pc, #116]	@ (80066c4 <HAL_UART_RxCpltCallback+0xa8>)
 800664e:	f011 fc91 	bl	8017f74 <HAL_UART_Transmit>
		Y = '\r';
 8006652:	230d      	movs	r3, #13
 8006654:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006656:	f107 010f 	add.w	r1, r7, #15
 800665a:	2364      	movs	r3, #100	@ 0x64
 800665c:	2201      	movs	r2, #1
 800665e:	4819      	ldr	r0, [pc, #100]	@ (80066c4 <HAL_UART_RxCpltCallback+0xa8>)
 8006660:	f011 fc88 	bl	8017f74 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006664:	4b14      	ldr	r3, [pc, #80]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	4b15      	ldr	r3, [pc, #84]	@ (80066c0 <HAL_UART_RxCpltCallback+0xa4>)
 800666c:	2100      	movs	r1, #0
 800666e:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006670:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <HAL_UART_RxCpltCallback+0xac>)
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8006676:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <HAL_UART_RxCpltCallback+0xa4>)
 800667e:	4413      	add	r3, r2
 8006680:	2201      	movs	r2, #1
 8006682:	4619      	mov	r1, r3
 8006684:	480f      	ldr	r0, [pc, #60]	@ (80066c4 <HAL_UART_RxCpltCallback+0xa8>)
 8006686:	f011 fd03 	bl	8018090 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 800668a:	2201      	movs	r2, #1
 800668c:	490b      	ldr	r1, [pc, #44]	@ (80066bc <HAL_UART_RxCpltCallback+0xa0>)
 800668e:	480d      	ldr	r0, [pc, #52]	@ (80066c4 <HAL_UART_RxCpltCallback+0xa8>)
 8006690:	f011 fd92 	bl	80181b8 <HAL_UART_Receive_IT>
	command_ch_num++;
 8006694:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	b2da      	uxtb	r2, r3
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 800669e:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 80066a0:	4b09      	ldr	r3, [pc, #36]	@ (80066c8 <HAL_UART_RxCpltCallback+0xac>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d102      	bne.n	80066ae <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 80066a8:	4b03      	ldr	r3, [pc, #12]	@ (80066b8 <HAL_UART_RxCpltCallback+0x9c>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]
	}
}
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	000041e7 	.word	0x000041e7
 80066bc:	000041e8 	.word	0x000041e8
 80066c0:	000041dc 	.word	0x000041dc
 80066c4:	240004b0 	.word	0x240004b0
 80066c8:	000041e6 	.word	0x000041e6
 80066cc:	00000000 	.word	0x00000000

080066d0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 80066d8:	4bba      	ldr	r3, [pc, #744]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f040 85a5 	bne.w	800722c <HAL_I2C_MemRxCpltCallback+0xb5c>
			MPU6050_IRQ = 0;
 80066e2:	4bb8      	ldr	r3, [pc, #736]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 80066e8:	2201      	movs	r2, #1
 80066ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066ee:	48b6      	ldr	r0, [pc, #728]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 80066f0:	f008 f898 	bl	800e824 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80066f4:	4bb5      	ldr	r3, [pc, #724]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80066f6:	edd3 7a00 	vldr	s15, [r3]
 80066fa:	4bb5      	ldr	r3, [pc, #724]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x300>)
 80066fc:	ed93 7a00 	vldr	s14, [r3]
 8006700:	4bb4      	ldr	r3, [pc, #720]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x304>)
 8006702:	edd3 6a00 	vldr	s13, [r3]
 8006706:	4bb4      	ldr	r3, [pc, #720]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x308>)
 8006708:	ed93 6a00 	vldr	s12, [r3]
 800670c:	4bb3      	ldr	r3, [pc, #716]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x30c>)
 800670e:	edd3 5a00 	vldr	s11, [r3]
 8006712:	4bb3      	ldr	r3, [pc, #716]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006714:	ed93 5a00 	vldr	s10, [r3]
 8006718:	eddf 4ab2 	vldr	s9, [pc, #712]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x314>
 800671c:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 80069e8 <HAL_I2C_MemRxCpltCallback+0x318>
 8006720:	4bb2      	ldr	r3, [pc, #712]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	4bb2      	ldr	r3, [pc, #712]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	eef0 3a44 	vmov.f32	s7, s8
 800672c:	eeb0 3a64 	vmov.f32	s6, s9
 8006730:	eef0 2a45 	vmov.f32	s5, s10
 8006734:	eeb0 2a65 	vmov.f32	s4, s11
 8006738:	eef0 1a46 	vmov.f32	s3, s12
 800673c:	eeb0 1a66 	vmov.f32	s2, s13
 8006740:	eef0 0a47 	vmov.f32	s1, s14
 8006744:	eeb0 0a67 	vmov.f32	s0, s15
 8006748:	4baa      	ldr	r3, [pc, #680]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800674a:	4aab      	ldr	r2, [pc, #684]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x328>)
 800674c:	49ab      	ldr	r1, [pc, #684]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x32c>)
 800674e:	48ac      	ldr	r0, [pc, #688]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006750:	f7fb f880 	bl	8001854 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8006754:	4baa      	ldr	r3, [pc, #680]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006756:	edd3 7a00 	vldr	s15, [r3]
 800675a:	4ba8      	ldr	r3, [pc, #672]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x32c>)
 800675c:	ed93 7a00 	vldr	s14, [r3]
 8006760:	4ba5      	ldr	r3, [pc, #660]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006762:	edd3 6a00 	vldr	s13, [r3]
 8006766:	49a7      	ldr	r1, [pc, #668]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006768:	48a7      	ldr	r0, [pc, #668]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x338>)
 800676a:	eeb0 1a66 	vmov.f32	s2, s13
 800676e:	eef0 0a47 	vmov.f32	s1, s14
 8006772:	eeb0 0a67 	vmov.f32	s0, s15
 8006776:	f7fa ff13 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800677a:	4ba3      	ldr	r3, [pc, #652]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x338>)
 800677c:	edd3 7a00 	vldr	s15, [r3]
 8006780:	4ba0      	ldr	r3, [pc, #640]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006782:	ed93 7a00 	vldr	s14, [r3]
 8006786:	4ba1      	ldr	r3, [pc, #644]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006788:	edd3 6a00 	vldr	s13, [r3]
 800678c:	4b99      	ldr	r3, [pc, #612]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800678e:	ed93 6a00 	vldr	s12, [r3]
 8006792:	4b97      	ldr	r3, [pc, #604]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006794:	edd3 5a00 	vldr	s11, [r3]
 8006798:	4b94      	ldr	r3, [pc, #592]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x31c>)
 800679a:	ed93 5a00 	vldr	s10, [r3]
 800679e:	eef0 2a45 	vmov.f32	s5, s10
 80067a2:	eeb0 2a65 	vmov.f32	s4, s11
 80067a6:	eef0 1a46 	vmov.f32	s3, s12
 80067aa:	eeb0 1a66 	vmov.f32	s2, s13
 80067ae:	eef0 0a47 	vmov.f32	s1, s14
 80067b2:	eeb0 0a67 	vmov.f32	s0, s15
 80067b6:	4896      	ldr	r0, [pc, #600]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x340>)
 80067b8:	f7fb f8f6 	bl	80019a8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 80067bc:	4b94      	ldr	r3, [pc, #592]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x340>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a94      	ldr	r2, [pc, #592]	@ (8006a14 <HAL_I2C_MemRxCpltCallback+0x344>)
 80067c2:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80067c4:	4b92      	ldr	r3, [pc, #584]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x340>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a93      	ldr	r2, [pc, #588]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x348>)
 80067ca:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 80067cc:	4b90      	ldr	r3, [pc, #576]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x340>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	4a92      	ldr	r2, [pc, #584]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x34c>)
 80067d2:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 80067d4:	4b92      	ldr	r3, [pc, #584]	@ (8006a20 <HAL_I2C_MemRxCpltCallback+0x350>)
 80067d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067e2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ea:	4b8e      	ldr	r3, [pc, #568]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067ec:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80067f0:	4b8d      	ldr	r3, [pc, #564]	@ (8006a28 <HAL_I2C_MemRxCpltCallback+0x358>)
 80067f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006806:	4b89      	ldr	r3, [pc, #548]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006808:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 800680c:	4b88      	ldr	r3, [pc, #544]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x360>)
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006814:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 8006818:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800681c:	4b81      	ldr	r3, [pc, #516]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x354>)
 800681e:	edd3 7a00 	vldr	s15, [r3]
 8006822:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006826:	eddf 7a83 	vldr	s15, [pc, #524]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 800682a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800682e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006832:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 800683e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800684e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006852:	4b79      	ldr	r3, [pc, #484]	@ (8006a38 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006854:	edd3 7a00 	vldr	s15, [r3]
 8006858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800685c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006860:	4b70      	ldr	r3, [pc, #448]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x354>)
 8006862:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006866:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 800686a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800686e:	4b6f      	ldr	r3, [pc, #444]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006870:	edd3 7a00 	vldr	s15, [r3]
 8006874:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006878:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 800687c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006884:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688c:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 8006890:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80068a0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80068a4:	4b65      	ldr	r3, [pc, #404]	@ (8006a3c <HAL_I2C_MemRxCpltCallback+0x36c>)
 80068a6:	edd3 7a00 	vldr	s15, [r3]
 80068aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068b2:	4b5e      	ldr	r3, [pc, #376]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068b4:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 80068b8:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 80068bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80068c0:	4b5b      	ldr	r3, [pc, #364]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80068ca:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 80068ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068de:	eddf 7a55 	vldr	s15, [pc, #340]	@ 8006a34 <HAL_I2C_MemRxCpltCallback+0x364>
 80068e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80068f2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80068f6:	4b52      	ldr	r3, [pc, #328]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x370>)
 80068f8:	edd3 7a00 	vldr	s15, [r3]
 80068fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006904:	4b4a      	ldr	r3, [pc, #296]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006906:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 800690a:	4b46      	ldr	r3, [pc, #280]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x354>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a38 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006910:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 8006912:	4b46      	ldr	r3, [pc, #280]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a49      	ldr	r2, [pc, #292]	@ (8006a3c <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006918:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 800691a:	4b45      	ldr	r3, [pc, #276]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x360>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a48      	ldr	r2, [pc, #288]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006920:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 8006922:	4b42      	ldr	r3, [pc, #264]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006924:	ed93 7a00 	vldr	s14, [r3]
 8006928:	4b3a      	ldr	r3, [pc, #232]	@ (8006a14 <HAL_I2C_MemRxCpltCallback+0x344>)
 800692a:	edd3 7a00 	vldr	s15, [r3]
 800692e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006932:	4b44      	ldr	r3, [pc, #272]	@ (8006a44 <HAL_I2C_MemRxCpltCallback+0x374>)
 8006934:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 8006938:	4b3a      	ldr	r3, [pc, #232]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x354>)
 800693a:	ed93 7a00 	vldr	s14, [r3]
 800693e:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006940:	edd3 7a00 	vldr	s15, [r3]
 8006944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006948:	4b3f      	ldr	r3, [pc, #252]	@ (8006a48 <HAL_I2C_MemRxCpltCallback+0x378>)
 800694a:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 800694e:	4b38      	ldr	r3, [pc, #224]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006950:	ed93 7a00 	vldr	s14, [r3]
 8006954:	4b31      	ldr	r3, [pc, #196]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006956:	edd3 7a00 	vldr	s15, [r3]
 800695a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800695e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a4c <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006960:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - gx;
 8006964:	4b3a      	ldr	r3, [pc, #232]	@ (8006a50 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006966:	ed93 7a00 	vldr	s14, [r3]
 800696a:	4b22      	ldr	r3, [pc, #136]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800696c:	edd3 7a00 	vldr	s15, [r3]
 8006970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006974:	4b37      	ldr	r3, [pc, #220]	@ (8006a54 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006976:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - gy;
 800697a:	4b37      	ldr	r3, [pc, #220]	@ (8006a58 <HAL_I2C_MemRxCpltCallback+0x388>)
 800697c:	ed93 7a00 	vldr	s14, [r3]
 8006980:	4b1b      	ldr	r3, [pc, #108]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006982:	edd3 7a00 	vldr	s15, [r3]
 8006986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800698a:	4b34      	ldr	r3, [pc, #208]	@ (8006a5c <HAL_I2C_MemRxCpltCallback+0x38c>)
 800698c:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - gz;
 8006990:	4b33      	ldr	r3, [pc, #204]	@ (8006a60 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006992:	ed93 7a00 	vldr	s14, [r3]
 8006996:	4b15      	ldr	r3, [pc, #84]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006998:	edd3 7a00 	vldr	s15, [r3]
 800699c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069a0:	4b30      	ldr	r3, [pc, #192]	@ (8006a64 <HAL_I2C_MemRxCpltCallback+0x394>)
 80069a2:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 80069a6:	4b30      	ldr	r3, [pc, #192]	@ (8006a68 <HAL_I2C_MemRxCpltCallback+0x398>)
 80069a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d05f      	beq.n	8006a70 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80069b0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a6c <HAL_I2C_MemRxCpltCallback+0x39c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069c0:	e063      	b.n	8006a8a <HAL_I2C_MemRxCpltCallback+0x3ba>
 80069c2:	bf00      	nop
 80069c4:	000041fc 	.word	0x000041fc
 80069c8:	58021000 	.word	0x58021000
 80069cc:	00000030 	.word	0x00000030
 80069d0:	00000034 	.word	0x00000034
 80069d4:	00000038 	.word	0x00000038
 80069d8:	0000003c 	.word	0x0000003c
 80069dc:	00000040 	.word	0x00000040
 80069e0:	00000044 	.word	0x00000044
 80069e4:	42830000 	.word	0x42830000
 80069e8:	46000000 	.word	0x46000000
 80069ec:	00000014 	.word	0x00000014
 80069f0:	00000010 	.word	0x00000010
 80069f4:	0000000c 	.word	0x0000000c
 80069f8:	00000008 	.word	0x00000008
 80069fc:	00000004 	.word	0x00000004
 8006a00:	00000000 	.word	0x00000000
 8006a04:	0000001c 	.word	0x0000001c
 8006a08:	00000018 	.word	0x00000018
 8006a0c:	00000058 	.word	0x00000058
 8006a10:	00000088 	.word	0x00000088
 8006a14:	00004088 	.word	0x00004088
 8006a18:	0000408c 	.word	0x0000408c
 8006a1c:	00004090 	.word	0x00004090
 8006a20:	00004056 	.word	0x00004056
 8006a24:	0000407c 	.word	0x0000407c
 8006a28:	00004054 	.word	0x00004054
 8006a2c:	00004078 	.word	0x00004078
 8006a30:	00004080 	.word	0x00004080
 8006a34:	3a83126f 	.word	0x3a83126f
 8006a38:	00004060 	.word	0x00004060
 8006a3c:	0000405c 	.word	0x0000405c
 8006a40:	00004064 	.word	0x00004064
 8006a44:	00004094 	.word	0x00004094
 8006a48:	00004098 	.word	0x00004098
 8006a4c:	0000409c 	.word	0x0000409c
 8006a50:	000040dc 	.word	0x000040dc
 8006a54:	000040a0 	.word	0x000040a0
 8006a58:	000040e4 	.word	0x000040e4
 8006a5c:	000040a4 	.word	0x000040a4
 8006a60:	000040e0 	.word	0x000040e0
 8006a64:	000040a8 	.word	0x000040a8
 8006a68:	00000184 	.word	0x00000184
 8006a6c:	000040c4 	.word	0x000040c4
 8006a70:	4ba4      	ldr	r3, [pc, #656]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a7c:	4ba2      	ldr	r3, [pc, #648]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a7e:	edd3 7a00 	vldr	s15, [r3]
 8006a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a8a:	4b9e      	ldr	r3, [pc, #632]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a8c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 8006a90:	4b9e      	ldr	r3, [pc, #632]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a92:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <HAL_I2C_MemRxCpltCallback+0x3dc>
 8006a9a:	4b9d      	ldr	r3, [pc, #628]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aaa:	e00c      	b.n	8006ac6 <HAL_I2C_MemRxCpltCallback+0x3f6>
 8006aac:	4b98      	ldr	r3, [pc, #608]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ab8:	4b96      	ldr	r3, [pc, #600]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006aba:	edd3 7a00 	vldr	s15, [r3]
 8006abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac6:	4b92      	ldr	r3, [pc, #584]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006ac8:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 8006acc:	4b8f      	ldr	r3, [pc, #572]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006ace:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_I2C_MemRxCpltCallback+0x418>
 8006ad6:	4b90      	ldr	r3, [pc, #576]	@ (8006d18 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae6:	e00c      	b.n	8006b02 <HAL_I2C_MemRxCpltCallback+0x432>
 8006ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8006d18 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af4:	4b89      	ldr	r3, [pc, #548]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006af6:	edd3 7a00 	vldr	s15, [r3]
 8006afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b02:	4b85      	ldr	r3, [pc, #532]	@ (8006d18 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006b04:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 8006b08:	4b80      	ldr	r3, [pc, #512]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d008      	beq.n	8006b24 <HAL_I2C_MemRxCpltCallback+0x454>
 8006b12:	4b83      	ldr	r3, [pc, #524]	@ (8006d20 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b22:	e00c      	b.n	8006b3e <HAL_I2C_MemRxCpltCallback+0x46e>
 8006b24:	4b7e      	ldr	r3, [pc, #504]	@ (8006d20 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b30:	4b7c      	ldr	r3, [pc, #496]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006b32:	edd3 7a00 	vldr	s15, [r3]
 8006b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3e:	4b78      	ldr	r3, [pc, #480]	@ (8006d20 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006b40:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 8006b44:	4b71      	ldr	r3, [pc, #452]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b46:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <HAL_I2C_MemRxCpltCallback+0x490>
 8006b4e:	4b76      	ldr	r3, [pc, #472]	@ (8006d28 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b5e:	e00c      	b.n	8006b7a <HAL_I2C_MemRxCpltCallback+0x4aa>
 8006b60:	4b71      	ldr	r3, [pc, #452]	@ (8006d28 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006b6e:	edd3 7a00 	vldr	s15, [r3]
 8006b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b7a:	4b6b      	ldr	r3, [pc, #428]	@ (8006d28 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b7c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006b80:	4b62      	ldr	r3, [pc, #392]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b82:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006b8a:	4b69      	ldr	r3, [pc, #420]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b9a:	e00c      	b.n	8006bb6 <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006b9c:	4b64      	ldr	r3, [pc, #400]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ba8:	4b62      	ldr	r3, [pc, #392]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x664>)
 8006baa:	edd3 7a00 	vldr	s15, [r3]
 8006bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006bb8:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	495e      	ldr	r1, [pc, #376]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006bc0:	485e      	ldr	r0, [pc, #376]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006bc2:	f7fc ff5f 	bl	8003a84 <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	495d      	ldr	r1, [pc, #372]	@ (8006d40 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006bca:	485e      	ldr	r0, [pc, #376]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x674>)
 8006bcc:	f7fc ff5a 	bl	8003a84 <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	495d      	ldr	r1, [pc, #372]	@ (8006d48 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006bd4:	485d      	ldr	r0, [pc, #372]	@ (8006d4c <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006bd6:	f7fc ff55 	bl	8003a84 <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006bda:	2204      	movs	r2, #4
 8006bdc:	495c      	ldr	r1, [pc, #368]	@ (8006d50 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006bde:	485d      	ldr	r0, [pc, #372]	@ (8006d54 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006be0:	f7fc ff50 	bl	8003a84 <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006be4:	2205      	movs	r2, #5
 8006be6:	495c      	ldr	r1, [pc, #368]	@ (8006d58 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006be8:	485c      	ldr	r0, [pc, #368]	@ (8006d5c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006bea:	f7fc ff4b 	bl	8003a84 <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006bee:	2206      	movs	r2, #6
 8006bf0:	495b      	ldr	r1, [pc, #364]	@ (8006d60 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006bf2:	485c      	ldr	r0, [pc, #368]	@ (8006d64 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006bf4:	f7fc ff46 	bl	8003a84 <PID_cal>


			old_error_pitch = pitch_error;
 8006bf8:	4b43      	ldr	r3, [pc, #268]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8006d68 <HAL_I2C_MemRxCpltCallback+0x698>)
 8006bfe:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006c00:	4b44      	ldr	r3, [pc, #272]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a59      	ldr	r2, [pc, #356]	@ (8006d6c <HAL_I2C_MemRxCpltCallback+0x69c>)
 8006c06:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006c08:	4b44      	ldr	r3, [pc, #272]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a58      	ldr	r2, [pc, #352]	@ (8006d70 <HAL_I2C_MemRxCpltCallback+0x6a0>)
 8006c0e:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006c10:	4b44      	ldr	r3, [pc, #272]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a57      	ldr	r2, [pc, #348]	@ (8006d74 <HAL_I2C_MemRxCpltCallback+0x6a4>)
 8006c16:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006c18:	4b44      	ldr	r3, [pc, #272]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a56      	ldr	r2, [pc, #344]	@ (8006d78 <HAL_I2C_MemRxCpltCallback+0x6a8>)
 8006c1e:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006c20:	4b56      	ldr	r3, [pc, #344]	@ (8006d7c <HAL_I2C_MemRxCpltCallback+0x6ac>)
 8006c22:	ed93 7a00 	vldr	s14, [r3]
 8006c26:	4b56      	ldr	r3, [pc, #344]	@ (8006d80 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 8006c28:	edd3 7a00 	vldr	s15, [r3]
 8006c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c30:	4b54      	ldr	r3, [pc, #336]	@ (8006d84 <HAL_I2C_MemRxCpltCallback+0x6b4>)
 8006c32:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006c36:	4b49      	ldr	r3, [pc, #292]	@ (8006d5c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c38:	edd3 7a00 	vldr	s15, [r3]
 8006c3c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006d88 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c48:	dd04      	ble.n	8006c54 <HAL_I2C_MemRxCpltCallback+0x584>
 8006c4a:	f001 f871 	bl	8007d30 <ROOL_MAX_VAL>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	461a      	mov	r2, r3
 8006c52:	e012      	b.n	8006c7a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c54:	4b41      	ldr	r3, [pc, #260]	@ (8006d5c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c56:	edd3 7a00 	vldr	s15, [r3]
 8006c5a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006d8c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c66:	d504      	bpl.n	8006c72 <HAL_I2C_MemRxCpltCallback+0x5a2>
 8006c68:	f001 f872 	bl	8007d50 <ROOL_MIN_VAL>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	e003      	b.n	8006c7a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c72:	f001 f8bd 	bl	8007df0 <ROOL_GOOD_VAL>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4b24      	ldr	r3, [pc, #144]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c7c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006c7e:	4b35      	ldr	r3, [pc, #212]	@ (8006d54 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c80:	edd3 7a00 	vldr	s15, [r3]
 8006c84:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006d88 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c90:	dd04      	ble.n	8006c9c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006c92:	f001 f86d 	bl	8007d70 <PITCH_MAX_VAL>
 8006c96:	4603      	mov	r3, r0
 8006c98:	461a      	mov	r2, r3
 8006c9a:	e012      	b.n	8006cc2 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d54 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c9e:	edd3 7a00 	vldr	s15, [r3]
 8006ca2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006d8c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cae:	d504      	bpl.n	8006cba <HAL_I2C_MemRxCpltCallback+0x5ea>
 8006cb0:	f001 f86e 	bl	8007d90 <PITCH_MIN_VAL>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	e003      	b.n	8006cc2 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006cba:	f001 f8b1 	bl	8007e20 <PITCH_GOOD_VAL>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006cc4:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006cc6:	4b27      	ldr	r3, [pc, #156]	@ (8006d64 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006cc8:	edd3 7a00 	vldr	s15, [r3]
 8006ccc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006d88 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd8:	dd04      	ble.n	8006ce4 <HAL_I2C_MemRxCpltCallback+0x614>
 8006cda:	f001 f869 	bl	8007db0 <YAW_MAX_VAL>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	e059      	b.n	8006d98 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8006d64 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006ce6:	edd3 7a00 	vldr	s15, [r3]
 8006cea:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006d8c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf6:	d54b      	bpl.n	8006d90 <HAL_I2C_MemRxCpltCallback+0x6c0>
 8006cf8:	f001 f86a 	bl	8007dd0 <YAW_MIN_VAL>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	e04a      	b.n	8006d98 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006d02:	bf00      	nop
 8006d04:	000040c4 	.word	0x000040c4
 8006d08:	00004094 	.word	0x00004094
 8006d0c:	00000184 	.word	0x00000184
 8006d10:	000040c8 	.word	0x000040c8
 8006d14:	00004098 	.word	0x00004098
 8006d18:	000040cc 	.word	0x000040cc
 8006d1c:	0000409c 	.word	0x0000409c
 8006d20:	000040d0 	.word	0x000040d0
 8006d24:	000040a0 	.word	0x000040a0
 8006d28:	000040d4 	.word	0x000040d4
 8006d2c:	000040a4 	.word	0x000040a4
 8006d30:	000040d8 	.word	0x000040d8
 8006d34:	000040a8 	.word	0x000040a8
 8006d38:	00004118 	.word	0x00004118
 8006d3c:	000040dc 	.word	0x000040dc
 8006d40:	0000412c 	.word	0x0000412c
 8006d44:	000040e4 	.word	0x000040e4
 8006d48:	00004140 	.word	0x00004140
 8006d4c:	000040e0 	.word	0x000040e0
 8006d50:	00004178 	.word	0x00004178
 8006d54:	000040e8 	.word	0x000040e8
 8006d58:	0000418c 	.word	0x0000418c
 8006d5c:	000040f0 	.word	0x000040f0
 8006d60:	000041a0 	.word	0x000041a0
 8006d64:	000040ec 	.word	0x000040ec
 8006d68:	000040ac 	.word	0x000040ac
 8006d6c:	000040b0 	.word	0x000040b0
 8006d70:	000040b4 	.word	0x000040b4
 8006d74:	000040b8 	.word	0x000040b8
 8006d78:	000040bc 	.word	0x000040bc
 8006d7c:	00004080 	.word	0x00004080
 8006d80:	00000014 	.word	0x00000014
 8006d84:	000040c0 	.word	0x000040c0
 8006d88:	459c4000 	.word	0x459c4000
 8006d8c:	c59c4000 	.word	0xc59c4000
 8006d90:	f001 f85e 	bl	8007e50 <YAW_GOOD_VAL>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	4bc3      	ldr	r3, [pc, #780]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d9a:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006d9c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006da0:	f7fc fd46 	bl	8003830 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006da4:	4bc0      	ldr	r3, [pc, #768]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	461a      	mov	r2, r3
 8006daa:	4bc0      	ldr	r3, [pc, #768]	@ (80070ac <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	dd05      	ble.n	8006dc0 <HAL_I2C_MemRxCpltCallback+0x6f0>
				MYDRON.THRUST = thrust_limit;
 8006db4:	4bbd      	ldr	r3, [pc, #756]	@ (80070ac <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	4bba      	ldr	r3, [pc, #744]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dbe:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006dc0:	4bbb      	ldr	r3, [pc, #748]	@ (80070b0 <HAL_I2C_MemRxCpltCallback+0x9e0>)
 8006dc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8006dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dca:	f000 fbb9 	bl	8007540 <WartoscBezwgledna>
 8006dce:	eef0 7a40 	vmov.f32	s15, s0
 8006dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd6:	f000 ff5f 	bl	8007c98 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006dda:	4bb6      	ldr	r3, [pc, #728]	@ (80070b4 <HAL_I2C_MemRxCpltCallback+0x9e4>)
 8006ddc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006de0:	eeb0 0a67 	vmov.f32	s0, s15
 8006de4:	f000 fbac 	bl	8007540 <WartoscBezwgledna>
 8006de8:	eef0 7a40 	vmov.f32	s15, s0
 8006dec:	eeb0 0a67 	vmov.f32	s0, s15
 8006df0:	f000 ff52 	bl	8007c98 <Stack_Push>
			Stack_Push(now_pitch);
 8006df4:	4bb0      	ldr	r3, [pc, #704]	@ (80070b8 <HAL_I2C_MemRxCpltCallback+0x9e8>)
 8006df6:	edd3 7a00 	vldr	s15, [r3]
 8006dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006dfe:	f000 ff4b 	bl	8007c98 <Stack_Push>
			Stack_Push(now_rool);
 8006e02:	4bae      	ldr	r3, [pc, #696]	@ (80070bc <HAL_I2C_MemRxCpltCallback+0x9ec>)
 8006e04:	edd3 7a00 	vldr	s15, [r3]
 8006e08:	eeb0 0a67 	vmov.f32	s0, s15
 8006e0c:	f000 ff44 	bl	8007c98 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006e10:	4ba5      	ldr	r3, [pc, #660]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e1c:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8007090 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e24:	4ba0      	ldr	r3, [pc, #640]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e36:	4b9c      	ldr	r3, [pc, #624]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e3c:	ee07 3a90 	vmov	s15, r3
 8006e40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e48:	4b97      	ldr	r3, [pc, #604]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e5a:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007098 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e62:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 80070a0 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e6e:	ee17 2a90 	vmov	r2, s15
 8006e72:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d832      	bhi.n	8006ee0 <HAL_I2C_MemRxCpltCallback+0x810>
 8006e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e86:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8007090 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e8e:	4b86      	ldr	r3, [pc, #536]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ea0:	4b81      	ldr	r3, [pc, #516]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eae:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ec0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ec4:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007098 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006ec8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ecc:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 80070a0 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006ed0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ed4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ed8:	ee17 3a90 	vmov	r3, s15
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	e001      	b.n	8006ee4 <HAL_I2C_MemRxCpltCallback+0x814>
 8006ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006ee4:	4a76      	ldr	r2, [pc, #472]	@ (80070c0 <HAL_I2C_MemRxCpltCallback+0x9f0>)
 8006ee6:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eea:	885b      	ldrh	r3, [r3, #2]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ef4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007090 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006ef8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006efc:	4b6a      	ldr	r3, [pc, #424]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006efe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f0e:	4b66      	ldr	r3, [pc, #408]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f20:	4b61      	ldr	r3, [pc, #388]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f32:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007098 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f3a:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 80070a0 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f46:	ee17 2a90 	vmov	r2, s15
 8006f4a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d832      	bhi.n	8006fb8 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006f52:	4b55      	ldr	r3, [pc, #340]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f54:	885b      	ldrh	r3, [r3, #2]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f5e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8007090 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f66:	4b50      	ldr	r3, [pc, #320]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f78:	4b4b      	ldr	r3, [pc, #300]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f8a:	4b47      	ldr	r3, [pc, #284]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f9c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007098 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006fa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fa4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80070a0 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fb0:	ee17 3a90 	vmov	r3, s15
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	e001      	b.n	8006fbc <HAL_I2C_MemRxCpltCallback+0x8ec>
 8006fb8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006fbc:	4a41      	ldr	r2, [pc, #260]	@ (80070c4 <HAL_I2C_MemRxCpltCallback+0x9f4>)
 8006fbe:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006fc0:	4b39      	ldr	r3, [pc, #228]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fc2:	885b      	ldrh	r3, [r3, #2]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fcc:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8007090 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006fd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fd4:	4b34      	ldr	r3, [pc, #208]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fe2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fe6:	4b30      	ldr	r3, [pc, #192]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ff4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007006:	ee36 7b47 	vsub.f64	d7, d6, d7
 800700a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007098 <HAL_I2C_MemRxCpltCallback+0x9c8>
 800700e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007012:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 80070a0 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8007016:	ee37 7b06 	vadd.f64	d7, d7, d6
 800701a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800701e:	ee17 2a90 	vmov	r2, s15
 8007022:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8007026:	429a      	cmp	r2, r3
 8007028:	d84e      	bhi.n	80070c8 <HAL_I2C_MemRxCpltCallback+0x9f8>
 800702a:	4b1f      	ldr	r3, [pc, #124]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 800702c:	885b      	ldrh	r3, [r3, #2]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007036:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8007090 <HAL_I2C_MemRxCpltCallback+0x9c0>
 800703a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800703e:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007040:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800704c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007050:	4b15      	ldr	r3, [pc, #84]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800705e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007062:	4b11      	ldr	r3, [pc, #68]	@ (80070a8 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007064:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007070:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007074:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007098 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8007078:	ee37 7b06 	vadd.f64	d7, d7, d6
 800707c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80070a0 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8007080:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007084:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007088:	ee17 3a90 	vmov	r3, s15
 800708c:	b29b      	uxth	r3, r3
 800708e:	e01d      	b.n	80070cc <HAL_I2C_MemRxCpltCallback+0x9fc>
 8007090:	66666666 	.word	0x66666666
 8007094:	3fe66666 	.word	0x3fe66666
 8007098:	00000000 	.word	0x00000000
 800709c:	40c48200 	.word	0x40c48200
 80070a0:	00000000 	.word	0x00000000
 80070a4:	407f4000 	.word	0x407f4000
 80070a8:	00000184 	.word	0x00000184
 80070ac:	0000406a 	.word	0x0000406a
 80070b0:	00004118 	.word	0x00004118
 80070b4:	0000412c 	.word	0x0000412c
 80070b8:	00004088 	.word	0x00004088
 80070bc:	0000408c 	.word	0x0000408c
 80070c0:	000041b4 	.word	0x000041b4
 80070c4:	000041b6 	.word	0x000041b6
 80070c8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80070cc:	4a92      	ldr	r2, [pc, #584]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80070ce:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 80070d0:	4b92      	ldr	r3, [pc, #584]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070d2:	885b      	ldrh	r3, [r3, #2]
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070dc:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 80072e8 <HAL_I2C_MemRxCpltCallback+0xc18>
 80070e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070e4:	4b8d      	ldr	r3, [pc, #564]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070f6:	4b89      	ldr	r3, [pc, #548]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007104:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007108:	4b84      	ldr	r3, [pc, #528]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800710a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007116:	ee36 7b07 	vadd.f64	d7, d6, d7
 800711a:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80072f0 <HAL_I2C_MemRxCpltCallback+0xc20>
 800711e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007122:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80072f8 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007126:	ee37 7b06 	vadd.f64	d7, d7, d6
 800712a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800712e:	ee17 2a90 	vmov	r2, s15
 8007132:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8007136:	429a      	cmp	r2, r3
 8007138:	d832      	bhi.n	80071a0 <HAL_I2C_MemRxCpltCallback+0xad0>
 800713a:	4b78      	ldr	r3, [pc, #480]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007146:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 80072e8 <HAL_I2C_MemRxCpltCallback+0xc18>
 800714a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800714e:	4b73      	ldr	r3, [pc, #460]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007150:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800715c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007160:	4b6e      	ldr	r3, [pc, #440]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800716e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007172:	4b6a      	ldr	r3, [pc, #424]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007174:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007180:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007184:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80072f0 <HAL_I2C_MemRxCpltCallback+0xc20>
 8007188:	ee37 7b06 	vadd.f64	d7, d7, d6
 800718c:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80072f8 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007190:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007198:	ee17 3a90 	vmov	r3, s15
 800719c:	b29b      	uxth	r3, r3
 800719e:	e001      	b.n	80071a4 <HAL_I2C_MemRxCpltCallback+0xad4>
 80071a0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80071a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80071a6:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 80071a8:	4b5e      	ldr	r3, [pc, #376]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc54>)
 80071aa:	881a      	ldrh	r2, [r3, #0]
 80071ac:	4b5e      	ldr	r3, [pc, #376]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xc58>)
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d004      	beq.n	80071be <HAL_I2C_MemRxCpltCallback+0xaee>
				ESC_1_SPEED(SPEED1);
 80071b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc54>)
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7f9 fe3b 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 80071be:	4b5b      	ldr	r3, [pc, #364]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80071c0:	881a      	ldrh	r2, [r3, #0]
 80071c2:	4b5b      	ldr	r3, [pc, #364]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc60>)
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d004      	beq.n	80071d4 <HAL_I2C_MemRxCpltCallback+0xb04>
				ESC_2_SPEED(SPEED2);
 80071ca:	4b58      	ldr	r3, [pc, #352]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7f9 fe52 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 80071d4:	4b50      	ldr	r3, [pc, #320]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80071d6:	881a      	ldrh	r2, [r3, #0]
 80071d8:	4b56      	ldr	r3, [pc, #344]	@ (8007334 <HAL_I2C_MemRxCpltCallback+0xc64>)
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d004      	beq.n	80071ea <HAL_I2C_MemRxCpltCallback+0xb1a>
				ESC_3_SPEED(SPEED3);
 80071e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7f9 fe69 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 80071ea:	4b4d      	ldr	r3, [pc, #308]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80071ec:	881a      	ldrh	r2, [r3, #0]
 80071ee:	4b52      	ldr	r3, [pc, #328]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d004      	beq.n	8007200 <HAL_I2C_MemRxCpltCallback+0xb30>
				ESC_4_SPEED(SPEED4);
 80071f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7f9 fe80 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8007200:	4b48      	ldr	r3, [pc, #288]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8007202:	881a      	ldrh	r2, [r3, #0]
 8007204:	4b48      	ldr	r3, [pc, #288]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8007206:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8007208:	4b48      	ldr	r3, [pc, #288]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	4b48      	ldr	r3, [pc, #288]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc60>)
 800720e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8007210:	4b41      	ldr	r3, [pc, #260]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8007212:	881a      	ldrh	r2, [r3, #0]
 8007214:	4b47      	ldr	r3, [pc, #284]	@ (8007334 <HAL_I2C_MemRxCpltCallback+0xc64>)
 8007216:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8007218:	4b41      	ldr	r3, [pc, #260]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc50>)
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	4b46      	ldr	r3, [pc, #280]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800721e:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8007220:	2200      	movs	r2, #0
 8007222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007226:	4845      	ldr	r0, [pc, #276]	@ (800733c <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007228:	f007 fafc 	bl	800e824 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 800722c:	4b44      	ldr	r3, [pc, #272]	@ (8007340 <HAL_I2C_MemRxCpltCallback+0xc70>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d125      	bne.n	8007280 <HAL_I2C_MemRxCpltCallback+0xbb0>
		HMC583L_IRQ = 0;
 8007234:	4b42      	ldr	r3, [pc, #264]	@ (8007340 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
		HMC5883L_Get_Z_End_IT();
 800723a:	f7f9 ff69 	bl	8001110 <HMC5883L_Get_Z_End_IT>
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 800723e:	4b41      	ldr	r3, [pc, #260]	@ (8007344 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007240:	edd3 7a00 	vldr	s15, [r3]
 8007244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007248:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8007300 <HAL_I2C_MemRxCpltCallback+0xc30>
 800724c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007250:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8007308 <HAL_I2C_MemRxCpltCallback+0xc38>
 8007254:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8007258:	4b3b      	ldr	r3, [pc, #236]	@ (8007348 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800725a:	edd3 7a00 	vldr	s15, [r3]
 800725e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007262:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8007310 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007266:	ee27 7b05 	vmul.f64	d7, d7, d5
 800726a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800726e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007272:	4b34      	ldr	r3, [pc, #208]	@ (8007344 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007274:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8007278:	4b32      	ldr	r3, [pc, #200]	@ (8007344 <HAL_I2C_MemRxCpltCallback+0xc74>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a32      	ldr	r2, [pc, #200]	@ (8007348 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800727e:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8007280:	4b32      	ldr	r3, [pc, #200]	@ (800734c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d113      	bne.n	80072b0 <HAL_I2C_MemRxCpltCallback+0xbe0>
		temperature = BMP180_GET_temp_IT();
 8007288:	f7f9 fa82 	bl	8000790 <BMP180_GET_temp_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	461a      	mov	r2, r3
 8007290:	4b2f      	ldr	r3, [pc, #188]	@ (8007350 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007292:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8007294:	4b2e      	ldr	r3, [pc, #184]	@ (8007350 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	4618      	mov	r0, r3
 800729c:	f7f9 fb9c 	bl	80009d8 <BMP180_GET_temp>
 80072a0:	eef0 7a40 	vmov.f32	s15, s0
 80072a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007354 <HAL_I2C_MemRxCpltCallback+0xc84>)
 80072a6:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80072aa:	4b28      	ldr	r3, [pc, #160]	@ (800734c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 80072b0:	4b26      	ldr	r3, [pc, #152]	@ (800734c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d113      	bne.n	80072e0 <HAL_I2C_MemRxCpltCallback+0xc10>
		pressure = BMP180_GET_pres_IT();
 80072b8:	f7f9 fa80 	bl	80007bc <BMP180_GET_pres_IT>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	4b25      	ldr	r3, [pc, #148]	@ (8007358 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80072c2:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 80072c4:	4b24      	ldr	r3, [pc, #144]	@ (8007358 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7f9 fbe0 	bl	8000a90 <BMP180_GET_pres>
 80072d0:	eef0 7a40 	vmov.f32	s15, s0
 80072d4:	4b21      	ldr	r3, [pc, #132]	@ (800735c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 80072d6:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80072da:	4b1c      	ldr	r3, [pc, #112]	@ (800734c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
	}
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	66666666 	.word	0x66666666
 80072ec:	3fe66666 	.word	0x3fe66666
 80072f0:	00000000 	.word	0x00000000
 80072f4:	40c48200 	.word	0x40c48200
 80072f8:	00000000 	.word	0x00000000
 80072fc:	407f4000 	.word	0x407f4000
 8007300:	9999999a 	.word	0x9999999a
 8007304:	3fc99999 	.word	0x3fc99999
 8007308:	33333333 	.word	0x33333333
 800730c:	3ff33333 	.word	0x3ff33333
 8007310:	aaaaaaab 	.word	0xaaaaaaab
 8007314:	3feaaaaa 	.word	0x3feaaaaa
 8007318:	000041b8 	.word	0x000041b8
 800731c:	00000184 	.word	0x00000184
 8007320:	000041ba 	.word	0x000041ba
 8007324:	000041b4 	.word	0x000041b4
 8007328:	000041bc 	.word	0x000041bc
 800732c:	000041b6 	.word	0x000041b6
 8007330:	000041be 	.word	0x000041be
 8007334:	000041c0 	.word	0x000041c0
 8007338:	000041c2 	.word	0x000041c2
 800733c:	58021000 	.word	0x58021000
 8007340:	000041fd 	.word	0x000041fd
 8007344:	00000058 	.word	0x00000058
 8007348:	00000068 	.word	0x00000068
 800734c:	000041fe 	.word	0x000041fe
 8007350:	000000c4 	.word	0x000000c4
 8007354:	000000e8 	.word	0x000000e8
 8007358:	000000c8 	.word	0x000000c8
 800735c:	000000ec 	.word	0x000000ec

08007360 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8007360:	b580      	push	{r7, lr}
 8007362:	ed2d 8b04 	vpush	{d8-d9}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4611      	mov	r1, r2
 8007370:	461a      	mov	r2, r3
 8007372:	460b      	mov	r3, r1
 8007374:	71fb      	strb	r3, [r7, #7]
 8007376:	4613      	mov	r3, r2
 8007378:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8007380:	79ba      	ldrb	r2, [r7, #6]
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e02e      	b.n	80073ec <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800739c:	79fa      	ldrb	r2, [r7, #7]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	461a      	mov	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073c0:	eeb0 1b47 	vmov.f64	d1, d7
 80073c4:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80073c8:	f017 f84a 	bl	801e460 <pow>
 80073cc:	eeb0 7b40 	vmov.f64	d7, d0
 80073d0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80073d4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80073d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073dc:	ee17 3a90 	vmov	r3, s15
 80073e0:	b21a      	sxth	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3301      	adds	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	dacc      	bge.n	800738e <convert_array_to_value+0x2e>
	}

}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	ecbd 8b04 	vpop	{d8-d9}
 8007400:	bd80      	pop	{r7, pc}

08007402 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007402:	b590      	push	{r4, r7, lr}
 8007404:	b087      	sub	sp, #28
 8007406:	af00      	add	r7, sp, #0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	4611      	mov	r1, r2
 800740c:	461a      	mov	r2, r3
 800740e:	4603      	mov	r3, r0
 8007410:	80fb      	strh	r3, [r7, #6]
 8007412:	460b      	mov	r3, r1
 8007414:	717b      	strb	r3, [r7, #5]
 8007416:	4613      	mov	r3, r2
 8007418:	713b      	strb	r3, [r7, #4]
	int x = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007422:	793a      	ldrb	r2, [r7, #4]
 8007424:	797b      	ldrb	r3, [r7, #5]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	e03e      	b.n	80074ae <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8007430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d028      	beq.n	800748a <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	4619      	mov	r1, r3
 8007440:	200a      	movs	r0, #10
 8007442:	f000 f83d 	bl	80074c0 <potenga>
 8007446:	4603      	mov	r3, r0
 8007448:	b29b      	uxth	r3, r3
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	b29b      	uxth	r3, r3
 8007450:	80fb      	strh	r3, [r7, #6]
			x++;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3301      	adds	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8007458:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800746a:	eeb0 1b47 	vmov.f64	d1, d7
 800746e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007472:	f016 fff5 	bl	801e460 <pow>
 8007476:	eeb0 7b40 	vmov.f64	d7, d0
 800747a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800747e:	ee17 3a90 	vmov	r3, s15
 8007482:	b29b      	uxth	r3, r3
 8007484:	429c      	cmp	r4, r3
 8007486:	dad3      	bge.n	8007430 <convert_value_to_array+0x2e>
 8007488:	e000      	b.n	800748c <convert_value_to_array+0x8a>
				break;
 800748a:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 800748c:	797a      	ldrb	r2, [r7, #5]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4413      	add	r3, r2
 8007492:	461a      	mov	r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	4413      	add	r3, r2
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3301      	adds	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
		x = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	dad0      	bge.n	8007458 <convert_value_to_array+0x56>
	}
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd90      	pop	{r4, r7, pc}

080074c0 <potenga>:
uint32_t potenga(int a, int b){
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <potenga+0x18>
		return 1;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e02d      	b.n	8007534 <potenga+0x74>
	}
	if(b == 1){
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <potenga+0x22>
		return a;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	e028      	b.n	8007534 <potenga+0x74>
	}
	if(b > 1){
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	dd10      	ble.n	800750a <potenga+0x4a>
			for(int i = 1; i < b; i++){
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e007      	b.n	80074fe <potenga+0x3e>
			a = a*c;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3301      	adds	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	dbf3      	blt.n	80074ee <potenga+0x2e>
		}
		return a;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	e014      	b.n	8007534 <potenga+0x74>
	}
	if(b < 0){
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da10      	bge.n	8007532 <potenga+0x72>
		for(int i = 0; i < b; i++){
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	e007      	b.n	8007526 <potenga+0x66>
			a = a/c;
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	fb92 f3f3 	sdiv	r3, r2, r3
 800751e:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3301      	adds	r3, #1
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	dbf3      	blt.n	8007516 <potenga+0x56>
		}
		return a;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	e000      	b.n	8007534 <potenga+0x74>
	}
	return a;
 8007532:	687b      	ldr	r3, [r7, #4]
}
 8007534:	4618      	mov	r0, r3
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 800754a:	edd7 7a01 	vldr	s15, [r7, #4]
 800754e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007556:	d504      	bpl.n	8007562 <WartoscBezwgledna+0x22>
 8007558:	edd7 7a01 	vldr	s15, [r7, #4]
 800755c:	eef1 7a67 	vneg.f32	s15, s15
 8007560:	e001      	b.n	8007566 <WartoscBezwgledna+0x26>
 8007562:	edd7 7a01 	vldr	s15, [r7, #4]
 8007566:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	ee07 3a90 	vmov	s15, r3
}
 8007570:	eeb0 0a67 	vmov.f32	s0, s15
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	71fb      	strb	r3, [r7, #7]
 800758a:	460b      	mov	r3, r1
 800758c:	71bb      	strb	r3, [r7, #6]
 800758e:	4613      	mov	r3, r2
 8007590:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8007592:	4b09      	ldr	r3, [pc, #36]	@ (80075b8 <RGB_LED_Set_color+0x38>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	797a      	ldrb	r2, [r7, #5]
 8007598:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 800759a:	4b07      	ldr	r3, [pc, #28]	@ (80075b8 <RGB_LED_Set_color+0x38>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	79fa      	ldrb	r2, [r7, #7]
 80075a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 80075a2:	4b05      	ldr	r3, [pc, #20]	@ (80075b8 <RGB_LED_Set_color+0x38>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	79ba      	ldrb	r2, [r7, #6]
 80075a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	24000380 	.word	0x24000380
 80075bc:	00000000 	.word	0x00000000

080075c0 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075d8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007628 <RGB_LED_For_BAT+0x68>
 80075dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075e0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007630 <RGB_LED_For_BAT+0x70>
 80075e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075ec:	edc7 7a00 	vstr	s15, [r7]
 80075f0:	783b      	ldrb	r3, [r7, #0]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	79fa      	ldrb	r2, [r7, #7]
 80075f6:	ee07 2a90 	vmov	s15, r2
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007602:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007628 <RGB_LED_For_BAT+0x68>
 8007606:	ee27 7b06 	vmul.f64	d7, d7, d6
 800760a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800760e:	edc7 7a00 	vstr	s15, [r7]
 8007612:	783a      	ldrb	r2, [r7, #0]
 8007614:	b2d1      	uxtb	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ffb1 	bl	8007580 <RGB_LED_Set_color>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	66666666 	.word	0x66666666
 800762c:	40046666 	.word	0x40046666
 8007630:	00000000 	.word	0x00000000
 8007634:	406fe000 	.word	0x406fe000

08007638 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6039      	str	r1, [r7, #0]
 8007640:	4611      	mov	r1, r2
 8007642:	461a      	mov	r2, r3
 8007644:	4603      	mov	r3, r0
 8007646:	80fb      	strh	r3, [r7, #6]
 8007648:	460b      	mov	r3, r1
 800764a:	717b      	strb	r3, [r7, #5]
 800764c:	4613      	mov	r3, r2
 800764e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007658:	793a      	ldrb	r2, [r7, #4]
 800765a:	797b      	ldrb	r3, [r7, #5]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	da04      	bge.n	8007672 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007668:	797b      	ldrb	r3, [r7, #5]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4413      	add	r3, r2
 800766e:	222d      	movs	r2, #45	@ 0x2d
 8007670:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007672:	2301      	movs	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	e035      	b.n	80076e4 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01d      	beq.n	80076bc <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	4619      	mov	r1, r3
 8007688:	200a      	movs	r0, #10
 800768a:	f7ff ff19 	bl	80074c0 <potenga>
 800768e:	4603      	mov	r3, r0
 8007690:	b29b      	uxth	r3, r3
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	b29b      	uxth	r3, r3
 8007698:	80fb      	strh	r3, [r7, #6]
			x++;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	3301      	adds	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 80076a0:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	4619      	mov	r1, r3
 80076ac:	200a      	movs	r0, #10
 80076ae:	f7ff ff07 	bl	80074c0 <potenga>
 80076b2:	4603      	mov	r3, r0
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	429c      	cmp	r4, r3
 80076b8:	dade      	bge.n	8007678 <convert_value_to_array2+0x40>
 80076ba:	e000      	b.n	80076be <convert_value_to_array2+0x86>
				break;
 80076bc:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	7979      	ldrb	r1, [r7, #5]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	440b      	add	r3, r1
 80076c8:	4619      	mov	r1, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	440b      	add	r3, r1
 80076ce:	3230      	adds	r2, #48	@ 0x30
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3301      	adds	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
		x = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	dad9      	bge.n	80076a0 <convert_value_to_array2+0x68>
	}
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd90      	pop	{r4, r7, pc}

080076f6 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80076f6:	b580      	push	{r7, lr}
 80076f8:	ed2d 8b02 	vpush	{d8}
 80076fc:	b08c      	sub	sp, #48	@ 0x30
 80076fe:	af00      	add	r7, sp, #0
 8007700:	ed87 0a03 	vstr	s0, [r7, #12]
 8007704:	60b8      	str	r0, [r7, #8]
 8007706:	460b      	mov	r3, r1
 8007708:	71fb      	strb	r3, [r7, #7]
 800770a:	4613      	mov	r3, r2
 800770c:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8007716:	79ba      	ldrb	r2, [r7, #6]
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8007722:	edd7 7a03 	vldr	s15, [r7, #12]
 8007726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772e:	d50a      	bpl.n	8007746 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	222d      	movs	r2, #45	@ 0x2d
 8007738:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 800773a:	edd7 7a03 	vldr	s15, [r7, #12]
 800773e:	eef1 7a67 	vneg.f32	s15, s15
 8007742:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007746:	2301      	movs	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e021      	b.n	8007790 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800775a:	eeb0 1b47 	vmov.f64	d1, d7
 800775e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007762:	f016 fe7d 	bl	801e460 <pow>
 8007766:	eeb0 7b40 	vmov.f64	d7, d0
 800776a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800776e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007772:	ed97 7a03 	vldr	s14, [r7, #12]
 8007776:	edd7 7a04 	vldr	s15, [r7, #16]
 800777a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	da0b      	bge.n	800779c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	3301      	adds	r3, #1
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	3301      	adds	r3, #1
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	429a      	cmp	r2, r3
 8007798:	dbd8      	blt.n	800774c <convert_value_to_array3+0x56>
 800779a:	e000      	b.n	800779e <convert_value_to_array3+0xa8>
			break;
 800779c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	dc07      	bgt.n	80077be <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	3301      	adds	r3, #1
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	222e      	movs	r2, #46	@ 0x2e
 80077b8:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 80077ba:	2301      	movs	r3, #1
 80077bc:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dd0a      	ble.n	80077da <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 80077c4:	79fa      	ldrb	r2, [r7, #7]
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	4413      	add	r3, r2
 80077ca:	3301      	adds	r3, #1
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	4413      	add	r3, r2
 80077d0:	222e      	movs	r2, #46	@ 0x2e
 80077d2:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	3301      	adds	r3, #1
 80077d8:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80077da:	edd7 7a03 	vldr	s15, [r7, #12]
 80077de:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077f2:	eeb0 1b47 	vmov.f64	d1, d7
 80077f6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077fa:	f016 fe31 	bl	801e460 <pow>
 80077fe:	eeb0 7b40 	vmov.f64	d7, d0
 8007802:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007806:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800780a:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e05f      	b.n	80078d4 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 8007814:	edd7 7a03 	vldr	s15, [r7, #12]
 8007818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	d93d      	bls.n	800789e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 8007822:	edd7 7a03 	vldr	s15, [r7, #12]
 8007826:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	1e5a      	subs	r2, r3, #1
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800783a:	eeb0 1b47 	vmov.f64	d1, d7
 800783e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007842:	f016 fe0d 	bl	801e460 <pow>
 8007846:	eeb0 7b40 	vmov.f64	d7, d0
 800784a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800784e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007852:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	3301      	adds	r3, #1
 800785a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800786c:	eeb0 1b47 	vmov.f64	d1, d7
 8007870:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007874:	f016 fdf4 	bl	801e460 <pow>
 8007878:	eeb0 7b40 	vmov.f64	d7, d0
 800787c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007880:	ee17 3a90 	vmov	r3, s15
 8007884:	b29b      	uxth	r3, r3
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800788e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789a:	dabb      	bge.n	8007814 <convert_value_to_array3+0x11e>
 800789c:	e000      	b.n	80078a0 <convert_value_to_array3+0x1aa>
				break;
 800789e:	bf00      	nop
		}

        if(loopnum == kropka){
 80078a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d102      	bne.n	80078ae <convert_value_to_array3+0x1b8>
            loopnum++;
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	3301      	adds	r3, #1
 80078ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	79f9      	ldrb	r1, [r7, #7]
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	440b      	add	r3, r1
 80078b8:	4619      	mov	r1, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	440b      	add	r3, r1
 80078be:	3230      	adds	r2, #48	@ 0x30
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80078c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c6:	3301      	adds	r3, #1
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	3301      	adds	r3, #1
 80078d2:	61bb      	str	r3, [r7, #24]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	3b02      	subs	r3, #2
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	429a      	cmp	r2, r3
 80078dc:	dbbe      	blt.n	800785c <convert_value_to_array3+0x166>
	}
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	3730      	adds	r7, #48	@ 0x30
 80078e4:	46bd      	mov	sp, r7
 80078e6:	ecbd 8b02 	vpop	{d8}
 80078ea:	bd80      	pop	{r7, pc}

080078ec <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80078f4:	4ba6      	ldr	r3, [pc, #664]	@ (8007b90 <uSD_Card_SendData_To_Buffer+0x2a4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	b218      	sxth	r0, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	01db      	lsls	r3, r3, #7
 8007900:	b2da      	uxtb	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	01db      	lsls	r3, r3, #7
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3308      	adds	r3, #8
 800790c:	b2db      	uxtb	r3, r3
 800790e:	49a1      	ldr	r1, [pc, #644]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007910:	f7ff fe92 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	3308      	adds	r3, #8
 800791a:	4a9e      	ldr	r2, [pc, #632]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800791c:	2120      	movs	r1, #32
 800791e:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007920:	4b9d      	ldr	r3, [pc, #628]	@ (8007b98 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b218      	sxth	r0, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	01db      	lsls	r3, r3, #7
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3309      	adds	r3, #9
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	01db      	lsls	r3, r3, #7
 8007938:	b2db      	uxtb	r3, r3
 800793a:	330f      	adds	r3, #15
 800793c:	b2db      	uxtb	r3, r3
 800793e:	4995      	ldr	r1, [pc, #596]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007940:	f7ff fe7a 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	01db      	lsls	r3, r3, #7
 8007948:	330f      	adds	r3, #15
 800794a:	4a92      	ldr	r2, [pc, #584]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800794c:	2120      	movs	r1, #32
 800794e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007950:	4b92      	ldr	r3, [pc, #584]	@ (8007b9c <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b218      	sxth	r0, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	01db      	lsls	r3, r3, #7
 800795c:	b2db      	uxtb	r3, r3
 800795e:	3310      	adds	r3, #16
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	01db      	lsls	r3, r3, #7
 8007968:	b2db      	uxtb	r3, r3
 800796a:	3316      	adds	r3, #22
 800796c:	b2db      	uxtb	r3, r3
 800796e:	4989      	ldr	r1, [pc, #548]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007970:	f7ff fe62 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	01db      	lsls	r3, r3, #7
 8007978:	3316      	adds	r3, #22
 800797a:	4a86      	ldr	r2, [pc, #536]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800797c:	2120      	movs	r1, #32
 800797e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007980:	4b87      	ldr	r3, [pc, #540]	@ (8007ba0 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b218      	sxth	r0, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	01db      	lsls	r3, r3, #7
 800798c:	b2db      	uxtb	r3, r3
 800798e:	3317      	adds	r3, #23
 8007990:	b2da      	uxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	01db      	lsls	r3, r3, #7
 8007998:	b2db      	uxtb	r3, r3
 800799a:	331d      	adds	r3, #29
 800799c:	b2db      	uxtb	r3, r3
 800799e:	497d      	ldr	r1, [pc, #500]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079a0:	f7ff fe4a 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	01db      	lsls	r3, r3, #7
 80079a8:	331d      	adds	r3, #29
 80079aa:	4a7a      	ldr	r2, [pc, #488]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079ac:	2120      	movs	r1, #32
 80079ae:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 80079b0:	4b7c      	ldr	r3, [pc, #496]	@ (8007ba4 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b218      	sxth	r0, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	01db      	lsls	r3, r3, #7
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	331e      	adds	r3, #30
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	01db      	lsls	r3, r3, #7
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	3324      	adds	r3, #36	@ 0x24
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	4971      	ldr	r1, [pc, #452]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079d0:	f7ff fe32 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	01db      	lsls	r3, r3, #7
 80079d8:	3324      	adds	r3, #36	@ 0x24
 80079da:	4a6e      	ldr	r2, [pc, #440]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079dc:	2120      	movs	r1, #32
 80079de:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80079e0:	4b71      	ldr	r3, [pc, #452]	@ (8007ba8 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80079e2:	edd3 7a00 	vldr	s15, [r3]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	01db      	lsls	r3, r3, #7
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	3325      	adds	r3, #37	@ 0x25
 80079f0:	b2d9      	uxtb	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	01db      	lsls	r3, r3, #7
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	332d      	adds	r3, #45	@ 0x2d
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	4864      	ldr	r0, [pc, #400]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a02:	eeb0 0a67 	vmov.f32	s0, s15
 8007a06:	f7ff fe76 	bl	80076f6 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	01db      	lsls	r3, r3, #7
 8007a0e:	332d      	adds	r3, #45	@ 0x2d
 8007a10:	4a60      	ldr	r2, [pc, #384]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a12:	2120      	movs	r1, #32
 8007a14:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007a16:	4b65      	ldr	r3, [pc, #404]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007a18:	edd3 7a00 	vldr	s15, [r3]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	01db      	lsls	r3, r3, #7
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	332e      	adds	r3, #46	@ 0x2e
 8007a26:	b2d9      	uxtb	r1, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	01db      	lsls	r3, r3, #7
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	3336      	adds	r3, #54	@ 0x36
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	4857      	ldr	r0, [pc, #348]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a38:	eeb0 0a67 	vmov.f32	s0, s15
 8007a3c:	f7ff fe5b 	bl	80076f6 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	01db      	lsls	r3, r3, #7
 8007a44:	3336      	adds	r3, #54	@ 0x36
 8007a46:	4a53      	ldr	r2, [pc, #332]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a48:	2120      	movs	r1, #32
 8007a4a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007a4c:	4b58      	ldr	r3, [pc, #352]	@ (8007bb0 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007a4e:	edd3 7a00 	vldr	s15, [r3]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	01db      	lsls	r3, r3, #7
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	3337      	adds	r3, #55	@ 0x37
 8007a5c:	b2d9      	uxtb	r1, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	01db      	lsls	r3, r3, #7
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	333f      	adds	r3, #63	@ 0x3f
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4849      	ldr	r0, [pc, #292]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a72:	f7ff fe40 	bl	80076f6 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	01db      	lsls	r3, r3, #7
 8007a7a:	333f      	adds	r3, #63	@ 0x3f
 8007a7c:	4a45      	ldr	r2, [pc, #276]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a7e:	2120      	movs	r1, #32
 8007a80:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007a82:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	b218      	sxth	r0, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	01db      	lsls	r3, r3, #7
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	3340      	adds	r3, #64	@ 0x40
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	01db      	lsls	r3, r3, #7
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	3348      	adds	r3, #72	@ 0x48
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	493c      	ldr	r1, [pc, #240]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aa2:	f7ff fdc9 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	01db      	lsls	r3, r3, #7
 8007aaa:	3348      	adds	r3, #72	@ 0x48
 8007aac:	4a39      	ldr	r2, [pc, #228]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aae:	2120      	movs	r1, #32
 8007ab0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007ab2:	4b41      	ldr	r3, [pc, #260]	@ (8007bb8 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	b218      	sxth	r0, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	01db      	lsls	r3, r3, #7
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	3349      	adds	r3, #73	@ 0x49
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	01db      	lsls	r3, r3, #7
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	3351      	adds	r3, #81	@ 0x51
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	4930      	ldr	r1, [pc, #192]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ad2:	f7ff fdb1 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	01db      	lsls	r3, r3, #7
 8007ada:	3351      	adds	r3, #81	@ 0x51
 8007adc:	4a2d      	ldr	r2, [pc, #180]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ade:	2120      	movs	r1, #32
 8007ae0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007ae2:	4b36      	ldr	r3, [pc, #216]	@ (8007bbc <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	b218      	sxth	r0, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	01db      	lsls	r3, r3, #7
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	3352      	adds	r3, #82	@ 0x52
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	01db      	lsls	r3, r3, #7
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	335a      	adds	r3, #90	@ 0x5a
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	4924      	ldr	r1, [pc, #144]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b02:	f7ff fd99 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	01db      	lsls	r3, r3, #7
 8007b0a:	335a      	adds	r3, #90	@ 0x5a
 8007b0c:	4a21      	ldr	r2, [pc, #132]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b0e:	2120      	movs	r1, #32
 8007b10:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007b12:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b14:	edd3 7a00 	vldr	s15, [r3]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	01db      	lsls	r3, r3, #7
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	335b      	adds	r3, #91	@ 0x5b
 8007b22:	b2d9      	uxtb	r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	01db      	lsls	r3, r3, #7
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	3362      	adds	r3, #98	@ 0x62
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	4818      	ldr	r0, [pc, #96]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b34:	eeb0 0a67 	vmov.f32	s0, s15
 8007b38:	f7ff fddd 	bl	80076f6 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	01db      	lsls	r3, r3, #7
 8007b40:	3362      	adds	r3, #98	@ 0x62
 8007b42:	4a14      	ldr	r2, [pc, #80]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b44:	2120      	movs	r1, #32
 8007b46:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007b48:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	01db      	lsls	r3, r3, #7
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	3363      	adds	r3, #99	@ 0x63
 8007b58:	b2d9      	uxtb	r1, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	01db      	lsls	r3, r3, #7
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	336a      	adds	r3, #106	@ 0x6a
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	480a      	ldr	r0, [pc, #40]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b6e:	f7ff fdc2 	bl	80076f6 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	01db      	lsls	r3, r3, #7
 8007b76:	336a      	adds	r3, #106	@ 0x6a
 8007b78:	4a06      	ldr	r2, [pc, #24]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b7a:	2120      	movs	r1, #32
 8007b7c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007b7e:	4b10      	ldr	r3, [pc, #64]	@ (8007bc0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	01db      	lsls	r3, r3, #7
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	336b      	adds	r3, #107	@ 0x6b
 8007b8e:	e019      	b.n	8007bc4 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007b90:	000041ec 	.word	0x000041ec
 8007b94:	24002f28 	.word	0x24002f28
 8007b98:	000041b4 	.word	0x000041b4
 8007b9c:	000041b6 	.word	0x000041b6
 8007ba0:	000041b8 	.word	0x000041b8
 8007ba4:	000041ba 	.word	0x000041ba
 8007ba8:	0000407c 	.word	0x0000407c
 8007bac:	00004078 	.word	0x00004078
 8007bb0:	00004080 	.word	0x00004080
 8007bb4:	000040c4 	.word	0x000040c4
 8007bb8:	000040c8 	.word	0x000040c8
 8007bbc:	000040cc 	.word	0x000040cc
 8007bc0:	00000088 	.word	0x00000088
 8007bc4:	b2d9      	uxtb	r1, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	01db      	lsls	r3, r3, #7
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	3372      	adds	r3, #114	@ 0x72
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	482d      	ldr	r0, [pc, #180]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8007bda:	f7ff fd8c 	bl	80076f6 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	01db      	lsls	r3, r3, #7
 8007be2:	3372      	adds	r3, #114	@ 0x72
 8007be4:	4a29      	ldr	r2, [pc, #164]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007be6:	2120      	movs	r1, #32
 8007be8:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007bea:	4b29      	ldr	r3, [pc, #164]	@ (8007c90 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b218      	sxth	r0, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	01db      	lsls	r3, r3, #7
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	3373      	adds	r3, #115	@ 0x73
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	01db      	lsls	r3, r3, #7
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	3377      	adds	r3, #119	@ 0x77
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	4920      	ldr	r1, [pc, #128]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c0a:	f7ff fd15 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	01db      	lsls	r3, r3, #7
 8007c12:	3377      	adds	r3, #119	@ 0x77
 8007c14:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c16:	2120      	movs	r1, #32
 8007c18:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007c90 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007c1c:	8a5b      	ldrh	r3, [r3, #18]
 8007c1e:	b218      	sxth	r0, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	01db      	lsls	r3, r3, #7
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	3378      	adds	r3, #120	@ 0x78
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	01db      	lsls	r3, r3, #7
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	337a      	adds	r3, #122	@ 0x7a
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	4914      	ldr	r1, [pc, #80]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c3a:	f7ff fcfd 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	01db      	lsls	r3, r3, #7
 8007c42:	337a      	adds	r3, #122	@ 0x7a
 8007c44:	4a11      	ldr	r2, [pc, #68]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c46:	2120      	movs	r1, #32
 8007c48:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007c4a:	4b12      	ldr	r3, [pc, #72]	@ (8007c94 <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007c4c:	edd3 7a00 	vldr	s15, [r3]
 8007c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c54:	ee17 3a90 	vmov	r3, s15
 8007c58:	b218      	sxth	r0, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	01db      	lsls	r3, r3, #7
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	337b      	adds	r3, #123	@ 0x7b
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	01db      	lsls	r3, r3, #7
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	337f      	adds	r3, #127	@ 0x7f
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4906      	ldr	r1, [pc, #24]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c74:	f7ff fce0 	bl	8007638 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	01db      	lsls	r3, r3, #7
 8007c7e:	4a03      	ldr	r2, [pc, #12]	@ (8007c8c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c80:	210a      	movs	r1, #10
 8007c82:	54d1      	strb	r1, [r2, r3]
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	24002f28 	.word	0x24002f28
 8007c90:	00000184 	.word	0x00000184
 8007c94:	00000058 	.word	0x00000058

08007c98 <Stack_Push>:

void Stack_Push(float data){
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007ca2:	4b22      	ldr	r3, [pc, #136]	@ (8007d2c <Stack_Push+0x94>)
 8007ca4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ca8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cac:	3301      	adds	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d2c <Stack_Push+0x94>)
 8007cb2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cb6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007cba:	4b1c      	ldr	r3, [pc, #112]	@ (8007d2c <Stack_Push+0x94>)
 8007cbc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cc0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cc4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007cc8:	d105      	bne.n	8007cd6 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007cca:	4b18      	ldr	r3, [pc, #96]	@ (8007d2c <Stack_Push+0x94>)
 8007ccc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007cd6:	4b15      	ldr	r3, [pc, #84]	@ (8007d2c <Stack_Push+0x94>)
 8007cd8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cdc:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007ce0:	4a12      	ldr	r2, [pc, #72]	@ (8007d2c <Stack_Push+0x94>)
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007cea:	4b10      	ldr	r3, [pc, #64]	@ (8007d2c <Stack_Push+0x94>)
 8007cec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cf0:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d2c <Stack_Push+0x94>)
 8007cfa:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cfe:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007d02:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <Stack_Push+0x94>)
 8007d04:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007d08:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007d0c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007d10:	d105      	bne.n	8007d1e <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007d12:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <Stack_Push+0x94>)
 8007d14:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	000001a8 	.word	0x000001a8

08007d30 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007d34:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <ROOL_MAX_VAL+0x1c>)
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007d3c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	00000184 	.word	0x00000184

08007d50 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007d54:	4b04      	ldr	r3, [pc, #16]	@ (8007d68 <ROOL_MIN_VAL+0x18>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007d5c:	4b03      	ldr	r3, [pc, #12]	@ (8007d6c <ROOL_MIN_VAL+0x1c>)
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	00000184 	.word	0x00000184
 8007d6c:	ffffec78 	.word	0xffffec78

08007d70 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <PITCH_MAX_VAL+0x1c>)
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007d7c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	00000184 	.word	0x00000184

08007d90 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007d94:	4b04      	ldr	r3, [pc, #16]	@ (8007da8 <PITCH_MIN_VAL+0x18>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <PITCH_MIN_VAL+0x1c>)
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	00000184 	.word	0x00000184
 8007dac:	ffffec78 	.word	0xffffec78

08007db0 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007db4:	4b05      	ldr	r3, [pc, #20]	@ (8007dcc <YAW_MAX_VAL+0x1c>)
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007dbc:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	00000184 	.word	0x00000184

08007dd0 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007dd4:	4b04      	ldr	r3, [pc, #16]	@ (8007de8 <YAW_MIN_VAL+0x18>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007ddc:	4b03      	ldr	r3, [pc, #12]	@ (8007dec <YAW_MIN_VAL+0x1c>)
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	00000184 	.word	0x00000184
 8007dec:	ffffec78 	.word	0xffffec78

08007df0 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007df4:	4b08      	ldr	r3, [pc, #32]	@ (8007e18 <ROOL_GOOD_VAL+0x28>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <ROOL_GOOD_VAL+0x2c>)
 8007dfe:	edd3 7a00 	vldr	s15, [r3]
 8007e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e06:	ee17 3a90 	vmov	r3, s15
 8007e0a:	b21b      	sxth	r3, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	00000184 	.word	0x00000184
 8007e1c:	000040f0 	.word	0x000040f0

08007e20 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007e24:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <PITCH_GOOD_VAL+0x28>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <PITCH_GOOD_VAL+0x2c>)
 8007e2e:	edd3 7a00 	vldr	s15, [r3]
 8007e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e36:	ee17 3a90 	vmov	r3, s15
 8007e3a:	b21b      	sxth	r3, r3
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	00000184 	.word	0x00000184
 8007e4c:	000040e8 	.word	0x000040e8

08007e50 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007e54:	4b08      	ldr	r3, [pc, #32]	@ (8007e78 <YAW_GOOD_VAL+0x28>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007e5c:	4b07      	ldr	r3, [pc, #28]	@ (8007e7c <YAW_GOOD_VAL+0x2c>)
 8007e5e:	edd3 7a00 	vldr	s15, [r3]
 8007e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e66:	ee17 3a90 	vmov	r3, s15
 8007e6a:	b21b      	sxth	r3, r3
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	00000184 	.word	0x00000184
 8007e7c:	000040ec 	.word	0x000040ec

08007e80 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e86:	463b      	mov	r3, r7
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	609a      	str	r2, [r3, #8]
 8007e90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007e92:	f003 fc3d 	bl	800b710 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007ea2:	231f      	movs	r3, #31
 8007ea4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007ea6:	2387      	movs	r3, #135	@ 0x87
 8007ea8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f003 fc5b 	bl	800b780 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007eca:	2004      	movs	r0, #4
 8007ecc:	f003 fc38 	bl	800b740 <HAL_MPU_Enable>

}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007edc:	b672      	cpsid	i
}
 8007ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <Error_Handler+0x8>

08007ee4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007ee8:	4b27      	ldr	r3, [pc, #156]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007eea:	4a28      	ldr	r2, [pc, #160]	@ (8007f8c <MX_SPI2_Init+0xa8>)
 8007eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007eee:	4b26      	ldr	r3, [pc, #152]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007ef0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007ef6:	4b24      	ldr	r3, [pc, #144]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007efc:	4b22      	ldr	r3, [pc, #136]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007efe:	2207      	movs	r2, #7
 8007f00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f02:	4b21      	ldr	r3, [pc, #132]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f08:	4b1f      	ldr	r3, [pc, #124]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007f14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f16:	4b1c      	ldr	r3, [pc, #112]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f22:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f28:	4b17      	ldr	r3, [pc, #92]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007f2e:	4b16      	ldr	r3, [pc, #88]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f34:	4b14      	ldr	r3, [pc, #80]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f3c:	4b12      	ldr	r3, [pc, #72]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f42:	4b11      	ldr	r3, [pc, #68]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f48:	4b0f      	ldr	r3, [pc, #60]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f60:	4b09      	ldr	r3, [pc, #36]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f66:	4b08      	ldr	r3, [pc, #32]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007f72:	4805      	ldr	r0, [pc, #20]	@ (8007f88 <MX_SPI2_Init+0xa4>)
 8007f74:	f00c fc8e 	bl	8014894 <HAL_SPI_Init>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007f7e:	f7ff ffab 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	240001ec 	.word	0x240001ec
 8007f8c:	40003800 	.word	0x40003800

08007f90 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007f94:	4b27      	ldr	r3, [pc, #156]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007f96:	4a28      	ldr	r2, [pc, #160]	@ (8008038 <MX_SPI6_Init+0xa8>)
 8007f98:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007f9a:	4b26      	ldr	r3, [pc, #152]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007f9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007fa0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007fa2:	4b24      	ldr	r3, [pc, #144]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007fa8:	4b22      	ldr	r3, [pc, #136]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007faa:	2207      	movs	r2, #7
 8007fac:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fae:	4b21      	ldr	r3, [pc, #132]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007fba:	4b1e      	ldr	r3, [pc, #120]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007fc0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fce:	4b19      	ldr	r3, [pc, #100]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fd4:	4b17      	ldr	r3, [pc, #92]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007fda:	4b16      	ldr	r3, [pc, #88]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fe0:	4b14      	ldr	r3, [pc, #80]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007fe6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007fe8:	4b12      	ldr	r3, [pc, #72]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007fee:	4b11      	ldr	r3, [pc, #68]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008000:	4b0c      	ldr	r3, [pc, #48]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8008002:	2200      	movs	r2, #0
 8008004:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008006:	4b0b      	ldr	r3, [pc, #44]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8008008:	2200      	movs	r2, #0
 800800a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800800c:	4b09      	ldr	r3, [pc, #36]	@ (8008034 <MX_SPI6_Init+0xa4>)
 800800e:	2200      	movs	r2, #0
 8008010:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8008012:	4b08      	ldr	r3, [pc, #32]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8008014:	2200      	movs	r2, #0
 8008016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008018:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <MX_SPI6_Init+0xa4>)
 800801a:	2200      	movs	r2, #0
 800801c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800801e:	4805      	ldr	r0, [pc, #20]	@ (8008034 <MX_SPI6_Init+0xa4>)
 8008020:	f00c fc38 	bl	8014894 <HAL_SPI_Init>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 800802a:	f7ff ff55 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800802e:	bf00      	nop
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	24000274 	.word	0x24000274
 8008038:	58001400 	.word	0x58001400

0800803c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b0ba      	sub	sp, #232	@ 0xe8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008044:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	605a      	str	r2, [r3, #4]
 800804e:	609a      	str	r2, [r3, #8]
 8008050:	60da      	str	r2, [r3, #12]
 8008052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008054:	f107 0318 	add.w	r3, r7, #24
 8008058:	22b8      	movs	r2, #184	@ 0xb8
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f016 f871 	bl	801e144 <memset>
  if(spiHandle->Instance==SPI2)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a77      	ldr	r2, [pc, #476]	@ (8008244 <HAL_SPI_MspInit+0x208>)
 8008068:	4293      	cmp	r3, r2
 800806a:	f040 8089 	bne.w	8008180 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800806e:	4b76      	ldr	r3, [pc, #472]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 8008070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008074:	4a74      	ldr	r2, [pc, #464]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 8008076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800807a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800807e:	4b72      	ldr	r3, [pc, #456]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 8008080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800808c:	4b6e      	ldr	r3, [pc, #440]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 800808e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008092:	4a6d      	ldr	r2, [pc, #436]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 8008094:	f043 0302 	orr.w	r3, r3, #2
 8008098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800809c:	4b6a      	ldr	r3, [pc, #424]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 800809e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80080aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80080ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b2:	2302      	movs	r3, #2
 80080b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80080be:	2301      	movs	r3, #1
 80080c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080c4:	2305      	movs	r3, #5
 80080c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080ce:	4619      	mov	r1, r3
 80080d0:	485e      	ldr	r0, [pc, #376]	@ (800824c <HAL_SPI_MspInit+0x210>)
 80080d2:	f006 f9e7 	bl	800e4a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80080d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80080da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080de:	2302      	movs	r3, #2
 80080e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80080ea:	2301      	movs	r3, #1
 80080ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080f0:	2305      	movs	r3, #5
 80080f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4853      	ldr	r0, [pc, #332]	@ (800824c <HAL_SPI_MspInit+0x210>)
 80080fe:	f006 f9d1 	bl	800e4a4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8008102:	4b53      	ldr	r3, [pc, #332]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008104:	4a53      	ldr	r2, [pc, #332]	@ (8008254 <HAL_SPI_MspInit+0x218>)
 8008106:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8008108:	4b51      	ldr	r3, [pc, #324]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 800810a:	2228      	movs	r2, #40	@ 0x28
 800810c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800810e:	4b50      	ldr	r3, [pc, #320]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008110:	2240      	movs	r2, #64	@ 0x40
 8008112:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008114:	4b4e      	ldr	r3, [pc, #312]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008116:	2200      	movs	r2, #0
 8008118:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800811a:	4b4d      	ldr	r3, [pc, #308]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 800811c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008120:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008122:	4b4b      	ldr	r3, [pc, #300]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008124:	2200      	movs	r2, #0
 8008126:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008128:	4b49      	ldr	r3, [pc, #292]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 800812a:	2200      	movs	r2, #0
 800812c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800812e:	4b48      	ldr	r3, [pc, #288]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008130:	2200      	movs	r2, #0
 8008132:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008134:	4b46      	ldr	r3, [pc, #280]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008136:	2200      	movs	r2, #0
 8008138:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800813a:	4b45      	ldr	r3, [pc, #276]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 800813c:	2204      	movs	r2, #4
 800813e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008140:	4b43      	ldr	r3, [pc, #268]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008142:	2203      	movs	r2, #3
 8008144:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008146:	4b42      	ldr	r3, [pc, #264]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008148:	2200      	movs	r2, #0
 800814a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800814c:	4b40      	ldr	r3, [pc, #256]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008152:	483f      	ldr	r0, [pc, #252]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008154:	f003 fb54 	bl	800b800 <HAL_DMA_Init>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800815e:	f7ff febb 	bl	8007ed8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a3a      	ldr	r2, [pc, #232]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 8008166:	679a      	str	r2, [r3, #120]	@ 0x78
 8008168:	4a39      	ldr	r2, [pc, #228]	@ (8008250 <HAL_SPI_MspInit+0x214>)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800816e:	2200      	movs	r2, #0
 8008170:	2100      	movs	r1, #0
 8008172:	2024      	movs	r0, #36	@ 0x24
 8008174:	f003 fa97 	bl	800b6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008178:	2024      	movs	r0, #36	@ 0x24
 800817a:	f003 faae 	bl	800b6da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800817e:	e05c      	b.n	800823a <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a34      	ldr	r2, [pc, #208]	@ (8008258 <HAL_SPI_MspInit+0x21c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d157      	bne.n	800823a <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800818a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8008196:	2318      	movs	r3, #24
 8008198:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 800819a:	23c8      	movs	r3, #200	@ 0xc8
 800819c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 800819e:	2301      	movs	r3, #1
 80081a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80081a2:	230a      	movs	r3, #10
 80081a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80081a6:	2302      	movs	r3, #2
 80081a8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80081ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 80081b8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80081bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081c0:	f107 0318 	add.w	r3, r7, #24
 80081c4:	4618      	mov	r0, r3
 80081c6:	f009 ff7f 	bl	80120c8 <HAL_RCCEx_PeriphCLKConfig>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 80081d0:	f7ff fe82 	bl	8007ed8 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80081d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 80081d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081da:	4a1b      	ldr	r2, [pc, #108]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 80081dc:	f043 0320 	orr.w	r3, r3, #32
 80081e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80081e4:	4b18      	ldr	r3, [pc, #96]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 80081e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081f2:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 80081f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081f8:	4a13      	ldr	r2, [pc, #76]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 80081fa:	f043 0302 	orr.w	r3, r3, #2
 80081fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008202:	4b11      	ldr	r3, [pc, #68]	@ (8008248 <HAL_SPI_MspInit+0x20c>)
 8008204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008210:	2338      	movs	r3, #56	@ 0x38
 8008212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008216:	2302      	movs	r3, #2
 8008218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821c:	2300      	movs	r3, #0
 800821e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008222:	2300      	movs	r3, #0
 8008224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008228:	2308      	movs	r3, #8
 800822a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800822e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008232:	4619      	mov	r1, r3
 8008234:	4805      	ldr	r0, [pc, #20]	@ (800824c <HAL_SPI_MspInit+0x210>)
 8008236:	f006 f935 	bl	800e4a4 <HAL_GPIO_Init>
}
 800823a:	bf00      	nop
 800823c:	37e8      	adds	r7, #232	@ 0xe8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40003800 	.word	0x40003800
 8008248:	58024400 	.word	0x58024400
 800824c:	58020400 	.word	0x58020400
 8008250:	240002fc 	.word	0x240002fc
 8008254:	40020010 	.word	0x40020010
 8008258:	58001400 	.word	0x58001400

0800825c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008262:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <HAL_MspInit+0x30>)
 8008264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008268:	4a08      	ldr	r2, [pc, #32]	@ (800828c <HAL_MspInit+0x30>)
 800826a:	f043 0302 	orr.w	r3, r3, #2
 800826e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008272:	4b06      	ldr	r3, [pc, #24]	@ (800828c <HAL_MspInit+0x30>)
 8008274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	58024400 	.word	0x58024400

08008290 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8008294:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <SDTimer_Handler+0x34>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d004      	beq.n	80082a6 <SDTimer_Handler+0x16>
    Timer1--;
 800829c:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <SDTimer_Handler+0x34>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	4a08      	ldr	r2, [pc, #32]	@ (80082c4 <SDTimer_Handler+0x34>)
 80082a4:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 80082a6:	4b08      	ldr	r3, [pc, #32]	@ (80082c8 <SDTimer_Handler+0x38>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <SDTimer_Handler+0x28>
    Timer2--;
 80082ae:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <SDTimer_Handler+0x38>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	4a04      	ldr	r2, [pc, #16]	@ (80082c8 <SDTimer_Handler+0x38>)
 80082b6:	6013      	str	r3, [r2, #0]
}
 80082b8:	bf00      	nop
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	24000378 	.word	0x24000378
 80082c8:	2400037c 	.word	0x2400037c
 80082cc:	00000000 	.word	0x00000000

080082d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80082d6:	2200      	movs	r2, #0
 80082d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082dc:	48bc      	ldr	r0, [pc, #752]	@ (80085d0 <NMI_Handler+0x300>)
 80082de:	f006 faa1 	bl	800e824 <HAL_GPIO_WritePin>
	LED_Y_0;
 80082e2:	2200      	movs	r2, #0
 80082e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082e8:	48ba      	ldr	r0, [pc, #744]	@ (80085d4 <NMI_Handler+0x304>)
 80082ea:	f006 fa9b 	bl	800e824 <HAL_GPIO_WritePin>
	LED_R_1;
 80082ee:	2201      	movs	r2, #1
 80082f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082f4:	48b7      	ldr	r0, [pc, #732]	@ (80085d4 <NMI_Handler+0x304>)
 80082f6:	f006 fa95 	bl	800e824 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 80082fa:	48b7      	ldr	r0, [pc, #732]	@ (80085d8 <NMI_Handler+0x308>)
 80082fc:	f015 fd2a 	bl	801dd54 <f_close>

	wanted_rool = 0;
 8008300:	4bb6      	ldr	r3, [pc, #728]	@ (80085dc <NMI_Handler+0x30c>)
 8008302:	f04f 0200 	mov.w	r2, #0
 8008306:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008308:	4bb5      	ldr	r3, [pc, #724]	@ (80085e0 <NMI_Handler+0x310>)
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008310:	4bb4      	ldr	r3, [pc, #720]	@ (80085e4 <NMI_Handler+0x314>)
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008318:	4bb3      	ldr	r3, [pc, #716]	@ (80085e8 <NMI_Handler+0x318>)
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	b21a      	sxth	r2, r3
 800831e:	4bb3      	ldr	r3, [pc, #716]	@ (80085ec <NMI_Handler+0x31c>)
 8008320:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8008322:	2001      	movs	r0, #1
 8008324:	f001 f942 	bl	80095ac <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008328:	4bb1      	ldr	r3, [pc, #708]	@ (80085f0 <NMI_Handler+0x320>)
 800832a:	edd3 7a00 	vldr	s15, [r3]
 800832e:	4bb1      	ldr	r3, [pc, #708]	@ (80085f4 <NMI_Handler+0x324>)
 8008330:	ed93 7a00 	vldr	s14, [r3]
 8008334:	4bb0      	ldr	r3, [pc, #704]	@ (80085f8 <NMI_Handler+0x328>)
 8008336:	edd3 6a00 	vldr	s13, [r3]
 800833a:	4bb0      	ldr	r3, [pc, #704]	@ (80085fc <NMI_Handler+0x32c>)
 800833c:	ed93 6a00 	vldr	s12, [r3]
 8008340:	4baf      	ldr	r3, [pc, #700]	@ (8008600 <NMI_Handler+0x330>)
 8008342:	edd3 5a00 	vldr	s11, [r3]
 8008346:	4baf      	ldr	r3, [pc, #700]	@ (8008604 <NMI_Handler+0x334>)
 8008348:	ed93 5a00 	vldr	s10, [r3]
 800834c:	4bae      	ldr	r3, [pc, #696]	@ (8008608 <NMI_Handler+0x338>)
 800834e:	edd3 4a00 	vldr	s9, [r3]
 8008352:	4bae      	ldr	r3, [pc, #696]	@ (800860c <NMI_Handler+0x33c>)
 8008354:	ed93 4a00 	vldr	s8, [r3]
 8008358:	4bad      	ldr	r3, [pc, #692]	@ (8008610 <NMI_Handler+0x340>)
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	4bad      	ldr	r3, [pc, #692]	@ (8008614 <NMI_Handler+0x344>)
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	eef0 3a44 	vmov.f32	s7, s8
 8008364:	eeb0 3a64 	vmov.f32	s6, s9
 8008368:	eef0 2a45 	vmov.f32	s5, s10
 800836c:	eeb0 2a65 	vmov.f32	s4, s11
 8008370:	eef0 1a46 	vmov.f32	s3, s12
 8008374:	eeb0 1a66 	vmov.f32	s2, s13
 8008378:	eef0 0a47 	vmov.f32	s1, s14
 800837c:	eeb0 0a67 	vmov.f32	s0, s15
 8008380:	4ba5      	ldr	r3, [pc, #660]	@ (8008618 <NMI_Handler+0x348>)
 8008382:	4aa6      	ldr	r2, [pc, #664]	@ (800861c <NMI_Handler+0x34c>)
 8008384:	49a6      	ldr	r1, [pc, #664]	@ (8008620 <NMI_Handler+0x350>)
 8008386:	48a7      	ldr	r0, [pc, #668]	@ (8008624 <NMI_Handler+0x354>)
 8008388:	f7f9 f994 	bl	80016b4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800838c:	4ba5      	ldr	r3, [pc, #660]	@ (8008624 <NMI_Handler+0x354>)
 800838e:	edd3 7a00 	vldr	s15, [r3]
 8008392:	4ba3      	ldr	r3, [pc, #652]	@ (8008620 <NMI_Handler+0x350>)
 8008394:	ed93 7a00 	vldr	s14, [r3]
 8008398:	4ba0      	ldr	r3, [pc, #640]	@ (800861c <NMI_Handler+0x34c>)
 800839a:	edd3 6a00 	vldr	s13, [r3]
 800839e:	49a2      	ldr	r1, [pc, #648]	@ (8008628 <NMI_Handler+0x358>)
 80083a0:	48a2      	ldr	r0, [pc, #648]	@ (800862c <NMI_Handler+0x35c>)
 80083a2:	eeb0 1a66 	vmov.f32	s2, s13
 80083a6:	eef0 0a47 	vmov.f32	s1, s14
 80083aa:	eeb0 0a67 	vmov.f32	s0, s15
 80083ae:	f7f9 f8f7 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 80083b2:	4b9e      	ldr	r3, [pc, #632]	@ (800862c <NMI_Handler+0x35c>)
 80083b4:	edd3 7a00 	vldr	s15, [r3]
 80083b8:	4b9b      	ldr	r3, [pc, #620]	@ (8008628 <NMI_Handler+0x358>)
 80083ba:	ed93 7a00 	vldr	s14, [r3]
 80083be:	4b9c      	ldr	r3, [pc, #624]	@ (8008630 <NMI_Handler+0x360>)
 80083c0:	edd3 6a00 	vldr	s13, [r3]
 80083c4:	4b94      	ldr	r3, [pc, #592]	@ (8008618 <NMI_Handler+0x348>)
 80083c6:	ed93 6a00 	vldr	s12, [r3]
 80083ca:	4b92      	ldr	r3, [pc, #584]	@ (8008614 <NMI_Handler+0x344>)
 80083cc:	edd3 5a00 	vldr	s11, [r3]
 80083d0:	4b8f      	ldr	r3, [pc, #572]	@ (8008610 <NMI_Handler+0x340>)
 80083d2:	ed93 5a00 	vldr	s10, [r3]
 80083d6:	eef0 2a45 	vmov.f32	s5, s10
 80083da:	eeb0 2a65 	vmov.f32	s4, s11
 80083de:	eef0 1a46 	vmov.f32	s3, s12
 80083e2:	eeb0 1a66 	vmov.f32	s2, s13
 80083e6:	eef0 0a47 	vmov.f32	s1, s14
 80083ea:	eeb0 0a67 	vmov.f32	s0, s15
 80083ee:	4891      	ldr	r0, [pc, #580]	@ (8008634 <NMI_Handler+0x364>)
 80083f0:	f7f9 fada 	bl	80019a8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 80083f4:	4b8f      	ldr	r3, [pc, #572]	@ (8008634 <NMI_Handler+0x364>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a8f      	ldr	r2, [pc, #572]	@ (8008638 <NMI_Handler+0x368>)
 80083fa:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 80083fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008634 <NMI_Handler+0x364>)
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4a8e      	ldr	r2, [pc, #568]	@ (800863c <NMI_Handler+0x36c>)
 8008402:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8008404:	4b8b      	ldr	r3, [pc, #556]	@ (8008634 <NMI_Handler+0x364>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	4a8d      	ldr	r2, [pc, #564]	@ (8008640 <NMI_Handler+0x370>)
 800840a:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 800840c:	4b73      	ldr	r3, [pc, #460]	@ (80085dc <NMI_Handler+0x30c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a8c      	ldr	r2, [pc, #560]	@ (8008644 <NMI_Handler+0x374>)
 8008412:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8008414:	4b72      	ldr	r3, [pc, #456]	@ (80085e0 <NMI_Handler+0x310>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a8b      	ldr	r2, [pc, #556]	@ (8008648 <NMI_Handler+0x378>)
 800841a:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 800841c:	4b71      	ldr	r3, [pc, #452]	@ (80085e4 <NMI_Handler+0x314>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a8a      	ldr	r2, [pc, #552]	@ (800864c <NMI_Handler+0x37c>)
 8008422:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8008424:	4b8a      	ldr	r3, [pc, #552]	@ (8008650 <NMI_Handler+0x380>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	ee07 3a90 	vmov	s15, r3
 800842c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008430:	4b6b      	ldr	r3, [pc, #428]	@ (80085e0 <NMI_Handler+0x310>)
 8008432:	edd3 6a00 	vldr	s13, [r3]
 8008436:	4b80      	ldr	r3, [pc, #512]	@ (8008638 <NMI_Handler+0x368>)
 8008438:	edd3 7a00 	vldr	s15, [r3]
 800843c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008448:	ee17 2a90 	vmov	r2, s15
 800844c:	4b80      	ldr	r3, [pc, #512]	@ (8008650 <NMI_Handler+0x380>)
 800844e:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008450:	4b80      	ldr	r3, [pc, #512]	@ (8008654 <NMI_Handler+0x384>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800845c:	4b5f      	ldr	r3, [pc, #380]	@ (80085dc <NMI_Handler+0x30c>)
 800845e:	edd3 6a00 	vldr	s13, [r3]
 8008462:	4b76      	ldr	r3, [pc, #472]	@ (800863c <NMI_Handler+0x36c>)
 8008464:	edd3 7a00 	vldr	s15, [r3]
 8008468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800846c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	4b76      	ldr	r3, [pc, #472]	@ (8008654 <NMI_Handler+0x384>)
 800847a:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 800847c:	4b76      	ldr	r3, [pc, #472]	@ (8008658 <NMI_Handler+0x388>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008488:	4b56      	ldr	r3, [pc, #344]	@ (80085e4 <NMI_Handler+0x314>)
 800848a:	edd3 6a00 	vldr	s13, [r3]
 800848e:	4b6c      	ldr	r3, [pc, #432]	@ (8008640 <NMI_Handler+0x370>)
 8008490:	edd3 7a00 	vldr	s15, [r3]
 8008494:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800849c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084a0:	ee17 2a90 	vmov	r2, s15
 80084a4:	4b6c      	ldr	r3, [pc, #432]	@ (8008658 <NMI_Handler+0x388>)
 80084a6:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 80084a8:	4b6c      	ldr	r3, [pc, #432]	@ (800865c <NMI_Handler+0x38c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	ee07 3a90 	vmov	s15, r3
 80084b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084b4:	4b6a      	ldr	r3, [pc, #424]	@ (8008660 <NMI_Handler+0x390>)
 80084b6:	edd3 6a00 	vldr	s13, [r3]
 80084ba:	4b57      	ldr	r3, [pc, #348]	@ (8008618 <NMI_Handler+0x348>)
 80084bc:	edd3 7a00 	vldr	s15, [r3]
 80084c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084cc:	ee17 2a90 	vmov	r2, s15
 80084d0:	4b62      	ldr	r3, [pc, #392]	@ (800865c <NMI_Handler+0x38c>)
 80084d2:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80084d4:	4b63      	ldr	r3, [pc, #396]	@ (8008664 <NMI_Handler+0x394>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084e0:	4b61      	ldr	r3, [pc, #388]	@ (8008668 <NMI_Handler+0x398>)
 80084e2:	edd3 6a00 	vldr	s13, [r3]
 80084e6:	4b4b      	ldr	r3, [pc, #300]	@ (8008614 <NMI_Handler+0x344>)
 80084e8:	edd3 7a00 	vldr	s15, [r3]
 80084ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084f8:	ee17 2a90 	vmov	r2, s15
 80084fc:	4b59      	ldr	r3, [pc, #356]	@ (8008664 <NMI_Handler+0x394>)
 80084fe:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8008500:	4b5a      	ldr	r3, [pc, #360]	@ (800866c <NMI_Handler+0x39c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800850c:	4b58      	ldr	r3, [pc, #352]	@ (8008670 <NMI_Handler+0x3a0>)
 800850e:	edd3 6a00 	vldr	s13, [r3]
 8008512:	4b3f      	ldr	r3, [pc, #252]	@ (8008610 <NMI_Handler+0x340>)
 8008514:	edd3 7a00 	vldr	s15, [r3]
 8008518:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800851c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008524:	ee17 2a90 	vmov	r2, s15
 8008528:	4b50      	ldr	r3, [pc, #320]	@ (800866c <NMI_Handler+0x39c>)
 800852a:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 800852c:	2201      	movs	r2, #1
 800852e:	4951      	ldr	r1, [pc, #324]	@ (8008674 <NMI_Handler+0x3a4>)
 8008530:	484b      	ldr	r0, [pc, #300]	@ (8008660 <NMI_Handler+0x390>)
 8008532:	f7fb faa7 	bl	8003a84 <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8008536:	2202      	movs	r2, #2
 8008538:	494f      	ldr	r1, [pc, #316]	@ (8008678 <NMI_Handler+0x3a8>)
 800853a:	484b      	ldr	r0, [pc, #300]	@ (8008668 <NMI_Handler+0x398>)
 800853c:	f7fb faa2 	bl	8003a84 <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008540:	2204      	movs	r2, #4
 8008542:	494e      	ldr	r1, [pc, #312]	@ (800867c <NMI_Handler+0x3ac>)
 8008544:	484e      	ldr	r0, [pc, #312]	@ (8008680 <NMI_Handler+0x3b0>)
 8008546:	f7fb fa9d 	bl	8003a84 <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 800854a:	2205      	movs	r2, #5
 800854c:	494d      	ldr	r1, [pc, #308]	@ (8008684 <NMI_Handler+0x3b4>)
 800854e:	484e      	ldr	r0, [pc, #312]	@ (8008688 <NMI_Handler+0x3b8>)
 8008550:	f7fb fa98 	bl	8003a84 <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8008554:	2206      	movs	r2, #6
 8008556:	494d      	ldr	r1, [pc, #308]	@ (800868c <NMI_Handler+0x3bc>)
 8008558:	484d      	ldr	r0, [pc, #308]	@ (8008690 <NMI_Handler+0x3c0>)
 800855a:	f7fb fa93 	bl	8003a84 <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 800855e:	4b20      	ldr	r3, [pc, #128]	@ (80085e0 <NMI_Handler+0x310>)
 8008560:	ed93 7a00 	vldr	s14, [r3]
 8008564:	4b34      	ldr	r3, [pc, #208]	@ (8008638 <NMI_Handler+0x368>)
 8008566:	edd3 7a00 	vldr	s15, [r3]
 800856a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800856e:	4b49      	ldr	r3, [pc, #292]	@ (8008694 <NMI_Handler+0x3c4>)
 8008570:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8008574:	4b19      	ldr	r3, [pc, #100]	@ (80085dc <NMI_Handler+0x30c>)
 8008576:	ed93 7a00 	vldr	s14, [r3]
 800857a:	4b30      	ldr	r3, [pc, #192]	@ (800863c <NMI_Handler+0x36c>)
 800857c:	edd3 7a00 	vldr	s15, [r3]
 8008580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008584:	4b44      	ldr	r3, [pc, #272]	@ (8008698 <NMI_Handler+0x3c8>)
 8008586:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 800858a:	4b35      	ldr	r3, [pc, #212]	@ (8008660 <NMI_Handler+0x390>)
 800858c:	ed93 7a00 	vldr	s14, [r3]
 8008590:	4b21      	ldr	r3, [pc, #132]	@ (8008618 <NMI_Handler+0x348>)
 8008592:	edd3 7a00 	vldr	s15, [r3]
 8008596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800859a:	4b40      	ldr	r3, [pc, #256]	@ (800869c <NMI_Handler+0x3cc>)
 800859c:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 80085a0:	4b31      	ldr	r3, [pc, #196]	@ (8008668 <NMI_Handler+0x398>)
 80085a2:	ed93 7a00 	vldr	s14, [r3]
 80085a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008614 <NMI_Handler+0x344>)
 80085a8:	edd3 7a00 	vldr	s15, [r3]
 80085ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b0:	4b3b      	ldr	r3, [pc, #236]	@ (80086a0 <NMI_Handler+0x3d0>)
 80085b2:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 80085b6:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <NMI_Handler+0x314>)
 80085b8:	ed93 7a00 	vldr	s14, [r3]
 80085bc:	4b14      	ldr	r3, [pc, #80]	@ (8008610 <NMI_Handler+0x340>)
 80085be:	edd3 7a00 	vldr	s15, [r3]
 80085c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085c6:	4b37      	ldr	r3, [pc, #220]	@ (80086a4 <NMI_Handler+0x3d4>)
 80085c8:	edc3 7a00 	vstr	s15, [r3]
 80085cc:	e06c      	b.n	80086a8 <NMI_Handler+0x3d8>
 80085ce:	bf00      	nop
 80085d0:	58021000 	.word	0x58021000
 80085d4:	58020400 	.word	0x58020400
 80085d8:	24001ef0 	.word	0x24001ef0
 80085dc:	0000407c 	.word	0x0000407c
 80085e0:	00004078 	.word	0x00004078
 80085e4:	00004080 	.word	0x00004080
 80085e8:	0801ec08 	.word	0x0801ec08
 80085ec:	00004068 	.word	0x00004068
 80085f0:	00000030 	.word	0x00000030
 80085f4:	00000034 	.word	0x00000034
 80085f8:	00000038 	.word	0x00000038
 80085fc:	0000003c 	.word	0x0000003c
 8008600:	00000040 	.word	0x00000040
 8008604:	00000044 	.word	0x00000044
 8008608:	0801ebfc 	.word	0x0801ebfc
 800860c:	0801ec00 	.word	0x0801ec00
 8008610:	00000014 	.word	0x00000014
 8008614:	00000010 	.word	0x00000010
 8008618:	0000000c 	.word	0x0000000c
 800861c:	00000008 	.word	0x00000008
 8008620:	00000004 	.word	0x00000004
 8008624:	00000000 	.word	0x00000000
 8008628:	0000001c 	.word	0x0000001c
 800862c:	00000018 	.word	0x00000018
 8008630:	00000058 	.word	0x00000058
 8008634:	00000088 	.word	0x00000088
 8008638:	00004088 	.word	0x00004088
 800863c:	0000408c 	.word	0x0000408c
 8008640:	00004090 	.word	0x00004090
 8008644:	00004060 	.word	0x00004060
 8008648:	0000405c 	.word	0x0000405c
 800864c:	00004064 	.word	0x00004064
 8008650:	000040c4 	.word	0x000040c4
 8008654:	000040c8 	.word	0x000040c8
 8008658:	000040cc 	.word	0x000040cc
 800865c:	000040d0 	.word	0x000040d0
 8008660:	000040dc 	.word	0x000040dc
 8008664:	000040d4 	.word	0x000040d4
 8008668:	000040e4 	.word	0x000040e4
 800866c:	000040d8 	.word	0x000040d8
 8008670:	000040e0 	.word	0x000040e0
 8008674:	00004118 	.word	0x00004118
 8008678:	0000412c 	.word	0x0000412c
 800867c:	00004178 	.word	0x00004178
 8008680:	000040e8 	.word	0x000040e8
 8008684:	0000418c 	.word	0x0000418c
 8008688:	000040f0 	.word	0x000040f0
 800868c:	000041a0 	.word	0x000041a0
 8008690:	000040ec 	.word	0x000040ec
 8008694:	000040ac 	.word	0x000040ac
 8008698:	000040b0 	.word	0x000040b0
 800869c:	000040b8 	.word	0x000040b8
 80086a0:	000040bc 	.word	0x000040bc
 80086a4:	000040c0 	.word	0x000040c0


		MYDRON.ROOL = pid_angular_rate_rool;
 80086a8:	4b99      	ldr	r3, [pc, #612]	@ (8008910 <NMI_Handler+0x640>)
 80086aa:	edd3 7a00 	vldr	s15, [r3]
 80086ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b2:	ee17 3a90 	vmov	r3, s15
 80086b6:	b21a      	sxth	r2, r3
 80086b8:	4b96      	ldr	r3, [pc, #600]	@ (8008914 <NMI_Handler+0x644>)
 80086ba:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 80086bc:	4b96      	ldr	r3, [pc, #600]	@ (8008918 <NMI_Handler+0x648>)
 80086be:	edd3 7a00 	vldr	s15, [r3]
 80086c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086c6:	ee17 3a90 	vmov	r3, s15
 80086ca:	b21a      	sxth	r2, r3
 80086cc:	4b91      	ldr	r3, [pc, #580]	@ (8008914 <NMI_Handler+0x644>)
 80086ce:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 80086d0:	4b92      	ldr	r3, [pc, #584]	@ (800891c <NMI_Handler+0x64c>)
 80086d2:	edd3 7a00 	vldr	s15, [r3]
 80086d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086da:	ee17 3a90 	vmov	r3, s15
 80086de:	b21a      	sxth	r2, r3
 80086e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008914 <NMI_Handler+0x644>)
 80086e2:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 80086e4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80086e8:	f7fb f8a2 	bl	8003830 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 80086ec:	4b89      	ldr	r3, [pc, #548]	@ (8008914 <NMI_Handler+0x644>)
 80086ee:	885b      	ldrh	r3, [r3, #2]
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b8b      	ldr	r3, [pc, #556]	@ (8008920 <NMI_Handler+0x650>)
 80086f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	dd05      	ble.n	8008708 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 80086fc:	4b88      	ldr	r3, [pc, #544]	@ (8008920 <NMI_Handler+0x650>)
 80086fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008702:	b29a      	uxth	r2, r3
 8008704:	4b83      	ldr	r3, [pc, #524]	@ (8008914 <NMI_Handler+0x644>)
 8008706:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008708:	4b82      	ldr	r3, [pc, #520]	@ (8008914 <NMI_Handler+0x644>)
 800870a:	885b      	ldrh	r3, [r3, #2]
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008714:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80088f8 <NMI_Handler+0x628>
 8008718:	ee27 6b06 	vmul.f64	d6, d7, d6
 800871c:	4b7d      	ldr	r3, [pc, #500]	@ (8008914 <NMI_Handler+0x644>)
 800871e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800872a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800872e:	4b79      	ldr	r3, [pc, #484]	@ (8008914 <NMI_Handler+0x644>)
 8008730:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800873c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008740:	4b74      	ldr	r3, [pc, #464]	@ (8008914 <NMI_Handler+0x644>)
 8008742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800874e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008752:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008900 <NMI_Handler+0x630>
 8008756:	ee37 7b06 	vadd.f64	d7, d7, d6
 800875a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008908 <NMI_Handler+0x638>
 800875e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008762:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008766:	ee17 3a90 	vmov	r3, s15
 800876a:	b29a      	uxth	r2, r3
 800876c:	4b6d      	ldr	r3, [pc, #436]	@ (8008924 <NMI_Handler+0x654>)
 800876e:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008770:	4b68      	ldr	r3, [pc, #416]	@ (8008914 <NMI_Handler+0x644>)
 8008772:	885b      	ldrh	r3, [r3, #2]
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800877c:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80088f8 <NMI_Handler+0x628>
 8008780:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008784:	4b63      	ldr	r3, [pc, #396]	@ (8008914 <NMI_Handler+0x644>)
 8008786:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008792:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008796:	4b5f      	ldr	r3, [pc, #380]	@ (8008914 <NMI_Handler+0x644>)
 8008798:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80087a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008914 <NMI_Handler+0x644>)
 80087aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087ba:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008900 <NMI_Handler+0x630>
 80087be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087c2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008908 <NMI_Handler+0x638>
 80087c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087ce:	ee17 3a90 	vmov	r3, s15
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	4b54      	ldr	r3, [pc, #336]	@ (8008928 <NMI_Handler+0x658>)
 80087d6:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80087d8:	4b4e      	ldr	r3, [pc, #312]	@ (8008914 <NMI_Handler+0x644>)
 80087da:	885b      	ldrh	r3, [r3, #2]
 80087dc:	ee07 3a90 	vmov	s15, r3
 80087e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087e4:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80088f8 <NMI_Handler+0x628>
 80087e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087ec:	4b49      	ldr	r3, [pc, #292]	@ (8008914 <NMI_Handler+0x644>)
 80087ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087fe:	4b45      	ldr	r3, [pc, #276]	@ (8008914 <NMI_Handler+0x644>)
 8008800:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800880c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008810:	4b40      	ldr	r3, [pc, #256]	@ (8008914 <NMI_Handler+0x644>)
 8008812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800881e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008822:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008900 <NMI_Handler+0x630>
 8008826:	ee37 7b06 	vadd.f64	d7, d7, d6
 800882a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008908 <NMI_Handler+0x638>
 800882e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008832:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008836:	ee17 3a90 	vmov	r3, s15
 800883a:	b29a      	uxth	r2, r3
 800883c:	4b3b      	ldr	r3, [pc, #236]	@ (800892c <NMI_Handler+0x65c>)
 800883e:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008840:	4b34      	ldr	r3, [pc, #208]	@ (8008914 <NMI_Handler+0x644>)
 8008842:	885b      	ldrh	r3, [r3, #2]
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800884c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80088f8 <NMI_Handler+0x628>
 8008850:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008854:	4b2f      	ldr	r3, [pc, #188]	@ (8008914 <NMI_Handler+0x644>)
 8008856:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008862:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008866:	4b2b      	ldr	r3, [pc, #172]	@ (8008914 <NMI_Handler+0x644>)
 8008868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008874:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008878:	4b26      	ldr	r3, [pc, #152]	@ (8008914 <NMI_Handler+0x644>)
 800887a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008886:	ee36 7b07 	vadd.f64	d7, d6, d7
 800888a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008900 <NMI_Handler+0x630>
 800888e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008892:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008908 <NMI_Handler+0x638>
 8008896:	ee37 7b06 	vadd.f64	d7, d7, d6
 800889a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800889e:	ee17 3a90 	vmov	r3, s15
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	4b22      	ldr	r3, [pc, #136]	@ (8008930 <NMI_Handler+0x660>)
 80088a6:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 80088a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008924 <NMI_Handler+0x654>)
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f8 fac1 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 80088b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008928 <NMI_Handler+0x658>)
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f8 fade 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 80088bc:	4b1b      	ldr	r3, [pc, #108]	@ (800892c <NMI_Handler+0x65c>)
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7f8 fafb 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 80088c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008930 <NMI_Handler+0x660>)
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f8 fb18 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 80088d0:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <NMI_Handler+0x654>)
 80088d2:	881a      	ldrh	r2, [r3, #0]
 80088d4:	4b17      	ldr	r3, [pc, #92]	@ (8008934 <NMI_Handler+0x664>)
 80088d6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 80088d8:	4b13      	ldr	r3, [pc, #76]	@ (8008928 <NMI_Handler+0x658>)
 80088da:	881a      	ldrh	r2, [r3, #0]
 80088dc:	4b16      	ldr	r3, [pc, #88]	@ (8008938 <NMI_Handler+0x668>)
 80088de:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 80088e0:	4b12      	ldr	r3, [pc, #72]	@ (800892c <NMI_Handler+0x65c>)
 80088e2:	881a      	ldrh	r2, [r3, #0]
 80088e4:	4b15      	ldr	r3, [pc, #84]	@ (800893c <NMI_Handler+0x66c>)
 80088e6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 80088e8:	4b11      	ldr	r3, [pc, #68]	@ (8008930 <NMI_Handler+0x660>)
 80088ea:	881a      	ldrh	r2, [r3, #0]
 80088ec:	4b14      	ldr	r3, [pc, #80]	@ (8008940 <NMI_Handler+0x670>)
 80088ee:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 80088f0:	e517      	b.n	8008322 <NMI_Handler+0x52>
 80088f2:	bf00      	nop
 80088f4:	f3af 8000 	nop.w
 80088f8:	66666666 	.word	0x66666666
 80088fc:	3fe66666 	.word	0x3fe66666
 8008900:	00000000 	.word	0x00000000
 8008904:	40c48200 	.word	0x40c48200
 8008908:	00000000 	.word	0x00000000
 800890c:	407f4000 	.word	0x407f4000
 8008910:	000040f0 	.word	0x000040f0
 8008914:	00000184 	.word	0x00000184
 8008918:	000040e8 	.word	0x000040e8
 800891c:	000040ec 	.word	0x000040ec
 8008920:	0000406a 	.word	0x0000406a
 8008924:	000041b4 	.word	0x000041b4
 8008928:	000041b6 	.word	0x000041b6
 800892c:	000041b8 	.word	0x000041b8
 8008930:	000041ba 	.word	0x000041ba
 8008934:	000041bc 	.word	0x000041bc
 8008938:	000041be 	.word	0x000041be
 800893c:	000041c0 	.word	0x000041c0
 8008940:	000041c2 	.word	0x000041c2

08008944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008948:	2201      	movs	r2, #1
 800894a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800894e:	4812      	ldr	r0, [pc, #72]	@ (8008998 <HardFault_Handler+0x54>)
 8008950:	f005 ff68 	bl	800e824 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008954:	2200      	movs	r2, #0
 8008956:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800895a:	4810      	ldr	r0, [pc, #64]	@ (800899c <HardFault_Handler+0x58>)
 800895c:	f005 ff62 	bl	800e824 <HAL_GPIO_WritePin>
	LED_R_1;
 8008960:	2201      	movs	r2, #1
 8008962:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008966:	480d      	ldr	r0, [pc, #52]	@ (800899c <HardFault_Handler+0x58>)
 8008968:	f005 ff5c 	bl	800e824 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800896c:	480c      	ldr	r0, [pc, #48]	@ (80089a0 <HardFault_Handler+0x5c>)
 800896e:	f015 f9f1 	bl	801dd54 <f_close>
	wanted_rool = 0;
 8008972:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <HardFault_Handler+0x60>)
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800897a:	4b0b      	ldr	r3, [pc, #44]	@ (80089a8 <HardFault_Handler+0x64>)
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008982:	4b0a      	ldr	r3, [pc, #40]	@ (80089ac <HardFault_Handler+0x68>)
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <HardFault_Handler+0x6c>)
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b21a      	sxth	r2, r3
 8008990:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <HardFault_Handler+0x70>)
 8008992:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <HardFault_Handler+0x50>
 8008998:	58021000 	.word	0x58021000
 800899c:	58020400 	.word	0x58020400
 80089a0:	24001ef0 	.word	0x24001ef0
 80089a4:	0000407c 	.word	0x0000407c
 80089a8:	00004078 	.word	0x00004078
 80089ac:	00004080 	.word	0x00004080
 80089b0:	0801ec08 	.word	0x0801ec08
 80089b4:	00004068 	.word	0x00004068

080089b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 80089bc:	2200      	movs	r2, #0
 80089be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089c2:	4812      	ldr	r0, [pc, #72]	@ (8008a0c <MemManage_Handler+0x54>)
 80089c4:	f005 ff2e 	bl	800e824 <HAL_GPIO_WritePin>
	LED_Y_0;
 80089c8:	2200      	movs	r2, #0
 80089ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089ce:	4810      	ldr	r0, [pc, #64]	@ (8008a10 <MemManage_Handler+0x58>)
 80089d0:	f005 ff28 	bl	800e824 <HAL_GPIO_WritePin>
	LED_R_1;
 80089d4:	2201      	movs	r2, #1
 80089d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089da:	480d      	ldr	r0, [pc, #52]	@ (8008a10 <MemManage_Handler+0x58>)
 80089dc:	f005 ff22 	bl	800e824 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089e0:	480c      	ldr	r0, [pc, #48]	@ (8008a14 <MemManage_Handler+0x5c>)
 80089e2:	f015 f9b7 	bl	801dd54 <f_close>
	wanted_rool = 0;
 80089e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a18 <MemManage_Handler+0x60>)
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089ee:	4b0b      	ldr	r3, [pc, #44]	@ (8008a1c <MemManage_Handler+0x64>)
 80089f0:	f04f 0200 	mov.w	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <MemManage_Handler+0x68>)
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <MemManage_Handler+0x6c>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b21a      	sxth	r2, r3
 8008a04:	4b08      	ldr	r3, [pc, #32]	@ (8008a28 <MemManage_Handler+0x70>)
 8008a06:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <MemManage_Handler+0x50>
 8008a0c:	58021000 	.word	0x58021000
 8008a10:	58020400 	.word	0x58020400
 8008a14:	24001ef0 	.word	0x24001ef0
 8008a18:	0000407c 	.word	0x0000407c
 8008a1c:	00004078 	.word	0x00004078
 8008a20:	00004080 	.word	0x00004080
 8008a24:	0801ec08 	.word	0x0801ec08
 8008a28:	00004068 	.word	0x00004068

08008a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008a30:	2201      	movs	r2, #1
 8008a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a36:	4812      	ldr	r0, [pc, #72]	@ (8008a80 <BusFault_Handler+0x54>)
 8008a38:	f005 fef4 	bl	800e824 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a42:	4810      	ldr	r0, [pc, #64]	@ (8008a84 <BusFault_Handler+0x58>)
 8008a44:	f005 feee 	bl	800e824 <HAL_GPIO_WritePin>
	LED_R_1;
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a4e:	480d      	ldr	r0, [pc, #52]	@ (8008a84 <BusFault_Handler+0x58>)
 8008a50:	f005 fee8 	bl	800e824 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a54:	480c      	ldr	r0, [pc, #48]	@ (8008a88 <BusFault_Handler+0x5c>)
 8008a56:	f015 f97d 	bl	801dd54 <f_close>
	wanted_rool = 0;
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <BusFault_Handler+0x60>)
 8008a5c:	f04f 0200 	mov.w	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008a62:	4b0b      	ldr	r3, [pc, #44]	@ (8008a90 <BusFault_Handler+0x64>)
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <BusFault_Handler+0x68>)
 8008a6c:	f04f 0200 	mov.w	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a72:	4b09      	ldr	r3, [pc, #36]	@ (8008a98 <BusFault_Handler+0x6c>)
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b21a      	sxth	r2, r3
 8008a78:	4b08      	ldr	r3, [pc, #32]	@ (8008a9c <BusFault_Handler+0x70>)
 8008a7a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <BusFault_Handler+0x50>
 8008a80:	58021000 	.word	0x58021000
 8008a84:	58020400 	.word	0x58020400
 8008a88:	24001ef0 	.word	0x24001ef0
 8008a8c:	0000407c 	.word	0x0000407c
 8008a90:	00004078 	.word	0x00004078
 8008a94:	00004080 	.word	0x00004080
 8008a98:	0801ec08 	.word	0x0801ec08
 8008a9c:	00004068 	.word	0x00004068

08008aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008aaa:	4812      	ldr	r0, [pc, #72]	@ (8008af4 <UsageFault_Handler+0x54>)
 8008aac:	f005 feba 	bl	800e824 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008ab6:	4810      	ldr	r0, [pc, #64]	@ (8008af8 <UsageFault_Handler+0x58>)
 8008ab8:	f005 feb4 	bl	800e824 <HAL_GPIO_WritePin>
	LED_R_1;
 8008abc:	2201      	movs	r2, #1
 8008abe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008ac2:	480d      	ldr	r0, [pc, #52]	@ (8008af8 <UsageFault_Handler+0x58>)
 8008ac4:	f005 feae 	bl	800e824 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008ac8:	480c      	ldr	r0, [pc, #48]	@ (8008afc <UsageFault_Handler+0x5c>)
 8008aca:	f015 f943 	bl	801dd54 <f_close>
	wanted_rool = 0;
 8008ace:	4b0c      	ldr	r3, [pc, #48]	@ (8008b00 <UsageFault_Handler+0x60>)
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <UsageFault_Handler+0x64>)
 8008ad8:	f04f 0200 	mov.w	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008ade:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <UsageFault_Handler+0x68>)
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008ae6:	4b09      	ldr	r3, [pc, #36]	@ (8008b0c <UsageFault_Handler+0x6c>)
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b21a      	sxth	r2, r3
 8008aec:	4b08      	ldr	r3, [pc, #32]	@ (8008b10 <UsageFault_Handler+0x70>)
 8008aee:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008af0:	bf00      	nop
 8008af2:	e7fd      	b.n	8008af0 <UsageFault_Handler+0x50>
 8008af4:	58021000 	.word	0x58021000
 8008af8:	58020400 	.word	0x58020400
 8008afc:	24001ef0 	.word	0x24001ef0
 8008b00:	0000407c 	.word	0x0000407c
 8008b04:	00004078 	.word	0x00004078
 8008b08:	00004080 	.word	0x00004080
 8008b0c:	0801ec08 	.word	0x0801ec08
 8008b10:	00004068 	.word	0x00004068

08008b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b18:	bf00      	nop
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b22:	b480      	push	{r7}
 8008b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b26:	bf00      	nop
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b34:	bf00      	nop
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008b44:	4b08      	ldr	r3, [pc, #32]	@ (8008b68 <SysTick_Handler+0x28>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	4a07      	ldr	r2, [pc, #28]	@ (8008b68 <SysTick_Handler+0x28>)
 8008b4c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008b4e:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <SysTick_Handler+0x28>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	d904      	bls.n	8008b60 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008b56:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <SysTick_Handler+0x28>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008b5c:	f7ff fb98 	bl	8008290 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b60:	f000 fd04 	bl	800956c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b64:	bf00      	nop
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	24000374 	.word	0x24000374

08008b6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008b70:	4802      	ldr	r0, [pc, #8]	@ (8008b7c <DMA1_Stream0_IRQHandler+0x10>)
 8008b72:	f004 f96b 	bl	800ce4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008b76:	bf00      	nop
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	240002fc 	.word	0x240002fc

08008b80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008b84:	4802      	ldr	r0, [pc, #8]	@ (8008b90 <ADC_IRQHandler+0x10>)
 8008b86:	f001 fb3f 	bl	800a208 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008b8a:	bf00      	nop
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	240000ac 	.word	0x240000ac

08008b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b98:	4802      	ldr	r0, [pc, #8]	@ (8008ba4 <TIM2_IRQHandler+0x10>)
 8008b9a:	f00d ff02 	bl	80169a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008b9e:	bf00      	nop
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	240003cc 	.word	0x240003cc

08008ba8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008bac:	4802      	ldr	r0, [pc, #8]	@ (8008bb8 <SPI2_IRQHandler+0x10>)
 8008bae:	f00d f871 	bl	8015c94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	240001ec 	.word	0x240001ec

08008bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008bc0:	4802      	ldr	r0, [pc, #8]	@ (8008bcc <USART1_IRQHandler+0x10>)
 8008bc2:	f00f fb45 	bl	8018250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008bc6:	bf00      	nop
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	240004b0 	.word	0x240004b0

08008bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008bd4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008bd8:	f005 fe3d 	bl	800e856 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008bdc:	bf00      	nop
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008be4:	4802      	ldr	r0, [pc, #8]	@ (8008bf0 <DMA2_Stream0_IRQHandler+0x10>)
 8008be6:	f004 f931 	bl	800ce4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	2400011c 	.word	0x2400011c

08008bf4 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008bf8:	4802      	ldr	r0, [pc, #8]	@ (8008c04 <I2C5_EV_IRQHandler+0x10>)
 8008bfa:	f006 fa21 	bl	800f040 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008bfe:	bf00      	nop
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	24000198 	.word	0x24000198

08008c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008c0c:	4b32      	ldr	r3, [pc, #200]	@ (8008cd8 <SystemInit+0xd0>)
 8008c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c12:	4a31      	ldr	r2, [pc, #196]	@ (8008cd8 <SystemInit+0xd0>)
 8008c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8008cdc <SystemInit+0xd4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	2b06      	cmp	r3, #6
 8008c26:	d807      	bhi.n	8008c38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c28:	4b2c      	ldr	r3, [pc, #176]	@ (8008cdc <SystemInit+0xd4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f023 030f 	bic.w	r3, r3, #15
 8008c30:	4a2a      	ldr	r2, [pc, #168]	@ (8008cdc <SystemInit+0xd4>)
 8008c32:	f043 0307 	orr.w	r3, r3, #7
 8008c36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008c38:	4b29      	ldr	r3, [pc, #164]	@ (8008ce0 <SystemInit+0xd8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a28      	ldr	r2, [pc, #160]	@ (8008ce0 <SystemInit+0xd8>)
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c44:	4b26      	ldr	r3, [pc, #152]	@ (8008ce0 <SystemInit+0xd8>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008c4a:	4b25      	ldr	r3, [pc, #148]	@ (8008ce0 <SystemInit+0xd8>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4924      	ldr	r1, [pc, #144]	@ (8008ce0 <SystemInit+0xd8>)
 8008c50:	4b24      	ldr	r3, [pc, #144]	@ (8008ce4 <SystemInit+0xdc>)
 8008c52:	4013      	ands	r3, r2
 8008c54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c56:	4b21      	ldr	r3, [pc, #132]	@ (8008cdc <SystemInit+0xd4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c62:	4b1e      	ldr	r3, [pc, #120]	@ (8008cdc <SystemInit+0xd4>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f023 030f 	bic.w	r3, r3, #15
 8008c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cdc <SystemInit+0xd4>)
 8008c6c:	f043 0307 	orr.w	r3, r3, #7
 8008c70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008c72:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce0 <SystemInit+0xd8>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008c78:	4b19      	ldr	r3, [pc, #100]	@ (8008ce0 <SystemInit+0xd8>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008c7e:	4b18      	ldr	r3, [pc, #96]	@ (8008ce0 <SystemInit+0xd8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008c84:	4b16      	ldr	r3, [pc, #88]	@ (8008ce0 <SystemInit+0xd8>)
 8008c86:	4a18      	ldr	r2, [pc, #96]	@ (8008ce8 <SystemInit+0xe0>)
 8008c88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008c8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <SystemInit+0xd8>)
 8008c8c:	4a17      	ldr	r2, [pc, #92]	@ (8008cec <SystemInit+0xe4>)
 8008c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008c90:	4b13      	ldr	r3, [pc, #76]	@ (8008ce0 <SystemInit+0xd8>)
 8008c92:	4a17      	ldr	r2, [pc, #92]	@ (8008cf0 <SystemInit+0xe8>)
 8008c94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008c96:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <SystemInit+0xd8>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008c9c:	4b10      	ldr	r3, [pc, #64]	@ (8008ce0 <SystemInit+0xd8>)
 8008c9e:	4a14      	ldr	r2, [pc, #80]	@ (8008cf0 <SystemInit+0xe8>)
 8008ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce0 <SystemInit+0xd8>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <SystemInit+0xd8>)
 8008caa:	4a11      	ldr	r2, [pc, #68]	@ (8008cf0 <SystemInit+0xe8>)
 8008cac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008cae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce0 <SystemInit+0xd8>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce0 <SystemInit+0xd8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a09      	ldr	r2, [pc, #36]	@ (8008ce0 <SystemInit+0xd8>)
 8008cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <SystemInit+0xd8>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <SystemInit+0xec>)
 8008cc8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008ccc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008cce:	bf00      	nop
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	e000ed00 	.word	0xe000ed00
 8008cdc:	52002000 	.word	0x52002000
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	eaf6ed7f 	.word	0xeaf6ed7f
 8008ce8:	02020200 	.word	0x02020200
 8008cec:	01ff0000 	.word	0x01ff0000
 8008cf0:	01010280 	.word	0x01010280
 8008cf4:	52004000 	.word	0x52004000

08008cf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b098      	sub	sp, #96	@ 0x60
 8008cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	605a      	str	r2, [r3, #4]
 8008d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	605a      	str	r2, [r3, #4]
 8008d14:	609a      	str	r2, [r3, #8]
 8008d16:	60da      	str	r2, [r3, #12]
 8008d18:	611a      	str	r2, [r3, #16]
 8008d1a:	615a      	str	r2, [r3, #20]
 8008d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	2234      	movs	r2, #52	@ 0x34
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f015 fa0d 	bl	801e144 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d2a:	4b45      	ldr	r3, [pc, #276]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d2c:	4a45      	ldr	r2, [pc, #276]	@ (8008e44 <MX_TIM1_Init+0x14c>)
 8008d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008d30:	4b43      	ldr	r3, [pc, #268]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008d36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d38:	4b41      	ldr	r3, [pc, #260]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008d3e:	4b40      	ldr	r3, [pc, #256]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d46:	4b3e      	ldr	r3, [pc, #248]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008d52:	4b3b      	ldr	r3, [pc, #236]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d54:	2280      	movs	r2, #128	@ 0x80
 8008d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008d58:	4839      	ldr	r0, [pc, #228]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d5a:	f00d fc57 	bl	801660c <HAL_TIM_PWM_Init>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008d64:	f7ff f8b8 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008d74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4831      	ldr	r0, [pc, #196]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008d7c:	f00e ff64 	bl	8017c48 <HAL_TIMEx_MasterConfigSynchronization>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008d86:	f7ff f8a7 	bl	8007ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d8a:	2360      	movs	r3, #96	@ 0x60
 8008d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d92:	2300      	movs	r3, #0
 8008d94:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008d96:	2300      	movs	r3, #0
 8008d98:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008da2:	2300      	movs	r3, #0
 8008da4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008da6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008daa:	2204      	movs	r2, #4
 8008dac:	4619      	mov	r1, r3
 8008dae:	4824      	ldr	r0, [pc, #144]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008db0:	f00d ff9a 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008dba:	f7ff f88d 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008dbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	481e      	ldr	r0, [pc, #120]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008dc8:	f00d ff8e 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008dd2:	f7ff f881 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008dd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008dda:	220c      	movs	r2, #12
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4818      	ldr	r0, [pc, #96]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008de0:	f00d ff82 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008dea:	f7ff f875 	bl	8007ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008e02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008e06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008e1e:	1d3b      	adds	r3, r7, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4807      	ldr	r0, [pc, #28]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008e24:	f00e ffac 	bl	8017d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008e2e:	f7ff f853 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008e32:	4803      	ldr	r0, [pc, #12]	@ (8008e40 <MX_TIM1_Init+0x148>)
 8008e34:	f000 f9da 	bl	80091ec <HAL_TIM_MspPostInit>

}
 8008e38:	bf00      	nop
 8008e3a:	3760      	adds	r7, #96	@ 0x60
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	24000380 	.word	0x24000380
 8008e44:	40010000 	.word	0x40010000

08008e48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e4e:	f107 0314 	add.w	r3, r7, #20
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	605a      	str	r2, [r3, #4]
 8008e58:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008e5a:	1d3b      	adds	r3, r7, #4
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	605a      	str	r2, [r3, #4]
 8008e62:	609a      	str	r2, [r3, #8]
 8008e64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008e66:	4b21      	ldr	r3, [pc, #132]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e70:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e76:	4b1d      	ldr	r3, [pc, #116]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e84:	4b19      	ldr	r3, [pc, #100]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008e8a:	4b18      	ldr	r3, [pc, #96]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e8c:	2280      	movs	r2, #128	@ 0x80
 8008e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008e90:	4816      	ldr	r0, [pc, #88]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008e92:	f00d fd2f 	bl	80168f4 <HAL_TIM_IC_Init>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008e9c:	f7ff f81c 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	4619      	mov	r1, r3
 8008eae:	480f      	ldr	r0, [pc, #60]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008eb0:	f00e feca 	bl	8017c48 <HAL_TIMEx_MasterConfigSynchronization>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008eba:	f7ff f80d 	bl	8007ed8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	4805      	ldr	r0, [pc, #20]	@ (8008eec <MX_TIM2_Init+0xa4>)
 8008ed6:	f00d fe6b 	bl	8016bb0 <HAL_TIM_IC_ConfigChannel>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008ee0:	f7fe fffa 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008ee4:	bf00      	nop
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	240003cc 	.word	0x240003cc

08008ef0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	@ 0x28
 8008ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ef6:	f107 031c 	add.w	r3, r7, #28
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	605a      	str	r2, [r3, #4]
 8008f00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f02:	463b      	mov	r3, r7
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	611a      	str	r2, [r3, #16]
 8008f10:	615a      	str	r2, [r3, #20]
 8008f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008f14:	4b32      	ldr	r3, [pc, #200]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f16:	4a33      	ldr	r2, [pc, #204]	@ (8008fe4 <MX_TIM3_Init+0xf4>)
 8008f18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008f1a:	4b31      	ldr	r3, [pc, #196]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f1c:	221c      	movs	r2, #28
 8008f1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f20:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008f26:	4b2e      	ldr	r3, [pc, #184]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f28:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008f2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f34:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008f3a:	4829      	ldr	r0, [pc, #164]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f3c:	f00d fb66 	bl	801660c <HAL_TIM_PWM_Init>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008f46:	f7fe ffc7 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008f52:	f107 031c 	add.w	r3, r7, #28
 8008f56:	4619      	mov	r1, r3
 8008f58:	4821      	ldr	r0, [pc, #132]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f5a:	f00e fe75 	bl	8017c48 <HAL_TIMEx_MasterConfigSynchronization>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008f64:	f7fe ffb8 	bl	8007ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f68:	2360      	movs	r3, #96	@ 0x60
 8008f6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f78:	463b      	mov	r3, r7
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4818      	ldr	r0, [pc, #96]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f80:	f00d feb2 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008f8a:	f7fe ffa5 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f8e:	463b      	mov	r3, r7
 8008f90:	2204      	movs	r2, #4
 8008f92:	4619      	mov	r1, r3
 8008f94:	4812      	ldr	r0, [pc, #72]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008f96:	f00d fea7 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008fa0:	f7fe ff9a 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	4619      	mov	r1, r3
 8008faa:	480d      	ldr	r0, [pc, #52]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008fac:	f00d fe9c 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008fb6:	f7fe ff8f 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008fba:	463b      	mov	r3, r7
 8008fbc:	220c      	movs	r2, #12
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4807      	ldr	r0, [pc, #28]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008fc2:	f00d fe91 	bl	8016ce8 <HAL_TIM_PWM_ConfigChannel>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008fcc:	f7fe ff84 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008fd0:	4803      	ldr	r0, [pc, #12]	@ (8008fe0 <MX_TIM3_Init+0xf0>)
 8008fd2:	f000 f90b 	bl	80091ec <HAL_TIM_MspPostInit>

}
 8008fd6:	bf00      	nop
 8008fd8:	3728      	adds	r7, #40	@ 0x28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	24000418 	.word	0x24000418
 8008fe4:	40000400 	.word	0x40000400

08008fe8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fee:	f107 0310 	add.w	r3, r7, #16
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	605a      	str	r2, [r3, #4]
 8008ff8:	609a      	str	r2, [r3, #8]
 8008ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ffc:	1d3b      	adds	r3, r7, #4
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009006:	4b21      	ldr	r3, [pc, #132]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009008:	4a21      	ldr	r2, [pc, #132]	@ (8009090 <MX_TIM8_Init+0xa8>)
 800900a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 800900c:	4b1f      	ldr	r3, [pc, #124]	@ (800908c <MX_TIM8_Init+0xa4>)
 800900e:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8009012:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009014:	4b1d      	ldr	r3, [pc, #116]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009016:	2200      	movs	r2, #0
 8009018:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 800901a:	4b1c      	ldr	r3, [pc, #112]	@ (800908c <MX_TIM8_Init+0xa4>)
 800901c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009020:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009022:	4b1a      	ldr	r3, [pc, #104]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009024:	2200      	movs	r2, #0
 8009026:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009028:	4b18      	ldr	r3, [pc, #96]	@ (800908c <MX_TIM8_Init+0xa4>)
 800902a:	2200      	movs	r2, #0
 800902c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800902e:	4b17      	ldr	r3, [pc, #92]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009030:	2200      	movs	r2, #0
 8009032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009034:	4815      	ldr	r0, [pc, #84]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009036:	f00d f98e 	bl	8016356 <HAL_TIM_Base_Init>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8009040:	f7fe ff4a 	bl	8007ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009048:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800904a:	f107 0310 	add.w	r3, r7, #16
 800904e:	4619      	mov	r1, r3
 8009050:	480e      	ldr	r0, [pc, #56]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009052:	f00d ff5d 	bl	8016f10 <HAL_TIM_ConfigClockSource>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800905c:	f7fe ff3c 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009060:	2320      	movs	r3, #32
 8009062:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8009064:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009068:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800906e:	1d3b      	adds	r3, r7, #4
 8009070:	4619      	mov	r1, r3
 8009072:	4806      	ldr	r0, [pc, #24]	@ (800908c <MX_TIM8_Init+0xa4>)
 8009074:	f00e fde8 	bl	8017c48 <HAL_TIMEx_MasterConfigSynchronization>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800907e:	f7fe ff2b 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009082:	bf00      	nop
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	24000464 	.word	0x24000464
 8009090:	40010400 	.word	0x40010400

08009094 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a16      	ldr	r2, [pc, #88]	@ (80090fc <HAL_TIM_PWM_MspInit+0x68>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d10f      	bne.n	80090c6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80090a6:	4b16      	ldr	r3, [pc, #88]	@ (8009100 <HAL_TIM_PWM_MspInit+0x6c>)
 80090a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ac:	4a14      	ldr	r2, [pc, #80]	@ (8009100 <HAL_TIM_PWM_MspInit+0x6c>)
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80090b6:	4b12      	ldr	r3, [pc, #72]	@ (8009100 <HAL_TIM_PWM_MspInit+0x6c>)
 80090b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80090c4:	e013      	b.n	80090ee <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009104 <HAL_TIM_PWM_MspInit+0x70>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d10e      	bne.n	80090ee <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009100 <HAL_TIM_PWM_MspInit+0x6c>)
 80090d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009100 <HAL_TIM_PWM_MspInit+0x6c>)
 80090d8:	f043 0302 	orr.w	r3, r3, #2
 80090dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <HAL_TIM_PWM_MspInit+0x6c>)
 80090e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	60bb      	str	r3, [r7, #8]
 80090ec:	68bb      	ldr	r3, [r7, #8]
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40010000 	.word	0x40010000
 8009100:	58024400 	.word	0x58024400
 8009104:	40000400 	.word	0x40000400

08009108 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	@ 0x28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009128:	d135      	bne.n	8009196 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800912a:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <HAL_TIM_IC_MspInit+0x98>)
 800912c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009130:	4a1b      	ldr	r2, [pc, #108]	@ (80091a0 <HAL_TIM_IC_MspInit+0x98>)
 8009132:	f043 0301 	orr.w	r3, r3, #1
 8009136:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800913a:	4b19      	ldr	r3, [pc, #100]	@ (80091a0 <HAL_TIM_IC_MspInit+0x98>)
 800913c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	613b      	str	r3, [r7, #16]
 8009146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009148:	4b15      	ldr	r3, [pc, #84]	@ (80091a0 <HAL_TIM_IC_MspInit+0x98>)
 800914a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800914e:	4a14      	ldr	r2, [pc, #80]	@ (80091a0 <HAL_TIM_IC_MspInit+0x98>)
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009158:	4b11      	ldr	r3, [pc, #68]	@ (80091a0 <HAL_TIM_IC_MspInit+0x98>)
 800915a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800916a:	2302      	movs	r3, #2
 800916c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009172:	2300      	movs	r3, #0
 8009174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009176:	2301      	movs	r3, #1
 8009178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800917a:	f107 0314 	add.w	r3, r7, #20
 800917e:	4619      	mov	r1, r3
 8009180:	4808      	ldr	r0, [pc, #32]	@ (80091a4 <HAL_TIM_IC_MspInit+0x9c>)
 8009182:	f005 f98f 	bl	800e4a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8009186:	2200      	movs	r2, #0
 8009188:	2101      	movs	r1, #1
 800918a:	201c      	movs	r0, #28
 800918c:	f002 fa8b 	bl	800b6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009190:	201c      	movs	r0, #28
 8009192:	f002 faa2 	bl	800b6da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009196:	bf00      	nop
 8009198:	3728      	adds	r7, #40	@ 0x28
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
 80091a4:	58020000 	.word	0x58020000

080091a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a0b      	ldr	r2, [pc, #44]	@ (80091e4 <HAL_TIM_Base_MspInit+0x3c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d10e      	bne.n	80091d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80091ba:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <HAL_TIM_Base_MspInit+0x40>)
 80091bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091c0:	4a09      	ldr	r2, [pc, #36]	@ (80091e8 <HAL_TIM_Base_MspInit+0x40>)
 80091c2:	f043 0302 	orr.w	r3, r3, #2
 80091c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80091ca:	4b07      	ldr	r3, [pc, #28]	@ (80091e8 <HAL_TIM_Base_MspInit+0x40>)
 80091cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80091d8:	bf00      	nop
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	40010400 	.word	0x40010400
 80091e8:	58024400 	.word	0x58024400

080091ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	@ 0x28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f4:	f107 0314 	add.w	r3, r7, #20
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	605a      	str	r2, [r3, #4]
 80091fe:	609a      	str	r2, [r3, #8]
 8009200:	60da      	str	r2, [r3, #12]
 8009202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a26      	ldr	r2, [pc, #152]	@ (80092a4 <HAL_TIM_MspPostInit+0xb8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d120      	bne.n	8009250 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800920e:	4b26      	ldr	r3, [pc, #152]	@ (80092a8 <HAL_TIM_MspPostInit+0xbc>)
 8009210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009214:	4a24      	ldr	r2, [pc, #144]	@ (80092a8 <HAL_TIM_MspPostInit+0xbc>)
 8009216:	f043 0310 	orr.w	r3, r3, #16
 800921a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800921e:	4b22      	ldr	r3, [pc, #136]	@ (80092a8 <HAL_TIM_MspPostInit+0xbc>)
 8009220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	613b      	str	r3, [r7, #16]
 800922a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800922c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009232:	2302      	movs	r3, #2
 8009234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800923a:	2300      	movs	r3, #0
 800923c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800923e:	2301      	movs	r3, #1
 8009240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009242:	f107 0314 	add.w	r3, r7, #20
 8009246:	4619      	mov	r1, r3
 8009248:	4818      	ldr	r0, [pc, #96]	@ (80092ac <HAL_TIM_MspPostInit+0xc0>)
 800924a:	f005 f92b 	bl	800e4a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800924e:	e024      	b.n	800929a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a16      	ldr	r2, [pc, #88]	@ (80092b0 <HAL_TIM_MspPostInit+0xc4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d11f      	bne.n	800929a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800925a:	4b13      	ldr	r3, [pc, #76]	@ (80092a8 <HAL_TIM_MspPostInit+0xbc>)
 800925c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009260:	4a11      	ldr	r2, [pc, #68]	@ (80092a8 <HAL_TIM_MspPostInit+0xbc>)
 8009262:	f043 0304 	orr.w	r3, r3, #4
 8009266:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800926a:	4b0f      	ldr	r3, [pc, #60]	@ (80092a8 <HAL_TIM_MspPostInit+0xbc>)
 800926c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009278:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800927c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927e:	2302      	movs	r3, #2
 8009280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009282:	2300      	movs	r3, #0
 8009284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009286:	2300      	movs	r3, #0
 8009288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800928a:	2302      	movs	r3, #2
 800928c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800928e:	f107 0314 	add.w	r3, r7, #20
 8009292:	4619      	mov	r1, r3
 8009294:	4807      	ldr	r0, [pc, #28]	@ (80092b4 <HAL_TIM_MspPostInit+0xc8>)
 8009296:	f005 f905 	bl	800e4a4 <HAL_GPIO_Init>
}
 800929a:	bf00      	nop
 800929c:	3728      	adds	r7, #40	@ 0x28
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	40010000 	.word	0x40010000
 80092a8:	58024400 	.word	0x58024400
 80092ac:	58021000 	.word	0x58021000
 80092b0:	40000400 	.word	0x40000400
 80092b4:	58020800 	.word	0x58020800

080092b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80092bc:	4b22      	ldr	r3, [pc, #136]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092be:	4a23      	ldr	r2, [pc, #140]	@ (800934c <MX_USART1_UART_Init+0x94>)
 80092c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80092c2:	4b21      	ldr	r3, [pc, #132]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80092c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80092ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092d8:	2200      	movs	r2, #0
 80092da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80092dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092de:	220c      	movs	r2, #12
 80092e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092e2:	4b19      	ldr	r3, [pc, #100]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80092e8:	4b17      	ldr	r3, [pc, #92]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092ee:	4b16      	ldr	r3, [pc, #88]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80092f4:	4b14      	ldr	r3, [pc, #80]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092fa:	4b13      	ldr	r3, [pc, #76]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009300:	4811      	ldr	r0, [pc, #68]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 8009302:	f00e fde7 	bl	8017ed4 <HAL_UART_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800930c:	f7fe fde4 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009310:	2100      	movs	r1, #0
 8009312:	480d      	ldr	r0, [pc, #52]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 8009314:	f011 fc97 	bl	801ac46 <HAL_UARTEx_SetTxFifoThreshold>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800931e:	f7fe fddb 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009322:	2100      	movs	r1, #0
 8009324:	4808      	ldr	r0, [pc, #32]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 8009326:	f011 fccc 	bl	801acc2 <HAL_UARTEx_SetRxFifoThreshold>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009330:	f7fe fdd2 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009334:	4804      	ldr	r0, [pc, #16]	@ (8009348 <MX_USART1_UART_Init+0x90>)
 8009336:	f011 fc4d 	bl	801abd4 <HAL_UARTEx_DisableFifoMode>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009340:	f7fe fdca 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009344:	bf00      	nop
 8009346:	bd80      	pop	{r7, pc}
 8009348:	240004b0 	.word	0x240004b0
 800934c:	40011000 	.word	0x40011000

08009350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b0b8      	sub	sp, #224	@ 0xe0
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009358:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	609a      	str	r2, [r3, #8]
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009368:	f107 0310 	add.w	r3, r7, #16
 800936c:	22b8      	movs	r2, #184	@ 0xb8
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f014 fee7 	bl	801e144 <memset>
  if(uartHandle->Instance==USART1)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a2b      	ldr	r2, [pc, #172]	@ (8009428 <HAL_UART_MspInit+0xd8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d14e      	bne.n	800941e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009380:	f04f 0201 	mov.w	r2, #1
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800938c:	2300      	movs	r3, #0
 800938e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009392:	f107 0310 	add.w	r3, r7, #16
 8009396:	4618      	mov	r0, r3
 8009398:	f008 fe96 	bl	80120c8 <HAL_RCCEx_PeriphCLKConfig>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80093a2:	f7fe fd99 	bl	8007ed8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80093a6:	4b21      	ldr	r3, [pc, #132]	@ (800942c <HAL_UART_MspInit+0xdc>)
 80093a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ac:	4a1f      	ldr	r2, [pc, #124]	@ (800942c <HAL_UART_MspInit+0xdc>)
 80093ae:	f043 0310 	orr.w	r3, r3, #16
 80093b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093b6:	4b1d      	ldr	r3, [pc, #116]	@ (800942c <HAL_UART_MspInit+0xdc>)
 80093b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093c4:	4b19      	ldr	r3, [pc, #100]	@ (800942c <HAL_UART_MspInit+0xdc>)
 80093c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ca:	4a18      	ldr	r2, [pc, #96]	@ (800942c <HAL_UART_MspInit+0xdc>)
 80093cc:	f043 0301 	orr.w	r3, r3, #1
 80093d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093d4:	4b15      	ldr	r3, [pc, #84]	@ (800942c <HAL_UART_MspInit+0xdc>)
 80093d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	60bb      	str	r3, [r7, #8]
 80093e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80093e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ea:	2302      	movs	r3, #2
 80093ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093f6:	2300      	movs	r3, #0
 80093f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093fc:	2307      	movs	r3, #7
 80093fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009402:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009406:	4619      	mov	r1, r3
 8009408:	4809      	ldr	r0, [pc, #36]	@ (8009430 <HAL_UART_MspInit+0xe0>)
 800940a:	f005 f84b 	bl	800e4a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	2025      	movs	r0, #37	@ 0x25
 8009414:	f002 f947 	bl	800b6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009418:	2025      	movs	r0, #37	@ 0x25
 800941a:	f002 f95e 	bl	800b6da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800941e:	bf00      	nop
 8009420:	37e0      	adds	r7, #224	@ 0xe0
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40011000 	.word	0x40011000
 800942c:	58024400 	.word	0x58024400
 8009430:	58020000 	.word	0x58020000

08009434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800946c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009438:	f7ff fbe6 	bl	8008c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800943c:	480c      	ldr	r0, [pc, #48]	@ (8009470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800943e:	490d      	ldr	r1, [pc, #52]	@ (8009474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009440:	4a0d      	ldr	r2, [pc, #52]	@ (8009478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009444:	e002      	b.n	800944c <LoopCopyDataInit>

08009446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800944a:	3304      	adds	r3, #4

0800944c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800944c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800944e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009450:	d3f9      	bcc.n	8009446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009452:	4a0a      	ldr	r2, [pc, #40]	@ (800947c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009454:	4c0a      	ldr	r4, [pc, #40]	@ (8009480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009458:	e001      	b.n	800945e <LoopFillZerobss>

0800945a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800945a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800945c:	3204      	adds	r2, #4

0800945e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800945e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009460:	d3fb      	bcc.n	800945a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009462:	f014 fe7d 	bl	801e160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009466:	f7fb fdbb 	bl	8004fe0 <main>
  bx  lr
 800946a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800946c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009474:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009478:	080209c8 	.word	0x080209c8
  ldr r2, =_sbss
 800947c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8009480:	240008ac 	.word	0x240008ac

08009484 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009484:	e7fe      	b.n	8009484 <ADC3_IRQHandler>
	...

08009488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800948e:	2003      	movs	r0, #3
 8009490:	f002 f8fe 	bl	800b690 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009494:	f008 fc42 	bl	8011d1c <HAL_RCC_GetSysClockFreq>
 8009498:	4602      	mov	r2, r0
 800949a:	4b15      	ldr	r3, [pc, #84]	@ (80094f0 <HAL_Init+0x68>)
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	4913      	ldr	r1, [pc, #76]	@ (80094f4 <HAL_Init+0x6c>)
 80094a6:	5ccb      	ldrb	r3, [r1, r3]
 80094a8:	f003 031f 	and.w	r3, r3, #31
 80094ac:	fa22 f303 	lsr.w	r3, r2, r3
 80094b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094b2:	4b0f      	ldr	r3, [pc, #60]	@ (80094f0 <HAL_Init+0x68>)
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	4a0e      	ldr	r2, [pc, #56]	@ (80094f4 <HAL_Init+0x6c>)
 80094bc:	5cd3      	ldrb	r3, [r2, r3]
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
 80094c8:	4a0b      	ldr	r2, [pc, #44]	@ (80094f8 <HAL_Init+0x70>)
 80094ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094cc:	4a0b      	ldr	r2, [pc, #44]	@ (80094fc <HAL_Init+0x74>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80094d2:	200f      	movs	r0, #15
 80094d4:	f000 f814 	bl	8009500 <HAL_InitTick>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e002      	b.n	80094e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80094e2:	f7fe febb 	bl	800825c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	58024400 	.word	0x58024400
 80094f4:	0801ec0c 	.word	0x0801ec0c
 80094f8:	24000008 	.word	0x24000008
 80094fc:	24000004 	.word	0x24000004

08009500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009508:	4b15      	ldr	r3, [pc, #84]	@ (8009560 <HAL_InitTick+0x60>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e021      	b.n	8009558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009514:	4b13      	ldr	r3, [pc, #76]	@ (8009564 <HAL_InitTick+0x64>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4b11      	ldr	r3, [pc, #68]	@ (8009560 <HAL_InitTick+0x60>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	4619      	mov	r1, r3
 800951e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009522:	fbb3 f3f1 	udiv	r3, r3, r1
 8009526:	fbb2 f3f3 	udiv	r3, r2, r3
 800952a:	4618      	mov	r0, r3
 800952c:	f002 f8e3 	bl	800b6f6 <HAL_SYSTICK_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e00e      	b.n	8009558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b0f      	cmp	r3, #15
 800953e:	d80a      	bhi.n	8009556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009540:	2200      	movs	r2, #0
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	f002 f8ad 	bl	800b6a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800954c:	4a06      	ldr	r2, [pc, #24]	@ (8009568 <HAL_InitTick+0x68>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	e000      	b.n	8009558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	24000010 	.word	0x24000010
 8009564:	24000004 	.word	0x24000004
 8009568:	2400000c 	.word	0x2400000c

0800956c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <HAL_IncTick+0x20>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <HAL_IncTick+0x24>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4413      	add	r3, r2
 800957c:	4a04      	ldr	r2, [pc, #16]	@ (8009590 <HAL_IncTick+0x24>)
 800957e:	6013      	str	r3, [r2, #0]
}
 8009580:	bf00      	nop
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	24000010 	.word	0x24000010
 8009590:	24000544 	.word	0x24000544

08009594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  return uwTick;
 8009598:	4b03      	ldr	r3, [pc, #12]	@ (80095a8 <HAL_GetTick+0x14>)
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	24000544 	.word	0x24000544

080095ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095b4:	f7ff ffee 	bl	8009594 <HAL_GetTick>
 80095b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d005      	beq.n	80095d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095c6:	4b0a      	ldr	r3, [pc, #40]	@ (80095f0 <HAL_Delay+0x44>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095d2:	bf00      	nop
 80095d4:	f7ff ffde 	bl	8009594 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d8f7      	bhi.n	80095d4 <HAL_Delay+0x28>
  {
  }
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	24000010 	.word	0x24000010

080095f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	609a      	str	r2, [r3, #8]
}
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a18      	ldr	r2, [pc, #96]	@ (80096cc <LL_ADC_SetChannelPreselection+0x70>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d027      	beq.n	80096be <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009674:	2b00      	cmp	r3, #0
 8009676:	d107      	bne.n	8009688 <LL_ADC_SetChannelPreselection+0x2c>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	0e9b      	lsrs	r3, r3, #26
 800967c:	f003 031f 	and.w	r3, r3, #31
 8009680:	2201      	movs	r2, #1
 8009682:	fa02 f303 	lsl.w	r3, r2, r3
 8009686:	e015      	b.n	80096b4 <LL_ADC_SetChannelPreselection+0x58>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	fa93 f3a3 	rbit	r3, r3
 8009692:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800969e:	2320      	movs	r3, #32
 80096a0:	e003      	b.n	80096aa <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	fab3 f383 	clz	r3, r3
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 031f 	and.w	r3, r3, #31
 80096ae:	2201      	movs	r2, #1
 80096b0:	fa02 f303 	lsl.w	r3, r2, r3
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	69d2      	ldr	r2, [r2, #28]
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80096be:	bf00      	nop
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	58026000 	.word	0x58026000

080096d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3360      	adds	r3, #96	@ 0x60
 80096e2:	461a      	mov	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a10      	ldr	r2, [pc, #64]	@ (8009730 <LL_ADC_SetOffset+0x60>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d10b      	bne.n	800970c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	4313      	orrs	r3, r2
 8009702:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800970a:	e00b      	b.n	8009724 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	430b      	orrs	r3, r1
 800971e:	431a      	orrs	r2, r3
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	601a      	str	r2, [r3, #0]
}
 8009724:	bf00      	nop
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	58026000 	.word	0x58026000

08009734 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3360      	adds	r3, #96	@ 0x60
 8009742:	461a      	mov	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f003 031f 	and.w	r3, r3, #31
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	fa01 f303 	lsl.w	r3, r1, r3
 8009780:	431a      	orrs	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	611a      	str	r2, [r3, #16]
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
	...

08009794 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4a0c      	ldr	r2, [pc, #48]	@ (80097d4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00e      	beq.n	80097c6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3360      	adds	r3, #96	@ 0x60
 80097ac:	461a      	mov	r2, r3
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	601a      	str	r2, [r3, #0]
  }
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	58026000 	.word	0x58026000

080097d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009818 <LL_ADC_SetOffsetSaturation+0x40>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d10e      	bne.n	800980a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3360      	adds	r3, #96	@ 0x60
 80097f0:	461a      	mov	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	431a      	orrs	r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	58026000 	.word	0x58026000

0800981c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4a0c      	ldr	r2, [pc, #48]	@ (800985c <LL_ADC_SetOffsetSign+0x40>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10e      	bne.n	800984e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3360      	adds	r3, #96	@ 0x60
 8009834:	461a      	mov	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	431a      	orrs	r2, r3
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	58026000 	.word	0x58026000

08009860 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3360      	adds	r3, #96	@ 0x60
 8009870:	461a      	mov	r2, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a0c      	ldr	r2, [pc, #48]	@ (80098b0 <LL_ADC_SetOffsetState+0x50>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d108      	bne.n	8009894 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	431a      	orrs	r2, r3
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009892:	e007      	b.n	80098a4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	431a      	orrs	r2, r3
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	601a      	str	r2, [r3, #0]
}
 80098a4:	bf00      	nop
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	58026000 	.word	0x58026000

080098b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e000      	b.n	80098ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80098da:	b480      	push	{r7}
 80098dc:	b087      	sub	sp, #28
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3330      	adds	r3, #48	@ 0x30
 80098ea:	461a      	mov	r2, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	f003 030c 	and.w	r3, r3, #12
 80098f6:	4413      	add	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f003 031f 	and.w	r3, r3, #31
 8009904:	211f      	movs	r1, #31
 8009906:	fa01 f303 	lsl.w	r3, r1, r3
 800990a:	43db      	mvns	r3, r3
 800990c:	401a      	ands	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	0e9b      	lsrs	r3, r3, #26
 8009912:	f003 011f 	and.w	r1, r3, #31
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f003 031f 	and.w	r3, r3, #31
 800991c:	fa01 f303 	lsl.w	r3, r1, r3
 8009920:	431a      	orrs	r2, r3
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009926:	bf00      	nop
 8009928:	371c      	adds	r7, #28
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f023 0203 	bic.w	r2, r3, #3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60da      	str	r2, [r3, #12]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f043 0201 	orr.w	r2, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	60da      	str	r2, [r3, #12]
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a08      	ldr	r2, [pc, #32]	@ (80099a8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d107      	bne.n	800999a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f023 0203 	bic.w	r2, r3, #3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60da      	str	r2, [r3, #12]
  }
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	58026000 	.word	0x58026000

080099ac <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099b8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b087      	sub	sp, #28
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3314      	adds	r3, #20
 80099e2:	461a      	mov	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	0e5b      	lsrs	r3, r3, #25
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	f003 0304 	and.w	r3, r3, #4
 80099ee:	4413      	add	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	0d1b      	lsrs	r3, r3, #20
 80099fa:	f003 031f 	and.w	r3, r3, #31
 80099fe:	2107      	movs	r1, #7
 8009a00:	fa01 f303 	lsl.w	r3, r1, r3
 8009a04:	43db      	mvns	r3, r3
 8009a06:	401a      	ands	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	0d1b      	lsrs	r3, r3, #20
 8009a0c:	f003 031f 	and.w	r3, r3, #31
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	fa01 f303 	lsl.w	r3, r1, r3
 8009a16:	431a      	orrs	r2, r3
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009a1c:	bf00      	nop
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d115      	bne.n	8009a68 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a48:	43db      	mvns	r3, r3
 8009a4a:	401a      	ands	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f003 0318 	and.w	r3, r3, #24
 8009a52:	4914      	ldr	r1, [pc, #80]	@ (8009aa4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a54:	40d9      	lsrs	r1, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	400b      	ands	r3, r1
 8009a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009a66:	e014      	b.n	8009a92 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a74:	43db      	mvns	r3, r3
 8009a76:	401a      	ands	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f003 0318 	and.w	r3, r3, #24
 8009a7e:	4909      	ldr	r1, [pc, #36]	@ (8009aa4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a80:	40d9      	lsrs	r1, r3
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	400b      	ands	r3, r1
 8009a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009a92:	bf00      	nop
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	58026000 	.word	0x58026000
 8009aa4:	000fffff 	.word	0x000fffff

08009aa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 031f 	and.w	r3, r3, #31
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	4b04      	ldr	r3, [pc, #16]	@ (8009b00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6093      	str	r3, [r2, #8]
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	5fffffc0 	.word	0x5fffffc0

08009b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b18:	d101      	bne.n	8009b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <LL_ADC_EnableInternalRegulator+0x24>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	6fffffc0 	.word	0x6fffffc0

08009b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b68:	d101      	bne.n	8009b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <LL_ADC_Enable+0x24>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	f043 0201 	orr.w	r2, r3, #1
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	7fffffc0 	.word	0x7fffffc0

08009ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d101      	bne.n	8009bbc <LL_ADC_IsEnabled+0x18>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e000      	b.n	8009bbe <LL_ADC_IsEnabled+0x1a>
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	4b05      	ldr	r3, [pc, #20]	@ (8009bf0 <LL_ADC_REG_StartConversion+0x24>)
 8009bda:	4013      	ands	r3, r2
 8009bdc:	f043 0204 	orr.w	r2, r3, #4
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	7fffffc0 	.word	0x7fffffc0

08009bf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d101      	bne.n	8009c0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e000      	b.n	8009c0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f003 0308 	and.w	r3, r3, #8
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d101      	bne.n	8009c32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b089      	sub	sp, #36	@ 0x24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e1ee      	b.n	800a038 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d109      	bne.n	8009c7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7f9 fd25 	bl	80036b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff ff3f 	bl	8009b04 <LL_ADC_IsDeepPowerDownEnabled>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff ff25 	bl	8009ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ff5a 	bl	8009b54 <LL_ADC_IsInternalRegulatorEnabled>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d114      	bne.n	8009cd0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff ff3e 	bl	8009b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8009eec <HAL_ADC_Init+0x2ac>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	099b      	lsrs	r3, r3, #6
 8009cb6:	4a8e      	ldr	r2, [pc, #568]	@ (8009ef0 <HAL_ADC_Init+0x2b0>)
 8009cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbc:	099b      	lsrs	r3, r3, #6
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009cc2:	e002      	b.n	8009cca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f9      	bne.n	8009cc4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff ff3d 	bl	8009b54 <LL_ADC_IsInternalRegulatorEnabled>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10d      	bne.n	8009cfc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ce4:	f043 0210 	orr.w	r2, r3, #16
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cf0:	f043 0201 	orr.w	r2, r3, #1
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff ff77 	bl	8009bf4 <LL_ADC_REG_IsConversionOngoing>
 8009d06:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f040 8188 	bne.w	800a026 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f040 8184 	bne.w	800a026 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d22:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009d26:	f043 0202 	orr.w	r2, r3, #2
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff ff36 	bl	8009ba4 <LL_ADC_IsEnabled>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d136      	bne.n	8009dac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a6c      	ldr	r2, [pc, #432]	@ (8009ef4 <HAL_ADC_Init+0x2b4>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d004      	beq.n	8009d52 <HAL_ADC_Init+0x112>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8009ef8 <HAL_ADC_Init+0x2b8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d10e      	bne.n	8009d70 <HAL_ADC_Init+0x130>
 8009d52:	4868      	ldr	r0, [pc, #416]	@ (8009ef4 <HAL_ADC_Init+0x2b4>)
 8009d54:	f7ff ff26 	bl	8009ba4 <LL_ADC_IsEnabled>
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4867      	ldr	r0, [pc, #412]	@ (8009ef8 <HAL_ADC_Init+0x2b8>)
 8009d5c:	f7ff ff22 	bl	8009ba4 <LL_ADC_IsEnabled>
 8009d60:	4603      	mov	r3, r0
 8009d62:	4323      	orrs	r3, r4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bf0c      	ite	eq
 8009d68:	2301      	moveq	r3, #1
 8009d6a:	2300      	movne	r3, #0
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	e008      	b.n	8009d82 <HAL_ADC_Init+0x142>
 8009d70:	4862      	ldr	r0, [pc, #392]	@ (8009efc <HAL_ADC_Init+0x2bc>)
 8009d72:	f7ff ff17 	bl	8009ba4 <LL_ADC_IsEnabled>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2301      	moveq	r3, #1
 8009d7e:	2300      	movne	r3, #0
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d012      	beq.n	8009dac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8009ef4 <HAL_ADC_Init+0x2b4>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d004      	beq.n	8009d9a <HAL_ADC_Init+0x15a>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a58      	ldr	r2, [pc, #352]	@ (8009ef8 <HAL_ADC_Init+0x2b8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d101      	bne.n	8009d9e <HAL_ADC_Init+0x15e>
 8009d9a:	4a59      	ldr	r2, [pc, #356]	@ (8009f00 <HAL_ADC_Init+0x2c0>)
 8009d9c:	e000      	b.n	8009da0 <HAL_ADC_Init+0x160>
 8009d9e:	4a59      	ldr	r2, [pc, #356]	@ (8009f04 <HAL_ADC_Init+0x2c4>)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7ff fc24 	bl	80095f4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a52      	ldr	r2, [pc, #328]	@ (8009efc <HAL_ADC_Init+0x2bc>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d129      	bne.n	8009e0a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7e5b      	ldrb	r3, [r3, #25]
 8009dba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009dc0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009dc6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d013      	beq.n	8009df8 <HAL_ADC_Init+0x1b8>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	2b0c      	cmp	r3, #12
 8009dd6:	d00d      	beq.n	8009df4 <HAL_ADC_Init+0x1b4>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2b1c      	cmp	r3, #28
 8009dde:	d007      	beq.n	8009df0 <HAL_ADC_Init+0x1b0>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	2b18      	cmp	r3, #24
 8009de6:	d101      	bne.n	8009dec <HAL_ADC_Init+0x1ac>
 8009de8:	2318      	movs	r3, #24
 8009dea:	e006      	b.n	8009dfa <HAL_ADC_Init+0x1ba>
 8009dec:	2300      	movs	r3, #0
 8009dee:	e004      	b.n	8009dfa <HAL_ADC_Init+0x1ba>
 8009df0:	2310      	movs	r3, #16
 8009df2:	e002      	b.n	8009dfa <HAL_ADC_Init+0x1ba>
 8009df4:	2308      	movs	r3, #8
 8009df6:	e000      	b.n	8009dfa <HAL_ADC_Init+0x1ba>
 8009df8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009dfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009e04:	4313      	orrs	r3, r2
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	e00e      	b.n	8009e28 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7e5b      	ldrb	r3, [r3, #25]
 8009e0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009e14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009e1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009e24:	4313      	orrs	r3, r2
 8009e26:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d106      	bne.n	8009e40 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e36:	3b01      	subs	r3, #1
 8009e38:	045b      	lsls	r3, r3, #17
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a26      	ldr	r2, [pc, #152]	@ (8009efc <HAL_ADC_Init+0x2bc>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d115      	bne.n	8009e92 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	4b26      	ldr	r3, [pc, #152]	@ (8009f08 <HAL_ADC_Init+0x2c8>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	430b      	orrs	r3, r1
 8009e78:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	611a      	str	r2, [r3, #16]
 8009e90:	e009      	b.n	8009ea6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68da      	ldr	r2, [r3, #12]
 8009e98:	4b1c      	ldr	r3, [pc, #112]	@ (8009f0c <HAL_ADC_Init+0x2cc>)
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	69b9      	ldr	r1, [r7, #24]
 8009ea2:	430b      	orrs	r3, r1
 8009ea4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fea2 	bl	8009bf4 <LL_ADC_REG_IsConversionOngoing>
 8009eb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff feaf 	bl	8009c1a <LL_ADC_INJ_IsConversionOngoing>
 8009ebc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f040 808e 	bne.w	8009fe2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 808a 	bne.w	8009fe2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8009efc <HAL_ADC_Init+0x2bc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d11b      	bne.n	8009f10 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7e1b      	ldrb	r3, [r3, #24]
 8009edc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009ee4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	e018      	b.n	8009f1e <HAL_ADC_Init+0x2de>
 8009eec:	24000004 	.word	0x24000004
 8009ef0:	053e2d63 	.word	0x053e2d63
 8009ef4:	40022000 	.word	0x40022000
 8009ef8:	40022100 	.word	0x40022100
 8009efc:	58026000 	.word	0x58026000
 8009f00:	40022300 	.word	0x40022300
 8009f04:	58026300 	.word	0x58026300
 8009f08:	fff04007 	.word	0xfff04007
 8009f0c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	7e1b      	ldrb	r3, [r3, #24]
 8009f14:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68da      	ldr	r2, [r3, #12]
 8009f24:	4b46      	ldr	r3, [pc, #280]	@ (800a040 <HAL_ADC_Init+0x400>)
 8009f26:	4013      	ands	r3, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6812      	ldr	r2, [r2, #0]
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	430b      	orrs	r3, r1
 8009f30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d137      	bne.n	8009fac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a3f      	ldr	r2, [pc, #252]	@ (800a044 <HAL_ADC_Init+0x404>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d116      	bne.n	8009f7a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	691a      	ldr	r2, [r3, #16]
 8009f52:	4b3d      	ldr	r3, [pc, #244]	@ (800a048 <HAL_ADC_Init+0x408>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f5e:	4311      	orrs	r1, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f64:	4311      	orrs	r1, r2
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0201 	orr.w	r2, r2, #1
 8009f76:	611a      	str	r2, [r3, #16]
 8009f78:	e020      	b.n	8009fbc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	691a      	ldr	r2, [r3, #16]
 8009f80:	4b32      	ldr	r3, [pc, #200]	@ (800a04c <HAL_ADC_Init+0x40c>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f88:	3a01      	subs	r2, #1
 8009f8a:	0411      	lsls	r1, r2, #16
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f90:	4311      	orrs	r1, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f96:	4311      	orrs	r1, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f042 0201 	orr.w	r2, r2, #1
 8009fa8:	611a      	str	r2, [r3, #16]
 8009faa:	e007      	b.n	8009fbc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691a      	ldr	r2, [r3, #16]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f022 0201 	bic.w	r2, r2, #1
 8009fba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1b      	ldr	r2, [pc, #108]	@ (800a044 <HAL_ADC_Init+0x404>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d002      	beq.n	8009fe2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 f967 	bl	800b2b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d10c      	bne.n	800a004 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff0:	f023 010f 	bic.w	r1, r3, #15
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	1e5a      	subs	r2, r3, #1
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	631a      	str	r2, [r3, #48]	@ 0x30
 800a002:	e007      	b.n	800a014 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 020f 	bic.w	r2, r2, #15
 800a012:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a018:	f023 0303 	bic.w	r3, r3, #3
 800a01c:	f043 0201 	orr.w	r2, r3, #1
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	661a      	str	r2, [r3, #96]	@ 0x60
 800a024:	e007      	b.n	800a036 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a02a:	f043 0210 	orr.w	r2, r3, #16
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a036:	7ffb      	ldrb	r3, [r7, #31]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3724      	adds	r7, #36	@ 0x24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd90      	pop	{r4, r7, pc}
 800a040:	ffffbffc 	.word	0xffffbffc
 800a044:	58026000 	.word	0x58026000
 800a048:	fc00f81f 	.word	0xfc00f81f
 800a04c:	fc00f81e 	.word	0xfc00f81e

0800a050 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a60      	ldr	r2, [pc, #384]	@ (800a1e4 <HAL_ADC_Start_DMA+0x194>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d004      	beq.n	800a070 <HAL_ADC_Start_DMA+0x20>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a5f      	ldr	r2, [pc, #380]	@ (800a1e8 <HAL_ADC_Start_DMA+0x198>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d101      	bne.n	800a074 <HAL_ADC_Start_DMA+0x24>
 800a070:	4b5e      	ldr	r3, [pc, #376]	@ (800a1ec <HAL_ADC_Start_DMA+0x19c>)
 800a072:	e000      	b.n	800a076 <HAL_ADC_Start_DMA+0x26>
 800a074:	4b5e      	ldr	r3, [pc, #376]	@ (800a1f0 <HAL_ADC_Start_DMA+0x1a0>)
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff fd16 	bl	8009aa8 <LL_ADC_GetMultimode>
 800a07c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff fdb6 	bl	8009bf4 <LL_ADC_REG_IsConversionOngoing>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f040 80a2 	bne.w	800a1d4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_ADC_Start_DMA+0x4e>
 800a09a:	2302      	movs	r3, #2
 800a09c:	e09d      	b.n	800a1da <HAL_ADC_Start_DMA+0x18a>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d006      	beq.n	800a0ba <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	d003      	beq.n	800a0ba <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b09      	cmp	r3, #9
 800a0b6:	f040 8086 	bne.w	800a1c6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 ffda 	bl	800b074 <ADC_Enable>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d178      	bne.n	800a1bc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a0ce:	4b49      	ldr	r3, [pc, #292]	@ (800a1f4 <HAL_ADC_Start_DMA+0x1a4>)
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a42      	ldr	r2, [pc, #264]	@ (800a1e8 <HAL_ADC_Start_DMA+0x198>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d002      	beq.n	800a0ea <HAL_ADC_Start_DMA+0x9a>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	e000      	b.n	800a0ec <HAL_ADC_Start_DMA+0x9c>
 800a0ea:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e4 <HAL_ADC_Start_DMA+0x194>)
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d002      	beq.n	800a0fa <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a10a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d006      	beq.n	800a120 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a116:	f023 0206 	bic.w	r2, r3, #6
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	665a      	str	r2, [r3, #100]	@ 0x64
 800a11e:	e002      	b.n	800a126 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a12a:	4a33      	ldr	r2, [pc, #204]	@ (800a1f8 <HAL_ADC_Start_DMA+0x1a8>)
 800a12c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a132:	4a32      	ldr	r2, [pc, #200]	@ (800a1fc <HAL_ADC_Start_DMA+0x1ac>)
 800a134:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a13a:	4a31      	ldr	r2, [pc, #196]	@ (800a200 <HAL_ADC_Start_DMA+0x1b0>)
 800a13c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	221c      	movs	r2, #28
 800a144:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0210 	orr.w	r2, r2, #16
 800a15c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a28      	ldr	r2, [pc, #160]	@ (800a204 <HAL_ADC_Start_DMA+0x1b4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d10f      	bne.n	800a188 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7ff fbfe 	bl	8009978 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fbe9 	bl	8009958 <LL_ADC_EnableDMAReq>
 800a186:	e007      	b.n	800a198 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7ff fbcd 	bl	8009932 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3340      	adds	r3, #64	@ 0x40
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f001 fe82 	bl	800beb0 <HAL_DMA_Start_IT>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fd09 	bl	8009bcc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a1ba:	e00d      	b.n	800a1d8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a1c4:	e008      	b.n	800a1d8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a1d2:	e001      	b.n	800a1d8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	40022000 	.word	0x40022000
 800a1e8:	40022100 	.word	0x40022100
 800a1ec:	40022300 	.word	0x40022300
 800a1f0:	58026300 	.word	0x58026300
 800a1f4:	fffff0fe 	.word	0xfffff0fe
 800a1f8:	0800b189 	.word	0x0800b189
 800a1fc:	0800b261 	.word	0x0800b261
 800a200:	0800b27d 	.word	0x0800b27d
 800a204:	58026000 	.word	0x58026000

0800a208 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08a      	sub	sp, #40	@ 0x28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a210:	2300      	movs	r3, #0
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a87      	ldr	r2, [pc, #540]	@ (800a448 <HAL_ADC_IRQHandler+0x240>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d004      	beq.n	800a238 <HAL_ADC_IRQHandler+0x30>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a86      	ldr	r2, [pc, #536]	@ (800a44c <HAL_ADC_IRQHandler+0x244>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d101      	bne.n	800a23c <HAL_ADC_IRQHandler+0x34>
 800a238:	4b85      	ldr	r3, [pc, #532]	@ (800a450 <HAL_ADC_IRQHandler+0x248>)
 800a23a:	e000      	b.n	800a23e <HAL_ADC_IRQHandler+0x36>
 800a23c:	4b85      	ldr	r3, [pc, #532]	@ (800a454 <HAL_ADC_IRQHandler+0x24c>)
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff fc32 	bl	8009aa8 <LL_ADC_GetMultimode>
 800a244:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d017      	beq.n	800a280 <HAL_ADC_IRQHandler+0x78>
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d012      	beq.n	800a280 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a25e:	f003 0310 	and.w	r3, r3, #16
 800a262:	2b00      	cmp	r3, #0
 800a264:	d105      	bne.n	800a272 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a26a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f932 	bl	800b4dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2202      	movs	r2, #2
 800a27e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	f003 0304 	and.w	r3, r3, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	d004      	beq.n	800a294 <HAL_ADC_IRQHandler+0x8c>
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 8083 	beq.w	800a3a6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	f003 0308 	and.w	r3, r3, #8
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d07d      	beq.n	800a3a6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ae:	f003 0310 	and.w	r3, r3, #16
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d105      	bne.n	800a2c2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff faf4 	bl	80098b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d062      	beq.n	800a398 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a5d      	ldr	r2, [pc, #372]	@ (800a44c <HAL_ADC_IRQHandler+0x244>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d002      	beq.n	800a2e2 <HAL_ADC_IRQHandler+0xda>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	e000      	b.n	800a2e4 <HAL_ADC_IRQHandler+0xdc>
 800a2e2:	4b59      	ldr	r3, [pc, #356]	@ (800a448 <HAL_ADC_IRQHandler+0x240>)
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	6812      	ldr	r2, [r2, #0]
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d008      	beq.n	800a2fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d005      	beq.n	800a2fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b05      	cmp	r3, #5
 800a2f6:	d002      	beq.n	800a2fe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d104      	bne.n	800a308 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	623b      	str	r3, [r7, #32]
 800a306:	e00c      	b.n	800a322 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a4f      	ldr	r2, [pc, #316]	@ (800a44c <HAL_ADC_IRQHandler+0x244>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d002      	beq.n	800a318 <HAL_ADC_IRQHandler+0x110>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	e000      	b.n	800a31a <HAL_ADC_IRQHandler+0x112>
 800a318:	4b4b      	ldr	r3, [pc, #300]	@ (800a448 <HAL_ADC_IRQHandler+0x240>)
 800a31a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d135      	bne.n	800a398 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	2b08      	cmp	r3, #8
 800a338:	d12e      	bne.n	800a398 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fc58 	bl	8009bf4 <LL_ADC_REG_IsConversionOngoing>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d11a      	bne.n	800a380 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 020c 	bic.w	r2, r2, #12
 800a358:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a35e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a36a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d112      	bne.n	800a398 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a376:	f043 0201 	orr.w	r2, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a37e:	e00b      	b.n	800a398 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a384:	f043 0210 	orr.w	r2, r3, #16
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a390:	f043 0201 	orr.w	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f96f 	bl	800a67c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	220c      	movs	r2, #12
 800a3a4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	f003 0320 	and.w	r3, r3, #32
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <HAL_ADC_IRQHandler+0x1b2>
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10b      	bne.n	800a3d2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 80a0 	beq.w	800a506 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 809a 	beq.w	800a506 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3e2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fadc 	bl	80099ac <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a3f4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fa5a 	bl	80098b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a400:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a11      	ldr	r2, [pc, #68]	@ (800a44c <HAL_ADC_IRQHandler+0x244>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d002      	beq.n	800a412 <HAL_ADC_IRQHandler+0x20a>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	e000      	b.n	800a414 <HAL_ADC_IRQHandler+0x20c>
 800a412:	4b0d      	ldr	r3, [pc, #52]	@ (800a448 <HAL_ADC_IRQHandler+0x240>)
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	6812      	ldr	r2, [r2, #0]
 800a418:	4293      	cmp	r3, r2
 800a41a:	d008      	beq.n	800a42e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b06      	cmp	r3, #6
 800a426:	d002      	beq.n	800a42e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2b07      	cmp	r3, #7
 800a42c:	d104      	bne.n	800a438 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	623b      	str	r3, [r7, #32]
 800a436:	e014      	b.n	800a462 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a03      	ldr	r2, [pc, #12]	@ (800a44c <HAL_ADC_IRQHandler+0x244>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00a      	beq.n	800a458 <HAL_ADC_IRQHandler+0x250>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	e008      	b.n	800a45a <HAL_ADC_IRQHandler+0x252>
 800a448:	40022000 	.word	0x40022000
 800a44c:	40022100 	.word	0x40022100
 800a450:	40022300 	.word	0x40022300
 800a454:	58026300 	.word	0x58026300
 800a458:	4b84      	ldr	r3, [pc, #528]	@ (800a66c <HAL_ADC_IRQHandler+0x464>)
 800a45a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d047      	beq.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <HAL_ADC_IRQHandler+0x27a>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d03f      	beq.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d13a      	bne.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a48c:	2b40      	cmp	r3, #64	@ 0x40
 800a48e:	d133      	bne.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d12e      	bne.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff fbbb 	bl	8009c1a <LL_ADC_INJ_IsConversionOngoing>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d11a      	bne.n	800a4e0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a4b8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d112      	bne.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4d6:	f043 0201 	orr.w	r2, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4de:	e00b      	b.n	800a4f8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4e4:	f043 0210 	orr.w	r2, r3, #16
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4f0:	f043 0201 	orr.w	r2, r3, #1
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 ffc7 	bl	800b48c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2260      	movs	r2, #96	@ 0x60
 800a504:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d011      	beq.n	800a534 <HAL_ADC_IRQHandler+0x32c>
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00c      	beq.n	800a534 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a51e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f8bc 	bl	800a6a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2280      	movs	r2, #128	@ 0x80
 800a532:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d012      	beq.n	800a564 <HAL_ADC_IRQHandler+0x35c>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00d      	beq.n	800a564 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a54c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 ffad 	bl	800b4b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d012      	beq.n	800a594 <HAL_ADC_IRQHandler+0x38c>
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00d      	beq.n	800a594 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a57c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 ff9f 	bl	800b4c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a592:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f003 0310 	and.w	r3, r3, #16
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d043      	beq.n	800a626 <HAL_ADC_IRQHandler+0x41e>
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d03e      	beq.n	800a626 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5b4:	e021      	b.n	800a5fa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d015      	beq.n	800a5e8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a2a      	ldr	r2, [pc, #168]	@ (800a66c <HAL_ADC_IRQHandler+0x464>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d004      	beq.n	800a5d0 <HAL_ADC_IRQHandler+0x3c8>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a29      	ldr	r2, [pc, #164]	@ (800a670 <HAL_ADC_IRQHandler+0x468>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d101      	bne.n	800a5d4 <HAL_ADC_IRQHandler+0x3cc>
 800a5d0:	4b28      	ldr	r3, [pc, #160]	@ (800a674 <HAL_ADC_IRQHandler+0x46c>)
 800a5d2:	e000      	b.n	800a5d6 <HAL_ADC_IRQHandler+0x3ce>
 800a5d4:	4b28      	ldr	r3, [pc, #160]	@ (800a678 <HAL_ADC_IRQHandler+0x470>)
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fa74 	bl	8009ac4 <LL_ADC_GetMultiDMATransfer>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00b      	beq.n	800a5fa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5e6:	e008      	b.n	800a5fa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f003 0303 	and.w	r3, r3, #3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d10e      	bne.n	800a61e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a604:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a610:	f043 0202 	orr.w	r2, r3, #2
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f84d 	bl	800a6b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2210      	movs	r2, #16
 800a624:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d018      	beq.n	800a662 <HAL_ADC_IRQHandler+0x45a>
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a636:	2b00      	cmp	r3, #0
 800a638:	d013      	beq.n	800a662 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a63e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a64a:	f043 0208 	orr.w	r2, r3, #8
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a65a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 ff1f 	bl	800b4a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a662:	bf00      	nop
 800a664:	3728      	adds	r7, #40	@ 0x28
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	40022000 	.word	0x40022000
 800a670:	40022100 	.word	0x40022100
 800a674:	40022300 	.word	0x40022300
 800a678:	58026300 	.word	0x58026300

0800a67c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b0a5      	sub	sp, #148	@ 0x94
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6e6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	4aa4      	ldr	r2, [pc, #656]	@ (800a980 <HAL_ADC_ConfigChannel+0x2b4>)
 800a6ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d102      	bne.n	800a700 <HAL_ADC_ConfigChannel+0x34>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	f000 bca2 	b.w	800b044 <HAL_ADC_ConfigChannel+0x978>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff fa71 	bl	8009bf4 <LL_ADC_REG_IsConversionOngoing>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 8486 	bne.w	800b026 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	db31      	blt.n	800a786 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a97      	ldr	r2, [pc, #604]	@ (800a984 <HAL_ADC_ConfigChannel+0x2b8>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d02c      	beq.n	800a786 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a734:	2b00      	cmp	r3, #0
 800a736:	d108      	bne.n	800a74a <HAL_ADC_ConfigChannel+0x7e>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	0e9b      	lsrs	r3, r3, #26
 800a73e:	f003 031f 	and.w	r3, r3, #31
 800a742:	2201      	movs	r2, #1
 800a744:	fa02 f303 	lsl.w	r3, r2, r3
 800a748:	e016      	b.n	800a778 <HAL_ADC_ConfigChannel+0xac>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a752:	fa93 f3a3 	rbit	r3, r3
 800a756:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a75a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a75c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a762:	2320      	movs	r3, #32
 800a764:	e003      	b.n	800a76e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a766:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a768:	fab3 f383 	clz	r3, r3
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 031f 	and.w	r3, r3, #31
 800a772:	2201      	movs	r2, #1
 800a774:	fa02 f303 	lsl.w	r3, r2, r3
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	6812      	ldr	r2, [r2, #0]
 800a77c:	69d1      	ldr	r1, [r2, #28]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6812      	ldr	r2, [r2, #0]
 800a782:	430b      	orrs	r3, r1
 800a784:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6859      	ldr	r1, [r3, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7ff f8a1 	bl	80098da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fa29 	bl	8009bf4 <LL_ADC_REG_IsConversionOngoing>
 800a7a2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff fa35 	bl	8009c1a <LL_ADC_INJ_IsConversionOngoing>
 800a7b0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a7b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f040 824a 	bne.w	800ac52 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a7be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 8245 	bne.w	800ac52 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6818      	ldr	r0, [r3, #0]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	f7ff f8fc 	bl	80099d2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a69      	ldr	r2, [pc, #420]	@ (800a984 <HAL_ADC_ConfigChannel+0x2b8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d10d      	bne.n	800a800 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	08db      	lsrs	r3, r3, #3
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7fe:	e032      	b.n	800a866 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a800:	4b61      	ldr	r3, [pc, #388]	@ (800a988 <HAL_ADC_ConfigChannel+0x2bc>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a80c:	d10b      	bne.n	800a826 <HAL_ADC_ConfigChannel+0x15a>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	695a      	ldr	r2, [r3, #20]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	089b      	lsrs	r3, r3, #2
 800a81a:	f003 0307 	and.w	r3, r3, #7
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	fa02 f303 	lsl.w	r3, r2, r3
 800a824:	e01d      	b.n	800a862 <HAL_ADC_ConfigChannel+0x196>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f003 0310 	and.w	r3, r3, #16
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <HAL_ADC_ConfigChannel+0x180>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	089b      	lsrs	r3, r3, #2
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	fa02 f303 	lsl.w	r3, r2, r3
 800a84a:	e00a      	b.n	800a862 <HAL_ADC_ConfigChannel+0x196>
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	695a      	ldr	r2, [r3, #20]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	089b      	lsrs	r3, r3, #2
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d048      	beq.n	800a900 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	6919      	ldr	r1, [r3, #16]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a87e:	f7fe ff27 	bl	80096d0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a3f      	ldr	r2, [pc, #252]	@ (800a984 <HAL_ADC_ConfigChannel+0x2b8>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d119      	bne.n	800a8c0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	6919      	ldr	r1, [r3, #16]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	461a      	mov	r2, r3
 800a89a:	f7fe ffbf 	bl	800981c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	6919      	ldr	r1, [r3, #16]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d102      	bne.n	800a8b6 <HAL_ADC_ConfigChannel+0x1ea>
 800a8b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8b4:	e000      	b.n	800a8b8 <HAL_ADC_ConfigChannel+0x1ec>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f7fe ff8d 	bl	80097d8 <LL_ADC_SetOffsetSaturation>
 800a8be:	e1c8      	b.n	800ac52 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	6919      	ldr	r1, [r3, #16]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d102      	bne.n	800a8d8 <HAL_ADC_ConfigChannel+0x20c>
 800a8d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8d6:	e000      	b.n	800a8da <HAL_ADC_ConfigChannel+0x20e>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f7fe ff5a 	bl	8009794 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6818      	ldr	r0, [r3, #0]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	6919      	ldr	r1, [r3, #16]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	7e1b      	ldrb	r3, [r3, #24]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d102      	bne.n	800a8f6 <HAL_ADC_ConfigChannel+0x22a>
 800a8f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8f4:	e000      	b.n	800a8f8 <HAL_ADC_ConfigChannel+0x22c>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f7fe ff31 	bl	8009760 <LL_ADC_SetDataRightShift>
 800a8fe:	e1a8      	b.n	800ac52 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1f      	ldr	r2, [pc, #124]	@ (800a984 <HAL_ADC_ConfigChannel+0x2b8>)
 800a906:	4293      	cmp	r3, r2
 800a908:	f040 815b 	bne.w	800abc2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2100      	movs	r1, #0
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe ff0e 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800a918:	4603      	mov	r3, r0
 800a91a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10a      	bne.n	800a938 <HAL_ADC_ConfigChannel+0x26c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2100      	movs	r1, #0
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe ff03 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800a92e:	4603      	mov	r3, r0
 800a930:	0e9b      	lsrs	r3, r3, #26
 800a932:	f003 021f 	and.w	r2, r3, #31
 800a936:	e017      	b.n	800a968 <HAL_ADC_ConfigChannel+0x29c>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fef8 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800a944:	4603      	mov	r3, r0
 800a946:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a94a:	fa93 f3a3 	rbit	r3, r3
 800a94e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a952:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a95a:	2320      	movs	r3, #32
 800a95c:	e003      	b.n	800a966 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a95e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a960:	fab3 f383 	clz	r3, r3
 800a964:	b2db      	uxtb	r3, r3
 800a966:	461a      	mov	r2, r3
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <HAL_ADC_ConfigChannel+0x2c0>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	0e9b      	lsrs	r3, r3, #26
 800a97a:	f003 031f 	and.w	r3, r3, #31
 800a97e:	e017      	b.n	800a9b0 <HAL_ADC_ConfigChannel+0x2e4>
 800a980:	47ff0000 	.word	0x47ff0000
 800a984:	58026000 	.word	0x58026000
 800a988:	5c001000 	.word	0x5c001000
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a994:	fa93 f3a3 	rbit	r3, r3
 800a998:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a99a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a99c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a99e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	e003      	b.n	800a9b0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a9a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9aa:	fab3 f383 	clz	r3, r3
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d106      	bne.n	800a9c2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe ff4f 	bl	8009860 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe feb3 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <HAL_ADC_ConfigChannel+0x322>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2101      	movs	r1, #1
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fea8 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	0e9b      	lsrs	r3, r3, #26
 800a9e8:	f003 021f 	and.w	r2, r3, #31
 800a9ec:	e017      	b.n	800aa1e <HAL_ADC_ConfigChannel+0x352>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fe9d 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa00:	fa93 f3a3 	rbit	r3, r3
 800aa04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800aa06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800aa0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800aa10:	2320      	movs	r3, #32
 800aa12:	e003      	b.n	800aa1c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800aa14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa16:	fab3 f383 	clz	r3, r3
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d105      	bne.n	800aa36 <HAL_ADC_ConfigChannel+0x36a>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	0e9b      	lsrs	r3, r3, #26
 800aa30:	f003 031f 	and.w	r3, r3, #31
 800aa34:	e011      	b.n	800aa5a <HAL_ADC_ConfigChannel+0x38e>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa3e:	fa93 f3a3 	rbit	r3, r3
 800aa42:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800aa44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800aa48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800aa4e:	2320      	movs	r3, #32
 800aa50:	e003      	b.n	800aa5a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800aa52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa54:	fab3 f383 	clz	r3, r3
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d106      	bne.n	800aa6c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	2101      	movs	r1, #1
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fefa 	bl	8009860 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2102      	movs	r1, #2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fe5e 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <HAL_ADC_ConfigChannel+0x3cc>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2102      	movs	r1, #2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fe53 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	0e9b      	lsrs	r3, r3, #26
 800aa92:	f003 021f 	and.w	r2, r3, #31
 800aa96:	e017      	b.n	800aac8 <HAL_ADC_ConfigChannel+0x3fc>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2102      	movs	r1, #2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fe48 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	fa93 f3a3 	rbit	r3, r3
 800aaae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aaba:	2320      	movs	r3, #32
 800aabc:	e003      	b.n	800aac6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800aabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac0:	fab3 f383 	clz	r3, r3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	461a      	mov	r2, r3
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <HAL_ADC_ConfigChannel+0x414>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	0e9b      	lsrs	r3, r3, #26
 800aada:	f003 031f 	and.w	r3, r3, #31
 800aade:	e011      	b.n	800ab04 <HAL_ADC_ConfigChannel+0x438>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae8:	fa93 f3a3 	rbit	r3, r3
 800aaec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aaf8:	2320      	movs	r3, #32
 800aafa:	e003      	b.n	800ab04 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafe:	fab3 f383 	clz	r3, r3
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d106      	bne.n	800ab16 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2102      	movs	r1, #2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fea5 	bl	8009860 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2103      	movs	r1, #3
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe fe09 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0x476>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2103      	movs	r1, #3
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fdfe 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	0e9b      	lsrs	r3, r3, #26
 800ab3c:	f003 021f 	and.w	r2, r3, #31
 800ab40:	e017      	b.n	800ab72 <HAL_ADC_ConfigChannel+0x4a6>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2103      	movs	r1, #3
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe fdf3 	bl	8009734 <LL_ADC_GetOffsetChannel>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	fa93 f3a3 	rbit	r3, r3
 800ab58:	61fb      	str	r3, [r7, #28]
  return result;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ab64:	2320      	movs	r3, #32
 800ab66:	e003      	b.n	800ab70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ab68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6a:	fab3 f383 	clz	r3, r3
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	461a      	mov	r2, r3
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <HAL_ADC_ConfigChannel+0x4be>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	0e9b      	lsrs	r3, r3, #26
 800ab84:	f003 031f 	and.w	r3, r3, #31
 800ab88:	e011      	b.n	800abae <HAL_ADC_ConfigChannel+0x4e2>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	fa93 f3a3 	rbit	r3, r3
 800ab96:	613b      	str	r3, [r7, #16]
  return result;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800aba2:	2320      	movs	r3, #32
 800aba4:	e003      	b.n	800abae <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	fab3 f383 	clz	r3, r3
 800abac:	b2db      	uxtb	r3, r3
 800abae:	429a      	cmp	r2, r3
 800abb0:	d14f      	bne.n	800ac52 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2200      	movs	r2, #0
 800abb8:	2103      	movs	r1, #3
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fe50 	bl	8009860 <LL_ADC_SetOffsetState>
 800abc0:	e047      	b.n	800ac52 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	069b      	lsls	r3, r3, #26
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d107      	bne.n	800abe6 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abe4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	069b      	lsls	r3, r3, #26
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d107      	bne.n	800ac0a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac08:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	069b      	lsls	r3, r3, #26
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d107      	bne.n	800ac2e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac2c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	069b      	lsls	r3, r3, #26
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d107      	bne.n	800ac52 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac50:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe ffa4 	bl	8009ba4 <LL_ADC_IsEnabled>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f040 81ea 	bne.w	800b038 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	6819      	ldr	r1, [r3, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	461a      	mov	r2, r3
 800ac72:	f7fe fed9 	bl	8009a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	4a7a      	ldr	r2, [pc, #488]	@ (800ae64 <HAL_ADC_ConfigChannel+0x798>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	f040 80e0 	bne.w	800ae42 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4977      	ldr	r1, [pc, #476]	@ (800ae68 <HAL_ADC_ConfigChannel+0x79c>)
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	d147      	bne.n	800ad20 <HAL_ADC_ConfigChannel+0x654>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4975      	ldr	r1, [pc, #468]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7a0>)
 800ac96:	428b      	cmp	r3, r1
 800ac98:	d040      	beq.n	800ad1c <HAL_ADC_ConfigChannel+0x650>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4974      	ldr	r1, [pc, #464]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7a4>)
 800aca0:	428b      	cmp	r3, r1
 800aca2:	d039      	beq.n	800ad18 <HAL_ADC_ConfigChannel+0x64c>
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4972      	ldr	r1, [pc, #456]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7a8>)
 800acaa:	428b      	cmp	r3, r1
 800acac:	d032      	beq.n	800ad14 <HAL_ADC_ConfigChannel+0x648>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4971      	ldr	r1, [pc, #452]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7ac>)
 800acb4:	428b      	cmp	r3, r1
 800acb6:	d02b      	beq.n	800ad10 <HAL_ADC_ConfigChannel+0x644>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	496f      	ldr	r1, [pc, #444]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7b0>)
 800acbe:	428b      	cmp	r3, r1
 800acc0:	d024      	beq.n	800ad0c <HAL_ADC_ConfigChannel+0x640>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	496e      	ldr	r1, [pc, #440]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7b4>)
 800acc8:	428b      	cmp	r3, r1
 800acca:	d01d      	beq.n	800ad08 <HAL_ADC_ConfigChannel+0x63c>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	496c      	ldr	r1, [pc, #432]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7b8>)
 800acd2:	428b      	cmp	r3, r1
 800acd4:	d016      	beq.n	800ad04 <HAL_ADC_ConfigChannel+0x638>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	496b      	ldr	r1, [pc, #428]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7bc>)
 800acdc:	428b      	cmp	r3, r1
 800acde:	d00f      	beq.n	800ad00 <HAL_ADC_ConfigChannel+0x634>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4969      	ldr	r1, [pc, #420]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7c0>)
 800ace6:	428b      	cmp	r3, r1
 800ace8:	d008      	beq.n	800acfc <HAL_ADC_ConfigChannel+0x630>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4968      	ldr	r1, [pc, #416]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7c4>)
 800acf0:	428b      	cmp	r3, r1
 800acf2:	d101      	bne.n	800acf8 <HAL_ADC_ConfigChannel+0x62c>
 800acf4:	4b67      	ldr	r3, [pc, #412]	@ (800ae94 <HAL_ADC_ConfigChannel+0x7c8>)
 800acf6:	e0a0      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e09e      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800acfc:	4b66      	ldr	r3, [pc, #408]	@ (800ae98 <HAL_ADC_ConfigChannel+0x7cc>)
 800acfe:	e09c      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad00:	4b66      	ldr	r3, [pc, #408]	@ (800ae9c <HAL_ADC_ConfigChannel+0x7d0>)
 800ad02:	e09a      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad04:	4b60      	ldr	r3, [pc, #384]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad06:	e098      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad08:	4b5e      	ldr	r3, [pc, #376]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad0a:	e096      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad0c:	4b64      	ldr	r3, [pc, #400]	@ (800aea0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad0e:	e094      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad10:	4b64      	ldr	r3, [pc, #400]	@ (800aea4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ad12:	e092      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad14:	4b64      	ldr	r3, [pc, #400]	@ (800aea8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad16:	e090      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad18:	4b64      	ldr	r3, [pc, #400]	@ (800aeac <HAL_ADC_ConfigChannel+0x7e0>)
 800ad1a:	e08e      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e08c      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4962      	ldr	r1, [pc, #392]	@ (800aeb0 <HAL_ADC_ConfigChannel+0x7e4>)
 800ad26:	428b      	cmp	r3, r1
 800ad28:	d140      	bne.n	800adac <HAL_ADC_ConfigChannel+0x6e0>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	494f      	ldr	r1, [pc, #316]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7a0>)
 800ad30:	428b      	cmp	r3, r1
 800ad32:	d039      	beq.n	800ada8 <HAL_ADC_ConfigChannel+0x6dc>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	494d      	ldr	r1, [pc, #308]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad3a:	428b      	cmp	r3, r1
 800ad3c:	d032      	beq.n	800ada4 <HAL_ADC_ConfigChannel+0x6d8>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	494c      	ldr	r1, [pc, #304]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7a8>)
 800ad44:	428b      	cmp	r3, r1
 800ad46:	d02b      	beq.n	800ada0 <HAL_ADC_ConfigChannel+0x6d4>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	494a      	ldr	r1, [pc, #296]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7ac>)
 800ad4e:	428b      	cmp	r3, r1
 800ad50:	d024      	beq.n	800ad9c <HAL_ADC_ConfigChannel+0x6d0>
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4949      	ldr	r1, [pc, #292]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7b0>)
 800ad58:	428b      	cmp	r3, r1
 800ad5a:	d01d      	beq.n	800ad98 <HAL_ADC_ConfigChannel+0x6cc>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4947      	ldr	r1, [pc, #284]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad62:	428b      	cmp	r3, r1
 800ad64:	d016      	beq.n	800ad94 <HAL_ADC_ConfigChannel+0x6c8>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4946      	ldr	r1, [pc, #280]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad6c:	428b      	cmp	r3, r1
 800ad6e:	d00f      	beq.n	800ad90 <HAL_ADC_ConfigChannel+0x6c4>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4944      	ldr	r1, [pc, #272]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad76:	428b      	cmp	r3, r1
 800ad78:	d008      	beq.n	800ad8c <HAL_ADC_ConfigChannel+0x6c0>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4944      	ldr	r1, [pc, #272]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7c4>)
 800ad80:	428b      	cmp	r3, r1
 800ad82:	d101      	bne.n	800ad88 <HAL_ADC_ConfigChannel+0x6bc>
 800ad84:	4b43      	ldr	r3, [pc, #268]	@ (800ae94 <HAL_ADC_ConfigChannel+0x7c8>)
 800ad86:	e058      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e056      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad8c:	4b43      	ldr	r3, [pc, #268]	@ (800ae9c <HAL_ADC_ConfigChannel+0x7d0>)
 800ad8e:	e054      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad90:	4b3d      	ldr	r3, [pc, #244]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad92:	e052      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad94:	4b3b      	ldr	r3, [pc, #236]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad96:	e050      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad98:	4b41      	ldr	r3, [pc, #260]	@ (800aea0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad9a:	e04e      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ad9c:	4b41      	ldr	r3, [pc, #260]	@ (800aea4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ad9e:	e04c      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ada0:	4b41      	ldr	r3, [pc, #260]	@ (800aea8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ada2:	e04a      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ada4:	4b41      	ldr	r3, [pc, #260]	@ (800aeac <HAL_ADC_ConfigChannel+0x7e0>)
 800ada6:	e048      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e046      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4940      	ldr	r1, [pc, #256]	@ (800aeb4 <HAL_ADC_ConfigChannel+0x7e8>)
 800adb2:	428b      	cmp	r3, r1
 800adb4:	d140      	bne.n	800ae38 <HAL_ADC_ConfigChannel+0x76c>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	492c      	ldr	r1, [pc, #176]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7a0>)
 800adbc:	428b      	cmp	r3, r1
 800adbe:	d039      	beq.n	800ae34 <HAL_ADC_ConfigChannel+0x768>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	492a      	ldr	r1, [pc, #168]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7a4>)
 800adc6:	428b      	cmp	r3, r1
 800adc8:	d032      	beq.n	800ae30 <HAL_ADC_ConfigChannel+0x764>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4929      	ldr	r1, [pc, #164]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7a8>)
 800add0:	428b      	cmp	r3, r1
 800add2:	d02b      	beq.n	800ae2c <HAL_ADC_ConfigChannel+0x760>
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4927      	ldr	r1, [pc, #156]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7ac>)
 800adda:	428b      	cmp	r3, r1
 800addc:	d024      	beq.n	800ae28 <HAL_ADC_ConfigChannel+0x75c>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4926      	ldr	r1, [pc, #152]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7b0>)
 800ade4:	428b      	cmp	r3, r1
 800ade6:	d01d      	beq.n	800ae24 <HAL_ADC_ConfigChannel+0x758>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4924      	ldr	r1, [pc, #144]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7b4>)
 800adee:	428b      	cmp	r3, r1
 800adf0:	d016      	beq.n	800ae20 <HAL_ADC_ConfigChannel+0x754>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4923      	ldr	r1, [pc, #140]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7b8>)
 800adf8:	428b      	cmp	r3, r1
 800adfa:	d00f      	beq.n	800ae1c <HAL_ADC_ConfigChannel+0x750>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4926      	ldr	r1, [pc, #152]	@ (800ae9c <HAL_ADC_ConfigChannel+0x7d0>)
 800ae02:	428b      	cmp	r3, r1
 800ae04:	d008      	beq.n	800ae18 <HAL_ADC_ConfigChannel+0x74c>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	492b      	ldr	r1, [pc, #172]	@ (800aeb8 <HAL_ADC_ConfigChannel+0x7ec>)
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	d101      	bne.n	800ae14 <HAL_ADC_ConfigChannel+0x748>
 800ae10:	4b2a      	ldr	r3, [pc, #168]	@ (800aebc <HAL_ADC_ConfigChannel+0x7f0>)
 800ae12:	e012      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae14:	2300      	movs	r3, #0
 800ae16:	e010      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae18:	4b27      	ldr	r3, [pc, #156]	@ (800aeb8 <HAL_ADC_ConfigChannel+0x7ec>)
 800ae1a:	e00e      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7bc>)
 800ae1e:	e00c      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae20:	4b18      	ldr	r3, [pc, #96]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7b8>)
 800ae22:	e00a      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae24:	4b1e      	ldr	r3, [pc, #120]	@ (800aea0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ae26:	e008      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae28:	4b1e      	ldr	r3, [pc, #120]	@ (800aea4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ae2a:	e006      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae2c:	4b1e      	ldr	r3, [pc, #120]	@ (800aea8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ae2e:	e004      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae30:	4b1e      	ldr	r3, [pc, #120]	@ (800aeac <HAL_ADC_ConfigChannel+0x7e0>)
 800ae32:	e002      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae34:	2301      	movs	r3, #1
 800ae36:	e000      	b.n	800ae3a <HAL_ADC_ConfigChannel+0x76e>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7fe fc0d 	bl	800965c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f280 80f6 	bge.w	800b038 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a05      	ldr	r2, [pc, #20]	@ (800ae68 <HAL_ADC_ConfigChannel+0x79c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d004      	beq.n	800ae60 <HAL_ADC_ConfigChannel+0x794>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <HAL_ADC_ConfigChannel+0x7e4>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d131      	bne.n	800aec4 <HAL_ADC_ConfigChannel+0x7f8>
 800ae60:	4b17      	ldr	r3, [pc, #92]	@ (800aec0 <HAL_ADC_ConfigChannel+0x7f4>)
 800ae62:	e030      	b.n	800aec6 <HAL_ADC_ConfigChannel+0x7fa>
 800ae64:	47ff0000 	.word	0x47ff0000
 800ae68:	40022000 	.word	0x40022000
 800ae6c:	04300002 	.word	0x04300002
 800ae70:	08600004 	.word	0x08600004
 800ae74:	0c900008 	.word	0x0c900008
 800ae78:	10c00010 	.word	0x10c00010
 800ae7c:	14f00020 	.word	0x14f00020
 800ae80:	2a000400 	.word	0x2a000400
 800ae84:	2e300800 	.word	0x2e300800
 800ae88:	32601000 	.word	0x32601000
 800ae8c:	43210000 	.word	0x43210000
 800ae90:	4b840000 	.word	0x4b840000
 800ae94:	4fb80000 	.word	0x4fb80000
 800ae98:	47520000 	.word	0x47520000
 800ae9c:	36902000 	.word	0x36902000
 800aea0:	25b00200 	.word	0x25b00200
 800aea4:	21800100 	.word	0x21800100
 800aea8:	1d500080 	.word	0x1d500080
 800aeac:	19200040 	.word	0x19200040
 800aeb0:	40022100 	.word	0x40022100
 800aeb4:	58026000 	.word	0x58026000
 800aeb8:	3ac04000 	.word	0x3ac04000
 800aebc:	3ef08000 	.word	0x3ef08000
 800aec0:	40022300 	.word	0x40022300
 800aec4:	4b61      	ldr	r3, [pc, #388]	@ (800b04c <HAL_ADC_ConfigChannel+0x980>)
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fbba 	bl	8009640 <LL_ADC_GetCommonPathInternalCh>
 800aecc:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a5f      	ldr	r2, [pc, #380]	@ (800b050 <HAL_ADC_ConfigChannel+0x984>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d004      	beq.n	800aee2 <HAL_ADC_ConfigChannel+0x816>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a5d      	ldr	r2, [pc, #372]	@ (800b054 <HAL_ADC_ConfigChannel+0x988>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d10e      	bne.n	800af00 <HAL_ADC_ConfigChannel+0x834>
 800aee2:	485b      	ldr	r0, [pc, #364]	@ (800b050 <HAL_ADC_ConfigChannel+0x984>)
 800aee4:	f7fe fe5e 	bl	8009ba4 <LL_ADC_IsEnabled>
 800aee8:	4604      	mov	r4, r0
 800aeea:	485a      	ldr	r0, [pc, #360]	@ (800b054 <HAL_ADC_ConfigChannel+0x988>)
 800aeec:	f7fe fe5a 	bl	8009ba4 <LL_ADC_IsEnabled>
 800aef0:	4603      	mov	r3, r0
 800aef2:	4323      	orrs	r3, r4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bf0c      	ite	eq
 800aef8:	2301      	moveq	r3, #1
 800aefa:	2300      	movne	r3, #0
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	e008      	b.n	800af12 <HAL_ADC_ConfigChannel+0x846>
 800af00:	4855      	ldr	r0, [pc, #340]	@ (800b058 <HAL_ADC_ConfigChannel+0x98c>)
 800af02:	f7fe fe4f 	bl	8009ba4 <LL_ADC_IsEnabled>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bf0c      	ite	eq
 800af0c:	2301      	moveq	r3, #1
 800af0e:	2300      	movne	r3, #0
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d07d      	beq.n	800b012 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a50      	ldr	r2, [pc, #320]	@ (800b05c <HAL_ADC_ConfigChannel+0x990>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d130      	bne.n	800af82 <HAL_ADC_ConfigChannel+0x8b6>
 800af20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d12b      	bne.n	800af82 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a4a      	ldr	r2, [pc, #296]	@ (800b058 <HAL_ADC_ConfigChannel+0x98c>)
 800af30:	4293      	cmp	r3, r2
 800af32:	f040 8081 	bne.w	800b038 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a45      	ldr	r2, [pc, #276]	@ (800b050 <HAL_ADC_ConfigChannel+0x984>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d004      	beq.n	800af4a <HAL_ADC_ConfigChannel+0x87e>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a43      	ldr	r2, [pc, #268]	@ (800b054 <HAL_ADC_ConfigChannel+0x988>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d101      	bne.n	800af4e <HAL_ADC_ConfigChannel+0x882>
 800af4a:	4a45      	ldr	r2, [pc, #276]	@ (800b060 <HAL_ADC_ConfigChannel+0x994>)
 800af4c:	e000      	b.n	800af50 <HAL_ADC_ConfigChannel+0x884>
 800af4e:	4a3f      	ldr	r2, [pc, #252]	@ (800b04c <HAL_ADC_ConfigChannel+0x980>)
 800af50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7fe fb5e 	bl	800961a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800af5e:	4b41      	ldr	r3, [pc, #260]	@ (800b064 <HAL_ADC_ConfigChannel+0x998>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	099b      	lsrs	r3, r3, #6
 800af64:	4a40      	ldr	r2, [pc, #256]	@ (800b068 <HAL_ADC_ConfigChannel+0x99c>)
 800af66:	fba2 2303 	umull	r2, r3, r2, r3
 800af6a:	099b      	lsrs	r3, r3, #6
 800af6c:	3301      	adds	r3, #1
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af72:	e002      	b.n	800af7a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3b01      	subs	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1f9      	bne.n	800af74 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af80:	e05a      	b.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a39      	ldr	r2, [pc, #228]	@ (800b06c <HAL_ADC_ConfigChannel+0x9a0>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d11e      	bne.n	800afca <HAL_ADC_ConfigChannel+0x8fe>
 800af8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af92:	2b00      	cmp	r3, #0
 800af94:	d119      	bne.n	800afca <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a2f      	ldr	r2, [pc, #188]	@ (800b058 <HAL_ADC_ConfigChannel+0x98c>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d14b      	bne.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a2a      	ldr	r2, [pc, #168]	@ (800b050 <HAL_ADC_ConfigChannel+0x984>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d004      	beq.n	800afb4 <HAL_ADC_ConfigChannel+0x8e8>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a29      	ldr	r2, [pc, #164]	@ (800b054 <HAL_ADC_ConfigChannel+0x988>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d101      	bne.n	800afb8 <HAL_ADC_ConfigChannel+0x8ec>
 800afb4:	4a2a      	ldr	r2, [pc, #168]	@ (800b060 <HAL_ADC_ConfigChannel+0x994>)
 800afb6:	e000      	b.n	800afba <HAL_ADC_ConfigChannel+0x8ee>
 800afb8:	4a24      	ldr	r2, [pc, #144]	@ (800b04c <HAL_ADC_ConfigChannel+0x980>)
 800afba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afc0:	4619      	mov	r1, r3
 800afc2:	4610      	mov	r0, r2
 800afc4:	f7fe fb29 	bl	800961a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800afc8:	e036      	b.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a28      	ldr	r2, [pc, #160]	@ (800b070 <HAL_ADC_ConfigChannel+0x9a4>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d131      	bne.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
 800afd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d12c      	bne.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a1d      	ldr	r2, [pc, #116]	@ (800b058 <HAL_ADC_ConfigChannel+0x98c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d127      	bne.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a18      	ldr	r2, [pc, #96]	@ (800b050 <HAL_ADC_ConfigChannel+0x984>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_ADC_ConfigChannel+0x930>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a17      	ldr	r2, [pc, #92]	@ (800b054 <HAL_ADC_ConfigChannel+0x988>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d101      	bne.n	800b000 <HAL_ADC_ConfigChannel+0x934>
 800affc:	4a18      	ldr	r2, [pc, #96]	@ (800b060 <HAL_ADC_ConfigChannel+0x994>)
 800affe:	e000      	b.n	800b002 <HAL_ADC_ConfigChannel+0x936>
 800b000:	4a12      	ldr	r2, [pc, #72]	@ (800b04c <HAL_ADC_ConfigChannel+0x980>)
 800b002:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b008:	4619      	mov	r1, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	f7fe fb05 	bl	800961a <LL_ADC_SetCommonPathInternalCh>
 800b010:	e012      	b.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b016:	f043 0220 	orr.w	r2, r3, #32
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800b024:	e008      	b.n	800b038 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b02a:	f043 0220 	orr.w	r2, r3, #32
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b040:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b044:	4618      	mov	r0, r3
 800b046:	3794      	adds	r7, #148	@ 0x94
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd90      	pop	{r4, r7, pc}
 800b04c:	58026300 	.word	0x58026300
 800b050:	40022000 	.word	0x40022000
 800b054:	40022100 	.word	0x40022100
 800b058:	58026000 	.word	0x58026000
 800b05c:	c7520000 	.word	0xc7520000
 800b060:	40022300 	.word	0x40022300
 800b064:	24000004 	.word	0x24000004
 800b068:	053e2d63 	.word	0x053e2d63
 800b06c:	c3210000 	.word	0xc3210000
 800b070:	cb840000 	.word	0xcb840000

0800b074 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fd8f 	bl	8009ba4 <LL_ADC_IsEnabled>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d16e      	bne.n	800b16a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	689a      	ldr	r2, [r3, #8]
 800b092:	4b38      	ldr	r3, [pc, #224]	@ (800b174 <ADC_Enable+0x100>)
 800b094:	4013      	ands	r3, r2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00d      	beq.n	800b0b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b09e:	f043 0210 	orr.w	r2, r3, #16
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0aa:	f043 0201 	orr.w	r2, r3, #1
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e05a      	b.n	800b16c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fd5e 	bl	8009b7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b0c0:	f7fe fa68 	bl	8009594 <HAL_GetTick>
 800b0c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b178 <ADC_Enable+0x104>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d004      	beq.n	800b0da <ADC_Enable+0x66>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a29      	ldr	r2, [pc, #164]	@ (800b17c <ADC_Enable+0x108>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d101      	bne.n	800b0de <ADC_Enable+0x6a>
 800b0da:	4b29      	ldr	r3, [pc, #164]	@ (800b180 <ADC_Enable+0x10c>)
 800b0dc:	e000      	b.n	800b0e0 <ADC_Enable+0x6c>
 800b0de:	4b29      	ldr	r3, [pc, #164]	@ (800b184 <ADC_Enable+0x110>)
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fce1 	bl	8009aa8 <LL_ADC_GetMultimode>
 800b0e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a23      	ldr	r2, [pc, #140]	@ (800b17c <ADC_Enable+0x108>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d002      	beq.n	800b0f8 <ADC_Enable+0x84>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	e000      	b.n	800b0fa <ADC_Enable+0x86>
 800b0f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b178 <ADC_Enable+0x104>)
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d02c      	beq.n	800b15c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d130      	bne.n	800b16a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b108:	e028      	b.n	800b15c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fd48 	bl	8009ba4 <LL_ADC_IsEnabled>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d104      	bne.n	800b124 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe fd2c 	bl	8009b7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b124:	f7fe fa36 	bl	8009594 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d914      	bls.n	800b15c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d00d      	beq.n	800b15c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b144:	f043 0210 	orr.w	r2, r3, #16
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b150:	f043 0201 	orr.w	r2, r3, #1
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e007      	b.n	800b16c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b01      	cmp	r3, #1
 800b168:	d1cf      	bne.n	800b10a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	8000003f 	.word	0x8000003f
 800b178:	40022000 	.word	0x40022000
 800b17c:	40022100 	.word	0x40022100
 800b180:	40022300 	.word	0x40022300
 800b184:	58026300 	.word	0x58026300

0800b188 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b194:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b19a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d14b      	bne.n	800b23a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0308 	and.w	r3, r3, #8
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d021      	beq.n	800b200 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe fb77 	bl	80098b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d032      	beq.n	800b232 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d12b      	bne.n	800b232 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d11f      	bne.n	800b232 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1f6:	f043 0201 	orr.w	r2, r3, #1
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	661a      	str	r2, [r3, #96]	@ 0x60
 800b1fe:	e018      	b.n	800b232 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d111      	bne.n	800b232 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b212:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b21e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d105      	bne.n	800b232 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b22a:	f043 0201 	orr.w	r2, r3, #1
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff fa22 	bl	800a67c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b238:	e00e      	b.n	800b258 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b23e:	f003 0310 	and.w	r3, r3, #16
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f7ff fa36 	bl	800a6b8 <HAL_ADC_ErrorCallback>
}
 800b24c:	e004      	b.n	800b258 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	4798      	blx	r3
}
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fa0e 	bl	800a690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b274:	bf00      	nop
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b288:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b28e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b29a:	f043 0204 	orr.w	r2, r3, #4
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f7ff fa08 	bl	800a6b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b2a8:	bf00      	nop
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a6c      	ldr	r2, [pc, #432]	@ (800b470 <ADC_ConfigureBoostMode+0x1c0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d004      	beq.n	800b2cc <ADC_ConfigureBoostMode+0x1c>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a6b      	ldr	r2, [pc, #428]	@ (800b474 <ADC_ConfigureBoostMode+0x1c4>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d109      	bne.n	800b2e0 <ADC_ConfigureBoostMode+0x30>
 800b2cc:	4b6a      	ldr	r3, [pc, #424]	@ (800b478 <ADC_ConfigureBoostMode+0x1c8>)
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bf14      	ite	ne
 800b2d8:	2301      	movne	r3, #1
 800b2da:	2300      	moveq	r3, #0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	e008      	b.n	800b2f2 <ADC_ConfigureBoostMode+0x42>
 800b2e0:	4b66      	ldr	r3, [pc, #408]	@ (800b47c <ADC_ConfigureBoostMode+0x1cc>)
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bf14      	ite	ne
 800b2ec:	2301      	movne	r3, #1
 800b2ee:	2300      	moveq	r3, #0
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d01c      	beq.n	800b330 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b2f6:	f006 fe8b 	bl	8012010 <HAL_RCC_GetHCLKFreq>
 800b2fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b304:	d010      	beq.n	800b328 <ADC_ConfigureBoostMode+0x78>
 800b306:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b30a:	d873      	bhi.n	800b3f4 <ADC_ConfigureBoostMode+0x144>
 800b30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b310:	d002      	beq.n	800b318 <ADC_ConfigureBoostMode+0x68>
 800b312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b316:	d16d      	bne.n	800b3f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	0c1b      	lsrs	r3, r3, #16
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	fbb2 f3f3 	udiv	r3, r2, r3
 800b324:	60fb      	str	r3, [r7, #12]
        break;
 800b326:	e068      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	089b      	lsrs	r3, r3, #2
 800b32c:	60fb      	str	r3, [r7, #12]
        break;
 800b32e:	e064      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b330:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b334:	f04f 0100 	mov.w	r1, #0
 800b338:	f008 f866 	bl	8013408 <HAL_RCCEx_GetPeriphCLKFreq>
 800b33c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b346:	d051      	beq.n	800b3ec <ADC_ConfigureBoostMode+0x13c>
 800b348:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b34c:	d854      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b34e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b352:	d047      	beq.n	800b3e4 <ADC_ConfigureBoostMode+0x134>
 800b354:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b358:	d84e      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b35a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b35e:	d03d      	beq.n	800b3dc <ADC_ConfigureBoostMode+0x12c>
 800b360:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b364:	d848      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b36a:	d033      	beq.n	800b3d4 <ADC_ConfigureBoostMode+0x124>
 800b36c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b370:	d842      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b372:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b376:	d029      	beq.n	800b3cc <ADC_ConfigureBoostMode+0x11c>
 800b378:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b37c:	d83c      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b37e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b382:	d01a      	beq.n	800b3ba <ADC_ConfigureBoostMode+0x10a>
 800b384:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b388:	d836      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b38a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b38e:	d014      	beq.n	800b3ba <ADC_ConfigureBoostMode+0x10a>
 800b390:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b394:	d830      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b39a:	d00e      	beq.n	800b3ba <ADC_ConfigureBoostMode+0x10a>
 800b39c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3a0:	d82a      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b3a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b3a6:	d008      	beq.n	800b3ba <ADC_ConfigureBoostMode+0x10a>
 800b3a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b3ac:	d824      	bhi.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
 800b3ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b3b2:	d002      	beq.n	800b3ba <ADC_ConfigureBoostMode+0x10a>
 800b3b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b3b8:	d11e      	bne.n	800b3f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	0c9b      	lsrs	r3, r3, #18
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ca:	e016      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	091b      	lsrs	r3, r3, #4
 800b3d0:	60fb      	str	r3, [r7, #12]
        break;
 800b3d2:	e012      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	095b      	lsrs	r3, r3, #5
 800b3d8:	60fb      	str	r3, [r7, #12]
        break;
 800b3da:	e00e      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	099b      	lsrs	r3, r3, #6
 800b3e0:	60fb      	str	r3, [r7, #12]
        break;
 800b3e2:	e00a      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	09db      	lsrs	r3, r3, #7
 800b3e8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ea:	e006      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	0a1b      	lsrs	r3, r3, #8
 800b3f0:	60fb      	str	r3, [r7, #12]
        break;
 800b3f2:	e002      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
        break;
 800b3f4:	bf00      	nop
 800b3f6:	e000      	b.n	800b3fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b3f8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	085b      	lsrs	r3, r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4a1f      	ldr	r2, [pc, #124]	@ (800b480 <ADC_ConfigureBoostMode+0x1d0>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d808      	bhi.n	800b41a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689a      	ldr	r2, [r3, #8]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b416:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b418:	e025      	b.n	800b466 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	4a19      	ldr	r2, [pc, #100]	@ (800b484 <ADC_ConfigureBoostMode+0x1d4>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d80a      	bhi.n	800b438 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b434:	609a      	str	r2, [r3, #8]
}
 800b436:	e016      	b.n	800b466 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4a13      	ldr	r2, [pc, #76]	@ (800b488 <ADC_ConfigureBoostMode+0x1d8>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d80a      	bhi.n	800b456 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b452:	609a      	str	r2, [r3, #8]
}
 800b454:	e007      	b.n	800b466 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b464:	609a      	str	r2, [r3, #8]
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	40022000 	.word	0x40022000
 800b474:	40022100 	.word	0x40022100
 800b478:	40022300 	.word	0x40022300
 800b47c:	58026300 	.word	0x58026300
 800b480:	005f5e10 	.word	0x005f5e10
 800b484:	00bebc20 	.word	0x00bebc20
 800b488:	017d7840 	.word	0x017d7840

0800b48c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <__NVIC_SetPriorityGrouping>:
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f003 0307 	and.w	r3, r3, #7
 800b4fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b500:	4b0b      	ldr	r3, [pc, #44]	@ (800b530 <__NVIC_SetPriorityGrouping+0x40>)
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b50c:	4013      	ands	r3, r2
 800b50e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b518:	4b06      	ldr	r3, [pc, #24]	@ (800b534 <__NVIC_SetPriorityGrouping+0x44>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b51e:	4a04      	ldr	r2, [pc, #16]	@ (800b530 <__NVIC_SetPriorityGrouping+0x40>)
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	60d3      	str	r3, [r2, #12]
}
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	e000ed00 	.word	0xe000ed00
 800b534:	05fa0000 	.word	0x05fa0000

0800b538 <__NVIC_GetPriorityGrouping>:
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b53c:	4b04      	ldr	r3, [pc, #16]	@ (800b550 <__NVIC_GetPriorityGrouping+0x18>)
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	0a1b      	lsrs	r3, r3, #8
 800b542:	f003 0307 	and.w	r3, r3, #7
}
 800b546:	4618      	mov	r0, r3
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	e000ed00 	.word	0xe000ed00

0800b554 <__NVIC_EnableIRQ>:
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4603      	mov	r3, r0
 800b55c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b55e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b562:	2b00      	cmp	r3, #0
 800b564:	db0b      	blt.n	800b57e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b566:	88fb      	ldrh	r3, [r7, #6]
 800b568:	f003 021f 	and.w	r2, r3, #31
 800b56c:	4907      	ldr	r1, [pc, #28]	@ (800b58c <__NVIC_EnableIRQ+0x38>)
 800b56e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b572:	095b      	lsrs	r3, r3, #5
 800b574:	2001      	movs	r0, #1
 800b576:	fa00 f202 	lsl.w	r2, r0, r2
 800b57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	e000e100 	.word	0xe000e100

0800b590 <__NVIC_SetPriority>:
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	6039      	str	r1, [r7, #0]
 800b59a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b59c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	db0a      	blt.n	800b5ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	490c      	ldr	r1, [pc, #48]	@ (800b5dc <__NVIC_SetPriority+0x4c>)
 800b5aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5ae:	0112      	lsls	r2, r2, #4
 800b5b0:	b2d2      	uxtb	r2, r2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b5b8:	e00a      	b.n	800b5d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	4908      	ldr	r1, [pc, #32]	@ (800b5e0 <__NVIC_SetPriority+0x50>)
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	f003 030f 	and.w	r3, r3, #15
 800b5c6:	3b04      	subs	r3, #4
 800b5c8:	0112      	lsls	r2, r2, #4
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	440b      	add	r3, r1
 800b5ce:	761a      	strb	r2, [r3, #24]
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	e000e100 	.word	0xe000e100
 800b5e0:	e000ed00 	.word	0xe000ed00

0800b5e4 <NVIC_EncodePriority>:
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b089      	sub	sp, #36	@ 0x24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	f1c3 0307 	rsb	r3, r3, #7
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	bf28      	it	cs
 800b602:	2304      	movcs	r3, #4
 800b604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	3304      	adds	r3, #4
 800b60a:	2b06      	cmp	r3, #6
 800b60c:	d902      	bls.n	800b614 <NVIC_EncodePriority+0x30>
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	3b03      	subs	r3, #3
 800b612:	e000      	b.n	800b616 <NVIC_EncodePriority+0x32>
 800b614:	2300      	movs	r3, #0
 800b616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b618:	f04f 32ff 	mov.w	r2, #4294967295
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	fa02 f303 	lsl.w	r3, r2, r3
 800b622:	43da      	mvns	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	401a      	ands	r2, r3
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b62c:	f04f 31ff 	mov.w	r1, #4294967295
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	fa01 f303 	lsl.w	r3, r1, r3
 800b636:	43d9      	mvns	r1, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b63c:	4313      	orrs	r3, r2
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3724      	adds	r7, #36	@ 0x24
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
	...

0800b64c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3b01      	subs	r3, #1
 800b658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b65c:	d301      	bcc.n	800b662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b65e:	2301      	movs	r3, #1
 800b660:	e00f      	b.n	800b682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b662:	4a0a      	ldr	r2, [pc, #40]	@ (800b68c <SysTick_Config+0x40>)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3b01      	subs	r3, #1
 800b668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b66a:	210f      	movs	r1, #15
 800b66c:	f04f 30ff 	mov.w	r0, #4294967295
 800b670:	f7ff ff8e 	bl	800b590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b674:	4b05      	ldr	r3, [pc, #20]	@ (800b68c <SysTick_Config+0x40>)
 800b676:	2200      	movs	r2, #0
 800b678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b67a:	4b04      	ldr	r3, [pc, #16]	@ (800b68c <SysTick_Config+0x40>)
 800b67c:	2207      	movs	r2, #7
 800b67e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	e000e010 	.word	0xe000e010

0800b690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff ff29 	bl	800b4f0 <__NVIC_SetPriorityGrouping>
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b6b4:	f7ff ff40 	bl	800b538 <__NVIC_GetPriorityGrouping>
 800b6b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	6978      	ldr	r0, [r7, #20]
 800b6c0:	f7ff ff90 	bl	800b5e4 <NVIC_EncodePriority>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff ff5f 	bl	800b590 <__NVIC_SetPriority>
}
 800b6d2:	bf00      	nop
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff ff33 	bl	800b554 <__NVIC_EnableIRQ>
}
 800b6ee:	bf00      	nop
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff ffa4 	bl	800b64c <SysTick_Config>
 800b704:	4603      	mov	r3, r0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b714:	f3bf 8f5f 	dmb	sy
}
 800b718:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b71a:	4b07      	ldr	r3, [pc, #28]	@ (800b738 <HAL_MPU_Disable+0x28>)
 800b71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b71e:	4a06      	ldr	r2, [pc, #24]	@ (800b738 <HAL_MPU_Disable+0x28>)
 800b720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b724:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b726:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <HAL_MPU_Disable+0x2c>)
 800b728:	2200      	movs	r2, #0
 800b72a:	605a      	str	r2, [r3, #4]
}
 800b72c:	bf00      	nop
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	e000ed00 	.word	0xe000ed00
 800b73c:	e000ed90 	.word	0xe000ed90

0800b740 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b748:	4a0b      	ldr	r2, [pc, #44]	@ (800b778 <HAL_MPU_Enable+0x38>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f043 0301 	orr.w	r3, r3, #1
 800b750:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b752:	4b0a      	ldr	r3, [pc, #40]	@ (800b77c <HAL_MPU_Enable+0x3c>)
 800b754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b756:	4a09      	ldr	r2, [pc, #36]	@ (800b77c <HAL_MPU_Enable+0x3c>)
 800b758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b75c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b75e:	f3bf 8f4f 	dsb	sy
}
 800b762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b764:	f3bf 8f6f 	isb	sy
}
 800b768:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	e000ed90 	.word	0xe000ed90
 800b77c:	e000ed00 	.word	0xe000ed00

0800b780 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	785a      	ldrb	r2, [r3, #1]
 800b78c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7fc <HAL_MPU_ConfigRegion+0x7c>)
 800b78e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b790:	4b1a      	ldr	r3, [pc, #104]	@ (800b7fc <HAL_MPU_ConfigRegion+0x7c>)
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	4a19      	ldr	r2, [pc, #100]	@ (800b7fc <HAL_MPU_ConfigRegion+0x7c>)
 800b796:	f023 0301 	bic.w	r3, r3, #1
 800b79a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b79c:	4a17      	ldr	r2, [pc, #92]	@ (800b7fc <HAL_MPU_ConfigRegion+0x7c>)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	7b1b      	ldrb	r3, [r3, #12]
 800b7a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7adb      	ldrb	r3, [r3, #11]
 800b7ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7a9b      	ldrb	r3, [r3, #10]
 800b7b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b7b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7b5b      	ldrb	r3, [r3, #13]
 800b7be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b7c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	7b9b      	ldrb	r3, [r3, #14]
 800b7c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b7c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	7bdb      	ldrb	r3, [r3, #15]
 800b7ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7a5b      	ldrb	r3, [r3, #9]
 800b7d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	7a1b      	ldrb	r3, [r3, #8]
 800b7de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	7812      	ldrb	r2, [r2, #0]
 800b7e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7e8:	4a04      	ldr	r2, [pc, #16]	@ (800b7fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7ec:	6113      	str	r3, [r2, #16]
}
 800b7ee:	bf00      	nop
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	e000ed90 	.word	0xe000ed90

0800b800 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b808:	f7fd fec4 	bl	8009594 <HAL_GetTick>
 800b80c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e312      	b.n	800be3e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a66      	ldr	r2, [pc, #408]	@ (800b9b8 <HAL_DMA_Init+0x1b8>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d04a      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a65      	ldr	r2, [pc, #404]	@ (800b9bc <HAL_DMA_Init+0x1bc>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d045      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a63      	ldr	r2, [pc, #396]	@ (800b9c0 <HAL_DMA_Init+0x1c0>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d040      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a62      	ldr	r2, [pc, #392]	@ (800b9c4 <HAL_DMA_Init+0x1c4>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d03b      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a60      	ldr	r2, [pc, #384]	@ (800b9c8 <HAL_DMA_Init+0x1c8>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d036      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a5f      	ldr	r2, [pc, #380]	@ (800b9cc <HAL_DMA_Init+0x1cc>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d031      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a5d      	ldr	r2, [pc, #372]	@ (800b9d0 <HAL_DMA_Init+0x1d0>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d02c      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a5c      	ldr	r2, [pc, #368]	@ (800b9d4 <HAL_DMA_Init+0x1d4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d027      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a5a      	ldr	r2, [pc, #360]	@ (800b9d8 <HAL_DMA_Init+0x1d8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d022      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a59      	ldr	r2, [pc, #356]	@ (800b9dc <HAL_DMA_Init+0x1dc>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d01d      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a57      	ldr	r2, [pc, #348]	@ (800b9e0 <HAL_DMA_Init+0x1e0>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d018      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a56      	ldr	r2, [pc, #344]	@ (800b9e4 <HAL_DMA_Init+0x1e4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d013      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a54      	ldr	r2, [pc, #336]	@ (800b9e8 <HAL_DMA_Init+0x1e8>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d00e      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a53      	ldr	r2, [pc, #332]	@ (800b9ec <HAL_DMA_Init+0x1ec>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d009      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a51      	ldr	r2, [pc, #324]	@ (800b9f0 <HAL_DMA_Init+0x1f0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d004      	beq.n	800b8b8 <HAL_DMA_Init+0xb8>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a50      	ldr	r2, [pc, #320]	@ (800b9f4 <HAL_DMA_Init+0x1f4>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d101      	bne.n	800b8bc <HAL_DMA_Init+0xbc>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e000      	b.n	800b8be <HAL_DMA_Init+0xbe>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f000 813c 	beq.w	800bb3c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a37      	ldr	r2, [pc, #220]	@ (800b9b8 <HAL_DMA_Init+0x1b8>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d04a      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a36      	ldr	r2, [pc, #216]	@ (800b9bc <HAL_DMA_Init+0x1bc>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d045      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a34      	ldr	r2, [pc, #208]	@ (800b9c0 <HAL_DMA_Init+0x1c0>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d040      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a33      	ldr	r2, [pc, #204]	@ (800b9c4 <HAL_DMA_Init+0x1c4>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d03b      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a31      	ldr	r2, [pc, #196]	@ (800b9c8 <HAL_DMA_Init+0x1c8>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d036      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a30      	ldr	r2, [pc, #192]	@ (800b9cc <HAL_DMA_Init+0x1cc>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d031      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a2e      	ldr	r2, [pc, #184]	@ (800b9d0 <HAL_DMA_Init+0x1d0>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d02c      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a2d      	ldr	r2, [pc, #180]	@ (800b9d4 <HAL_DMA_Init+0x1d4>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d027      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a2b      	ldr	r2, [pc, #172]	@ (800b9d8 <HAL_DMA_Init+0x1d8>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d022      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a2a      	ldr	r2, [pc, #168]	@ (800b9dc <HAL_DMA_Init+0x1dc>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d01d      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a28      	ldr	r2, [pc, #160]	@ (800b9e0 <HAL_DMA_Init+0x1e0>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d018      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a27      	ldr	r2, [pc, #156]	@ (800b9e4 <HAL_DMA_Init+0x1e4>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d013      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a25      	ldr	r2, [pc, #148]	@ (800b9e8 <HAL_DMA_Init+0x1e8>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00e      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a24      	ldr	r2, [pc, #144]	@ (800b9ec <HAL_DMA_Init+0x1ec>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d009      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a22      	ldr	r2, [pc, #136]	@ (800b9f0 <HAL_DMA_Init+0x1f0>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d004      	beq.n	800b974 <HAL_DMA_Init+0x174>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a21      	ldr	r2, [pc, #132]	@ (800b9f4 <HAL_DMA_Init+0x1f4>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d108      	bne.n	800b986 <HAL_DMA_Init+0x186>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0201 	bic.w	r2, r2, #1
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	e007      	b.n	800b996 <HAL_DMA_Init+0x196>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f022 0201 	bic.w	r2, r2, #1
 800b994:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b996:	e02f      	b.n	800b9f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b998:	f7fd fdfc 	bl	8009594 <HAL_GetTick>
 800b99c:	4602      	mov	r2, r0
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	2b05      	cmp	r3, #5
 800b9a4:	d928      	bls.n	800b9f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2220      	movs	r2, #32
 800b9aa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e242      	b.n	800be3e <HAL_DMA_Init+0x63e>
 800b9b8:	40020010 	.word	0x40020010
 800b9bc:	40020028 	.word	0x40020028
 800b9c0:	40020040 	.word	0x40020040
 800b9c4:	40020058 	.word	0x40020058
 800b9c8:	40020070 	.word	0x40020070
 800b9cc:	40020088 	.word	0x40020088
 800b9d0:	400200a0 	.word	0x400200a0
 800b9d4:	400200b8 	.word	0x400200b8
 800b9d8:	40020410 	.word	0x40020410
 800b9dc:	40020428 	.word	0x40020428
 800b9e0:	40020440 	.word	0x40020440
 800b9e4:	40020458 	.word	0x40020458
 800b9e8:	40020470 	.word	0x40020470
 800b9ec:	40020488 	.word	0x40020488
 800b9f0:	400204a0 	.word	0x400204a0
 800b9f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1c8      	bne.n	800b998 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4b83      	ldr	r3, [pc, #524]	@ (800bc20 <HAL_DMA_Init+0x420>)
 800ba12:	4013      	ands	r3, r2
 800ba14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800ba1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d107      	bne.n	800ba5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba54:	4313      	orrs	r3, r2
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b28      	cmp	r3, #40	@ 0x28
 800ba62:	d903      	bls.n	800ba6c <HAL_DMA_Init+0x26c>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba6a:	d91f      	bls.n	800baac <HAL_DMA_Init+0x2ac>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba72:	d903      	bls.n	800ba7c <HAL_DMA_Init+0x27c>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	2b42      	cmp	r3, #66	@ 0x42
 800ba7a:	d917      	bls.n	800baac <HAL_DMA_Init+0x2ac>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2b46      	cmp	r3, #70	@ 0x46
 800ba82:	d903      	bls.n	800ba8c <HAL_DMA_Init+0x28c>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	2b48      	cmp	r3, #72	@ 0x48
 800ba8a:	d90f      	bls.n	800baac <HAL_DMA_Init+0x2ac>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba92:	d903      	bls.n	800ba9c <HAL_DMA_Init+0x29c>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	2b52      	cmp	r3, #82	@ 0x52
 800ba9a:	d907      	bls.n	800baac <HAL_DMA_Init+0x2ac>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	2b73      	cmp	r3, #115	@ 0x73
 800baa2:	d905      	bls.n	800bab0 <HAL_DMA_Init+0x2b0>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	2b77      	cmp	r3, #119	@ 0x77
 800baaa:	d801      	bhi.n	800bab0 <HAL_DMA_Init+0x2b0>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <HAL_DMA_Init+0x2b2>
 800bab0:	2300      	movs	r3, #0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800babc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f023 0307 	bic.w	r3, r3, #7
 800bad4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	4313      	orrs	r3, r2
 800bade:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d117      	bne.n	800bb18 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	4313      	orrs	r3, r2
 800baf0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00e      	beq.n	800bb18 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f002 fb48 	bl	800e190 <DMA_CheckFifoParam>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2240      	movs	r2, #64	@ 0x40
 800bb0a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e192      	b.n	800be3e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f002 fa83 	bl	800e02c <DMA_CalcBaseAndBitshift>
 800bb26:	4603      	mov	r3, r0
 800bb28:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb2e:	f003 031f 	and.w	r3, r3, #31
 800bb32:	223f      	movs	r2, #63	@ 0x3f
 800bb34:	409a      	lsls	r2, r3
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	609a      	str	r2, [r3, #8]
 800bb3a:	e0c8      	b.n	800bcce <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a38      	ldr	r2, [pc, #224]	@ (800bc24 <HAL_DMA_Init+0x424>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d022      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a37      	ldr	r2, [pc, #220]	@ (800bc28 <HAL_DMA_Init+0x428>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d01d      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a35      	ldr	r2, [pc, #212]	@ (800bc2c <HAL_DMA_Init+0x42c>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d018      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a34      	ldr	r2, [pc, #208]	@ (800bc30 <HAL_DMA_Init+0x430>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d013      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a32      	ldr	r2, [pc, #200]	@ (800bc34 <HAL_DMA_Init+0x434>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d00e      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a31      	ldr	r2, [pc, #196]	@ (800bc38 <HAL_DMA_Init+0x438>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d009      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a2f      	ldr	r2, [pc, #188]	@ (800bc3c <HAL_DMA_Init+0x43c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d004      	beq.n	800bb8c <HAL_DMA_Init+0x38c>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a2e      	ldr	r2, [pc, #184]	@ (800bc40 <HAL_DMA_Init+0x440>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d101      	bne.n	800bb90 <HAL_DMA_Init+0x390>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e000      	b.n	800bb92 <HAL_DMA_Init+0x392>
 800bb90:	2300      	movs	r3, #0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 8092 	beq.w	800bcbc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a21      	ldr	r2, [pc, #132]	@ (800bc24 <HAL_DMA_Init+0x424>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d021      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a20      	ldr	r2, [pc, #128]	@ (800bc28 <HAL_DMA_Init+0x428>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d01c      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a1e      	ldr	r2, [pc, #120]	@ (800bc2c <HAL_DMA_Init+0x42c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d017      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a1d      	ldr	r2, [pc, #116]	@ (800bc30 <HAL_DMA_Init+0x430>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d012      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc34 <HAL_DMA_Init+0x434>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d00d      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a1a      	ldr	r2, [pc, #104]	@ (800bc38 <HAL_DMA_Init+0x438>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d008      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a18      	ldr	r2, [pc, #96]	@ (800bc3c <HAL_DMA_Init+0x43c>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d003      	beq.n	800bbe6 <HAL_DMA_Init+0x3e6>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a17      	ldr	r2, [pc, #92]	@ (800bc40 <HAL_DMA_Init+0x440>)
 800bbe4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2202      	movs	r2, #2
 800bbea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	4b10      	ldr	r3, [pc, #64]	@ (800bc44 <HAL_DMA_Init+0x444>)
 800bc02:	4013      	ands	r3, r2
 800bc04:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	2b40      	cmp	r3, #64	@ 0x40
 800bc0c:	d01c      	beq.n	800bc48 <HAL_DMA_Init+0x448>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	2b80      	cmp	r3, #128	@ 0x80
 800bc14:	d102      	bne.n	800bc1c <HAL_DMA_Init+0x41c>
 800bc16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bc1a:	e016      	b.n	800bc4a <HAL_DMA_Init+0x44a>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	e014      	b.n	800bc4a <HAL_DMA_Init+0x44a>
 800bc20:	fe10803f 	.word	0xfe10803f
 800bc24:	58025408 	.word	0x58025408
 800bc28:	5802541c 	.word	0x5802541c
 800bc2c:	58025430 	.word	0x58025430
 800bc30:	58025444 	.word	0x58025444
 800bc34:	58025458 	.word	0x58025458
 800bc38:	5802546c 	.word	0x5802546c
 800bc3c:	58025480 	.word	0x58025480
 800bc40:	58025494 	.word	0x58025494
 800bc44:	fffe000f 	.word	0xfffe000f
 800bc48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	68d2      	ldr	r2, [r2, #12]
 800bc4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4b6e      	ldr	r3, [pc, #440]	@ (800be48 <HAL_DMA_Init+0x648>)
 800bc90:	4413      	add	r3, r2
 800bc92:	4a6e      	ldr	r2, [pc, #440]	@ (800be4c <HAL_DMA_Init+0x64c>)
 800bc94:	fba2 2303 	umull	r2, r3, r2, r3
 800bc98:	091b      	lsrs	r3, r3, #4
 800bc9a:	009a      	lsls	r2, r3, #2
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f002 f9c3 	bl	800e02c <DMA_CalcBaseAndBitshift>
 800bca6:	4603      	mov	r3, r0
 800bca8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcae:	f003 031f 	and.w	r3, r3, #31
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	409a      	lsls	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	e008      	b.n	800bcce <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2240      	movs	r2, #64	@ 0x40
 800bcc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e0b7      	b.n	800be3e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a5f      	ldr	r2, [pc, #380]	@ (800be50 <HAL_DMA_Init+0x650>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d072      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a5d      	ldr	r2, [pc, #372]	@ (800be54 <HAL_DMA_Init+0x654>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d06d      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a5c      	ldr	r2, [pc, #368]	@ (800be58 <HAL_DMA_Init+0x658>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d068      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a5a      	ldr	r2, [pc, #360]	@ (800be5c <HAL_DMA_Init+0x65c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d063      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a59      	ldr	r2, [pc, #356]	@ (800be60 <HAL_DMA_Init+0x660>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d05e      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a57      	ldr	r2, [pc, #348]	@ (800be64 <HAL_DMA_Init+0x664>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d059      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a56      	ldr	r2, [pc, #344]	@ (800be68 <HAL_DMA_Init+0x668>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d054      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a54      	ldr	r2, [pc, #336]	@ (800be6c <HAL_DMA_Init+0x66c>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d04f      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a53      	ldr	r2, [pc, #332]	@ (800be70 <HAL_DMA_Init+0x670>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d04a      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a51      	ldr	r2, [pc, #324]	@ (800be74 <HAL_DMA_Init+0x674>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d045      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a50      	ldr	r2, [pc, #320]	@ (800be78 <HAL_DMA_Init+0x678>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d040      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a4e      	ldr	r2, [pc, #312]	@ (800be7c <HAL_DMA_Init+0x67c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d03b      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a4d      	ldr	r2, [pc, #308]	@ (800be80 <HAL_DMA_Init+0x680>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d036      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a4b      	ldr	r2, [pc, #300]	@ (800be84 <HAL_DMA_Init+0x684>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d031      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a4a      	ldr	r2, [pc, #296]	@ (800be88 <HAL_DMA_Init+0x688>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d02c      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a48      	ldr	r2, [pc, #288]	@ (800be8c <HAL_DMA_Init+0x68c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d027      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a47      	ldr	r2, [pc, #284]	@ (800be90 <HAL_DMA_Init+0x690>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d022      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a45      	ldr	r2, [pc, #276]	@ (800be94 <HAL_DMA_Init+0x694>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d01d      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a44      	ldr	r2, [pc, #272]	@ (800be98 <HAL_DMA_Init+0x698>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d018      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a42      	ldr	r2, [pc, #264]	@ (800be9c <HAL_DMA_Init+0x69c>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d013      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a41      	ldr	r2, [pc, #260]	@ (800bea0 <HAL_DMA_Init+0x6a0>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d00e      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a3f      	ldr	r2, [pc, #252]	@ (800bea4 <HAL_DMA_Init+0x6a4>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d009      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a3e      	ldr	r2, [pc, #248]	@ (800bea8 <HAL_DMA_Init+0x6a8>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d004      	beq.n	800bdbe <HAL_DMA_Init+0x5be>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a3c      	ldr	r2, [pc, #240]	@ (800beac <HAL_DMA_Init+0x6ac>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d101      	bne.n	800bdc2 <HAL_DMA_Init+0x5c2>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <HAL_DMA_Init+0x5c4>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d032      	beq.n	800be2e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f002 fa5d 	bl	800e288 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	2b80      	cmp	r3, #128	@ 0x80
 800bdd4:	d102      	bne.n	800bddc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	685a      	ldr	r2, [r3, #4]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bde4:	b2d2      	uxtb	r2, r2
 800bde6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bdf0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d010      	beq.n	800be1c <HAL_DMA_Init+0x61c>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d80c      	bhi.n	800be1c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f002 fada 	bl	800e3bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be0c:	2200      	movs	r2, #0
 800be0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	e008      	b.n	800be2e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	a7fdabf8 	.word	0xa7fdabf8
 800be4c:	cccccccd 	.word	0xcccccccd
 800be50:	40020010 	.word	0x40020010
 800be54:	40020028 	.word	0x40020028
 800be58:	40020040 	.word	0x40020040
 800be5c:	40020058 	.word	0x40020058
 800be60:	40020070 	.word	0x40020070
 800be64:	40020088 	.word	0x40020088
 800be68:	400200a0 	.word	0x400200a0
 800be6c:	400200b8 	.word	0x400200b8
 800be70:	40020410 	.word	0x40020410
 800be74:	40020428 	.word	0x40020428
 800be78:	40020440 	.word	0x40020440
 800be7c:	40020458 	.word	0x40020458
 800be80:	40020470 	.word	0x40020470
 800be84:	40020488 	.word	0x40020488
 800be88:	400204a0 	.word	0x400204a0
 800be8c:	400204b8 	.word	0x400204b8
 800be90:	58025408 	.word	0x58025408
 800be94:	5802541c 	.word	0x5802541c
 800be98:	58025430 	.word	0x58025430
 800be9c:	58025444 	.word	0x58025444
 800bea0:	58025458 	.word	0x58025458
 800bea4:	5802546c 	.word	0x5802546c
 800bea8:	58025480 	.word	0x58025480
 800beac:	58025494 	.word	0x58025494

0800beb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	e226      	b.n	800c31a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d101      	bne.n	800beda <HAL_DMA_Start_IT+0x2a>
 800bed6:	2302      	movs	r3, #2
 800bed8:	e21f      	b.n	800c31a <HAL_DMA_Start_IT+0x46a>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2201      	movs	r2, #1
 800bede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b01      	cmp	r3, #1
 800beec:	f040 820a 	bne.w	800c304 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2202      	movs	r2, #2
 800bef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a68      	ldr	r2, [pc, #416]	@ (800c0a4 <HAL_DMA_Start_IT+0x1f4>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d04a      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a66      	ldr	r2, [pc, #408]	@ (800c0a8 <HAL_DMA_Start_IT+0x1f8>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d045      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a65      	ldr	r2, [pc, #404]	@ (800c0ac <HAL_DMA_Start_IT+0x1fc>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d040      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a63      	ldr	r2, [pc, #396]	@ (800c0b0 <HAL_DMA_Start_IT+0x200>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d03b      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a62      	ldr	r2, [pc, #392]	@ (800c0b4 <HAL_DMA_Start_IT+0x204>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d036      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a60      	ldr	r2, [pc, #384]	@ (800c0b8 <HAL_DMA_Start_IT+0x208>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d031      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a5f      	ldr	r2, [pc, #380]	@ (800c0bc <HAL_DMA_Start_IT+0x20c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d02c      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a5d      	ldr	r2, [pc, #372]	@ (800c0c0 <HAL_DMA_Start_IT+0x210>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d027      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a5c      	ldr	r2, [pc, #368]	@ (800c0c4 <HAL_DMA_Start_IT+0x214>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d022      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a5a      	ldr	r2, [pc, #360]	@ (800c0c8 <HAL_DMA_Start_IT+0x218>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d01d      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a59      	ldr	r2, [pc, #356]	@ (800c0cc <HAL_DMA_Start_IT+0x21c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d018      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a57      	ldr	r2, [pc, #348]	@ (800c0d0 <HAL_DMA_Start_IT+0x220>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d013      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a56      	ldr	r2, [pc, #344]	@ (800c0d4 <HAL_DMA_Start_IT+0x224>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00e      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a54      	ldr	r2, [pc, #336]	@ (800c0d8 <HAL_DMA_Start_IT+0x228>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d009      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a53      	ldr	r2, [pc, #332]	@ (800c0dc <HAL_DMA_Start_IT+0x22c>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d004      	beq.n	800bf9e <HAL_DMA_Start_IT+0xee>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a51      	ldr	r2, [pc, #324]	@ (800c0e0 <HAL_DMA_Start_IT+0x230>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d108      	bne.n	800bfb0 <HAL_DMA_Start_IT+0x100>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f022 0201 	bic.w	r2, r2, #1
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	e007      	b.n	800bfc0 <HAL_DMA_Start_IT+0x110>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f022 0201 	bic.w	r2, r2, #1
 800bfbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	68b9      	ldr	r1, [r7, #8]
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f001 fe84 	bl	800dcd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a34      	ldr	r2, [pc, #208]	@ (800c0a4 <HAL_DMA_Start_IT+0x1f4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d04a      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a33      	ldr	r2, [pc, #204]	@ (800c0a8 <HAL_DMA_Start_IT+0x1f8>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d045      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a31      	ldr	r2, [pc, #196]	@ (800c0ac <HAL_DMA_Start_IT+0x1fc>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d040      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a30      	ldr	r2, [pc, #192]	@ (800c0b0 <HAL_DMA_Start_IT+0x200>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d03b      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a2e      	ldr	r2, [pc, #184]	@ (800c0b4 <HAL_DMA_Start_IT+0x204>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d036      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a2d      	ldr	r2, [pc, #180]	@ (800c0b8 <HAL_DMA_Start_IT+0x208>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d031      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a2b      	ldr	r2, [pc, #172]	@ (800c0bc <HAL_DMA_Start_IT+0x20c>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d02c      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a2a      	ldr	r2, [pc, #168]	@ (800c0c0 <HAL_DMA_Start_IT+0x210>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d027      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a28      	ldr	r2, [pc, #160]	@ (800c0c4 <HAL_DMA_Start_IT+0x214>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d022      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a27      	ldr	r2, [pc, #156]	@ (800c0c8 <HAL_DMA_Start_IT+0x218>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d01d      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a25      	ldr	r2, [pc, #148]	@ (800c0cc <HAL_DMA_Start_IT+0x21c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d018      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a24      	ldr	r2, [pc, #144]	@ (800c0d0 <HAL_DMA_Start_IT+0x220>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d013      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a22      	ldr	r2, [pc, #136]	@ (800c0d4 <HAL_DMA_Start_IT+0x224>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d00e      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a21      	ldr	r2, [pc, #132]	@ (800c0d8 <HAL_DMA_Start_IT+0x228>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d009      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a1f      	ldr	r2, [pc, #124]	@ (800c0dc <HAL_DMA_Start_IT+0x22c>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d004      	beq.n	800c06c <HAL_DMA_Start_IT+0x1bc>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a1e      	ldr	r2, [pc, #120]	@ (800c0e0 <HAL_DMA_Start_IT+0x230>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d101      	bne.n	800c070 <HAL_DMA_Start_IT+0x1c0>
 800c06c:	2301      	movs	r3, #1
 800c06e:	e000      	b.n	800c072 <HAL_DMA_Start_IT+0x1c2>
 800c070:	2300      	movs	r3, #0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d036      	beq.n	800c0e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f023 021e 	bic.w	r2, r3, #30
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f042 0216 	orr.w	r2, r2, #22
 800c088:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d03e      	beq.n	800c110 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f042 0208 	orr.w	r2, r2, #8
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	e035      	b.n	800c110 <HAL_DMA_Start_IT+0x260>
 800c0a4:	40020010 	.word	0x40020010
 800c0a8:	40020028 	.word	0x40020028
 800c0ac:	40020040 	.word	0x40020040
 800c0b0:	40020058 	.word	0x40020058
 800c0b4:	40020070 	.word	0x40020070
 800c0b8:	40020088 	.word	0x40020088
 800c0bc:	400200a0 	.word	0x400200a0
 800c0c0:	400200b8 	.word	0x400200b8
 800c0c4:	40020410 	.word	0x40020410
 800c0c8:	40020428 	.word	0x40020428
 800c0cc:	40020440 	.word	0x40020440
 800c0d0:	40020458 	.word	0x40020458
 800c0d4:	40020470 	.word	0x40020470
 800c0d8:	40020488 	.word	0x40020488
 800c0dc:	400204a0 	.word	0x400204a0
 800c0e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f023 020e 	bic.w	r2, r3, #14
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 020a 	orr.w	r2, r2, #10
 800c0f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d007      	beq.n	800c110 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0204 	orr.w	r2, r2, #4
 800c10e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a83      	ldr	r2, [pc, #524]	@ (800c324 <HAL_DMA_Start_IT+0x474>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d072      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a82      	ldr	r2, [pc, #520]	@ (800c328 <HAL_DMA_Start_IT+0x478>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d06d      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a80      	ldr	r2, [pc, #512]	@ (800c32c <HAL_DMA_Start_IT+0x47c>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d068      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a7f      	ldr	r2, [pc, #508]	@ (800c330 <HAL_DMA_Start_IT+0x480>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d063      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a7d      	ldr	r2, [pc, #500]	@ (800c334 <HAL_DMA_Start_IT+0x484>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d05e      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a7c      	ldr	r2, [pc, #496]	@ (800c338 <HAL_DMA_Start_IT+0x488>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d059      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a7a      	ldr	r2, [pc, #488]	@ (800c33c <HAL_DMA_Start_IT+0x48c>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d054      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a79      	ldr	r2, [pc, #484]	@ (800c340 <HAL_DMA_Start_IT+0x490>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d04f      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a77      	ldr	r2, [pc, #476]	@ (800c344 <HAL_DMA_Start_IT+0x494>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d04a      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a76      	ldr	r2, [pc, #472]	@ (800c348 <HAL_DMA_Start_IT+0x498>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d045      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a74      	ldr	r2, [pc, #464]	@ (800c34c <HAL_DMA_Start_IT+0x49c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d040      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a73      	ldr	r2, [pc, #460]	@ (800c350 <HAL_DMA_Start_IT+0x4a0>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d03b      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a71      	ldr	r2, [pc, #452]	@ (800c354 <HAL_DMA_Start_IT+0x4a4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d036      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a70      	ldr	r2, [pc, #448]	@ (800c358 <HAL_DMA_Start_IT+0x4a8>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d031      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a6e      	ldr	r2, [pc, #440]	@ (800c35c <HAL_DMA_Start_IT+0x4ac>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d02c      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a6d      	ldr	r2, [pc, #436]	@ (800c360 <HAL_DMA_Start_IT+0x4b0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d027      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a6b      	ldr	r2, [pc, #428]	@ (800c364 <HAL_DMA_Start_IT+0x4b4>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d022      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a6a      	ldr	r2, [pc, #424]	@ (800c368 <HAL_DMA_Start_IT+0x4b8>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d01d      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a68      	ldr	r2, [pc, #416]	@ (800c36c <HAL_DMA_Start_IT+0x4bc>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d018      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a67      	ldr	r2, [pc, #412]	@ (800c370 <HAL_DMA_Start_IT+0x4c0>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d013      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a65      	ldr	r2, [pc, #404]	@ (800c374 <HAL_DMA_Start_IT+0x4c4>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d00e      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a64      	ldr	r2, [pc, #400]	@ (800c378 <HAL_DMA_Start_IT+0x4c8>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d009      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a62      	ldr	r2, [pc, #392]	@ (800c37c <HAL_DMA_Start_IT+0x4cc>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d004      	beq.n	800c200 <HAL_DMA_Start_IT+0x350>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a61      	ldr	r2, [pc, #388]	@ (800c380 <HAL_DMA_Start_IT+0x4d0>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d101      	bne.n	800c204 <HAL_DMA_Start_IT+0x354>
 800c200:	2301      	movs	r3, #1
 800c202:	e000      	b.n	800c206 <HAL_DMA_Start_IT+0x356>
 800c204:	2300      	movs	r3, #0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01a      	beq.n	800c240 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d007      	beq.n	800c228 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c226:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d007      	beq.n	800c240 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c23a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c23e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a37      	ldr	r2, [pc, #220]	@ (800c324 <HAL_DMA_Start_IT+0x474>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d04a      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a36      	ldr	r2, [pc, #216]	@ (800c328 <HAL_DMA_Start_IT+0x478>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d045      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a34      	ldr	r2, [pc, #208]	@ (800c32c <HAL_DMA_Start_IT+0x47c>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d040      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a33      	ldr	r2, [pc, #204]	@ (800c330 <HAL_DMA_Start_IT+0x480>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d03b      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a31      	ldr	r2, [pc, #196]	@ (800c334 <HAL_DMA_Start_IT+0x484>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d036      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a30      	ldr	r2, [pc, #192]	@ (800c338 <HAL_DMA_Start_IT+0x488>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d031      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a2e      	ldr	r2, [pc, #184]	@ (800c33c <HAL_DMA_Start_IT+0x48c>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d02c      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a2d      	ldr	r2, [pc, #180]	@ (800c340 <HAL_DMA_Start_IT+0x490>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d027      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a2b      	ldr	r2, [pc, #172]	@ (800c344 <HAL_DMA_Start_IT+0x494>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d022      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a2a      	ldr	r2, [pc, #168]	@ (800c348 <HAL_DMA_Start_IT+0x498>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d01d      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a28      	ldr	r2, [pc, #160]	@ (800c34c <HAL_DMA_Start_IT+0x49c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d018      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a27      	ldr	r2, [pc, #156]	@ (800c350 <HAL_DMA_Start_IT+0x4a0>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d013      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a25      	ldr	r2, [pc, #148]	@ (800c354 <HAL_DMA_Start_IT+0x4a4>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00e      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a24      	ldr	r2, [pc, #144]	@ (800c358 <HAL_DMA_Start_IT+0x4a8>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d009      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a22      	ldr	r2, [pc, #136]	@ (800c35c <HAL_DMA_Start_IT+0x4ac>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d004      	beq.n	800c2e0 <HAL_DMA_Start_IT+0x430>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a21      	ldr	r2, [pc, #132]	@ (800c360 <HAL_DMA_Start_IT+0x4b0>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d108      	bne.n	800c2f2 <HAL_DMA_Start_IT+0x442>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f042 0201 	orr.w	r2, r2, #1
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	e012      	b.n	800c318 <HAL_DMA_Start_IT+0x468>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f042 0201 	orr.w	r2, r2, #1
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	e009      	b.n	800c318 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c30a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	40020010 	.word	0x40020010
 800c328:	40020028 	.word	0x40020028
 800c32c:	40020040 	.word	0x40020040
 800c330:	40020058 	.word	0x40020058
 800c334:	40020070 	.word	0x40020070
 800c338:	40020088 	.word	0x40020088
 800c33c:	400200a0 	.word	0x400200a0
 800c340:	400200b8 	.word	0x400200b8
 800c344:	40020410 	.word	0x40020410
 800c348:	40020428 	.word	0x40020428
 800c34c:	40020440 	.word	0x40020440
 800c350:	40020458 	.word	0x40020458
 800c354:	40020470 	.word	0x40020470
 800c358:	40020488 	.word	0x40020488
 800c35c:	400204a0 	.word	0x400204a0
 800c360:	400204b8 	.word	0x400204b8
 800c364:	58025408 	.word	0x58025408
 800c368:	5802541c 	.word	0x5802541c
 800c36c:	58025430 	.word	0x58025430
 800c370:	58025444 	.word	0x58025444
 800c374:	58025458 	.word	0x58025458
 800c378:	5802546c 	.word	0x5802546c
 800c37c:	58025480 	.word	0x58025480
 800c380:	58025494 	.word	0x58025494

0800c384 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c38c:	f7fd f902 	bl	8009594 <HAL_GetTick>
 800c390:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e2dc      	b.n	800c956 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d008      	beq.n	800c3ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2280      	movs	r2, #128	@ 0x80
 800c3ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e2cd      	b.n	800c956 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a76      	ldr	r2, [pc, #472]	@ (800c598 <HAL_DMA_Abort+0x214>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d04a      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a74      	ldr	r2, [pc, #464]	@ (800c59c <HAL_DMA_Abort+0x218>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d045      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a73      	ldr	r2, [pc, #460]	@ (800c5a0 <HAL_DMA_Abort+0x21c>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d040      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a71      	ldr	r2, [pc, #452]	@ (800c5a4 <HAL_DMA_Abort+0x220>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d03b      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a70      	ldr	r2, [pc, #448]	@ (800c5a8 <HAL_DMA_Abort+0x224>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d036      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a6e      	ldr	r2, [pc, #440]	@ (800c5ac <HAL_DMA_Abort+0x228>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d031      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a6d      	ldr	r2, [pc, #436]	@ (800c5b0 <HAL_DMA_Abort+0x22c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d02c      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a6b      	ldr	r2, [pc, #428]	@ (800c5b4 <HAL_DMA_Abort+0x230>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d027      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a6a      	ldr	r2, [pc, #424]	@ (800c5b8 <HAL_DMA_Abort+0x234>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d022      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a68      	ldr	r2, [pc, #416]	@ (800c5bc <HAL_DMA_Abort+0x238>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d01d      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a67      	ldr	r2, [pc, #412]	@ (800c5c0 <HAL_DMA_Abort+0x23c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d018      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a65      	ldr	r2, [pc, #404]	@ (800c5c4 <HAL_DMA_Abort+0x240>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d013      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a64      	ldr	r2, [pc, #400]	@ (800c5c8 <HAL_DMA_Abort+0x244>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00e      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a62      	ldr	r2, [pc, #392]	@ (800c5cc <HAL_DMA_Abort+0x248>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d009      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a61      	ldr	r2, [pc, #388]	@ (800c5d0 <HAL_DMA_Abort+0x24c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d004      	beq.n	800c45a <HAL_DMA_Abort+0xd6>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a5f      	ldr	r2, [pc, #380]	@ (800c5d4 <HAL_DMA_Abort+0x250>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d101      	bne.n	800c45e <HAL_DMA_Abort+0xda>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e000      	b.n	800c460 <HAL_DMA_Abort+0xdc>
 800c45e:	2300      	movs	r3, #0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d013      	beq.n	800c48c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f022 021e 	bic.w	r2, r2, #30
 800c472:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	695a      	ldr	r2, [r3, #20]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c482:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	617b      	str	r3, [r7, #20]
 800c48a:	e00a      	b.n	800c4a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f022 020e 	bic.w	r2, r2, #14
 800c49a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a3c      	ldr	r2, [pc, #240]	@ (800c598 <HAL_DMA_Abort+0x214>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d072      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a3a      	ldr	r2, [pc, #232]	@ (800c59c <HAL_DMA_Abort+0x218>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d06d      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a39      	ldr	r2, [pc, #228]	@ (800c5a0 <HAL_DMA_Abort+0x21c>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d068      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a37      	ldr	r2, [pc, #220]	@ (800c5a4 <HAL_DMA_Abort+0x220>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d063      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a36      	ldr	r2, [pc, #216]	@ (800c5a8 <HAL_DMA_Abort+0x224>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d05e      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a34      	ldr	r2, [pc, #208]	@ (800c5ac <HAL_DMA_Abort+0x228>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d059      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a33      	ldr	r2, [pc, #204]	@ (800c5b0 <HAL_DMA_Abort+0x22c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d054      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a31      	ldr	r2, [pc, #196]	@ (800c5b4 <HAL_DMA_Abort+0x230>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d04f      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a30      	ldr	r2, [pc, #192]	@ (800c5b8 <HAL_DMA_Abort+0x234>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d04a      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a2e      	ldr	r2, [pc, #184]	@ (800c5bc <HAL_DMA_Abort+0x238>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d045      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a2d      	ldr	r2, [pc, #180]	@ (800c5c0 <HAL_DMA_Abort+0x23c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d040      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a2b      	ldr	r2, [pc, #172]	@ (800c5c4 <HAL_DMA_Abort+0x240>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d03b      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a2a      	ldr	r2, [pc, #168]	@ (800c5c8 <HAL_DMA_Abort+0x244>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d036      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a28      	ldr	r2, [pc, #160]	@ (800c5cc <HAL_DMA_Abort+0x248>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d031      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a27      	ldr	r2, [pc, #156]	@ (800c5d0 <HAL_DMA_Abort+0x24c>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d02c      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a25      	ldr	r2, [pc, #148]	@ (800c5d4 <HAL_DMA_Abort+0x250>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d027      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a24      	ldr	r2, [pc, #144]	@ (800c5d8 <HAL_DMA_Abort+0x254>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d022      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a22      	ldr	r2, [pc, #136]	@ (800c5dc <HAL_DMA_Abort+0x258>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d01d      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a21      	ldr	r2, [pc, #132]	@ (800c5e0 <HAL_DMA_Abort+0x25c>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d018      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a1f      	ldr	r2, [pc, #124]	@ (800c5e4 <HAL_DMA_Abort+0x260>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d013      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5e8 <HAL_DMA_Abort+0x264>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d00e      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a1c      	ldr	r2, [pc, #112]	@ (800c5ec <HAL_DMA_Abort+0x268>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d009      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a1b      	ldr	r2, [pc, #108]	@ (800c5f0 <HAL_DMA_Abort+0x26c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d004      	beq.n	800c592 <HAL_DMA_Abort+0x20e>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a19      	ldr	r2, [pc, #100]	@ (800c5f4 <HAL_DMA_Abort+0x270>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d132      	bne.n	800c5f8 <HAL_DMA_Abort+0x274>
 800c592:	2301      	movs	r3, #1
 800c594:	e031      	b.n	800c5fa <HAL_DMA_Abort+0x276>
 800c596:	bf00      	nop
 800c598:	40020010 	.word	0x40020010
 800c59c:	40020028 	.word	0x40020028
 800c5a0:	40020040 	.word	0x40020040
 800c5a4:	40020058 	.word	0x40020058
 800c5a8:	40020070 	.word	0x40020070
 800c5ac:	40020088 	.word	0x40020088
 800c5b0:	400200a0 	.word	0x400200a0
 800c5b4:	400200b8 	.word	0x400200b8
 800c5b8:	40020410 	.word	0x40020410
 800c5bc:	40020428 	.word	0x40020428
 800c5c0:	40020440 	.word	0x40020440
 800c5c4:	40020458 	.word	0x40020458
 800c5c8:	40020470 	.word	0x40020470
 800c5cc:	40020488 	.word	0x40020488
 800c5d0:	400204a0 	.word	0x400204a0
 800c5d4:	400204b8 	.word	0x400204b8
 800c5d8:	58025408 	.word	0x58025408
 800c5dc:	5802541c 	.word	0x5802541c
 800c5e0:	58025430 	.word	0x58025430
 800c5e4:	58025444 	.word	0x58025444
 800c5e8:	58025458 	.word	0x58025458
 800c5ec:	5802546c 	.word	0x5802546c
 800c5f0:	58025480 	.word	0x58025480
 800c5f4:	58025494 	.word	0x58025494
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c60c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a6d      	ldr	r2, [pc, #436]	@ (800c7c8 <HAL_DMA_Abort+0x444>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d04a      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a6b      	ldr	r2, [pc, #428]	@ (800c7cc <HAL_DMA_Abort+0x448>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d045      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a6a      	ldr	r2, [pc, #424]	@ (800c7d0 <HAL_DMA_Abort+0x44c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d040      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a68      	ldr	r2, [pc, #416]	@ (800c7d4 <HAL_DMA_Abort+0x450>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d03b      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a67      	ldr	r2, [pc, #412]	@ (800c7d8 <HAL_DMA_Abort+0x454>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d036      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a65      	ldr	r2, [pc, #404]	@ (800c7dc <HAL_DMA_Abort+0x458>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d031      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a64      	ldr	r2, [pc, #400]	@ (800c7e0 <HAL_DMA_Abort+0x45c>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d02c      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a62      	ldr	r2, [pc, #392]	@ (800c7e4 <HAL_DMA_Abort+0x460>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d027      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a61      	ldr	r2, [pc, #388]	@ (800c7e8 <HAL_DMA_Abort+0x464>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d022      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a5f      	ldr	r2, [pc, #380]	@ (800c7ec <HAL_DMA_Abort+0x468>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d01d      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a5e      	ldr	r2, [pc, #376]	@ (800c7f0 <HAL_DMA_Abort+0x46c>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d018      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a5c      	ldr	r2, [pc, #368]	@ (800c7f4 <HAL_DMA_Abort+0x470>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d013      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a5b      	ldr	r2, [pc, #364]	@ (800c7f8 <HAL_DMA_Abort+0x474>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d00e      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a59      	ldr	r2, [pc, #356]	@ (800c7fc <HAL_DMA_Abort+0x478>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d009      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a58      	ldr	r2, [pc, #352]	@ (800c800 <HAL_DMA_Abort+0x47c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d004      	beq.n	800c6ae <HAL_DMA_Abort+0x32a>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a56      	ldr	r2, [pc, #344]	@ (800c804 <HAL_DMA_Abort+0x480>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d108      	bne.n	800c6c0 <HAL_DMA_Abort+0x33c>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f022 0201 	bic.w	r2, r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	e007      	b.n	800c6d0 <HAL_DMA_Abort+0x34c>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 0201 	bic.w	r2, r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6d0:	e013      	b.n	800c6fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c6d2:	f7fc ff5f 	bl	8009594 <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	2b05      	cmp	r3, #5
 800c6de:	d90c      	bls.n	800c6fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e12d      	b.n	800c956 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e5      	bne.n	800c6d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a2f      	ldr	r2, [pc, #188]	@ (800c7c8 <HAL_DMA_Abort+0x444>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d04a      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a2d      	ldr	r2, [pc, #180]	@ (800c7cc <HAL_DMA_Abort+0x448>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d045      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a2c      	ldr	r2, [pc, #176]	@ (800c7d0 <HAL_DMA_Abort+0x44c>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d040      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a2a      	ldr	r2, [pc, #168]	@ (800c7d4 <HAL_DMA_Abort+0x450>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d03b      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a29      	ldr	r2, [pc, #164]	@ (800c7d8 <HAL_DMA_Abort+0x454>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d036      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a27      	ldr	r2, [pc, #156]	@ (800c7dc <HAL_DMA_Abort+0x458>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d031      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a26      	ldr	r2, [pc, #152]	@ (800c7e0 <HAL_DMA_Abort+0x45c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d02c      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a24      	ldr	r2, [pc, #144]	@ (800c7e4 <HAL_DMA_Abort+0x460>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d027      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a23      	ldr	r2, [pc, #140]	@ (800c7e8 <HAL_DMA_Abort+0x464>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d022      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a21      	ldr	r2, [pc, #132]	@ (800c7ec <HAL_DMA_Abort+0x468>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d01d      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a20      	ldr	r2, [pc, #128]	@ (800c7f0 <HAL_DMA_Abort+0x46c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d018      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a1e      	ldr	r2, [pc, #120]	@ (800c7f4 <HAL_DMA_Abort+0x470>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d013      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a1d      	ldr	r2, [pc, #116]	@ (800c7f8 <HAL_DMA_Abort+0x474>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d00e      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a1b      	ldr	r2, [pc, #108]	@ (800c7fc <HAL_DMA_Abort+0x478>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d009      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a1a      	ldr	r2, [pc, #104]	@ (800c800 <HAL_DMA_Abort+0x47c>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d004      	beq.n	800c7a6 <HAL_DMA_Abort+0x422>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a18      	ldr	r2, [pc, #96]	@ (800c804 <HAL_DMA_Abort+0x480>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d101      	bne.n	800c7aa <HAL_DMA_Abort+0x426>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e000      	b.n	800c7ac <HAL_DMA_Abort+0x428>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d02b      	beq.n	800c808 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7ba:	f003 031f 	and.w	r3, r3, #31
 800c7be:	223f      	movs	r2, #63	@ 0x3f
 800c7c0:	409a      	lsls	r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	609a      	str	r2, [r3, #8]
 800c7c6:	e02a      	b.n	800c81e <HAL_DMA_Abort+0x49a>
 800c7c8:	40020010 	.word	0x40020010
 800c7cc:	40020028 	.word	0x40020028
 800c7d0:	40020040 	.word	0x40020040
 800c7d4:	40020058 	.word	0x40020058
 800c7d8:	40020070 	.word	0x40020070
 800c7dc:	40020088 	.word	0x40020088
 800c7e0:	400200a0 	.word	0x400200a0
 800c7e4:	400200b8 	.word	0x400200b8
 800c7e8:	40020410 	.word	0x40020410
 800c7ec:	40020428 	.word	0x40020428
 800c7f0:	40020440 	.word	0x40020440
 800c7f4:	40020458 	.word	0x40020458
 800c7f8:	40020470 	.word	0x40020470
 800c7fc:	40020488 	.word	0x40020488
 800c800:	400204a0 	.word	0x400204a0
 800c804:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c80c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c812:	f003 031f 	and.w	r3, r3, #31
 800c816:	2201      	movs	r2, #1
 800c818:	409a      	lsls	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a4f      	ldr	r2, [pc, #316]	@ (800c960 <HAL_DMA_Abort+0x5dc>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d072      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a4d      	ldr	r2, [pc, #308]	@ (800c964 <HAL_DMA_Abort+0x5e0>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d06d      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a4c      	ldr	r2, [pc, #304]	@ (800c968 <HAL_DMA_Abort+0x5e4>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d068      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a4a      	ldr	r2, [pc, #296]	@ (800c96c <HAL_DMA_Abort+0x5e8>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d063      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a49      	ldr	r2, [pc, #292]	@ (800c970 <HAL_DMA_Abort+0x5ec>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d05e      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a47      	ldr	r2, [pc, #284]	@ (800c974 <HAL_DMA_Abort+0x5f0>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d059      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a46      	ldr	r2, [pc, #280]	@ (800c978 <HAL_DMA_Abort+0x5f4>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d054      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a44      	ldr	r2, [pc, #272]	@ (800c97c <HAL_DMA_Abort+0x5f8>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d04f      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a43      	ldr	r2, [pc, #268]	@ (800c980 <HAL_DMA_Abort+0x5fc>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d04a      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a41      	ldr	r2, [pc, #260]	@ (800c984 <HAL_DMA_Abort+0x600>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d045      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a40      	ldr	r2, [pc, #256]	@ (800c988 <HAL_DMA_Abort+0x604>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d040      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a3e      	ldr	r2, [pc, #248]	@ (800c98c <HAL_DMA_Abort+0x608>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d03b      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a3d      	ldr	r2, [pc, #244]	@ (800c990 <HAL_DMA_Abort+0x60c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d036      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a3b      	ldr	r2, [pc, #236]	@ (800c994 <HAL_DMA_Abort+0x610>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d031      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a3a      	ldr	r2, [pc, #232]	@ (800c998 <HAL_DMA_Abort+0x614>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d02c      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a38      	ldr	r2, [pc, #224]	@ (800c99c <HAL_DMA_Abort+0x618>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d027      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a37      	ldr	r2, [pc, #220]	@ (800c9a0 <HAL_DMA_Abort+0x61c>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d022      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a35      	ldr	r2, [pc, #212]	@ (800c9a4 <HAL_DMA_Abort+0x620>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d01d      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a34      	ldr	r2, [pc, #208]	@ (800c9a8 <HAL_DMA_Abort+0x624>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d018      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a32      	ldr	r2, [pc, #200]	@ (800c9ac <HAL_DMA_Abort+0x628>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d013      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a31      	ldr	r2, [pc, #196]	@ (800c9b0 <HAL_DMA_Abort+0x62c>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d00e      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c9b4 <HAL_DMA_Abort+0x630>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d009      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a2e      	ldr	r2, [pc, #184]	@ (800c9b8 <HAL_DMA_Abort+0x634>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d004      	beq.n	800c90e <HAL_DMA_Abort+0x58a>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a2c      	ldr	r2, [pc, #176]	@ (800c9bc <HAL_DMA_Abort+0x638>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d101      	bne.n	800c912 <HAL_DMA_Abort+0x58e>
 800c90e:	2301      	movs	r3, #1
 800c910:	e000      	b.n	800c914 <HAL_DMA_Abort+0x590>
 800c912:	2300      	movs	r3, #0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d015      	beq.n	800c944 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c920:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00c      	beq.n	800c944 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c938:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c942:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	40020010 	.word	0x40020010
 800c964:	40020028 	.word	0x40020028
 800c968:	40020040 	.word	0x40020040
 800c96c:	40020058 	.word	0x40020058
 800c970:	40020070 	.word	0x40020070
 800c974:	40020088 	.word	0x40020088
 800c978:	400200a0 	.word	0x400200a0
 800c97c:	400200b8 	.word	0x400200b8
 800c980:	40020410 	.word	0x40020410
 800c984:	40020428 	.word	0x40020428
 800c988:	40020440 	.word	0x40020440
 800c98c:	40020458 	.word	0x40020458
 800c990:	40020470 	.word	0x40020470
 800c994:	40020488 	.word	0x40020488
 800c998:	400204a0 	.word	0x400204a0
 800c99c:	400204b8 	.word	0x400204b8
 800c9a0:	58025408 	.word	0x58025408
 800c9a4:	5802541c 	.word	0x5802541c
 800c9a8:	58025430 	.word	0x58025430
 800c9ac:	58025444 	.word	0x58025444
 800c9b0:	58025458 	.word	0x58025458
 800c9b4:	5802546c 	.word	0x5802546c
 800c9b8:	58025480 	.word	0x58025480
 800c9bc:	58025494 	.word	0x58025494

0800c9c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e237      	b.n	800ce42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d004      	beq.n	800c9e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2280      	movs	r2, #128	@ 0x80
 800c9e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e22c      	b.n	800ce42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a5c      	ldr	r2, [pc, #368]	@ (800cb60 <HAL_DMA_Abort_IT+0x1a0>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d04a      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a5b      	ldr	r2, [pc, #364]	@ (800cb64 <HAL_DMA_Abort_IT+0x1a4>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d045      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a59      	ldr	r2, [pc, #356]	@ (800cb68 <HAL_DMA_Abort_IT+0x1a8>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d040      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a58      	ldr	r2, [pc, #352]	@ (800cb6c <HAL_DMA_Abort_IT+0x1ac>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d03b      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a56      	ldr	r2, [pc, #344]	@ (800cb70 <HAL_DMA_Abort_IT+0x1b0>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d036      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a55      	ldr	r2, [pc, #340]	@ (800cb74 <HAL_DMA_Abort_IT+0x1b4>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d031      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a53      	ldr	r2, [pc, #332]	@ (800cb78 <HAL_DMA_Abort_IT+0x1b8>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d02c      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a52      	ldr	r2, [pc, #328]	@ (800cb7c <HAL_DMA_Abort_IT+0x1bc>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d027      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a50      	ldr	r2, [pc, #320]	@ (800cb80 <HAL_DMA_Abort_IT+0x1c0>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d022      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a4f      	ldr	r2, [pc, #316]	@ (800cb84 <HAL_DMA_Abort_IT+0x1c4>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d01d      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a4d      	ldr	r2, [pc, #308]	@ (800cb88 <HAL_DMA_Abort_IT+0x1c8>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d018      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a4c      	ldr	r2, [pc, #304]	@ (800cb8c <HAL_DMA_Abort_IT+0x1cc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d013      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a4a      	ldr	r2, [pc, #296]	@ (800cb90 <HAL_DMA_Abort_IT+0x1d0>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00e      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a49      	ldr	r2, [pc, #292]	@ (800cb94 <HAL_DMA_Abort_IT+0x1d4>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d009      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a47      	ldr	r2, [pc, #284]	@ (800cb98 <HAL_DMA_Abort_IT+0x1d8>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d004      	beq.n	800ca88 <HAL_DMA_Abort_IT+0xc8>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a46      	ldr	r2, [pc, #280]	@ (800cb9c <HAL_DMA_Abort_IT+0x1dc>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d101      	bne.n	800ca8c <HAL_DMA_Abort_IT+0xcc>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e000      	b.n	800ca8e <HAL_DMA_Abort_IT+0xce>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f000 8086 	beq.w	800cba0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2204      	movs	r2, #4
 800ca98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a2f      	ldr	r2, [pc, #188]	@ (800cb60 <HAL_DMA_Abort_IT+0x1a0>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d04a      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a2e      	ldr	r2, [pc, #184]	@ (800cb64 <HAL_DMA_Abort_IT+0x1a4>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d045      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a2c      	ldr	r2, [pc, #176]	@ (800cb68 <HAL_DMA_Abort_IT+0x1a8>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d040      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a2b      	ldr	r2, [pc, #172]	@ (800cb6c <HAL_DMA_Abort_IT+0x1ac>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d03b      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a29      	ldr	r2, [pc, #164]	@ (800cb70 <HAL_DMA_Abort_IT+0x1b0>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d036      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a28      	ldr	r2, [pc, #160]	@ (800cb74 <HAL_DMA_Abort_IT+0x1b4>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d031      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a26      	ldr	r2, [pc, #152]	@ (800cb78 <HAL_DMA_Abort_IT+0x1b8>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d02c      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a25      	ldr	r2, [pc, #148]	@ (800cb7c <HAL_DMA_Abort_IT+0x1bc>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d027      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a23      	ldr	r2, [pc, #140]	@ (800cb80 <HAL_DMA_Abort_IT+0x1c0>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d022      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a22      	ldr	r2, [pc, #136]	@ (800cb84 <HAL_DMA_Abort_IT+0x1c4>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d01d      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a20      	ldr	r2, [pc, #128]	@ (800cb88 <HAL_DMA_Abort_IT+0x1c8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d018      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a1f      	ldr	r2, [pc, #124]	@ (800cb8c <HAL_DMA_Abort_IT+0x1cc>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d013      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a1d      	ldr	r2, [pc, #116]	@ (800cb90 <HAL_DMA_Abort_IT+0x1d0>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d00e      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a1c      	ldr	r2, [pc, #112]	@ (800cb94 <HAL_DMA_Abort_IT+0x1d4>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d009      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a1a      	ldr	r2, [pc, #104]	@ (800cb98 <HAL_DMA_Abort_IT+0x1d8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d004      	beq.n	800cb3c <HAL_DMA_Abort_IT+0x17c>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a19      	ldr	r2, [pc, #100]	@ (800cb9c <HAL_DMA_Abort_IT+0x1dc>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d108      	bne.n	800cb4e <HAL_DMA_Abort_IT+0x18e>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f022 0201 	bic.w	r2, r2, #1
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	e178      	b.n	800ce40 <HAL_DMA_Abort_IT+0x480>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f022 0201 	bic.w	r2, r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	e16f      	b.n	800ce40 <HAL_DMA_Abort_IT+0x480>
 800cb60:	40020010 	.word	0x40020010
 800cb64:	40020028 	.word	0x40020028
 800cb68:	40020040 	.word	0x40020040
 800cb6c:	40020058 	.word	0x40020058
 800cb70:	40020070 	.word	0x40020070
 800cb74:	40020088 	.word	0x40020088
 800cb78:	400200a0 	.word	0x400200a0
 800cb7c:	400200b8 	.word	0x400200b8
 800cb80:	40020410 	.word	0x40020410
 800cb84:	40020428 	.word	0x40020428
 800cb88:	40020440 	.word	0x40020440
 800cb8c:	40020458 	.word	0x40020458
 800cb90:	40020470 	.word	0x40020470
 800cb94:	40020488 	.word	0x40020488
 800cb98:	400204a0 	.word	0x400204a0
 800cb9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f022 020e 	bic.w	r2, r2, #14
 800cbae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a6c      	ldr	r2, [pc, #432]	@ (800cd68 <HAL_DMA_Abort_IT+0x3a8>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d04a      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a6b      	ldr	r2, [pc, #428]	@ (800cd6c <HAL_DMA_Abort_IT+0x3ac>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d045      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a69      	ldr	r2, [pc, #420]	@ (800cd70 <HAL_DMA_Abort_IT+0x3b0>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d040      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a68      	ldr	r2, [pc, #416]	@ (800cd74 <HAL_DMA_Abort_IT+0x3b4>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d03b      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a66      	ldr	r2, [pc, #408]	@ (800cd78 <HAL_DMA_Abort_IT+0x3b8>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d036      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a65      	ldr	r2, [pc, #404]	@ (800cd7c <HAL_DMA_Abort_IT+0x3bc>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d031      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a63      	ldr	r2, [pc, #396]	@ (800cd80 <HAL_DMA_Abort_IT+0x3c0>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d02c      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a62      	ldr	r2, [pc, #392]	@ (800cd84 <HAL_DMA_Abort_IT+0x3c4>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d027      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a60      	ldr	r2, [pc, #384]	@ (800cd88 <HAL_DMA_Abort_IT+0x3c8>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d022      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a5f      	ldr	r2, [pc, #380]	@ (800cd8c <HAL_DMA_Abort_IT+0x3cc>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d01d      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a5d      	ldr	r2, [pc, #372]	@ (800cd90 <HAL_DMA_Abort_IT+0x3d0>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d018      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a5c      	ldr	r2, [pc, #368]	@ (800cd94 <HAL_DMA_Abort_IT+0x3d4>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d013      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a5a      	ldr	r2, [pc, #360]	@ (800cd98 <HAL_DMA_Abort_IT+0x3d8>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d00e      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a59      	ldr	r2, [pc, #356]	@ (800cd9c <HAL_DMA_Abort_IT+0x3dc>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d009      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a57      	ldr	r2, [pc, #348]	@ (800cda0 <HAL_DMA_Abort_IT+0x3e0>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d004      	beq.n	800cc50 <HAL_DMA_Abort_IT+0x290>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a56      	ldr	r2, [pc, #344]	@ (800cda4 <HAL_DMA_Abort_IT+0x3e4>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d108      	bne.n	800cc62 <HAL_DMA_Abort_IT+0x2a2>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f022 0201 	bic.w	r2, r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e007      	b.n	800cc72 <HAL_DMA_Abort_IT+0x2b2>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f022 0201 	bic.w	r2, r2, #1
 800cc70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a3c      	ldr	r2, [pc, #240]	@ (800cd68 <HAL_DMA_Abort_IT+0x3a8>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d072      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a3a      	ldr	r2, [pc, #232]	@ (800cd6c <HAL_DMA_Abort_IT+0x3ac>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d06d      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a39      	ldr	r2, [pc, #228]	@ (800cd70 <HAL_DMA_Abort_IT+0x3b0>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d068      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a37      	ldr	r2, [pc, #220]	@ (800cd74 <HAL_DMA_Abort_IT+0x3b4>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d063      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a36      	ldr	r2, [pc, #216]	@ (800cd78 <HAL_DMA_Abort_IT+0x3b8>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d05e      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a34      	ldr	r2, [pc, #208]	@ (800cd7c <HAL_DMA_Abort_IT+0x3bc>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d059      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a33      	ldr	r2, [pc, #204]	@ (800cd80 <HAL_DMA_Abort_IT+0x3c0>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d054      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a31      	ldr	r2, [pc, #196]	@ (800cd84 <HAL_DMA_Abort_IT+0x3c4>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d04f      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a30      	ldr	r2, [pc, #192]	@ (800cd88 <HAL_DMA_Abort_IT+0x3c8>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d04a      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a2e      	ldr	r2, [pc, #184]	@ (800cd8c <HAL_DMA_Abort_IT+0x3cc>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d045      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a2d      	ldr	r2, [pc, #180]	@ (800cd90 <HAL_DMA_Abort_IT+0x3d0>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d040      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a2b      	ldr	r2, [pc, #172]	@ (800cd94 <HAL_DMA_Abort_IT+0x3d4>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d03b      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a2a      	ldr	r2, [pc, #168]	@ (800cd98 <HAL_DMA_Abort_IT+0x3d8>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d036      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a28      	ldr	r2, [pc, #160]	@ (800cd9c <HAL_DMA_Abort_IT+0x3dc>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d031      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a27      	ldr	r2, [pc, #156]	@ (800cda0 <HAL_DMA_Abort_IT+0x3e0>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d02c      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a25      	ldr	r2, [pc, #148]	@ (800cda4 <HAL_DMA_Abort_IT+0x3e4>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d027      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a24      	ldr	r2, [pc, #144]	@ (800cda8 <HAL_DMA_Abort_IT+0x3e8>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d022      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a22      	ldr	r2, [pc, #136]	@ (800cdac <HAL_DMA_Abort_IT+0x3ec>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d01d      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a21      	ldr	r2, [pc, #132]	@ (800cdb0 <HAL_DMA_Abort_IT+0x3f0>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d018      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a1f      	ldr	r2, [pc, #124]	@ (800cdb4 <HAL_DMA_Abort_IT+0x3f4>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d013      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a1e      	ldr	r2, [pc, #120]	@ (800cdb8 <HAL_DMA_Abort_IT+0x3f8>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d00e      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a1c      	ldr	r2, [pc, #112]	@ (800cdbc <HAL_DMA_Abort_IT+0x3fc>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d009      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a1b      	ldr	r2, [pc, #108]	@ (800cdc0 <HAL_DMA_Abort_IT+0x400>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d004      	beq.n	800cd62 <HAL_DMA_Abort_IT+0x3a2>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a19      	ldr	r2, [pc, #100]	@ (800cdc4 <HAL_DMA_Abort_IT+0x404>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d132      	bne.n	800cdc8 <HAL_DMA_Abort_IT+0x408>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e031      	b.n	800cdca <HAL_DMA_Abort_IT+0x40a>
 800cd66:	bf00      	nop
 800cd68:	40020010 	.word	0x40020010
 800cd6c:	40020028 	.word	0x40020028
 800cd70:	40020040 	.word	0x40020040
 800cd74:	40020058 	.word	0x40020058
 800cd78:	40020070 	.word	0x40020070
 800cd7c:	40020088 	.word	0x40020088
 800cd80:	400200a0 	.word	0x400200a0
 800cd84:	400200b8 	.word	0x400200b8
 800cd88:	40020410 	.word	0x40020410
 800cd8c:	40020428 	.word	0x40020428
 800cd90:	40020440 	.word	0x40020440
 800cd94:	40020458 	.word	0x40020458
 800cd98:	40020470 	.word	0x40020470
 800cd9c:	40020488 	.word	0x40020488
 800cda0:	400204a0 	.word	0x400204a0
 800cda4:	400204b8 	.word	0x400204b8
 800cda8:	58025408 	.word	0x58025408
 800cdac:	5802541c 	.word	0x5802541c
 800cdb0:	58025430 	.word	0x58025430
 800cdb4:	58025444 	.word	0x58025444
 800cdb8:	58025458 	.word	0x58025458
 800cdbc:	5802546c 	.word	0x5802546c
 800cdc0:	58025480 	.word	0x58025480
 800cdc4:	58025494 	.word	0x58025494
 800cdc8:	2300      	movs	r3, #0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d028      	beq.n	800ce20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cddc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cde2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cde8:	f003 031f 	and.w	r3, r3, #31
 800cdec:	2201      	movs	r2, #1
 800cdee:	409a      	lsls	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cdfc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00c      	beq.n	800ce20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ce1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop

0800ce4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	@ 0x28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ce58:	4b67      	ldr	r3, [pc, #412]	@ (800cff8 <HAL_DMA_IRQHandler+0x1ac>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a67      	ldr	r2, [pc, #412]	@ (800cffc <HAL_DMA_IRQHandler+0x1b0>)
 800ce5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce62:	0a9b      	lsrs	r3, r3, #10
 800ce64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a5f      	ldr	r2, [pc, #380]	@ (800d000 <HAL_DMA_IRQHandler+0x1b4>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d04a      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a5d      	ldr	r2, [pc, #372]	@ (800d004 <HAL_DMA_IRQHandler+0x1b8>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d045      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a5c      	ldr	r2, [pc, #368]	@ (800d008 <HAL_DMA_IRQHandler+0x1bc>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d040      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a5a      	ldr	r2, [pc, #360]	@ (800d00c <HAL_DMA_IRQHandler+0x1c0>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d03b      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a59      	ldr	r2, [pc, #356]	@ (800d010 <HAL_DMA_IRQHandler+0x1c4>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d036      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a57      	ldr	r2, [pc, #348]	@ (800d014 <HAL_DMA_IRQHandler+0x1c8>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d031      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a56      	ldr	r2, [pc, #344]	@ (800d018 <HAL_DMA_IRQHandler+0x1cc>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d02c      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a54      	ldr	r2, [pc, #336]	@ (800d01c <HAL_DMA_IRQHandler+0x1d0>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d027      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a53      	ldr	r2, [pc, #332]	@ (800d020 <HAL_DMA_IRQHandler+0x1d4>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d022      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a51      	ldr	r2, [pc, #324]	@ (800d024 <HAL_DMA_IRQHandler+0x1d8>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d01d      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a50      	ldr	r2, [pc, #320]	@ (800d028 <HAL_DMA_IRQHandler+0x1dc>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d018      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a4e      	ldr	r2, [pc, #312]	@ (800d02c <HAL_DMA_IRQHandler+0x1e0>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d013      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a4d      	ldr	r2, [pc, #308]	@ (800d030 <HAL_DMA_IRQHandler+0x1e4>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d00e      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a4b      	ldr	r2, [pc, #300]	@ (800d034 <HAL_DMA_IRQHandler+0x1e8>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d009      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a4a      	ldr	r2, [pc, #296]	@ (800d038 <HAL_DMA_IRQHandler+0x1ec>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d004      	beq.n	800cf1e <HAL_DMA_IRQHandler+0xd2>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a48      	ldr	r2, [pc, #288]	@ (800d03c <HAL_DMA_IRQHandler+0x1f0>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d101      	bne.n	800cf22 <HAL_DMA_IRQHandler+0xd6>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e000      	b.n	800cf24 <HAL_DMA_IRQHandler+0xd8>
 800cf22:	2300      	movs	r3, #0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 842b 	beq.w	800d780 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf2e:	f003 031f 	and.w	r3, r3, #31
 800cf32:	2208      	movs	r2, #8
 800cf34:	409a      	lsls	r2, r3
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	4013      	ands	r3, r2
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 80a2 	beq.w	800d084 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a2e      	ldr	r2, [pc, #184]	@ (800d000 <HAL_DMA_IRQHandler+0x1b4>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d04a      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a2d      	ldr	r2, [pc, #180]	@ (800d004 <HAL_DMA_IRQHandler+0x1b8>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d045      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a2b      	ldr	r2, [pc, #172]	@ (800d008 <HAL_DMA_IRQHandler+0x1bc>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d040      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a2a      	ldr	r2, [pc, #168]	@ (800d00c <HAL_DMA_IRQHandler+0x1c0>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d03b      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a28      	ldr	r2, [pc, #160]	@ (800d010 <HAL_DMA_IRQHandler+0x1c4>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d036      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a27      	ldr	r2, [pc, #156]	@ (800d014 <HAL_DMA_IRQHandler+0x1c8>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d031      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a25      	ldr	r2, [pc, #148]	@ (800d018 <HAL_DMA_IRQHandler+0x1cc>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d02c      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a24      	ldr	r2, [pc, #144]	@ (800d01c <HAL_DMA_IRQHandler+0x1d0>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d027      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a22      	ldr	r2, [pc, #136]	@ (800d020 <HAL_DMA_IRQHandler+0x1d4>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d022      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a21      	ldr	r2, [pc, #132]	@ (800d024 <HAL_DMA_IRQHandler+0x1d8>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d01d      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a1f      	ldr	r2, [pc, #124]	@ (800d028 <HAL_DMA_IRQHandler+0x1dc>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d018      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a1e      	ldr	r2, [pc, #120]	@ (800d02c <HAL_DMA_IRQHandler+0x1e0>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d013      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a1c      	ldr	r2, [pc, #112]	@ (800d030 <HAL_DMA_IRQHandler+0x1e4>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d00e      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a1b      	ldr	r2, [pc, #108]	@ (800d034 <HAL_DMA_IRQHandler+0x1e8>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d009      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a19      	ldr	r2, [pc, #100]	@ (800d038 <HAL_DMA_IRQHandler+0x1ec>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d004      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x194>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a18      	ldr	r2, [pc, #96]	@ (800d03c <HAL_DMA_IRQHandler+0x1f0>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d12f      	bne.n	800d040 <HAL_DMA_IRQHandler+0x1f4>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f003 0304 	and.w	r3, r3, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bf14      	ite	ne
 800cfee:	2301      	movne	r3, #1
 800cff0:	2300      	moveq	r3, #0
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	e02e      	b.n	800d054 <HAL_DMA_IRQHandler+0x208>
 800cff6:	bf00      	nop
 800cff8:	24000004 	.word	0x24000004
 800cffc:	1b4e81b5 	.word	0x1b4e81b5
 800d000:	40020010 	.word	0x40020010
 800d004:	40020028 	.word	0x40020028
 800d008:	40020040 	.word	0x40020040
 800d00c:	40020058 	.word	0x40020058
 800d010:	40020070 	.word	0x40020070
 800d014:	40020088 	.word	0x40020088
 800d018:	400200a0 	.word	0x400200a0
 800d01c:	400200b8 	.word	0x400200b8
 800d020:	40020410 	.word	0x40020410
 800d024:	40020428 	.word	0x40020428
 800d028:	40020440 	.word	0x40020440
 800d02c:	40020458 	.word	0x40020458
 800d030:	40020470 	.word	0x40020470
 800d034:	40020488 	.word	0x40020488
 800d038:	400204a0 	.word	0x400204a0
 800d03c:	400204b8 	.word	0x400204b8
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f003 0308 	and.w	r3, r3, #8
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bf14      	ite	ne
 800d04e:	2301      	movne	r3, #1
 800d050:	2300      	moveq	r3, #0
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d015      	beq.n	800d084 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f022 0204 	bic.w	r2, r2, #4
 800d066:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d06c:	f003 031f 	and.w	r3, r3, #31
 800d070:	2208      	movs	r2, #8
 800d072:	409a      	lsls	r2, r3
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d07c:	f043 0201 	orr.w	r2, r3, #1
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d088:	f003 031f 	and.w	r3, r3, #31
 800d08c:	69ba      	ldr	r2, [r7, #24]
 800d08e:	fa22 f303 	lsr.w	r3, r2, r3
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	2b00      	cmp	r3, #0
 800d098:	d06e      	beq.n	800d178 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a69      	ldr	r2, [pc, #420]	@ (800d244 <HAL_DMA_IRQHandler+0x3f8>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d04a      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a67      	ldr	r2, [pc, #412]	@ (800d248 <HAL_DMA_IRQHandler+0x3fc>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d045      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a66      	ldr	r2, [pc, #408]	@ (800d24c <HAL_DMA_IRQHandler+0x400>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d040      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a64      	ldr	r2, [pc, #400]	@ (800d250 <HAL_DMA_IRQHandler+0x404>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d03b      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a63      	ldr	r2, [pc, #396]	@ (800d254 <HAL_DMA_IRQHandler+0x408>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d036      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a61      	ldr	r2, [pc, #388]	@ (800d258 <HAL_DMA_IRQHandler+0x40c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d031      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a60      	ldr	r2, [pc, #384]	@ (800d25c <HAL_DMA_IRQHandler+0x410>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d02c      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a5e      	ldr	r2, [pc, #376]	@ (800d260 <HAL_DMA_IRQHandler+0x414>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d027      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a5d      	ldr	r2, [pc, #372]	@ (800d264 <HAL_DMA_IRQHandler+0x418>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d022      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a5b      	ldr	r2, [pc, #364]	@ (800d268 <HAL_DMA_IRQHandler+0x41c>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d01d      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4a5a      	ldr	r2, [pc, #360]	@ (800d26c <HAL_DMA_IRQHandler+0x420>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d018      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a58      	ldr	r2, [pc, #352]	@ (800d270 <HAL_DMA_IRQHandler+0x424>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d013      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a57      	ldr	r2, [pc, #348]	@ (800d274 <HAL_DMA_IRQHandler+0x428>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d00e      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a55      	ldr	r2, [pc, #340]	@ (800d278 <HAL_DMA_IRQHandler+0x42c>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d009      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a54      	ldr	r2, [pc, #336]	@ (800d27c <HAL_DMA_IRQHandler+0x430>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d004      	beq.n	800d13a <HAL_DMA_IRQHandler+0x2ee>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a52      	ldr	r2, [pc, #328]	@ (800d280 <HAL_DMA_IRQHandler+0x434>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d10a      	bne.n	800d150 <HAL_DMA_IRQHandler+0x304>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	695b      	ldr	r3, [r3, #20]
 800d140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d144:	2b00      	cmp	r3, #0
 800d146:	bf14      	ite	ne
 800d148:	2301      	movne	r3, #1
 800d14a:	2300      	moveq	r3, #0
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	e003      	b.n	800d158 <HAL_DMA_IRQHandler+0x30c>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2300      	movs	r3, #0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00d      	beq.n	800d178 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d160:	f003 031f 	and.w	r3, r3, #31
 800d164:	2201      	movs	r2, #1
 800d166:	409a      	lsls	r2, r3
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d170:	f043 0202 	orr.w	r2, r3, #2
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d17c:	f003 031f 	and.w	r3, r3, #31
 800d180:	2204      	movs	r2, #4
 800d182:	409a      	lsls	r2, r3
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	4013      	ands	r3, r2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 808f 	beq.w	800d2ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a2c      	ldr	r2, [pc, #176]	@ (800d244 <HAL_DMA_IRQHandler+0x3f8>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d04a      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a2a      	ldr	r2, [pc, #168]	@ (800d248 <HAL_DMA_IRQHandler+0x3fc>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d045      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a29      	ldr	r2, [pc, #164]	@ (800d24c <HAL_DMA_IRQHandler+0x400>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d040      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a27      	ldr	r2, [pc, #156]	@ (800d250 <HAL_DMA_IRQHandler+0x404>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d03b      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a26      	ldr	r2, [pc, #152]	@ (800d254 <HAL_DMA_IRQHandler+0x408>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d036      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a24      	ldr	r2, [pc, #144]	@ (800d258 <HAL_DMA_IRQHandler+0x40c>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d031      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a23      	ldr	r2, [pc, #140]	@ (800d25c <HAL_DMA_IRQHandler+0x410>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d02c      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a21      	ldr	r2, [pc, #132]	@ (800d260 <HAL_DMA_IRQHandler+0x414>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d027      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a20      	ldr	r2, [pc, #128]	@ (800d264 <HAL_DMA_IRQHandler+0x418>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d022      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a1e      	ldr	r2, [pc, #120]	@ (800d268 <HAL_DMA_IRQHandler+0x41c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d01d      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a1d      	ldr	r2, [pc, #116]	@ (800d26c <HAL_DMA_IRQHandler+0x420>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d018      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a1b      	ldr	r2, [pc, #108]	@ (800d270 <HAL_DMA_IRQHandler+0x424>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d013      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a1a      	ldr	r2, [pc, #104]	@ (800d274 <HAL_DMA_IRQHandler+0x428>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00e      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a18      	ldr	r2, [pc, #96]	@ (800d278 <HAL_DMA_IRQHandler+0x42c>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d009      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a17      	ldr	r2, [pc, #92]	@ (800d27c <HAL_DMA_IRQHandler+0x430>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d004      	beq.n	800d22e <HAL_DMA_IRQHandler+0x3e2>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a15      	ldr	r2, [pc, #84]	@ (800d280 <HAL_DMA_IRQHandler+0x434>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d12a      	bne.n	800d284 <HAL_DMA_IRQHandler+0x438>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f003 0302 	and.w	r3, r3, #2
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bf14      	ite	ne
 800d23c:	2301      	movne	r3, #1
 800d23e:	2300      	moveq	r3, #0
 800d240:	b2db      	uxtb	r3, r3
 800d242:	e023      	b.n	800d28c <HAL_DMA_IRQHandler+0x440>
 800d244:	40020010 	.word	0x40020010
 800d248:	40020028 	.word	0x40020028
 800d24c:	40020040 	.word	0x40020040
 800d250:	40020058 	.word	0x40020058
 800d254:	40020070 	.word	0x40020070
 800d258:	40020088 	.word	0x40020088
 800d25c:	400200a0 	.word	0x400200a0
 800d260:	400200b8 	.word	0x400200b8
 800d264:	40020410 	.word	0x40020410
 800d268:	40020428 	.word	0x40020428
 800d26c:	40020440 	.word	0x40020440
 800d270:	40020458 	.word	0x40020458
 800d274:	40020470 	.word	0x40020470
 800d278:	40020488 	.word	0x40020488
 800d27c:	400204a0 	.word	0x400204a0
 800d280:	400204b8 	.word	0x400204b8
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2300      	movs	r3, #0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00d      	beq.n	800d2ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d294:	f003 031f 	and.w	r3, r3, #31
 800d298:	2204      	movs	r2, #4
 800d29a:	409a      	lsls	r2, r3
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2a4:	f043 0204 	orr.w	r2, r3, #4
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2b0:	f003 031f 	and.w	r3, r3, #31
 800d2b4:	2210      	movs	r2, #16
 800d2b6:	409a      	lsls	r2, r3
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 80a6 	beq.w	800d40e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a85      	ldr	r2, [pc, #532]	@ (800d4dc <HAL_DMA_IRQHandler+0x690>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d04a      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a83      	ldr	r2, [pc, #524]	@ (800d4e0 <HAL_DMA_IRQHandler+0x694>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d045      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a82      	ldr	r2, [pc, #520]	@ (800d4e4 <HAL_DMA_IRQHandler+0x698>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d040      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a80      	ldr	r2, [pc, #512]	@ (800d4e8 <HAL_DMA_IRQHandler+0x69c>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d03b      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a7f      	ldr	r2, [pc, #508]	@ (800d4ec <HAL_DMA_IRQHandler+0x6a0>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d036      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a7d      	ldr	r2, [pc, #500]	@ (800d4f0 <HAL_DMA_IRQHandler+0x6a4>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d031      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a7c      	ldr	r2, [pc, #496]	@ (800d4f4 <HAL_DMA_IRQHandler+0x6a8>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d02c      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a7a      	ldr	r2, [pc, #488]	@ (800d4f8 <HAL_DMA_IRQHandler+0x6ac>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d027      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a79      	ldr	r2, [pc, #484]	@ (800d4fc <HAL_DMA_IRQHandler+0x6b0>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d022      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a77      	ldr	r2, [pc, #476]	@ (800d500 <HAL_DMA_IRQHandler+0x6b4>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d01d      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a76      	ldr	r2, [pc, #472]	@ (800d504 <HAL_DMA_IRQHandler+0x6b8>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d018      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a74      	ldr	r2, [pc, #464]	@ (800d508 <HAL_DMA_IRQHandler+0x6bc>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d013      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a73      	ldr	r2, [pc, #460]	@ (800d50c <HAL_DMA_IRQHandler+0x6c0>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d00e      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a71      	ldr	r2, [pc, #452]	@ (800d510 <HAL_DMA_IRQHandler+0x6c4>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d009      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a70      	ldr	r2, [pc, #448]	@ (800d514 <HAL_DMA_IRQHandler+0x6c8>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d004      	beq.n	800d362 <HAL_DMA_IRQHandler+0x516>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a6e      	ldr	r2, [pc, #440]	@ (800d518 <HAL_DMA_IRQHandler+0x6cc>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d10a      	bne.n	800d378 <HAL_DMA_IRQHandler+0x52c>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0308 	and.w	r3, r3, #8
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	bf14      	ite	ne
 800d370:	2301      	movne	r3, #1
 800d372:	2300      	moveq	r3, #0
 800d374:	b2db      	uxtb	r3, r3
 800d376:	e009      	b.n	800d38c <HAL_DMA_IRQHandler+0x540>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	bf14      	ite	ne
 800d386:	2301      	movne	r3, #1
 800d388:	2300      	moveq	r3, #0
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d03e      	beq.n	800d40e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d394:	f003 031f 	and.w	r3, r3, #31
 800d398:	2210      	movs	r2, #16
 800d39a:	409a      	lsls	r2, r3
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d018      	beq.n	800d3e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d108      	bne.n	800d3ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d024      	beq.n	800d40e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	4798      	blx	r3
 800d3cc:	e01f      	b.n	800d40e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d01b      	beq.n	800d40e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	4798      	blx	r3
 800d3de:	e016      	b.n	800d40e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d107      	bne.n	800d3fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f022 0208 	bic.w	r2, r2, #8
 800d3fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d402:	2b00      	cmp	r3, #0
 800d404:	d003      	beq.n	800d40e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d412:	f003 031f 	and.w	r3, r3, #31
 800d416:	2220      	movs	r2, #32
 800d418:	409a      	lsls	r2, r3
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	4013      	ands	r3, r2
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 8110 	beq.w	800d644 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a2c      	ldr	r2, [pc, #176]	@ (800d4dc <HAL_DMA_IRQHandler+0x690>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d04a      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a2b      	ldr	r2, [pc, #172]	@ (800d4e0 <HAL_DMA_IRQHandler+0x694>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d045      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a29      	ldr	r2, [pc, #164]	@ (800d4e4 <HAL_DMA_IRQHandler+0x698>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d040      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a28      	ldr	r2, [pc, #160]	@ (800d4e8 <HAL_DMA_IRQHandler+0x69c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d03b      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a26      	ldr	r2, [pc, #152]	@ (800d4ec <HAL_DMA_IRQHandler+0x6a0>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d036      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a25      	ldr	r2, [pc, #148]	@ (800d4f0 <HAL_DMA_IRQHandler+0x6a4>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d031      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a23      	ldr	r2, [pc, #140]	@ (800d4f4 <HAL_DMA_IRQHandler+0x6a8>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d02c      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a22      	ldr	r2, [pc, #136]	@ (800d4f8 <HAL_DMA_IRQHandler+0x6ac>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d027      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a20      	ldr	r2, [pc, #128]	@ (800d4fc <HAL_DMA_IRQHandler+0x6b0>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d022      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a1f      	ldr	r2, [pc, #124]	@ (800d500 <HAL_DMA_IRQHandler+0x6b4>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d01d      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a1d      	ldr	r2, [pc, #116]	@ (800d504 <HAL_DMA_IRQHandler+0x6b8>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d018      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4a1c      	ldr	r2, [pc, #112]	@ (800d508 <HAL_DMA_IRQHandler+0x6bc>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d013      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a1a      	ldr	r2, [pc, #104]	@ (800d50c <HAL_DMA_IRQHandler+0x6c0>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d00e      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a19      	ldr	r2, [pc, #100]	@ (800d510 <HAL_DMA_IRQHandler+0x6c4>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d009      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a17      	ldr	r2, [pc, #92]	@ (800d514 <HAL_DMA_IRQHandler+0x6c8>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d004      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x678>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a16      	ldr	r2, [pc, #88]	@ (800d518 <HAL_DMA_IRQHandler+0x6cc>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d12b      	bne.n	800d51c <HAL_DMA_IRQHandler+0x6d0>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f003 0310 	and.w	r3, r3, #16
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	bf14      	ite	ne
 800d4d2:	2301      	movne	r3, #1
 800d4d4:	2300      	moveq	r3, #0
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	e02a      	b.n	800d530 <HAL_DMA_IRQHandler+0x6e4>
 800d4da:	bf00      	nop
 800d4dc:	40020010 	.word	0x40020010
 800d4e0:	40020028 	.word	0x40020028
 800d4e4:	40020040 	.word	0x40020040
 800d4e8:	40020058 	.word	0x40020058
 800d4ec:	40020070 	.word	0x40020070
 800d4f0:	40020088 	.word	0x40020088
 800d4f4:	400200a0 	.word	0x400200a0
 800d4f8:	400200b8 	.word	0x400200b8
 800d4fc:	40020410 	.word	0x40020410
 800d500:	40020428 	.word	0x40020428
 800d504:	40020440 	.word	0x40020440
 800d508:	40020458 	.word	0x40020458
 800d50c:	40020470 	.word	0x40020470
 800d510:	40020488 	.word	0x40020488
 800d514:	400204a0 	.word	0x400204a0
 800d518:	400204b8 	.word	0x400204b8
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 0302 	and.w	r3, r3, #2
 800d526:	2b00      	cmp	r3, #0
 800d528:	bf14      	ite	ne
 800d52a:	2301      	movne	r3, #1
 800d52c:	2300      	moveq	r3, #0
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 8087 	beq.w	800d644 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d53a:	f003 031f 	and.w	r3, r3, #31
 800d53e:	2220      	movs	r2, #32
 800d540:	409a      	lsls	r2, r3
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b04      	cmp	r3, #4
 800d550:	d139      	bne.n	800d5c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f022 0216 	bic.w	r2, r2, #22
 800d560:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	695a      	ldr	r2, [r3, #20]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d570:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <HAL_DMA_IRQHandler+0x736>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f022 0208 	bic.w	r2, r2, #8
 800d590:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d596:	f003 031f 	and.w	r3, r3, #31
 800d59a:	223f      	movs	r2, #63	@ 0x3f
 800d59c:	409a      	lsls	r2, r3
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f000 834a 	beq.w	800dc50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	4798      	blx	r3
          }
          return;
 800d5c4:	e344      	b.n	800dc50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d018      	beq.n	800d606 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d108      	bne.n	800d5f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d02c      	beq.n	800d644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	4798      	blx	r3
 800d5f2:	e027      	b.n	800d644 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d023      	beq.n	800d644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	4798      	blx	r3
 800d604:	e01e      	b.n	800d644 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10f      	bne.n	800d634 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 0210 	bic.w	r2, r2, #16
 800d622:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d003      	beq.n	800d644 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 8306 	beq.w	800dc5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 8088 	beq.w	800d76c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2204      	movs	r2, #4
 800d660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a7a      	ldr	r2, [pc, #488]	@ (800d854 <HAL_DMA_IRQHandler+0xa08>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d04a      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a79      	ldr	r2, [pc, #484]	@ (800d858 <HAL_DMA_IRQHandler+0xa0c>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d045      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a77      	ldr	r2, [pc, #476]	@ (800d85c <HAL_DMA_IRQHandler+0xa10>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d040      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a76      	ldr	r2, [pc, #472]	@ (800d860 <HAL_DMA_IRQHandler+0xa14>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d03b      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a74      	ldr	r2, [pc, #464]	@ (800d864 <HAL_DMA_IRQHandler+0xa18>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d036      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a73      	ldr	r2, [pc, #460]	@ (800d868 <HAL_DMA_IRQHandler+0xa1c>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d031      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a71      	ldr	r2, [pc, #452]	@ (800d86c <HAL_DMA_IRQHandler+0xa20>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d02c      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a70      	ldr	r2, [pc, #448]	@ (800d870 <HAL_DMA_IRQHandler+0xa24>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d027      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a6e      	ldr	r2, [pc, #440]	@ (800d874 <HAL_DMA_IRQHandler+0xa28>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d022      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a6d      	ldr	r2, [pc, #436]	@ (800d878 <HAL_DMA_IRQHandler+0xa2c>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d01d      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a6b      	ldr	r2, [pc, #428]	@ (800d87c <HAL_DMA_IRQHandler+0xa30>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d018      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a6a      	ldr	r2, [pc, #424]	@ (800d880 <HAL_DMA_IRQHandler+0xa34>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d013      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a68      	ldr	r2, [pc, #416]	@ (800d884 <HAL_DMA_IRQHandler+0xa38>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d00e      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a67      	ldr	r2, [pc, #412]	@ (800d888 <HAL_DMA_IRQHandler+0xa3c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d009      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a65      	ldr	r2, [pc, #404]	@ (800d88c <HAL_DMA_IRQHandler+0xa40>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d004      	beq.n	800d704 <HAL_DMA_IRQHandler+0x8b8>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a64      	ldr	r2, [pc, #400]	@ (800d890 <HAL_DMA_IRQHandler+0xa44>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d108      	bne.n	800d716 <HAL_DMA_IRQHandler+0x8ca>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0201 	bic.w	r2, r2, #1
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	e007      	b.n	800d726 <HAL_DMA_IRQHandler+0x8da>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f022 0201 	bic.w	r2, r2, #1
 800d724:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3301      	adds	r3, #1
 800d72a:	60fb      	str	r3, [r7, #12]
 800d72c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d72e:	429a      	cmp	r2, r3
 800d730:	d307      	bcc.n	800d742 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1f2      	bne.n	800d726 <HAL_DMA_IRQHandler+0x8da>
 800d740:	e000      	b.n	800d744 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d742:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d004      	beq.n	800d75c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2203      	movs	r2, #3
 800d756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d75a:	e003      	b.n	800d764 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 8272 	beq.w	800dc5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	4798      	blx	r3
 800d77e:	e26c      	b.n	800dc5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a43      	ldr	r2, [pc, #268]	@ (800d894 <HAL_DMA_IRQHandler+0xa48>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d022      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a42      	ldr	r2, [pc, #264]	@ (800d898 <HAL_DMA_IRQHandler+0xa4c>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d01d      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a40      	ldr	r2, [pc, #256]	@ (800d89c <HAL_DMA_IRQHandler+0xa50>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d018      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a3f      	ldr	r2, [pc, #252]	@ (800d8a0 <HAL_DMA_IRQHandler+0xa54>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d013      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a3d      	ldr	r2, [pc, #244]	@ (800d8a4 <HAL_DMA_IRQHandler+0xa58>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d00e      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a3c      	ldr	r2, [pc, #240]	@ (800d8a8 <HAL_DMA_IRQHandler+0xa5c>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d009      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a3a      	ldr	r2, [pc, #232]	@ (800d8ac <HAL_DMA_IRQHandler+0xa60>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d004      	beq.n	800d7d0 <HAL_DMA_IRQHandler+0x984>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a39      	ldr	r2, [pc, #228]	@ (800d8b0 <HAL_DMA_IRQHandler+0xa64>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d101      	bne.n	800d7d4 <HAL_DMA_IRQHandler+0x988>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e000      	b.n	800d7d6 <HAL_DMA_IRQHandler+0x98a>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f000 823f 	beq.w	800dc5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7e8:	f003 031f 	and.w	r3, r3, #31
 800d7ec:	2204      	movs	r2, #4
 800d7ee:	409a      	lsls	r2, r3
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 80cd 	beq.w	800d994 <HAL_DMA_IRQHandler+0xb48>
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 80c7 	beq.w	800d994 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d80a:	f003 031f 	and.w	r3, r3, #31
 800d80e:	2204      	movs	r2, #4
 800d810:	409a      	lsls	r2, r3
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d049      	beq.n	800d8b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d826:	2b00      	cmp	r3, #0
 800d828:	d109      	bne.n	800d83e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 8210 	beq.w	800dc54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d83c:	e20a      	b.n	800dc54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d842:	2b00      	cmp	r3, #0
 800d844:	f000 8206 	beq.w	800dc54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d850:	e200      	b.n	800dc54 <HAL_DMA_IRQHandler+0xe08>
 800d852:	bf00      	nop
 800d854:	40020010 	.word	0x40020010
 800d858:	40020028 	.word	0x40020028
 800d85c:	40020040 	.word	0x40020040
 800d860:	40020058 	.word	0x40020058
 800d864:	40020070 	.word	0x40020070
 800d868:	40020088 	.word	0x40020088
 800d86c:	400200a0 	.word	0x400200a0
 800d870:	400200b8 	.word	0x400200b8
 800d874:	40020410 	.word	0x40020410
 800d878:	40020428 	.word	0x40020428
 800d87c:	40020440 	.word	0x40020440
 800d880:	40020458 	.word	0x40020458
 800d884:	40020470 	.word	0x40020470
 800d888:	40020488 	.word	0x40020488
 800d88c:	400204a0 	.word	0x400204a0
 800d890:	400204b8 	.word	0x400204b8
 800d894:	58025408 	.word	0x58025408
 800d898:	5802541c 	.word	0x5802541c
 800d89c:	58025430 	.word	0x58025430
 800d8a0:	58025444 	.word	0x58025444
 800d8a4:	58025458 	.word	0x58025458
 800d8a8:	5802546c 	.word	0x5802546c
 800d8ac:	58025480 	.word	0x58025480
 800d8b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f003 0320 	and.w	r3, r3, #32
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d160      	bne.n	800d980 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a7f      	ldr	r2, [pc, #508]	@ (800dac0 <HAL_DMA_IRQHandler+0xc74>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d04a      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a7d      	ldr	r2, [pc, #500]	@ (800dac4 <HAL_DMA_IRQHandler+0xc78>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d045      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a7c      	ldr	r2, [pc, #496]	@ (800dac8 <HAL_DMA_IRQHandler+0xc7c>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d040      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a7a      	ldr	r2, [pc, #488]	@ (800dacc <HAL_DMA_IRQHandler+0xc80>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d03b      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a79      	ldr	r2, [pc, #484]	@ (800dad0 <HAL_DMA_IRQHandler+0xc84>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d036      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a77      	ldr	r2, [pc, #476]	@ (800dad4 <HAL_DMA_IRQHandler+0xc88>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d031      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a76      	ldr	r2, [pc, #472]	@ (800dad8 <HAL_DMA_IRQHandler+0xc8c>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d02c      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a74      	ldr	r2, [pc, #464]	@ (800dadc <HAL_DMA_IRQHandler+0xc90>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d027      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a73      	ldr	r2, [pc, #460]	@ (800dae0 <HAL_DMA_IRQHandler+0xc94>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d022      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a71      	ldr	r2, [pc, #452]	@ (800dae4 <HAL_DMA_IRQHandler+0xc98>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d01d      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a70      	ldr	r2, [pc, #448]	@ (800dae8 <HAL_DMA_IRQHandler+0xc9c>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d018      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a6e      	ldr	r2, [pc, #440]	@ (800daec <HAL_DMA_IRQHandler+0xca0>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d013      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a6d      	ldr	r2, [pc, #436]	@ (800daf0 <HAL_DMA_IRQHandler+0xca4>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d00e      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a6b      	ldr	r2, [pc, #428]	@ (800daf4 <HAL_DMA_IRQHandler+0xca8>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d009      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a6a      	ldr	r2, [pc, #424]	@ (800daf8 <HAL_DMA_IRQHandler+0xcac>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d004      	beq.n	800d95e <HAL_DMA_IRQHandler+0xb12>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a68      	ldr	r2, [pc, #416]	@ (800dafc <HAL_DMA_IRQHandler+0xcb0>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d108      	bne.n	800d970 <HAL_DMA_IRQHandler+0xb24>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f022 0208 	bic.w	r2, r2, #8
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	e007      	b.n	800d980 <HAL_DMA_IRQHandler+0xb34>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f022 0204 	bic.w	r2, r2, #4
 800d97e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 8165 	beq.w	800dc54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d992:	e15f      	b.n	800dc54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d998:	f003 031f 	and.w	r3, r3, #31
 800d99c:	2202      	movs	r2, #2
 800d99e:	409a      	lsls	r2, r3
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 80c5 	beq.w	800db34 <HAL_DMA_IRQHandler+0xce8>
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 80bf 	beq.w	800db34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9ba:	f003 031f 	and.w	r3, r3, #31
 800d9be:	2202      	movs	r2, #2
 800d9c0:	409a      	lsls	r2, r3
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d018      	beq.n	800da02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d109      	bne.n	800d9ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f000 813a 	beq.w	800dc58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9ec:	e134      	b.n	800dc58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 8130 	beq.w	800dc58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da00:	e12a      	b.n	800dc58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f003 0320 	and.w	r3, r3, #32
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 8089 	bne.w	800db20 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a2b      	ldr	r2, [pc, #172]	@ (800dac0 <HAL_DMA_IRQHandler+0xc74>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d04a      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a29      	ldr	r2, [pc, #164]	@ (800dac4 <HAL_DMA_IRQHandler+0xc78>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d045      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a28      	ldr	r2, [pc, #160]	@ (800dac8 <HAL_DMA_IRQHandler+0xc7c>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d040      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a26      	ldr	r2, [pc, #152]	@ (800dacc <HAL_DMA_IRQHandler+0xc80>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d03b      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a25      	ldr	r2, [pc, #148]	@ (800dad0 <HAL_DMA_IRQHandler+0xc84>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d036      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a23      	ldr	r2, [pc, #140]	@ (800dad4 <HAL_DMA_IRQHandler+0xc88>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d031      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a22      	ldr	r2, [pc, #136]	@ (800dad8 <HAL_DMA_IRQHandler+0xc8c>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d02c      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a20      	ldr	r2, [pc, #128]	@ (800dadc <HAL_DMA_IRQHandler+0xc90>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d027      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a1f      	ldr	r2, [pc, #124]	@ (800dae0 <HAL_DMA_IRQHandler+0xc94>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d022      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a1d      	ldr	r2, [pc, #116]	@ (800dae4 <HAL_DMA_IRQHandler+0xc98>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d01d      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a1c      	ldr	r2, [pc, #112]	@ (800dae8 <HAL_DMA_IRQHandler+0xc9c>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d018      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a1a      	ldr	r2, [pc, #104]	@ (800daec <HAL_DMA_IRQHandler+0xca0>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d013      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a19      	ldr	r2, [pc, #100]	@ (800daf0 <HAL_DMA_IRQHandler+0xca4>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d00e      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a17      	ldr	r2, [pc, #92]	@ (800daf4 <HAL_DMA_IRQHandler+0xca8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d009      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a16      	ldr	r2, [pc, #88]	@ (800daf8 <HAL_DMA_IRQHandler+0xcac>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d004      	beq.n	800daae <HAL_DMA_IRQHandler+0xc62>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a14      	ldr	r2, [pc, #80]	@ (800dafc <HAL_DMA_IRQHandler+0xcb0>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d128      	bne.n	800db00 <HAL_DMA_IRQHandler+0xcb4>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f022 0214 	bic.w	r2, r2, #20
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	e027      	b.n	800db10 <HAL_DMA_IRQHandler+0xcc4>
 800dac0:	40020010 	.word	0x40020010
 800dac4:	40020028 	.word	0x40020028
 800dac8:	40020040 	.word	0x40020040
 800dacc:	40020058 	.word	0x40020058
 800dad0:	40020070 	.word	0x40020070
 800dad4:	40020088 	.word	0x40020088
 800dad8:	400200a0 	.word	0x400200a0
 800dadc:	400200b8 	.word	0x400200b8
 800dae0:	40020410 	.word	0x40020410
 800dae4:	40020428 	.word	0x40020428
 800dae8:	40020440 	.word	0x40020440
 800daec:	40020458 	.word	0x40020458
 800daf0:	40020470 	.word	0x40020470
 800daf4:	40020488 	.word	0x40020488
 800daf8:	400204a0 	.word	0x400204a0
 800dafc:	400204b8 	.word	0x400204b8
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f022 020a 	bic.w	r2, r2, #10
 800db0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2201      	movs	r2, #1
 800db14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 8097 	beq.w	800dc58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db32:	e091      	b.n	800dc58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db38:	f003 031f 	and.w	r3, r3, #31
 800db3c:	2208      	movs	r2, #8
 800db3e:	409a      	lsls	r2, r3
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	4013      	ands	r3, r2
 800db44:	2b00      	cmp	r3, #0
 800db46:	f000 8088 	beq.w	800dc5a <HAL_DMA_IRQHandler+0xe0e>
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f003 0308 	and.w	r3, r3, #8
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 8082 	beq.w	800dc5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a41      	ldr	r2, [pc, #260]	@ (800dc60 <HAL_DMA_IRQHandler+0xe14>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d04a      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a3f      	ldr	r2, [pc, #252]	@ (800dc64 <HAL_DMA_IRQHandler+0xe18>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d045      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a3e      	ldr	r2, [pc, #248]	@ (800dc68 <HAL_DMA_IRQHandler+0xe1c>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d040      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a3c      	ldr	r2, [pc, #240]	@ (800dc6c <HAL_DMA_IRQHandler+0xe20>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d03b      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a3b      	ldr	r2, [pc, #236]	@ (800dc70 <HAL_DMA_IRQHandler+0xe24>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d036      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a39      	ldr	r2, [pc, #228]	@ (800dc74 <HAL_DMA_IRQHandler+0xe28>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d031      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a38      	ldr	r2, [pc, #224]	@ (800dc78 <HAL_DMA_IRQHandler+0xe2c>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d02c      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a36      	ldr	r2, [pc, #216]	@ (800dc7c <HAL_DMA_IRQHandler+0xe30>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d027      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a35      	ldr	r2, [pc, #212]	@ (800dc80 <HAL_DMA_IRQHandler+0xe34>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d022      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a33      	ldr	r2, [pc, #204]	@ (800dc84 <HAL_DMA_IRQHandler+0xe38>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d01d      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a32      	ldr	r2, [pc, #200]	@ (800dc88 <HAL_DMA_IRQHandler+0xe3c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d018      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a30      	ldr	r2, [pc, #192]	@ (800dc8c <HAL_DMA_IRQHandler+0xe40>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d013      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a2f      	ldr	r2, [pc, #188]	@ (800dc90 <HAL_DMA_IRQHandler+0xe44>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d00e      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a2d      	ldr	r2, [pc, #180]	@ (800dc94 <HAL_DMA_IRQHandler+0xe48>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d009      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a2c      	ldr	r2, [pc, #176]	@ (800dc98 <HAL_DMA_IRQHandler+0xe4c>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d004      	beq.n	800dbf6 <HAL_DMA_IRQHandler+0xdaa>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a2a      	ldr	r2, [pc, #168]	@ (800dc9c <HAL_DMA_IRQHandler+0xe50>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d108      	bne.n	800dc08 <HAL_DMA_IRQHandler+0xdbc>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f022 021c 	bic.w	r2, r2, #28
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	e007      	b.n	800dc18 <HAL_DMA_IRQHandler+0xdcc>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f022 020e 	bic.w	r2, r2, #14
 800dc16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc1c:	f003 031f 	and.w	r3, r3, #31
 800dc20:	2201      	movs	r2, #1
 800dc22:	409a      	lsls	r2, r3
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d009      	beq.n	800dc5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	4798      	blx	r3
 800dc4e:	e004      	b.n	800dc5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800dc50:	bf00      	nop
 800dc52:	e002      	b.n	800dc5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc54:	bf00      	nop
 800dc56:	e000      	b.n	800dc5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dc5a:	3728      	adds	r7, #40	@ 0x28
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	40020010 	.word	0x40020010
 800dc64:	40020028 	.word	0x40020028
 800dc68:	40020040 	.word	0x40020040
 800dc6c:	40020058 	.word	0x40020058
 800dc70:	40020070 	.word	0x40020070
 800dc74:	40020088 	.word	0x40020088
 800dc78:	400200a0 	.word	0x400200a0
 800dc7c:	400200b8 	.word	0x400200b8
 800dc80:	40020410 	.word	0x40020410
 800dc84:	40020428 	.word	0x40020428
 800dc88:	40020440 	.word	0x40020440
 800dc8c:	40020458 	.word	0x40020458
 800dc90:	40020470 	.word	0x40020470
 800dc94:	40020488 	.word	0x40020488
 800dc98:	400204a0 	.word	0x400204a0
 800dc9c:	400204b8 	.word	0x400204b8

0800dca0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dcae:	b2db      	uxtb	r3, r3
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dce6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a7f      	ldr	r2, [pc, #508]	@ (800def0 <DMA_SetConfig+0x21c>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d072      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a7d      	ldr	r2, [pc, #500]	@ (800def4 <DMA_SetConfig+0x220>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d06d      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a7c      	ldr	r2, [pc, #496]	@ (800def8 <DMA_SetConfig+0x224>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d068      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a7a      	ldr	r2, [pc, #488]	@ (800defc <DMA_SetConfig+0x228>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d063      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a79      	ldr	r2, [pc, #484]	@ (800df00 <DMA_SetConfig+0x22c>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d05e      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a77      	ldr	r2, [pc, #476]	@ (800df04 <DMA_SetConfig+0x230>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d059      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a76      	ldr	r2, [pc, #472]	@ (800df08 <DMA_SetConfig+0x234>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d054      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a74      	ldr	r2, [pc, #464]	@ (800df0c <DMA_SetConfig+0x238>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d04f      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a73      	ldr	r2, [pc, #460]	@ (800df10 <DMA_SetConfig+0x23c>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d04a      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a71      	ldr	r2, [pc, #452]	@ (800df14 <DMA_SetConfig+0x240>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d045      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a70      	ldr	r2, [pc, #448]	@ (800df18 <DMA_SetConfig+0x244>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d040      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a6e      	ldr	r2, [pc, #440]	@ (800df1c <DMA_SetConfig+0x248>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d03b      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a6d      	ldr	r2, [pc, #436]	@ (800df20 <DMA_SetConfig+0x24c>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d036      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a6b      	ldr	r2, [pc, #428]	@ (800df24 <DMA_SetConfig+0x250>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d031      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a6a      	ldr	r2, [pc, #424]	@ (800df28 <DMA_SetConfig+0x254>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d02c      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a68      	ldr	r2, [pc, #416]	@ (800df2c <DMA_SetConfig+0x258>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d027      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a67      	ldr	r2, [pc, #412]	@ (800df30 <DMA_SetConfig+0x25c>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d022      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a65      	ldr	r2, [pc, #404]	@ (800df34 <DMA_SetConfig+0x260>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d01d      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a64      	ldr	r2, [pc, #400]	@ (800df38 <DMA_SetConfig+0x264>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d018      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a62      	ldr	r2, [pc, #392]	@ (800df3c <DMA_SetConfig+0x268>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d013      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a61      	ldr	r2, [pc, #388]	@ (800df40 <DMA_SetConfig+0x26c>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d00e      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a5f      	ldr	r2, [pc, #380]	@ (800df44 <DMA_SetConfig+0x270>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d009      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a5e      	ldr	r2, [pc, #376]	@ (800df48 <DMA_SetConfig+0x274>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d004      	beq.n	800ddde <DMA_SetConfig+0x10a>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a5c      	ldr	r2, [pc, #368]	@ (800df4c <DMA_SetConfig+0x278>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d101      	bne.n	800dde2 <DMA_SetConfig+0x10e>
 800ddde:	2301      	movs	r3, #1
 800dde0:	e000      	b.n	800dde4 <DMA_SetConfig+0x110>
 800dde2:	2300      	movs	r3, #0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00d      	beq.n	800de04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ddf0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d004      	beq.n	800de04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800de02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a39      	ldr	r2, [pc, #228]	@ (800def0 <DMA_SetConfig+0x21c>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d04a      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a38      	ldr	r2, [pc, #224]	@ (800def4 <DMA_SetConfig+0x220>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d045      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a36      	ldr	r2, [pc, #216]	@ (800def8 <DMA_SetConfig+0x224>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d040      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a35      	ldr	r2, [pc, #212]	@ (800defc <DMA_SetConfig+0x228>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d03b      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a33      	ldr	r2, [pc, #204]	@ (800df00 <DMA_SetConfig+0x22c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d036      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a32      	ldr	r2, [pc, #200]	@ (800df04 <DMA_SetConfig+0x230>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d031      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a30      	ldr	r2, [pc, #192]	@ (800df08 <DMA_SetConfig+0x234>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d02c      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a2f      	ldr	r2, [pc, #188]	@ (800df0c <DMA_SetConfig+0x238>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d027      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a2d      	ldr	r2, [pc, #180]	@ (800df10 <DMA_SetConfig+0x23c>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d022      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a2c      	ldr	r2, [pc, #176]	@ (800df14 <DMA_SetConfig+0x240>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d01d      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a2a      	ldr	r2, [pc, #168]	@ (800df18 <DMA_SetConfig+0x244>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d018      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a29      	ldr	r2, [pc, #164]	@ (800df1c <DMA_SetConfig+0x248>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d013      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a27      	ldr	r2, [pc, #156]	@ (800df20 <DMA_SetConfig+0x24c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d00e      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a26      	ldr	r2, [pc, #152]	@ (800df24 <DMA_SetConfig+0x250>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d009      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a24      	ldr	r2, [pc, #144]	@ (800df28 <DMA_SetConfig+0x254>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d004      	beq.n	800dea4 <DMA_SetConfig+0x1d0>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a23      	ldr	r2, [pc, #140]	@ (800df2c <DMA_SetConfig+0x258>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d101      	bne.n	800dea8 <DMA_SetConfig+0x1d4>
 800dea4:	2301      	movs	r3, #1
 800dea6:	e000      	b.n	800deaa <DMA_SetConfig+0x1d6>
 800dea8:	2300      	movs	r3, #0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d059      	beq.n	800df62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800deb2:	f003 031f 	and.w	r3, r3, #31
 800deb6:	223f      	movs	r2, #63	@ 0x3f
 800deb8:	409a      	lsls	r2, r3
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800decc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	2b40      	cmp	r3, #64	@ 0x40
 800dedc:	d138      	bne.n	800df50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800deee:	e086      	b.n	800dffe <DMA_SetConfig+0x32a>
 800def0:	40020010 	.word	0x40020010
 800def4:	40020028 	.word	0x40020028
 800def8:	40020040 	.word	0x40020040
 800defc:	40020058 	.word	0x40020058
 800df00:	40020070 	.word	0x40020070
 800df04:	40020088 	.word	0x40020088
 800df08:	400200a0 	.word	0x400200a0
 800df0c:	400200b8 	.word	0x400200b8
 800df10:	40020410 	.word	0x40020410
 800df14:	40020428 	.word	0x40020428
 800df18:	40020440 	.word	0x40020440
 800df1c:	40020458 	.word	0x40020458
 800df20:	40020470 	.word	0x40020470
 800df24:	40020488 	.word	0x40020488
 800df28:	400204a0 	.word	0x400204a0
 800df2c:	400204b8 	.word	0x400204b8
 800df30:	58025408 	.word	0x58025408
 800df34:	5802541c 	.word	0x5802541c
 800df38:	58025430 	.word	0x58025430
 800df3c:	58025444 	.word	0x58025444
 800df40:	58025458 	.word	0x58025458
 800df44:	5802546c 	.word	0x5802546c
 800df48:	58025480 	.word	0x58025480
 800df4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	60da      	str	r2, [r3, #12]
}
 800df60:	e04d      	b.n	800dffe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a29      	ldr	r2, [pc, #164]	@ (800e00c <DMA_SetConfig+0x338>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d022      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a27      	ldr	r2, [pc, #156]	@ (800e010 <DMA_SetConfig+0x33c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d01d      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a26      	ldr	r2, [pc, #152]	@ (800e014 <DMA_SetConfig+0x340>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d018      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a24      	ldr	r2, [pc, #144]	@ (800e018 <DMA_SetConfig+0x344>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d013      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a23      	ldr	r2, [pc, #140]	@ (800e01c <DMA_SetConfig+0x348>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d00e      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a21      	ldr	r2, [pc, #132]	@ (800e020 <DMA_SetConfig+0x34c>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d009      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a20      	ldr	r2, [pc, #128]	@ (800e024 <DMA_SetConfig+0x350>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d004      	beq.n	800dfb2 <DMA_SetConfig+0x2de>
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a1e      	ldr	r2, [pc, #120]	@ (800e028 <DMA_SetConfig+0x354>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d101      	bne.n	800dfb6 <DMA_SetConfig+0x2e2>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e000      	b.n	800dfb8 <DMA_SetConfig+0x2e4>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d020      	beq.n	800dffe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfc0:	f003 031f 	and.w	r3, r3, #31
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	409a      	lsls	r2, r3
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	683a      	ldr	r2, [r7, #0]
 800dfd2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	2b40      	cmp	r3, #64	@ 0x40
 800dfda:	d108      	bne.n	800dfee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68ba      	ldr	r2, [r7, #8]
 800dfea:	60da      	str	r2, [r3, #12]
}
 800dfec:	e007      	b.n	800dffe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	60da      	str	r2, [r3, #12]
}
 800dffe:	bf00      	nop
 800e000:	371c      	adds	r7, #28
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	58025408 	.word	0x58025408
 800e010:	5802541c 	.word	0x5802541c
 800e014:	58025430 	.word	0x58025430
 800e018:	58025444 	.word	0x58025444
 800e01c:	58025458 	.word	0x58025458
 800e020:	5802546c 	.word	0x5802546c
 800e024:	58025480 	.word	0x58025480
 800e028:	58025494 	.word	0x58025494

0800e02c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a42      	ldr	r2, [pc, #264]	@ (800e144 <DMA_CalcBaseAndBitshift+0x118>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d04a      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a41      	ldr	r2, [pc, #260]	@ (800e148 <DMA_CalcBaseAndBitshift+0x11c>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d045      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a3f      	ldr	r2, [pc, #252]	@ (800e14c <DMA_CalcBaseAndBitshift+0x120>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d040      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a3e      	ldr	r2, [pc, #248]	@ (800e150 <DMA_CalcBaseAndBitshift+0x124>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d03b      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a3c      	ldr	r2, [pc, #240]	@ (800e154 <DMA_CalcBaseAndBitshift+0x128>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d036      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a3b      	ldr	r2, [pc, #236]	@ (800e158 <DMA_CalcBaseAndBitshift+0x12c>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d031      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a39      	ldr	r2, [pc, #228]	@ (800e15c <DMA_CalcBaseAndBitshift+0x130>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d02c      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a38      	ldr	r2, [pc, #224]	@ (800e160 <DMA_CalcBaseAndBitshift+0x134>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d027      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a36      	ldr	r2, [pc, #216]	@ (800e164 <DMA_CalcBaseAndBitshift+0x138>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d022      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a35      	ldr	r2, [pc, #212]	@ (800e168 <DMA_CalcBaseAndBitshift+0x13c>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d01d      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a33      	ldr	r2, [pc, #204]	@ (800e16c <DMA_CalcBaseAndBitshift+0x140>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d018      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a32      	ldr	r2, [pc, #200]	@ (800e170 <DMA_CalcBaseAndBitshift+0x144>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d013      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a30      	ldr	r2, [pc, #192]	@ (800e174 <DMA_CalcBaseAndBitshift+0x148>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d00e      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a2f      	ldr	r2, [pc, #188]	@ (800e178 <DMA_CalcBaseAndBitshift+0x14c>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d009      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a2d      	ldr	r2, [pc, #180]	@ (800e17c <DMA_CalcBaseAndBitshift+0x150>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d004      	beq.n	800e0d4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a2c      	ldr	r2, [pc, #176]	@ (800e180 <DMA_CalcBaseAndBitshift+0x154>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d101      	bne.n	800e0d8 <DMA_CalcBaseAndBitshift+0xac>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e000      	b.n	800e0da <DMA_CalcBaseAndBitshift+0xae>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d024      	beq.n	800e128 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	3b10      	subs	r3, #16
 800e0e6:	4a27      	ldr	r2, [pc, #156]	@ (800e184 <DMA_CalcBaseAndBitshift+0x158>)
 800e0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ec:	091b      	lsrs	r3, r3, #4
 800e0ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f003 0307 	and.w	r3, r3, #7
 800e0f6:	4a24      	ldr	r2, [pc, #144]	@ (800e188 <DMA_CalcBaseAndBitshift+0x15c>)
 800e0f8:	5cd3      	ldrb	r3, [r2, r3]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2b03      	cmp	r3, #3
 800e104:	d908      	bls.n	800e118 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	4b1f      	ldr	r3, [pc, #124]	@ (800e18c <DMA_CalcBaseAndBitshift+0x160>)
 800e10e:	4013      	ands	r3, r2
 800e110:	1d1a      	adds	r2, r3, #4
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	659a      	str	r2, [r3, #88]	@ 0x58
 800e116:	e00d      	b.n	800e134 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	461a      	mov	r2, r3
 800e11e:	4b1b      	ldr	r3, [pc, #108]	@ (800e18c <DMA_CalcBaseAndBitshift+0x160>)
 800e120:	4013      	ands	r3, r2
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	6593      	str	r3, [r2, #88]	@ 0x58
 800e126:	e005      	b.n	800e134 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	40020010 	.word	0x40020010
 800e148:	40020028 	.word	0x40020028
 800e14c:	40020040 	.word	0x40020040
 800e150:	40020058 	.word	0x40020058
 800e154:	40020070 	.word	0x40020070
 800e158:	40020088 	.word	0x40020088
 800e15c:	400200a0 	.word	0x400200a0
 800e160:	400200b8 	.word	0x400200b8
 800e164:	40020410 	.word	0x40020410
 800e168:	40020428 	.word	0x40020428
 800e16c:	40020440 	.word	0x40020440
 800e170:	40020458 	.word	0x40020458
 800e174:	40020470 	.word	0x40020470
 800e178:	40020488 	.word	0x40020488
 800e17c:	400204a0 	.word	0x400204a0
 800e180:	400204b8 	.word	0x400204b8
 800e184:	aaaaaaab 	.word	0xaaaaaaab
 800e188:	0801ec1c 	.word	0x0801ec1c
 800e18c:	fffffc00 	.word	0xfffffc00

0800e190 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d120      	bne.n	800e1e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d858      	bhi.n	800e25e <DMA_CheckFifoParam+0xce>
 800e1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b4 <DMA_CheckFifoParam+0x24>)
 800e1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b2:	bf00      	nop
 800e1b4:	0800e1c5 	.word	0x0800e1c5
 800e1b8:	0800e1d7 	.word	0x0800e1d7
 800e1bc:	0800e1c5 	.word	0x0800e1c5
 800e1c0:	0800e25f 	.word	0x0800e25f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d048      	beq.n	800e262 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1d4:	e045      	b.n	800e262 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e1de:	d142      	bne.n	800e266 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1e4:	e03f      	b.n	800e266 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	699b      	ldr	r3, [r3, #24]
 800e1ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1ee:	d123      	bne.n	800e238 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d838      	bhi.n	800e26a <DMA_CheckFifoParam+0xda>
 800e1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800e200 <DMA_CheckFifoParam+0x70>)
 800e1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fe:	bf00      	nop
 800e200:	0800e211 	.word	0x0800e211
 800e204:	0800e217 	.word	0x0800e217
 800e208:	0800e211 	.word	0x0800e211
 800e20c:	0800e229 	.word	0x0800e229
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	73fb      	strb	r3, [r7, #15]
        break;
 800e214:	e030      	b.n	800e278 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d025      	beq.n	800e26e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e226:	e022      	b.n	800e26e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e230:	d11f      	bne.n	800e272 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e236:	e01c      	b.n	800e272 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d902      	bls.n	800e246 <DMA_CheckFifoParam+0xb6>
 800e240:	2b03      	cmp	r3, #3
 800e242:	d003      	beq.n	800e24c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e244:	e018      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e246:	2301      	movs	r3, #1
 800e248:	73fb      	strb	r3, [r7, #15]
        break;
 800e24a:	e015      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00e      	beq.n	800e276 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	73fb      	strb	r3, [r7, #15]
    break;
 800e25c:	e00b      	b.n	800e276 <DMA_CheckFifoParam+0xe6>
        break;
 800e25e:	bf00      	nop
 800e260:	e00a      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        break;
 800e262:	bf00      	nop
 800e264:	e008      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        break;
 800e266:	bf00      	nop
 800e268:	e006      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        break;
 800e26a:	bf00      	nop
 800e26c:	e004      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        break;
 800e26e:	bf00      	nop
 800e270:	e002      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
        break;
 800e272:	bf00      	nop
 800e274:	e000      	b.n	800e278 <DMA_CheckFifoParam+0xe8>
    break;
 800e276:	bf00      	nop
    }
  }

  return status;
 800e278:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop

0800e288 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a38      	ldr	r2, [pc, #224]	@ (800e37c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d022      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a36      	ldr	r2, [pc, #216]	@ (800e380 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d01d      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a35      	ldr	r2, [pc, #212]	@ (800e384 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d018      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a33      	ldr	r2, [pc, #204]	@ (800e388 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d013      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a32      	ldr	r2, [pc, #200]	@ (800e38c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d00e      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a30      	ldr	r2, [pc, #192]	@ (800e390 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d009      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a2f      	ldr	r2, [pc, #188]	@ (800e394 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d004      	beq.n	800e2e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a2d      	ldr	r2, [pc, #180]	@ (800e398 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d101      	bne.n	800e2ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e000      	b.n	800e2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01a      	beq.n	800e326 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	3b08      	subs	r3, #8
 800e2f8:	4a28      	ldr	r2, [pc, #160]	@ (800e39c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e2fe:	091b      	lsrs	r3, r3, #4
 800e300:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	4b26      	ldr	r3, [pc, #152]	@ (800e3a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	461a      	mov	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a24      	ldr	r2, [pc, #144]	@ (800e3a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e314:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f003 031f 	and.w	r3, r3, #31
 800e31c:	2201      	movs	r2, #1
 800e31e:	409a      	lsls	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e324:	e024      	b.n	800e370 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	3b10      	subs	r3, #16
 800e32e:	4a1e      	ldr	r2, [pc, #120]	@ (800e3a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e330:	fba2 2303 	umull	r2, r3, r2, r3
 800e334:	091b      	lsrs	r3, r3, #4
 800e336:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	4a1c      	ldr	r2, [pc, #112]	@ (800e3ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d806      	bhi.n	800e34e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d902      	bls.n	800e34e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	3308      	adds	r3, #8
 800e34c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	4b18      	ldr	r3, [pc, #96]	@ (800e3b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e352:	4413      	add	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	461a      	mov	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4a16      	ldr	r2, [pc, #88]	@ (800e3b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e360:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f003 031f 	and.w	r3, r3, #31
 800e368:	2201      	movs	r2, #1
 800e36a:	409a      	lsls	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e370:	bf00      	nop
 800e372:	3714      	adds	r7, #20
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	58025408 	.word	0x58025408
 800e380:	5802541c 	.word	0x5802541c
 800e384:	58025430 	.word	0x58025430
 800e388:	58025444 	.word	0x58025444
 800e38c:	58025458 	.word	0x58025458
 800e390:	5802546c 	.word	0x5802546c
 800e394:	58025480 	.word	0x58025480
 800e398:	58025494 	.word	0x58025494
 800e39c:	cccccccd 	.word	0xcccccccd
 800e3a0:	16009600 	.word	0x16009600
 800e3a4:	58025880 	.word	0x58025880
 800e3a8:	aaaaaaab 	.word	0xaaaaaaab
 800e3ac:	400204b8 	.word	0x400204b8
 800e3b0:	4002040f 	.word	0x4002040f
 800e3b4:	10008200 	.word	0x10008200
 800e3b8:	40020880 	.word	0x40020880

0800e3bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d04a      	beq.n	800e468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b08      	cmp	r3, #8
 800e3d6:	d847      	bhi.n	800e468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a25      	ldr	r2, [pc, #148]	@ (800e474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d022      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a24      	ldr	r2, [pc, #144]	@ (800e478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d01d      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a22      	ldr	r2, [pc, #136]	@ (800e47c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d018      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a21      	ldr	r2, [pc, #132]	@ (800e480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d013      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a1f      	ldr	r2, [pc, #124]	@ (800e484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d00e      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a1e      	ldr	r2, [pc, #120]	@ (800e488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d009      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a1c      	ldr	r2, [pc, #112]	@ (800e48c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d004      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a1b      	ldr	r2, [pc, #108]	@ (800e490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d101      	bne.n	800e42c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e428:	2301      	movs	r3, #1
 800e42a:	e000      	b.n	800e42e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e42c:	2300      	movs	r3, #0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	4b17      	ldr	r3, [pc, #92]	@ (800e494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e436:	4413      	add	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	461a      	mov	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4a15      	ldr	r2, [pc, #84]	@ (800e498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e444:	671a      	str	r2, [r3, #112]	@ 0x70
 800e446:	e009      	b.n	800e45c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	4b14      	ldr	r3, [pc, #80]	@ (800e49c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e44c:	4413      	add	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	461a      	mov	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4a11      	ldr	r2, [pc, #68]	@ (800e4a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e45a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	3b01      	subs	r3, #1
 800e460:	2201      	movs	r2, #1
 800e462:	409a      	lsls	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e468:	bf00      	nop
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr
 800e474:	58025408 	.word	0x58025408
 800e478:	5802541c 	.word	0x5802541c
 800e47c:	58025430 	.word	0x58025430
 800e480:	58025444 	.word	0x58025444
 800e484:	58025458 	.word	0x58025458
 800e488:	5802546c 	.word	0x5802546c
 800e48c:	58025480 	.word	0x58025480
 800e490:	58025494 	.word	0x58025494
 800e494:	1600963f 	.word	0x1600963f
 800e498:	58025940 	.word	0x58025940
 800e49c:	1000823f 	.word	0x1000823f
 800e4a0:	40020940 	.word	0x40020940

0800e4a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b089      	sub	sp, #36	@ 0x24
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e4b2:	4b86      	ldr	r3, [pc, #536]	@ (800e6cc <HAL_GPIO_Init+0x228>)
 800e4b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e4b6:	e18c      	b.n	800e7d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	2101      	movs	r1, #1
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 817e 	beq.w	800e7cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	f003 0303 	and.w	r3, r3, #3
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d005      	beq.n	800e4e8 <HAL_GPIO_Init+0x44>
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	f003 0303 	and.w	r3, r3, #3
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d130      	bne.n	800e54a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	005b      	lsls	r3, r3, #1
 800e4f2:	2203      	movs	r2, #3
 800e4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f8:	43db      	mvns	r3, r3
 800e4fa:	69ba      	ldr	r2, [r7, #24]
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	68da      	ldr	r2, [r3, #12]
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	005b      	lsls	r3, r3, #1
 800e508:	fa02 f303 	lsl.w	r3, r2, r3
 800e50c:	69ba      	ldr	r2, [r7, #24]
 800e50e:	4313      	orrs	r3, r2
 800e510:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	69ba      	ldr	r2, [r7, #24]
 800e516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e51e:	2201      	movs	r2, #1
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	43db      	mvns	r3, r3
 800e528:	69ba      	ldr	r2, [r7, #24]
 800e52a:	4013      	ands	r3, r2
 800e52c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	091b      	lsrs	r3, r3, #4
 800e534:	f003 0201 	and.w	r2, r3, #1
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	fa02 f303 	lsl.w	r3, r2, r3
 800e53e:	69ba      	ldr	r2, [r7, #24]
 800e540:	4313      	orrs	r3, r2
 800e542:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	69ba      	ldr	r2, [r7, #24]
 800e548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	f003 0303 	and.w	r3, r3, #3
 800e552:	2b03      	cmp	r3, #3
 800e554:	d017      	beq.n	800e586 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	2203      	movs	r2, #3
 800e562:	fa02 f303 	lsl.w	r3, r2, r3
 800e566:	43db      	mvns	r3, r3
 800e568:	69ba      	ldr	r2, [r7, #24]
 800e56a:	4013      	ands	r3, r2
 800e56c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	005b      	lsls	r3, r3, #1
 800e576:	fa02 f303 	lsl.w	r3, r2, r3
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	69ba      	ldr	r2, [r7, #24]
 800e584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	f003 0303 	and.w	r3, r3, #3
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d123      	bne.n	800e5da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	08da      	lsrs	r2, r3, #3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3208      	adds	r2, #8
 800e59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	f003 0307 	and.w	r3, r3, #7
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	220f      	movs	r2, #15
 800e5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ae:	43db      	mvns	r3, r3
 800e5b0:	69ba      	ldr	r2, [r7, #24]
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	691a      	ldr	r2, [r3, #16]
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	f003 0307 	and.w	r3, r3, #7
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c6:	69ba      	ldr	r2, [r7, #24]
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	08da      	lsrs	r2, r3, #3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3208      	adds	r2, #8
 800e5d4:	69b9      	ldr	r1, [r7, #24]
 800e5d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	005b      	lsls	r3, r3, #1
 800e5e4:	2203      	movs	r2, #3
 800e5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ea:	43db      	mvns	r3, r3
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	4013      	ands	r3, r2
 800e5f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	f003 0203 	and.w	r2, r3, #3
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	005b      	lsls	r3, r3, #1
 800e5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e602:	69ba      	ldr	r2, [r7, #24]
 800e604:	4313      	orrs	r3, r2
 800e606:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	69ba      	ldr	r2, [r7, #24]
 800e60c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 80d8 	beq.w	800e7cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e61c:	4b2c      	ldr	r3, [pc, #176]	@ (800e6d0 <HAL_GPIO_Init+0x22c>)
 800e61e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e622:	4a2b      	ldr	r2, [pc, #172]	@ (800e6d0 <HAL_GPIO_Init+0x22c>)
 800e624:	f043 0302 	orr.w	r3, r3, #2
 800e628:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e62c:	4b28      	ldr	r3, [pc, #160]	@ (800e6d0 <HAL_GPIO_Init+0x22c>)
 800e62e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e632:	f003 0302 	and.w	r3, r3, #2
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e63a:	4a26      	ldr	r2, [pc, #152]	@ (800e6d4 <HAL_GPIO_Init+0x230>)
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	089b      	lsrs	r3, r3, #2
 800e640:	3302      	adds	r3, #2
 800e642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	f003 0303 	and.w	r3, r3, #3
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	220f      	movs	r2, #15
 800e652:	fa02 f303 	lsl.w	r3, r2, r3
 800e656:	43db      	mvns	r3, r3
 800e658:	69ba      	ldr	r2, [r7, #24]
 800e65a:	4013      	ands	r3, r2
 800e65c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a1d      	ldr	r2, [pc, #116]	@ (800e6d8 <HAL_GPIO_Init+0x234>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d04a      	beq.n	800e6fc <HAL_GPIO_Init+0x258>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a1c      	ldr	r2, [pc, #112]	@ (800e6dc <HAL_GPIO_Init+0x238>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d02b      	beq.n	800e6c6 <HAL_GPIO_Init+0x222>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a1b      	ldr	r2, [pc, #108]	@ (800e6e0 <HAL_GPIO_Init+0x23c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d025      	beq.n	800e6c2 <HAL_GPIO_Init+0x21e>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a1a      	ldr	r2, [pc, #104]	@ (800e6e4 <HAL_GPIO_Init+0x240>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d01f      	beq.n	800e6be <HAL_GPIO_Init+0x21a>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a19      	ldr	r2, [pc, #100]	@ (800e6e8 <HAL_GPIO_Init+0x244>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d019      	beq.n	800e6ba <HAL_GPIO_Init+0x216>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a18      	ldr	r2, [pc, #96]	@ (800e6ec <HAL_GPIO_Init+0x248>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d013      	beq.n	800e6b6 <HAL_GPIO_Init+0x212>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a17      	ldr	r2, [pc, #92]	@ (800e6f0 <HAL_GPIO_Init+0x24c>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d00d      	beq.n	800e6b2 <HAL_GPIO_Init+0x20e>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a16      	ldr	r2, [pc, #88]	@ (800e6f4 <HAL_GPIO_Init+0x250>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d007      	beq.n	800e6ae <HAL_GPIO_Init+0x20a>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a15      	ldr	r2, [pc, #84]	@ (800e6f8 <HAL_GPIO_Init+0x254>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d101      	bne.n	800e6aa <HAL_GPIO_Init+0x206>
 800e6a6:	2309      	movs	r3, #9
 800e6a8:	e029      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6aa:	230a      	movs	r3, #10
 800e6ac:	e027      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6ae:	2307      	movs	r3, #7
 800e6b0:	e025      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6b2:	2306      	movs	r3, #6
 800e6b4:	e023      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6b6:	2305      	movs	r3, #5
 800e6b8:	e021      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6ba:	2304      	movs	r3, #4
 800e6bc:	e01f      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6be:	2303      	movs	r3, #3
 800e6c0:	e01d      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	e01b      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e019      	b.n	800e6fe <HAL_GPIO_Init+0x25a>
 800e6ca:	bf00      	nop
 800e6cc:	58000080 	.word	0x58000080
 800e6d0:	58024400 	.word	0x58024400
 800e6d4:	58000400 	.word	0x58000400
 800e6d8:	58020000 	.word	0x58020000
 800e6dc:	58020400 	.word	0x58020400
 800e6e0:	58020800 	.word	0x58020800
 800e6e4:	58020c00 	.word	0x58020c00
 800e6e8:	58021000 	.word	0x58021000
 800e6ec:	58021400 	.word	0x58021400
 800e6f0:	58021800 	.word	0x58021800
 800e6f4:	58021c00 	.word	0x58021c00
 800e6f8:	58022400 	.word	0x58022400
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	69fa      	ldr	r2, [r7, #28]
 800e700:	f002 0203 	and.w	r2, r2, #3
 800e704:	0092      	lsls	r2, r2, #2
 800e706:	4093      	lsls	r3, r2
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e70e:	4938      	ldr	r1, [pc, #224]	@ (800e7f0 <HAL_GPIO_Init+0x34c>)
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	089b      	lsrs	r3, r3, #2
 800e714:	3302      	adds	r3, #2
 800e716:	69ba      	ldr	r2, [r7, #24]
 800e718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e71c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	43db      	mvns	r3, r3
 800e728:	69ba      	ldr	r2, [r7, #24]
 800e72a:	4013      	ands	r3, r2
 800e72c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e736:	2b00      	cmp	r3, #0
 800e738:	d003      	beq.n	800e742 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e73a:	69ba      	ldr	r2, [r7, #24]
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	4313      	orrs	r3, r2
 800e740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	43db      	mvns	r3, r3
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	4013      	ands	r3, r2
 800e75a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e764:	2b00      	cmp	r3, #0
 800e766:	d003      	beq.n	800e770 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	43db      	mvns	r3, r3
 800e782:	69ba      	ldr	r2, [r7, #24]
 800e784:	4013      	ands	r3, r2
 800e786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e790:	2b00      	cmp	r3, #0
 800e792:	d003      	beq.n	800e79c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e794:	69ba      	ldr	r2, [r7, #24]
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	4313      	orrs	r3, r2
 800e79a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	43db      	mvns	r3, r3
 800e7ac:	69ba      	ldr	r2, [r7, #24]
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d003      	beq.n	800e7c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e7be:	69ba      	ldr	r2, [r7, #24]
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	69ba      	ldr	r2, [r7, #24]
 800e7ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f47f ae6b 	bne.w	800e4b8 <HAL_GPIO_Init+0x14>
  }
}
 800e7e2:	bf00      	nop
 800e7e4:	bf00      	nop
 800e7e6:	3724      	adds	r7, #36	@ 0x24
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr
 800e7f0:	58000400 	.word	0x58000400

0800e7f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	691a      	ldr	r2, [r3, #16]
 800e804:	887b      	ldrh	r3, [r7, #2]
 800e806:	4013      	ands	r3, r2
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d002      	beq.n	800e812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e80c:	2301      	movs	r3, #1
 800e80e:	73fb      	strb	r3, [r7, #15]
 800e810:	e001      	b.n	800e816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e812:	2300      	movs	r3, #0
 800e814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e816:	7bfb      	ldrb	r3, [r7, #15]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	460b      	mov	r3, r1
 800e82e:	807b      	strh	r3, [r7, #2]
 800e830:	4613      	mov	r3, r2
 800e832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e834:	787b      	ldrb	r3, [r7, #1]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d003      	beq.n	800e842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e83a:	887a      	ldrh	r2, [r7, #2]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e840:	e003      	b.n	800e84a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e842:	887b      	ldrh	r3, [r7, #2]
 800e844:	041a      	lsls	r2, r3, #16
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	619a      	str	r2, [r3, #24]
}
 800e84a:	bf00      	nop
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b082      	sub	sp, #8
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	4603      	mov	r3, r0
 800e85e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e864:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e868:	88fb      	ldrh	r3, [r7, #6]
 800e86a:	4013      	ands	r3, r2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d008      	beq.n	800e882 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e874:	88fb      	ldrh	r3, [r7, #6]
 800e876:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e87a:	88fb      	ldrh	r3, [r7, #6]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f7 fd61 	bl	8006344 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e882:	bf00      	nop
 800e884:	3708      	adds	r7, #8
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
	...

0800e88c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	e08b      	b.n	800e9b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f6 fb0c 	bl	8004ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2224      	movs	r2, #36	@ 0x24
 800e8bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f022 0201 	bic.w	r2, r2, #1
 800e8ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e8dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689a      	ldr	r2, [r3, #8]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e8ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d107      	bne.n	800e906 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689a      	ldr	r2, [r3, #8]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e902:	609a      	str	r2, [r3, #8]
 800e904:	e006      	b.n	800e914 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	689a      	ldr	r2, [r3, #8]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e912:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d108      	bne.n	800e92e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	685a      	ldr	r2, [r3, #4]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e92a:	605a      	str	r2, [r3, #4]
 800e92c:	e007      	b.n	800e93e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e93c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6859      	ldr	r1, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	4b1d      	ldr	r3, [pc, #116]	@ (800e9c0 <HAL_I2C_Init+0x134>)
 800e94a:	430b      	orrs	r3, r1
 800e94c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68da      	ldr	r2, [r3, #12]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e95c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	691a      	ldr	r2, [r3, #16]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	695b      	ldr	r3, [r3, #20]
 800e966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	699b      	ldr	r3, [r3, #24]
 800e96e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	430a      	orrs	r2, r1
 800e976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	69d9      	ldr	r1, [r3, #28]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1a      	ldr	r2, [r3, #32]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	430a      	orrs	r2, r1
 800e986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f042 0201 	orr.w	r2, r2, #1
 800e996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2220      	movs	r2, #32
 800e9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	02008000 	.word	0x02008000

0800e9c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b088      	sub	sp, #32
 800e9c8:	af02      	add	r7, sp, #8
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	817b      	strh	r3, [r7, #10]
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	813b      	strh	r3, [r7, #8]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b20      	cmp	r3, #32
 800e9e8:	f040 80f9 	bne.w	800ebde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <HAL_I2C_Mem_Write+0x34>
 800e9f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d105      	bne.n	800ea04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	e0ed      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d101      	bne.n	800ea12 <HAL_I2C_Mem_Write+0x4e>
 800ea0e:	2302      	movs	r3, #2
 800ea10:	e0e6      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ea1a:	f7fa fdbb 	bl	8009594 <HAL_GetTick>
 800ea1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	2319      	movs	r3, #25
 800ea26:	2201      	movs	r2, #1
 800ea28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f002 f818 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d001      	beq.n	800ea3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e0d1      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2221      	movs	r2, #33	@ 0x21
 800ea40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2240      	movs	r2, #64	@ 0x40
 800ea48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6a3a      	ldr	r2, [r7, #32]
 800ea56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2200      	movs	r2, #0
 800ea62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea64:	88f8      	ldrh	r0, [r7, #6]
 800ea66:	893a      	ldrh	r2, [r7, #8]
 800ea68:	8979      	ldrh	r1, [r7, #10]
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	9301      	str	r3, [sp, #4]
 800ea6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	4603      	mov	r3, r0
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	f001 f965 	bl	800fd44 <I2C_RequestMemoryWrite>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d005      	beq.n	800ea8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2200      	movs	r2, #0
 800ea84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e0a9      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	2bff      	cmp	r3, #255	@ 0xff
 800ea94:	d90e      	bls.n	800eab4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	22ff      	movs	r2, #255	@ 0xff
 800ea9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	8979      	ldrh	r1, [r7, #10]
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f002 f99b 	bl	8010de8 <I2C_TransferConfig>
 800eab2:	e00f      	b.n	800ead4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	8979      	ldrh	r1, [r7, #10]
 800eac6:	2300      	movs	r3, #0
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f002 f98a 	bl	8010de8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ead4:	697a      	ldr	r2, [r7, #20]
 800ead6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f002 f81b 	bl	8010b14 <I2C_WaitOnTXISFlagUntilTimeout>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d001      	beq.n	800eae8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800eae4:	2301      	movs	r3, #1
 800eae6:	e07b      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaec:	781a      	ldrb	r2, [r3, #0]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	3b01      	subs	r3, #1
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb10:	3b01      	subs	r3, #1
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d034      	beq.n	800eb8c <HAL_I2C_Mem_Write+0x1c8>
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d130      	bne.n	800eb8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	2200      	movs	r2, #0
 800eb32:	2180      	movs	r1, #128	@ 0x80
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f001 ff94 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e04d      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	2bff      	cmp	r3, #255	@ 0xff
 800eb4c:	d90e      	bls.n	800eb6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	22ff      	movs	r2, #255	@ 0xff
 800eb52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb58:	b2da      	uxtb	r2, r3
 800eb5a:	8979      	ldrh	r1, [r7, #10]
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f002 f93f 	bl	8010de8 <I2C_TransferConfig>
 800eb6a:	e00f      	b.n	800eb8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	8979      	ldrh	r1, [r7, #10]
 800eb7e:	2300      	movs	r3, #0
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f002 f92e 	bl	8010de8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d19e      	bne.n	800ead4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f002 f801 	bl	8010ba2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e01a      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6859      	ldr	r1, [r3, #4]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe8 <HAL_I2C_Mem_Write+0x224>)
 800ebbe:	400b      	ands	r3, r1
 800ebc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	e000      	b.n	800ebe0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ebde:	2302      	movs	r3, #2
  }
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3718      	adds	r7, #24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	fe00e800 	.word	0xfe00e800

0800ebec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b088      	sub	sp, #32
 800ebf0:	af02      	add	r7, sp, #8
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	4608      	mov	r0, r1
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	817b      	strh	r3, [r7, #10]
 800ebfe:	460b      	mov	r3, r1
 800ec00:	813b      	strh	r3, [r7, #8]
 800ec02:	4613      	mov	r3, r2
 800ec04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b20      	cmp	r3, #32
 800ec10:	f040 80fd 	bne.w	800ee0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d002      	beq.n	800ec20 <HAL_I2C_Mem_Read+0x34>
 800ec1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d105      	bne.n	800ec2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e0f1      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d101      	bne.n	800ec3a <HAL_I2C_Mem_Read+0x4e>
 800ec36:	2302      	movs	r3, #2
 800ec38:	e0ea      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec42:	f7fa fca7 	bl	8009594 <HAL_GetTick>
 800ec46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	2319      	movs	r3, #25
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f001 ff04 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d001      	beq.n	800ec64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e0d5      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2222      	movs	r2, #34	@ 0x22
 800ec68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2240      	movs	r2, #64	@ 0x40
 800ec70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2200      	movs	r2, #0
 800ec78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6a3a      	ldr	r2, [r7, #32]
 800ec7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ec8c:	88f8      	ldrh	r0, [r7, #6]
 800ec8e:	893a      	ldrh	r2, [r7, #8]
 800ec90:	8979      	ldrh	r1, [r7, #10]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	9301      	str	r3, [sp, #4]
 800ec96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f001 f8a5 	bl	800fdec <I2C_RequestMemoryRead>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d005      	beq.n	800ecb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e0ad      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	2bff      	cmp	r3, #255	@ 0xff
 800ecbc:	d90e      	bls.n	800ecdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	22ff      	movs	r2, #255	@ 0xff
 800ecc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecc8:	b2da      	uxtb	r2, r3
 800ecca:	8979      	ldrh	r1, [r7, #10]
 800eccc:	4b52      	ldr	r3, [pc, #328]	@ (800ee18 <HAL_I2C_Mem_Read+0x22c>)
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f002 f887 	bl	8010de8 <I2C_TransferConfig>
 800ecda:	e00f      	b.n	800ecfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	8979      	ldrh	r1, [r7, #10]
 800ecee:	4b4a      	ldr	r3, [pc, #296]	@ (800ee18 <HAL_I2C_Mem_Read+0x22c>)
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f002 f876 	bl	8010de8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed02:	2200      	movs	r2, #0
 800ed04:	2104      	movs	r1, #4
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f001 feab 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e07c      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed20:	b2d2      	uxtb	r2, r2
 800ed22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed32:	3b01      	subs	r3, #1
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	3b01      	subs	r3, #1
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d034      	beq.n	800edbc <HAL_I2C_Mem_Read+0x1d0>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d130      	bne.n	800edbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	2200      	movs	r2, #0
 800ed62:	2180      	movs	r1, #128	@ 0x80
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f001 fe7c 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ed70:	2301      	movs	r3, #1
 800ed72:	e04d      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	2bff      	cmp	r3, #255	@ 0xff
 800ed7c:	d90e      	bls.n	800ed9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	22ff      	movs	r2, #255	@ 0xff
 800ed82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	8979      	ldrh	r1, [r7, #10]
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f002 f827 	bl	8010de8 <I2C_TransferConfig>
 800ed9a:	e00f      	b.n	800edbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edaa:	b2da      	uxtb	r2, r3
 800edac:	8979      	ldrh	r1, [r7, #10]
 800edae:	2300      	movs	r3, #0
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f002 f816 	bl	8010de8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d19a      	bne.n	800ecfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f001 fee9 	bl	8010ba2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800edd6:	2301      	movs	r3, #1
 800edd8:	e01a      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2220      	movs	r2, #32
 800ede0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	6859      	ldr	r1, [r3, #4]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	4b0b      	ldr	r3, [pc, #44]	@ (800ee1c <HAL_I2C_Mem_Read+0x230>)
 800edee:	400b      	ands	r3, r1
 800edf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2220      	movs	r2, #32
 800edf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e000      	b.n	800ee10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ee0e:	2302      	movs	r3, #2
  }
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	80002400 	.word	0x80002400
 800ee1c:	fe00e800 	.word	0xfe00e800

0800ee20 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af02      	add	r7, sp, #8
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	4608      	mov	r0, r1
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	4603      	mov	r3, r0
 800ee30:	817b      	strh	r3, [r7, #10]
 800ee32:	460b      	mov	r3, r1
 800ee34:	813b      	strh	r3, [r7, #8]
 800ee36:	4613      	mov	r3, r2
 800ee38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b20      	cmp	r3, #32
 800ee44:	d16a      	bne.n	800ef1c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <HAL_I2C_Mem_Write_IT+0x32>
 800ee4c:	8bbb      	ldrh	r3, [r7, #28]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d105      	bne.n	800ee5e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee58:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e05f      	b.n	800ef1e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee6c:	d101      	bne.n	800ee72 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800ee6e:	2302      	movs	r3, #2
 800ee70:	e055      	b.n	800ef1e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d101      	bne.n	800ee80 <HAL_I2C_Mem_Write_IT+0x60>
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	e04e      	b.n	800ef1e <HAL_I2C_Mem_Write_IT+0xfe>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2221      	movs	r2, #33	@ 0x21
 800ee8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2240      	movs	r2, #64	@ 0x40
 800ee94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2200      	movs	r2, #0
 800eea2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	69ba      	ldr	r2, [r7, #24]
 800eea8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8bba      	ldrh	r2, [r7, #28]
 800eeae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4a1d      	ldr	r2, [pc, #116]	@ (800ef28 <HAL_I2C_Mem_Write_IT+0x108>)
 800eeb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	4a1c      	ldr	r2, [pc, #112]	@ (800ef2c <HAL_I2C_Mem_Write_IT+0x10c>)
 800eeba:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eebc:	897a      	ldrh	r2, [r7, #10]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eec2:	88fb      	ldrh	r3, [r7, #6]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d109      	bne.n	800eedc <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eec8:	893b      	ldrh	r3, [r7, #8]
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f04f 32ff 	mov.w	r2, #4294967295
 800eed8:	651a      	str	r2, [r3, #80]	@ 0x50
 800eeda:	e00b      	b.n	800eef4 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eedc:	893b      	ldrh	r3, [r7, #8]
 800eede:	0a1b      	lsrs	r3, r3, #8
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eeea:	893b      	ldrh	r3, [r7, #8]
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	461a      	mov	r2, r3
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800eef4:	88fb      	ldrh	r3, [r7, #6]
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	8979      	ldrh	r1, [r7, #10]
 800eefa:	4b0d      	ldr	r3, [pc, #52]	@ (800ef30 <HAL_I2C_Mem_Write_IT+0x110>)
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f001 ff70 	bl	8010de8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ef10:	2101      	movs	r1, #1
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f001 ff9a 	bl	8010e4c <I2C_Enable_IRQ>

    return HAL_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e000      	b.n	800ef1e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ef1c:	2302      	movs	r3, #2
  }
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	ffff0000 	.word	0xffff0000
 800ef2c:	0800f131 	.word	0x0800f131
 800ef30:	80002000 	.word	0x80002000

0800ef34 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	4608      	mov	r0, r1
 800ef3e:	4611      	mov	r1, r2
 800ef40:	461a      	mov	r2, r3
 800ef42:	4603      	mov	r3, r0
 800ef44:	817b      	strh	r3, [r7, #10]
 800ef46:	460b      	mov	r3, r1
 800ef48:	813b      	strh	r3, [r7, #8]
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	d166      	bne.n	800f028 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <HAL_I2C_Mem_Read_IT+0x32>
 800ef60:	8bbb      	ldrh	r3, [r7, #28]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d105      	bne.n	800ef72 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef6c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e05b      	b.n	800f02a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef80:	d101      	bne.n	800ef86 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ef82:	2302      	movs	r3, #2
 800ef84:	e051      	b.n	800f02a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d101      	bne.n	800ef94 <HAL_I2C_Mem_Read_IT+0x60>
 800ef90:	2302      	movs	r3, #2
 800ef92:	e04a      	b.n	800f02a <HAL_I2C_Mem_Read_IT+0xf6>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2222      	movs	r2, #34	@ 0x22
 800efa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2240      	movs	r2, #64	@ 0x40
 800efa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2200      	movs	r2, #0
 800efb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	69ba      	ldr	r2, [r7, #24]
 800efb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	8bba      	ldrh	r2, [r7, #28]
 800efbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	4a1c      	ldr	r2, [pc, #112]	@ (800f034 <HAL_I2C_Mem_Read_IT+0x100>)
 800efc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4a1c      	ldr	r2, [pc, #112]	@ (800f038 <HAL_I2C_Mem_Read_IT+0x104>)
 800efc8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800efca:	897a      	ldrh	r2, [r7, #10]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efd0:	88fb      	ldrh	r3, [r7, #6]
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d109      	bne.n	800efea <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efd6:	893b      	ldrh	r3, [r7, #8]
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f04f 32ff 	mov.w	r2, #4294967295
 800efe6:	651a      	str	r2, [r3, #80]	@ 0x50
 800efe8:	e00b      	b.n	800f002 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efea:	893b      	ldrh	r3, [r7, #8]
 800efec:	0a1b      	lsrs	r3, r3, #8
 800efee:	b29b      	uxth	r3, r3
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eff8:	893b      	ldrh	r3, [r7, #8]
 800effa:	b2db      	uxtb	r3, r3
 800effc:	461a      	mov	r2, r3
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f002:	88fb      	ldrh	r3, [r7, #6]
 800f004:	b2da      	uxtb	r2, r3
 800f006:	8979      	ldrh	r1, [r7, #10]
 800f008:	4b0c      	ldr	r3, [pc, #48]	@ (800f03c <HAL_I2C_Mem_Read_IT+0x108>)
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	2300      	movs	r3, #0
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f001 feea 	bl	8010de8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f01c:	2101      	movs	r1, #1
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f001 ff14 	bl	8010e4c <I2C_Enable_IRQ>

    return HAL_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	e000      	b.n	800f02a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800f028:	2302      	movs	r3, #2
  }
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	ffff0000 	.word	0xffff0000
 800f038:	0800f131 	.word	0x0800f131
 800f03c:	80002000 	.word	0x80002000

0800f040 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d005      	beq.n	800f06c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	68f9      	ldr	r1, [r7, #12]
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	4798      	blx	r3
  }
}
 800f06c:	bf00      	nop
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f07c:	bf00      	nop
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f0b8:	bf00      	nop
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f0d4:	bf00      	nop
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr

0800f0e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f0e8:	bf00      	nop
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f124:	bf00      	nop
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b088      	sub	sp, #32
 800f134:	af02      	add	r7, sp, #8
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f13c:	4b8d      	ldr	r3, [pc, #564]	@ (800f374 <I2C_Mem_ISR_IT+0x244>)
 800f13e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d101      	bne.n	800f152 <I2C_Mem_ISR_IT+0x22>
 800f14e:	2302      	movs	r3, #2
 800f150:	e10c      	b.n	800f36c <I2C_Mem_ISR_IT+0x23c>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	f003 0310 	and.w	r3, r3, #16
 800f160:	2b00      	cmp	r3, #0
 800f162:	d012      	beq.n	800f18a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00d      	beq.n	800f18a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2210      	movs	r2, #16
 800f174:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f17a:	f043 0204 	orr.w	r2, r3, #4
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	f001 fc2b 	bl	80109de <I2C_Flush_TXDR>
 800f188:	e0dd      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	f003 0304 	and.w	r3, r3, #4
 800f190:	2b00      	cmp	r3, #0
 800f192:	d022      	beq.n	800f1da <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d01d      	beq.n	800f1da <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f023 0304 	bic.w	r3, r3, #4
 800f1a4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b0:	b2d2      	uxtb	r2, r2
 800f1b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b8:	1c5a      	adds	r2, r3, #1
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f1d8:	e0b5      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	f003 0302 	and.w	r3, r3, #2
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d02c      	beq.n	800f23e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d027      	beq.n	800f23e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f6:	d118      	bne.n	800f22a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1fc:	781a      	ldrb	r2, [r3, #0]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f212:	3b01      	subs	r3, #1
 800f214:	b29a      	uxth	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f21e:	b29b      	uxth	r3, r3
 800f220:	3b01      	subs	r3, #1
 800f222:	b29a      	uxth	r2, r3
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f228:	e08d      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f232:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f04f 32ff 	mov.w	r2, #4294967295
 800f23a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f23c:	e083      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f244:	2b00      	cmp	r3, #0
 800f246:	d03c      	beq.n	800f2c2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d037      	beq.n	800f2c2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f256:	b29b      	uxth	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d02c      	beq.n	800f2b6 <I2C_Mem_ISR_IT+0x186>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f260:	2b00      	cmp	r3, #0
 800f262:	d128      	bne.n	800f2b6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f268:	b29b      	uxth	r3, r3
 800f26a:	2bff      	cmp	r3, #255	@ 0xff
 800f26c:	d910      	bls.n	800f290 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	22ff      	movs	r2, #255	@ 0xff
 800f272:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f278:	b299      	uxth	r1, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	2300      	movs	r3, #0
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f001 fdad 	bl	8010de8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f28e:	e017      	b.n	800f2c0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f294:	b29a      	uxth	r2, r3
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f29e:	b299      	uxth	r1, r3
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	9300      	str	r3, [sp, #0]
 800f2aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f001 fd9a 	bl	8010de8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2b4:	e004      	b.n	800f2c0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f2b6:	2140      	movs	r1, #64	@ 0x40
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f001 fa79 	bl	80107b0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f2be:	e042      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
 800f2c0:	e041      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d03c      	beq.n	800f346 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d037      	beq.n	800f346 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f001 fe3b 	bl	8010f54 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2de:	2102      	movs	r1, #2
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f001 fdb3 	bl	8010e4c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b22      	cmp	r3, #34	@ 0x22
 800f2f0:	d101      	bne.n	800f2f6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f2f2:	4b21      	ldr	r3, [pc, #132]	@ (800f378 <I2C_Mem_ISR_IT+0x248>)
 800f2f4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	2bff      	cmp	r3, #255	@ 0xff
 800f2fe:	d910      	bls.n	800f322 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	22ff      	movs	r2, #255	@ 0xff
 800f304:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f30a:	b299      	uxth	r1, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f310:	b2da      	uxtb	r2, r3
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f001 fd64 	bl	8010de8 <I2C_TransferConfig>
 800f320:	e011      	b.n	800f346 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f326:	b29a      	uxth	r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f330:	b299      	uxth	r1, r3
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f336:	b2da      	uxtb	r2, r3
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	9300      	str	r3, [sp, #0]
 800f33c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f001 fd51 	bl	8010de8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	f003 0320 	and.w	r3, r3, #32
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d008      	beq.n	800f362 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f35a:	6939      	ldr	r1, [r7, #16]
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f000 feb7 	bl	80100d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	80002000 	.word	0x80002000
 800f378:	80002400 	.word	0x80002400

0800f37c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f38c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d101      	bne.n	800f3a0 <I2C_Slave_ISR_IT+0x24>
 800f39c:	2302      	movs	r3, #2
 800f39e:	e0e2      	b.n	800f566 <I2C_Slave_ISR_IT+0x1ea>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	f003 0320 	and.w	r3, r3, #32
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d009      	beq.n	800f3c6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d004      	beq.n	800f3c6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f3bc:	6939      	ldr	r1, [r7, #16]
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 ff4e 	bl	8010260 <I2C_ITSlaveCplt>
 800f3c4:	e0ca      	b.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	f003 0310 	and.w	r3, r3, #16
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d04b      	beq.n	800f468 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d046      	beq.n	800f468 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d128      	bne.n	800f436 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	2b28      	cmp	r3, #40	@ 0x28
 800f3ee:	d108      	bne.n	800f402 <I2C_Slave_ISR_IT+0x86>
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3f6:	d104      	bne.n	800f402 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f3f8:	6939      	ldr	r1, [r7, #16]
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f001 f984 	bl	8010708 <I2C_ITListenCplt>
 800f400:	e031      	b.n	800f466 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b29      	cmp	r3, #41	@ 0x29
 800f40c:	d10e      	bne.n	800f42c <I2C_Slave_ISR_IT+0xb0>
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f414:	d00a      	beq.n	800f42c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2210      	movs	r2, #16
 800f41c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f001 fadd 	bl	80109de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f000 fdf6 	bl	8010016 <I2C_ITSlaveSeqCplt>
 800f42a:	e01c      	b.n	800f466 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2210      	movs	r2, #16
 800f432:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f434:	e08f      	b.n	800f556 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2210      	movs	r2, #16
 800f43c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f442:	f043 0204 	orr.w	r2, r3, #4
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d003      	beq.n	800f458 <I2C_Slave_ISR_IT+0xdc>
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f456:	d17e      	bne.n	800f556 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f45c:	4619      	mov	r1, r3
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f001 f9a6 	bl	80107b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f464:	e077      	b.n	800f556 <I2C_Slave_ISR_IT+0x1da>
 800f466:	e076      	b.n	800f556 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	f003 0304 	and.w	r3, r3, #4
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d02f      	beq.n	800f4d2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d02a      	beq.n	800f4d2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f480:	b29b      	uxth	r3, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	d018      	beq.n	800f4b8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f490:	b2d2      	uxtb	r2, r2
 800f492:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d14b      	bne.n	800f55a <I2C_Slave_ISR_IT+0x1de>
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f4c8:	d047      	beq.n	800f55a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f000 fda3 	bl	8010016 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f4d0:	e043      	b.n	800f55a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	f003 0308 	and.w	r3, r3, #8
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d009      	beq.n	800f4f0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d004      	beq.n	800f4f0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f4e6:	6939      	ldr	r1, [r7, #16]
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 fcd3 	bl	800fe94 <I2C_ITAddrCplt>
 800f4ee:	e035      	b.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	f003 0302 	and.w	r3, r3, #2
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d030      	beq.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f500:	2b00      	cmp	r3, #0
 800f502:	d02b      	beq.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f508:	b29b      	uxth	r3, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d018      	beq.n	800f540 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f512:	781a      	ldrb	r2, [r3, #0]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f51e:	1c5a      	adds	r2, r3, #1
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f528:	b29b      	uxth	r3, r3
 800f52a:	3b01      	subs	r3, #1
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f536:	3b01      	subs	r3, #1
 800f538:	b29a      	uxth	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f53e:	e00d      	b.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f546:	d002      	beq.n	800f54e <I2C_Slave_ISR_IT+0x1d2>
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d106      	bne.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f000 fd61 	bl	8010016 <I2C_ITSlaveSeqCplt>
 800f554:	e002      	b.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f556:	bf00      	nop
 800f558:	e000      	b.n	800f55c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f55a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3718      	adds	r7, #24
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}

0800f56e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b088      	sub	sp, #32
 800f572:	af02      	add	r7, sp, #8
 800f574:	60f8      	str	r0, [r7, #12]
 800f576:	60b9      	str	r1, [r7, #8]
 800f578:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f580:	2b01      	cmp	r3, #1
 800f582:	d101      	bne.n	800f588 <I2C_Master_ISR_DMA+0x1a>
 800f584:	2302      	movs	r3, #2
 800f586:	e0d9      	b.n	800f73c <I2C_Master_ISR_DMA+0x1ce>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2201      	movs	r2, #1
 800f58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f003 0310 	and.w	r3, r3, #16
 800f596:	2b00      	cmp	r3, #0
 800f598:	d016      	beq.n	800f5c8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d011      	beq.n	800f5c8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2210      	movs	r2, #16
 800f5aa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5b0:	f043 0204 	orr.w	r2, r3, #4
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f5b8:	2120      	movs	r1, #32
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f001 fc46 	bl	8010e4c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f001 fa0c 	bl	80109de <I2C_Flush_TXDR>
 800f5c6:	e0b4      	b.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d071      	beq.n	800f6b6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d06c      	beq.n	800f6b6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5ea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d04e      	beq.n	800f694 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f602:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f608:	b29b      	uxth	r3, r3
 800f60a:	2bff      	cmp	r3, #255	@ 0xff
 800f60c:	d906      	bls.n	800f61c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	22ff      	movs	r2, #255	@ 0xff
 800f612:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f614:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	e010      	b.n	800f63e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f620:	b29a      	uxth	r2, r3
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f62a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f62e:	d003      	beq.n	800f638 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f634:	617b      	str	r3, [r7, #20]
 800f636:	e002      	b.n	800f63e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f638:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f63c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f642:	b2da      	uxtb	r2, r3
 800f644:	8a79      	ldrh	r1, [r7, #18]
 800f646:	2300      	movs	r3, #0
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f001 fbcb 	bl	8010de8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f656:	b29a      	uxth	r2, r3
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	b29a      	uxth	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	2b22      	cmp	r3, #34	@ 0x22
 800f66e:	d108      	bne.n	800f682 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f67e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f680:	e057      	b.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f690:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f692:	e04e      	b.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f69e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6a2:	d003      	beq.n	800f6ac <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f000 fc79 	bl	800ff9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f6aa:	e042      	b.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f6ac:	2140      	movs	r1, #64	@ 0x40
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f001 f87e 	bl	80107b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f6b4:	e03d      	b.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d028      	beq.n	800f712 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d023      	beq.n	800f712 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d119      	bne.n	800f708 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6e2:	d025      	beq.n	800f730 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f6ec:	d108      	bne.n	800f700 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	685a      	ldr	r2, [r3, #4]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f6fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f6fe:	e017      	b.n	800f730 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 fc4b 	bl	800ff9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f706:	e013      	b.n	800f730 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f708:	2140      	movs	r1, #64	@ 0x40
 800f70a:	68f8      	ldr	r0, [r7, #12]
 800f70c:	f001 f850 	bl	80107b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f710:	e00e      	b.n	800f730 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	f003 0320 	and.w	r3, r3, #32
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00a      	beq.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f722:	2b00      	cmp	r3, #0
 800f724:	d005      	beq.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f726:	68b9      	ldr	r1, [r7, #8]
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f000 fcd1 	bl	80100d0 <I2C_ITMasterCplt>
 800f72e:	e000      	b.n	800f732 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f730:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3718      	adds	r7, #24
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af02      	add	r7, sp, #8
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f750:	4b8d      	ldr	r3, [pc, #564]	@ (800f988 <I2C_Mem_ISR_DMA+0x244>)
 800f752:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d101      	bne.n	800f762 <I2C_Mem_ISR_DMA+0x1e>
 800f75e:	2302      	movs	r3, #2
 800f760:	e10e      	b.n	800f980 <I2C_Mem_ISR_DMA+0x23c>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2201      	movs	r2, #1
 800f766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	f003 0310 	and.w	r3, r3, #16
 800f770:	2b00      	cmp	r3, #0
 800f772:	d016      	beq.n	800f7a2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d011      	beq.n	800f7a2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2210      	movs	r2, #16
 800f784:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f78a:	f043 0204 	orr.w	r2, r3, #4
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f792:	2120      	movs	r1, #32
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f001 fb59 	bl	8010e4c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f001 f91f 	bl	80109de <I2C_Flush_TXDR>
 800f7a0:	e0e9      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	f003 0302 	and.w	r3, r3, #2
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00e      	beq.n	800f7ca <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d009      	beq.n	800f7ca <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f7be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c6:	651a      	str	r2, [r3, #80]	@ 0x50
 800f7c8:	e0d5      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d05f      	beq.n	800f894 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d05a      	beq.n	800f894 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f7de:	2101      	movs	r1, #1
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f001 fbb7 	bl	8010f54 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f7e6:	2110      	movs	r1, #16
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f001 fb2f 	bl	8010e4c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d048      	beq.n	800f88a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	2bff      	cmp	r3, #255	@ 0xff
 800f800:	d910      	bls.n	800f824 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	22ff      	movs	r2, #255	@ 0xff
 800f806:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f80c:	b299      	uxth	r1, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f812:	b2da      	uxtb	r2, r3
 800f814:	2300      	movs	r3, #0
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f001 fae3 	bl	8010de8 <I2C_TransferConfig>
 800f822:	e011      	b.n	800f848 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f828:	b29a      	uxth	r2, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f832:	b299      	uxth	r1, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	2300      	movs	r3, #0
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f001 fad0 	bl	8010de8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	b29a      	uxth	r2, r3
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b22      	cmp	r3, #34	@ 0x22
 800f864:	d108      	bne.n	800f878 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f874:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f876:	e07e      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f886:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f888:	e075      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f88a:	2140      	movs	r1, #64	@ 0x40
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f000 ff8f 	bl	80107b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f892:	e070      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d05d      	beq.n	800f95a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d058      	beq.n	800f95a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f001 fb52 	bl	8010f54 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f8b0:	2110      	movs	r1, #16
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f001 faca 	bl	8010e4c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b22      	cmp	r3, #34	@ 0x22
 800f8c2:	d101      	bne.n	800f8c8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f8c4:	4b31      	ldr	r3, [pc, #196]	@ (800f98c <I2C_Mem_ISR_DMA+0x248>)
 800f8c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	2bff      	cmp	r3, #255	@ 0xff
 800f8d0:	d910      	bls.n	800f8f4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	22ff      	movs	r2, #255	@ 0xff
 800f8d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8dc:	b299      	uxth	r1, r3
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f001 fa7b 	bl	8010de8 <I2C_TransferConfig>
 800f8f2:	e011      	b.n	800f918 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f902:	b299      	uxth	r1, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f001 fa68 	bl	8010de8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	b29a      	uxth	r2, r3
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b22      	cmp	r3, #34	@ 0x22
 800f934:	d108      	bne.n	800f948 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f944:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f946:	e016      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f956:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f958:	e00d      	b.n	800f976 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f003 0320 	and.w	r3, r3, #32
 800f960:	2b00      	cmp	r3, #0
 800f962:	d008      	beq.n	800f976 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d003      	beq.n	800f976 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f96e:	68b9      	ldr	r1, [r7, #8]
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 fbad 	bl	80100d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f97e:	2300      	movs	r3, #0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3718      	adds	r7, #24
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	80002000 	.word	0x80002000
 800f98c:	80002400 	.word	0x80002400

0800f990 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b088      	sub	sp, #32
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9a0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d101      	bne.n	800f9b4 <I2C_Slave_ISR_DMA+0x24>
 800f9b0:	2302      	movs	r3, #2
 800f9b2:	e1c2      	b.n	800fd3a <I2C_Slave_ISR_DMA+0x3aa>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	f003 0320 	and.w	r3, r3, #32
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d004      	beq.n	800f9da <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f9d0:	68b9      	ldr	r1, [r7, #8]
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f000 fc44 	bl	8010260 <I2C_ITSlaveCplt>
 800f9d8:	e1aa      	b.n	800fd30 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	f003 0310 	and.w	r3, r3, #16
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f000 8197 	beq.w	800fd14 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	f000 8191 	beq.w	800fd14 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d105      	bne.n	800fa08 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f000 817f 	beq.w	800fd06 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d07b      	beq.n	800fb08 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d076      	beq.n	800fb08 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a74      	ldr	r2, [pc, #464]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x264>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d059      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a72      	ldr	r2, [pc, #456]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x268>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d053      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a70      	ldr	r2, [pc, #448]	@ (800fbfc <I2C_Slave_ISR_DMA+0x26c>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d04d      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a6e      	ldr	r2, [pc, #440]	@ (800fc00 <I2C_Slave_ISR_DMA+0x270>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d047      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a6c      	ldr	r2, [pc, #432]	@ (800fc04 <I2C_Slave_ISR_DMA+0x274>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d041      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a6a      	ldr	r2, [pc, #424]	@ (800fc08 <I2C_Slave_ISR_DMA+0x278>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d03b      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a68      	ldr	r2, [pc, #416]	@ (800fc0c <I2C_Slave_ISR_DMA+0x27c>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d035      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a66      	ldr	r2, [pc, #408]	@ (800fc10 <I2C_Slave_ISR_DMA+0x280>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d02f      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a64      	ldr	r2, [pc, #400]	@ (800fc14 <I2C_Slave_ISR_DMA+0x284>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d029      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a62      	ldr	r2, [pc, #392]	@ (800fc18 <I2C_Slave_ISR_DMA+0x288>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d023      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a60      	ldr	r2, [pc, #384]	@ (800fc1c <I2C_Slave_ISR_DMA+0x28c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d01d      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a5e      	ldr	r2, [pc, #376]	@ (800fc20 <I2C_Slave_ISR_DMA+0x290>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d017      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a5c      	ldr	r2, [pc, #368]	@ (800fc24 <I2C_Slave_ISR_DMA+0x294>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d011      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a5a      	ldr	r2, [pc, #360]	@ (800fc28 <I2C_Slave_ISR_DMA+0x298>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d00b      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a58      	ldr	r2, [pc, #352]	@ (800fc2c <I2C_Slave_ISR_DMA+0x29c>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d005      	beq.n	800fada <I2C_Slave_ISR_DMA+0x14a>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a56      	ldr	r2, [pc, #344]	@ (800fc30 <I2C_Slave_ISR_DMA+0x2a0>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d109      	bne.n	800faee <I2C_Slave_ISR_DMA+0x15e>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	bf0c      	ite	eq
 800fae6:	2301      	moveq	r3, #1
 800fae8:	2300      	movne	r3, #0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	e008      	b.n	800fb00 <I2C_Slave_ISR_DMA+0x170>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	bf0c      	ite	eq
 800fafa:	2301      	moveq	r3, #1
 800fafc:	2300      	movne	r3, #0
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d001      	beq.n	800fb08 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fb04:	2301      	movs	r3, #1
 800fb06:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f000 809e 	beq.w	800fc4e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f000 8098 	beq.w	800fc4e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a33      	ldr	r2, [pc, #204]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x264>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d059      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a31      	ldr	r2, [pc, #196]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x268>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d053      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a2f      	ldr	r2, [pc, #188]	@ (800fbfc <I2C_Slave_ISR_DMA+0x26c>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d04d      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a2d      	ldr	r2, [pc, #180]	@ (800fc00 <I2C_Slave_ISR_DMA+0x270>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d047      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a2b      	ldr	r2, [pc, #172]	@ (800fc04 <I2C_Slave_ISR_DMA+0x274>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d041      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a29      	ldr	r2, [pc, #164]	@ (800fc08 <I2C_Slave_ISR_DMA+0x278>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d03b      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a27      	ldr	r2, [pc, #156]	@ (800fc0c <I2C_Slave_ISR_DMA+0x27c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d035      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a25      	ldr	r2, [pc, #148]	@ (800fc10 <I2C_Slave_ISR_DMA+0x280>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d02f      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a23      	ldr	r2, [pc, #140]	@ (800fc14 <I2C_Slave_ISR_DMA+0x284>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d029      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a21      	ldr	r2, [pc, #132]	@ (800fc18 <I2C_Slave_ISR_DMA+0x288>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d023      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a1f      	ldr	r2, [pc, #124]	@ (800fc1c <I2C_Slave_ISR_DMA+0x28c>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d01d      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc20 <I2C_Slave_ISR_DMA+0x290>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d017      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a1b      	ldr	r2, [pc, #108]	@ (800fc24 <I2C_Slave_ISR_DMA+0x294>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d011      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a19      	ldr	r2, [pc, #100]	@ (800fc28 <I2C_Slave_ISR_DMA+0x298>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d00b      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a17      	ldr	r2, [pc, #92]	@ (800fc2c <I2C_Slave_ISR_DMA+0x29c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d005      	beq.n	800fbde <I2C_Slave_ISR_DMA+0x24e>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a15      	ldr	r2, [pc, #84]	@ (800fc30 <I2C_Slave_ISR_DMA+0x2a0>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d12a      	bne.n	800fc34 <I2C_Slave_ISR_DMA+0x2a4>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	bf0c      	ite	eq
 800fbea:	2301      	moveq	r3, #1
 800fbec:	2300      	movne	r3, #0
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	e029      	b.n	800fc46 <I2C_Slave_ISR_DMA+0x2b6>
 800fbf2:	bf00      	nop
 800fbf4:	40020010 	.word	0x40020010
 800fbf8:	40020028 	.word	0x40020028
 800fbfc:	40020040 	.word	0x40020040
 800fc00:	40020058 	.word	0x40020058
 800fc04:	40020070 	.word	0x40020070
 800fc08:	40020088 	.word	0x40020088
 800fc0c:	400200a0 	.word	0x400200a0
 800fc10:	400200b8 	.word	0x400200b8
 800fc14:	40020410 	.word	0x40020410
 800fc18:	40020428 	.word	0x40020428
 800fc1c:	40020440 	.word	0x40020440
 800fc20:	40020458 	.word	0x40020458
 800fc24:	40020470 	.word	0x40020470
 800fc28:	40020488 	.word	0x40020488
 800fc2c:	400204a0 	.word	0x400204a0
 800fc30:	400204b8 	.word	0x400204b8
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	bf0c      	ite	eq
 800fc40:	2301      	moveq	r3, #1
 800fc42:	2300      	movne	r3, #0
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d001      	beq.n	800fc4e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d128      	bne.n	800fca6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	2b28      	cmp	r3, #40	@ 0x28
 800fc5e:	d108      	bne.n	800fc72 <I2C_Slave_ISR_DMA+0x2e2>
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc66:	d104      	bne.n	800fc72 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fc68:	68b9      	ldr	r1, [r7, #8]
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f000 fd4c 	bl	8010708 <I2C_ITListenCplt>
 800fc70:	e048      	b.n	800fd04 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b29      	cmp	r3, #41	@ 0x29
 800fc7c:	d10e      	bne.n	800fc9c <I2C_Slave_ISR_DMA+0x30c>
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fc84:	d00a      	beq.n	800fc9c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2210      	movs	r2, #16
 800fc8c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f000 fea5 	bl	80109de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f000 f9be 	bl	8010016 <I2C_ITSlaveSeqCplt>
 800fc9a:	e033      	b.n	800fd04 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2210      	movs	r2, #16
 800fca2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fca4:	e034      	b.n	800fd10 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2210      	movs	r2, #16
 800fcac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcb2:	f043 0204 	orr.w	r2, r3, #4
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcc0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d003      	beq.n	800fcd0 <I2C_Slave_ISR_DMA+0x340>
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcce:	d11f      	bne.n	800fd10 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fcd0:	7dfb      	ldrb	r3, [r7, #23]
 800fcd2:	2b21      	cmp	r3, #33	@ 0x21
 800fcd4:	d002      	beq.n	800fcdc <I2C_Slave_ISR_DMA+0x34c>
 800fcd6:	7dfb      	ldrb	r3, [r7, #23]
 800fcd8:	2b29      	cmp	r3, #41	@ 0x29
 800fcda:	d103      	bne.n	800fce4 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2221      	movs	r2, #33	@ 0x21
 800fce0:	631a      	str	r2, [r3, #48]	@ 0x30
 800fce2:	e008      	b.n	800fcf6 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fce4:	7dfb      	ldrb	r3, [r7, #23]
 800fce6:	2b22      	cmp	r3, #34	@ 0x22
 800fce8:	d002      	beq.n	800fcf0 <I2C_Slave_ISR_DMA+0x360>
 800fcea:	7dfb      	ldrb	r3, [r7, #23]
 800fcec:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcee:	d102      	bne.n	800fcf6 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2222      	movs	r2, #34	@ 0x22
 800fcf4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 fd57 	bl	80107b0 <I2C_ITError>
      if (treatdmanack == 1U)
 800fd02:	e005      	b.n	800fd10 <I2C_Slave_ISR_DMA+0x380>
 800fd04:	e004      	b.n	800fd10 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2210      	movs	r2, #16
 800fd0c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fd0e:	e00f      	b.n	800fd30 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fd10:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fd12:	e00d      	b.n	800fd30 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	f003 0308 	and.w	r3, r3, #8
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d008      	beq.n	800fd30 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d003      	beq.n	800fd30 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fd28:	68b9      	ldr	r1, [r7, #8]
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f000 f8b2 	bl	800fe94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fd38:	2300      	movs	r3, #0
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3720      	adds	r7, #32
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop

0800fd44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af02      	add	r7, sp, #8
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	4608      	mov	r0, r1
 800fd4e:	4611      	mov	r1, r2
 800fd50:	461a      	mov	r2, r3
 800fd52:	4603      	mov	r3, r0
 800fd54:	817b      	strh	r3, [r7, #10]
 800fd56:	460b      	mov	r3, r1
 800fd58:	813b      	strh	r3, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fd5e:	88fb      	ldrh	r3, [r7, #6]
 800fd60:	b2da      	uxtb	r2, r3
 800fd62:	8979      	ldrh	r1, [r7, #10]
 800fd64:	4b20      	ldr	r3, [pc, #128]	@ (800fde8 <I2C_RequestMemoryWrite+0xa4>)
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f001 f83b 	bl	8010de8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd72:	69fa      	ldr	r2, [r7, #28]
 800fd74:	69b9      	ldr	r1, [r7, #24]
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f000 fecc 	bl	8010b14 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fd82:	2301      	movs	r3, #1
 800fd84:	e02c      	b.n	800fde0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd86:	88fb      	ldrh	r3, [r7, #6]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d105      	bne.n	800fd98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd8c:	893b      	ldrh	r3, [r7, #8]
 800fd8e:	b2da      	uxtb	r2, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd96:	e015      	b.n	800fdc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd98:	893b      	ldrh	r3, [r7, #8]
 800fd9a:	0a1b      	lsrs	r3, r3, #8
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fda6:	69fa      	ldr	r2, [r7, #28]
 800fda8:	69b9      	ldr	r1, [r7, #24]
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	f000 feb2 	bl	8010b14 <I2C_WaitOnTXISFlagUntilTimeout>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d001      	beq.n	800fdba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e012      	b.n	800fde0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fdba:	893b      	ldrh	r3, [r7, #8]
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	69bb      	ldr	r3, [r7, #24]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	2180      	movs	r1, #128	@ 0x80
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f000 fe47 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d001      	beq.n	800fdde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fdda:	2301      	movs	r3, #1
 800fddc:	e000      	b.n	800fde0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	80002000 	.word	0x80002000

0800fdec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b086      	sub	sp, #24
 800fdf0:	af02      	add	r7, sp, #8
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	817b      	strh	r3, [r7, #10]
 800fdfe:	460b      	mov	r3, r1
 800fe00:	813b      	strh	r3, [r7, #8]
 800fe02:	4613      	mov	r3, r2
 800fe04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fe06:	88fb      	ldrh	r3, [r7, #6]
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	8979      	ldrh	r1, [r7, #10]
 800fe0c:	4b20      	ldr	r3, [pc, #128]	@ (800fe90 <I2C_RequestMemoryRead+0xa4>)
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	2300      	movs	r3, #0
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f000 ffe8 	bl	8010de8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe18:	69fa      	ldr	r2, [r7, #28]
 800fe1a:	69b9      	ldr	r1, [r7, #24]
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f000 fe79 	bl	8010b14 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	e02c      	b.n	800fe86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fe2c:	88fb      	ldrh	r3, [r7, #6]
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d105      	bne.n	800fe3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe32:	893b      	ldrh	r3, [r7, #8]
 800fe34:	b2da      	uxtb	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe3c:	e015      	b.n	800fe6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fe3e:	893b      	ldrh	r3, [r7, #8]
 800fe40:	0a1b      	lsrs	r3, r3, #8
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	b2da      	uxtb	r2, r3
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe4c:	69fa      	ldr	r2, [r7, #28]
 800fe4e:	69b9      	ldr	r1, [r7, #24]
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 fe5f 	bl	8010b14 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	e012      	b.n	800fe86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe60:	893b      	ldrh	r3, [r7, #8]
 800fe62:	b2da      	uxtb	r2, r3
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	2200      	movs	r2, #0
 800fe72:	2140      	movs	r1, #64	@ 0x40
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 fdf4 	bl	8010a62 <I2C_WaitOnFlagUntilTimeout>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fe80:	2301      	movs	r3, #1
 800fe82:	e000      	b.n	800fe86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	80002000 	.word	0x80002000

0800fe94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800feaa:	2b28      	cmp	r3, #40	@ 0x28
 800feac:	d16a      	bne.n	800ff84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	699b      	ldr	r3, [r3, #24]
 800feb4:	0c1b      	lsrs	r3, r3, #16
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	0c1b      	lsrs	r3, r3, #16
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fecc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800feda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fee8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d138      	bne.n	800ff64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fef2:	897b      	ldrh	r3, [r7, #10]
 800fef4:	09db      	lsrs	r3, r3, #7
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	89bb      	ldrh	r3, [r7, #12]
 800fefa:	4053      	eors	r3, r2
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	f003 0306 	and.w	r3, r3, #6
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d11c      	bne.n	800ff40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800ff06:	897b      	ldrh	r3, [r7, #10]
 800ff08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff18:	2b02      	cmp	r3, #2
 800ff1a:	d13b      	bne.n	800ff94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2208      	movs	r2, #8
 800ff28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff32:	89ba      	ldrh	r2, [r7, #12]
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	4619      	mov	r1, r3
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff f8c3 	bl	800f0c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ff3e:	e029      	b.n	800ff94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ff40:	893b      	ldrh	r3, [r7, #8]
 800ff42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f001 f803 	bl	8010f54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff56:	89ba      	ldrh	r2, [r7, #12]
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7ff f8b1 	bl	800f0c4 <HAL_I2C_AddrCallback>
}
 800ff62:	e017      	b.n	800ff94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 fff3 	bl	8010f54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff76:	89ba      	ldrh	r2, [r7, #12]
 800ff78:	7bfb      	ldrb	r3, [r7, #15]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff f8a1 	bl	800f0c4 <HAL_I2C_AddrCallback>
}
 800ff82:	e007      	b.n	800ff94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2208      	movs	r2, #8
 800ff8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800ff94:	bf00      	nop
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	2b21      	cmp	r3, #33	@ 0x21
 800ffb6:	d115      	bne.n	800ffe4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2220      	movs	r2, #32
 800ffbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2211      	movs	r2, #17
 800ffc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffcc:	2101      	movs	r1, #1
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 ffc0 	bl	8010f54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7ff f849 	bl	800f074 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ffe2:	e014      	b.n	801000e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2220      	movs	r2, #32
 800ffe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2212      	movs	r2, #18
 800fff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fff8:	2102      	movs	r1, #2
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 ffaa 	bl	8010f54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff f83d 	bl	800f088 <HAL_I2C_MasterRxCpltCallback>
}
 801000e:	bf00      	nop
 8010010:	3708      	adds	r7, #8
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010016:	b580      	push	{r7, lr}
 8010018:	b084      	sub	sp, #16
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010034:	2b00      	cmp	r3, #0
 8010036:	d008      	beq.n	801004a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010046:	601a      	str	r2, [r3, #0]
 8010048:	e00c      	b.n	8010064 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010050:	2b00      	cmp	r3, #0
 8010052:	d007      	beq.n	8010064 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010062:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801006a:	b2db      	uxtb	r3, r3
 801006c:	2b29      	cmp	r3, #41	@ 0x29
 801006e:	d112      	bne.n	8010096 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2228      	movs	r2, #40	@ 0x28
 8010074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2221      	movs	r2, #33	@ 0x21
 801007c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801007e:	2101      	movs	r1, #1
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 ff67 	bl	8010f54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff f804 	bl	800f09c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010094:	e017      	b.n	80100c6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801009c:	b2db      	uxtb	r3, r3
 801009e:	2b2a      	cmp	r3, #42	@ 0x2a
 80100a0:	d111      	bne.n	80100c6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2228      	movs	r2, #40	@ 0x28
 80100a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2222      	movs	r2, #34	@ 0x22
 80100ae:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80100b0:	2102      	movs	r1, #2
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 ff4e 	bl	8010f54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7fe fff5 	bl	800f0b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
	...

080100d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2220      	movs	r2, #32
 80100e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	2b21      	cmp	r3, #33	@ 0x21
 80100f0:	d107      	bne.n	8010102 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80100f2:	2101      	movs	r1, #1
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 ff2d 	bl	8010f54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2211      	movs	r2, #17
 80100fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8010100:	e00c      	b.n	801011c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b22      	cmp	r3, #34	@ 0x22
 801010c:	d106      	bne.n	801011c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801010e:	2102      	movs	r1, #2
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 ff1f 	bl	8010f54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2212      	movs	r2, #18
 801011a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	6859      	ldr	r1, [r3, #4]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	4b4c      	ldr	r3, [pc, #304]	@ (8010258 <I2C_ITMasterCplt+0x188>)
 8010128:	400b      	ands	r3, r1
 801012a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4a49      	ldr	r2, [pc, #292]	@ (801025c <I2C_ITMasterCplt+0x18c>)
 8010136:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	f003 0310 	and.w	r3, r3, #16
 801013e:	2b00      	cmp	r3, #0
 8010140:	d009      	beq.n	8010156 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2210      	movs	r2, #16
 8010148:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801014e:	f043 0204 	orr.w	r2, r3, #4
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b60      	cmp	r3, #96	@ 0x60
 8010160:	d10a      	bne.n	8010178 <I2C_ITMasterCplt+0xa8>
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	d005      	beq.n	8010178 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010172:	b2db      	uxtb	r3, r3
 8010174:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010176:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fc30 	bl	80109de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010182:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801018a:	b2db      	uxtb	r3, r3
 801018c:	2b60      	cmp	r3, #96	@ 0x60
 801018e:	d002      	beq.n	8010196 <I2C_ITMasterCplt+0xc6>
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d006      	beq.n	80101a4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fb07 	bl	80107b0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80101a2:	e054      	b.n	801024e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	2b21      	cmp	r3, #33	@ 0x21
 80101ae:	d124      	bne.n	80101fa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2220      	movs	r2, #32
 80101b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	2b40      	cmp	r3, #64	@ 0x40
 80101c8:	d10b      	bne.n	80101e2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7fe ff8a 	bl	800f0f4 <HAL_I2C_MemTxCpltCallback>
}
 80101e0:	e035      	b.n	801024e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2200      	movs	r2, #0
 80101e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7fe ff3e 	bl	800f074 <HAL_I2C_MasterTxCpltCallback>
}
 80101f8:	e029      	b.n	801024e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b22      	cmp	r3, #34	@ 0x22
 8010204:	d123      	bne.n	801024e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2220      	movs	r2, #32
 801020a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801021a:	b2db      	uxtb	r3, r3
 801021c:	2b40      	cmp	r3, #64	@ 0x40
 801021e:	d10b      	bne.n	8010238 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f7f6 fa4d 	bl	80066d0 <HAL_I2C_MemRxCpltCallback>
}
 8010236:	e00a      	b.n	801024e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7fe ff1d 	bl	800f088 <HAL_I2C_MasterRxCpltCallback>
}
 801024e:	bf00      	nop
 8010250:	3718      	adds	r7, #24
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	fe00e800 	.word	0xfe00e800
 801025c:	ffff0000 	.word	0xffff0000

08010260 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801027a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010282:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2220      	movs	r2, #32
 801028a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801028c:	7afb      	ldrb	r3, [r7, #11]
 801028e:	2b21      	cmp	r3, #33	@ 0x21
 8010290:	d002      	beq.n	8010298 <I2C_ITSlaveCplt+0x38>
 8010292:	7afb      	ldrb	r3, [r7, #11]
 8010294:	2b29      	cmp	r3, #41	@ 0x29
 8010296:	d108      	bne.n	80102aa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010298:	f248 0101 	movw	r1, #32769	@ 0x8001
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 fe59 	bl	8010f54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2221      	movs	r2, #33	@ 0x21
 80102a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80102a8:	e019      	b.n	80102de <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80102aa:	7afb      	ldrb	r3, [r7, #11]
 80102ac:	2b22      	cmp	r3, #34	@ 0x22
 80102ae:	d002      	beq.n	80102b6 <I2C_ITSlaveCplt+0x56>
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80102b4:	d108      	bne.n	80102c8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80102b6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 fe4a 	bl	8010f54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2222      	movs	r2, #34	@ 0x22
 80102c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80102c6:	e00a      	b.n	80102de <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80102c8:	7afb      	ldrb	r3, [r7, #11]
 80102ca:	2b28      	cmp	r3, #40	@ 0x28
 80102cc:	d107      	bne.n	80102de <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80102ce:	f248 0103 	movw	r1, #32771	@ 0x8003
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 fe3e 	bl	8010f54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80102ec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	6859      	ldr	r1, [r3, #4]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b7f      	ldr	r3, [pc, #508]	@ (80104f8 <I2C_ITSlaveCplt+0x298>)
 80102fa:	400b      	ands	r3, r1
 80102fc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fb6d 	bl	80109de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801030a:	2b00      	cmp	r3, #0
 801030c:	d07a      	beq.n	8010404 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801031c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010322:	2b00      	cmp	r3, #0
 8010324:	f000 8111 	beq.w	801054a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4a73      	ldr	r2, [pc, #460]	@ (80104fc <I2C_ITSlaveCplt+0x29c>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d059      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a71      	ldr	r2, [pc, #452]	@ (8010500 <I2C_ITSlaveCplt+0x2a0>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d053      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a6f      	ldr	r2, [pc, #444]	@ (8010504 <I2C_ITSlaveCplt+0x2a4>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d04d      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a6d      	ldr	r2, [pc, #436]	@ (8010508 <I2C_ITSlaveCplt+0x2a8>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d047      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a6b      	ldr	r2, [pc, #428]	@ (801050c <I2C_ITSlaveCplt+0x2ac>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d041      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a69      	ldr	r2, [pc, #420]	@ (8010510 <I2C_ITSlaveCplt+0x2b0>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d03b      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a67      	ldr	r2, [pc, #412]	@ (8010514 <I2C_ITSlaveCplt+0x2b4>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d035      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a65      	ldr	r2, [pc, #404]	@ (8010518 <I2C_ITSlaveCplt+0x2b8>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d02f      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a63      	ldr	r2, [pc, #396]	@ (801051c <I2C_ITSlaveCplt+0x2bc>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d029      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a61      	ldr	r2, [pc, #388]	@ (8010520 <I2C_ITSlaveCplt+0x2c0>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d023      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a5f      	ldr	r2, [pc, #380]	@ (8010524 <I2C_ITSlaveCplt+0x2c4>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d01d      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a5d      	ldr	r2, [pc, #372]	@ (8010528 <I2C_ITSlaveCplt+0x2c8>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d017      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a5b      	ldr	r2, [pc, #364]	@ (801052c <I2C_ITSlaveCplt+0x2cc>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d011      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a59      	ldr	r2, [pc, #356]	@ (8010530 <I2C_ITSlaveCplt+0x2d0>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d00b      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4a57      	ldr	r2, [pc, #348]	@ (8010534 <I2C_ITSlaveCplt+0x2d4>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d005      	beq.n	80103e8 <I2C_ITSlaveCplt+0x188>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4a55      	ldr	r2, [pc, #340]	@ (8010538 <I2C_ITSlaveCplt+0x2d8>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d105      	bne.n	80103f4 <I2C_ITSlaveCplt+0x194>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	e004      	b.n	80103fe <I2C_ITSlaveCplt+0x19e>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8010402:	e0a2      	b.n	801054a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 809d 	beq.w	801054a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801041e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 8090 	beq.w	801054a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a32      	ldr	r2, [pc, #200]	@ (80104fc <I2C_ITSlaveCplt+0x29c>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d059      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a30      	ldr	r2, [pc, #192]	@ (8010500 <I2C_ITSlaveCplt+0x2a0>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d053      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a2e      	ldr	r2, [pc, #184]	@ (8010504 <I2C_ITSlaveCplt+0x2a4>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d04d      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a2c      	ldr	r2, [pc, #176]	@ (8010508 <I2C_ITSlaveCplt+0x2a8>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d047      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a2a      	ldr	r2, [pc, #168]	@ (801050c <I2C_ITSlaveCplt+0x2ac>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d041      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a28      	ldr	r2, [pc, #160]	@ (8010510 <I2C_ITSlaveCplt+0x2b0>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d03b      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a26      	ldr	r2, [pc, #152]	@ (8010514 <I2C_ITSlaveCplt+0x2b4>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d035      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a24      	ldr	r2, [pc, #144]	@ (8010518 <I2C_ITSlaveCplt+0x2b8>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d02f      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a22      	ldr	r2, [pc, #136]	@ (801051c <I2C_ITSlaveCplt+0x2bc>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d029      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a20      	ldr	r2, [pc, #128]	@ (8010520 <I2C_ITSlaveCplt+0x2c0>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d023      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a1e      	ldr	r2, [pc, #120]	@ (8010524 <I2C_ITSlaveCplt+0x2c4>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d01d      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a1c      	ldr	r2, [pc, #112]	@ (8010528 <I2C_ITSlaveCplt+0x2c8>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d017      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a1a      	ldr	r2, [pc, #104]	@ (801052c <I2C_ITSlaveCplt+0x2cc>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d011      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a18      	ldr	r2, [pc, #96]	@ (8010530 <I2C_ITSlaveCplt+0x2d0>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d00b      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a16      	ldr	r2, [pc, #88]	@ (8010534 <I2C_ITSlaveCplt+0x2d4>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d005      	beq.n	80104ea <I2C_ITSlaveCplt+0x28a>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a14      	ldr	r2, [pc, #80]	@ (8010538 <I2C_ITSlaveCplt+0x2d8>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d128      	bne.n	801053c <I2C_ITSlaveCplt+0x2dc>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	e027      	b.n	8010546 <I2C_ITSlaveCplt+0x2e6>
 80104f6:	bf00      	nop
 80104f8:	fe00e800 	.word	0xfe00e800
 80104fc:	40020010 	.word	0x40020010
 8010500:	40020028 	.word	0x40020028
 8010504:	40020040 	.word	0x40020040
 8010508:	40020058 	.word	0x40020058
 801050c:	40020070 	.word	0x40020070
 8010510:	40020088 	.word	0x40020088
 8010514:	400200a0 	.word	0x400200a0
 8010518:	400200b8 	.word	0x400200b8
 801051c:	40020410 	.word	0x40020410
 8010520:	40020428 	.word	0x40020428
 8010524:	40020440 	.word	0x40020440
 8010528:	40020458 	.word	0x40020458
 801052c:	40020470 	.word	0x40020470
 8010530:	40020488 	.word	0x40020488
 8010534:	400204a0 	.word	0x400204a0
 8010538:	400204b8 	.word	0x400204b8
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	b29b      	uxth	r3, r3
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f003 0304 	and.w	r3, r3, #4
 8010550:	2b00      	cmp	r3, #0
 8010552:	d020      	beq.n	8010596 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f023 0304 	bic.w	r3, r3, #4
 801055a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010566:	b2d2      	uxtb	r2, r2
 8010568:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00c      	beq.n	8010596 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010580:	3b01      	subs	r3, #1
 8010582:	b29a      	uxth	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801058c:	b29b      	uxth	r3, r3
 801058e:	3b01      	subs	r3, #1
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801059a:	b29b      	uxth	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d005      	beq.n	80105ac <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105a4:	f043 0204 	orr.w	r2, r3, #4
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	f003 0310 	and.w	r3, r3, #16
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d049      	beq.n	801064a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d044      	beq.n	801064a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d128      	bne.n	801061c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	2b28      	cmp	r3, #40	@ 0x28
 80105d4:	d108      	bne.n	80105e8 <I2C_ITSlaveCplt+0x388>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80105dc:	d104      	bne.n	80105e8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80105de:	6979      	ldr	r1, [r7, #20]
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f000 f891 	bl	8010708 <I2C_ITListenCplt>
 80105e6:	e030      	b.n	801064a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	2b29      	cmp	r3, #41	@ 0x29
 80105f2:	d10e      	bne.n	8010612 <I2C_ITSlaveCplt+0x3b2>
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105fa:	d00a      	beq.n	8010612 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2210      	movs	r2, #16
 8010602:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 f9ea 	bl	80109de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff fd03 	bl	8010016 <I2C_ITSlaveSeqCplt>
 8010610:	e01b      	b.n	801064a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	2210      	movs	r2, #16
 8010618:	61da      	str	r2, [r3, #28]
 801061a:	e016      	b.n	801064a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2210      	movs	r2, #16
 8010622:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010628:	f043 0204 	orr.w	r2, r3, #4
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d003      	beq.n	801063e <I2C_ITSlaveCplt+0x3de>
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801063c:	d105      	bne.n	801064a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010642:	4619      	mov	r1, r3
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f8b3 	bl	80107b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2200      	movs	r2, #0
 8010656:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801065c:	2b00      	cmp	r3, #0
 801065e:	d010      	beq.n	8010682 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 f8a2 	bl	80107b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b28      	cmp	r3, #40	@ 0x28
 8010676:	d141      	bne.n	80106fc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010678:	6979      	ldr	r1, [r7, #20]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 f844 	bl	8010708 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010680:	e03c      	b.n	80106fc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010686:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801068a:	d014      	beq.n	80106b6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff fcc2 	bl	8010016 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a1b      	ldr	r2, [pc, #108]	@ (8010704 <I2C_ITSlaveCplt+0x4a4>)
 8010696:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2220      	movs	r2, #32
 801069c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7fe fd16 	bl	800f0e0 <HAL_I2C_ListenCpltCallback>
}
 80106b4:	e022      	b.n	80106fc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	2b22      	cmp	r3, #34	@ 0x22
 80106c0:	d10e      	bne.n	80106e0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2220      	movs	r2, #32
 80106c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2200      	movs	r2, #0
 80106ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7fe fce9 	bl	800f0b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80106de:	e00d      	b.n	80106fc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2220      	movs	r2, #32
 80106e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7fe fcd0 	bl	800f09c <HAL_I2C_SlaveTxCpltCallback>
}
 80106fc:	bf00      	nop
 80106fe:	3718      	adds	r7, #24
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	ffff0000 	.word	0xffff0000

08010708 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4a25      	ldr	r2, [pc, #148]	@ (80107ac <I2C_ITListenCplt+0xa4>)
 8010716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2220      	movs	r2, #32
 8010722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	f003 0304 	and.w	r3, r3, #4
 801073a:	2b00      	cmp	r3, #0
 801073c:	d022      	beq.n	8010784 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010748:	b2d2      	uxtb	r2, r2
 801074a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010750:	1c5a      	adds	r2, r3, #1
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801075a:	2b00      	cmp	r3, #0
 801075c:	d012      	beq.n	8010784 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010762:	3b01      	subs	r3, #1
 8010764:	b29a      	uxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801076e:	b29b      	uxth	r3, r3
 8010770:	3b01      	subs	r3, #1
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801077c:	f043 0204 	orr.w	r2, r3, #4
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010784:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fbe3 	bl	8010f54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2210      	movs	r2, #16
 8010794:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2200      	movs	r2, #0
 801079a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7fe fc9e 	bl	800f0e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	ffff0000 	.word	0xffff0000

080107b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107c0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4a6d      	ldr	r2, [pc, #436]	@ (8010984 <I2C_ITError+0x1d4>)
 80107ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	431a      	orrs	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	2b28      	cmp	r3, #40	@ 0x28
 80107e6:	d005      	beq.n	80107f4 <I2C_ITError+0x44>
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	2b29      	cmp	r3, #41	@ 0x29
 80107ec:	d002      	beq.n	80107f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
 80107f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80107f2:	d10b      	bne.n	801080c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107f4:	2103      	movs	r1, #3
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 fbac 	bl	8010f54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2228      	movs	r2, #40	@ 0x28
 8010800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4a60      	ldr	r2, [pc, #384]	@ (8010988 <I2C_ITError+0x1d8>)
 8010808:	635a      	str	r2, [r3, #52]	@ 0x34
 801080a:	e030      	b.n	801086e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801080c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fb9f 	bl	8010f54 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 f8e1 	bl	80109de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b60      	cmp	r3, #96	@ 0x60
 8010826:	d01f      	beq.n	8010868 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2220      	movs	r2, #32
 801082c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	699b      	ldr	r3, [r3, #24]
 8010836:	f003 0320 	and.w	r3, r3, #32
 801083a:	2b20      	cmp	r3, #32
 801083c:	d114      	bne.n	8010868 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	699b      	ldr	r3, [r3, #24]
 8010844:	f003 0310 	and.w	r3, r3, #16
 8010848:	2b10      	cmp	r3, #16
 801084a:	d109      	bne.n	8010860 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2210      	movs	r2, #16
 8010852:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010858:	f043 0204 	orr.w	r2, r3, #4
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2220      	movs	r2, #32
 8010866:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010872:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010878:	2b00      	cmp	r3, #0
 801087a:	d039      	beq.n	80108f0 <I2C_ITError+0x140>
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	2b11      	cmp	r3, #17
 8010880:	d002      	beq.n	8010888 <I2C_ITError+0xd8>
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b21      	cmp	r3, #33	@ 0x21
 8010886:	d133      	bne.n	80108f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010896:	d107      	bne.n	80108a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80108a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fd f9f7 	bl	800dca0 <HAL_DMA_GetState>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	d017      	beq.n	80108e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108bc:	4a33      	ldr	r2, [pc, #204]	@ (801098c <I2C_ITError+0x1dc>)
 80108be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fc f877 	bl	800c9c0 <HAL_DMA_Abort_IT>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d04d      	beq.n	8010974 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80108e2:	4610      	mov	r0, r2
 80108e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108e6:	e045      	b.n	8010974 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 f851 	bl	8010990 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108ee:	e041      	b.n	8010974 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d039      	beq.n	801096c <I2C_ITError+0x1bc>
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	2b12      	cmp	r3, #18
 80108fc:	d002      	beq.n	8010904 <I2C_ITError+0x154>
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2b22      	cmp	r3, #34	@ 0x22
 8010902:	d133      	bne.n	801096c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801090e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010912:	d107      	bne.n	8010924 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010922:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010928:	4618      	mov	r0, r3
 801092a:	f7fd f9b9 	bl	800dca0 <HAL_DMA_GetState>
 801092e:	4603      	mov	r3, r0
 8010930:	2b01      	cmp	r3, #1
 8010932:	d017      	beq.n	8010964 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010938:	4a14      	ldr	r2, [pc, #80]	@ (801098c <I2C_ITError+0x1dc>)
 801093a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010948:	4618      	mov	r0, r3
 801094a:	f7fc f839 	bl	800c9c0 <HAL_DMA_Abort_IT>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d011      	beq.n	8010978 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801095e:	4610      	mov	r0, r2
 8010960:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010962:	e009      	b.n	8010978 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 f813 	bl	8010990 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801096a:	e005      	b.n	8010978 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 f80f 	bl	8010990 <I2C_TreatErrorCallback>
  }
}
 8010972:	e002      	b.n	801097a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010974:	bf00      	nop
 8010976:	e000      	b.n	801097a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010978:	bf00      	nop
}
 801097a:	bf00      	nop
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	ffff0000 	.word	0xffff0000
 8010988:	0800f37d 	.word	0x0800f37d
 801098c:	08010a27 	.word	0x08010a27

08010990 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	2b60      	cmp	r3, #96	@ 0x60
 80109a2:	d10e      	bne.n	80109c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2220      	movs	r2, #32
 80109a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7fe fbae 	bl	800f11c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80109c0:	e009      	b.n	80109d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7fe fb99 	bl	800f108 <HAL_I2C_ErrorCallback>
}
 80109d6:	bf00      	nop
 80109d8:	3708      	adds	r7, #8
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80109de:	b480      	push	{r7}
 80109e0:	b083      	sub	sp, #12
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	699b      	ldr	r3, [r3, #24]
 80109ec:	f003 0302 	and.w	r3, r3, #2
 80109f0:	2b02      	cmp	r3, #2
 80109f2:	d103      	bne.n	80109fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2200      	movs	r2, #0
 80109fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	699b      	ldr	r3, [r3, #24]
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d007      	beq.n	8010a1a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	699a      	ldr	r2, [r3, #24]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f042 0201 	orr.w	r2, r2, #1
 8010a18:	619a      	str	r2, [r3, #24]
  }
}
 8010a1a:	bf00      	nop
 8010a1c:	370c      	adds	r7, #12
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr

08010a26 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b084      	sub	sp, #16
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a32:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d003      	beq.n	8010a44 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a40:	2200      	movs	r2, #0
 8010a42:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a50:	2200      	movs	r2, #0
 8010a52:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f7ff ff9b 	bl	8010990 <I2C_TreatErrorCallback>
}
 8010a5a:	bf00      	nop
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b084      	sub	sp, #16
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	60f8      	str	r0, [r7, #12]
 8010a6a:	60b9      	str	r1, [r7, #8]
 8010a6c:	603b      	str	r3, [r7, #0]
 8010a6e:	4613      	mov	r3, r2
 8010a70:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a72:	e03b      	b.n	8010aec <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a74:	69ba      	ldr	r2, [r7, #24]
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f000 f8d5 	bl	8010c28 <I2C_IsErrorOccurred>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d001      	beq.n	8010a88 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010a84:	2301      	movs	r3, #1
 8010a86:	e041      	b.n	8010b0c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a8e:	d02d      	beq.n	8010aec <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a90:	f7f8 fd80 	bl	8009594 <HAL_GetTick>
 8010a94:	4602      	mov	r2, r0
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d302      	bcc.n	8010aa6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d122      	bne.n	8010aec <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	699a      	ldr	r2, [r3, #24]
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	4013      	ands	r3, r2
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	bf0c      	ite	eq
 8010ab6:	2301      	moveq	r3, #1
 8010ab8:	2300      	movne	r3, #0
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	461a      	mov	r2, r3
 8010abe:	79fb      	ldrb	r3, [r7, #7]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d113      	bne.n	8010aec <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ac8:	f043 0220 	orr.w	r2, r3, #32
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	e00f      	b.n	8010b0c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	699a      	ldr	r2, [r3, #24]
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	4013      	ands	r3, r2
 8010af6:	68ba      	ldr	r2, [r7, #8]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	bf0c      	ite	eq
 8010afc:	2301      	moveq	r3, #1
 8010afe:	2300      	movne	r3, #0
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	461a      	mov	r2, r3
 8010b04:	79fb      	ldrb	r3, [r7, #7]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d0b4      	beq.n	8010a74 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b20:	e033      	b.n	8010b8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	68b9      	ldr	r1, [r7, #8]
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f000 f87e 	bl	8010c28 <I2C_IsErrorOccurred>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d001      	beq.n	8010b36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	e031      	b.n	8010b9a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b3c:	d025      	beq.n	8010b8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b3e:	f7f8 fd29 	bl	8009594 <HAL_GetTick>
 8010b42:	4602      	mov	r2, r0
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	1ad3      	subs	r3, r2, r3
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d302      	bcc.n	8010b54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d11a      	bne.n	8010b8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	699b      	ldr	r3, [r3, #24]
 8010b5a:	f003 0302 	and.w	r3, r3, #2
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d013      	beq.n	8010b8a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b66:	f043 0220 	orr.w	r2, r3, #32
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2220      	movs	r2, #32
 8010b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010b86:	2301      	movs	r3, #1
 8010b88:	e007      	b.n	8010b9a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	699b      	ldr	r3, [r3, #24]
 8010b90:	f003 0302 	and.w	r3, r3, #2
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d1c4      	bne.n	8010b22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	60f8      	str	r0, [r7, #12]
 8010baa:	60b9      	str	r1, [r7, #8]
 8010bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010bae:	e02f      	b.n	8010c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	68b9      	ldr	r1, [r7, #8]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f000 f837 	bl	8010c28 <I2C_IsErrorOccurred>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d001      	beq.n	8010bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e02d      	b.n	8010c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bc4:	f7f8 fce6 	bl	8009594 <HAL_GetTick>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	68ba      	ldr	r2, [r7, #8]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d302      	bcc.n	8010bda <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d11a      	bne.n	8010c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	699b      	ldr	r3, [r3, #24]
 8010be0:	f003 0320 	and.w	r3, r3, #32
 8010be4:	2b20      	cmp	r3, #32
 8010be6:	d013      	beq.n	8010c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bec:	f043 0220 	orr.w	r2, r3, #32
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2220      	movs	r2, #32
 8010bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2200      	movs	r2, #0
 8010c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e007      	b.n	8010c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	699b      	ldr	r3, [r3, #24]
 8010c16:	f003 0320 	and.w	r3, r3, #32
 8010c1a:	2b20      	cmp	r3, #32
 8010c1c:	d1c8      	bne.n	8010bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010c1e:	2300      	movs	r3, #0
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3710      	adds	r7, #16
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b08a      	sub	sp, #40	@ 0x28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c34:	2300      	movs	r3, #0
 8010c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	699b      	ldr	r3, [r3, #24]
 8010c40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	f003 0310 	and.w	r3, r3, #16
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d068      	beq.n	8010d26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2210      	movs	r2, #16
 8010c5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c5c:	e049      	b.n	8010cf2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c64:	d045      	beq.n	8010cf2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010c66:	f7f8 fc95 	bl	8009594 <HAL_GetTick>
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d302      	bcc.n	8010c7c <I2C_IsErrorOccurred+0x54>
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d13a      	bne.n	8010cf2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010c86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c9e:	d121      	bne.n	8010ce4 <I2C_IsErrorOccurred+0xbc>
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010ca6:	d01d      	beq.n	8010ce4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010ca8:	7cfb      	ldrb	r3, [r7, #19]
 8010caa:	2b20      	cmp	r3, #32
 8010cac:	d01a      	beq.n	8010ce4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010cbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010cbe:	f7f8 fc69 	bl	8009594 <HAL_GetTick>
 8010cc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cc4:	e00e      	b.n	8010ce4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010cc6:	f7f8 fc65 	bl	8009594 <HAL_GetTick>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	2b19      	cmp	r3, #25
 8010cd2:	d907      	bls.n	8010ce4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010cd4:	6a3b      	ldr	r3, [r7, #32]
 8010cd6:	f043 0320 	orr.w	r3, r3, #32
 8010cda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010ce2:	e006      	b.n	8010cf2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	699b      	ldr	r3, [r3, #24]
 8010cea:	f003 0320 	and.w	r3, r3, #32
 8010cee:	2b20      	cmp	r3, #32
 8010cf0:	d1e9      	bne.n	8010cc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	f003 0320 	and.w	r3, r3, #32
 8010cfc:	2b20      	cmp	r3, #32
 8010cfe:	d003      	beq.n	8010d08 <I2C_IsErrorOccurred+0xe0>
 8010d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d0aa      	beq.n	8010c5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d103      	bne.n	8010d18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2220      	movs	r2, #32
 8010d16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010d18:	6a3b      	ldr	r3, [r7, #32]
 8010d1a:	f043 0304 	orr.w	r3, r3, #4
 8010d1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010d20:	2301      	movs	r3, #1
 8010d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	699b      	ldr	r3, [r3, #24]
 8010d2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00b      	beq.n	8010d50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010d38:	6a3b      	ldr	r3, [r7, #32]
 8010d3a:	f043 0301 	orr.w	r3, r3, #1
 8010d3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00b      	beq.n	8010d72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010d5a:	6a3b      	ldr	r3, [r7, #32]
 8010d5c:	f043 0308 	orr.w	r3, r3, #8
 8010d60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010d6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00b      	beq.n	8010d94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010d7c:	6a3b      	ldr	r3, [r7, #32]
 8010d7e:	f043 0302 	orr.w	r3, r3, #2
 8010d82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d01c      	beq.n	8010dd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d9c:	68f8      	ldr	r0, [r7, #12]
 8010d9e:	f7ff fe1e 	bl	80109de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	6859      	ldr	r1, [r3, #4]
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	4b0d      	ldr	r3, [pc, #52]	@ (8010de4 <I2C_IsErrorOccurred+0x1bc>)
 8010dae:	400b      	ands	r3, r1
 8010db0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010db6:	6a3b      	ldr	r3, [r7, #32]
 8010db8:	431a      	orrs	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2220      	movs	r2, #32
 8010dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3728      	adds	r7, #40	@ 0x28
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	fe00e800 	.word	0xfe00e800

08010de8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b087      	sub	sp, #28
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	607b      	str	r3, [r7, #4]
 8010df2:	460b      	mov	r3, r1
 8010df4:	817b      	strh	r3, [r7, #10]
 8010df6:	4613      	mov	r3, r2
 8010df8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010dfa:	897b      	ldrh	r3, [r7, #10]
 8010dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010e00:	7a7b      	ldrb	r3, [r7, #9]
 8010e02:	041b      	lsls	r3, r3, #16
 8010e04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010e08:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010e0e:	6a3b      	ldr	r3, [r7, #32]
 8010e10:	4313      	orrs	r3, r2
 8010e12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e16:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	685a      	ldr	r2, [r3, #4]
 8010e1e:	6a3b      	ldr	r3, [r7, #32]
 8010e20:	0d5b      	lsrs	r3, r3, #21
 8010e22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010e26:	4b08      	ldr	r3, [pc, #32]	@ (8010e48 <I2C_TransferConfig+0x60>)
 8010e28:	430b      	orrs	r3, r1
 8010e2a:	43db      	mvns	r3, r3
 8010e2c:	ea02 0103 	and.w	r1, r2, r3
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	697a      	ldr	r2, [r7, #20]
 8010e36:	430a      	orrs	r2, r1
 8010e38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010e3a:	bf00      	nop
 8010e3c:	371c      	adds	r7, #28
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	03ff63ff 	.word	0x03ff63ff

08010e4c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	460b      	mov	r3, r1
 8010e56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e60:	4a39      	ldr	r2, [pc, #228]	@ (8010f48 <I2C_Enable_IRQ+0xfc>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d032      	beq.n	8010ecc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e6a:	4a38      	ldr	r2, [pc, #224]	@ (8010f4c <I2C_Enable_IRQ+0x100>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d02d      	beq.n	8010ecc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e74:	4a36      	ldr	r2, [pc, #216]	@ (8010f50 <I2C_Enable_IRQ+0x104>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d028      	beq.n	8010ecc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	da03      	bge.n	8010e8a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010e88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e8a:	887b      	ldrh	r3, [r7, #2]
 8010e8c:	f003 0301 	and.w	r3, r3, #1
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d003      	beq.n	8010e9c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e9c:	887b      	ldrh	r3, [r7, #2]
 8010e9e:	f003 0302 	and.w	r3, r3, #2
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d003      	beq.n	8010eae <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010eac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010eae:	887b      	ldrh	r3, [r7, #2]
 8010eb0:	2b10      	cmp	r3, #16
 8010eb2:	d103      	bne.n	8010ebc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010eba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ebc:	887b      	ldrh	r3, [r7, #2]
 8010ebe:	2b20      	cmp	r3, #32
 8010ec0:	d133      	bne.n	8010f2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f043 0320 	orr.w	r3, r3, #32
 8010ec8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010eca:	e02e      	b.n	8010f2a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010ecc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	da03      	bge.n	8010edc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010eda:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010edc:	887b      	ldrh	r3, [r7, #2]
 8010ede:	f003 0301 	and.w	r3, r3, #1
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d003      	beq.n	8010eee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010eec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010eee:	887b      	ldrh	r3, [r7, #2]
 8010ef0:	f003 0302 	and.w	r3, r3, #2
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d003      	beq.n	8010f00 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010efe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010f00:	887b      	ldrh	r3, [r7, #2]
 8010f02:	2b10      	cmp	r3, #16
 8010f04:	d103      	bne.n	8010f0e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010f0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010f0e:	887b      	ldrh	r3, [r7, #2]
 8010f10:	2b20      	cmp	r3, #32
 8010f12:	d103      	bne.n	8010f1c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010f1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010f1c:	887b      	ldrh	r3, [r7, #2]
 8010f1e:	2b40      	cmp	r3, #64	@ 0x40
 8010f20:	d103      	bne.n	8010f2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f28:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	6819      	ldr	r1, [r3, #0]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	430a      	orrs	r2, r1
 8010f38:	601a      	str	r2, [r3, #0]
}
 8010f3a:	bf00      	nop
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	0800f56f 	.word	0x0800f56f
 8010f4c:	0800f991 	.word	0x0800f991
 8010f50:	0800f745 	.word	0x0800f745

08010f54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010f60:	2300      	movs	r3, #0
 8010f62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010f64:	887b      	ldrh	r3, [r7, #2]
 8010f66:	f003 0301 	and.w	r3, r3, #1
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00f      	beq.n	8010f8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010f74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f82:	2b28      	cmp	r3, #40	@ 0x28
 8010f84:	d003      	beq.n	8010f8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010f8e:	887b      	ldrh	r3, [r7, #2]
 8010f90:	f003 0302 	and.w	r3, r3, #2
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00f      	beq.n	8010fb8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010f9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010fac:	2b28      	cmp	r3, #40	@ 0x28
 8010fae:	d003      	beq.n	8010fb8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010fb6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	da03      	bge.n	8010fc8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010fc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010fc8:	887b      	ldrh	r3, [r7, #2]
 8010fca:	2b10      	cmp	r3, #16
 8010fcc:	d103      	bne.n	8010fd6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010fd4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010fd6:	887b      	ldrh	r3, [r7, #2]
 8010fd8:	2b20      	cmp	r3, #32
 8010fda:	d103      	bne.n	8010fe4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f043 0320 	orr.w	r3, r3, #32
 8010fe2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010fe4:	887b      	ldrh	r3, [r7, #2]
 8010fe6:	2b40      	cmp	r3, #64	@ 0x40
 8010fe8:	d103      	bne.n	8010ff2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ff0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	6819      	ldr	r1, [r3, #0]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	43da      	mvns	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	400a      	ands	r2, r1
 8011002:	601a      	str	r2, [r3, #0]
}
 8011004:	bf00      	nop
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b20      	cmp	r3, #32
 8011024:	d138      	bne.n	8011098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801102c:	2b01      	cmp	r3, #1
 801102e:	d101      	bne.n	8011034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011030:	2302      	movs	r3, #2
 8011032:	e032      	b.n	801109a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2224      	movs	r2, #36	@ 0x24
 8011040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f022 0201 	bic.w	r2, r2, #1
 8011052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	6819      	ldr	r1, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	683a      	ldr	r2, [r7, #0]
 8011070:	430a      	orrs	r2, r1
 8011072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f042 0201 	orr.w	r2, r2, #1
 8011082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2220      	movs	r2, #32
 8011088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	e000      	b.n	801109a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011098:	2302      	movs	r3, #2
  }
}
 801109a:	4618      	mov	r0, r3
 801109c:	370c      	adds	r7, #12
 801109e:	46bd      	mov	sp, r7
 80110a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a4:	4770      	bx	lr

080110a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80110a6:	b480      	push	{r7}
 80110a8:	b085      	sub	sp, #20
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	2b20      	cmp	r3, #32
 80110ba:	d139      	bne.n	8011130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d101      	bne.n	80110ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80110c6:	2302      	movs	r3, #2
 80110c8:	e033      	b.n	8011132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2201      	movs	r2, #1
 80110ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2224      	movs	r2, #36	@ 0x24
 80110d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f022 0201 	bic.w	r2, r2, #1
 80110e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80110f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	4313      	orrs	r3, r2
 8011102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f042 0201 	orr.w	r2, r2, #1
 801111a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2220      	movs	r2, #32
 8011120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801112c:	2300      	movs	r3, #0
 801112e:	e000      	b.n	8011132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011130:	2302      	movs	r3, #2
  }
}
 8011132:	4618      	mov	r0, r3
 8011134:	3714      	adds	r7, #20
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr
	...

08011140 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011148:	4b0d      	ldr	r3, [pc, #52]	@ (8011180 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801114a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801114e:	4a0c      	ldr	r2, [pc, #48]	@ (8011180 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011150:	f043 0302 	orr.w	r3, r3, #2
 8011154:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011158:	4b09      	ldr	r3, [pc, #36]	@ (8011180 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801115a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801115e:	f003 0302 	and.w	r3, r3, #2
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8011166:	4b07      	ldr	r3, [pc, #28]	@ (8011184 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011168:	685a      	ldr	r2, [r3, #4]
 801116a:	4906      	ldr	r1, [pc, #24]	@ (8011184 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4313      	orrs	r3, r2
 8011170:	604b      	str	r3, [r1, #4]
}
 8011172:	bf00      	nop
 8011174:	3714      	adds	r7, #20
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	58024400 	.word	0x58024400
 8011184:	58000400 	.word	0x58000400

08011188 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011190:	4b19      	ldr	r3, [pc, #100]	@ (80111f8 <HAL_PWREx_ConfigSupply+0x70>)
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	f003 0304 	and.w	r3, r3, #4
 8011198:	2b04      	cmp	r3, #4
 801119a:	d00a      	beq.n	80111b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801119c:	4b16      	ldr	r3, [pc, #88]	@ (80111f8 <HAL_PWREx_ConfigSupply+0x70>)
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	f003 0307 	and.w	r3, r3, #7
 80111a4:	687a      	ldr	r2, [r7, #4]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d001      	beq.n	80111ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80111aa:	2301      	movs	r3, #1
 80111ac:	e01f      	b.n	80111ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80111ae:	2300      	movs	r3, #0
 80111b0:	e01d      	b.n	80111ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80111b2:	4b11      	ldr	r3, [pc, #68]	@ (80111f8 <HAL_PWREx_ConfigSupply+0x70>)
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	f023 0207 	bic.w	r2, r3, #7
 80111ba:	490f      	ldr	r1, [pc, #60]	@ (80111f8 <HAL_PWREx_ConfigSupply+0x70>)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	4313      	orrs	r3, r2
 80111c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80111c2:	f7f8 f9e7 	bl	8009594 <HAL_GetTick>
 80111c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111c8:	e009      	b.n	80111de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80111ca:	f7f8 f9e3 	bl	8009594 <HAL_GetTick>
 80111ce:	4602      	mov	r2, r0
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111d8:	d901      	bls.n	80111de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	e007      	b.n	80111ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111de:	4b06      	ldr	r3, [pc, #24]	@ (80111f8 <HAL_PWREx_ConfigSupply+0x70>)
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80111ea:	d1ee      	bne.n	80111ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80111ec:	2300      	movs	r3, #0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	58024800 	.word	0x58024800

080111fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b08c      	sub	sp, #48	@ 0x30
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801120a:	2301      	movs	r3, #1
 801120c:	e3c8      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	f000 8087 	beq.w	801132a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801121c:	4b88      	ldr	r3, [pc, #544]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011226:	4b86      	ldr	r3, [pc, #536]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801122a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801122c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801122e:	2b10      	cmp	r3, #16
 8011230:	d007      	beq.n	8011242 <HAL_RCC_OscConfig+0x46>
 8011232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011234:	2b18      	cmp	r3, #24
 8011236:	d110      	bne.n	801125a <HAL_RCC_OscConfig+0x5e>
 8011238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123a:	f003 0303 	and.w	r3, r3, #3
 801123e:	2b02      	cmp	r3, #2
 8011240:	d10b      	bne.n	801125a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011242:	4b7f      	ldr	r3, [pc, #508]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801124a:	2b00      	cmp	r3, #0
 801124c:	d06c      	beq.n	8011328 <HAL_RCC_OscConfig+0x12c>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d168      	bne.n	8011328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011256:	2301      	movs	r3, #1
 8011258:	e3a2      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011262:	d106      	bne.n	8011272 <HAL_RCC_OscConfig+0x76>
 8011264:	4b76      	ldr	r3, [pc, #472]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a75      	ldr	r2, [pc, #468]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801126a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801126e:	6013      	str	r3, [r2, #0]
 8011270:	e02e      	b.n	80112d0 <HAL_RCC_OscConfig+0xd4>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d10c      	bne.n	8011294 <HAL_RCC_OscConfig+0x98>
 801127a:	4b71      	ldr	r3, [pc, #452]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4a70      	ldr	r2, [pc, #448]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011284:	6013      	str	r3, [r2, #0]
 8011286:	4b6e      	ldr	r3, [pc, #440]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4a6d      	ldr	r2, [pc, #436]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801128c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011290:	6013      	str	r3, [r2, #0]
 8011292:	e01d      	b.n	80112d0 <HAL_RCC_OscConfig+0xd4>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801129c:	d10c      	bne.n	80112b8 <HAL_RCC_OscConfig+0xbc>
 801129e:	4b68      	ldr	r3, [pc, #416]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4a67      	ldr	r2, [pc, #412]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80112a8:	6013      	str	r3, [r2, #0]
 80112aa:	4b65      	ldr	r3, [pc, #404]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4a64      	ldr	r2, [pc, #400]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80112b4:	6013      	str	r3, [r2, #0]
 80112b6:	e00b      	b.n	80112d0 <HAL_RCC_OscConfig+0xd4>
 80112b8:	4b61      	ldr	r3, [pc, #388]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a60      	ldr	r2, [pc, #384]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80112c2:	6013      	str	r3, [r2, #0]
 80112c4:	4b5e      	ldr	r3, [pc, #376]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a5d      	ldr	r2, [pc, #372]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80112ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d013      	beq.n	8011300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112d8:	f7f8 f95c 	bl	8009594 <HAL_GetTick>
 80112dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112de:	e008      	b.n	80112f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112e0:	f7f8 f958 	bl	8009594 <HAL_GetTick>
 80112e4:	4602      	mov	r2, r0
 80112e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e8:	1ad3      	subs	r3, r2, r3
 80112ea:	2b64      	cmp	r3, #100	@ 0x64
 80112ec:	d901      	bls.n	80112f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80112ee:	2303      	movs	r3, #3
 80112f0:	e356      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112f2:	4b53      	ldr	r3, [pc, #332]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0f0      	beq.n	80112e0 <HAL_RCC_OscConfig+0xe4>
 80112fe:	e014      	b.n	801132a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011300:	f7f8 f948 	bl	8009594 <HAL_GetTick>
 8011304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011306:	e008      	b.n	801131a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011308:	f7f8 f944 	bl	8009594 <HAL_GetTick>
 801130c:	4602      	mov	r2, r0
 801130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	2b64      	cmp	r3, #100	@ 0x64
 8011314:	d901      	bls.n	801131a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8011316:	2303      	movs	r3, #3
 8011318:	e342      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801131a:	4b49      	ldr	r3, [pc, #292]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011322:	2b00      	cmp	r3, #0
 8011324:	d1f0      	bne.n	8011308 <HAL_RCC_OscConfig+0x10c>
 8011326:	e000      	b.n	801132a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f003 0302 	and.w	r3, r3, #2
 8011332:	2b00      	cmp	r3, #0
 8011334:	f000 808c 	beq.w	8011450 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011338:	4b41      	ldr	r3, [pc, #260]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011340:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011342:	4b3f      	ldr	r3, [pc, #252]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011346:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d007      	beq.n	801135e <HAL_RCC_OscConfig+0x162>
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	2b18      	cmp	r3, #24
 8011352:	d137      	bne.n	80113c4 <HAL_RCC_OscConfig+0x1c8>
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	f003 0303 	and.w	r3, r3, #3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d132      	bne.n	80113c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801135e:	4b38      	ldr	r3, [pc, #224]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f003 0304 	and.w	r3, r3, #4
 8011366:	2b00      	cmp	r3, #0
 8011368:	d005      	beq.n	8011376 <HAL_RCC_OscConfig+0x17a>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d101      	bne.n	8011376 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8011372:	2301      	movs	r3, #1
 8011374:	e314      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011376:	4b32      	ldr	r3, [pc, #200]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f023 0219 	bic.w	r2, r3, #25
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	492f      	ldr	r1, [pc, #188]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011384:	4313      	orrs	r3, r2
 8011386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011388:	f7f8 f904 	bl	8009594 <HAL_GetTick>
 801138c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801138e:	e008      	b.n	80113a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011390:	f7f8 f900 	bl	8009594 <HAL_GetTick>
 8011394:	4602      	mov	r2, r0
 8011396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011398:	1ad3      	subs	r3, r2, r3
 801139a:	2b02      	cmp	r3, #2
 801139c:	d901      	bls.n	80113a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801139e:	2303      	movs	r3, #3
 80113a0:	e2fe      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113a2:	4b27      	ldr	r3, [pc, #156]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f003 0304 	and.w	r3, r3, #4
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0f0      	beq.n	8011390 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113ae:	4b24      	ldr	r3, [pc, #144]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	691b      	ldr	r3, [r3, #16]
 80113ba:	061b      	lsls	r3, r3, #24
 80113bc:	4920      	ldr	r1, [pc, #128]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80113be:	4313      	orrs	r3, r2
 80113c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80113c2:	e045      	b.n	8011450 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d026      	beq.n	801141a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80113cc:	4b1c      	ldr	r3, [pc, #112]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f023 0219 	bic.w	r2, r3, #25
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	4919      	ldr	r1, [pc, #100]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80113da:	4313      	orrs	r3, r2
 80113dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113de:	f7f8 f8d9 	bl	8009594 <HAL_GetTick>
 80113e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113e4:	e008      	b.n	80113f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113e6:	f7f8 f8d5 	bl	8009594 <HAL_GetTick>
 80113ea:	4602      	mov	r2, r0
 80113ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	2b02      	cmp	r3, #2
 80113f2:	d901      	bls.n	80113f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80113f4:	2303      	movs	r3, #3
 80113f6:	e2d3      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113f8:	4b11      	ldr	r3, [pc, #68]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f003 0304 	and.w	r3, r3, #4
 8011400:	2b00      	cmp	r3, #0
 8011402:	d0f0      	beq.n	80113e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011404:	4b0e      	ldr	r3, [pc, #56]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	061b      	lsls	r3, r3, #24
 8011412:	490b      	ldr	r1, [pc, #44]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011414:	4313      	orrs	r3, r2
 8011416:	604b      	str	r3, [r1, #4]
 8011418:	e01a      	b.n	8011450 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801141a:	4b09      	ldr	r3, [pc, #36]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	4a08      	ldr	r2, [pc, #32]	@ (8011440 <HAL_RCC_OscConfig+0x244>)
 8011420:	f023 0301 	bic.w	r3, r3, #1
 8011424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011426:	f7f8 f8b5 	bl	8009594 <HAL_GetTick>
 801142a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801142c:	e00a      	b.n	8011444 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801142e:	f7f8 f8b1 	bl	8009594 <HAL_GetTick>
 8011432:	4602      	mov	r2, r0
 8011434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	2b02      	cmp	r3, #2
 801143a:	d903      	bls.n	8011444 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801143c:	2303      	movs	r3, #3
 801143e:	e2af      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
 8011440:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011444:	4b96      	ldr	r3, [pc, #600]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f003 0304 	and.w	r3, r3, #4
 801144c:	2b00      	cmp	r3, #0
 801144e:	d1ee      	bne.n	801142e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f003 0310 	and.w	r3, r3, #16
 8011458:	2b00      	cmp	r3, #0
 801145a:	d06a      	beq.n	8011532 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801145c:	4b90      	ldr	r3, [pc, #576]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011464:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011466:	4b8e      	ldr	r3, [pc, #568]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801146a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801146c:	69bb      	ldr	r3, [r7, #24]
 801146e:	2b08      	cmp	r3, #8
 8011470:	d007      	beq.n	8011482 <HAL_RCC_OscConfig+0x286>
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	2b18      	cmp	r3, #24
 8011476:	d11b      	bne.n	80114b0 <HAL_RCC_OscConfig+0x2b4>
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	f003 0303 	and.w	r3, r3, #3
 801147e:	2b01      	cmp	r3, #1
 8011480:	d116      	bne.n	80114b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011482:	4b87      	ldr	r3, [pc, #540]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801148a:	2b00      	cmp	r3, #0
 801148c:	d005      	beq.n	801149a <HAL_RCC_OscConfig+0x29e>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	69db      	ldr	r3, [r3, #28]
 8011492:	2b80      	cmp	r3, #128	@ 0x80
 8011494:	d001      	beq.n	801149a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8011496:	2301      	movs	r3, #1
 8011498:	e282      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801149a:	4b81      	ldr	r3, [pc, #516]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a1b      	ldr	r3, [r3, #32]
 80114a6:	061b      	lsls	r3, r3, #24
 80114a8:	497d      	ldr	r1, [pc, #500]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80114aa:	4313      	orrs	r3, r2
 80114ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80114ae:	e040      	b.n	8011532 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	69db      	ldr	r3, [r3, #28]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d023      	beq.n	8011500 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80114b8:	4b79      	ldr	r3, [pc, #484]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4a78      	ldr	r2, [pc, #480]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80114be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114c4:	f7f8 f866 	bl	8009594 <HAL_GetTick>
 80114c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114ca:	e008      	b.n	80114de <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80114cc:	f7f8 f862 	bl	8009594 <HAL_GetTick>
 80114d0:	4602      	mov	r2, r0
 80114d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	2b02      	cmp	r3, #2
 80114d8:	d901      	bls.n	80114de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80114da:	2303      	movs	r3, #3
 80114dc:	e260      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114de:	4b70      	ldr	r3, [pc, #448]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d0f0      	beq.n	80114cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80114ea:	4b6d      	ldr	r3, [pc, #436]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a1b      	ldr	r3, [r3, #32]
 80114f6:	061b      	lsls	r3, r3, #24
 80114f8:	4969      	ldr	r1, [pc, #420]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80114fa:	4313      	orrs	r3, r2
 80114fc:	60cb      	str	r3, [r1, #12]
 80114fe:	e018      	b.n	8011532 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011500:	4b67      	ldr	r3, [pc, #412]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4a66      	ldr	r2, [pc, #408]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801150a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801150c:	f7f8 f842 	bl	8009594 <HAL_GetTick>
 8011510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011512:	e008      	b.n	8011526 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011514:	f7f8 f83e 	bl	8009594 <HAL_GetTick>
 8011518:	4602      	mov	r2, r0
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	2b02      	cmp	r3, #2
 8011520:	d901      	bls.n	8011526 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8011522:	2303      	movs	r3, #3
 8011524:	e23c      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011526:	4b5e      	ldr	r3, [pc, #376]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801152e:	2b00      	cmp	r3, #0
 8011530:	d1f0      	bne.n	8011514 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f003 0308 	and.w	r3, r3, #8
 801153a:	2b00      	cmp	r3, #0
 801153c:	d036      	beq.n	80115ac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	695b      	ldr	r3, [r3, #20]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d019      	beq.n	801157a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011546:	4b56      	ldr	r3, [pc, #344]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801154a:	4a55      	ldr	r2, [pc, #340]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801154c:	f043 0301 	orr.w	r3, r3, #1
 8011550:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011552:	f7f8 f81f 	bl	8009594 <HAL_GetTick>
 8011556:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011558:	e008      	b.n	801156c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801155a:	f7f8 f81b 	bl	8009594 <HAL_GetTick>
 801155e:	4602      	mov	r2, r0
 8011560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	2b02      	cmp	r3, #2
 8011566:	d901      	bls.n	801156c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011568:	2303      	movs	r3, #3
 801156a:	e219      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801156c:	4b4c      	ldr	r3, [pc, #304]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801156e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011570:	f003 0302 	and.w	r3, r3, #2
 8011574:	2b00      	cmp	r3, #0
 8011576:	d0f0      	beq.n	801155a <HAL_RCC_OscConfig+0x35e>
 8011578:	e018      	b.n	80115ac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801157a:	4b49      	ldr	r3, [pc, #292]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801157c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801157e:	4a48      	ldr	r2, [pc, #288]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011580:	f023 0301 	bic.w	r3, r3, #1
 8011584:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011586:	f7f8 f805 	bl	8009594 <HAL_GetTick>
 801158a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801158c:	e008      	b.n	80115a0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801158e:	f7f8 f801 	bl	8009594 <HAL_GetTick>
 8011592:	4602      	mov	r2, r0
 8011594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	2b02      	cmp	r3, #2
 801159a:	d901      	bls.n	80115a0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801159c:	2303      	movs	r3, #3
 801159e:	e1ff      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80115a0:	4b3f      	ldr	r3, [pc, #252]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80115a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115a4:	f003 0302 	and.w	r3, r3, #2
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d1f0      	bne.n	801158e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f003 0320 	and.w	r3, r3, #32
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d036      	beq.n	8011626 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	699b      	ldr	r3, [r3, #24]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d019      	beq.n	80115f4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80115c0:	4b37      	ldr	r3, [pc, #220]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4a36      	ldr	r2, [pc, #216]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80115c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80115ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80115cc:	f7f7 ffe2 	bl	8009594 <HAL_GetTick>
 80115d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115d2:	e008      	b.n	80115e6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115d4:	f7f7 ffde 	bl	8009594 <HAL_GetTick>
 80115d8:	4602      	mov	r2, r0
 80115da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	2b02      	cmp	r3, #2
 80115e0:	d901      	bls.n	80115e6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80115e2:	2303      	movs	r3, #3
 80115e4:	e1dc      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115e6:	4b2e      	ldr	r3, [pc, #184]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0f0      	beq.n	80115d4 <HAL_RCC_OscConfig+0x3d8>
 80115f2:	e018      	b.n	8011626 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80115f4:	4b2a      	ldr	r3, [pc, #168]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4a29      	ldr	r2, [pc, #164]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 80115fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011600:	f7f7 ffc8 	bl	8009594 <HAL_GetTick>
 8011604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011606:	e008      	b.n	801161a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011608:	f7f7 ffc4 	bl	8009594 <HAL_GetTick>
 801160c:	4602      	mov	r2, r0
 801160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	2b02      	cmp	r3, #2
 8011614:	d901      	bls.n	801161a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8011616:	2303      	movs	r3, #3
 8011618:	e1c2      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801161a:	4b21      	ldr	r3, [pc, #132]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1f0      	bne.n	8011608 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f003 0304 	and.w	r3, r3, #4
 801162e:	2b00      	cmp	r3, #0
 8011630:	f000 8086 	beq.w	8011740 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011634:	4b1b      	ldr	r3, [pc, #108]	@ (80116a4 <HAL_RCC_OscConfig+0x4a8>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a1a      	ldr	r2, [pc, #104]	@ (80116a4 <HAL_RCC_OscConfig+0x4a8>)
 801163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801163e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011640:	f7f7 ffa8 	bl	8009594 <HAL_GetTick>
 8011644:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011646:	e008      	b.n	801165a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011648:	f7f7 ffa4 	bl	8009594 <HAL_GetTick>
 801164c:	4602      	mov	r2, r0
 801164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	2b64      	cmp	r3, #100	@ 0x64
 8011654:	d901      	bls.n	801165a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8011656:	2303      	movs	r3, #3
 8011658:	e1a2      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801165a:	4b12      	ldr	r3, [pc, #72]	@ (80116a4 <HAL_RCC_OscConfig+0x4a8>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011662:	2b00      	cmp	r3, #0
 8011664:	d0f0      	beq.n	8011648 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d106      	bne.n	801167c <HAL_RCC_OscConfig+0x480>
 801166e:	4b0c      	ldr	r3, [pc, #48]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011672:	4a0b      	ldr	r2, [pc, #44]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011674:	f043 0301 	orr.w	r3, r3, #1
 8011678:	6713      	str	r3, [r2, #112]	@ 0x70
 801167a:	e032      	b.n	80116e2 <HAL_RCC_OscConfig+0x4e6>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d111      	bne.n	80116a8 <HAL_RCC_OscConfig+0x4ac>
 8011684:	4b06      	ldr	r3, [pc, #24]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011688:	4a05      	ldr	r2, [pc, #20]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 801168a:	f023 0301 	bic.w	r3, r3, #1
 801168e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011690:	4b03      	ldr	r3, [pc, #12]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011694:	4a02      	ldr	r2, [pc, #8]	@ (80116a0 <HAL_RCC_OscConfig+0x4a4>)
 8011696:	f023 0304 	bic.w	r3, r3, #4
 801169a:	6713      	str	r3, [r2, #112]	@ 0x70
 801169c:	e021      	b.n	80116e2 <HAL_RCC_OscConfig+0x4e6>
 801169e:	bf00      	nop
 80116a0:	58024400 	.word	0x58024400
 80116a4:	58024800 	.word	0x58024800
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	2b05      	cmp	r3, #5
 80116ae:	d10c      	bne.n	80116ca <HAL_RCC_OscConfig+0x4ce>
 80116b0:	4b83      	ldr	r3, [pc, #524]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116b4:	4a82      	ldr	r2, [pc, #520]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116b6:	f043 0304 	orr.w	r3, r3, #4
 80116ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80116bc:	4b80      	ldr	r3, [pc, #512]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116c0:	4a7f      	ldr	r2, [pc, #508]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116c2:	f043 0301 	orr.w	r3, r3, #1
 80116c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80116c8:	e00b      	b.n	80116e2 <HAL_RCC_OscConfig+0x4e6>
 80116ca:	4b7d      	ldr	r3, [pc, #500]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ce:	4a7c      	ldr	r2, [pc, #496]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116d0:	f023 0301 	bic.w	r3, r3, #1
 80116d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80116d6:	4b7a      	ldr	r3, [pc, #488]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116da:	4a79      	ldr	r2, [pc, #484]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80116dc:	f023 0304 	bic.w	r3, r3, #4
 80116e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d015      	beq.n	8011716 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116ea:	f7f7 ff53 	bl	8009594 <HAL_GetTick>
 80116ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116f0:	e00a      	b.n	8011708 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80116f2:	f7f7 ff4f 	bl	8009594 <HAL_GetTick>
 80116f6:	4602      	mov	r2, r0
 80116f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011700:	4293      	cmp	r3, r2
 8011702:	d901      	bls.n	8011708 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8011704:	2303      	movs	r3, #3
 8011706:	e14b      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011708:	4b6d      	ldr	r3, [pc, #436]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801170c:	f003 0302 	and.w	r3, r3, #2
 8011710:	2b00      	cmp	r3, #0
 8011712:	d0ee      	beq.n	80116f2 <HAL_RCC_OscConfig+0x4f6>
 8011714:	e014      	b.n	8011740 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011716:	f7f7 ff3d 	bl	8009594 <HAL_GetTick>
 801171a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801171c:	e00a      	b.n	8011734 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801171e:	f7f7 ff39 	bl	8009594 <HAL_GetTick>
 8011722:	4602      	mov	r2, r0
 8011724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	f241 3288 	movw	r2, #5000	@ 0x1388
 801172c:	4293      	cmp	r3, r2
 801172e:	d901      	bls.n	8011734 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011730:	2303      	movs	r3, #3
 8011732:	e135      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011734:	4b62      	ldr	r3, [pc, #392]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011738:	f003 0302 	and.w	r3, r3, #2
 801173c:	2b00      	cmp	r3, #0
 801173e:	d1ee      	bne.n	801171e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011744:	2b00      	cmp	r3, #0
 8011746:	f000 812a 	beq.w	801199e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801174a:	4b5d      	ldr	r3, [pc, #372]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011752:	2b18      	cmp	r3, #24
 8011754:	f000 80ba 	beq.w	80118cc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801175c:	2b02      	cmp	r3, #2
 801175e:	f040 8095 	bne.w	801188c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011762:	4b57      	ldr	r3, [pc, #348]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4a56      	ldr	r2, [pc, #344]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011768:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801176c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801176e:	f7f7 ff11 	bl	8009594 <HAL_GetTick>
 8011772:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011774:	e008      	b.n	8011788 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011776:	f7f7 ff0d 	bl	8009594 <HAL_GetTick>
 801177a:	4602      	mov	r2, r0
 801177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	2b02      	cmp	r3, #2
 8011782:	d901      	bls.n	8011788 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8011784:	2303      	movs	r3, #3
 8011786:	e10b      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011788:	4b4d      	ldr	r3, [pc, #308]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1f0      	bne.n	8011776 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011794:	4b4a      	ldr	r3, [pc, #296]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011798:	4b4a      	ldr	r3, [pc, #296]	@ (80118c4 <HAL_RCC_OscConfig+0x6c8>)
 801179a:	4013      	ands	r3, r2
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80117a4:	0112      	lsls	r2, r2, #4
 80117a6:	430a      	orrs	r2, r1
 80117a8:	4945      	ldr	r1, [pc, #276]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80117aa:	4313      	orrs	r3, r2
 80117ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117b2:	3b01      	subs	r3, #1
 80117b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117bc:	3b01      	subs	r3, #1
 80117be:	025b      	lsls	r3, r3, #9
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	431a      	orrs	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117c8:	3b01      	subs	r3, #1
 80117ca:	041b      	lsls	r3, r3, #16
 80117cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80117d0:	431a      	orrs	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117d6:	3b01      	subs	r3, #1
 80117d8:	061b      	lsls	r3, r3, #24
 80117da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80117de:	4938      	ldr	r1, [pc, #224]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80117e0:	4313      	orrs	r3, r2
 80117e2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80117e4:	4b36      	ldr	r3, [pc, #216]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80117e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e8:	4a35      	ldr	r2, [pc, #212]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80117ea:	f023 0301 	bic.w	r3, r3, #1
 80117ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80117f0:	4b33      	ldr	r3, [pc, #204]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80117f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117f4:	4b34      	ldr	r3, [pc, #208]	@ (80118c8 <HAL_RCC_OscConfig+0x6cc>)
 80117f6:	4013      	ands	r3, r2
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80117fc:	00d2      	lsls	r2, r2, #3
 80117fe:	4930      	ldr	r1, [pc, #192]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011800:	4313      	orrs	r3, r2
 8011802:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011804:	4b2e      	ldr	r3, [pc, #184]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011808:	f023 020c 	bic.w	r2, r3, #12
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011810:	492b      	ldr	r1, [pc, #172]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011812:	4313      	orrs	r3, r2
 8011814:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011816:	4b2a      	ldr	r3, [pc, #168]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801181a:	f023 0202 	bic.w	r2, r3, #2
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011822:	4927      	ldr	r1, [pc, #156]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011824:	4313      	orrs	r3, r2
 8011826:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011828:	4b25      	ldr	r3, [pc, #148]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801182c:	4a24      	ldr	r2, [pc, #144]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801182e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011834:	4b22      	ldr	r3, [pc, #136]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011838:	4a21      	ldr	r2, [pc, #132]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801183a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801183e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011840:	4b1f      	ldr	r3, [pc, #124]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011844:	4a1e      	ldr	r2, [pc, #120]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011846:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801184a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801184c:	4b1c      	ldr	r3, [pc, #112]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011850:	4a1b      	ldr	r2, [pc, #108]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011852:	f043 0301 	orr.w	r3, r3, #1
 8011856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011858:	4b19      	ldr	r3, [pc, #100]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a18      	ldr	r2, [pc, #96]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801185e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011864:	f7f7 fe96 	bl	8009594 <HAL_GetTick>
 8011868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801186a:	e008      	b.n	801187e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801186c:	f7f7 fe92 	bl	8009594 <HAL_GetTick>
 8011870:	4602      	mov	r2, r0
 8011872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	2b02      	cmp	r3, #2
 8011878:	d901      	bls.n	801187e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801187a:	2303      	movs	r3, #3
 801187c:	e090      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801187e:	4b10      	ldr	r3, [pc, #64]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011886:	2b00      	cmp	r3, #0
 8011888:	d0f0      	beq.n	801186c <HAL_RCC_OscConfig+0x670>
 801188a:	e088      	b.n	801199e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801188c:	4b0c      	ldr	r3, [pc, #48]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a0b      	ldr	r2, [pc, #44]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 8011892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011898:	f7f7 fe7c 	bl	8009594 <HAL_GetTick>
 801189c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801189e:	e008      	b.n	80118b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80118a0:	f7f7 fe78 	bl	8009594 <HAL_GetTick>
 80118a4:	4602      	mov	r2, r0
 80118a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	2b02      	cmp	r3, #2
 80118ac:	d901      	bls.n	80118b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80118ae:	2303      	movs	r3, #3
 80118b0:	e076      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80118b2:	4b03      	ldr	r3, [pc, #12]	@ (80118c0 <HAL_RCC_OscConfig+0x6c4>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d1f0      	bne.n	80118a0 <HAL_RCC_OscConfig+0x6a4>
 80118be:	e06e      	b.n	801199e <HAL_RCC_OscConfig+0x7a2>
 80118c0:	58024400 	.word	0x58024400
 80118c4:	fffffc0c 	.word	0xfffffc0c
 80118c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80118cc:	4b36      	ldr	r3, [pc, #216]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 80118ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80118d2:	4b35      	ldr	r3, [pc, #212]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 80118d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d031      	beq.n	8011944 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	f003 0203 	and.w	r2, r3, #3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d12a      	bne.n	8011944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	091b      	lsrs	r3, r3, #4
 80118f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d122      	bne.n	8011944 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011908:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801190a:	429a      	cmp	r2, r3
 801190c:	d11a      	bne.n	8011944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	0a5b      	lsrs	r3, r3, #9
 8011912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801191a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801191c:	429a      	cmp	r2, r3
 801191e:	d111      	bne.n	8011944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	0c1b      	lsrs	r3, r3, #16
 8011924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801192c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801192e:	429a      	cmp	r2, r3
 8011930:	d108      	bne.n	8011944 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	0e1b      	lsrs	r3, r3, #24
 8011936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801193e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011940:	429a      	cmp	r2, r3
 8011942:	d001      	beq.n	8011948 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011944:	2301      	movs	r3, #1
 8011946:	e02b      	b.n	80119a0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011948:	4b17      	ldr	r3, [pc, #92]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 801194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801194c:	08db      	lsrs	r3, r3, #3
 801194e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011952:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011958:	693a      	ldr	r2, [r7, #16]
 801195a:	429a      	cmp	r2, r3
 801195c:	d01f      	beq.n	801199e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801195e:	4b12      	ldr	r3, [pc, #72]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 8011960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011962:	4a11      	ldr	r2, [pc, #68]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 8011964:	f023 0301 	bic.w	r3, r3, #1
 8011968:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801196a:	f7f7 fe13 	bl	8009594 <HAL_GetTick>
 801196e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011970:	bf00      	nop
 8011972:	f7f7 fe0f 	bl	8009594 <HAL_GetTick>
 8011976:	4602      	mov	r2, r0
 8011978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197a:	4293      	cmp	r3, r2
 801197c:	d0f9      	beq.n	8011972 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801197e:	4b0a      	ldr	r3, [pc, #40]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 8011980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011982:	4b0a      	ldr	r3, [pc, #40]	@ (80119ac <HAL_RCC_OscConfig+0x7b0>)
 8011984:	4013      	ands	r3, r2
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801198a:	00d2      	lsls	r2, r2, #3
 801198c:	4906      	ldr	r1, [pc, #24]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 801198e:	4313      	orrs	r3, r2
 8011990:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011992:	4b05      	ldr	r3, [pc, #20]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 8011994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011996:	4a04      	ldr	r2, [pc, #16]	@ (80119a8 <HAL_RCC_OscConfig+0x7ac>)
 8011998:	f043 0301 	orr.w	r3, r3, #1
 801199c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801199e:	2300      	movs	r3, #0
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	3730      	adds	r7, #48	@ 0x30
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}
 80119a8:	58024400 	.word	0x58024400
 80119ac:	ffff0007 	.word	0xffff0007

080119b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b086      	sub	sp, #24
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d101      	bne.n	80119c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80119c0:	2301      	movs	r3, #1
 80119c2:	e19c      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80119c4:	4b8a      	ldr	r3, [pc, #552]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f003 030f 	and.w	r3, r3, #15
 80119cc:	683a      	ldr	r2, [r7, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d910      	bls.n	80119f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119d2:	4b87      	ldr	r3, [pc, #540]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	f023 020f 	bic.w	r2, r3, #15
 80119da:	4985      	ldr	r1, [pc, #532]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	4313      	orrs	r3, r2
 80119e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80119e2:	4b83      	ldr	r3, [pc, #524]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f003 030f 	and.w	r3, r3, #15
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d001      	beq.n	80119f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80119f0:	2301      	movs	r3, #1
 80119f2:	e184      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f003 0304 	and.w	r3, r3, #4
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d010      	beq.n	8011a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	691a      	ldr	r2, [r3, #16]
 8011a04:	4b7b      	ldr	r3, [pc, #492]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d908      	bls.n	8011a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011a10:	4b78      	ldr	r3, [pc, #480]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a12:	699b      	ldr	r3, [r3, #24]
 8011a14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	691b      	ldr	r3, [r3, #16]
 8011a1c:	4975      	ldr	r1, [pc, #468]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f003 0308 	and.w	r3, r3, #8
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d010      	beq.n	8011a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	695a      	ldr	r2, [r3, #20]
 8011a32:	4b70      	ldr	r3, [pc, #448]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a34:	69db      	ldr	r3, [r3, #28]
 8011a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d908      	bls.n	8011a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a40:	69db      	ldr	r3, [r3, #28]
 8011a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	695b      	ldr	r3, [r3, #20]
 8011a4a:	496a      	ldr	r1, [pc, #424]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f003 0310 	and.w	r3, r3, #16
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d010      	beq.n	8011a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	699a      	ldr	r2, [r3, #24]
 8011a60:	4b64      	ldr	r3, [pc, #400]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a62:	69db      	ldr	r3, [r3, #28]
 8011a64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d908      	bls.n	8011a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011a6c:	4b61      	ldr	r3, [pc, #388]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a6e:	69db      	ldr	r3, [r3, #28]
 8011a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	495e      	ldr	r1, [pc, #376]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f003 0320 	and.w	r3, r3, #32
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d010      	beq.n	8011aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	69da      	ldr	r2, [r3, #28]
 8011a8e:	4b59      	ldr	r3, [pc, #356]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a90:	6a1b      	ldr	r3, [r3, #32]
 8011a92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d908      	bls.n	8011aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011a9a:	4b56      	ldr	r3, [pc, #344]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011a9c:	6a1b      	ldr	r3, [r3, #32]
 8011a9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	69db      	ldr	r3, [r3, #28]
 8011aa6:	4953      	ldr	r1, [pc, #332]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f003 0302 	and.w	r3, r3, #2
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d010      	beq.n	8011ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	68da      	ldr	r2, [r3, #12]
 8011abc:	4b4d      	ldr	r3, [pc, #308]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011abe:	699b      	ldr	r3, [r3, #24]
 8011ac0:	f003 030f 	and.w	r3, r3, #15
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d908      	bls.n	8011ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011aca:	699b      	ldr	r3, [r3, #24]
 8011acc:	f023 020f 	bic.w	r2, r3, #15
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	68db      	ldr	r3, [r3, #12]
 8011ad4:	4947      	ldr	r1, [pc, #284]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f003 0301 	and.w	r3, r3, #1
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d055      	beq.n	8011b92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011ae6:	4b43      	ldr	r3, [pc, #268]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011ae8:	699b      	ldr	r3, [r3, #24]
 8011aea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	4940      	ldr	r1, [pc, #256]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011af4:	4313      	orrs	r3, r2
 8011af6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2b02      	cmp	r3, #2
 8011afe:	d107      	bne.n	8011b10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011b00:	4b3c      	ldr	r3, [pc, #240]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d121      	bne.n	8011b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e0f6      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d107      	bne.n	8011b28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011b18:	4b36      	ldr	r3, [pc, #216]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d115      	bne.n	8011b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e0ea      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d107      	bne.n	8011b40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b30:	4b30      	ldr	r3, [pc, #192]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	e0de      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011b40:	4b2c      	ldr	r3, [pc, #176]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f003 0304 	and.w	r3, r3, #4
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d101      	bne.n	8011b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	e0d6      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011b50:	4b28      	ldr	r3, [pc, #160]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b52:	691b      	ldr	r3, [r3, #16]
 8011b54:	f023 0207 	bic.w	r2, r3, #7
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	4925      	ldr	r1, [pc, #148]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b62:	f7f7 fd17 	bl	8009594 <HAL_GetTick>
 8011b66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b68:	e00a      	b.n	8011b80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b6a:	f7f7 fd13 	bl	8009594 <HAL_GetTick>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	1ad3      	subs	r3, r2, r3
 8011b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d901      	bls.n	8011b80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011b7c:	2303      	movs	r3, #3
 8011b7e:	e0be      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b80:	4b1c      	ldr	r3, [pc, #112]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	00db      	lsls	r3, r3, #3
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d1eb      	bne.n	8011b6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f003 0302 	and.w	r3, r3, #2
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d010      	beq.n	8011bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	68da      	ldr	r2, [r3, #12]
 8011ba2:	4b14      	ldr	r3, [pc, #80]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011ba4:	699b      	ldr	r3, [r3, #24]
 8011ba6:	f003 030f 	and.w	r3, r3, #15
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d208      	bcs.n	8011bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011bae:	4b11      	ldr	r3, [pc, #68]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011bb0:	699b      	ldr	r3, [r3, #24]
 8011bb2:	f023 020f 	bic.w	r2, r3, #15
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	490e      	ldr	r1, [pc, #56]	@ (8011bf4 <HAL_RCC_ClockConfig+0x244>)
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f003 030f 	and.w	r3, r3, #15
 8011bc8:	683a      	ldr	r2, [r7, #0]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d214      	bcs.n	8011bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011bce:	4b08      	ldr	r3, [pc, #32]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f023 020f 	bic.w	r2, r3, #15
 8011bd6:	4906      	ldr	r1, [pc, #24]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011bde:	4b04      	ldr	r3, [pc, #16]	@ (8011bf0 <HAL_RCC_ClockConfig+0x240>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	f003 030f 	and.w	r3, r3, #15
 8011be6:	683a      	ldr	r2, [r7, #0]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d005      	beq.n	8011bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011bec:	2301      	movs	r3, #1
 8011bee:	e086      	b.n	8011cfe <HAL_RCC_ClockConfig+0x34e>
 8011bf0:	52002000 	.word	0x52002000
 8011bf4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f003 0304 	and.w	r3, r3, #4
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d010      	beq.n	8011c26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	691a      	ldr	r2, [r3, #16]
 8011c08:	4b3f      	ldr	r3, [pc, #252]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c0a:	699b      	ldr	r3, [r3, #24]
 8011c0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d208      	bcs.n	8011c26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011c14:	4b3c      	ldr	r3, [pc, #240]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c16:	699b      	ldr	r3, [r3, #24]
 8011c18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	691b      	ldr	r3, [r3, #16]
 8011c20:	4939      	ldr	r1, [pc, #228]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c22:	4313      	orrs	r3, r2
 8011c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f003 0308 	and.w	r3, r3, #8
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d010      	beq.n	8011c54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	695a      	ldr	r2, [r3, #20]
 8011c36:	4b34      	ldr	r3, [pc, #208]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c38:	69db      	ldr	r3, [r3, #28]
 8011c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d208      	bcs.n	8011c54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011c42:	4b31      	ldr	r3, [pc, #196]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c44:	69db      	ldr	r3, [r3, #28]
 8011c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	695b      	ldr	r3, [r3, #20]
 8011c4e:	492e      	ldr	r1, [pc, #184]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c50:	4313      	orrs	r3, r2
 8011c52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f003 0310 	and.w	r3, r3, #16
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d010      	beq.n	8011c82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	699a      	ldr	r2, [r3, #24]
 8011c64:	4b28      	ldr	r3, [pc, #160]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c66:	69db      	ldr	r3, [r3, #28]
 8011c68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d208      	bcs.n	8011c82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011c70:	4b25      	ldr	r3, [pc, #148]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c72:	69db      	ldr	r3, [r3, #28]
 8011c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	699b      	ldr	r3, [r3, #24]
 8011c7c:	4922      	ldr	r1, [pc, #136]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f003 0320 	and.w	r3, r3, #32
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d010      	beq.n	8011cb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	69da      	ldr	r2, [r3, #28]
 8011c92:	4b1d      	ldr	r3, [pc, #116]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011c94:	6a1b      	ldr	r3, [r3, #32]
 8011c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d208      	bcs.n	8011cb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011ca0:	6a1b      	ldr	r3, [r3, #32]
 8011ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	69db      	ldr	r3, [r3, #28]
 8011caa:	4917      	ldr	r1, [pc, #92]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011cac:	4313      	orrs	r3, r2
 8011cae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011cb0:	f000 f834 	bl	8011d1c <HAL_RCC_GetSysClockFreq>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	4b14      	ldr	r3, [pc, #80]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	0a1b      	lsrs	r3, r3, #8
 8011cbc:	f003 030f 	and.w	r3, r3, #15
 8011cc0:	4912      	ldr	r1, [pc, #72]	@ (8011d0c <HAL_RCC_ClockConfig+0x35c>)
 8011cc2:	5ccb      	ldrb	r3, [r1, r3]
 8011cc4:	f003 031f 	and.w	r3, r3, #31
 8011cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8011ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011cce:	4b0e      	ldr	r3, [pc, #56]	@ (8011d08 <HAL_RCC_ClockConfig+0x358>)
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	f003 030f 	and.w	r3, r3, #15
 8011cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8011d0c <HAL_RCC_ClockConfig+0x35c>)
 8011cd8:	5cd3      	ldrb	r3, [r2, r3]
 8011cda:	f003 031f 	and.w	r3, r3, #31
 8011cde:	693a      	ldr	r2, [r7, #16]
 8011ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8011ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8011d10 <HAL_RCC_ClockConfig+0x360>)
 8011ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8011d14 <HAL_RCC_ClockConfig+0x364>)
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011cee:	4b0a      	ldr	r3, [pc, #40]	@ (8011d18 <HAL_RCC_ClockConfig+0x368>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7f7 fc04 	bl	8009500 <HAL_InitTick>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3718      	adds	r7, #24
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	58024400 	.word	0x58024400
 8011d0c:	0801ec0c 	.word	0x0801ec0c
 8011d10:	24000008 	.word	0x24000008
 8011d14:	24000004 	.word	0x24000004
 8011d18:	2400000c 	.word	0x2400000c

08011d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b089      	sub	sp, #36	@ 0x24
 8011d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011d22:	4bb3      	ldr	r3, [pc, #716]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d24:	691b      	ldr	r3, [r3, #16]
 8011d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011d2a:	2b18      	cmp	r3, #24
 8011d2c:	f200 8155 	bhi.w	8011fda <HAL_RCC_GetSysClockFreq+0x2be>
 8011d30:	a201      	add	r2, pc, #4	@ (adr r2, 8011d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d36:	bf00      	nop
 8011d38:	08011d9d 	.word	0x08011d9d
 8011d3c:	08011fdb 	.word	0x08011fdb
 8011d40:	08011fdb 	.word	0x08011fdb
 8011d44:	08011fdb 	.word	0x08011fdb
 8011d48:	08011fdb 	.word	0x08011fdb
 8011d4c:	08011fdb 	.word	0x08011fdb
 8011d50:	08011fdb 	.word	0x08011fdb
 8011d54:	08011fdb 	.word	0x08011fdb
 8011d58:	08011dc3 	.word	0x08011dc3
 8011d5c:	08011fdb 	.word	0x08011fdb
 8011d60:	08011fdb 	.word	0x08011fdb
 8011d64:	08011fdb 	.word	0x08011fdb
 8011d68:	08011fdb 	.word	0x08011fdb
 8011d6c:	08011fdb 	.word	0x08011fdb
 8011d70:	08011fdb 	.word	0x08011fdb
 8011d74:	08011fdb 	.word	0x08011fdb
 8011d78:	08011dc9 	.word	0x08011dc9
 8011d7c:	08011fdb 	.word	0x08011fdb
 8011d80:	08011fdb 	.word	0x08011fdb
 8011d84:	08011fdb 	.word	0x08011fdb
 8011d88:	08011fdb 	.word	0x08011fdb
 8011d8c:	08011fdb 	.word	0x08011fdb
 8011d90:	08011fdb 	.word	0x08011fdb
 8011d94:	08011fdb 	.word	0x08011fdb
 8011d98:	08011dcf 	.word	0x08011dcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d9c:	4b94      	ldr	r3, [pc, #592]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f003 0320 	and.w	r3, r3, #32
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d009      	beq.n	8011dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011da8:	4b91      	ldr	r3, [pc, #580]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	08db      	lsrs	r3, r3, #3
 8011dae:	f003 0303 	and.w	r3, r3, #3
 8011db2:	4a90      	ldr	r2, [pc, #576]	@ (8011ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011db4:	fa22 f303 	lsr.w	r3, r2, r3
 8011db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011dba:	e111      	b.n	8011fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011dbc:	4b8d      	ldr	r3, [pc, #564]	@ (8011ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011dbe:	61bb      	str	r3, [r7, #24]
      break;
 8011dc0:	e10e      	b.n	8011fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8011ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011dc4:	61bb      	str	r3, [r7, #24]
      break;
 8011dc6:	e10b      	b.n	8011fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8011ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011dca:	61bb      	str	r3, [r7, #24]
      break;
 8011dcc:	e108      	b.n	8011fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011dce:	4b88      	ldr	r3, [pc, #544]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd2:	f003 0303 	and.w	r3, r3, #3
 8011dd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011dd8:	4b85      	ldr	r3, [pc, #532]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ddc:	091b      	lsrs	r3, r3, #4
 8011dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011de2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011de4:	4b82      	ldr	r3, [pc, #520]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011de8:	f003 0301 	and.w	r3, r3, #1
 8011dec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011dee:	4b80      	ldr	r3, [pc, #512]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011df2:	08db      	lsrs	r3, r3, #3
 8011df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	fb02 f303 	mul.w	r3, r2, r3
 8011dfe:	ee07 3a90 	vmov	s15, r3
 8011e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f000 80e1 	beq.w	8011fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	f000 8083 	beq.w	8011f20 <HAL_RCC_GetSysClockFreq+0x204>
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	f200 80a1 	bhi.w	8011f64 <HAL_RCC_GetSysClockFreq+0x248>
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d003      	beq.n	8011e30 <HAL_RCC_GetSysClockFreq+0x114>
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d056      	beq.n	8011edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8011e2e:	e099      	b.n	8011f64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e30:	4b6f      	ldr	r3, [pc, #444]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f003 0320 	and.w	r3, r3, #32
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d02d      	beq.n	8011e98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	08db      	lsrs	r3, r3, #3
 8011e42:	f003 0303 	and.w	r3, r3, #3
 8011e46:	4a6b      	ldr	r2, [pc, #428]	@ (8011ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011e48:	fa22 f303 	lsr.w	r3, r2, r3
 8011e4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	ee07 3a90 	vmov	s15, r3
 8011e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	ee07 3a90 	vmov	s15, r3
 8011e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e66:	4b62      	ldr	r3, [pc, #392]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e6e:	ee07 3a90 	vmov	s15, r3
 8011e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8012000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011e96:	e087      	b.n	8011fa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	ee07 3a90 	vmov	s15, r3
 8011e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ea2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8012004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011eaa:	4b51      	ldr	r3, [pc, #324]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eb2:	ee07 3a90 	vmov	s15, r3
 8011eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ebe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8012000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011eda:	e065      	b.n	8011fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	ee07 3a90 	vmov	s15, r3
 8011ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ee6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8012008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011eee:	4b40      	ldr	r3, [pc, #256]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ef6:	ee07 3a90 	vmov	s15, r3
 8011efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f1e:	e043      	b.n	8011fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	ee07 3a90 	vmov	s15, r3
 8011f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801200c <HAL_RCC_GetSysClockFreq+0x2f0>
 8011f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f32:	4b2f      	ldr	r3, [pc, #188]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f3a:	ee07 3a90 	vmov	s15, r3
 8011f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8012000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f62:	e021      	b.n	8011fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	ee07 3a90 	vmov	s15, r3
 8011f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8012008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f76:	4b1e      	ldr	r3, [pc, #120]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f7e:	ee07 3a90 	vmov	s15, r3
 8011f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8012000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011fa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011fa8:	4b11      	ldr	r3, [pc, #68]	@ (8011ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fac:	0a5b      	lsrs	r3, r3, #9
 8011fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	ee07 3a90 	vmov	s15, r3
 8011fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011fcc:	ee17 3a90 	vmov	r3, s15
 8011fd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011fd2:	e005      	b.n	8011fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	61bb      	str	r3, [r7, #24]
      break;
 8011fd8:	e002      	b.n	8011fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011fda:	4b07      	ldr	r3, [pc, #28]	@ (8011ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011fdc:	61bb      	str	r3, [r7, #24]
      break;
 8011fde:	bf00      	nop
  }

  return sysclockfreq;
 8011fe0:	69bb      	ldr	r3, [r7, #24]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3724      	adds	r7, #36	@ 0x24
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	58024400 	.word	0x58024400
 8011ff4:	03d09000 	.word	0x03d09000
 8011ff8:	003d0900 	.word	0x003d0900
 8011ffc:	016e3600 	.word	0x016e3600
 8012000:	46000000 	.word	0x46000000
 8012004:	4c742400 	.word	0x4c742400
 8012008:	4a742400 	.word	0x4a742400
 801200c:	4bb71b00 	.word	0x4bb71b00

08012010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012016:	f7ff fe81 	bl	8011d1c <HAL_RCC_GetSysClockFreq>
 801201a:	4602      	mov	r2, r0
 801201c:	4b10      	ldr	r3, [pc, #64]	@ (8012060 <HAL_RCC_GetHCLKFreq+0x50>)
 801201e:	699b      	ldr	r3, [r3, #24]
 8012020:	0a1b      	lsrs	r3, r3, #8
 8012022:	f003 030f 	and.w	r3, r3, #15
 8012026:	490f      	ldr	r1, [pc, #60]	@ (8012064 <HAL_RCC_GetHCLKFreq+0x54>)
 8012028:	5ccb      	ldrb	r3, [r1, r3]
 801202a:	f003 031f 	and.w	r3, r3, #31
 801202e:	fa22 f303 	lsr.w	r3, r2, r3
 8012032:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012034:	4b0a      	ldr	r3, [pc, #40]	@ (8012060 <HAL_RCC_GetHCLKFreq+0x50>)
 8012036:	699b      	ldr	r3, [r3, #24]
 8012038:	f003 030f 	and.w	r3, r3, #15
 801203c:	4a09      	ldr	r2, [pc, #36]	@ (8012064 <HAL_RCC_GetHCLKFreq+0x54>)
 801203e:	5cd3      	ldrb	r3, [r2, r3]
 8012040:	f003 031f 	and.w	r3, r3, #31
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	fa22 f303 	lsr.w	r3, r2, r3
 801204a:	4a07      	ldr	r2, [pc, #28]	@ (8012068 <HAL_RCC_GetHCLKFreq+0x58>)
 801204c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801204e:	4a07      	ldr	r2, [pc, #28]	@ (801206c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012054:	4b04      	ldr	r3, [pc, #16]	@ (8012068 <HAL_RCC_GetHCLKFreq+0x58>)
 8012056:	681b      	ldr	r3, [r3, #0]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}
 8012060:	58024400 	.word	0x58024400
 8012064:	0801ec0c 	.word	0x0801ec0c
 8012068:	24000008 	.word	0x24000008
 801206c:	24000004 	.word	0x24000004

08012070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012074:	f7ff ffcc 	bl	8012010 <HAL_RCC_GetHCLKFreq>
 8012078:	4602      	mov	r2, r0
 801207a:	4b06      	ldr	r3, [pc, #24]	@ (8012094 <HAL_RCC_GetPCLK1Freq+0x24>)
 801207c:	69db      	ldr	r3, [r3, #28]
 801207e:	091b      	lsrs	r3, r3, #4
 8012080:	f003 0307 	and.w	r3, r3, #7
 8012084:	4904      	ldr	r1, [pc, #16]	@ (8012098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012086:	5ccb      	ldrb	r3, [r1, r3]
 8012088:	f003 031f 	and.w	r3, r3, #31
 801208c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012090:	4618      	mov	r0, r3
 8012092:	bd80      	pop	{r7, pc}
 8012094:	58024400 	.word	0x58024400
 8012098:	0801ec0c 	.word	0x0801ec0c

0801209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80120a0:	f7ff ffb6 	bl	8012010 <HAL_RCC_GetHCLKFreq>
 80120a4:	4602      	mov	r2, r0
 80120a6:	4b06      	ldr	r3, [pc, #24]	@ (80120c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80120a8:	69db      	ldr	r3, [r3, #28]
 80120aa:	0a1b      	lsrs	r3, r3, #8
 80120ac:	f003 0307 	and.w	r3, r3, #7
 80120b0:	4904      	ldr	r1, [pc, #16]	@ (80120c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80120b2:	5ccb      	ldrb	r3, [r1, r3]
 80120b4:	f003 031f 	and.w	r3, r3, #31
 80120b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80120bc:	4618      	mov	r0, r3
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	58024400 	.word	0x58024400
 80120c4:	0801ec0c 	.word	0x0801ec0c

080120c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80120c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120cc:	b0c6      	sub	sp, #280	@ 0x118
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80120d4:	2300      	movs	r3, #0
 80120d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80120da:	2300      	movs	r3, #0
 80120dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80120e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80120ec:	2500      	movs	r5, #0
 80120ee:	ea54 0305 	orrs.w	r3, r4, r5
 80120f2:	d049      	beq.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80120f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120fe:	d02f      	beq.n	8012160 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012100:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012104:	d828      	bhi.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012106:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801210a:	d01a      	beq.n	8012142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801210c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012110:	d822      	bhi.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012112:	2b00      	cmp	r3, #0
 8012114:	d003      	beq.n	801211e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801211a:	d007      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801211c:	e01c      	b.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801211e:	4bab      	ldr	r3, [pc, #684]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012122:	4aaa      	ldr	r2, [pc, #680]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801212a:	e01a      	b.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801212c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012130:	3308      	adds	r3, #8
 8012132:	2102      	movs	r1, #2
 8012134:	4618      	mov	r0, r3
 8012136:	f002 fa49 	bl	80145cc <RCCEx_PLL2_Config>
 801213a:	4603      	mov	r3, r0
 801213c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012140:	e00f      	b.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012146:	3328      	adds	r3, #40	@ 0x28
 8012148:	2102      	movs	r1, #2
 801214a:	4618      	mov	r0, r3
 801214c:	f002 faf0 	bl	8014730 <RCCEx_PLL3_Config>
 8012150:	4603      	mov	r3, r0
 8012152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012156:	e004      	b.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012158:	2301      	movs	r3, #1
 801215a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801215e:	e000      	b.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012166:	2b00      	cmp	r3, #0
 8012168:	d10a      	bne.n	8012180 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801216a:	4b98      	ldr	r3, [pc, #608]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801216e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012178:	4a94      	ldr	r2, [pc, #592]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801217a:	430b      	orrs	r3, r1
 801217c:	6513      	str	r3, [r2, #80]	@ 0x50
 801217e:	e003      	b.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8012194:	f04f 0900 	mov.w	r9, #0
 8012198:	ea58 0309 	orrs.w	r3, r8, r9
 801219c:	d047      	beq.n	801222e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801219e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121a4:	2b04      	cmp	r3, #4
 80121a6:	d82a      	bhi.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80121a8:	a201      	add	r2, pc, #4	@ (adr r2, 80121b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80121aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ae:	bf00      	nop
 80121b0:	080121c5 	.word	0x080121c5
 80121b4:	080121d3 	.word	0x080121d3
 80121b8:	080121e9 	.word	0x080121e9
 80121bc:	08012207 	.word	0x08012207
 80121c0:	08012207 	.word	0x08012207
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121c4:	4b81      	ldr	r3, [pc, #516]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121c8:	4a80      	ldr	r2, [pc, #512]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121d0:	e01a      	b.n	8012208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121d6:	3308      	adds	r3, #8
 80121d8:	2100      	movs	r1, #0
 80121da:	4618      	mov	r0, r3
 80121dc:	f002 f9f6 	bl	80145cc <RCCEx_PLL2_Config>
 80121e0:	4603      	mov	r3, r0
 80121e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121e6:	e00f      	b.n	8012208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80121e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121ec:	3328      	adds	r3, #40	@ 0x28
 80121ee:	2100      	movs	r1, #0
 80121f0:	4618      	mov	r0, r3
 80121f2:	f002 fa9d 	bl	8014730 <RCCEx_PLL3_Config>
 80121f6:	4603      	mov	r3, r0
 80121f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121fc:	e004      	b.n	8012208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121fe:	2301      	movs	r3, #1
 8012200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012204:	e000      	b.n	8012208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8012206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801220c:	2b00      	cmp	r3, #0
 801220e:	d10a      	bne.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012210:	4b6e      	ldr	r3, [pc, #440]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012214:	f023 0107 	bic.w	r1, r3, #7
 8012218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801221e:	4a6b      	ldr	r2, [pc, #428]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012220:	430b      	orrs	r3, r1
 8012222:	6513      	str	r3, [r2, #80]	@ 0x50
 8012224:	e003      	b.n	801222e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012226:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801222a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801222e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801223a:	f04f 0b00 	mov.w	fp, #0
 801223e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012242:	d05b      	beq.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801224c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012250:	d03b      	beq.n	80122ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8012252:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012256:	d834      	bhi.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012258:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801225c:	d037      	beq.n	80122ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 801225e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012262:	d82e      	bhi.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012264:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012268:	d033      	beq.n	80122d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801226a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801226e:	d828      	bhi.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012270:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012274:	d01a      	beq.n	80122ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8012276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801227a:	d822      	bhi.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801227c:	2b00      	cmp	r3, #0
 801227e:	d003      	beq.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8012280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012284:	d007      	beq.n	8012296 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8012286:	e01c      	b.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012288:	4b50      	ldr	r3, [pc, #320]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801228c:	4a4f      	ldr	r2, [pc, #316]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801228e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012294:	e01e      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801229a:	3308      	adds	r3, #8
 801229c:	2100      	movs	r1, #0
 801229e:	4618      	mov	r0, r3
 80122a0:	f002 f994 	bl	80145cc <RCCEx_PLL2_Config>
 80122a4:	4603      	mov	r3, r0
 80122a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80122aa:	e013      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80122ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122b0:	3328      	adds	r3, #40	@ 0x28
 80122b2:	2100      	movs	r1, #0
 80122b4:	4618      	mov	r0, r3
 80122b6:	f002 fa3b 	bl	8014730 <RCCEx_PLL3_Config>
 80122ba:	4603      	mov	r3, r0
 80122bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122c0:	e008      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80122c2:	2301      	movs	r3, #1
 80122c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122c8:	e004      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122ca:	bf00      	nop
 80122cc:	e002      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122ce:	bf00      	nop
 80122d0:	e000      	b.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d10b      	bne.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80122dc:	4b3b      	ldr	r3, [pc, #236]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122e0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80122e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122ec:	4a37      	ldr	r2, [pc, #220]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122ee:	430b      	orrs	r3, r1
 80122f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80122f2:	e003      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80122fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012304:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8012308:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801230c:	2300      	movs	r3, #0
 801230e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012312:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8012316:	460b      	mov	r3, r1
 8012318:	4313      	orrs	r3, r2
 801231a:	d05d      	beq.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801231c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012320:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012324:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012328:	d03b      	beq.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801232a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801232e:	d834      	bhi.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012330:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012334:	d037      	beq.n	80123a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801233a:	d82e      	bhi.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801233c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012340:	d033      	beq.n	80123aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8012342:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012346:	d828      	bhi.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012348:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801234c:	d01a      	beq.n	8012384 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801234e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012352:	d822      	bhi.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012354:	2b00      	cmp	r3, #0
 8012356:	d003      	beq.n	8012360 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801235c:	d007      	beq.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801235e:	e01c      	b.n	801239a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012360:	4b1a      	ldr	r3, [pc, #104]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012364:	4a19      	ldr	r2, [pc, #100]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801236a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801236c:	e01e      	b.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801236e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012372:	3308      	adds	r3, #8
 8012374:	2100      	movs	r1, #0
 8012376:	4618      	mov	r0, r3
 8012378:	f002 f928 	bl	80145cc <RCCEx_PLL2_Config>
 801237c:	4603      	mov	r3, r0
 801237e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012382:	e013      	b.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012388:	3328      	adds	r3, #40	@ 0x28
 801238a:	2100      	movs	r1, #0
 801238c:	4618      	mov	r0, r3
 801238e:	f002 f9cf 	bl	8014730 <RCCEx_PLL3_Config>
 8012392:	4603      	mov	r3, r0
 8012394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012398:	e008      	b.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801239a:	2301      	movs	r3, #1
 801239c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80123a0:	e004      	b.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80123a2:	bf00      	nop
 80123a4:	e002      	b.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80123a6:	bf00      	nop
 80123a8:	e000      	b.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80123aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80123ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10d      	bne.n	80123d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80123b4:	4b05      	ldr	r3, [pc, #20]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80123bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80123c4:	4a01      	ldr	r2, [pc, #4]	@ (80123cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123c6:	430b      	orrs	r3, r1
 80123c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80123ca:	e005      	b.n	80123d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80123cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80123d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80123e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80123e8:	2300      	movs	r3, #0
 80123ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80123ee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80123f2:	460b      	mov	r3, r1
 80123f4:	4313      	orrs	r3, r2
 80123f6:	d03a      	beq.n	801246e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80123f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123fe:	2b30      	cmp	r3, #48	@ 0x30
 8012400:	d01f      	beq.n	8012442 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8012402:	2b30      	cmp	r3, #48	@ 0x30
 8012404:	d819      	bhi.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8012406:	2b20      	cmp	r3, #32
 8012408:	d00c      	beq.n	8012424 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801240a:	2b20      	cmp	r3, #32
 801240c:	d815      	bhi.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x372>
 801240e:	2b00      	cmp	r3, #0
 8012410:	d019      	beq.n	8012446 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8012412:	2b10      	cmp	r3, #16
 8012414:	d111      	bne.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012416:	4baa      	ldr	r3, [pc, #680]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801241a:	4aa9      	ldr	r2, [pc, #676]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801241c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012422:	e011      	b.n	8012448 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012428:	3308      	adds	r3, #8
 801242a:	2102      	movs	r1, #2
 801242c:	4618      	mov	r0, r3
 801242e:	f002 f8cd 	bl	80145cc <RCCEx_PLL2_Config>
 8012432:	4603      	mov	r3, r0
 8012434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012438:	e006      	b.n	8012448 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801243a:	2301      	movs	r3, #1
 801243c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012440:	e002      	b.n	8012448 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012442:	bf00      	nop
 8012444:	e000      	b.n	8012448 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10a      	bne.n	8012466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012450:	4b9b      	ldr	r3, [pc, #620]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012454:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801245e:	4a98      	ldr	r2, [pc, #608]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012460:	430b      	orrs	r3, r1
 8012462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012464:	e003      	b.n	801246e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801246a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801246e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012476:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801247a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801247e:	2300      	movs	r3, #0
 8012480:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012484:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012488:	460b      	mov	r3, r1
 801248a:	4313      	orrs	r3, r2
 801248c:	d051      	beq.n	8012532 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801248e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012498:	d035      	beq.n	8012506 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801249a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801249e:	d82e      	bhi.n	80124fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 80124a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80124a4:	d031      	beq.n	801250a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80124a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80124aa:	d828      	bhi.n	80124fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 80124ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80124b0:	d01a      	beq.n	80124e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80124b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80124b6:	d822      	bhi.n	80124fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d003      	beq.n	80124c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80124bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124c0:	d007      	beq.n	80124d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80124c2:	e01c      	b.n	80124fe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80124c4:	4b7e      	ldr	r3, [pc, #504]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124c8:	4a7d      	ldr	r2, [pc, #500]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124d0:	e01c      	b.n	801250c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80124d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124d6:	3308      	adds	r3, #8
 80124d8:	2100      	movs	r1, #0
 80124da:	4618      	mov	r0, r3
 80124dc:	f002 f876 	bl	80145cc <RCCEx_PLL2_Config>
 80124e0:	4603      	mov	r3, r0
 80124e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124e6:	e011      	b.n	801250c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80124e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124ec:	3328      	adds	r3, #40	@ 0x28
 80124ee:	2100      	movs	r1, #0
 80124f0:	4618      	mov	r0, r3
 80124f2:	f002 f91d 	bl	8014730 <RCCEx_PLL3_Config>
 80124f6:	4603      	mov	r3, r0
 80124f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124fc:	e006      	b.n	801250c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124fe:	2301      	movs	r3, #1
 8012500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012504:	e002      	b.n	801250c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012506:	bf00      	nop
 8012508:	e000      	b.n	801250c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801250a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801250c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10a      	bne.n	801252a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012514:	4b6a      	ldr	r3, [pc, #424]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012518:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801251c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012522:	4a67      	ldr	r2, [pc, #412]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012524:	430b      	orrs	r3, r1
 8012526:	6513      	str	r3, [r2, #80]	@ 0x50
 8012528:	e003      	b.n	8012532 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801252a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801252e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801253e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012542:	2300      	movs	r3, #0
 8012544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012548:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801254c:	460b      	mov	r3, r1
 801254e:	4313      	orrs	r3, r2
 8012550:	d053      	beq.n	80125fa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801255c:	d033      	beq.n	80125c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801255e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012562:	d82c      	bhi.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012564:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012568:	d02f      	beq.n	80125ca <HAL_RCCEx_PeriphCLKConfig+0x502>
 801256a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801256e:	d826      	bhi.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012574:	d02b      	beq.n	80125ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801257a:	d820      	bhi.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801257c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012580:	d012      	beq.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8012582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012586:	d81a      	bhi.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012588:	2b00      	cmp	r3, #0
 801258a:	d022      	beq.n	80125d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012590:	d115      	bne.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012596:	3308      	adds	r3, #8
 8012598:	2101      	movs	r1, #1
 801259a:	4618      	mov	r0, r3
 801259c:	f002 f816 	bl	80145cc <RCCEx_PLL2_Config>
 80125a0:	4603      	mov	r3, r0
 80125a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80125a6:	e015      	b.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80125a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ac:	3328      	adds	r3, #40	@ 0x28
 80125ae:	2101      	movs	r1, #1
 80125b0:	4618      	mov	r0, r3
 80125b2:	f002 f8bd 	bl	8014730 <RCCEx_PLL3_Config>
 80125b6:	4603      	mov	r3, r0
 80125b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80125bc:	e00a      	b.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125c4:	e006      	b.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125c6:	bf00      	nop
 80125c8:	e004      	b.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125ca:	bf00      	nop
 80125cc:	e002      	b.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125ce:	bf00      	nop
 80125d0:	e000      	b.n	80125d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10a      	bne.n	80125f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80125dc:	4b38      	ldr	r3, [pc, #224]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80125e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125ea:	4a35      	ldr	r2, [pc, #212]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125ec:	430b      	orrs	r3, r1
 80125ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80125f0:	e003      	b.n	80125fa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80125fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012602:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012606:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801260a:	2300      	movs	r3, #0
 801260c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012610:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012614:	460b      	mov	r3, r1
 8012616:	4313      	orrs	r3, r2
 8012618:	d058      	beq.n	80126cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801261a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801261e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012626:	d033      	beq.n	8012690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801262c:	d82c      	bhi.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801262e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012632:	d02f      	beq.n	8012694 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012638:	d826      	bhi.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801263a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801263e:	d02b      	beq.n	8012698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012640:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012644:	d820      	bhi.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801264a:	d012      	beq.n	8012672 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801264c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012650:	d81a      	bhi.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012652:	2b00      	cmp	r3, #0
 8012654:	d022      	beq.n	801269c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801265a:	d115      	bne.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801265c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012660:	3308      	adds	r3, #8
 8012662:	2101      	movs	r1, #1
 8012664:	4618      	mov	r0, r3
 8012666:	f001 ffb1 	bl	80145cc <RCCEx_PLL2_Config>
 801266a:	4603      	mov	r3, r0
 801266c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012670:	e015      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012676:	3328      	adds	r3, #40	@ 0x28
 8012678:	2101      	movs	r1, #1
 801267a:	4618      	mov	r0, r3
 801267c:	f002 f858 	bl	8014730 <RCCEx_PLL3_Config>
 8012680:	4603      	mov	r3, r0
 8012682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012686:	e00a      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012688:	2301      	movs	r3, #1
 801268a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801268e:	e006      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012690:	bf00      	nop
 8012692:	e004      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012694:	bf00      	nop
 8012696:	e002      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012698:	bf00      	nop
 801269a:	e000      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801269c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801269e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10e      	bne.n	80126c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80126a6:	4b06      	ldr	r3, [pc, #24]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80126a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80126ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80126b6:	4a02      	ldr	r2, [pc, #8]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80126b8:	430b      	orrs	r3, r1
 80126ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80126bc:	e006      	b.n	80126cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80126be:	bf00      	nop
 80126c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80126cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80126d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80126dc:	2300      	movs	r3, #0
 80126de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80126e6:	460b      	mov	r3, r1
 80126e8:	4313      	orrs	r3, r2
 80126ea:	d037      	beq.n	801275c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80126ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126f6:	d00e      	beq.n	8012716 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80126f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126fc:	d816      	bhi.n	801272c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d018      	beq.n	8012734 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8012702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012706:	d111      	bne.n	801272c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012708:	4bc4      	ldr	r3, [pc, #784]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801270c:	4ac3      	ldr	r2, [pc, #780]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801270e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012714:	e00f      	b.n	8012736 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801271a:	3308      	adds	r3, #8
 801271c:	2101      	movs	r1, #1
 801271e:	4618      	mov	r0, r3
 8012720:	f001 ff54 	bl	80145cc <RCCEx_PLL2_Config>
 8012724:	4603      	mov	r3, r0
 8012726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801272a:	e004      	b.n	8012736 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801272c:	2301      	movs	r3, #1
 801272e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012732:	e000      	b.n	8012736 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801273a:	2b00      	cmp	r3, #0
 801273c:	d10a      	bne.n	8012754 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801273e:	4bb7      	ldr	r3, [pc, #732]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012742:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801274a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801274c:	4ab3      	ldr	r2, [pc, #716]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801274e:	430b      	orrs	r3, r1
 8012750:	6513      	str	r3, [r2, #80]	@ 0x50
 8012752:	e003      	b.n	801275c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801275c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012764:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012768:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801276c:	2300      	movs	r3, #0
 801276e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012772:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012776:	460b      	mov	r3, r1
 8012778:	4313      	orrs	r3, r2
 801277a:	d039      	beq.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801277c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012782:	2b03      	cmp	r3, #3
 8012784:	d81c      	bhi.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012786:	a201      	add	r2, pc, #4	@ (adr r2, 801278c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801278c:	080127c9 	.word	0x080127c9
 8012790:	0801279d 	.word	0x0801279d
 8012794:	080127ab 	.word	0x080127ab
 8012798:	080127c9 	.word	0x080127c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801279c:	4b9f      	ldr	r3, [pc, #636]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127a0:	4a9e      	ldr	r2, [pc, #632]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80127a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80127a8:	e00f      	b.n	80127ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80127aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ae:	3308      	adds	r3, #8
 80127b0:	2102      	movs	r1, #2
 80127b2:	4618      	mov	r0, r3
 80127b4:	f001 ff0a 	bl	80145cc <RCCEx_PLL2_Config>
 80127b8:	4603      	mov	r3, r0
 80127ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80127be:	e004      	b.n	80127ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80127c0:	2301      	movs	r3, #1
 80127c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127c6:	e000      	b.n	80127ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80127c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d10a      	bne.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80127d2:	4b92      	ldr	r3, [pc, #584]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127d6:	f023 0103 	bic.w	r1, r3, #3
 80127da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80127e0:	4a8e      	ldr	r2, [pc, #568]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127e2:	430b      	orrs	r3, r1
 80127e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80127e6:	e003      	b.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80127f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80127fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012800:	2300      	movs	r3, #0
 8012802:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012806:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801280a:	460b      	mov	r3, r1
 801280c:	4313      	orrs	r3, r2
 801280e:	f000 8099 	beq.w	8012944 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012812:	4b83      	ldr	r3, [pc, #524]	@ (8012a20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	4a82      	ldr	r2, [pc, #520]	@ (8012a20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801281c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801281e:	f7f6 feb9 	bl	8009594 <HAL_GetTick>
 8012822:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012826:	e00b      	b.n	8012840 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012828:	f7f6 feb4 	bl	8009594 <HAL_GetTick>
 801282c:	4602      	mov	r2, r0
 801282e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	2b64      	cmp	r3, #100	@ 0x64
 8012836:	d903      	bls.n	8012840 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012838:	2303      	movs	r3, #3
 801283a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801283e:	e005      	b.n	801284c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012840:	4b77      	ldr	r3, [pc, #476]	@ (8012a20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012848:	2b00      	cmp	r3, #0
 801284a:	d0ed      	beq.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801284c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012850:	2b00      	cmp	r3, #0
 8012852:	d173      	bne.n	801293c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012854:	4b71      	ldr	r3, [pc, #452]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012856:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801285c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012860:	4053      	eors	r3, r2
 8012862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012866:	2b00      	cmp	r3, #0
 8012868:	d015      	beq.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801286a:	4b6c      	ldr	r3, [pc, #432]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801286e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012872:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012876:	4b69      	ldr	r3, [pc, #420]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801287a:	4a68      	ldr	r2, [pc, #416]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012880:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012882:	4b66      	ldr	r3, [pc, #408]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012886:	4a65      	ldr	r2, [pc, #404]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801288c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801288e:	4a63      	ldr	r2, [pc, #396]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012894:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801289a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801289e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128a2:	d118      	bne.n	80128d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80128a4:	f7f6 fe76 	bl	8009594 <HAL_GetTick>
 80128a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80128ac:	e00d      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80128ae:	f7f6 fe71 	bl	8009594 <HAL_GetTick>
 80128b2:	4602      	mov	r2, r0
 80128b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80128b8:	1ad2      	subs	r2, r2, r3
 80128ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80128be:	429a      	cmp	r2, r3
 80128c0:	d903      	bls.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80128c2:	2303      	movs	r3, #3
 80128c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80128c8:	e005      	b.n	80128d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80128ca:	4b54      	ldr	r3, [pc, #336]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128ce:	f003 0302 	and.w	r3, r3, #2
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d0eb      	beq.n	80128ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80128d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d129      	bne.n	8012932 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80128de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80128ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128ee:	d10e      	bne.n	801290e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80128f0:	4b4a      	ldr	r3, [pc, #296]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128f2:	691b      	ldr	r3, [r3, #16]
 80128f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80128f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012900:	091a      	lsrs	r2, r3, #4
 8012902:	4b48      	ldr	r3, [pc, #288]	@ (8012a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012904:	4013      	ands	r3, r2
 8012906:	4a45      	ldr	r2, [pc, #276]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012908:	430b      	orrs	r3, r1
 801290a:	6113      	str	r3, [r2, #16]
 801290c:	e005      	b.n	801291a <HAL_RCCEx_PeriphCLKConfig+0x852>
 801290e:	4b43      	ldr	r3, [pc, #268]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012910:	691b      	ldr	r3, [r3, #16]
 8012912:	4a42      	ldr	r2, [pc, #264]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012914:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012918:	6113      	str	r3, [r2, #16]
 801291a:	4b40      	ldr	r3, [pc, #256]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801291c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801291e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801292a:	4a3c      	ldr	r2, [pc, #240]	@ (8012a1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801292c:	430b      	orrs	r3, r1
 801292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8012930:	e008      	b.n	8012944 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012936:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801293a:	e003      	b.n	8012944 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801293c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294c:	f002 0301 	and.w	r3, r2, #1
 8012950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012954:	2300      	movs	r3, #0
 8012956:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801295a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801295e:	460b      	mov	r3, r1
 8012960:	4313      	orrs	r3, r2
 8012962:	f000 808f 	beq.w	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801296a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801296c:	2b28      	cmp	r3, #40	@ 0x28
 801296e:	d871      	bhi.n	8012a54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012970:	a201      	add	r2, pc, #4	@ (adr r2, 8012978 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012976:	bf00      	nop
 8012978:	08012a5d 	.word	0x08012a5d
 801297c:	08012a55 	.word	0x08012a55
 8012980:	08012a55 	.word	0x08012a55
 8012984:	08012a55 	.word	0x08012a55
 8012988:	08012a55 	.word	0x08012a55
 801298c:	08012a55 	.word	0x08012a55
 8012990:	08012a55 	.word	0x08012a55
 8012994:	08012a55 	.word	0x08012a55
 8012998:	08012a29 	.word	0x08012a29
 801299c:	08012a55 	.word	0x08012a55
 80129a0:	08012a55 	.word	0x08012a55
 80129a4:	08012a55 	.word	0x08012a55
 80129a8:	08012a55 	.word	0x08012a55
 80129ac:	08012a55 	.word	0x08012a55
 80129b0:	08012a55 	.word	0x08012a55
 80129b4:	08012a55 	.word	0x08012a55
 80129b8:	08012a3f 	.word	0x08012a3f
 80129bc:	08012a55 	.word	0x08012a55
 80129c0:	08012a55 	.word	0x08012a55
 80129c4:	08012a55 	.word	0x08012a55
 80129c8:	08012a55 	.word	0x08012a55
 80129cc:	08012a55 	.word	0x08012a55
 80129d0:	08012a55 	.word	0x08012a55
 80129d4:	08012a55 	.word	0x08012a55
 80129d8:	08012a5d 	.word	0x08012a5d
 80129dc:	08012a55 	.word	0x08012a55
 80129e0:	08012a55 	.word	0x08012a55
 80129e4:	08012a55 	.word	0x08012a55
 80129e8:	08012a55 	.word	0x08012a55
 80129ec:	08012a55 	.word	0x08012a55
 80129f0:	08012a55 	.word	0x08012a55
 80129f4:	08012a55 	.word	0x08012a55
 80129f8:	08012a5d 	.word	0x08012a5d
 80129fc:	08012a55 	.word	0x08012a55
 8012a00:	08012a55 	.word	0x08012a55
 8012a04:	08012a55 	.word	0x08012a55
 8012a08:	08012a55 	.word	0x08012a55
 8012a0c:	08012a55 	.word	0x08012a55
 8012a10:	08012a55 	.word	0x08012a55
 8012a14:	08012a55 	.word	0x08012a55
 8012a18:	08012a5d 	.word	0x08012a5d
 8012a1c:	58024400 	.word	0x58024400
 8012a20:	58024800 	.word	0x58024800
 8012a24:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	2101      	movs	r1, #1
 8012a30:	4618      	mov	r0, r3
 8012a32:	f001 fdcb 	bl	80145cc <RCCEx_PLL2_Config>
 8012a36:	4603      	mov	r3, r0
 8012a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a3c:	e00f      	b.n	8012a5e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a42:	3328      	adds	r3, #40	@ 0x28
 8012a44:	2101      	movs	r1, #1
 8012a46:	4618      	mov	r0, r3
 8012a48:	f001 fe72 	bl	8014730 <RCCEx_PLL3_Config>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a52:	e004      	b.n	8012a5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a54:	2301      	movs	r3, #1
 8012a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a5a:	e000      	b.n	8012a5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10a      	bne.n	8012a7c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012a66:	4bbf      	ldr	r3, [pc, #764]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a6a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a74:	4abb      	ldr	r2, [pc, #748]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a76:	430b      	orrs	r3, r1
 8012a78:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a7a:	e003      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8c:	f002 0302 	and.w	r3, r2, #2
 8012a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012a94:	2300      	movs	r3, #0
 8012a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012a9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	4313      	orrs	r3, r2
 8012aa2:	d041      	beq.n	8012b28 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012aaa:	2b05      	cmp	r3, #5
 8012aac:	d824      	bhi.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012aae:	a201      	add	r2, pc, #4	@ (adr r2, 8012ab4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab4:	08012b01 	.word	0x08012b01
 8012ab8:	08012acd 	.word	0x08012acd
 8012abc:	08012ae3 	.word	0x08012ae3
 8012ac0:	08012b01 	.word	0x08012b01
 8012ac4:	08012b01 	.word	0x08012b01
 8012ac8:	08012b01 	.word	0x08012b01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ad0:	3308      	adds	r3, #8
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f001 fd79 	bl	80145cc <RCCEx_PLL2_Config>
 8012ada:	4603      	mov	r3, r0
 8012adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ae0:	e00f      	b.n	8012b02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ae6:	3328      	adds	r3, #40	@ 0x28
 8012ae8:	2101      	movs	r1, #1
 8012aea:	4618      	mov	r0, r3
 8012aec:	f001 fe20 	bl	8014730 <RCCEx_PLL3_Config>
 8012af0:	4603      	mov	r3, r0
 8012af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012af6:	e004      	b.n	8012b02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012af8:	2301      	movs	r3, #1
 8012afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012afe:	e000      	b.n	8012b02 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d10a      	bne.n	8012b20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012b0a:	4b96      	ldr	r3, [pc, #600]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b0e:	f023 0107 	bic.w	r1, r3, #7
 8012b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b18:	4a92      	ldr	r2, [pc, #584]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b1a:	430b      	orrs	r3, r1
 8012b1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8012b1e:	e003      	b.n	8012b28 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b30:	f002 0304 	and.w	r3, r2, #4
 8012b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012b3e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012b42:	460b      	mov	r3, r1
 8012b44:	4313      	orrs	r3, r2
 8012b46:	d044      	beq.n	8012bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b50:	2b05      	cmp	r3, #5
 8012b52:	d825      	bhi.n	8012ba0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012b54:	a201      	add	r2, pc, #4	@ (adr r2, 8012b5c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b5a:	bf00      	nop
 8012b5c:	08012ba9 	.word	0x08012ba9
 8012b60:	08012b75 	.word	0x08012b75
 8012b64:	08012b8b 	.word	0x08012b8b
 8012b68:	08012ba9 	.word	0x08012ba9
 8012b6c:	08012ba9 	.word	0x08012ba9
 8012b70:	08012ba9 	.word	0x08012ba9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b78:	3308      	adds	r3, #8
 8012b7a:	2101      	movs	r1, #1
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f001 fd25 	bl	80145cc <RCCEx_PLL2_Config>
 8012b82:	4603      	mov	r3, r0
 8012b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b88:	e00f      	b.n	8012baa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b8e:	3328      	adds	r3, #40	@ 0x28
 8012b90:	2101      	movs	r1, #1
 8012b92:	4618      	mov	r0, r3
 8012b94:	f001 fdcc 	bl	8014730 <RCCEx_PLL3_Config>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b9e:	e004      	b.n	8012baa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ba6:	e000      	b.n	8012baa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012baa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d10b      	bne.n	8012bca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012bb6:	f023 0107 	bic.w	r1, r3, #7
 8012bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bc2:	4a68      	ldr	r2, [pc, #416]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012bc4:	430b      	orrs	r3, r1
 8012bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012bc8:	e003      	b.n	8012bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bda:	f002 0320 	and.w	r3, r2, #32
 8012bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012be2:	2300      	movs	r3, #0
 8012be4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012be8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012bec:	460b      	mov	r3, r1
 8012bee:	4313      	orrs	r3, r2
 8012bf0:	d055      	beq.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012bfe:	d033      	beq.n	8012c68 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012c04:	d82c      	bhi.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c0a:	d02f      	beq.n	8012c6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c10:	d826      	bhi.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012c16:	d02b      	beq.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012c18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012c1c:	d820      	bhi.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c22:	d012      	beq.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c28:	d81a      	bhi.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d022      	beq.n	8012c74 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c32:	d115      	bne.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c38:	3308      	adds	r3, #8
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f001 fcc5 	bl	80145cc <RCCEx_PLL2_Config>
 8012c42:	4603      	mov	r3, r0
 8012c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c48:	e015      	b.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c4e:	3328      	adds	r3, #40	@ 0x28
 8012c50:	2102      	movs	r1, #2
 8012c52:	4618      	mov	r0, r3
 8012c54:	f001 fd6c 	bl	8014730 <RCCEx_PLL3_Config>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c5e:	e00a      	b.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c66:	e006      	b.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c68:	bf00      	nop
 8012c6a:	e004      	b.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c6c:	bf00      	nop
 8012c6e:	e002      	b.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c70:	bf00      	nop
 8012c72:	e000      	b.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d10b      	bne.n	8012c96 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012c7e:	4b39      	ldr	r3, [pc, #228]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c8e:	4a35      	ldr	r2, [pc, #212]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c90:	430b      	orrs	r3, r1
 8012c92:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c94:	e003      	b.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012caa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012cae:	2300      	movs	r3, #0
 8012cb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012cb4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012cb8:	460b      	mov	r3, r1
 8012cba:	4313      	orrs	r3, r2
 8012cbc:	d058      	beq.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012cc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012cca:	d033      	beq.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012ccc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012cd0:	d82c      	bhi.n	8012d2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cd6:	d02f      	beq.n	8012d38 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cdc:	d826      	bhi.n	8012d2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012ce2:	d02b      	beq.n	8012d3c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012ce4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012ce8:	d820      	bhi.n	8012d2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cee:	d012      	beq.n	8012d16 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cf4:	d81a      	bhi.n	8012d2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d022      	beq.n	8012d40 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012cfe:	d115      	bne.n	8012d2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d04:	3308      	adds	r3, #8
 8012d06:	2100      	movs	r1, #0
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f001 fc5f 	bl	80145cc <RCCEx_PLL2_Config>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012d14:	e015      	b.n	8012d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d1a:	3328      	adds	r3, #40	@ 0x28
 8012d1c:	2102      	movs	r1, #2
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f001 fd06 	bl	8014730 <RCCEx_PLL3_Config>
 8012d24:	4603      	mov	r3, r0
 8012d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012d2a:	e00a      	b.n	8012d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d32:	e006      	b.n	8012d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d34:	bf00      	nop
 8012d36:	e004      	b.n	8012d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d38:	bf00      	nop
 8012d3a:	e002      	b.n	8012d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d3c:	bf00      	nop
 8012d3e:	e000      	b.n	8012d42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d10e      	bne.n	8012d68 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012d4a:	4b06      	ldr	r3, [pc, #24]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012d5a:	4a02      	ldr	r2, [pc, #8]	@ (8012d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d5c:	430b      	orrs	r3, r1
 8012d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d60:	e006      	b.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012d62:	bf00      	nop
 8012d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012d80:	2300      	movs	r3, #0
 8012d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012d86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	d055      	beq.n	8012e3c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d9c:	d033      	beq.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012d9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012da2:	d82c      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012da8:	d02f      	beq.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012dae:	d826      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012db0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012db4:	d02b      	beq.n	8012e0e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012db6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012dba:	d820      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012dbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012dc0:	d012      	beq.n	8012de8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012dc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012dc6:	d81a      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d022      	beq.n	8012e12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012dd0:	d115      	bne.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dd6:	3308      	adds	r3, #8
 8012dd8:	2100      	movs	r1, #0
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f001 fbf6 	bl	80145cc <RCCEx_PLL2_Config>
 8012de0:	4603      	mov	r3, r0
 8012de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012de6:	e015      	b.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dec:	3328      	adds	r3, #40	@ 0x28
 8012dee:	2102      	movs	r1, #2
 8012df0:	4618      	mov	r0, r3
 8012df2:	f001 fc9d 	bl	8014730 <RCCEx_PLL3_Config>
 8012df6:	4603      	mov	r3, r0
 8012df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012dfc:	e00a      	b.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012e04:	e006      	b.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012e06:	bf00      	nop
 8012e08:	e004      	b.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012e0a:	bf00      	nop
 8012e0c:	e002      	b.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012e0e:	bf00      	nop
 8012e10:	e000      	b.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d10b      	bne.n	8012e34 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012e1c:	4ba0      	ldr	r3, [pc, #640]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012e2c:	4a9c      	ldr	r2, [pc, #624]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e2e:	430b      	orrs	r3, r1
 8012e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8012e32:	e003      	b.n	8012e3c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e44:	f002 0308 	and.w	r3, r2, #8
 8012e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012e52:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012e56:	460b      	mov	r3, r1
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	d01e      	beq.n	8012e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e68:	d10c      	bne.n	8012e84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e6e:	3328      	adds	r3, #40	@ 0x28
 8012e70:	2102      	movs	r1, #2
 8012e72:	4618      	mov	r0, r3
 8012e74:	f001 fc5c 	bl	8014730 <RCCEx_PLL3_Config>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d002      	beq.n	8012e84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012e84:	4b86      	ldr	r3, [pc, #536]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e94:	4a82      	ldr	r2, [pc, #520]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e96:	430b      	orrs	r3, r1
 8012e98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea2:	f002 0310 	and.w	r3, r2, #16
 8012ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012eaa:	2300      	movs	r3, #0
 8012eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012eb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	4313      	orrs	r3, r2
 8012eb8:	d01e      	beq.n	8012ef8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ec6:	d10c      	bne.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ecc:	3328      	adds	r3, #40	@ 0x28
 8012ece:	2102      	movs	r1, #2
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f001 fc2d 	bl	8014730 <RCCEx_PLL3_Config>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d002      	beq.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012edc:	2301      	movs	r3, #1
 8012ede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ee6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ef2:	4a6b      	ldr	r2, [pc, #428]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ef4:	430b      	orrs	r3, r1
 8012ef6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012f04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012f06:	2300      	movs	r3, #0
 8012f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012f0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012f0e:	460b      	mov	r3, r1
 8012f10:	4313      	orrs	r3, r2
 8012f12:	d03e      	beq.n	8012f92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f20:	d022      	beq.n	8012f68 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f26:	d81b      	bhi.n	8012f60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d003      	beq.n	8012f34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f30:	d00b      	beq.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012f32:	e015      	b.n	8012f60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f38:	3308      	adds	r3, #8
 8012f3a:	2100      	movs	r1, #0
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f001 fb45 	bl	80145cc <RCCEx_PLL2_Config>
 8012f42:	4603      	mov	r3, r0
 8012f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f48:	e00f      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f4e:	3328      	adds	r3, #40	@ 0x28
 8012f50:	2102      	movs	r1, #2
 8012f52:	4618      	mov	r0, r3
 8012f54:	f001 fbec 	bl	8014730 <RCCEx_PLL3_Config>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f5e:	e004      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f60:	2301      	movs	r3, #1
 8012f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f66:	e000      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d10b      	bne.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012f72:	4b4b      	ldr	r3, [pc, #300]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f82:	4a47      	ldr	r2, [pc, #284]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f84:	430b      	orrs	r3, r1
 8012f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8012f88:	e003      	b.n	8012f92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012f9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	677b      	str	r3, [r7, #116]	@ 0x74
 8012fa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012fa8:	460b      	mov	r3, r1
 8012faa:	4313      	orrs	r3, r2
 8012fac:	d03b      	beq.n	8013026 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012fba:	d01f      	beq.n	8012ffc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012fc0:	d818      	bhi.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fc6:	d003      	beq.n	8012fd0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012fcc:	d007      	beq.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012fce:	e011      	b.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fd0:	4b33      	ldr	r3, [pc, #204]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fd4:	4a32      	ldr	r2, [pc, #200]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fdc:	e00f      	b.n	8012ffe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fe2:	3328      	adds	r3, #40	@ 0x28
 8012fe4:	2101      	movs	r1, #1
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f001 fba2 	bl	8014730 <RCCEx_PLL3_Config>
 8012fec:	4603      	mov	r3, r0
 8012fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012ff2:	e004      	b.n	8012ffe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ffa:	e000      	b.n	8012ffe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10b      	bne.n	801301e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013006:	4b26      	ldr	r3, [pc, #152]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801300a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801300e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013016:	4a22      	ldr	r2, [pc, #136]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013018:	430b      	orrs	r3, r1
 801301a:	6553      	str	r3, [r2, #84]	@ 0x54
 801301c:	e003      	b.n	8013026 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801301e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013022:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8013032:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013034:	2300      	movs	r3, #0
 8013036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013038:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801303c:	460b      	mov	r3, r1
 801303e:	4313      	orrs	r3, r2
 8013040:	d034      	beq.n	80130ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8013042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013048:	2b00      	cmp	r3, #0
 801304a:	d003      	beq.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801304c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013050:	d007      	beq.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8013052:	e011      	b.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013054:	4b12      	ldr	r3, [pc, #72]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013058:	4a11      	ldr	r2, [pc, #68]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801305a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801305e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013060:	e00e      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013066:	3308      	adds	r3, #8
 8013068:	2102      	movs	r1, #2
 801306a:	4618      	mov	r0, r3
 801306c:	f001 faae 	bl	80145cc <RCCEx_PLL2_Config>
 8013070:	4603      	mov	r3, r0
 8013072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013076:	e003      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8013078:	2301      	movs	r3, #1
 801307a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801307e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013084:	2b00      	cmp	r3, #0
 8013086:	d10d      	bne.n	80130a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013088:	4b05      	ldr	r3, [pc, #20]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801308a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801308c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013096:	4a02      	ldr	r2, [pc, #8]	@ (80130a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013098:	430b      	orrs	r3, r1
 801309a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801309c:	e006      	b.n	80130ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801309e:	bf00      	nop
 80130a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80130a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80130ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80130b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80130ba:	2300      	movs	r3, #0
 80130bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80130be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80130c2:	460b      	mov	r3, r1
 80130c4:	4313      	orrs	r3, r2
 80130c6:	d00c      	beq.n	80130e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80130c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130cc:	3328      	adds	r3, #40	@ 0x28
 80130ce:	2102      	movs	r1, #2
 80130d0:	4618      	mov	r0, r3
 80130d2:	f001 fb2d 	bl	8014730 <RCCEx_PLL3_Config>
 80130d6:	4603      	mov	r3, r0
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d002      	beq.n	80130e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80130dc:	2301      	movs	r3, #1
 80130de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80130e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80130ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80130f0:	2300      	movs	r3, #0
 80130f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80130f8:	460b      	mov	r3, r1
 80130fa:	4313      	orrs	r3, r2
 80130fc:	d036      	beq.n	801316c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80130fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013108:	d018      	beq.n	801313c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801310a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801310e:	d811      	bhi.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013114:	d014      	beq.n	8013140 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8013116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801311a:	d80b      	bhi.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801311c:	2b00      	cmp	r3, #0
 801311e:	d011      	beq.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8013120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013124:	d106      	bne.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013126:	4bb7      	ldr	r3, [pc, #732]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801312a:	4ab6      	ldr	r2, [pc, #728]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801312c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013132:	e008      	b.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013134:	2301      	movs	r3, #1
 8013136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801313a:	e004      	b.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801313c:	bf00      	nop
 801313e:	e002      	b.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013140:	bf00      	nop
 8013142:	e000      	b.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801314a:	2b00      	cmp	r3, #0
 801314c:	d10a      	bne.n	8013164 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801314e:	4bad      	ldr	r3, [pc, #692]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013152:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801315a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801315c:	4aa9      	ldr	r2, [pc, #676]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801315e:	430b      	orrs	r3, r1
 8013160:	6553      	str	r3, [r2, #84]	@ 0x54
 8013162:	e003      	b.n	801316c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013174:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013178:	653b      	str	r3, [r7, #80]	@ 0x50
 801317a:	2300      	movs	r3, #0
 801317c:	657b      	str	r3, [r7, #84]	@ 0x54
 801317e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8013182:	460b      	mov	r3, r1
 8013184:	4313      	orrs	r3, r2
 8013186:	d009      	beq.n	801319c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013188:	4b9e      	ldr	r3, [pc, #632]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801318c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013196:	4a9b      	ldr	r2, [pc, #620]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013198:	430b      	orrs	r3, r1
 801319a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80131a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80131aa:	2300      	movs	r3, #0
 80131ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80131ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80131b2:	460b      	mov	r3, r1
 80131b4:	4313      	orrs	r3, r2
 80131b6:	d009      	beq.n	80131cc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80131b8:	4b92      	ldr	r3, [pc, #584]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131bc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80131c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131c6:	4a8f      	ldr	r2, [pc, #572]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131c8:	430b      	orrs	r3, r1
 80131ca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80131cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80131d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80131da:	2300      	movs	r3, #0
 80131dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80131de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80131e2:	460b      	mov	r3, r1
 80131e4:	4313      	orrs	r3, r2
 80131e6:	d00e      	beq.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80131e8:	4b86      	ldr	r3, [pc, #536]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ea:	691b      	ldr	r3, [r3, #16]
 80131ec:	4a85      	ldr	r2, [pc, #532]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80131f2:	6113      	str	r3, [r2, #16]
 80131f4:	4b83      	ldr	r3, [pc, #524]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131f6:	6919      	ldr	r1, [r3, #16]
 80131f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8013200:	4a80      	ldr	r2, [pc, #512]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013202:	430b      	orrs	r3, r1
 8013204:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8013212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013214:	2300      	movs	r3, #0
 8013216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013218:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801321c:	460b      	mov	r3, r1
 801321e:	4313      	orrs	r3, r2
 8013220:	d009      	beq.n	8013236 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013222:	4b78      	ldr	r3, [pc, #480]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013226:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801322a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013230:	4a74      	ldr	r2, [pc, #464]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013232:	430b      	orrs	r3, r1
 8013234:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8013242:	633b      	str	r3, [r7, #48]	@ 0x30
 8013244:	2300      	movs	r3, #0
 8013246:	637b      	str	r3, [r7, #52]	@ 0x34
 8013248:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801324c:	460b      	mov	r3, r1
 801324e:	4313      	orrs	r3, r2
 8013250:	d00a      	beq.n	8013268 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013252:	4b6c      	ldr	r3, [pc, #432]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013256:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801325a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013262:	4a68      	ldr	r2, [pc, #416]	@ (8013404 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013264:	430b      	orrs	r3, r1
 8013266:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013270:	2100      	movs	r1, #0
 8013272:	62b9      	str	r1, [r7, #40]	@ 0x28
 8013274:	f003 0301 	and.w	r3, r3, #1
 8013278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801327a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801327e:	460b      	mov	r3, r1
 8013280:	4313      	orrs	r3, r2
 8013282:	d011      	beq.n	80132a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013288:	3308      	adds	r3, #8
 801328a:	2100      	movs	r1, #0
 801328c:	4618      	mov	r0, r3
 801328e:	f001 f99d 	bl	80145cc <RCCEx_PLL2_Config>
 8013292:	4603      	mov	r3, r0
 8013294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801329c:	2b00      	cmp	r3, #0
 801329e:	d003      	beq.n	80132a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80132a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	2100      	movs	r1, #0
 80132b2:	6239      	str	r1, [r7, #32]
 80132b4:	f003 0302 	and.w	r3, r3, #2
 80132b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80132ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80132be:	460b      	mov	r3, r1
 80132c0:	4313      	orrs	r3, r2
 80132c2:	d011      	beq.n	80132e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80132c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132c8:	3308      	adds	r3, #8
 80132ca:	2101      	movs	r1, #1
 80132cc:	4618      	mov	r0, r3
 80132ce:	f001 f97d 	bl	80145cc <RCCEx_PLL2_Config>
 80132d2:	4603      	mov	r3, r0
 80132d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d003      	beq.n	80132e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80132e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f0:	2100      	movs	r1, #0
 80132f2:	61b9      	str	r1, [r7, #24]
 80132f4:	f003 0304 	and.w	r3, r3, #4
 80132f8:	61fb      	str	r3, [r7, #28]
 80132fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80132fe:	460b      	mov	r3, r1
 8013300:	4313      	orrs	r3, r2
 8013302:	d011      	beq.n	8013328 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013308:	3308      	adds	r3, #8
 801330a:	2102      	movs	r1, #2
 801330c:	4618      	mov	r0, r3
 801330e:	f001 f95d 	bl	80145cc <RCCEx_PLL2_Config>
 8013312:	4603      	mov	r3, r0
 8013314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801331c:	2b00      	cmp	r3, #0
 801331e:	d003      	beq.n	8013328 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013330:	2100      	movs	r1, #0
 8013332:	6139      	str	r1, [r7, #16]
 8013334:	f003 0308 	and.w	r3, r3, #8
 8013338:	617b      	str	r3, [r7, #20]
 801333a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801333e:	460b      	mov	r3, r1
 8013340:	4313      	orrs	r3, r2
 8013342:	d011      	beq.n	8013368 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013348:	3328      	adds	r3, #40	@ 0x28
 801334a:	2100      	movs	r1, #0
 801334c:	4618      	mov	r0, r3
 801334e:	f001 f9ef 	bl	8014730 <RCCEx_PLL3_Config>
 8013352:	4603      	mov	r3, r0
 8013354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8013358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801335c:	2b00      	cmp	r3, #0
 801335e:	d003      	beq.n	8013368 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013370:	2100      	movs	r1, #0
 8013372:	60b9      	str	r1, [r7, #8]
 8013374:	f003 0310 	and.w	r3, r3, #16
 8013378:	60fb      	str	r3, [r7, #12]
 801337a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801337e:	460b      	mov	r3, r1
 8013380:	4313      	orrs	r3, r2
 8013382:	d011      	beq.n	80133a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013388:	3328      	adds	r3, #40	@ 0x28
 801338a:	2101      	movs	r1, #1
 801338c:	4618      	mov	r0, r3
 801338e:	f001 f9cf 	bl	8014730 <RCCEx_PLL3_Config>
 8013392:	4603      	mov	r3, r0
 8013394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801339c:	2b00      	cmp	r3, #0
 801339e:	d003      	beq.n	80133a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80133a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b0:	2100      	movs	r1, #0
 80133b2:	6039      	str	r1, [r7, #0]
 80133b4:	f003 0320 	and.w	r3, r3, #32
 80133b8:	607b      	str	r3, [r7, #4]
 80133ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80133be:	460b      	mov	r3, r1
 80133c0:	4313      	orrs	r3, r2
 80133c2:	d011      	beq.n	80133e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80133c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133c8:	3328      	adds	r3, #40	@ 0x28
 80133ca:	2102      	movs	r1, #2
 80133cc:	4618      	mov	r0, r3
 80133ce:	f001 f9af 	bl	8014730 <RCCEx_PLL3_Config>
 80133d2:	4603      	mov	r3, r0
 80133d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80133d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d003      	beq.n	80133e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80133e8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d101      	bne.n	80133f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80133f0:	2300      	movs	r3, #0
 80133f2:	e000      	b.n	80133f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80133f4:	2301      	movs	r3, #1
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80133fc:	46bd      	mov	sp, r7
 80133fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013402:	bf00      	nop
 8013404:	58024400 	.word	0x58024400

08013408 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b090      	sub	sp, #64	@ 0x40
 801340c:	af00      	add	r7, sp, #0
 801340e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013416:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801341a:	430b      	orrs	r3, r1
 801341c:	f040 8094 	bne.w	8013548 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013420:	4b9b      	ldr	r3, [pc, #620]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013424:	f003 0307 	and.w	r3, r3, #7
 8013428:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801342c:	2b04      	cmp	r3, #4
 801342e:	f200 8087 	bhi.w	8013540 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013432:	a201      	add	r2, pc, #4	@ (adr r2, 8013438 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013438:	0801344d 	.word	0x0801344d
 801343c:	08013475 	.word	0x08013475
 8013440:	0801349d 	.word	0x0801349d
 8013444:	08013539 	.word	0x08013539
 8013448:	080134c5 	.word	0x080134c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801344c:	4b90      	ldr	r3, [pc, #576]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013458:	d108      	bne.n	801346c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801345a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801345e:	4618      	mov	r0, r3
 8013460:	f000 ff62 	bl	8014328 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013468:	f000 bc93 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801346c:	2300      	movs	r3, #0
 801346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013470:	f000 bc8f 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013474:	4b86      	ldr	r3, [pc, #536]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801347c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013480:	d108      	bne.n	8013494 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013482:	f107 0318 	add.w	r3, r7, #24
 8013486:	4618      	mov	r0, r3
 8013488:	f000 fca6 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013490:	f000 bc7f 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013498:	f000 bc7b 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801349c:	4b7c      	ldr	r3, [pc, #496]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80134a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134a8:	d108      	bne.n	80134bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134aa:	f107 030c 	add.w	r3, r7, #12
 80134ae:	4618      	mov	r0, r3
 80134b0:	f000 fde6 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134b8:	f000 bc6b 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134bc:	2300      	movs	r3, #0
 80134be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134c0:	f000 bc67 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80134c4:	4b72      	ldr	r3, [pc, #456]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80134cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80134ce:	4b70      	ldr	r3, [pc, #448]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f003 0304 	and.w	r3, r3, #4
 80134d6:	2b04      	cmp	r3, #4
 80134d8:	d10c      	bne.n	80134f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80134da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d109      	bne.n	80134f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80134e0:	4b6b      	ldr	r3, [pc, #428]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	08db      	lsrs	r3, r3, #3
 80134e6:	f003 0303 	and.w	r3, r3, #3
 80134ea:	4a6a      	ldr	r2, [pc, #424]	@ (8013694 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80134ec:	fa22 f303 	lsr.w	r3, r2, r3
 80134f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134f2:	e01f      	b.n	8013534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80134f4:	4b66      	ldr	r3, [pc, #408]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80134fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013500:	d106      	bne.n	8013510 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8013502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013508:	d102      	bne.n	8013510 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801350a:	4b63      	ldr	r3, [pc, #396]	@ (8013698 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801350e:	e011      	b.n	8013534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013510:	4b5f      	ldr	r3, [pc, #380]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801351c:	d106      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013524:	d102      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013526:	4b5d      	ldr	r3, [pc, #372]	@ (801369c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801352a:	e003      	b.n	8013534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801352c:	2300      	movs	r3, #0
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013530:	f000 bc2f 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013534:	f000 bc2d 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013538:	4b59      	ldr	r3, [pc, #356]	@ (80136a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801353c:	f000 bc29 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013540:	2300      	movs	r3, #0
 8013542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013544:	f000 bc25 	b.w	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013548:	e9d7 2300 	ldrd	r2, r3, [r7]
 801354c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013550:	430b      	orrs	r3, r1
 8013552:	f040 80a7 	bne.w	80136a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013556:	4b4e      	ldr	r3, [pc, #312]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801355a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801355e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013562:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013566:	d054      	beq.n	8013612 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801356a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801356e:	f200 808b 	bhi.w	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013574:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013578:	f000 8083 	beq.w	8013682 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801357e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013582:	f200 8081 	bhi.w	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801358c:	d02f      	beq.n	80135ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013594:	d878      	bhi.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013598:	2b00      	cmp	r3, #0
 801359a:	d004      	beq.n	80135a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801359e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80135a2:	d012      	beq.n	80135ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80135a4:	e070      	b.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80135a6:	4b3a      	ldr	r3, [pc, #232]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80135ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80135b2:	d107      	bne.n	80135c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80135b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80135b8:	4618      	mov	r0, r3
 80135ba:	f000 feb5 	bl	8014328 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80135be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135c2:	e3e6      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135c4:	2300      	movs	r3, #0
 80135c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135c8:	e3e3      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80135ca:	4b31      	ldr	r3, [pc, #196]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80135d6:	d107      	bne.n	80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135d8:	f107 0318 	add.w	r3, r7, #24
 80135dc:	4618      	mov	r0, r3
 80135de:	f000 fbfb 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135e6:	e3d4      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135e8:	2300      	movs	r3, #0
 80135ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135ec:	e3d1      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80135ee:	4b28      	ldr	r3, [pc, #160]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80135f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135fa:	d107      	bne.n	801360c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80135fc:	f107 030c 	add.w	r3, r7, #12
 8013600:	4618      	mov	r0, r3
 8013602:	f000 fd3d 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801360a:	e3c2      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013610:	e3bf      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013612:	4b1f      	ldr	r3, [pc, #124]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013616:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801361a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801361c:	4b1c      	ldr	r3, [pc, #112]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f003 0304 	and.w	r3, r3, #4
 8013624:	2b04      	cmp	r3, #4
 8013626:	d10c      	bne.n	8013642 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801362a:	2b00      	cmp	r3, #0
 801362c:	d109      	bne.n	8013642 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801362e:	4b18      	ldr	r3, [pc, #96]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	08db      	lsrs	r3, r3, #3
 8013634:	f003 0303 	and.w	r3, r3, #3
 8013638:	4a16      	ldr	r2, [pc, #88]	@ (8013694 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801363a:	fa22 f303 	lsr.w	r3, r2, r3
 801363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013640:	e01e      	b.n	8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013642:	4b13      	ldr	r3, [pc, #76]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801364a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801364e:	d106      	bne.n	801365e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013656:	d102      	bne.n	801365e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013658:	4b0f      	ldr	r3, [pc, #60]	@ (8013698 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801365c:	e010      	b.n	8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801365e:	4b0c      	ldr	r3, [pc, #48]	@ (8013690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801366a:	d106      	bne.n	801367a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801366e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013672:	d102      	bne.n	801367a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013674:	4b09      	ldr	r3, [pc, #36]	@ (801369c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013678:	e002      	b.n	8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801367a:	2300      	movs	r3, #0
 801367c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801367e:	e388      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013680:	e387      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013682:	4b07      	ldr	r3, [pc, #28]	@ (80136a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013686:	e384      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801368c:	e381      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801368e:	bf00      	nop
 8013690:	58024400 	.word	0x58024400
 8013694:	03d09000 	.word	0x03d09000
 8013698:	003d0900 	.word	0x003d0900
 801369c:	016e3600 	.word	0x016e3600
 80136a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80136a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136a8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80136ac:	430b      	orrs	r3, r1
 80136ae:	f040 809c 	bne.w	80137ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80136b2:	4b9e      	ldr	r3, [pc, #632]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136b6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80136ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80136bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80136c2:	d054      	beq.n	801376e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80136c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80136ca:	f200 808b 	bhi.w	80137e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136d4:	f000 8083 	beq.w	80137de <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80136d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136de:	f200 8081 	bhi.w	80137e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136e8:	d02f      	beq.n	801374a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80136ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136f0:	d878      	bhi.n	80137e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d004      	beq.n	8013702 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80136f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80136fe:	d012      	beq.n	8013726 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8013700:	e070      	b.n	80137e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013702:	4b8a      	ldr	r3, [pc, #552]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801370a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801370e:	d107      	bne.n	8013720 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013714:	4618      	mov	r0, r3
 8013716:	f000 fe07 	bl	8014328 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801371e:	e338      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013720:	2300      	movs	r3, #0
 8013722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013724:	e335      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013726:	4b81      	ldr	r3, [pc, #516]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801372e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013732:	d107      	bne.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013734:	f107 0318 	add.w	r3, r7, #24
 8013738:	4618      	mov	r0, r3
 801373a:	f000 fb4d 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013742:	e326      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013744:	2300      	movs	r3, #0
 8013746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013748:	e323      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801374a:	4b78      	ldr	r3, [pc, #480]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013756:	d107      	bne.n	8013768 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013758:	f107 030c 	add.w	r3, r7, #12
 801375c:	4618      	mov	r0, r3
 801375e:	f000 fc8f 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013766:	e314      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013768:	2300      	movs	r3, #0
 801376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801376c:	e311      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801376e:	4b6f      	ldr	r3, [pc, #444]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013772:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013776:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013778:	4b6c      	ldr	r3, [pc, #432]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	f003 0304 	and.w	r3, r3, #4
 8013780:	2b04      	cmp	r3, #4
 8013782:	d10c      	bne.n	801379e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013786:	2b00      	cmp	r3, #0
 8013788:	d109      	bne.n	801379e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801378a:	4b68      	ldr	r3, [pc, #416]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	08db      	lsrs	r3, r3, #3
 8013790:	f003 0303 	and.w	r3, r3, #3
 8013794:	4a66      	ldr	r2, [pc, #408]	@ (8013930 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013796:	fa22 f303 	lsr.w	r3, r2, r3
 801379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801379c:	e01e      	b.n	80137dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801379e:	4b63      	ldr	r3, [pc, #396]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80137a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80137aa:	d106      	bne.n	80137ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80137ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137b2:	d102      	bne.n	80137ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80137b4:	4b5f      	ldr	r3, [pc, #380]	@ (8013934 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80137b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137b8:	e010      	b.n	80137dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80137ba:	4b5c      	ldr	r3, [pc, #368]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80137c6:	d106      	bne.n	80137d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80137c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137ce:	d102      	bne.n	80137d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80137d0:	4b59      	ldr	r3, [pc, #356]	@ (8013938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80137d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137d4:	e002      	b.n	80137dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80137da:	e2da      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137dc:	e2d9      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80137de:	4b57      	ldr	r3, [pc, #348]	@ (801393c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80137e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137e2:	e2d6      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137e8:	e2d3      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80137ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137ee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80137f2:	430b      	orrs	r3, r1
 80137f4:	f040 80a7 	bne.w	8013946 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80137f8:	4b4c      	ldr	r3, [pc, #304]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013800:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013808:	d055      	beq.n	80138b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013810:	f200 8096 	bhi.w	8013940 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013816:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801381a:	f000 8084 	beq.w	8013926 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013820:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013824:	f200 808c 	bhi.w	8013940 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801382a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801382e:	d030      	beq.n	8013892 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013836:	f200 8083 	bhi.w	8013940 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801383c:	2b00      	cmp	r3, #0
 801383e:	d004      	beq.n	801384a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013846:	d012      	beq.n	801386e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013848:	e07a      	b.n	8013940 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801384a:	4b38      	ldr	r3, [pc, #224]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013856:	d107      	bne.n	8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801385c:	4618      	mov	r0, r3
 801385e:	f000 fd63 	bl	8014328 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013866:	e294      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013868:	2300      	movs	r3, #0
 801386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801386c:	e291      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801386e:	4b2f      	ldr	r3, [pc, #188]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801387a:	d107      	bne.n	801388c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801387c:	f107 0318 	add.w	r3, r7, #24
 8013880:	4618      	mov	r0, r3
 8013882:	f000 faa9 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801388a:	e282      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801388c:	2300      	movs	r3, #0
 801388e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013890:	e27f      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013892:	4b26      	ldr	r3, [pc, #152]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801389a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801389e:	d107      	bne.n	80138b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138a0:	f107 030c 	add.w	r3, r7, #12
 80138a4:	4618      	mov	r0, r3
 80138a6:	f000 fbeb 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138ae:	e270      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80138b0:	2300      	movs	r3, #0
 80138b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138b4:	e26d      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80138b6:	4b1d      	ldr	r3, [pc, #116]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80138be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80138c0:	4b1a      	ldr	r3, [pc, #104]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f003 0304 	and.w	r3, r3, #4
 80138c8:	2b04      	cmp	r3, #4
 80138ca:	d10c      	bne.n	80138e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80138cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d109      	bne.n	80138e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138d2:	4b16      	ldr	r3, [pc, #88]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	08db      	lsrs	r3, r3, #3
 80138d8:	f003 0303 	and.w	r3, r3, #3
 80138dc:	4a14      	ldr	r2, [pc, #80]	@ (8013930 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80138de:	fa22 f303 	lsr.w	r3, r2, r3
 80138e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138e4:	e01e      	b.n	8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80138e6:	4b11      	ldr	r3, [pc, #68]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80138f2:	d106      	bne.n	8013902 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80138f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138fa:	d102      	bne.n	8013902 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80138fc:	4b0d      	ldr	r3, [pc, #52]	@ (8013934 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80138fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013900:	e010      	b.n	8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013902:	4b0a      	ldr	r3, [pc, #40]	@ (801392c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801390a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801390e:	d106      	bne.n	801391e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013916:	d102      	bne.n	801391e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013918:	4b07      	ldr	r3, [pc, #28]	@ (8013938 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801391c:	e002      	b.n	8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801391e:	2300      	movs	r3, #0
 8013920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013922:	e236      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013924:	e235      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013926:	4b05      	ldr	r3, [pc, #20]	@ (801393c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801392a:	e232      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801392c:	58024400 	.word	0x58024400
 8013930:	03d09000 	.word	0x03d09000
 8013934:	003d0900 	.word	0x003d0900
 8013938:	016e3600 	.word	0x016e3600
 801393c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013940:	2300      	movs	r3, #0
 8013942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013944:	e225      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013946:	e9d7 2300 	ldrd	r2, r3, [r7]
 801394a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801394e:	430b      	orrs	r3, r1
 8013950:	f040 8085 	bne.w	8013a5e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013954:	4b9c      	ldr	r3, [pc, #624]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013958:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801395c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013964:	d06b      	beq.n	8013a3e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801396c:	d874      	bhi.n	8013a58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013970:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013974:	d056      	beq.n	8013a24 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013978:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801397c:	d86c      	bhi.n	8013a58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013980:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013984:	d03b      	beq.n	80139fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801398c:	d864      	bhi.n	8013a58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013994:	d021      	beq.n	80139da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801399c:	d85c      	bhi.n	8013a58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d004      	beq.n	80139ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80139a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139aa:	d004      	beq.n	80139b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80139ac:	e054      	b.n	8013a58 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80139ae:	f7fe fb5f 	bl	8012070 <HAL_RCC_GetPCLK1Freq>
 80139b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80139b4:	e1ed      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80139b6:	4b84      	ldr	r3, [pc, #528]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80139be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139c2:	d107      	bne.n	80139d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139c4:	f107 0318 	add.w	r3, r7, #24
 80139c8:	4618      	mov	r0, r3
 80139ca:	f000 fa05 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139d2:	e1de      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139d4:	2300      	movs	r3, #0
 80139d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139d8:	e1db      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80139da:	4b7b      	ldr	r3, [pc, #492]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139e6:	d107      	bne.n	80139f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139e8:	f107 030c 	add.w	r3, r7, #12
 80139ec:	4618      	mov	r0, r3
 80139ee:	f000 fb47 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139f6:	e1cc      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139f8:	2300      	movs	r3, #0
 80139fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139fc:	e1c9      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80139fe:	4b72      	ldr	r3, [pc, #456]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f003 0304 	and.w	r3, r3, #4
 8013a06:	2b04      	cmp	r3, #4
 8013a08:	d109      	bne.n	8013a1e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	08db      	lsrs	r3, r3, #3
 8013a10:	f003 0303 	and.w	r3, r3, #3
 8013a14:	4a6d      	ldr	r2, [pc, #436]	@ (8013bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013a16:	fa22 f303 	lsr.w	r3, r2, r3
 8013a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a1c:	e1b9      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a22:	e1b6      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013a24:	4b68      	ldr	r3, [pc, #416]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a30:	d102      	bne.n	8013a38 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013a32:	4b67      	ldr	r3, [pc, #412]	@ (8013bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a36:	e1ac      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a3c:	e1a9      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013a3e:	4b62      	ldr	r3, [pc, #392]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a4a:	d102      	bne.n	8013a52 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013a4c:	4b61      	ldr	r3, [pc, #388]	@ (8013bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a50:	e19f      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a52:	2300      	movs	r3, #0
 8013a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a56:	e19c      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a5c:	e199      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a62:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013a66:	430b      	orrs	r3, r1
 8013a68:	d173      	bne.n	8013b52 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013a6a:	4b57      	ldr	r3, [pc, #348]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013a72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a7a:	d02f      	beq.n	8013adc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a82:	d863      	bhi.n	8013b4c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d004      	beq.n	8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a90:	d012      	beq.n	8013ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013a92:	e05b      	b.n	8013b4c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a94:	4b4c      	ldr	r3, [pc, #304]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013aa0:	d107      	bne.n	8013ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013aa2:	f107 0318 	add.w	r3, r7, #24
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f000 f996 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ab0:	e16f      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ab6:	e16c      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013ab8:	4b43      	ldr	r3, [pc, #268]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013ac4:	d107      	bne.n	8013ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013ac6:	f107 030c 	add.w	r3, r7, #12
 8013aca:	4618      	mov	r0, r3
 8013acc:	f000 fad8 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ad4:	e15d      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ada:	e15a      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013adc:	4b3a      	ldr	r3, [pc, #232]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ae4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013ae6:	4b38      	ldr	r3, [pc, #224]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f003 0304 	and.w	r3, r3, #4
 8013aee:	2b04      	cmp	r3, #4
 8013af0:	d10c      	bne.n	8013b0c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d109      	bne.n	8013b0c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013af8:	4b33      	ldr	r3, [pc, #204]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	08db      	lsrs	r3, r3, #3
 8013afe:	f003 0303 	and.w	r3, r3, #3
 8013b02:	4a32      	ldr	r2, [pc, #200]	@ (8013bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013b04:	fa22 f303 	lsr.w	r3, r2, r3
 8013b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b0a:	e01e      	b.n	8013b4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b18:	d106      	bne.n	8013b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b20:	d102      	bne.n	8013b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013b22:	4b2b      	ldr	r3, [pc, #172]	@ (8013bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b26:	e010      	b.n	8013b4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013b28:	4b27      	ldr	r3, [pc, #156]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b34:	d106      	bne.n	8013b44 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b3c:	d102      	bne.n	8013b44 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013b3e:	4b25      	ldr	r3, [pc, #148]	@ (8013bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b42:	e002      	b.n	8013b4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013b44:	2300      	movs	r3, #0
 8013b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013b48:	e123      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b4a:	e122      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b50:	e11f      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b56:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013b5a:	430b      	orrs	r3, r1
 8013b5c:	d13c      	bne.n	8013bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013b66:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d004      	beq.n	8013b78 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b74:	d012      	beq.n	8013b9c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013b76:	e023      	b.n	8013bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013b78:	4b13      	ldr	r3, [pc, #76]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013b84:	d107      	bne.n	8013b96 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f000 fbcc 	bl	8014328 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b94:	e0fd      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b96:	2300      	movs	r3, #0
 8013b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b9a:	e0fa      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8013bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013ba8:	d107      	bne.n	8013bba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013baa:	f107 0318 	add.w	r3, r7, #24
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f000 f912 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013bb4:	6a3b      	ldr	r3, [r7, #32]
 8013bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bb8:	e0eb      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bbe:	e0e8      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bc4:	e0e5      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013bc6:	bf00      	nop
 8013bc8:	58024400 	.word	0x58024400
 8013bcc:	03d09000 	.word	0x03d09000
 8013bd0:	003d0900 	.word	0x003d0900
 8013bd4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013bdc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013be0:	430b      	orrs	r3, r1
 8013be2:	f040 8085 	bne.w	8013cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013be6:	4b6d      	ldr	r3, [pc, #436]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013bee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bf6:	d06b      	beq.n	8013cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bfe:	d874      	bhi.n	8013cea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c06:	d056      	beq.n	8013cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c0e:	d86c      	bhi.n	8013cea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013c16:	d03b      	beq.n	8013c90 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013c1e:	d864      	bhi.n	8013cea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c26:	d021      	beq.n	8013c6c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c2e:	d85c      	bhi.n	8013cea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d004      	beq.n	8013c40 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c3c:	d004      	beq.n	8013c48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013c3e:	e054      	b.n	8013cea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013c40:	f000 f8b4 	bl	8013dac <HAL_RCCEx_GetD3PCLK1Freq>
 8013c44:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013c46:	e0a4      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013c48:	4b54      	ldr	r3, [pc, #336]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013c54:	d107      	bne.n	8013c66 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c56:	f107 0318 	add.w	r3, r7, #24
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f000 f8bc 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c64:	e095      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c66:	2300      	movs	r3, #0
 8013c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c6a:	e092      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c78:	d107      	bne.n	8013c8a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c7a:	f107 030c 	add.w	r3, r7, #12
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f000 f9fe 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c88:	e083      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c8e:	e080      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013c90:	4b42      	ldr	r3, [pc, #264]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	f003 0304 	and.w	r3, r3, #4
 8013c98:	2b04      	cmp	r3, #4
 8013c9a:	d109      	bne.n	8013cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	08db      	lsrs	r3, r3, #3
 8013ca2:	f003 0303 	and.w	r3, r3, #3
 8013ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8013da0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8013cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cae:	e070      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cb4:	e06d      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013cb6:	4b39      	ldr	r3, [pc, #228]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013cc2:	d102      	bne.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013cc4:	4b37      	ldr	r3, [pc, #220]	@ (8013da4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cc8:	e063      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cce:	e060      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013cd0:	4b32      	ldr	r3, [pc, #200]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013cdc:	d102      	bne.n	8013ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013cde:	4b32      	ldr	r3, [pc, #200]	@ (8013da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ce2:	e056      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ce8:	e053      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013cea:	2300      	movs	r3, #0
 8013cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cee:	e050      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cf4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013cf8:	430b      	orrs	r3, r1
 8013cfa:	d148      	bne.n	8013d8e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013cfc:	4b27      	ldr	r3, [pc, #156]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013d04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013d0c:	d02a      	beq.n	8013d64 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013d14:	d838      	bhi.n	8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d004      	beq.n	8013d26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d22:	d00d      	beq.n	8013d40 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013d24:	e030      	b.n	8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013d26:	4b1d      	ldr	r3, [pc, #116]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d32:	d102      	bne.n	8013d3a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013d34:	4b1c      	ldr	r3, [pc, #112]	@ (8013da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d38:	e02b      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d3e:	e028      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013d40:	4b16      	ldr	r3, [pc, #88]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d4c:	d107      	bne.n	8013d5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d52:	4618      	mov	r0, r3
 8013d54:	f000 fae8 	bl	8014328 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d5c:	e019      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d62:	e016      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013d64:	4b0d      	ldr	r3, [pc, #52]	@ (8013d9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013d70:	d107      	bne.n	8013d82 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d72:	f107 0318 	add.w	r3, r7, #24
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 f82e 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013d7c:	69fb      	ldr	r3, [r7, #28]
 8013d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d80:	e007      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d86:	e004      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d8c:	e001      	b.n	8013d92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3740      	adds	r7, #64	@ 0x40
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	58024400 	.word	0x58024400
 8013da0:	03d09000 	.word	0x03d09000
 8013da4:	003d0900 	.word	0x003d0900
 8013da8:	016e3600 	.word	0x016e3600

08013dac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013db0:	f7fe f92e 	bl	8012010 <HAL_RCC_GetHCLKFreq>
 8013db4:	4602      	mov	r2, r0
 8013db6:	4b06      	ldr	r3, [pc, #24]	@ (8013dd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013db8:	6a1b      	ldr	r3, [r3, #32]
 8013dba:	091b      	lsrs	r3, r3, #4
 8013dbc:	f003 0307 	and.w	r3, r3, #7
 8013dc0:	4904      	ldr	r1, [pc, #16]	@ (8013dd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013dc2:	5ccb      	ldrb	r3, [r1, r3]
 8013dc4:	f003 031f 	and.w	r3, r3, #31
 8013dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	58024400 	.word	0x58024400
 8013dd4:	0801ec0c 	.word	0x0801ec0c

08013dd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b089      	sub	sp, #36	@ 0x24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013de0:	4ba1      	ldr	r3, [pc, #644]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013de4:	f003 0303 	and.w	r3, r3, #3
 8013de8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013dea:	4b9f      	ldr	r3, [pc, #636]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dee:	0b1b      	lsrs	r3, r3, #12
 8013df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013df4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013df6:	4b9c      	ldr	r3, [pc, #624]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dfa:	091b      	lsrs	r3, r3, #4
 8013dfc:	f003 0301 	and.w	r3, r3, #1
 8013e00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013e02:	4b99      	ldr	r3, [pc, #612]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e06:	08db      	lsrs	r3, r3, #3
 8013e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e0c:	693a      	ldr	r2, [r7, #16]
 8013e0e:	fb02 f303 	mul.w	r3, r2, r3
 8013e12:	ee07 3a90 	vmov	s15, r3
 8013e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f000 8111 	beq.w	8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	2b02      	cmp	r3, #2
 8013e2a:	f000 8083 	beq.w	8013f34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	2b02      	cmp	r3, #2
 8013e32:	f200 80a1 	bhi.w	8013f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013e36:	69bb      	ldr	r3, [r7, #24]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d003      	beq.n	8013e44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013e3c:	69bb      	ldr	r3, [r7, #24]
 8013e3e:	2b01      	cmp	r3, #1
 8013e40:	d056      	beq.n	8013ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013e42:	e099      	b.n	8013f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e44:	4b88      	ldr	r3, [pc, #544]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f003 0320 	and.w	r3, r3, #32
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d02d      	beq.n	8013eac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013e50:	4b85      	ldr	r3, [pc, #532]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	08db      	lsrs	r3, r3, #3
 8013e56:	f003 0303 	and.w	r3, r3, #3
 8013e5a:	4a84      	ldr	r2, [pc, #528]	@ (801406c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8013e60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	ee07 3a90 	vmov	s15, r3
 8013e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	ee07 3a90 	vmov	s15, r3
 8013e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e82:	ee07 3a90 	vmov	s15, r3
 8013e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013eaa:	e087      	b.n	8013fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	ee07 3a90 	vmov	s15, r3
 8013eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014074 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ec6:	ee07 3a90 	vmov	s15, r3
 8013eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ed2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013eee:	e065      	b.n	8013fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	ee07 3a90 	vmov	s15, r3
 8013ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013efa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f02:	4b59      	ldr	r3, [pc, #356]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f0a:	ee07 3a90 	vmov	s15, r3
 8013f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f32:	e043      	b.n	8013fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	ee07 3a90 	vmov	s15, r3
 8013f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801407c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f46:	4b48      	ldr	r3, [pc, #288]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f4e:	ee07 3a90 	vmov	s15, r3
 8013f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f76:	e021      	b.n	8013fbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	ee07 3a90 	vmov	s15, r3
 8013f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014078 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f8a:	4b37      	ldr	r3, [pc, #220]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f92:	ee07 3a90 	vmov	s15, r3
 8013f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014070 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013fba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fc0:	0a5b      	lsrs	r3, r3, #9
 8013fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fc6:	ee07 3a90 	vmov	s15, r3
 8013fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fe2:	ee17 2a90 	vmov	r2, s15
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013fea:	4b1f      	ldr	r3, [pc, #124]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fee:	0c1b      	lsrs	r3, r3, #16
 8013ff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ff4:	ee07 3a90 	vmov	s15, r3
 8013ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ffc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014004:	edd7 6a07 	vldr	s13, [r7, #28]
 8014008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801400c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014010:	ee17 2a90 	vmov	r2, s15
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8014018:	4b13      	ldr	r3, [pc, #76]	@ (8014068 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801401c:	0e1b      	lsrs	r3, r3, #24
 801401e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014022:	ee07 3a90 	vmov	s15, r3
 8014026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801402a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801402e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014032:	edd7 6a07 	vldr	s13, [r7, #28]
 8014036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801403a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801403e:	ee17 2a90 	vmov	r2, s15
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8014046:	e008      	b.n	801405a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2200      	movs	r2, #0
 801404c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2200      	movs	r2, #0
 8014052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2200      	movs	r2, #0
 8014058:	609a      	str	r2, [r3, #8]
}
 801405a:	bf00      	nop
 801405c:	3724      	adds	r7, #36	@ 0x24
 801405e:	46bd      	mov	sp, r7
 8014060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop
 8014068:	58024400 	.word	0x58024400
 801406c:	03d09000 	.word	0x03d09000
 8014070:	46000000 	.word	0x46000000
 8014074:	4c742400 	.word	0x4c742400
 8014078:	4a742400 	.word	0x4a742400
 801407c:	4bb71b00 	.word	0x4bb71b00

08014080 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8014080:	b480      	push	{r7}
 8014082:	b089      	sub	sp, #36	@ 0x24
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014088:	4ba1      	ldr	r3, [pc, #644]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801408c:	f003 0303 	and.w	r3, r3, #3
 8014090:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8014092:	4b9f      	ldr	r3, [pc, #636]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014096:	0d1b      	lsrs	r3, r3, #20
 8014098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801409c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801409e:	4b9c      	ldr	r3, [pc, #624]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140a2:	0a1b      	lsrs	r3, r3, #8
 80140a4:	f003 0301 	and.w	r3, r3, #1
 80140a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80140aa:	4b99      	ldr	r3, [pc, #612]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140ae:	08db      	lsrs	r3, r3, #3
 80140b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80140b4:	693a      	ldr	r2, [r7, #16]
 80140b6:	fb02 f303 	mul.w	r3, r2, r3
 80140ba:	ee07 3a90 	vmov	s15, r3
 80140be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	f000 8111 	beq.w	80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	2b02      	cmp	r3, #2
 80140d2:	f000 8083 	beq.w	80141dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	2b02      	cmp	r3, #2
 80140da:	f200 80a1 	bhi.w	8014220 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d003      	beq.n	80140ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	2b01      	cmp	r3, #1
 80140e8:	d056      	beq.n	8014198 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80140ea:	e099      	b.n	8014220 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140ec:	4b88      	ldr	r3, [pc, #544]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	f003 0320 	and.w	r3, r3, #32
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d02d      	beq.n	8014154 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80140f8:	4b85      	ldr	r3, [pc, #532]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	08db      	lsrs	r3, r3, #3
 80140fe:	f003 0303 	and.w	r3, r3, #3
 8014102:	4a84      	ldr	r2, [pc, #528]	@ (8014314 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8014104:	fa22 f303 	lsr.w	r3, r2, r3
 8014108:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	ee07 3a90 	vmov	s15, r3
 8014110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	ee07 3a90 	vmov	s15, r3
 801411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014122:	4b7b      	ldr	r3, [pc, #492]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801412a:	ee07 3a90 	vmov	s15, r3
 801412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014132:	ed97 6a03 	vldr	s12, [r7, #12]
 8014136:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801414e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014152:	e087      	b.n	8014264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	ee07 3a90 	vmov	s15, r3
 801415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801415e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801431c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8014162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014166:	4b6a      	ldr	r3, [pc, #424]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801416e:	ee07 3a90 	vmov	s15, r3
 8014172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014176:	ed97 6a03 	vldr	s12, [r7, #12]
 801417a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014196:	e065      	b.n	8014264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	ee07 3a90 	vmov	s15, r3
 801419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80141a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141aa:	4b59      	ldr	r3, [pc, #356]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141b2:	ee07 3a90 	vmov	s15, r3
 80141b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80141be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141da:	e043      	b.n	8014264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	ee07 3a90 	vmov	s15, r3
 80141e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80141ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141ee:	4b48      	ldr	r3, [pc, #288]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141f6:	ee07 3a90 	vmov	s15, r3
 80141fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8014202:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801420e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014216:	ee67 7a27 	vmul.f32	s15, s14, s15
 801421a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801421e:	e021      	b.n	8014264 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	ee07 3a90 	vmov	s15, r3
 8014226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801422a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014320 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014232:	4b37      	ldr	r3, [pc, #220]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801423a:	ee07 3a90 	vmov	s15, r3
 801423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014242:	ed97 6a03 	vldr	s12, [r7, #12]
 8014246:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014318 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801425e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014262:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014264:	4b2a      	ldr	r3, [pc, #168]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014268:	0a5b      	lsrs	r3, r3, #9
 801426a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801426e:	ee07 3a90 	vmov	s15, r3
 8014272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801427a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801427e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801428a:	ee17 2a90 	vmov	r2, s15
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8014292:	4b1f      	ldr	r3, [pc, #124]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014296:	0c1b      	lsrs	r3, r3, #16
 8014298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801429c:	ee07 3a90 	vmov	s15, r3
 80142a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80142a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80142ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80142b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142b8:	ee17 2a90 	vmov	r2, s15
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80142c0:	4b13      	ldr	r3, [pc, #76]	@ (8014310 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80142c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142c4:	0e1b      	lsrs	r3, r3, #24
 80142c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142ca:	ee07 3a90 	vmov	s15, r3
 80142ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80142d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80142da:	edd7 6a07 	vldr	s13, [r7, #28]
 80142de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142e6:	ee17 2a90 	vmov	r2, s15
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80142ee:	e008      	b.n	8014302 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2200      	movs	r2, #0
 80142fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2200      	movs	r2, #0
 8014300:	609a      	str	r2, [r3, #8]
}
 8014302:	bf00      	nop
 8014304:	3724      	adds	r7, #36	@ 0x24
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	58024400 	.word	0x58024400
 8014314:	03d09000 	.word	0x03d09000
 8014318:	46000000 	.word	0x46000000
 801431c:	4c742400 	.word	0x4c742400
 8014320:	4a742400 	.word	0x4a742400
 8014324:	4bb71b00 	.word	0x4bb71b00

08014328 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014328:	b480      	push	{r7}
 801432a:	b089      	sub	sp, #36	@ 0x24
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014330:	4ba0      	ldr	r3, [pc, #640]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014334:	f003 0303 	and.w	r3, r3, #3
 8014338:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801433a:	4b9e      	ldr	r3, [pc, #632]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801433e:	091b      	lsrs	r3, r3, #4
 8014340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014344:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014346:	4b9b      	ldr	r3, [pc, #620]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434a:	f003 0301 	and.w	r3, r3, #1
 801434e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014350:	4b98      	ldr	r3, [pc, #608]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014354:	08db      	lsrs	r3, r3, #3
 8014356:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801435a:	693a      	ldr	r2, [r7, #16]
 801435c:	fb02 f303 	mul.w	r3, r2, r3
 8014360:	ee07 3a90 	vmov	s15, r3
 8014364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014368:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	2b00      	cmp	r3, #0
 8014370:	f000 8111 	beq.w	8014596 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	2b02      	cmp	r3, #2
 8014378:	f000 8083 	beq.w	8014482 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	2b02      	cmp	r3, #2
 8014380:	f200 80a1 	bhi.w	80144c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d003      	beq.n	8014392 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	2b01      	cmp	r3, #1
 801438e:	d056      	beq.n	801443e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8014390:	e099      	b.n	80144c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014392:	4b88      	ldr	r3, [pc, #544]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f003 0320 	and.w	r3, r3, #32
 801439a:	2b00      	cmp	r3, #0
 801439c:	d02d      	beq.n	80143fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801439e:	4b85      	ldr	r3, [pc, #532]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	08db      	lsrs	r3, r3, #3
 80143a4:	f003 0303 	and.w	r3, r3, #3
 80143a8:	4a83      	ldr	r2, [pc, #524]	@ (80145b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80143aa:	fa22 f303 	lsr.w	r3, r2, r3
 80143ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	ee07 3a90 	vmov	s15, r3
 80143b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	ee07 3a90 	vmov	s15, r3
 80143c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143c8:	4b7a      	ldr	r3, [pc, #488]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143d0:	ee07 3a90 	vmov	s15, r3
 80143d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80143dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80145bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80143f8:	e087      	b.n	801450a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	ee07 3a90 	vmov	s15, r3
 8014400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014404:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80145c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801440c:	4b69      	ldr	r3, [pc, #420]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014414:	ee07 3a90 	vmov	s15, r3
 8014418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801441c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014420:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80145bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801442c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801443c:	e065      	b.n	801450a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	ee07 3a90 	vmov	s15, r3
 8014444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014448:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80145c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801444c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014450:	4b58      	ldr	r3, [pc, #352]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014458:	ee07 3a90 	vmov	s15, r3
 801445c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014460:	ed97 6a03 	vldr	s12, [r7, #12]
 8014464:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80145bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801446c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014470:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014478:	ee67 7a27 	vmul.f32	s15, s14, s15
 801447c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014480:	e043      	b.n	801450a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	ee07 3a90 	vmov	s15, r3
 8014488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801448c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80145c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8014490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014494:	4b47      	ldr	r3, [pc, #284]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801449c:	ee07 3a90 	vmov	s15, r3
 80144a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80144a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80144a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80145bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80144ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80144b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144c4:	e021      	b.n	801450a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	ee07 3a90 	vmov	s15, r3
 80144cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80145c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80144d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144d8:	4b36      	ldr	r3, [pc, #216]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144e0:	ee07 3a90 	vmov	s15, r3
 80144e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80144e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80144ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80145bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80144f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80144f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014508:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801450a:	4b2a      	ldr	r3, [pc, #168]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801450e:	0a5b      	lsrs	r3, r3, #9
 8014510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014514:	ee07 3a90 	vmov	s15, r3
 8014518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801451c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014524:	edd7 6a07 	vldr	s13, [r7, #28]
 8014528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801452c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014530:	ee17 2a90 	vmov	r2, s15
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014538:	4b1e      	ldr	r3, [pc, #120]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801453c:	0c1b      	lsrs	r3, r3, #16
 801453e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014542:	ee07 3a90 	vmov	s15, r3
 8014546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801454a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801454e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014552:	edd7 6a07 	vldr	s13, [r7, #28]
 8014556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801455a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801455e:	ee17 2a90 	vmov	r2, s15
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014566:	4b13      	ldr	r3, [pc, #76]	@ (80145b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801456a:	0e1b      	lsrs	r3, r3, #24
 801456c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014570:	ee07 3a90 	vmov	s15, r3
 8014574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014578:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801457c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014580:	edd7 6a07 	vldr	s13, [r7, #28]
 8014584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801458c:	ee17 2a90 	vmov	r2, s15
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014594:	e008      	b.n	80145a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2200      	movs	r2, #0
 801459a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2200      	movs	r2, #0
 80145a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2200      	movs	r2, #0
 80145a6:	609a      	str	r2, [r3, #8]
}
 80145a8:	bf00      	nop
 80145aa:	3724      	adds	r7, #36	@ 0x24
 80145ac:	46bd      	mov	sp, r7
 80145ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b2:	4770      	bx	lr
 80145b4:	58024400 	.word	0x58024400
 80145b8:	03d09000 	.word	0x03d09000
 80145bc:	46000000 	.word	0x46000000
 80145c0:	4c742400 	.word	0x4c742400
 80145c4:	4a742400 	.word	0x4a742400
 80145c8:	4bb71b00 	.word	0x4bb71b00

080145cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80145d6:	2300      	movs	r3, #0
 80145d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80145da:	4b53      	ldr	r3, [pc, #332]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80145dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145de:	f003 0303 	and.w	r3, r3, #3
 80145e2:	2b03      	cmp	r3, #3
 80145e4:	d101      	bne.n	80145ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80145e6:	2301      	movs	r3, #1
 80145e8:	e099      	b.n	801471e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80145ea:	4b4f      	ldr	r3, [pc, #316]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	4a4e      	ldr	r2, [pc, #312]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80145f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80145f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80145f6:	f7f4 ffcd 	bl	8009594 <HAL_GetTick>
 80145fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145fc:	e008      	b.n	8014610 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80145fe:	f7f4 ffc9 	bl	8009594 <HAL_GetTick>
 8014602:	4602      	mov	r2, r0
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	2b02      	cmp	r3, #2
 801460a:	d901      	bls.n	8014610 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801460c:	2303      	movs	r3, #3
 801460e:	e086      	b.n	801471e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014610:	4b45      	ldr	r3, [pc, #276]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014618:	2b00      	cmp	r3, #0
 801461a:	d1f0      	bne.n	80145fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801461c:	4b42      	ldr	r3, [pc, #264]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 801461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014620:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	031b      	lsls	r3, r3, #12
 801462a:	493f      	ldr	r1, [pc, #252]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 801462c:	4313      	orrs	r3, r2
 801462e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	3b01      	subs	r3, #1
 8014636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	689b      	ldr	r3, [r3, #8]
 801463e:	3b01      	subs	r3, #1
 8014640:	025b      	lsls	r3, r3, #9
 8014642:	b29b      	uxth	r3, r3
 8014644:	431a      	orrs	r2, r3
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	3b01      	subs	r3, #1
 801464c:	041b      	lsls	r3, r3, #16
 801464e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014652:	431a      	orrs	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	691b      	ldr	r3, [r3, #16]
 8014658:	3b01      	subs	r3, #1
 801465a:	061b      	lsls	r3, r3, #24
 801465c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014660:	4931      	ldr	r1, [pc, #196]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014662:	4313      	orrs	r3, r2
 8014664:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014666:	4b30      	ldr	r3, [pc, #192]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801466a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	695b      	ldr	r3, [r3, #20]
 8014672:	492d      	ldr	r1, [pc, #180]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014674:	4313      	orrs	r3, r2
 8014676:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014678:	4b2b      	ldr	r3, [pc, #172]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 801467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801467c:	f023 0220 	bic.w	r2, r3, #32
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	699b      	ldr	r3, [r3, #24]
 8014684:	4928      	ldr	r1, [pc, #160]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014686:	4313      	orrs	r3, r2
 8014688:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801468a:	4b27      	ldr	r3, [pc, #156]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 801468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801468e:	4a26      	ldr	r2, [pc, #152]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014690:	f023 0310 	bic.w	r3, r3, #16
 8014694:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014696:	4b24      	ldr	r3, [pc, #144]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014698:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801469a:	4b24      	ldr	r3, [pc, #144]	@ (801472c <RCCEx_PLL2_Config+0x160>)
 801469c:	4013      	ands	r3, r2
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	69d2      	ldr	r2, [r2, #28]
 80146a2:	00d2      	lsls	r2, r2, #3
 80146a4:	4920      	ldr	r1, [pc, #128]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146a6:	4313      	orrs	r3, r2
 80146a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80146aa:	4b1f      	ldr	r3, [pc, #124]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ae:	4a1e      	ldr	r2, [pc, #120]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146b0:	f043 0310 	orr.w	r3, r3, #16
 80146b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d106      	bne.n	80146ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80146bc:	4b1a      	ldr	r3, [pc, #104]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146c0:	4a19      	ldr	r2, [pc, #100]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80146c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146c8:	e00f      	b.n	80146ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	2b01      	cmp	r3, #1
 80146ce:	d106      	bne.n	80146de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80146d0:	4b15      	ldr	r3, [pc, #84]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146d4:	4a14      	ldr	r2, [pc, #80]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80146da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146dc:	e005      	b.n	80146ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80146de:	4b12      	ldr	r3, [pc, #72]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146e2:	4a11      	ldr	r2, [pc, #68]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80146e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80146ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	4a0e      	ldr	r2, [pc, #56]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 80146f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80146f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146f6:	f7f4 ff4d 	bl	8009594 <HAL_GetTick>
 80146fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146fc:	e008      	b.n	8014710 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80146fe:	f7f4 ff49 	bl	8009594 <HAL_GetTick>
 8014702:	4602      	mov	r2, r0
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	1ad3      	subs	r3, r2, r3
 8014708:	2b02      	cmp	r3, #2
 801470a:	d901      	bls.n	8014710 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801470c:	2303      	movs	r3, #3
 801470e:	e006      	b.n	801471e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014710:	4b05      	ldr	r3, [pc, #20]	@ (8014728 <RCCEx_PLL2_Config+0x15c>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014718:	2b00      	cmp	r3, #0
 801471a:	d0f0      	beq.n	80146fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801471c:	7bfb      	ldrb	r3, [r7, #15]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3710      	adds	r7, #16
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	58024400 	.word	0x58024400
 801472c:	ffff0007 	.word	0xffff0007

08014730 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801473a:	2300      	movs	r3, #0
 801473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801473e:	4b53      	ldr	r3, [pc, #332]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014742:	f003 0303 	and.w	r3, r3, #3
 8014746:	2b03      	cmp	r3, #3
 8014748:	d101      	bne.n	801474e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801474a:	2301      	movs	r3, #1
 801474c:	e099      	b.n	8014882 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801474e:	4b4f      	ldr	r3, [pc, #316]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4a4e      	ldr	r2, [pc, #312]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801475a:	f7f4 ff1b 	bl	8009594 <HAL_GetTick>
 801475e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014760:	e008      	b.n	8014774 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014762:	f7f4 ff17 	bl	8009594 <HAL_GetTick>
 8014766:	4602      	mov	r2, r0
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	1ad3      	subs	r3, r2, r3
 801476c:	2b02      	cmp	r3, #2
 801476e:	d901      	bls.n	8014774 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014770:	2303      	movs	r3, #3
 8014772:	e086      	b.n	8014882 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014774:	4b45      	ldr	r3, [pc, #276]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801477c:	2b00      	cmp	r3, #0
 801477e:	d1f0      	bne.n	8014762 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014780:	4b42      	ldr	r3, [pc, #264]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014784:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	051b      	lsls	r3, r3, #20
 801478e:	493f      	ldr	r1, [pc, #252]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014790:	4313      	orrs	r3, r2
 8014792:	628b      	str	r3, [r1, #40]	@ 0x28
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	3b01      	subs	r3, #1
 801479a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	689b      	ldr	r3, [r3, #8]
 80147a2:	3b01      	subs	r3, #1
 80147a4:	025b      	lsls	r3, r3, #9
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	431a      	orrs	r2, r3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	3b01      	subs	r3, #1
 80147b0:	041b      	lsls	r3, r3, #16
 80147b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80147b6:	431a      	orrs	r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	691b      	ldr	r3, [r3, #16]
 80147bc:	3b01      	subs	r3, #1
 80147be:	061b      	lsls	r3, r3, #24
 80147c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80147c4:	4931      	ldr	r1, [pc, #196]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147c6:	4313      	orrs	r3, r2
 80147c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80147ca:	4b30      	ldr	r3, [pc, #192]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	695b      	ldr	r3, [r3, #20]
 80147d6:	492d      	ldr	r1, [pc, #180]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147d8:	4313      	orrs	r3, r2
 80147da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80147dc:	4b2b      	ldr	r3, [pc, #172]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	699b      	ldr	r3, [r3, #24]
 80147e8:	4928      	ldr	r1, [pc, #160]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147ea:	4313      	orrs	r3, r2
 80147ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80147ee:	4b27      	ldr	r3, [pc, #156]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147f2:	4a26      	ldr	r2, [pc, #152]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80147f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80147fa:	4b24      	ldr	r3, [pc, #144]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 80147fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80147fe:	4b24      	ldr	r3, [pc, #144]	@ (8014890 <RCCEx_PLL3_Config+0x160>)
 8014800:	4013      	ands	r3, r2
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	69d2      	ldr	r2, [r2, #28]
 8014806:	00d2      	lsls	r2, r2, #3
 8014808:	4920      	ldr	r1, [pc, #128]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 801480a:	4313      	orrs	r3, r2
 801480c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801480e:	4b1f      	ldr	r3, [pc, #124]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014812:	4a1e      	ldr	r2, [pc, #120]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014818:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d106      	bne.n	801482e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014820:	4b1a      	ldr	r3, [pc, #104]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014824:	4a19      	ldr	r2, [pc, #100]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014826:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801482a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801482c:	e00f      	b.n	801484e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	2b01      	cmp	r3, #1
 8014832:	d106      	bne.n	8014842 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014834:	4b15      	ldr	r3, [pc, #84]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014838:	4a14      	ldr	r2, [pc, #80]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 801483a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801483e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014840:	e005      	b.n	801484e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014842:	4b12      	ldr	r3, [pc, #72]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014846:	4a11      	ldr	r2, [pc, #68]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014848:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801484c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801484e:	4b0f      	ldr	r3, [pc, #60]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	4a0e      	ldr	r2, [pc, #56]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801485a:	f7f4 fe9b 	bl	8009594 <HAL_GetTick>
 801485e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014860:	e008      	b.n	8014874 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014862:	f7f4 fe97 	bl	8009594 <HAL_GetTick>
 8014866:	4602      	mov	r2, r0
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	1ad3      	subs	r3, r2, r3
 801486c:	2b02      	cmp	r3, #2
 801486e:	d901      	bls.n	8014874 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014870:	2303      	movs	r3, #3
 8014872:	e006      	b.n	8014882 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014874:	4b05      	ldr	r3, [pc, #20]	@ (801488c <RCCEx_PLL3_Config+0x15c>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801487c:	2b00      	cmp	r3, #0
 801487e:	d0f0      	beq.n	8014862 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014880:	7bfb      	ldrb	r3, [r7, #15]
}
 8014882:	4618      	mov	r0, r3
 8014884:	3710      	adds	r7, #16
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	58024400 	.word	0x58024400
 8014890:	ffff0007 	.word	0xffff0007

08014894 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d101      	bne.n	80148a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80148a2:	2301      	movs	r3, #1
 80148a4:	e10f      	b.n	8014ac6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2200      	movs	r2, #0
 80148aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4a87      	ldr	r2, [pc, #540]	@ (8014ad0 <HAL_SPI_Init+0x23c>)
 80148b2:	4293      	cmp	r3, r2
 80148b4:	d00f      	beq.n	80148d6 <HAL_SPI_Init+0x42>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	4a86      	ldr	r2, [pc, #536]	@ (8014ad4 <HAL_SPI_Init+0x240>)
 80148bc:	4293      	cmp	r3, r2
 80148be:	d00a      	beq.n	80148d6 <HAL_SPI_Init+0x42>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	4a84      	ldr	r2, [pc, #528]	@ (8014ad8 <HAL_SPI_Init+0x244>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d005      	beq.n	80148d6 <HAL_SPI_Init+0x42>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	68db      	ldr	r3, [r3, #12]
 80148ce:	2b0f      	cmp	r3, #15
 80148d0:	d901      	bls.n	80148d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80148d2:	2301      	movs	r3, #1
 80148d4:	e0f7      	b.n	8014ac6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f001 fd22 	bl	8016320 <SPI_GetPacketSize>
 80148dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	4a7b      	ldr	r2, [pc, #492]	@ (8014ad0 <HAL_SPI_Init+0x23c>)
 80148e4:	4293      	cmp	r3, r2
 80148e6:	d00c      	beq.n	8014902 <HAL_SPI_Init+0x6e>
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	4a79      	ldr	r2, [pc, #484]	@ (8014ad4 <HAL_SPI_Init+0x240>)
 80148ee:	4293      	cmp	r3, r2
 80148f0:	d007      	beq.n	8014902 <HAL_SPI_Init+0x6e>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4a78      	ldr	r2, [pc, #480]	@ (8014ad8 <HAL_SPI_Init+0x244>)
 80148f8:	4293      	cmp	r3, r2
 80148fa:	d002      	beq.n	8014902 <HAL_SPI_Init+0x6e>
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b08      	cmp	r3, #8
 8014900:	d811      	bhi.n	8014926 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014906:	4a72      	ldr	r2, [pc, #456]	@ (8014ad0 <HAL_SPI_Init+0x23c>)
 8014908:	4293      	cmp	r3, r2
 801490a:	d009      	beq.n	8014920 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4a70      	ldr	r2, [pc, #448]	@ (8014ad4 <HAL_SPI_Init+0x240>)
 8014912:	4293      	cmp	r3, r2
 8014914:	d004      	beq.n	8014920 <HAL_SPI_Init+0x8c>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a6f      	ldr	r2, [pc, #444]	@ (8014ad8 <HAL_SPI_Init+0x244>)
 801491c:	4293      	cmp	r3, r2
 801491e:	d104      	bne.n	801492a <HAL_SPI_Init+0x96>
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2b10      	cmp	r3, #16
 8014924:	d901      	bls.n	801492a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014926:	2301      	movs	r3, #1
 8014928:	e0cd      	b.n	8014ac6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014930:	b2db      	uxtb	r3, r3
 8014932:	2b00      	cmp	r3, #0
 8014934:	d106      	bne.n	8014944 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2200      	movs	r2, #0
 801493a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f7f3 fb7c 	bl	800803c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2202      	movs	r2, #2
 8014948:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	f022 0201 	bic.w	r2, r2, #1
 801495a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	689b      	ldr	r3, [r3, #8]
 8014962:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014966:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	699b      	ldr	r3, [r3, #24]
 801496c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014970:	d119      	bne.n	80149a6 <HAL_SPI_Init+0x112>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801497a:	d103      	bne.n	8014984 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014980:	2b00      	cmp	r3, #0
 8014982:	d008      	beq.n	8014996 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014988:	2b00      	cmp	r3, #0
 801498a:	d10c      	bne.n	80149a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014994:	d107      	bne.n	80149a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80149a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d00f      	beq.n	80149d2 <HAL_SPI_Init+0x13e>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	2b06      	cmp	r3, #6
 80149b8:	d90b      	bls.n	80149d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	430a      	orrs	r2, r1
 80149ce:	601a      	str	r2, [r3, #0]
 80149d0:	e007      	b.n	80149e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	681a      	ldr	r2, [r3, #0]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80149e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	69da      	ldr	r2, [r3, #28]
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149ea:	431a      	orrs	r2, r3
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	431a      	orrs	r2, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149f4:	ea42 0103 	orr.w	r1, r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	68da      	ldr	r2, [r3, #12]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	430a      	orrs	r2, r1
 8014a02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a0c:	431a      	orrs	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a12:	431a      	orrs	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	699b      	ldr	r3, [r3, #24]
 8014a18:	431a      	orrs	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	691b      	ldr	r3, [r3, #16]
 8014a1e:	431a      	orrs	r2, r3
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	695b      	ldr	r3, [r3, #20]
 8014a24:	431a      	orrs	r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6a1b      	ldr	r3, [r3, #32]
 8014a2a:	431a      	orrs	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	431a      	orrs	r2, r3
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a36:	431a      	orrs	r2, r3
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	689b      	ldr	r3, [r3, #8]
 8014a3c:	431a      	orrs	r2, r3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a42:	ea42 0103 	orr.w	r1, r2, r3
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	430a      	orrs	r2, r1
 8014a50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d113      	bne.n	8014a82 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	689b      	ldr	r3, [r3, #8]
 8014a60:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014a6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	689b      	ldr	r3, [r3, #8]
 8014a74:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014a80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f022 0201 	bic.w	r2, r2, #1
 8014a90:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00a      	beq.n	8014ab4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	68db      	ldr	r3, [r3, #12]
 8014aa4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	430a      	orrs	r2, r1
 8014ab2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2201      	movs	r2, #1
 8014ac0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014ac4:	2300      	movs	r3, #0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	40013000 	.word	0x40013000
 8014ad4:	40003800 	.word	0x40003800
 8014ad8:	40003c00 	.word	0x40003c00

08014adc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b088      	sub	sp, #32
 8014ae0:	af02      	add	r7, sp, #8
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	603b      	str	r3, [r7, #0]
 8014ae8:	4613      	mov	r3, r2
 8014aea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	3320      	adds	r3, #32
 8014af2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014af4:	f7f4 fd4e 	bl	8009594 <HAL_GetTick>
 8014af8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d001      	beq.n	8014b0a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014b06:	2302      	movs	r3, #2
 8014b08:	e1d1      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d002      	beq.n	8014b16 <HAL_SPI_Transmit+0x3a>
 8014b10:	88fb      	ldrh	r3, [r7, #6]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d101      	bne.n	8014b1a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014b16:	2301      	movs	r3, #1
 8014b18:	e1c9      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d101      	bne.n	8014b28 <HAL_SPI_Transmit+0x4c>
 8014b24:	2302      	movs	r3, #2
 8014b26:	e1c2      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2203      	movs	r2, #3
 8014b34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	68ba      	ldr	r2, [r7, #8]
 8014b44:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	88fa      	ldrh	r2, [r7, #6]
 8014b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	88fa      	ldrh	r2, [r7, #6]
 8014b52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	2200      	movs	r2, #0
 8014b68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2200      	movs	r2, #0
 8014b76:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	689b      	ldr	r3, [r3, #8]
 8014b7c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014b80:	d108      	bne.n	8014b94 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	e009      	b.n	8014ba8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014ba6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	685a      	ldr	r2, [r3, #4]
 8014bae:	4b96      	ldr	r3, [pc, #600]	@ (8014e08 <HAL_SPI_Transmit+0x32c>)
 8014bb0:	4013      	ands	r3, r2
 8014bb2:	88f9      	ldrh	r1, [r7, #6]
 8014bb4:	68fa      	ldr	r2, [r7, #12]
 8014bb6:	6812      	ldr	r2, [r2, #0]
 8014bb8:	430b      	orrs	r3, r1
 8014bba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	f042 0201 	orr.w	r2, r2, #1
 8014bca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014bd4:	d107      	bne.n	8014be6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	2b0f      	cmp	r3, #15
 8014bec:	d947      	bls.n	8014c7e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014bee:	e03f      	b.n	8014c70 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	695b      	ldr	r3, [r3, #20]
 8014bf6:	f003 0302 	and.w	r3, r3, #2
 8014bfa:	2b02      	cmp	r3, #2
 8014bfc:	d114      	bne.n	8014c28 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	6812      	ldr	r2, [r2, #0]
 8014c08:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c0e:	1d1a      	adds	r2, r3, #4
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	3b01      	subs	r3, #1
 8014c1e:	b29a      	uxth	r2, r3
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c26:	e023      	b.n	8014c70 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c28:	f7f4 fcb4 	bl	8009594 <HAL_GetTick>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	1ad3      	subs	r3, r2, r3
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d803      	bhi.n	8014c40 <HAL_SPI_Transmit+0x164>
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c3e:	d102      	bne.n	8014c46 <HAL_SPI_Transmit+0x16a>
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d114      	bne.n	8014c70 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	f001 fa9c 	bl	8016184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2201      	movs	r2, #1
 8014c60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014c6c:	2303      	movs	r3, #3
 8014c6e:	e11e      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1b9      	bne.n	8014bf0 <HAL_SPI_Transmit+0x114>
 8014c7c:	e0f1      	b.n	8014e62 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	2b07      	cmp	r3, #7
 8014c84:	f240 80e6 	bls.w	8014e54 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014c88:	e05d      	b.n	8014d46 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	695b      	ldr	r3, [r3, #20]
 8014c90:	f003 0302 	and.w	r3, r3, #2
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d132      	bne.n	8014cfe <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	2b01      	cmp	r3, #1
 8014ca2:	d918      	bls.n	8014cd6 <HAL_SPI_Transmit+0x1fa>
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d014      	beq.n	8014cd6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	6812      	ldr	r2, [r2, #0]
 8014cb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cbc:	1d1a      	adds	r2, r3, #4
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	3b02      	subs	r3, #2
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cd4:	e037      	b.n	8014d46 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cda:	881a      	ldrh	r2, [r3, #0]
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ce4:	1c9a      	adds	r2, r3, #2
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	3b01      	subs	r3, #1
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cfc:	e023      	b.n	8014d46 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cfe:	f7f4 fc49 	bl	8009594 <HAL_GetTick>
 8014d02:	4602      	mov	r2, r0
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	683a      	ldr	r2, [r7, #0]
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d803      	bhi.n	8014d16 <HAL_SPI_Transmit+0x23a>
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d14:	d102      	bne.n	8014d1c <HAL_SPI_Transmit+0x240>
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d114      	bne.n	8014d46 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f001 fa31 	bl	8016184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2201      	movs	r2, #1
 8014d36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d42:	2303      	movs	r3, #3
 8014d44:	e0b3      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d19b      	bne.n	8014c8a <HAL_SPI_Transmit+0x1ae>
 8014d52:	e086      	b.n	8014e62 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	695b      	ldr	r3, [r3, #20]
 8014d5a:	f003 0302 	and.w	r3, r3, #2
 8014d5e:	2b02      	cmp	r3, #2
 8014d60:	d154      	bne.n	8014e0c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	2b03      	cmp	r3, #3
 8014d6c:	d918      	bls.n	8014da0 <HAL_SPI_Transmit+0x2c4>
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d72:	2b40      	cmp	r3, #64	@ 0x40
 8014d74:	d914      	bls.n	8014da0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	6812      	ldr	r2, [r2, #0]
 8014d80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d86:	1d1a      	adds	r2, r3, #4
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	3b04      	subs	r3, #4
 8014d96:	b29a      	uxth	r2, r3
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d9e:	e059      	b.n	8014e54 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	2b01      	cmp	r3, #1
 8014daa:	d917      	bls.n	8014ddc <HAL_SPI_Transmit+0x300>
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d013      	beq.n	8014ddc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014db8:	881a      	ldrh	r2, [r3, #0]
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dc2:	1c9a      	adds	r2, r3, #2
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	3b02      	subs	r3, #2
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014dda:	e03b      	b.n	8014e54 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	3320      	adds	r3, #32
 8014de6:	7812      	ldrb	r2, [r2, #0]
 8014de8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dee:	1c5a      	adds	r2, r3, #1
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	3b01      	subs	r3, #1
 8014dfe:	b29a      	uxth	r2, r3
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014e06:	e025      	b.n	8014e54 <HAL_SPI_Transmit+0x378>
 8014e08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014e0c:	f7f4 fbc2 	bl	8009594 <HAL_GetTick>
 8014e10:	4602      	mov	r2, r0
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	1ad3      	subs	r3, r2, r3
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d803      	bhi.n	8014e24 <HAL_SPI_Transmit+0x348>
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e22:	d102      	bne.n	8014e2a <HAL_SPI_Transmit+0x34e>
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d114      	bne.n	8014e54 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f001 f9aa 	bl	8016184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	2201      	movs	r2, #1
 8014e44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e50:	2303      	movs	r3, #3
 8014e52:	e02c      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	f47f af79 	bne.w	8014d54 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	9300      	str	r3, [sp, #0]
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	2108      	movs	r1, #8
 8014e6c:	68f8      	ldr	r0, [r7, #12]
 8014e6e:	f001 fa29 	bl	80162c4 <SPI_WaitOnFlagUntilTimeout>
 8014e72:	4603      	mov	r3, r0
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d007      	beq.n	8014e88 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e7e:	f043 0220 	orr.w	r2, r3, #32
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f001 f97b 	bl	8016184 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2201      	movs	r2, #1
 8014e92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d001      	beq.n	8014eac <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	e000      	b.n	8014eae <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014eac:	2300      	movs	r3, #0
  }
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3718      	adds	r7, #24
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop

08014eb8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b088      	sub	sp, #32
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	60f8      	str	r0, [r7, #12]
 8014ec0:	60b9      	str	r1, [r7, #8]
 8014ec2:	603b      	str	r3, [r7, #0]
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ecc:	095b      	lsrs	r3, r3, #5
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	3301      	adds	r3, #1
 8014ed2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	3330      	adds	r3, #48	@ 0x30
 8014eda:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014edc:	f7f4 fb5a 	bl	8009594 <HAL_GetTick>
 8014ee0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d001      	beq.n	8014ef2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014eee:	2302      	movs	r3, #2
 8014ef0:	e250      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d002      	beq.n	8014efe <HAL_SPI_Receive+0x46>
 8014ef8:	88fb      	ldrh	r3, [r7, #6]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d101      	bne.n	8014f02 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014efe:	2301      	movs	r3, #1
 8014f00:	e248      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d101      	bne.n	8014f10 <HAL_SPI_Receive+0x58>
 8014f0c:	2302      	movs	r3, #2
 8014f0e:	e241      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2201      	movs	r2, #1
 8014f14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2204      	movs	r2, #4
 8014f1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2200      	movs	r2, #0
 8014f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	68ba      	ldr	r2, [r7, #8]
 8014f2c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	88fa      	ldrh	r2, [r7, #6]
 8014f32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	88fa      	ldrh	r2, [r7, #6]
 8014f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2200      	movs	r2, #0
 8014f42:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2200      	movs	r2, #0
 8014f48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2200      	movs	r2, #0
 8014f58:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	689b      	ldr	r3, [r3, #8]
 8014f64:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f68:	d108      	bne.n	8014f7c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014f78:	601a      	str	r2, [r3, #0]
 8014f7a:	e009      	b.n	8014f90 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	68db      	ldr	r3, [r3, #12]
 8014f82:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014f8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	685a      	ldr	r2, [r3, #4]
 8014f96:	4b95      	ldr	r3, [pc, #596]	@ (80151ec <HAL_SPI_Receive+0x334>)
 8014f98:	4013      	ands	r3, r2
 8014f9a:	88f9      	ldrh	r1, [r7, #6]
 8014f9c:	68fa      	ldr	r2, [r7, #12]
 8014f9e:	6812      	ldr	r2, [r2, #0]
 8014fa0:	430b      	orrs	r3, r1
 8014fa2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f042 0201 	orr.w	r2, r2, #1
 8014fb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014fbc:	d107      	bne.n	8014fce <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014fcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	2b0f      	cmp	r3, #15
 8014fd4:	d96c      	bls.n	80150b0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014fd6:	e064      	b.n	80150a2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	695b      	ldr	r3, [r3, #20]
 8014fde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	695b      	ldr	r3, [r3, #20]
 8014fe6:	f003 0301 	and.w	r3, r3, #1
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	d114      	bne.n	8015018 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ff6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014ff8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ffe:	1d1a      	adds	r2, r3, #4
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801500a:	b29b      	uxth	r3, r3
 801500c:	3b01      	subs	r3, #1
 801500e:	b29a      	uxth	r2, r3
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015016:	e044      	b.n	80150a2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801501e:	b29b      	uxth	r3, r3
 8015020:	8bfa      	ldrh	r2, [r7, #30]
 8015022:	429a      	cmp	r2, r3
 8015024:	d919      	bls.n	801505a <HAL_SPI_Receive+0x1a2>
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801502c:	2b00      	cmp	r3, #0
 801502e:	d014      	beq.n	801505a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015038:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801503a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015040:	1d1a      	adds	r2, r3, #4
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801504c:	b29b      	uxth	r3, r3
 801504e:	3b01      	subs	r3, #1
 8015050:	b29a      	uxth	r2, r3
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015058:	e023      	b.n	80150a2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801505a:	f7f4 fa9b 	bl	8009594 <HAL_GetTick>
 801505e:	4602      	mov	r2, r0
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	1ad3      	subs	r3, r2, r3
 8015064:	683a      	ldr	r2, [r7, #0]
 8015066:	429a      	cmp	r2, r3
 8015068:	d803      	bhi.n	8015072 <HAL_SPI_Receive+0x1ba>
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015070:	d102      	bne.n	8015078 <HAL_SPI_Receive+0x1c0>
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d114      	bne.n	80150a2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015078:	68f8      	ldr	r0, [r7, #12]
 801507a:	f001 f883 	bl	8016184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015084:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2201      	movs	r2, #1
 8015092:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2200      	movs	r2, #0
 801509a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801509e:	2303      	movs	r3, #3
 80150a0:	e178      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d194      	bne.n	8014fd8 <HAL_SPI_Receive+0x120>
 80150ae:	e15e      	b.n	801536e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	68db      	ldr	r3, [r3, #12]
 80150b4:	2b07      	cmp	r3, #7
 80150b6:	f240 8153 	bls.w	8015360 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80150ba:	e08f      	b.n	80151dc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	695b      	ldr	r3, [r3, #20]
 80150c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	695b      	ldr	r3, [r3, #20]
 80150ca:	f003 0301 	and.w	r3, r3, #1
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	d114      	bne.n	80150fc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150d6:	69ba      	ldr	r2, [r7, #24]
 80150d8:	8812      	ldrh	r2, [r2, #0]
 80150da:	b292      	uxth	r2, r2
 80150dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150e2:	1c9a      	adds	r2, r3, #2
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	3b01      	subs	r3, #1
 80150f2:	b29a      	uxth	r2, r3
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150fa:	e06f      	b.n	80151dc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015102:	b29b      	uxth	r3, r3
 8015104:	8bfa      	ldrh	r2, [r7, #30]
 8015106:	429a      	cmp	r2, r3
 8015108:	d924      	bls.n	8015154 <HAL_SPI_Receive+0x29c>
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015110:	2b00      	cmp	r3, #0
 8015112:	d01f      	beq.n	8015154 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015118:	69ba      	ldr	r2, [r7, #24]
 801511a:	8812      	ldrh	r2, [r2, #0]
 801511c:	b292      	uxth	r2, r2
 801511e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015124:	1c9a      	adds	r2, r3, #2
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801512e:	69ba      	ldr	r2, [r7, #24]
 8015130:	8812      	ldrh	r2, [r2, #0]
 8015132:	b292      	uxth	r2, r2
 8015134:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801513a:	1c9a      	adds	r2, r3, #2
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015146:	b29b      	uxth	r3, r3
 8015148:	3b02      	subs	r3, #2
 801514a:	b29a      	uxth	r2, r3
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015152:	e043      	b.n	80151dc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801515a:	b29b      	uxth	r3, r3
 801515c:	2b01      	cmp	r3, #1
 801515e:	d119      	bne.n	8015194 <HAL_SPI_Receive+0x2dc>
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015166:	2b00      	cmp	r3, #0
 8015168:	d014      	beq.n	8015194 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801516e:	69ba      	ldr	r2, [r7, #24]
 8015170:	8812      	ldrh	r2, [r2, #0]
 8015172:	b292      	uxth	r2, r2
 8015174:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801517a:	1c9a      	adds	r2, r3, #2
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015186:	b29b      	uxth	r3, r3
 8015188:	3b01      	subs	r3, #1
 801518a:	b29a      	uxth	r2, r3
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015192:	e023      	b.n	80151dc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015194:	f7f4 f9fe 	bl	8009594 <HAL_GetTick>
 8015198:	4602      	mov	r2, r0
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	1ad3      	subs	r3, r2, r3
 801519e:	683a      	ldr	r2, [r7, #0]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d803      	bhi.n	80151ac <HAL_SPI_Receive+0x2f4>
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151aa:	d102      	bne.n	80151b2 <HAL_SPI_Receive+0x2fa>
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d114      	bne.n	80151dc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80151b2:	68f8      	ldr	r0, [r7, #12]
 80151b4:	f000 ffe6 	bl	8016184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80151be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2201      	movs	r2, #1
 80151cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	2200      	movs	r2, #0
 80151d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80151d8:	2303      	movs	r3, #3
 80151da:	e0db      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f47f af69 	bne.w	80150bc <HAL_SPI_Receive+0x204>
 80151ea:	e0c0      	b.n	801536e <HAL_SPI_Receive+0x4b6>
 80151ec:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	695b      	ldr	r3, [r3, #20]
 80151f6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	695b      	ldr	r3, [r3, #20]
 80151fe:	f003 0301 	and.w	r3, r3, #1
 8015202:	2b01      	cmp	r3, #1
 8015204:	d117      	bne.n	8015236 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015212:	7812      	ldrb	r2, [r2, #0]
 8015214:	b2d2      	uxtb	r2, r2
 8015216:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801521c:	1c5a      	adds	r2, r3, #1
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015228:	b29b      	uxth	r3, r3
 801522a:	3b01      	subs	r3, #1
 801522c:	b29a      	uxth	r2, r3
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015234:	e094      	b.n	8015360 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801523c:	b29b      	uxth	r3, r3
 801523e:	8bfa      	ldrh	r2, [r7, #30]
 8015240:	429a      	cmp	r2, r3
 8015242:	d946      	bls.n	80152d2 <HAL_SPI_Receive+0x41a>
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801524a:	2b00      	cmp	r3, #0
 801524c:	d041      	beq.n	80152d2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801525a:	7812      	ldrb	r2, [r2, #0]
 801525c:	b2d2      	uxtb	r2, r2
 801525e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015264:	1c5a      	adds	r2, r3, #1
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015276:	7812      	ldrb	r2, [r2, #0]
 8015278:	b2d2      	uxtb	r2, r2
 801527a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015280:	1c5a      	adds	r2, r3, #1
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015292:	7812      	ldrb	r2, [r2, #0]
 8015294:	b2d2      	uxtb	r2, r2
 8015296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801529c:	1c5a      	adds	r2, r3, #1
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ae:	7812      	ldrb	r2, [r2, #0]
 80152b0:	b2d2      	uxtb	r2, r2
 80152b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	3b04      	subs	r3, #4
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152d0:	e046      	b.n	8015360 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152d8:	b29b      	uxth	r3, r3
 80152da:	2b03      	cmp	r3, #3
 80152dc:	d81c      	bhi.n	8015318 <HAL_SPI_Receive+0x460>
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d017      	beq.n	8015318 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152f4:	7812      	ldrb	r2, [r2, #0]
 80152f6:	b2d2      	uxtb	r2, r2
 80152f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152fe:	1c5a      	adds	r2, r3, #1
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801530a:	b29b      	uxth	r3, r3
 801530c:	3b01      	subs	r3, #1
 801530e:	b29a      	uxth	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015316:	e023      	b.n	8015360 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015318:	f7f4 f93c 	bl	8009594 <HAL_GetTick>
 801531c:	4602      	mov	r2, r0
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	683a      	ldr	r2, [r7, #0]
 8015324:	429a      	cmp	r2, r3
 8015326:	d803      	bhi.n	8015330 <HAL_SPI_Receive+0x478>
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801532e:	d102      	bne.n	8015336 <HAL_SPI_Receive+0x47e>
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d114      	bne.n	8015360 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015336:	68f8      	ldr	r0, [r7, #12]
 8015338:	f000 ff24 	bl	8016184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015342:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2201      	movs	r2, #1
 8015350:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2200      	movs	r2, #0
 8015358:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801535c:	2303      	movs	r3, #3
 801535e:	e019      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015366:	b29b      	uxth	r3, r3
 8015368:	2b00      	cmp	r3, #0
 801536a:	f47f af41 	bne.w	80151f0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f000 ff08 	bl	8016184 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2201      	movs	r2, #1
 8015378:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	2200      	movs	r2, #0
 8015380:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801538a:	2b00      	cmp	r3, #0
 801538c:	d001      	beq.n	8015392 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801538e:	2301      	movs	r3, #1
 8015390:	e000      	b.n	8015394 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8015392:	2300      	movs	r3, #0
  }
}
 8015394:	4618      	mov	r0, r3
 8015396:	3720      	adds	r7, #32
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b08e      	sub	sp, #56	@ 0x38
 80153a0:	af02      	add	r7, sp, #8
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
 80153a8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	3320      	adds	r3, #32
 80153b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	3330      	adds	r3, #48	@ 0x30
 80153b8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153be:	095b      	lsrs	r3, r3, #5
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	3301      	adds	r3, #1
 80153c4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80153c6:	f7f4 f8e5 	bl	8009594 <HAL_GetTick>
 80153ca:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80153cc:	887b      	ldrh	r3, [r7, #2]
 80153ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80153d0:	887b      	ldrh	r3, [r7, #2]
 80153d2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d001      	beq.n	80153e4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80153e0:	2302      	movs	r3, #2
 80153e2:	e310      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d005      	beq.n	80153f6 <HAL_SPI_TransmitReceive+0x5a>
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <HAL_SPI_TransmitReceive+0x5a>
 80153f0:	887b      	ldrh	r3, [r7, #2]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d101      	bne.n	80153fa <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80153f6:	2301      	movs	r3, #1
 80153f8:	e305      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015400:	2b01      	cmp	r3, #1
 8015402:	d101      	bne.n	8015408 <HAL_SPI_TransmitReceive+0x6c>
 8015404:	2302      	movs	r3, #2
 8015406:	e2fe      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	2201      	movs	r2, #1
 801540c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2205      	movs	r2, #5
 8015414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2200      	movs	r2, #0
 801541c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	887a      	ldrh	r2, [r7, #2]
 801542a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	887a      	ldrh	r2, [r7, #2]
 8015432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	68ba      	ldr	r2, [r7, #8]
 801543a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	887a      	ldrh	r2, [r7, #2]
 8015440:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	887a      	ldrh	r2, [r7, #2]
 8015448:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2200      	movs	r2, #0
 8015450:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	2200      	movs	r2, #0
 8015456:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	68da      	ldr	r2, [r3, #12]
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015466:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	4a70      	ldr	r2, [pc, #448]	@ (8015630 <HAL_SPI_TransmitReceive+0x294>)
 801546e:	4293      	cmp	r3, r2
 8015470:	d009      	beq.n	8015486 <HAL_SPI_TransmitReceive+0xea>
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	4a6f      	ldr	r2, [pc, #444]	@ (8015634 <HAL_SPI_TransmitReceive+0x298>)
 8015478:	4293      	cmp	r3, r2
 801547a:	d004      	beq.n	8015486 <HAL_SPI_TransmitReceive+0xea>
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	4a6d      	ldr	r2, [pc, #436]	@ (8015638 <HAL_SPI_TransmitReceive+0x29c>)
 8015482:	4293      	cmp	r3, r2
 8015484:	d102      	bne.n	801548c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8015486:	2310      	movs	r3, #16
 8015488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801548a:	e001      	b.n	8015490 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801548c:	2308      	movs	r3, #8
 801548e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	685a      	ldr	r2, [r3, #4]
 8015496:	4b69      	ldr	r3, [pc, #420]	@ (801563c <HAL_SPI_TransmitReceive+0x2a0>)
 8015498:	4013      	ands	r3, r2
 801549a:	8879      	ldrh	r1, [r7, #2]
 801549c:	68fa      	ldr	r2, [r7, #12]
 801549e:	6812      	ldr	r2, [r2, #0]
 80154a0:	430b      	orrs	r3, r1
 80154a2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	f042 0201 	orr.w	r2, r2, #1
 80154b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80154bc:	d107      	bne.n	80154ce <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80154cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	68db      	ldr	r3, [r3, #12]
 80154d2:	2b0f      	cmp	r3, #15
 80154d4:	f240 80a2 	bls.w	801561c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80154d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154da:	089b      	lsrs	r3, r3, #2
 80154dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80154de:	e094      	b.n	801560a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	695b      	ldr	r3, [r3, #20]
 80154e6:	f003 0302 	and.w	r3, r3, #2
 80154ea:	2b02      	cmp	r3, #2
 80154ec:	d120      	bne.n	8015530 <HAL_SPI_TransmitReceive+0x194>
 80154ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d01d      	beq.n	8015530 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80154f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154f6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80154f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154fa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d217      	bcs.n	8015530 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	6812      	ldr	r2, [r2, #0]
 801550a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015510:	1d1a      	adds	r2, r3, #4
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801551c:	b29b      	uxth	r3, r3
 801551e:	3b01      	subs	r3, #1
 8015520:	b29a      	uxth	r2, r3
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801552e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	695b      	ldr	r3, [r3, #20]
 8015536:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015538:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801553a:	2b00      	cmp	r3, #0
 801553c:	d065      	beq.n	801560a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	695b      	ldr	r3, [r3, #20]
 8015544:	f003 0301 	and.w	r3, r3, #1
 8015548:	2b01      	cmp	r3, #1
 801554a:	d118      	bne.n	801557e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681a      	ldr	r2, [r3, #0]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015554:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015556:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801555c:	1d1a      	adds	r2, r3, #4
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015568:	b29b      	uxth	r3, r3
 801556a:	3b01      	subs	r3, #1
 801556c:	b29a      	uxth	r2, r3
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801557a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801557c:	e045      	b.n	801560a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801557e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015580:	8bfb      	ldrh	r3, [r7, #30]
 8015582:	429a      	cmp	r2, r3
 8015584:	d21d      	bcs.n	80155c2 <HAL_SPI_TransmitReceive+0x226>
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801558c:	2b00      	cmp	r3, #0
 801558e:	d018      	beq.n	80155c2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015598:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801559a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155a0:	1d1a      	adds	r2, r3, #4
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	3b01      	subs	r3, #1
 80155b0:	b29a      	uxth	r2, r3
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80155c0:	e023      	b.n	801560a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80155c2:	f7f3 ffe7 	bl	8009594 <HAL_GetTick>
 80155c6:	4602      	mov	r2, r0
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	1ad3      	subs	r3, r2, r3
 80155cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d803      	bhi.n	80155da <HAL_SPI_TransmitReceive+0x23e>
 80155d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155d8:	d102      	bne.n	80155e0 <HAL_SPI_TransmitReceive+0x244>
 80155da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d114      	bne.n	801560a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f000 fdcf 	bl	8016184 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2201      	movs	r2, #1
 80155fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2200      	movs	r2, #0
 8015602:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015606:	2303      	movs	r3, #3
 8015608:	e1fd      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801560a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801560c:	2b00      	cmp	r3, #0
 801560e:	f47f af67 	bne.w	80154e0 <HAL_SPI_TransmitReceive+0x144>
 8015612:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015614:	2b00      	cmp	r3, #0
 8015616:	f47f af63 	bne.w	80154e0 <HAL_SPI_TransmitReceive+0x144>
 801561a:	e1ce      	b.n	80159ba <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	2b07      	cmp	r3, #7
 8015622:	f240 81c2 	bls.w	80159aa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8015626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015628:	085b      	lsrs	r3, r3, #1
 801562a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801562c:	e0c9      	b.n	80157c2 <HAL_SPI_TransmitReceive+0x426>
 801562e:	bf00      	nop
 8015630:	40013000 	.word	0x40013000
 8015634:	40003800 	.word	0x40003800
 8015638:	40003c00 	.word	0x40003c00
 801563c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	695b      	ldr	r3, [r3, #20]
 8015646:	f003 0302 	and.w	r3, r3, #2
 801564a:	2b02      	cmp	r3, #2
 801564c:	d11f      	bne.n	801568e <HAL_SPI_TransmitReceive+0x2f2>
 801564e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015650:	2b00      	cmp	r3, #0
 8015652:	d01c      	beq.n	801568e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015654:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015656:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801565a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801565c:	429a      	cmp	r2, r3
 801565e:	d216      	bcs.n	801568e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015664:	881a      	ldrh	r2, [r3, #0]
 8015666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015668:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801566e:	1c9a      	adds	r2, r3, #2
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801567a:	b29b      	uxth	r3, r3
 801567c:	3b01      	subs	r3, #1
 801567e:	b29a      	uxth	r2, r3
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801568c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	695b      	ldr	r3, [r3, #20]
 8015694:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015696:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015698:	2b00      	cmp	r3, #0
 801569a:	f000 8092 	beq.w	80157c2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	695b      	ldr	r3, [r3, #20]
 80156a4:	f003 0301 	and.w	r3, r3, #1
 80156a8:	2b01      	cmp	r3, #1
 80156aa:	d118      	bne.n	80156de <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156b0:	6a3a      	ldr	r2, [r7, #32]
 80156b2:	8812      	ldrh	r2, [r2, #0]
 80156b4:	b292      	uxth	r2, r2
 80156b6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156bc:	1c9a      	adds	r2, r3, #2
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	3b01      	subs	r3, #1
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156dc:	e071      	b.n	80157c2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80156de:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80156e0:	8bfb      	ldrh	r3, [r7, #30]
 80156e2:	429a      	cmp	r2, r3
 80156e4:	d228      	bcs.n	8015738 <HAL_SPI_TransmitReceive+0x39c>
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d023      	beq.n	8015738 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156f4:	6a3a      	ldr	r2, [r7, #32]
 80156f6:	8812      	ldrh	r2, [r2, #0]
 80156f8:	b292      	uxth	r2, r2
 80156fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015700:	1c9a      	adds	r2, r3, #2
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801570a:	6a3a      	ldr	r2, [r7, #32]
 801570c:	8812      	ldrh	r2, [r2, #0]
 801570e:	b292      	uxth	r2, r2
 8015710:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015716:	1c9a      	adds	r2, r3, #2
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015722:	b29b      	uxth	r3, r3
 8015724:	3b02      	subs	r3, #2
 8015726:	b29a      	uxth	r2, r3
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015734:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015736:	e044      	b.n	80157c2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015738:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801573a:	2b01      	cmp	r3, #1
 801573c:	d11d      	bne.n	801577a <HAL_SPI_TransmitReceive+0x3de>
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015744:	2b00      	cmp	r3, #0
 8015746:	d018      	beq.n	801577a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801574c:	6a3a      	ldr	r2, [r7, #32]
 801574e:	8812      	ldrh	r2, [r2, #0]
 8015750:	b292      	uxth	r2, r2
 8015752:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015758:	1c9a      	adds	r2, r3, #2
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015764:	b29b      	uxth	r3, r3
 8015766:	3b01      	subs	r3, #1
 8015768:	b29a      	uxth	r2, r3
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015776:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015778:	e023      	b.n	80157c2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801577a:	f7f3 ff0b 	bl	8009594 <HAL_GetTick>
 801577e:	4602      	mov	r2, r0
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	1ad3      	subs	r3, r2, r3
 8015784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015786:	429a      	cmp	r2, r3
 8015788:	d803      	bhi.n	8015792 <HAL_SPI_TransmitReceive+0x3f6>
 801578a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015790:	d102      	bne.n	8015798 <HAL_SPI_TransmitReceive+0x3fc>
 8015792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015794:	2b00      	cmp	r3, #0
 8015796:	d114      	bne.n	80157c2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f000 fcf3 	bl	8016184 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	2201      	movs	r2, #1
 80157b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2200      	movs	r2, #0
 80157ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80157be:	2303      	movs	r3, #3
 80157c0:	e121      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80157c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f47f af3b 	bne.w	8015640 <HAL_SPI_TransmitReceive+0x2a4>
 80157ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	f47f af37 	bne.w	8015640 <HAL_SPI_TransmitReceive+0x2a4>
 80157d2:	e0f2      	b.n	80159ba <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	695b      	ldr	r3, [r3, #20]
 80157da:	f003 0302 	and.w	r3, r3, #2
 80157de:	2b02      	cmp	r3, #2
 80157e0:	d121      	bne.n	8015826 <HAL_SPI_TransmitReceive+0x48a>
 80157e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d01e      	beq.n	8015826 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80157e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80157ea:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80157ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ee:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d218      	bcs.n	8015826 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	3320      	adds	r3, #32
 80157fe:	7812      	ldrb	r2, [r2, #0]
 8015800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015806:	1c5a      	adds	r2, r3, #1
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015812:	b29b      	uxth	r3, r3
 8015814:	3b01      	subs	r3, #1
 8015816:	b29a      	uxth	r2, r3
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015824:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	695b      	ldr	r3, [r3, #20]
 801582c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801582e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015830:	2b00      	cmp	r3, #0
 8015832:	f000 80ba 	beq.w	80159aa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	695b      	ldr	r3, [r3, #20]
 801583c:	f003 0301 	and.w	r3, r3, #1
 8015840:	2b01      	cmp	r3, #1
 8015842:	d11b      	bne.n	801587c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015850:	7812      	ldrb	r2, [r2, #0]
 8015852:	b2d2      	uxtb	r2, r2
 8015854:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801585a:	1c5a      	adds	r2, r3, #1
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015866:	b29b      	uxth	r3, r3
 8015868:	3b01      	subs	r3, #1
 801586a:	b29a      	uxth	r2, r3
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015878:	853b      	strh	r3, [r7, #40]	@ 0x28
 801587a:	e096      	b.n	80159aa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801587c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801587e:	8bfb      	ldrh	r3, [r7, #30]
 8015880:	429a      	cmp	r2, r3
 8015882:	d24a      	bcs.n	801591a <HAL_SPI_TransmitReceive+0x57e>
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801588a:	2b00      	cmp	r3, #0
 801588c:	d045      	beq.n	801591a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801589a:	7812      	ldrb	r2, [r2, #0]
 801589c:	b2d2      	uxtb	r2, r2
 801589e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a4:	1c5a      	adds	r2, r3, #1
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158b6:	7812      	ldrb	r2, [r2, #0]
 80158b8:	b2d2      	uxtb	r2, r2
 80158ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158c0:	1c5a      	adds	r2, r3, #1
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158d2:	7812      	ldrb	r2, [r2, #0]
 80158d4:	b2d2      	uxtb	r2, r2
 80158d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158dc:	1c5a      	adds	r2, r3, #1
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158ee:	7812      	ldrb	r2, [r2, #0]
 80158f0:	b2d2      	uxtb	r2, r2
 80158f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158f8:	1c5a      	adds	r2, r3, #1
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015904:	b29b      	uxth	r3, r3
 8015906:	3b04      	subs	r3, #4
 8015908:	b29a      	uxth	r2, r3
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015916:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015918:	e047      	b.n	80159aa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801591a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801591c:	2b03      	cmp	r3, #3
 801591e:	d820      	bhi.n	8015962 <HAL_SPI_TransmitReceive+0x5c6>
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015926:	2b00      	cmp	r3, #0
 8015928:	d01b      	beq.n	8015962 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015936:	7812      	ldrb	r2, [r2, #0]
 8015938:	b2d2      	uxtb	r2, r2
 801593a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015940:	1c5a      	adds	r2, r3, #1
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801594c:	b29b      	uxth	r3, r3
 801594e:	3b01      	subs	r3, #1
 8015950:	b29a      	uxth	r2, r3
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801595e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015960:	e023      	b.n	80159aa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015962:	f7f3 fe17 	bl	8009594 <HAL_GetTick>
 8015966:	4602      	mov	r2, r0
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	1ad3      	subs	r3, r2, r3
 801596c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801596e:	429a      	cmp	r2, r3
 8015970:	d803      	bhi.n	801597a <HAL_SPI_TransmitReceive+0x5de>
 8015972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015978:	d102      	bne.n	8015980 <HAL_SPI_TransmitReceive+0x5e4>
 801597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801597c:	2b00      	cmp	r3, #0
 801597e:	d114      	bne.n	80159aa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015980:	68f8      	ldr	r0, [r7, #12]
 8015982:	f000 fbff 	bl	8016184 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801598c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2201      	movs	r2, #1
 801599a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	2200      	movs	r2, #0
 80159a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80159a6:	2303      	movs	r3, #3
 80159a8:	e02d      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80159aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	f47f af11 	bne.w	80157d4 <HAL_SPI_TransmitReceive+0x438>
 80159b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f47f af0d 	bne.w	80157d4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80159ba:	69bb      	ldr	r3, [r7, #24]
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159c0:	2200      	movs	r2, #0
 80159c2:	2108      	movs	r1, #8
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	f000 fc7d 	bl	80162c4 <SPI_WaitOnFlagUntilTimeout>
 80159ca:	4603      	mov	r3, r0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d007      	beq.n	80159e0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159d6:	f043 0220 	orr.w	r2, r3, #32
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80159e0:	68f8      	ldr	r0, [r7, #12]
 80159e2:	f000 fbcf 	bl	8016184 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2201      	movs	r2, #1
 80159ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2200      	movs	r2, #0
 80159f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d001      	beq.n	8015a04 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015a00:	2301      	movs	r3, #1
 8015a02:	e000      	b.n	8015a06 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8015a04:	2300      	movs	r3, #0
  }
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3730      	adds	r7, #48	@ 0x30
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
 8015a0e:	bf00      	nop

08015a10 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b084      	sub	sp, #16
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	60f8      	str	r0, [r7, #12]
 8015a18:	60b9      	str	r1, [r7, #8]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	2b01      	cmp	r3, #1
 8015a28:	d001      	beq.n	8015a2e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8015a2a:	2302      	movs	r3, #2
 8015a2c:	e126      	b.n	8015c7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d002      	beq.n	8015a3a <HAL_SPI_Transmit_DMA+0x2a>
 8015a34:	88fb      	ldrh	r3, [r7, #6]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d101      	bne.n	8015a3e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	e11e      	b.n	8015c7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d101      	bne.n	8015a4c <HAL_SPI_Transmit_DMA+0x3c>
 8015a48:	2302      	movs	r3, #2
 8015a4a:	e117      	b.n	8015c7c <HAL_SPI_Transmit_DMA+0x26c>
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2201      	movs	r2, #1
 8015a50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2203      	movs	r2, #3
 8015a58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	68ba      	ldr	r2, [r7, #8]
 8015a68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	88fa      	ldrh	r2, [r7, #6]
 8015a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	88fa      	ldrh	r2, [r7, #6]
 8015a76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2200      	movs	r2, #0
 8015a84:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2200      	movs	r2, #0
 8015a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	689b      	ldr	r3, [r3, #8]
 8015aa0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015aa4:	d108      	bne.n	8015ab8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	681a      	ldr	r2, [r3, #0]
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015ab4:	601a      	str	r2, [r3, #0]
 8015ab6:	e009      	b.n	8015acc <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015aca:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	2b0f      	cmp	r3, #15
 8015ad2:	d905      	bls.n	8015ae0 <HAL_SPI_Transmit_DMA+0xd0>
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ad8:	699b      	ldr	r3, [r3, #24]
 8015ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ade:	d10f      	bne.n	8015b00 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015ae4:	2b07      	cmp	r3, #7
 8015ae6:	d911      	bls.n	8015b0c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aec:	699b      	ldr	r3, [r3, #24]
 8015aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015af2:	d00b      	beq.n	8015b0c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015af8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015afe:	d005      	beq.n	8015b0c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2200      	movs	r2, #0
 8015b04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015b08:	2301      	movs	r3, #1
 8015b0a:	e0b7      	b.n	8015c7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	2b07      	cmp	r3, #7
 8015b12:	d820      	bhi.n	8015b56 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b18:	699b      	ldr	r3, [r3, #24]
 8015b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015b1e:	d109      	bne.n	8015b34 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	3301      	adds	r3, #1
 8015b2a:	105b      	asrs	r3, r3, #1
 8015b2c:	b29a      	uxth	r2, r3
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b38:	699b      	ldr	r3, [r3, #24]
 8015b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b3e:	d11e      	bne.n	8015b7e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	3303      	adds	r3, #3
 8015b4a:	109b      	asrs	r3, r3, #2
 8015b4c:	b29a      	uxth	r2, r3
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015b54:	e013      	b.n	8015b7e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	2b0f      	cmp	r3, #15
 8015b5c:	d80f      	bhi.n	8015b7e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b62:	699b      	ldr	r3, [r3, #24]
 8015b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b68:	d109      	bne.n	8015b7e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b70:	b29b      	uxth	r3, r3
 8015b72:	3301      	adds	r3, #1
 8015b74:	105b      	asrs	r3, r3, #1
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b82:	4a40      	ldr	r2, [pc, #256]	@ (8015c84 <HAL_SPI_Transmit_DMA+0x274>)
 8015b84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8015c88 <HAL_SPI_Transmit_DMA+0x278>)
 8015b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b92:	4a3e      	ldr	r2, [pc, #248]	@ (8015c8c <HAL_SPI_Transmit_DMA+0x27c>)
 8015b94:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	689a      	ldr	r2, [r3, #8]
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015bac:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015bb6:	4619      	mov	r1, r3
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	3320      	adds	r3, #32
 8015bbe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015bc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015bc8:	f7f6 f972 	bl	800beb0 <HAL_DMA_Start_IT>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d011      	beq.n	8015bf6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bd8:	f043 0210 	orr.w	r2, r3, #16
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	2201      	movs	r2, #1
 8015be6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	2200      	movs	r2, #0
 8015bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	e042      	b.n	8015c7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015bfa:	69db      	ldr	r3, [r3, #28]
 8015bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015c00:	d108      	bne.n	8015c14 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	6859      	ldr	r1, [r3, #4]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	681a      	ldr	r2, [r3, #0]
 8015c0c:	4b20      	ldr	r3, [pc, #128]	@ (8015c90 <HAL_SPI_Transmit_DMA+0x280>)
 8015c0e:	400b      	ands	r3, r1
 8015c10:	6053      	str	r3, [r2, #4]
 8015c12:	e009      	b.n	8015c28 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	685a      	ldr	r2, [r3, #4]
 8015c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8015c90 <HAL_SPI_Transmit_DMA+0x280>)
 8015c1c:	4013      	ands	r3, r2
 8015c1e:	88f9      	ldrh	r1, [r7, #6]
 8015c20:	68fa      	ldr	r2, [r7, #12]
 8015c22:	6812      	ldr	r2, [r2, #0]
 8015c24:	430b      	orrs	r3, r1
 8015c26:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	689a      	ldr	r2, [r3, #8]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015c36:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	691a      	ldr	r2, [r3, #16]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015c46:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f042 0201 	orr.w	r2, r2, #1
 8015c56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015c60:	d107      	bne.n	8015c72 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c70:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2200      	movs	r2, #0
 8015c76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015c7a:	2300      	movs	r3, #0
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	080160ef 	.word	0x080160ef
 8015c88:	080160a9 	.word	0x080160a9
 8015c8c:	0801610b 	.word	0x0801610b
 8015c90:	ffff0000 	.word	0xffff0000

08015c94 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b08a      	sub	sp, #40	@ 0x28
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	691b      	ldr	r3, [r3, #16]
 8015ca2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	695b      	ldr	r3, [r3, #20]
 8015caa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015cac:	6a3a      	ldr	r2, [r7, #32]
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	4013      	ands	r3, r2
 8015cb2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	689b      	ldr	r3, [r3, #8]
 8015cba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015cc6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	3330      	adds	r3, #48	@ 0x30
 8015cce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d010      	beq.n	8015cfc <HAL_SPI_IRQHandler+0x68>
 8015cda:	6a3b      	ldr	r3, [r7, #32]
 8015cdc:	f003 0308 	and.w	r3, r3, #8
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00b      	beq.n	8015cfc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	699a      	ldr	r2, [r3, #24]
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015cf2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f000 f9cd 	bl	8016094 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015cfa:	e192      	b.n	8016022 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015cfc:	69bb      	ldr	r3, [r7, #24]
 8015cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d113      	bne.n	8015d2e <HAL_SPI_IRQHandler+0x9a>
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	f003 0320 	and.w	r3, r3, #32
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d10e      	bne.n	8015d2e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015d10:	69bb      	ldr	r3, [r7, #24]
 8015d12:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d009      	beq.n	8015d2e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	4798      	blx	r3
    handled = 1UL;
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d2e:	69bb      	ldr	r3, [r7, #24]
 8015d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d10f      	bne.n	8015d58 <HAL_SPI_IRQHandler+0xc4>
 8015d38:	69bb      	ldr	r3, [r7, #24]
 8015d3a:	f003 0301 	and.w	r3, r3, #1
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d00a      	beq.n	8015d58 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d42:	69bb      	ldr	r3, [r7, #24]
 8015d44:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d105      	bne.n	8015d58 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	4798      	blx	r3
    handled = 1UL;
 8015d54:	2301      	movs	r3, #1
 8015d56:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d58:	69bb      	ldr	r3, [r7, #24]
 8015d5a:	f003 0320 	and.w	r3, r3, #32
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d10f      	bne.n	8015d82 <HAL_SPI_IRQHandler+0xee>
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	f003 0302 	and.w	r3, r3, #2
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d00a      	beq.n	8015d82 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d6c:	69bb      	ldr	r3, [r7, #24]
 8015d6e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d105      	bne.n	8015d82 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	4798      	blx	r3
    handled = 1UL;
 8015d7e:	2301      	movs	r3, #1
 8015d80:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	f040 8147 	bne.w	8016018 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015d8a:	69bb      	ldr	r3, [r7, #24]
 8015d8c:	f003 0308 	and.w	r3, r3, #8
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f000 808b 	beq.w	8015eac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	699a      	ldr	r2, [r3, #24]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f042 0208 	orr.w	r2, r2, #8
 8015da4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	699a      	ldr	r2, [r3, #24]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	f042 0210 	orr.w	r2, r2, #16
 8015db4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	699a      	ldr	r2, [r3, #24]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015dc4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	691a      	ldr	r2, [r3, #16]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	f022 0208 	bic.w	r2, r2, #8
 8015dd4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d13d      	bne.n	8015e60 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015de4:	e036      	b.n	8015e54 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	68db      	ldr	r3, [r3, #12]
 8015dea:	2b0f      	cmp	r3, #15
 8015dec:	d90b      	bls.n	8015e06 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015df6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015df8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dfe:	1d1a      	adds	r2, r3, #4
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	665a      	str	r2, [r3, #100]	@ 0x64
 8015e04:	e01d      	b.n	8015e42 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	68db      	ldr	r3, [r3, #12]
 8015e0a:	2b07      	cmp	r3, #7
 8015e0c:	d90b      	bls.n	8015e26 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e12:	68fa      	ldr	r2, [r7, #12]
 8015e14:	8812      	ldrh	r2, [r2, #0]
 8015e16:	b292      	uxth	r2, r2
 8015e18:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e1e:	1c9a      	adds	r2, r3, #2
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	665a      	str	r2, [r3, #100]	@ 0x64
 8015e24:	e00d      	b.n	8015e42 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e32:	7812      	ldrb	r2, [r2, #0]
 8015e34:	b2d2      	uxtb	r2, r2
 8015e36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e3c:	1c5a      	adds	r2, r3, #1
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	3b01      	subs	r3, #1
 8015e4c:	b29a      	uxth	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d1c2      	bne.n	8015de6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f000 f98f 	bl	8016184 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2201      	movs	r2, #1
 8015e6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d003      	beq.n	8015e80 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 f901 	bl	8016080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015e7e:	e0d0      	b.n	8016022 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015e80:	7cfb      	ldrb	r3, [r7, #19]
 8015e82:	2b05      	cmp	r3, #5
 8015e84:	d103      	bne.n	8015e8e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 f8e6 	bl	8016058 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015e8c:	e0c6      	b.n	801601c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015e8e:	7cfb      	ldrb	r3, [r7, #19]
 8015e90:	2b04      	cmp	r3, #4
 8015e92:	d103      	bne.n	8015e9c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 f8d5 	bl	8016044 <HAL_SPI_RxCpltCallback>
    return;
 8015e9a:	e0bf      	b.n	801601c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015e9c:	7cfb      	ldrb	r3, [r7, #19]
 8015e9e:	2b03      	cmp	r3, #3
 8015ea0:	f040 80bc 	bne.w	801601c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f000 f8c3 	bl	8016030 <HAL_SPI_TxCpltCallback>
    return;
 8015eaa:	e0b7      	b.n	801601c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f000 80b5 	beq.w	8016022 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d00f      	beq.n	8015ee2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ec8:	f043 0204 	orr.w	r2, r3, #4
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	699a      	ldr	r2, [r3, #24]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ee0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d00f      	beq.n	8015f0c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ef2:	f043 0201 	orr.w	r2, r3, #1
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	699a      	ldr	r2, [r3, #24]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015f0a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d00f      	beq.n	8015f36 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f1c:	f043 0208 	orr.w	r2, r3, #8
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	699a      	ldr	r2, [r3, #24]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f34:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015f36:	69bb      	ldr	r3, [r7, #24]
 8015f38:	f003 0320 	and.w	r3, r3, #32
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d00f      	beq.n	8015f60 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	699a      	ldr	r2, [r3, #24]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	f042 0220 	orr.w	r2, r2, #32
 8015f5e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d05a      	beq.n	8016020 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	681a      	ldr	r2, [r3, #0]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	f022 0201 	bic.w	r2, r2, #1
 8015f78:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	6919      	ldr	r1, [r3, #16]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	4b28      	ldr	r3, [pc, #160]	@ (8016028 <HAL_SPI_IRQHandler+0x394>)
 8015f86:	400b      	ands	r3, r1
 8015f88:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015f90:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015f94:	d138      	bne.n	8016008 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	689a      	ldr	r2, [r3, #8]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015fa4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d013      	beq.n	8015fd6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015fb2:	4a1e      	ldr	r2, [pc, #120]	@ (801602c <HAL_SPI_IRQHandler+0x398>)
 8015fb4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7f6 fd00 	bl	800c9c0 <HAL_DMA_Abort_IT>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d007      	beq.n	8015fd6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d020      	beq.n	8016020 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fe2:	4a12      	ldr	r2, [pc, #72]	@ (801602c <HAL_SPI_IRQHandler+0x398>)
 8015fe4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7f6 fce8 	bl	800c9c0 <HAL_DMA_Abort_IT>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d014      	beq.n	8016020 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ffc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8016006:	e00b      	b.n	8016020 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2201      	movs	r2, #1
 801600c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 f835 	bl	8016080 <HAL_SPI_ErrorCallback>
    return;
 8016016:	e003      	b.n	8016020 <HAL_SPI_IRQHandler+0x38c>
    return;
 8016018:	bf00      	nop
 801601a:	e002      	b.n	8016022 <HAL_SPI_IRQHandler+0x38e>
    return;
 801601c:	bf00      	nop
 801601e:	e000      	b.n	8016022 <HAL_SPI_IRQHandler+0x38e>
    return;
 8016020:	bf00      	nop
  }
}
 8016022:	3728      	adds	r7, #40	@ 0x28
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}
 8016028:	fffffc94 	.word	0xfffffc94
 801602c:	08016151 	.word	0x08016151

08016030 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016030:	b480      	push	{r7}
 8016032:	b083      	sub	sp, #12
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8016038:	bf00      	nop
 801603a:	370c      	adds	r7, #12
 801603c:	46bd      	mov	sp, r7
 801603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016042:	4770      	bx	lr

08016044 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016044:	b480      	push	{r7}
 8016046:	b083      	sub	sp, #12
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801604c:	bf00      	nop
 801604e:	370c      	adds	r7, #12
 8016050:	46bd      	mov	sp, r7
 8016052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016056:	4770      	bx	lr

08016058 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016058:	b480      	push	{r7}
 801605a:	b083      	sub	sp, #12
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8016060:	bf00      	nop
 8016062:	370c      	adds	r7, #12
 8016064:	46bd      	mov	sp, r7
 8016066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606a:	4770      	bx	lr

0801606c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801606c:	b480      	push	{r7}
 801606e:	b083      	sub	sp, #12
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8016074:	bf00      	nop
 8016076:	370c      	adds	r7, #12
 8016078:	46bd      	mov	sp, r7
 801607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607e:	4770      	bx	lr

08016080 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016080:	b480      	push	{r7}
 8016082:	b083      	sub	sp, #12
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016088:	bf00      	nop
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr

08016094 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016094:	b480      	push	{r7}
 8016096:	b083      	sub	sp, #12
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801609c:	bf00      	nop
 801609e:	370c      	adds	r7, #12
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160b4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	2b07      	cmp	r3, #7
 80160c0:	d011      	beq.n	80160e6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160c6:	69db      	ldr	r3, [r3, #28]
 80160c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80160cc:	d103      	bne.n	80160d6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f7ff ffae 	bl	8016030 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80160d4:	e007      	b.n	80160e6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	691a      	ldr	r2, [r3, #16]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	f042 0208 	orr.w	r2, r2, #8
 80160e4:	611a      	str	r2, [r3, #16]
}
 80160e6:	bf00      	nop
 80160e8:	3710      	adds	r7, #16
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}

080160ee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80160ee:	b580      	push	{r7, lr}
 80160f0:	b084      	sub	sp, #16
 80160f2:	af00      	add	r7, sp, #0
 80160f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160fa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80160fc:	68f8      	ldr	r0, [r7, #12]
 80160fe:	f7ff ffb5 	bl	801606c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8016102:	bf00      	nop
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b084      	sub	sp, #16
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016116:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f7f7 fdcf 	bl	800dcbc <HAL_DMA_GetError>
 801611e:	4603      	mov	r3, r0
 8016120:	2b02      	cmp	r3, #2
 8016122:	d011      	beq.n	8016148 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f000 f82d 	bl	8016184 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016130:	f043 0210 	orr.w	r2, r3, #16
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2201      	movs	r2, #1
 801613e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8016142:	68f8      	ldr	r0, [r7, #12]
 8016144:	f7ff ff9c 	bl	8016080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8016148:	bf00      	nop
 801614a:	3710      	adds	r7, #16
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}

08016150 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b084      	sub	sp, #16
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801615c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2200      	movs	r2, #0
 801616a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2201      	movs	r2, #1
 8016172:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8016176:	68f8      	ldr	r0, [r7, #12]
 8016178:	f7ff ff82 	bl	8016080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801617c:	bf00      	nop
 801617e:	3710      	adds	r7, #16
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	695b      	ldr	r3, [r3, #20]
 8016192:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	699a      	ldr	r2, [r3, #24]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	f042 0208 	orr.w	r2, r2, #8
 80161a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	699a      	ldr	r2, [r3, #24]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	f042 0210 	orr.w	r2, r2, #16
 80161b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f022 0201 	bic.w	r2, r2, #1
 80161c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	6919      	ldr	r1, [r3, #16]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	4b3c      	ldr	r3, [pc, #240]	@ (80162c0 <SPI_CloseTransfer+0x13c>)
 80161d0:	400b      	ands	r3, r1
 80161d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	689a      	ldr	r2, [r3, #8]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80161e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	2b04      	cmp	r3, #4
 80161ee:	d014      	beq.n	801621a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	f003 0320 	and.w	r3, r3, #32
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d00f      	beq.n	801621a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016200:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	699a      	ldr	r2, [r3, #24]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	f042 0220 	orr.w	r2, r2, #32
 8016218:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016220:	b2db      	uxtb	r3, r3
 8016222:	2b03      	cmp	r3, #3
 8016224:	d014      	beq.n	8016250 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801622c:	2b00      	cmp	r3, #0
 801622e:	d00f      	beq.n	8016250 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016236:	f043 0204 	orr.w	r2, r3, #4
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	699a      	ldr	r2, [r3, #24]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801624e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00f      	beq.n	801627a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016260:	f043 0201 	orr.w	r2, r3, #1
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	699a      	ldr	r2, [r3, #24]
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016278:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016280:	2b00      	cmp	r3, #0
 8016282:	d00f      	beq.n	80162a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801628a:	f043 0208 	orr.w	r2, r3, #8
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	699a      	ldr	r2, [r3, #24]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80162a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2200      	movs	r2, #0
 80162a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2200      	movs	r2, #0
 80162b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80162b4:	bf00      	nop
 80162b6:	3714      	adds	r7, #20
 80162b8:	46bd      	mov	sp, r7
 80162ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162be:	4770      	bx	lr
 80162c0:	fffffc90 	.word	0xfffffc90

080162c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b084      	sub	sp, #16
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	603b      	str	r3, [r7, #0]
 80162d0:	4613      	mov	r3, r2
 80162d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162d4:	e010      	b.n	80162f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80162d6:	f7f3 f95d 	bl	8009594 <HAL_GetTick>
 80162da:	4602      	mov	r2, r0
 80162dc:	69bb      	ldr	r3, [r7, #24]
 80162de:	1ad3      	subs	r3, r2, r3
 80162e0:	683a      	ldr	r2, [r7, #0]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d803      	bhi.n	80162ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162ec:	d102      	bne.n	80162f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d101      	bne.n	80162f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80162f4:	2303      	movs	r3, #3
 80162f6:	e00f      	b.n	8016318 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	695a      	ldr	r2, [r3, #20]
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	4013      	ands	r3, r2
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	429a      	cmp	r2, r3
 8016306:	bf0c      	ite	eq
 8016308:	2301      	moveq	r3, #1
 801630a:	2300      	movne	r3, #0
 801630c:	b2db      	uxtb	r3, r3
 801630e:	461a      	mov	r2, r3
 8016310:	79fb      	ldrb	r3, [r7, #7]
 8016312:	429a      	cmp	r2, r3
 8016314:	d0df      	beq.n	80162d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8016316:	2300      	movs	r3, #0
}
 8016318:	4618      	mov	r0, r3
 801631a:	3710      	adds	r7, #16
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8016320:	b480      	push	{r7}
 8016322:	b085      	sub	sp, #20
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801632c:	095b      	lsrs	r3, r3, #5
 801632e:	3301      	adds	r3, #1
 8016330:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	68db      	ldr	r3, [r3, #12]
 8016336:	3301      	adds	r3, #1
 8016338:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	3307      	adds	r3, #7
 801633e:	08db      	lsrs	r3, r3, #3
 8016340:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	68fa      	ldr	r2, [r7, #12]
 8016346:	fb02 f303 	mul.w	r3, r2, r3
}
 801634a:	4618      	mov	r0, r3
 801634c:	3714      	adds	r7, #20
 801634e:	46bd      	mov	sp, r7
 8016350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016354:	4770      	bx	lr

08016356 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b082      	sub	sp, #8
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d101      	bne.n	8016368 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016364:	2301      	movs	r3, #1
 8016366:	e049      	b.n	80163fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801636e:	b2db      	uxtb	r3, r3
 8016370:	2b00      	cmp	r3, #0
 8016372:	d106      	bne.n	8016382 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2200      	movs	r2, #0
 8016378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7f2 ff13 	bl	80091a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2202      	movs	r2, #2
 8016386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681a      	ldr	r2, [r3, #0]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	3304      	adds	r3, #4
 8016392:	4619      	mov	r1, r3
 8016394:	4610      	mov	r0, r2
 8016396:	f000 fedb 	bl	8017150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2201      	movs	r2, #1
 801639e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2201      	movs	r2, #1
 80163ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2201      	movs	r2, #1
 80163b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2201      	movs	r2, #1
 80163be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2201      	movs	r2, #1
 80163ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2201      	movs	r2, #1
 80163d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2201      	movs	r2, #1
 80163de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2201      	movs	r2, #1
 80163e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2201      	movs	r2, #1
 80163ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2201      	movs	r2, #1
 80163f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80163fa:	2300      	movs	r3, #0
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3708      	adds	r7, #8
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}

08016404 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016404:	b480      	push	{r7}
 8016406:	b085      	sub	sp, #20
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016412:	b2db      	uxtb	r3, r3
 8016414:	2b01      	cmp	r3, #1
 8016416:	d001      	beq.n	801641c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016418:	2301      	movs	r3, #1
 801641a:	e056      	b.n	80164ca <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2202      	movs	r2, #2
 8016420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	4a2b      	ldr	r2, [pc, #172]	@ (80164d8 <HAL_TIM_Base_Start+0xd4>)
 801642a:	4293      	cmp	r3, r2
 801642c:	d02c      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016436:	d027      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	4a27      	ldr	r2, [pc, #156]	@ (80164dc <HAL_TIM_Base_Start+0xd8>)
 801643e:	4293      	cmp	r3, r2
 8016440:	d022      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	4a26      	ldr	r2, [pc, #152]	@ (80164e0 <HAL_TIM_Base_Start+0xdc>)
 8016448:	4293      	cmp	r3, r2
 801644a:	d01d      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	4a24      	ldr	r2, [pc, #144]	@ (80164e4 <HAL_TIM_Base_Start+0xe0>)
 8016452:	4293      	cmp	r3, r2
 8016454:	d018      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	4a23      	ldr	r2, [pc, #140]	@ (80164e8 <HAL_TIM_Base_Start+0xe4>)
 801645c:	4293      	cmp	r3, r2
 801645e:	d013      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	4a21      	ldr	r2, [pc, #132]	@ (80164ec <HAL_TIM_Base_Start+0xe8>)
 8016466:	4293      	cmp	r3, r2
 8016468:	d00e      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	4a20      	ldr	r2, [pc, #128]	@ (80164f0 <HAL_TIM_Base_Start+0xec>)
 8016470:	4293      	cmp	r3, r2
 8016472:	d009      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4a1e      	ldr	r2, [pc, #120]	@ (80164f4 <HAL_TIM_Base_Start+0xf0>)
 801647a:	4293      	cmp	r3, r2
 801647c:	d004      	beq.n	8016488 <HAL_TIM_Base_Start+0x84>
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	4a1d      	ldr	r2, [pc, #116]	@ (80164f8 <HAL_TIM_Base_Start+0xf4>)
 8016484:	4293      	cmp	r3, r2
 8016486:	d115      	bne.n	80164b4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	689a      	ldr	r2, [r3, #8]
 801648e:	4b1b      	ldr	r3, [pc, #108]	@ (80164fc <HAL_TIM_Base_Start+0xf8>)
 8016490:	4013      	ands	r3, r2
 8016492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2b06      	cmp	r3, #6
 8016498:	d015      	beq.n	80164c6 <HAL_TIM_Base_Start+0xc2>
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80164a0:	d011      	beq.n	80164c6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	681a      	ldr	r2, [r3, #0]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	f042 0201 	orr.w	r2, r2, #1
 80164b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164b2:	e008      	b.n	80164c6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	681a      	ldr	r2, [r3, #0]
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	f042 0201 	orr.w	r2, r2, #1
 80164c2:	601a      	str	r2, [r3, #0]
 80164c4:	e000      	b.n	80164c8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80164c8:	2300      	movs	r3, #0
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3714      	adds	r7, #20
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop
 80164d8:	40010000 	.word	0x40010000
 80164dc:	40000400 	.word	0x40000400
 80164e0:	40000800 	.word	0x40000800
 80164e4:	40000c00 	.word	0x40000c00
 80164e8:	40010400 	.word	0x40010400
 80164ec:	40001800 	.word	0x40001800
 80164f0:	40014000 	.word	0x40014000
 80164f4:	4000e000 	.word	0x4000e000
 80164f8:	4000e400 	.word	0x4000e400
 80164fc:	00010007 	.word	0x00010007

08016500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016500:	b480      	push	{r7}
 8016502:	b085      	sub	sp, #20
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801650e:	b2db      	uxtb	r3, r3
 8016510:	2b01      	cmp	r3, #1
 8016512:	d001      	beq.n	8016518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016514:	2301      	movs	r3, #1
 8016516:	e05e      	b.n	80165d6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2202      	movs	r2, #2
 801651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	68da      	ldr	r2, [r3, #12]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	f042 0201 	orr.w	r2, r2, #1
 801652e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	4a2b      	ldr	r2, [pc, #172]	@ (80165e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8016536:	4293      	cmp	r3, r2
 8016538:	d02c      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016542:	d027      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	4a27      	ldr	r2, [pc, #156]	@ (80165e8 <HAL_TIM_Base_Start_IT+0xe8>)
 801654a:	4293      	cmp	r3, r2
 801654c:	d022      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	4a26      	ldr	r2, [pc, #152]	@ (80165ec <HAL_TIM_Base_Start_IT+0xec>)
 8016554:	4293      	cmp	r3, r2
 8016556:	d01d      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	4a24      	ldr	r2, [pc, #144]	@ (80165f0 <HAL_TIM_Base_Start_IT+0xf0>)
 801655e:	4293      	cmp	r3, r2
 8016560:	d018      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	4a23      	ldr	r2, [pc, #140]	@ (80165f4 <HAL_TIM_Base_Start_IT+0xf4>)
 8016568:	4293      	cmp	r3, r2
 801656a:	d013      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	4a21      	ldr	r2, [pc, #132]	@ (80165f8 <HAL_TIM_Base_Start_IT+0xf8>)
 8016572:	4293      	cmp	r3, r2
 8016574:	d00e      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	4a20      	ldr	r2, [pc, #128]	@ (80165fc <HAL_TIM_Base_Start_IT+0xfc>)
 801657c:	4293      	cmp	r3, r2
 801657e:	d009      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	4a1e      	ldr	r2, [pc, #120]	@ (8016600 <HAL_TIM_Base_Start_IT+0x100>)
 8016586:	4293      	cmp	r3, r2
 8016588:	d004      	beq.n	8016594 <HAL_TIM_Base_Start_IT+0x94>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	4a1d      	ldr	r2, [pc, #116]	@ (8016604 <HAL_TIM_Base_Start_IT+0x104>)
 8016590:	4293      	cmp	r3, r2
 8016592:	d115      	bne.n	80165c0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	689a      	ldr	r2, [r3, #8]
 801659a:	4b1b      	ldr	r3, [pc, #108]	@ (8016608 <HAL_TIM_Base_Start_IT+0x108>)
 801659c:	4013      	ands	r3, r2
 801659e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	2b06      	cmp	r3, #6
 80165a4:	d015      	beq.n	80165d2 <HAL_TIM_Base_Start_IT+0xd2>
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80165ac:	d011      	beq.n	80165d2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	681a      	ldr	r2, [r3, #0]
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	f042 0201 	orr.w	r2, r2, #1
 80165bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165be:	e008      	b.n	80165d2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	f042 0201 	orr.w	r2, r2, #1
 80165ce:	601a      	str	r2, [r3, #0]
 80165d0:	e000      	b.n	80165d4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80165d4:	2300      	movs	r3, #0
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3714      	adds	r7, #20
 80165da:	46bd      	mov	sp, r7
 80165dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop
 80165e4:	40010000 	.word	0x40010000
 80165e8:	40000400 	.word	0x40000400
 80165ec:	40000800 	.word	0x40000800
 80165f0:	40000c00 	.word	0x40000c00
 80165f4:	40010400 	.word	0x40010400
 80165f8:	40001800 	.word	0x40001800
 80165fc:	40014000 	.word	0x40014000
 8016600:	4000e000 	.word	0x4000e000
 8016604:	4000e400 	.word	0x4000e400
 8016608:	00010007 	.word	0x00010007

0801660c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d101      	bne.n	801661e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801661a:	2301      	movs	r3, #1
 801661c:	e049      	b.n	80166b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016624:	b2db      	uxtb	r3, r3
 8016626:	2b00      	cmp	r3, #0
 8016628:	d106      	bne.n	8016638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2200      	movs	r2, #0
 801662e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f7f2 fd2e 	bl	8009094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2202      	movs	r2, #2
 801663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681a      	ldr	r2, [r3, #0]
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	3304      	adds	r3, #4
 8016648:	4619      	mov	r1, r3
 801664a:	4610      	mov	r0, r2
 801664c:	f000 fd80 	bl	8017150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2201      	movs	r2, #1
 8016654:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2201      	movs	r2, #1
 801665c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2201      	movs	r2, #1
 8016664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2201      	movs	r2, #1
 801666c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2201      	movs	r2, #1
 8016674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2201      	movs	r2, #1
 801667c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2201      	movs	r2, #1
 8016684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2201      	movs	r2, #1
 801668c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2201      	movs	r2, #1
 801669c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2201      	movs	r2, #1
 80166a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2201      	movs	r2, #1
 80166ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80166b0:	2300      	movs	r3, #0
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3708      	adds	r7, #8
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
	...

080166bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d109      	bne.n	80166e0 <HAL_TIM_PWM_Start+0x24>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	bf14      	ite	ne
 80166d8:	2301      	movne	r3, #1
 80166da:	2300      	moveq	r3, #0
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	e03c      	b.n	801675a <HAL_TIM_PWM_Start+0x9e>
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	2b04      	cmp	r3, #4
 80166e4:	d109      	bne.n	80166fa <HAL_TIM_PWM_Start+0x3e>
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80166ec:	b2db      	uxtb	r3, r3
 80166ee:	2b01      	cmp	r3, #1
 80166f0:	bf14      	ite	ne
 80166f2:	2301      	movne	r3, #1
 80166f4:	2300      	moveq	r3, #0
 80166f6:	b2db      	uxtb	r3, r3
 80166f8:	e02f      	b.n	801675a <HAL_TIM_PWM_Start+0x9e>
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	2b08      	cmp	r3, #8
 80166fe:	d109      	bne.n	8016714 <HAL_TIM_PWM_Start+0x58>
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016706:	b2db      	uxtb	r3, r3
 8016708:	2b01      	cmp	r3, #1
 801670a:	bf14      	ite	ne
 801670c:	2301      	movne	r3, #1
 801670e:	2300      	moveq	r3, #0
 8016710:	b2db      	uxtb	r3, r3
 8016712:	e022      	b.n	801675a <HAL_TIM_PWM_Start+0x9e>
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	2b0c      	cmp	r3, #12
 8016718:	d109      	bne.n	801672e <HAL_TIM_PWM_Start+0x72>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016720:	b2db      	uxtb	r3, r3
 8016722:	2b01      	cmp	r3, #1
 8016724:	bf14      	ite	ne
 8016726:	2301      	movne	r3, #1
 8016728:	2300      	moveq	r3, #0
 801672a:	b2db      	uxtb	r3, r3
 801672c:	e015      	b.n	801675a <HAL_TIM_PWM_Start+0x9e>
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	2b10      	cmp	r3, #16
 8016732:	d109      	bne.n	8016748 <HAL_TIM_PWM_Start+0x8c>
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801673a:	b2db      	uxtb	r3, r3
 801673c:	2b01      	cmp	r3, #1
 801673e:	bf14      	ite	ne
 8016740:	2301      	movne	r3, #1
 8016742:	2300      	moveq	r3, #0
 8016744:	b2db      	uxtb	r3, r3
 8016746:	e008      	b.n	801675a <HAL_TIM_PWM_Start+0x9e>
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801674e:	b2db      	uxtb	r3, r3
 8016750:	2b01      	cmp	r3, #1
 8016752:	bf14      	ite	ne
 8016754:	2301      	movne	r3, #1
 8016756:	2300      	moveq	r3, #0
 8016758:	b2db      	uxtb	r3, r3
 801675a:	2b00      	cmp	r3, #0
 801675c:	d001      	beq.n	8016762 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801675e:	2301      	movs	r3, #1
 8016760:	e0ab      	b.n	80168ba <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d104      	bne.n	8016772 <HAL_TIM_PWM_Start+0xb6>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2202      	movs	r2, #2
 801676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016770:	e023      	b.n	80167ba <HAL_TIM_PWM_Start+0xfe>
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	2b04      	cmp	r3, #4
 8016776:	d104      	bne.n	8016782 <HAL_TIM_PWM_Start+0xc6>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2202      	movs	r2, #2
 801677c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016780:	e01b      	b.n	80167ba <HAL_TIM_PWM_Start+0xfe>
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	2b08      	cmp	r3, #8
 8016786:	d104      	bne.n	8016792 <HAL_TIM_PWM_Start+0xd6>
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2202      	movs	r2, #2
 801678c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016790:	e013      	b.n	80167ba <HAL_TIM_PWM_Start+0xfe>
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	2b0c      	cmp	r3, #12
 8016796:	d104      	bne.n	80167a2 <HAL_TIM_PWM_Start+0xe6>
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2202      	movs	r2, #2
 801679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80167a0:	e00b      	b.n	80167ba <HAL_TIM_PWM_Start+0xfe>
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	2b10      	cmp	r3, #16
 80167a6:	d104      	bne.n	80167b2 <HAL_TIM_PWM_Start+0xf6>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2202      	movs	r2, #2
 80167ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80167b0:	e003      	b.n	80167ba <HAL_TIM_PWM_Start+0xfe>
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2202      	movs	r2, #2
 80167b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	2201      	movs	r2, #1
 80167c0:	6839      	ldr	r1, [r7, #0]
 80167c2:	4618      	mov	r0, r3
 80167c4:	f001 fa1a 	bl	8017bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4a3d      	ldr	r2, [pc, #244]	@ (80168c4 <HAL_TIM_PWM_Start+0x208>)
 80167ce:	4293      	cmp	r3, r2
 80167d0:	d013      	beq.n	80167fa <HAL_TIM_PWM_Start+0x13e>
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	4a3c      	ldr	r2, [pc, #240]	@ (80168c8 <HAL_TIM_PWM_Start+0x20c>)
 80167d8:	4293      	cmp	r3, r2
 80167da:	d00e      	beq.n	80167fa <HAL_TIM_PWM_Start+0x13e>
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	4a3a      	ldr	r2, [pc, #232]	@ (80168cc <HAL_TIM_PWM_Start+0x210>)
 80167e2:	4293      	cmp	r3, r2
 80167e4:	d009      	beq.n	80167fa <HAL_TIM_PWM_Start+0x13e>
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	4a39      	ldr	r2, [pc, #228]	@ (80168d0 <HAL_TIM_PWM_Start+0x214>)
 80167ec:	4293      	cmp	r3, r2
 80167ee:	d004      	beq.n	80167fa <HAL_TIM_PWM_Start+0x13e>
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	4a37      	ldr	r2, [pc, #220]	@ (80168d4 <HAL_TIM_PWM_Start+0x218>)
 80167f6:	4293      	cmp	r3, r2
 80167f8:	d101      	bne.n	80167fe <HAL_TIM_PWM_Start+0x142>
 80167fa:	2301      	movs	r3, #1
 80167fc:	e000      	b.n	8016800 <HAL_TIM_PWM_Start+0x144>
 80167fe:	2300      	movs	r3, #0
 8016800:	2b00      	cmp	r3, #0
 8016802:	d007      	beq.n	8016814 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016812:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	4a2a      	ldr	r2, [pc, #168]	@ (80168c4 <HAL_TIM_PWM_Start+0x208>)
 801681a:	4293      	cmp	r3, r2
 801681c:	d02c      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016826:	d027      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	4a2a      	ldr	r2, [pc, #168]	@ (80168d8 <HAL_TIM_PWM_Start+0x21c>)
 801682e:	4293      	cmp	r3, r2
 8016830:	d022      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	4a29      	ldr	r2, [pc, #164]	@ (80168dc <HAL_TIM_PWM_Start+0x220>)
 8016838:	4293      	cmp	r3, r2
 801683a:	d01d      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	4a27      	ldr	r2, [pc, #156]	@ (80168e0 <HAL_TIM_PWM_Start+0x224>)
 8016842:	4293      	cmp	r3, r2
 8016844:	d018      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4a1f      	ldr	r2, [pc, #124]	@ (80168c8 <HAL_TIM_PWM_Start+0x20c>)
 801684c:	4293      	cmp	r3, r2
 801684e:	d013      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4a23      	ldr	r2, [pc, #140]	@ (80168e4 <HAL_TIM_PWM_Start+0x228>)
 8016856:	4293      	cmp	r3, r2
 8016858:	d00e      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	4a1b      	ldr	r2, [pc, #108]	@ (80168cc <HAL_TIM_PWM_Start+0x210>)
 8016860:	4293      	cmp	r3, r2
 8016862:	d009      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4a1f      	ldr	r2, [pc, #124]	@ (80168e8 <HAL_TIM_PWM_Start+0x22c>)
 801686a:	4293      	cmp	r3, r2
 801686c:	d004      	beq.n	8016878 <HAL_TIM_PWM_Start+0x1bc>
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	4a1e      	ldr	r2, [pc, #120]	@ (80168ec <HAL_TIM_PWM_Start+0x230>)
 8016874:	4293      	cmp	r3, r2
 8016876:	d115      	bne.n	80168a4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	689a      	ldr	r2, [r3, #8]
 801687e:	4b1c      	ldr	r3, [pc, #112]	@ (80168f0 <HAL_TIM_PWM_Start+0x234>)
 8016880:	4013      	ands	r3, r2
 8016882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2b06      	cmp	r3, #6
 8016888:	d015      	beq.n	80168b6 <HAL_TIM_PWM_Start+0x1fa>
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016890:	d011      	beq.n	80168b6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	681a      	ldr	r2, [r3, #0]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	f042 0201 	orr.w	r2, r2, #1
 80168a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80168a2:	e008      	b.n	80168b6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	f042 0201 	orr.w	r2, r2, #1
 80168b2:	601a      	str	r2, [r3, #0]
 80168b4:	e000      	b.n	80168b8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80168b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80168b8:	2300      	movs	r3, #0
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	40010000 	.word	0x40010000
 80168c8:	40010400 	.word	0x40010400
 80168cc:	40014000 	.word	0x40014000
 80168d0:	40014400 	.word	0x40014400
 80168d4:	40014800 	.word	0x40014800
 80168d8:	40000400 	.word	0x40000400
 80168dc:	40000800 	.word	0x40000800
 80168e0:	40000c00 	.word	0x40000c00
 80168e4:	40001800 	.word	0x40001800
 80168e8:	4000e000 	.word	0x4000e000
 80168ec:	4000e400 	.word	0x4000e400
 80168f0:	00010007 	.word	0x00010007

080168f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d101      	bne.n	8016906 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016902:	2301      	movs	r3, #1
 8016904:	e049      	b.n	801699a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801690c:	b2db      	uxtb	r3, r3
 801690e:	2b00      	cmp	r3, #0
 8016910:	d106      	bne.n	8016920 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7f2 fbf4 	bl	8009108 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2202      	movs	r2, #2
 8016924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681a      	ldr	r2, [r3, #0]
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	3304      	adds	r3, #4
 8016930:	4619      	mov	r1, r3
 8016932:	4610      	mov	r0, r2
 8016934:	f000 fc0c 	bl	8017150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2201      	movs	r2, #1
 801693c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2201      	movs	r2, #1
 8016954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2201      	movs	r2, #1
 801695c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2201      	movs	r2, #1
 8016964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2201      	movs	r2, #1
 801696c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2201      	movs	r2, #1
 8016974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2201      	movs	r2, #1
 801697c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2201      	movs	r2, #1
 8016984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2201      	movs	r2, #1
 801698c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2201      	movs	r2, #1
 8016994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016998:	2300      	movs	r3, #0
}
 801699a:	4618      	mov	r0, r3
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}

080169a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80169a2:	b580      	push	{r7, lr}
 80169a4:	b084      	sub	sp, #16
 80169a6:	af00      	add	r7, sp, #0
 80169a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	68db      	ldr	r3, [r3, #12]
 80169b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	691b      	ldr	r3, [r3, #16]
 80169b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	f003 0302 	and.w	r3, r3, #2
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d020      	beq.n	8016a06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f003 0302 	and.w	r3, r3, #2
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d01b      	beq.n	8016a06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f06f 0202 	mvn.w	r2, #2
 80169d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2201      	movs	r2, #1
 80169dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	699b      	ldr	r3, [r3, #24]
 80169e4:	f003 0303 	and.w	r3, r3, #3
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d003      	beq.n	80169f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f000 fb91 	bl	8017114 <HAL_TIM_IC_CaptureCallback>
 80169f2:	e005      	b.n	8016a00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f000 fb83 	bl	8017100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 fb94 	bl	8017128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2200      	movs	r2, #0
 8016a04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	f003 0304 	and.w	r3, r3, #4
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d020      	beq.n	8016a52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	f003 0304 	and.w	r3, r3, #4
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d01b      	beq.n	8016a52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	f06f 0204 	mvn.w	r2, #4
 8016a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2202      	movs	r2, #2
 8016a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	699b      	ldr	r3, [r3, #24]
 8016a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d003      	beq.n	8016a40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f000 fb6b 	bl	8017114 <HAL_TIM_IC_CaptureCallback>
 8016a3e:	e005      	b.n	8016a4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 fb5d 	bl	8017100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 fb6e 	bl	8017128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	f003 0308 	and.w	r3, r3, #8
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d020      	beq.n	8016a9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f003 0308 	and.w	r3, r3, #8
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d01b      	beq.n	8016a9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	f06f 0208 	mvn.w	r2, #8
 8016a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2204      	movs	r2, #4
 8016a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	69db      	ldr	r3, [r3, #28]
 8016a7c:	f003 0303 	and.w	r3, r3, #3
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d003      	beq.n	8016a8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 fb45 	bl	8017114 <HAL_TIM_IC_CaptureCallback>
 8016a8a:	e005      	b.n	8016a98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f000 fb37 	bl	8017100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f000 fb48 	bl	8017128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	f003 0310 	and.w	r3, r3, #16
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d020      	beq.n	8016aea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	f003 0310 	and.w	r3, r3, #16
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d01b      	beq.n	8016aea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	f06f 0210 	mvn.w	r2, #16
 8016aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2208      	movs	r2, #8
 8016ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	69db      	ldr	r3, [r3, #28]
 8016ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d003      	beq.n	8016ad8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	f000 fb1f 	bl	8017114 <HAL_TIM_IC_CaptureCallback>
 8016ad6:	e005      	b.n	8016ae4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f000 fb11 	bl	8017100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 fb22 	bl	8017128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016aea:	68bb      	ldr	r3, [r7, #8]
 8016aec:	f003 0301 	and.w	r3, r3, #1
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d00c      	beq.n	8016b0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	f003 0301 	and.w	r3, r3, #1
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d007      	beq.n	8016b0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	f06f 0201 	mvn.w	r2, #1
 8016b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	f7ef fadd 	bl	80060c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d104      	bne.n	8016b22 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d00c      	beq.n	8016b3c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d007      	beq.n	8016b3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f001 f9b8 	bl	8017eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d00c      	beq.n	8016b60 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d007      	beq.n	8016b60 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f001 f9b0 	bl	8017ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d00c      	beq.n	8016b84 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d007      	beq.n	8016b84 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f000 fadc 	bl	801713c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	f003 0320 	and.w	r3, r3, #32
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d00c      	beq.n	8016ba8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	f003 0320 	and.w	r3, r3, #32
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d007      	beq.n	8016ba8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	f06f 0220 	mvn.w	r2, #32
 8016ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f001 f978 	bl	8017e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016ba8:	bf00      	nop
 8016baa:	3710      	adds	r7, #16
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b086      	sub	sp, #24
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d101      	bne.n	8016bce <HAL_TIM_IC_ConfigChannel+0x1e>
 8016bca:	2302      	movs	r3, #2
 8016bcc:	e088      	b.n	8016ce0 <HAL_TIM_IC_ConfigChannel+0x130>
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d11b      	bne.n	8016c14 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016bec:	f000 fe32 	bl	8017854 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	699a      	ldr	r2, [r3, #24]
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	f022 020c 	bic.w	r2, r2, #12
 8016bfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	6999      	ldr	r1, [r3, #24]
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	689a      	ldr	r2, [r3, #8]
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	430a      	orrs	r2, r1
 8016c10:	619a      	str	r2, [r3, #24]
 8016c12:	e060      	b.n	8016cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2b04      	cmp	r3, #4
 8016c18:	d11c      	bne.n	8016c54 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016c2a:	f000 fec2 	bl	80179b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	699a      	ldr	r2, [r3, #24]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	6999      	ldr	r1, [r3, #24]
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	689b      	ldr	r3, [r3, #8]
 8016c48:	021a      	lsls	r2, r3, #8
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	430a      	orrs	r2, r1
 8016c50:	619a      	str	r2, [r3, #24]
 8016c52:	e040      	b.n	8016cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	2b08      	cmp	r3, #8
 8016c58:	d11b      	bne.n	8016c92 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016c6a:	f000 ff0f 	bl	8017a8c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	69da      	ldr	r2, [r3, #28]
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	f022 020c 	bic.w	r2, r2, #12
 8016c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	69d9      	ldr	r1, [r3, #28]
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	689a      	ldr	r2, [r3, #8]
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	430a      	orrs	r2, r1
 8016c8e:	61da      	str	r2, [r3, #28]
 8016c90:	e021      	b.n	8016cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2b0c      	cmp	r3, #12
 8016c96:	d11c      	bne.n	8016cd2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016ca8:	f000 ff2c 	bl	8017b04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	69da      	ldr	r2, [r3, #28]
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016cba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	69d9      	ldr	r1, [r3, #28]
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	689b      	ldr	r3, [r3, #8]
 8016cc6:	021a      	lsls	r2, r3, #8
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	430a      	orrs	r2, r1
 8016cce:	61da      	str	r2, [r3, #28]
 8016cd0:	e001      	b.n	8016cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3718      	adds	r7, #24
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}

08016ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016cfe:	2b01      	cmp	r3, #1
 8016d00:	d101      	bne.n	8016d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016d02:	2302      	movs	r3, #2
 8016d04:	e0ff      	b.n	8016f06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	2201      	movs	r2, #1
 8016d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2b14      	cmp	r3, #20
 8016d12:	f200 80f0 	bhi.w	8016ef6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016d16:	a201      	add	r2, pc, #4	@ (adr r2, 8016d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d1c:	08016d71 	.word	0x08016d71
 8016d20:	08016ef7 	.word	0x08016ef7
 8016d24:	08016ef7 	.word	0x08016ef7
 8016d28:	08016ef7 	.word	0x08016ef7
 8016d2c:	08016db1 	.word	0x08016db1
 8016d30:	08016ef7 	.word	0x08016ef7
 8016d34:	08016ef7 	.word	0x08016ef7
 8016d38:	08016ef7 	.word	0x08016ef7
 8016d3c:	08016df3 	.word	0x08016df3
 8016d40:	08016ef7 	.word	0x08016ef7
 8016d44:	08016ef7 	.word	0x08016ef7
 8016d48:	08016ef7 	.word	0x08016ef7
 8016d4c:	08016e33 	.word	0x08016e33
 8016d50:	08016ef7 	.word	0x08016ef7
 8016d54:	08016ef7 	.word	0x08016ef7
 8016d58:	08016ef7 	.word	0x08016ef7
 8016d5c:	08016e75 	.word	0x08016e75
 8016d60:	08016ef7 	.word	0x08016ef7
 8016d64:	08016ef7 	.word	0x08016ef7
 8016d68:	08016ef7 	.word	0x08016ef7
 8016d6c:	08016eb5 	.word	0x08016eb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	68b9      	ldr	r1, [r7, #8]
 8016d76:	4618      	mov	r0, r3
 8016d78:	f000 fa96 	bl	80172a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	699a      	ldr	r2, [r3, #24]
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	f042 0208 	orr.w	r2, r2, #8
 8016d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	699a      	ldr	r2, [r3, #24]
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	f022 0204 	bic.w	r2, r2, #4
 8016d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	6999      	ldr	r1, [r3, #24]
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	691a      	ldr	r2, [r3, #16]
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	430a      	orrs	r2, r1
 8016dac:	619a      	str	r2, [r3, #24]
      break;
 8016dae:	e0a5      	b.n	8016efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	68b9      	ldr	r1, [r7, #8]
 8016db6:	4618      	mov	r0, r3
 8016db8:	f000 fb06 	bl	80173c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	699a      	ldr	r2, [r3, #24]
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	699a      	ldr	r2, [r3, #24]
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	6999      	ldr	r1, [r3, #24]
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	691b      	ldr	r3, [r3, #16]
 8016de6:	021a      	lsls	r2, r3, #8
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	430a      	orrs	r2, r1
 8016dee:	619a      	str	r2, [r3, #24]
      break;
 8016df0:	e084      	b.n	8016efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	68b9      	ldr	r1, [r7, #8]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f000 fb6f 	bl	80174dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	69da      	ldr	r2, [r3, #28]
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	f042 0208 	orr.w	r2, r2, #8
 8016e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	69da      	ldr	r2, [r3, #28]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	f022 0204 	bic.w	r2, r2, #4
 8016e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	69d9      	ldr	r1, [r3, #28]
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	691a      	ldr	r2, [r3, #16]
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	430a      	orrs	r2, r1
 8016e2e:	61da      	str	r2, [r3, #28]
      break;
 8016e30:	e064      	b.n	8016efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	68b9      	ldr	r1, [r7, #8]
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f000 fbd7 	bl	80175ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	69da      	ldr	r2, [r3, #28]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	69da      	ldr	r2, [r3, #28]
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	69d9      	ldr	r1, [r3, #28]
 8016e64:	68bb      	ldr	r3, [r7, #8]
 8016e66:	691b      	ldr	r3, [r3, #16]
 8016e68:	021a      	lsls	r2, r3, #8
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	430a      	orrs	r2, r1
 8016e70:	61da      	str	r2, [r3, #28]
      break;
 8016e72:	e043      	b.n	8016efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	68b9      	ldr	r1, [r7, #8]
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f000 fc20 	bl	80176c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	f042 0208 	orr.w	r2, r2, #8
 8016e8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f022 0204 	bic.w	r2, r2, #4
 8016e9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	691a      	ldr	r2, [r3, #16]
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	430a      	orrs	r2, r1
 8016eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016eb2:	e023      	b.n	8016efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	68b9      	ldr	r1, [r7, #8]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f000 fc64 	bl	8017788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016ee6:	68bb      	ldr	r3, [r7, #8]
 8016ee8:	691b      	ldr	r3, [r3, #16]
 8016eea:	021a      	lsls	r2, r3, #8
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	430a      	orrs	r2, r1
 8016ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016ef4:	e002      	b.n	8016efc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8016efa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	2200      	movs	r2, #0
 8016f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3718      	adds	r7, #24
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop

08016f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b084      	sub	sp, #16
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d101      	bne.n	8016f2c <HAL_TIM_ConfigClockSource+0x1c>
 8016f28:	2302      	movs	r3, #2
 8016f2a:	e0dc      	b.n	80170e6 <HAL_TIM_ConfigClockSource+0x1d6>
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2201      	movs	r2, #1
 8016f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2202      	movs	r2, #2
 8016f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	689b      	ldr	r3, [r3, #8]
 8016f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016f44:	68ba      	ldr	r2, [r7, #8]
 8016f46:	4b6a      	ldr	r3, [pc, #424]	@ (80170f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016f48:	4013      	ands	r3, r2
 8016f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	68ba      	ldr	r2, [r7, #8]
 8016f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	4a64      	ldr	r2, [pc, #400]	@ (80170f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f62:	4293      	cmp	r3, r2
 8016f64:	f000 80a9 	beq.w	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016f68:	4a62      	ldr	r2, [pc, #392]	@ (80170f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f6a:	4293      	cmp	r3, r2
 8016f6c:	f200 80ae 	bhi.w	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016f70:	4a61      	ldr	r2, [pc, #388]	@ (80170f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f72:	4293      	cmp	r3, r2
 8016f74:	f000 80a1 	beq.w	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016f78:	4a5f      	ldr	r2, [pc, #380]	@ (80170f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f7a:	4293      	cmp	r3, r2
 8016f7c:	f200 80a6 	bhi.w	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016f80:	4a5e      	ldr	r2, [pc, #376]	@ (80170fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f82:	4293      	cmp	r3, r2
 8016f84:	f000 8099 	beq.w	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016f88:	4a5c      	ldr	r2, [pc, #368]	@ (80170fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f8a:	4293      	cmp	r3, r2
 8016f8c:	f200 809e 	bhi.w	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016f90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f94:	f000 8091 	beq.w	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016f98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f9c:	f200 8096 	bhi.w	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016fa4:	f000 8089 	beq.w	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016fa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016fac:	f200 808e 	bhi.w	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016fb4:	d03e      	beq.n	8017034 <HAL_TIM_ConfigClockSource+0x124>
 8016fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016fba:	f200 8087 	bhi.w	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016fc2:	f000 8086 	beq.w	80170d2 <HAL_TIM_ConfigClockSource+0x1c2>
 8016fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016fca:	d87f      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fcc:	2b70      	cmp	r3, #112	@ 0x70
 8016fce:	d01a      	beq.n	8017006 <HAL_TIM_ConfigClockSource+0xf6>
 8016fd0:	2b70      	cmp	r3, #112	@ 0x70
 8016fd2:	d87b      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fd4:	2b60      	cmp	r3, #96	@ 0x60
 8016fd6:	d050      	beq.n	801707a <HAL_TIM_ConfigClockSource+0x16a>
 8016fd8:	2b60      	cmp	r3, #96	@ 0x60
 8016fda:	d877      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fdc:	2b50      	cmp	r3, #80	@ 0x50
 8016fde:	d03c      	beq.n	801705a <HAL_TIM_ConfigClockSource+0x14a>
 8016fe0:	2b50      	cmp	r3, #80	@ 0x50
 8016fe2:	d873      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fe4:	2b40      	cmp	r3, #64	@ 0x40
 8016fe6:	d058      	beq.n	801709a <HAL_TIM_ConfigClockSource+0x18a>
 8016fe8:	2b40      	cmp	r3, #64	@ 0x40
 8016fea:	d86f      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016fec:	2b30      	cmp	r3, #48	@ 0x30
 8016fee:	d064      	beq.n	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016ff0:	2b30      	cmp	r3, #48	@ 0x30
 8016ff2:	d86b      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016ff4:	2b20      	cmp	r3, #32
 8016ff6:	d060      	beq.n	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8016ff8:	2b20      	cmp	r3, #32
 8016ffa:	d867      	bhi.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d05c      	beq.n	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8017000:	2b10      	cmp	r3, #16
 8017002:	d05a      	beq.n	80170ba <HAL_TIM_ConfigClockSource+0x1aa>
 8017004:	e062      	b.n	80170cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017016:	f000 fdd1 	bl	8017bbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	689b      	ldr	r3, [r3, #8]
 8017020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8017028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	68ba      	ldr	r2, [r7, #8]
 8017030:	609a      	str	r2, [r3, #8]
      break;
 8017032:	e04f      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017044:	f000 fdba 	bl	8017bbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	689a      	ldr	r2, [r3, #8]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017056:	609a      	str	r2, [r3, #8]
      break;
 8017058:	e03c      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017066:	461a      	mov	r2, r3
 8017068:	f000 fc74 	bl	8017954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	2150      	movs	r1, #80	@ 0x50
 8017072:	4618      	mov	r0, r3
 8017074:	f000 fd84 	bl	8017b80 <TIM_ITRx_SetConfig>
      break;
 8017078:	e02c      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017086:	461a      	mov	r2, r3
 8017088:	f000 fcd0 	bl	8017a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	2160      	movs	r1, #96	@ 0x60
 8017092:	4618      	mov	r0, r3
 8017094:	f000 fd74 	bl	8017b80 <TIM_ITRx_SetConfig>
      break;
 8017098:	e01c      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80170a6:	461a      	mov	r2, r3
 80170a8:	f000 fc54 	bl	8017954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	2140      	movs	r1, #64	@ 0x40
 80170b2:	4618      	mov	r0, r3
 80170b4:	f000 fd64 	bl	8017b80 <TIM_ITRx_SetConfig>
      break;
 80170b8:	e00c      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681a      	ldr	r2, [r3, #0]
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	4619      	mov	r1, r3
 80170c4:	4610      	mov	r0, r2
 80170c6:	f000 fd5b 	bl	8017b80 <TIM_ITRx_SetConfig>
      break;
 80170ca:	e003      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80170cc:	2301      	movs	r3, #1
 80170ce:	73fb      	strb	r3, [r7, #15]
      break;
 80170d0:	e000      	b.n	80170d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80170d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2201      	movs	r2, #1
 80170d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2200      	movs	r2, #0
 80170e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80170e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3710      	adds	r7, #16
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	ffceff88 	.word	0xffceff88
 80170f4:	00100040 	.word	0x00100040
 80170f8:	00100030 	.word	0x00100030
 80170fc:	00100020 	.word	0x00100020

08017100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017100:	b480      	push	{r7}
 8017102:	b083      	sub	sp, #12
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017108:	bf00      	nop
 801710a:	370c      	adds	r7, #12
 801710c:	46bd      	mov	sp, r7
 801710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017112:	4770      	bx	lr

08017114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017114:	b480      	push	{r7}
 8017116:	b083      	sub	sp, #12
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801711c:	bf00      	nop
 801711e:	370c      	adds	r7, #12
 8017120:	46bd      	mov	sp, r7
 8017122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017126:	4770      	bx	lr

08017128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017128:	b480      	push	{r7}
 801712a:	b083      	sub	sp, #12
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017130:	bf00      	nop
 8017132:	370c      	adds	r7, #12
 8017134:	46bd      	mov	sp, r7
 8017136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713a:	4770      	bx	lr

0801713c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801713c:	b480      	push	{r7}
 801713e:	b083      	sub	sp, #12
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017144:	bf00      	nop
 8017146:	370c      	adds	r7, #12
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017150:	b480      	push	{r7}
 8017152:	b085      	sub	sp, #20
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	4a47      	ldr	r2, [pc, #284]	@ (8017280 <TIM_Base_SetConfig+0x130>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d013      	beq.n	8017190 <TIM_Base_SetConfig+0x40>
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801716e:	d00f      	beq.n	8017190 <TIM_Base_SetConfig+0x40>
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	4a44      	ldr	r2, [pc, #272]	@ (8017284 <TIM_Base_SetConfig+0x134>)
 8017174:	4293      	cmp	r3, r2
 8017176:	d00b      	beq.n	8017190 <TIM_Base_SetConfig+0x40>
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	4a43      	ldr	r2, [pc, #268]	@ (8017288 <TIM_Base_SetConfig+0x138>)
 801717c:	4293      	cmp	r3, r2
 801717e:	d007      	beq.n	8017190 <TIM_Base_SetConfig+0x40>
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	4a42      	ldr	r2, [pc, #264]	@ (801728c <TIM_Base_SetConfig+0x13c>)
 8017184:	4293      	cmp	r3, r2
 8017186:	d003      	beq.n	8017190 <TIM_Base_SetConfig+0x40>
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	4a41      	ldr	r2, [pc, #260]	@ (8017290 <TIM_Base_SetConfig+0x140>)
 801718c:	4293      	cmp	r3, r2
 801718e:	d108      	bne.n	80171a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	68fa      	ldr	r2, [r7, #12]
 801719e:	4313      	orrs	r3, r2
 80171a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4a36      	ldr	r2, [pc, #216]	@ (8017280 <TIM_Base_SetConfig+0x130>)
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d027      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80171b0:	d023      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4a33      	ldr	r2, [pc, #204]	@ (8017284 <TIM_Base_SetConfig+0x134>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d01f      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4a32      	ldr	r2, [pc, #200]	@ (8017288 <TIM_Base_SetConfig+0x138>)
 80171be:	4293      	cmp	r3, r2
 80171c0:	d01b      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4a31      	ldr	r2, [pc, #196]	@ (801728c <TIM_Base_SetConfig+0x13c>)
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d017      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	4a30      	ldr	r2, [pc, #192]	@ (8017290 <TIM_Base_SetConfig+0x140>)
 80171ce:	4293      	cmp	r3, r2
 80171d0:	d013      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	4a2f      	ldr	r2, [pc, #188]	@ (8017294 <TIM_Base_SetConfig+0x144>)
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d00f      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	4a2e      	ldr	r2, [pc, #184]	@ (8017298 <TIM_Base_SetConfig+0x148>)
 80171de:	4293      	cmp	r3, r2
 80171e0:	d00b      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	4a2d      	ldr	r2, [pc, #180]	@ (801729c <TIM_Base_SetConfig+0x14c>)
 80171e6:	4293      	cmp	r3, r2
 80171e8:	d007      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	4a2c      	ldr	r2, [pc, #176]	@ (80172a0 <TIM_Base_SetConfig+0x150>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d003      	beq.n	80171fa <TIM_Base_SetConfig+0xaa>
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	4a2b      	ldr	r2, [pc, #172]	@ (80172a4 <TIM_Base_SetConfig+0x154>)
 80171f6:	4293      	cmp	r3, r2
 80171f8:	d108      	bne.n	801720c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	68fa      	ldr	r2, [r7, #12]
 8017208:	4313      	orrs	r3, r2
 801720a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	695b      	ldr	r3, [r3, #20]
 8017216:	4313      	orrs	r3, r2
 8017218:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	689a      	ldr	r2, [r3, #8]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	681a      	ldr	r2, [r3, #0]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4a14      	ldr	r2, [pc, #80]	@ (8017280 <TIM_Base_SetConfig+0x130>)
 801722e:	4293      	cmp	r3, r2
 8017230:	d00f      	beq.n	8017252 <TIM_Base_SetConfig+0x102>
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	4a16      	ldr	r2, [pc, #88]	@ (8017290 <TIM_Base_SetConfig+0x140>)
 8017236:	4293      	cmp	r3, r2
 8017238:	d00b      	beq.n	8017252 <TIM_Base_SetConfig+0x102>
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	4a15      	ldr	r2, [pc, #84]	@ (8017294 <TIM_Base_SetConfig+0x144>)
 801723e:	4293      	cmp	r3, r2
 8017240:	d007      	beq.n	8017252 <TIM_Base_SetConfig+0x102>
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	4a14      	ldr	r2, [pc, #80]	@ (8017298 <TIM_Base_SetConfig+0x148>)
 8017246:	4293      	cmp	r3, r2
 8017248:	d003      	beq.n	8017252 <TIM_Base_SetConfig+0x102>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	4a13      	ldr	r2, [pc, #76]	@ (801729c <TIM_Base_SetConfig+0x14c>)
 801724e:	4293      	cmp	r3, r2
 8017250:	d103      	bne.n	801725a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	691a      	ldr	r2, [r3, #16]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	f043 0204 	orr.w	r2, r3, #4
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2201      	movs	r2, #1
 801726a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	601a      	str	r2, [r3, #0]
}
 8017272:	bf00      	nop
 8017274:	3714      	adds	r7, #20
 8017276:	46bd      	mov	sp, r7
 8017278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727c:	4770      	bx	lr
 801727e:	bf00      	nop
 8017280:	40010000 	.word	0x40010000
 8017284:	40000400 	.word	0x40000400
 8017288:	40000800 	.word	0x40000800
 801728c:	40000c00 	.word	0x40000c00
 8017290:	40010400 	.word	0x40010400
 8017294:	40014000 	.word	0x40014000
 8017298:	40014400 	.word	0x40014400
 801729c:	40014800 	.word	0x40014800
 80172a0:	4000e000 	.word	0x4000e000
 80172a4:	4000e400 	.word	0x4000e400

080172a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80172a8:	b480      	push	{r7}
 80172aa:	b087      	sub	sp, #28
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	6a1b      	ldr	r3, [r3, #32]
 80172b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	6a1b      	ldr	r3, [r3, #32]
 80172bc:	f023 0201 	bic.w	r2, r3, #1
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	699b      	ldr	r3, [r3, #24]
 80172ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80172d0:	68fa      	ldr	r2, [r7, #12]
 80172d2:	4b37      	ldr	r3, [pc, #220]	@ (80173b0 <TIM_OC1_SetConfig+0x108>)
 80172d4:	4013      	ands	r3, r2
 80172d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	f023 0303 	bic.w	r3, r3, #3
 80172de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	68fa      	ldr	r2, [r7, #12]
 80172e6:	4313      	orrs	r3, r2
 80172e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	f023 0302 	bic.w	r3, r3, #2
 80172f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	689b      	ldr	r3, [r3, #8]
 80172f6:	697a      	ldr	r2, [r7, #20]
 80172f8:	4313      	orrs	r3, r2
 80172fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	4a2d      	ldr	r2, [pc, #180]	@ (80173b4 <TIM_OC1_SetConfig+0x10c>)
 8017300:	4293      	cmp	r3, r2
 8017302:	d00f      	beq.n	8017324 <TIM_OC1_SetConfig+0x7c>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4a2c      	ldr	r2, [pc, #176]	@ (80173b8 <TIM_OC1_SetConfig+0x110>)
 8017308:	4293      	cmp	r3, r2
 801730a:	d00b      	beq.n	8017324 <TIM_OC1_SetConfig+0x7c>
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	4a2b      	ldr	r2, [pc, #172]	@ (80173bc <TIM_OC1_SetConfig+0x114>)
 8017310:	4293      	cmp	r3, r2
 8017312:	d007      	beq.n	8017324 <TIM_OC1_SetConfig+0x7c>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	4a2a      	ldr	r2, [pc, #168]	@ (80173c0 <TIM_OC1_SetConfig+0x118>)
 8017318:	4293      	cmp	r3, r2
 801731a:	d003      	beq.n	8017324 <TIM_OC1_SetConfig+0x7c>
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	4a29      	ldr	r2, [pc, #164]	@ (80173c4 <TIM_OC1_SetConfig+0x11c>)
 8017320:	4293      	cmp	r3, r2
 8017322:	d10c      	bne.n	801733e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	f023 0308 	bic.w	r3, r3, #8
 801732a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	68db      	ldr	r3, [r3, #12]
 8017330:	697a      	ldr	r2, [r7, #20]
 8017332:	4313      	orrs	r3, r2
 8017334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	f023 0304 	bic.w	r3, r3, #4
 801733c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	4a1c      	ldr	r2, [pc, #112]	@ (80173b4 <TIM_OC1_SetConfig+0x10c>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d00f      	beq.n	8017366 <TIM_OC1_SetConfig+0xbe>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	4a1b      	ldr	r2, [pc, #108]	@ (80173b8 <TIM_OC1_SetConfig+0x110>)
 801734a:	4293      	cmp	r3, r2
 801734c:	d00b      	beq.n	8017366 <TIM_OC1_SetConfig+0xbe>
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	4a1a      	ldr	r2, [pc, #104]	@ (80173bc <TIM_OC1_SetConfig+0x114>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d007      	beq.n	8017366 <TIM_OC1_SetConfig+0xbe>
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	4a19      	ldr	r2, [pc, #100]	@ (80173c0 <TIM_OC1_SetConfig+0x118>)
 801735a:	4293      	cmp	r3, r2
 801735c:	d003      	beq.n	8017366 <TIM_OC1_SetConfig+0xbe>
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	4a18      	ldr	r2, [pc, #96]	@ (80173c4 <TIM_OC1_SetConfig+0x11c>)
 8017362:	4293      	cmp	r3, r2
 8017364:	d111      	bne.n	801738a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801736c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801736e:	693b      	ldr	r3, [r7, #16]
 8017370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	695b      	ldr	r3, [r3, #20]
 801737a:	693a      	ldr	r2, [r7, #16]
 801737c:	4313      	orrs	r3, r2
 801737e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	699b      	ldr	r3, [r3, #24]
 8017384:	693a      	ldr	r2, [r7, #16]
 8017386:	4313      	orrs	r3, r2
 8017388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	693a      	ldr	r2, [r7, #16]
 801738e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	68fa      	ldr	r2, [r7, #12]
 8017394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	685a      	ldr	r2, [r3, #4]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	697a      	ldr	r2, [r7, #20]
 80173a2:	621a      	str	r2, [r3, #32]
}
 80173a4:	bf00      	nop
 80173a6:	371c      	adds	r7, #28
 80173a8:	46bd      	mov	sp, r7
 80173aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ae:	4770      	bx	lr
 80173b0:	fffeff8f 	.word	0xfffeff8f
 80173b4:	40010000 	.word	0x40010000
 80173b8:	40010400 	.word	0x40010400
 80173bc:	40014000 	.word	0x40014000
 80173c0:	40014400 	.word	0x40014400
 80173c4:	40014800 	.word	0x40014800

080173c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80173c8:	b480      	push	{r7}
 80173ca:	b087      	sub	sp, #28
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	6a1b      	ldr	r3, [r3, #32]
 80173d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	6a1b      	ldr	r3, [r3, #32]
 80173dc:	f023 0210 	bic.w	r2, r3, #16
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	685b      	ldr	r3, [r3, #4]
 80173e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	699b      	ldr	r3, [r3, #24]
 80173ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	4b34      	ldr	r3, [pc, #208]	@ (80174c4 <TIM_OC2_SetConfig+0xfc>)
 80173f4:	4013      	ands	r3, r2
 80173f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80173fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	021b      	lsls	r3, r3, #8
 8017406:	68fa      	ldr	r2, [r7, #12]
 8017408:	4313      	orrs	r3, r2
 801740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801740c:	697b      	ldr	r3, [r7, #20]
 801740e:	f023 0320 	bic.w	r3, r3, #32
 8017412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017414:	683b      	ldr	r3, [r7, #0]
 8017416:	689b      	ldr	r3, [r3, #8]
 8017418:	011b      	lsls	r3, r3, #4
 801741a:	697a      	ldr	r2, [r7, #20]
 801741c:	4313      	orrs	r3, r2
 801741e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	4a29      	ldr	r2, [pc, #164]	@ (80174c8 <TIM_OC2_SetConfig+0x100>)
 8017424:	4293      	cmp	r3, r2
 8017426:	d003      	beq.n	8017430 <TIM_OC2_SetConfig+0x68>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	4a28      	ldr	r2, [pc, #160]	@ (80174cc <TIM_OC2_SetConfig+0x104>)
 801742c:	4293      	cmp	r3, r2
 801742e:	d10d      	bne.n	801744c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	68db      	ldr	r3, [r3, #12]
 801743c:	011b      	lsls	r3, r3, #4
 801743e:	697a      	ldr	r2, [r7, #20]
 8017440:	4313      	orrs	r3, r2
 8017442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017444:	697b      	ldr	r3, [r7, #20]
 8017446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801744a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	4a1e      	ldr	r2, [pc, #120]	@ (80174c8 <TIM_OC2_SetConfig+0x100>)
 8017450:	4293      	cmp	r3, r2
 8017452:	d00f      	beq.n	8017474 <TIM_OC2_SetConfig+0xac>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	4a1d      	ldr	r2, [pc, #116]	@ (80174cc <TIM_OC2_SetConfig+0x104>)
 8017458:	4293      	cmp	r3, r2
 801745a:	d00b      	beq.n	8017474 <TIM_OC2_SetConfig+0xac>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	4a1c      	ldr	r2, [pc, #112]	@ (80174d0 <TIM_OC2_SetConfig+0x108>)
 8017460:	4293      	cmp	r3, r2
 8017462:	d007      	beq.n	8017474 <TIM_OC2_SetConfig+0xac>
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	4a1b      	ldr	r2, [pc, #108]	@ (80174d4 <TIM_OC2_SetConfig+0x10c>)
 8017468:	4293      	cmp	r3, r2
 801746a:	d003      	beq.n	8017474 <TIM_OC2_SetConfig+0xac>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	4a1a      	ldr	r2, [pc, #104]	@ (80174d8 <TIM_OC2_SetConfig+0x110>)
 8017470:	4293      	cmp	r3, r2
 8017472:	d113      	bne.n	801749c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017474:	693b      	ldr	r3, [r7, #16]
 8017476:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801747a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	695b      	ldr	r3, [r3, #20]
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	693a      	ldr	r2, [r7, #16]
 801748c:	4313      	orrs	r3, r2
 801748e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	699b      	ldr	r3, [r3, #24]
 8017494:	009b      	lsls	r3, r3, #2
 8017496:	693a      	ldr	r2, [r7, #16]
 8017498:	4313      	orrs	r3, r2
 801749a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	693a      	ldr	r2, [r7, #16]
 80174a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	68fa      	ldr	r2, [r7, #12]
 80174a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	685a      	ldr	r2, [r3, #4]
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	697a      	ldr	r2, [r7, #20]
 80174b4:	621a      	str	r2, [r3, #32]
}
 80174b6:	bf00      	nop
 80174b8:	371c      	adds	r7, #28
 80174ba:	46bd      	mov	sp, r7
 80174bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c0:	4770      	bx	lr
 80174c2:	bf00      	nop
 80174c4:	feff8fff 	.word	0xfeff8fff
 80174c8:	40010000 	.word	0x40010000
 80174cc:	40010400 	.word	0x40010400
 80174d0:	40014000 	.word	0x40014000
 80174d4:	40014400 	.word	0x40014400
 80174d8:	40014800 	.word	0x40014800

080174dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80174dc:	b480      	push	{r7}
 80174de:	b087      	sub	sp, #28
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	6a1b      	ldr	r3, [r3, #32]
 80174ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6a1b      	ldr	r3, [r3, #32]
 80174f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	685b      	ldr	r3, [r3, #4]
 80174fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	69db      	ldr	r3, [r3, #28]
 8017502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	4b33      	ldr	r3, [pc, #204]	@ (80175d4 <TIM_OC3_SetConfig+0xf8>)
 8017508:	4013      	ands	r3, r2
 801750a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	f023 0303 	bic.w	r3, r3, #3
 8017512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	68fa      	ldr	r2, [r7, #12]
 801751a:	4313      	orrs	r3, r2
 801751c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801751e:	697b      	ldr	r3, [r7, #20]
 8017520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	689b      	ldr	r3, [r3, #8]
 801752a:	021b      	lsls	r3, r3, #8
 801752c:	697a      	ldr	r2, [r7, #20]
 801752e:	4313      	orrs	r3, r2
 8017530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	4a28      	ldr	r2, [pc, #160]	@ (80175d8 <TIM_OC3_SetConfig+0xfc>)
 8017536:	4293      	cmp	r3, r2
 8017538:	d003      	beq.n	8017542 <TIM_OC3_SetConfig+0x66>
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	4a27      	ldr	r2, [pc, #156]	@ (80175dc <TIM_OC3_SetConfig+0x100>)
 801753e:	4293      	cmp	r3, r2
 8017540:	d10d      	bne.n	801755e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017542:	697b      	ldr	r3, [r7, #20]
 8017544:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	68db      	ldr	r3, [r3, #12]
 801754e:	021b      	lsls	r3, r3, #8
 8017550:	697a      	ldr	r2, [r7, #20]
 8017552:	4313      	orrs	r3, r2
 8017554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017556:	697b      	ldr	r3, [r7, #20]
 8017558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801755c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4a1d      	ldr	r2, [pc, #116]	@ (80175d8 <TIM_OC3_SetConfig+0xfc>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d00f      	beq.n	8017586 <TIM_OC3_SetConfig+0xaa>
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	4a1c      	ldr	r2, [pc, #112]	@ (80175dc <TIM_OC3_SetConfig+0x100>)
 801756a:	4293      	cmp	r3, r2
 801756c:	d00b      	beq.n	8017586 <TIM_OC3_SetConfig+0xaa>
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	4a1b      	ldr	r2, [pc, #108]	@ (80175e0 <TIM_OC3_SetConfig+0x104>)
 8017572:	4293      	cmp	r3, r2
 8017574:	d007      	beq.n	8017586 <TIM_OC3_SetConfig+0xaa>
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	4a1a      	ldr	r2, [pc, #104]	@ (80175e4 <TIM_OC3_SetConfig+0x108>)
 801757a:	4293      	cmp	r3, r2
 801757c:	d003      	beq.n	8017586 <TIM_OC3_SetConfig+0xaa>
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	4a19      	ldr	r2, [pc, #100]	@ (80175e8 <TIM_OC3_SetConfig+0x10c>)
 8017582:	4293      	cmp	r3, r2
 8017584:	d113      	bne.n	80175ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801758c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	695b      	ldr	r3, [r3, #20]
 801759a:	011b      	lsls	r3, r3, #4
 801759c:	693a      	ldr	r2, [r7, #16]
 801759e:	4313      	orrs	r3, r2
 80175a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	699b      	ldr	r3, [r3, #24]
 80175a6:	011b      	lsls	r3, r3, #4
 80175a8:	693a      	ldr	r2, [r7, #16]
 80175aa:	4313      	orrs	r3, r2
 80175ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	693a      	ldr	r2, [r7, #16]
 80175b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	68fa      	ldr	r2, [r7, #12]
 80175b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	685a      	ldr	r2, [r3, #4]
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	697a      	ldr	r2, [r7, #20]
 80175c6:	621a      	str	r2, [r3, #32]
}
 80175c8:	bf00      	nop
 80175ca:	371c      	adds	r7, #28
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr
 80175d4:	fffeff8f 	.word	0xfffeff8f
 80175d8:	40010000 	.word	0x40010000
 80175dc:	40010400 	.word	0x40010400
 80175e0:	40014000 	.word	0x40014000
 80175e4:	40014400 	.word	0x40014400
 80175e8:	40014800 	.word	0x40014800

080175ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80175ec:	b480      	push	{r7}
 80175ee:	b087      	sub	sp, #28
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	6078      	str	r0, [r7, #4]
 80175f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6a1b      	ldr	r3, [r3, #32]
 80175fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	6a1b      	ldr	r3, [r3, #32]
 8017600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	69db      	ldr	r3, [r3, #28]
 8017612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	4b24      	ldr	r3, [pc, #144]	@ (80176a8 <TIM_OC4_SetConfig+0xbc>)
 8017618:	4013      	ands	r3, r2
 801761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	021b      	lsls	r3, r3, #8
 801762a:	68fa      	ldr	r2, [r7, #12]
 801762c:	4313      	orrs	r3, r2
 801762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	689b      	ldr	r3, [r3, #8]
 801763c:	031b      	lsls	r3, r3, #12
 801763e:	693a      	ldr	r2, [r7, #16]
 8017640:	4313      	orrs	r3, r2
 8017642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	4a19      	ldr	r2, [pc, #100]	@ (80176ac <TIM_OC4_SetConfig+0xc0>)
 8017648:	4293      	cmp	r3, r2
 801764a:	d00f      	beq.n	801766c <TIM_OC4_SetConfig+0x80>
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4a18      	ldr	r2, [pc, #96]	@ (80176b0 <TIM_OC4_SetConfig+0xc4>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d00b      	beq.n	801766c <TIM_OC4_SetConfig+0x80>
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	4a17      	ldr	r2, [pc, #92]	@ (80176b4 <TIM_OC4_SetConfig+0xc8>)
 8017658:	4293      	cmp	r3, r2
 801765a:	d007      	beq.n	801766c <TIM_OC4_SetConfig+0x80>
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	4a16      	ldr	r2, [pc, #88]	@ (80176b8 <TIM_OC4_SetConfig+0xcc>)
 8017660:	4293      	cmp	r3, r2
 8017662:	d003      	beq.n	801766c <TIM_OC4_SetConfig+0x80>
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	4a15      	ldr	r2, [pc, #84]	@ (80176bc <TIM_OC4_SetConfig+0xd0>)
 8017668:	4293      	cmp	r3, r2
 801766a:	d109      	bne.n	8017680 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801766c:	697b      	ldr	r3, [r7, #20]
 801766e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	695b      	ldr	r3, [r3, #20]
 8017678:	019b      	lsls	r3, r3, #6
 801767a:	697a      	ldr	r2, [r7, #20]
 801767c:	4313      	orrs	r3, r2
 801767e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	697a      	ldr	r2, [r7, #20]
 8017684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	68fa      	ldr	r2, [r7, #12]
 801768a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	685a      	ldr	r2, [r3, #4]
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	693a      	ldr	r2, [r7, #16]
 8017698:	621a      	str	r2, [r3, #32]
}
 801769a:	bf00      	nop
 801769c:	371c      	adds	r7, #28
 801769e:	46bd      	mov	sp, r7
 80176a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a4:	4770      	bx	lr
 80176a6:	bf00      	nop
 80176a8:	feff8fff 	.word	0xfeff8fff
 80176ac:	40010000 	.word	0x40010000
 80176b0:	40010400 	.word	0x40010400
 80176b4:	40014000 	.word	0x40014000
 80176b8:	40014400 	.word	0x40014400
 80176bc:	40014800 	.word	0x40014800

080176c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80176c0:	b480      	push	{r7}
 80176c2:	b087      	sub	sp, #28
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
 80176c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6a1b      	ldr	r3, [r3, #32]
 80176ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6a1b      	ldr	r3, [r3, #32]
 80176d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	685b      	ldr	r3, [r3, #4]
 80176e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80176e8:	68fa      	ldr	r2, [r7, #12]
 80176ea:	4b21      	ldr	r3, [pc, #132]	@ (8017770 <TIM_OC5_SetConfig+0xb0>)
 80176ec:	4013      	ands	r3, r2
 80176ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	68fa      	ldr	r2, [r7, #12]
 80176f6:	4313      	orrs	r3, r2
 80176f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017702:	683b      	ldr	r3, [r7, #0]
 8017704:	689b      	ldr	r3, [r3, #8]
 8017706:	041b      	lsls	r3, r3, #16
 8017708:	693a      	ldr	r2, [r7, #16]
 801770a:	4313      	orrs	r3, r2
 801770c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	4a18      	ldr	r2, [pc, #96]	@ (8017774 <TIM_OC5_SetConfig+0xb4>)
 8017712:	4293      	cmp	r3, r2
 8017714:	d00f      	beq.n	8017736 <TIM_OC5_SetConfig+0x76>
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	4a17      	ldr	r2, [pc, #92]	@ (8017778 <TIM_OC5_SetConfig+0xb8>)
 801771a:	4293      	cmp	r3, r2
 801771c:	d00b      	beq.n	8017736 <TIM_OC5_SetConfig+0x76>
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	4a16      	ldr	r2, [pc, #88]	@ (801777c <TIM_OC5_SetConfig+0xbc>)
 8017722:	4293      	cmp	r3, r2
 8017724:	d007      	beq.n	8017736 <TIM_OC5_SetConfig+0x76>
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	4a15      	ldr	r2, [pc, #84]	@ (8017780 <TIM_OC5_SetConfig+0xc0>)
 801772a:	4293      	cmp	r3, r2
 801772c:	d003      	beq.n	8017736 <TIM_OC5_SetConfig+0x76>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	4a14      	ldr	r2, [pc, #80]	@ (8017784 <TIM_OC5_SetConfig+0xc4>)
 8017732:	4293      	cmp	r3, r2
 8017734:	d109      	bne.n	801774a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801773c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	695b      	ldr	r3, [r3, #20]
 8017742:	021b      	lsls	r3, r3, #8
 8017744:	697a      	ldr	r2, [r7, #20]
 8017746:	4313      	orrs	r3, r2
 8017748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	697a      	ldr	r2, [r7, #20]
 801774e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	68fa      	ldr	r2, [r7, #12]
 8017754:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	685a      	ldr	r2, [r3, #4]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	693a      	ldr	r2, [r7, #16]
 8017762:	621a      	str	r2, [r3, #32]
}
 8017764:	bf00      	nop
 8017766:	371c      	adds	r7, #28
 8017768:	46bd      	mov	sp, r7
 801776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776e:	4770      	bx	lr
 8017770:	fffeff8f 	.word	0xfffeff8f
 8017774:	40010000 	.word	0x40010000
 8017778:	40010400 	.word	0x40010400
 801777c:	40014000 	.word	0x40014000
 8017780:	40014400 	.word	0x40014400
 8017784:	40014800 	.word	0x40014800

08017788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017788:	b480      	push	{r7}
 801778a:	b087      	sub	sp, #28
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
 8017790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6a1b      	ldr	r3, [r3, #32]
 8017796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6a1b      	ldr	r3, [r3, #32]
 801779c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	685b      	ldr	r3, [r3, #4]
 80177a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80177ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80177b0:	68fa      	ldr	r2, [r7, #12]
 80177b2:	4b22      	ldr	r3, [pc, #136]	@ (801783c <TIM_OC6_SetConfig+0xb4>)
 80177b4:	4013      	ands	r3, r2
 80177b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80177b8:	683b      	ldr	r3, [r7, #0]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	021b      	lsls	r3, r3, #8
 80177be:	68fa      	ldr	r2, [r7, #12]
 80177c0:	4313      	orrs	r3, r2
 80177c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80177c4:	693b      	ldr	r3, [r7, #16]
 80177c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80177ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	689b      	ldr	r3, [r3, #8]
 80177d0:	051b      	lsls	r3, r3, #20
 80177d2:	693a      	ldr	r2, [r7, #16]
 80177d4:	4313      	orrs	r3, r2
 80177d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	4a19      	ldr	r2, [pc, #100]	@ (8017840 <TIM_OC6_SetConfig+0xb8>)
 80177dc:	4293      	cmp	r3, r2
 80177de:	d00f      	beq.n	8017800 <TIM_OC6_SetConfig+0x78>
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	4a18      	ldr	r2, [pc, #96]	@ (8017844 <TIM_OC6_SetConfig+0xbc>)
 80177e4:	4293      	cmp	r3, r2
 80177e6:	d00b      	beq.n	8017800 <TIM_OC6_SetConfig+0x78>
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	4a17      	ldr	r2, [pc, #92]	@ (8017848 <TIM_OC6_SetConfig+0xc0>)
 80177ec:	4293      	cmp	r3, r2
 80177ee:	d007      	beq.n	8017800 <TIM_OC6_SetConfig+0x78>
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	4a16      	ldr	r2, [pc, #88]	@ (801784c <TIM_OC6_SetConfig+0xc4>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d003      	beq.n	8017800 <TIM_OC6_SetConfig+0x78>
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	4a15      	ldr	r2, [pc, #84]	@ (8017850 <TIM_OC6_SetConfig+0xc8>)
 80177fc:	4293      	cmp	r3, r2
 80177fe:	d109      	bne.n	8017814 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	695b      	ldr	r3, [r3, #20]
 801780c:	029b      	lsls	r3, r3, #10
 801780e:	697a      	ldr	r2, [r7, #20]
 8017810:	4313      	orrs	r3, r2
 8017812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	697a      	ldr	r2, [r7, #20]
 8017818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	68fa      	ldr	r2, [r7, #12]
 801781e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	685a      	ldr	r2, [r3, #4]
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	693a      	ldr	r2, [r7, #16]
 801782c:	621a      	str	r2, [r3, #32]
}
 801782e:	bf00      	nop
 8017830:	371c      	adds	r7, #28
 8017832:	46bd      	mov	sp, r7
 8017834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017838:	4770      	bx	lr
 801783a:	bf00      	nop
 801783c:	feff8fff 	.word	0xfeff8fff
 8017840:	40010000 	.word	0x40010000
 8017844:	40010400 	.word	0x40010400
 8017848:	40014000 	.word	0x40014000
 801784c:	40014400 	.word	0x40014400
 8017850:	40014800 	.word	0x40014800

08017854 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017854:	b480      	push	{r7}
 8017856:	b087      	sub	sp, #28
 8017858:	af00      	add	r7, sp, #0
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	607a      	str	r2, [r7, #4]
 8017860:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	6a1b      	ldr	r3, [r3, #32]
 8017866:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	6a1b      	ldr	r3, [r3, #32]
 801786c:	f023 0201 	bic.w	r2, r3, #1
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	699b      	ldr	r3, [r3, #24]
 8017878:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	4a2c      	ldr	r2, [pc, #176]	@ (8017930 <TIM_TI1_SetConfig+0xdc>)
 801787e:	4293      	cmp	r3, r2
 8017880:	d023      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017888:	d01f      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	4a29      	ldr	r2, [pc, #164]	@ (8017934 <TIM_TI1_SetConfig+0xe0>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d01b      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	4a28      	ldr	r2, [pc, #160]	@ (8017938 <TIM_TI1_SetConfig+0xe4>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d017      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	4a27      	ldr	r2, [pc, #156]	@ (801793c <TIM_TI1_SetConfig+0xe8>)
 801789e:	4293      	cmp	r3, r2
 80178a0:	d013      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	4a26      	ldr	r2, [pc, #152]	@ (8017940 <TIM_TI1_SetConfig+0xec>)
 80178a6:	4293      	cmp	r3, r2
 80178a8:	d00f      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	4a25      	ldr	r2, [pc, #148]	@ (8017944 <TIM_TI1_SetConfig+0xf0>)
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d00b      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	4a24      	ldr	r2, [pc, #144]	@ (8017948 <TIM_TI1_SetConfig+0xf4>)
 80178b6:	4293      	cmp	r3, r2
 80178b8:	d007      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	4a23      	ldr	r2, [pc, #140]	@ (801794c <TIM_TI1_SetConfig+0xf8>)
 80178be:	4293      	cmp	r3, r2
 80178c0:	d003      	beq.n	80178ca <TIM_TI1_SetConfig+0x76>
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	4a22      	ldr	r2, [pc, #136]	@ (8017950 <TIM_TI1_SetConfig+0xfc>)
 80178c6:	4293      	cmp	r3, r2
 80178c8:	d101      	bne.n	80178ce <TIM_TI1_SetConfig+0x7a>
 80178ca:	2301      	movs	r3, #1
 80178cc:	e000      	b.n	80178d0 <TIM_TI1_SetConfig+0x7c>
 80178ce:	2300      	movs	r3, #0
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d008      	beq.n	80178e6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	f023 0303 	bic.w	r3, r3, #3
 80178da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80178dc:	697a      	ldr	r2, [r7, #20]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	4313      	orrs	r3, r2
 80178e2:	617b      	str	r3, [r7, #20]
 80178e4:	e003      	b.n	80178ee <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	f043 0301 	orr.w	r3, r3, #1
 80178ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178ee:	697b      	ldr	r3, [r7, #20]
 80178f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	011b      	lsls	r3, r3, #4
 80178fa:	b2db      	uxtb	r3, r3
 80178fc:	697a      	ldr	r2, [r7, #20]
 80178fe:	4313      	orrs	r3, r2
 8017900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017902:	693b      	ldr	r3, [r7, #16]
 8017904:	f023 030a 	bic.w	r3, r3, #10
 8017908:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	f003 030a 	and.w	r3, r3, #10
 8017910:	693a      	ldr	r2, [r7, #16]
 8017912:	4313      	orrs	r3, r2
 8017914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	697a      	ldr	r2, [r7, #20]
 801791a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	693a      	ldr	r2, [r7, #16]
 8017920:	621a      	str	r2, [r3, #32]
}
 8017922:	bf00      	nop
 8017924:	371c      	adds	r7, #28
 8017926:	46bd      	mov	sp, r7
 8017928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop
 8017930:	40010000 	.word	0x40010000
 8017934:	40000400 	.word	0x40000400
 8017938:	40000800 	.word	0x40000800
 801793c:	40000c00 	.word	0x40000c00
 8017940:	40010400 	.word	0x40010400
 8017944:	40001800 	.word	0x40001800
 8017948:	40014000 	.word	0x40014000
 801794c:	4000e000 	.word	0x4000e000
 8017950:	4000e400 	.word	0x4000e400

08017954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017954:	b480      	push	{r7}
 8017956:	b087      	sub	sp, #28
 8017958:	af00      	add	r7, sp, #0
 801795a:	60f8      	str	r0, [r7, #12]
 801795c:	60b9      	str	r1, [r7, #8]
 801795e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	6a1b      	ldr	r3, [r3, #32]
 8017964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	6a1b      	ldr	r3, [r3, #32]
 801796a:	f023 0201 	bic.w	r2, r3, #1
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	699b      	ldr	r3, [r3, #24]
 8017976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801797e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	011b      	lsls	r3, r3, #4
 8017984:	693a      	ldr	r2, [r7, #16]
 8017986:	4313      	orrs	r3, r2
 8017988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	f023 030a 	bic.w	r3, r3, #10
 8017990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017992:	697a      	ldr	r2, [r7, #20]
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	4313      	orrs	r3, r2
 8017998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	693a      	ldr	r2, [r7, #16]
 801799e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	697a      	ldr	r2, [r7, #20]
 80179a4:	621a      	str	r2, [r3, #32]
}
 80179a6:	bf00      	nop
 80179a8:	371c      	adds	r7, #28
 80179aa:	46bd      	mov	sp, r7
 80179ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b0:	4770      	bx	lr

080179b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80179b2:	b480      	push	{r7}
 80179b4:	b087      	sub	sp, #28
 80179b6:	af00      	add	r7, sp, #0
 80179b8:	60f8      	str	r0, [r7, #12]
 80179ba:	60b9      	str	r1, [r7, #8]
 80179bc:	607a      	str	r2, [r7, #4]
 80179be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	6a1b      	ldr	r3, [r3, #32]
 80179c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	6a1b      	ldr	r3, [r3, #32]
 80179ca:	f023 0210 	bic.w	r2, r3, #16
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	699b      	ldr	r3, [r3, #24]
 80179d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80179de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	021b      	lsls	r3, r3, #8
 80179e4:	693a      	ldr	r2, [r7, #16]
 80179e6:	4313      	orrs	r3, r2
 80179e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179ea:	693b      	ldr	r3, [r7, #16]
 80179ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	031b      	lsls	r3, r3, #12
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	693a      	ldr	r2, [r7, #16]
 80179fa:	4313      	orrs	r3, r2
 80179fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179fe:	697b      	ldr	r3, [r7, #20]
 8017a00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017a04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	011b      	lsls	r3, r3, #4
 8017a0a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8017a0e:	697a      	ldr	r2, [r7, #20]
 8017a10:	4313      	orrs	r3, r2
 8017a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	693a      	ldr	r2, [r7, #16]
 8017a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	697a      	ldr	r2, [r7, #20]
 8017a1e:	621a      	str	r2, [r3, #32]
}
 8017a20:	bf00      	nop
 8017a22:	371c      	adds	r7, #28
 8017a24:	46bd      	mov	sp, r7
 8017a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2a:	4770      	bx	lr

08017a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017a2c:	b480      	push	{r7}
 8017a2e:	b087      	sub	sp, #28
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	6a1b      	ldr	r3, [r3, #32]
 8017a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	6a1b      	ldr	r3, [r3, #32]
 8017a42:	f023 0210 	bic.w	r2, r3, #16
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	699b      	ldr	r3, [r3, #24]
 8017a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017a50:	693b      	ldr	r3, [r7, #16]
 8017a52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	031b      	lsls	r3, r3, #12
 8017a5c:	693a      	ldr	r2, [r7, #16]
 8017a5e:	4313      	orrs	r3, r2
 8017a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017a68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	011b      	lsls	r3, r3, #4
 8017a6e:	697a      	ldr	r2, [r7, #20]
 8017a70:	4313      	orrs	r3, r2
 8017a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	693a      	ldr	r2, [r7, #16]
 8017a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	697a      	ldr	r2, [r7, #20]
 8017a7e:	621a      	str	r2, [r3, #32]
}
 8017a80:	bf00      	nop
 8017a82:	371c      	adds	r7, #28
 8017a84:	46bd      	mov	sp, r7
 8017a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8a:	4770      	bx	lr

08017a8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a8c:	b480      	push	{r7}
 8017a8e:	b087      	sub	sp, #28
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	60b9      	str	r1, [r7, #8]
 8017a96:	607a      	str	r2, [r7, #4]
 8017a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	6a1b      	ldr	r3, [r3, #32]
 8017a9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	6a1b      	ldr	r3, [r3, #32]
 8017aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	69db      	ldr	r3, [r3, #28]
 8017ab0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017ab2:	693b      	ldr	r3, [r7, #16]
 8017ab4:	f023 0303 	bic.w	r3, r3, #3
 8017ab8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017aba:	693a      	ldr	r2, [r7, #16]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	4313      	orrs	r3, r2
 8017ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017ac8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	011b      	lsls	r3, r3, #4
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	693a      	ldr	r2, [r7, #16]
 8017ad2:	4313      	orrs	r3, r2
 8017ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017adc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	021b      	lsls	r3, r3, #8
 8017ae2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017ae6:	697a      	ldr	r2, [r7, #20]
 8017ae8:	4313      	orrs	r3, r2
 8017aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	693a      	ldr	r2, [r7, #16]
 8017af0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	697a      	ldr	r2, [r7, #20]
 8017af6:	621a      	str	r2, [r3, #32]
}
 8017af8:	bf00      	nop
 8017afa:	371c      	adds	r7, #28
 8017afc:	46bd      	mov	sp, r7
 8017afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b02:	4770      	bx	lr

08017b04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b087      	sub	sp, #28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
 8017b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	6a1b      	ldr	r3, [r3, #32]
 8017b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	6a1b      	ldr	r3, [r3, #32]
 8017b1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	69db      	ldr	r3, [r3, #28]
 8017b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017b30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	021b      	lsls	r3, r3, #8
 8017b36:	693a      	ldr	r2, [r7, #16]
 8017b38:	4313      	orrs	r3, r2
 8017b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017b3c:	693b      	ldr	r3, [r7, #16]
 8017b3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017b42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	031b      	lsls	r3, r3, #12
 8017b48:	b29b      	uxth	r3, r3
 8017b4a:	693a      	ldr	r2, [r7, #16]
 8017b4c:	4313      	orrs	r3, r2
 8017b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017b56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	031b      	lsls	r3, r3, #12
 8017b5c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017b60:	697a      	ldr	r2, [r7, #20]
 8017b62:	4313      	orrs	r3, r2
 8017b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	693a      	ldr	r2, [r7, #16]
 8017b6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	697a      	ldr	r2, [r7, #20]
 8017b70:	621a      	str	r2, [r3, #32]
}
 8017b72:	bf00      	nop
 8017b74:	371c      	adds	r7, #28
 8017b76:	46bd      	mov	sp, r7
 8017b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7c:	4770      	bx	lr
	...

08017b80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017b80:	b480      	push	{r7}
 8017b82:	b085      	sub	sp, #20
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	689b      	ldr	r3, [r3, #8]
 8017b8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017b90:	68fa      	ldr	r2, [r7, #12]
 8017b92:	4b09      	ldr	r3, [pc, #36]	@ (8017bb8 <TIM_ITRx_SetConfig+0x38>)
 8017b94:	4013      	ands	r3, r2
 8017b96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017b98:	683a      	ldr	r2, [r7, #0]
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	4313      	orrs	r3, r2
 8017b9e:	f043 0307 	orr.w	r3, r3, #7
 8017ba2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	68fa      	ldr	r2, [r7, #12]
 8017ba8:	609a      	str	r2, [r3, #8]
}
 8017baa:	bf00      	nop
 8017bac:	3714      	adds	r7, #20
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb4:	4770      	bx	lr
 8017bb6:	bf00      	nop
 8017bb8:	ffcfff8f 	.word	0xffcfff8f

08017bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b087      	sub	sp, #28
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	60f8      	str	r0, [r7, #12]
 8017bc4:	60b9      	str	r1, [r7, #8]
 8017bc6:	607a      	str	r2, [r7, #4]
 8017bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	689b      	ldr	r3, [r3, #8]
 8017bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017bd0:	697b      	ldr	r3, [r7, #20]
 8017bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	021a      	lsls	r2, r3, #8
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	431a      	orrs	r2, r3
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	4313      	orrs	r3, r2
 8017be4:	697a      	ldr	r2, [r7, #20]
 8017be6:	4313      	orrs	r3, r2
 8017be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	697a      	ldr	r2, [r7, #20]
 8017bee:	609a      	str	r2, [r3, #8]
}
 8017bf0:	bf00      	nop
 8017bf2:	371c      	adds	r7, #28
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfa:	4770      	bx	lr

08017bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b087      	sub	sp, #28
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	60f8      	str	r0, [r7, #12]
 8017c04:	60b9      	str	r1, [r7, #8]
 8017c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	f003 031f 	and.w	r3, r3, #31
 8017c0e:	2201      	movs	r2, #1
 8017c10:	fa02 f303 	lsl.w	r3, r2, r3
 8017c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	6a1a      	ldr	r2, [r3, #32]
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	43db      	mvns	r3, r3
 8017c1e:	401a      	ands	r2, r3
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	6a1a      	ldr	r2, [r3, #32]
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	f003 031f 	and.w	r3, r3, #31
 8017c2e:	6879      	ldr	r1, [r7, #4]
 8017c30:	fa01 f303 	lsl.w	r3, r1, r3
 8017c34:	431a      	orrs	r2, r3
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	621a      	str	r2, [r3, #32]
}
 8017c3a:	bf00      	nop
 8017c3c:	371c      	adds	r7, #28
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr
	...

08017c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c48:	b480      	push	{r7}
 8017c4a:	b085      	sub	sp, #20
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
 8017c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	d101      	bne.n	8017c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c5c:	2302      	movs	r3, #2
 8017c5e:	e077      	b.n	8017d50 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2201      	movs	r2, #1
 8017c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2202      	movs	r2, #2
 8017c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	685b      	ldr	r3, [r3, #4]
 8017c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	689b      	ldr	r3, [r3, #8]
 8017c7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	4a35      	ldr	r2, [pc, #212]	@ (8017d5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c86:	4293      	cmp	r3, r2
 8017c88:	d004      	beq.n	8017c94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	4a34      	ldr	r2, [pc, #208]	@ (8017d60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c90:	4293      	cmp	r3, r2
 8017c92:	d108      	bne.n	8017ca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017c9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	68fa      	ldr	r2, [r7, #12]
 8017ca2:	4313      	orrs	r3, r2
 8017ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	68fa      	ldr	r2, [r7, #12]
 8017cb4:	4313      	orrs	r3, r2
 8017cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	68fa      	ldr	r2, [r7, #12]
 8017cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a25      	ldr	r2, [pc, #148]	@ (8017d5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d02c      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017cd2:	d027      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	4a22      	ldr	r2, [pc, #136]	@ (8017d64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017cda:	4293      	cmp	r3, r2
 8017cdc:	d022      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4a21      	ldr	r2, [pc, #132]	@ (8017d68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d01d      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4a1f      	ldr	r2, [pc, #124]	@ (8017d6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d018      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8017d60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d013      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4a1b      	ldr	r2, [pc, #108]	@ (8017d70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017d02:	4293      	cmp	r3, r2
 8017d04:	d00e      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8017d74 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017d0c:	4293      	cmp	r3, r2
 8017d0e:	d009      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	4a18      	ldr	r2, [pc, #96]	@ (8017d78 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017d16:	4293      	cmp	r3, r2
 8017d18:	d004      	beq.n	8017d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	4a17      	ldr	r2, [pc, #92]	@ (8017d7c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017d20:	4293      	cmp	r3, r2
 8017d22:	d10c      	bne.n	8017d3e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	689b      	ldr	r3, [r3, #8]
 8017d30:	68ba      	ldr	r2, [r7, #8]
 8017d32:	4313      	orrs	r3, r2
 8017d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	68ba      	ldr	r2, [r7, #8]
 8017d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	2201      	movs	r2, #1
 8017d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017d4e:	2300      	movs	r3, #0
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3714      	adds	r7, #20
 8017d54:	46bd      	mov	sp, r7
 8017d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5a:	4770      	bx	lr
 8017d5c:	40010000 	.word	0x40010000
 8017d60:	40010400 	.word	0x40010400
 8017d64:	40000400 	.word	0x40000400
 8017d68:	40000800 	.word	0x40000800
 8017d6c:	40000c00 	.word	0x40000c00
 8017d70:	40001800 	.word	0x40001800
 8017d74:	40014000 	.word	0x40014000
 8017d78:	4000e000 	.word	0x4000e000
 8017d7c:	4000e400 	.word	0x4000e400

08017d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017d80:	b480      	push	{r7}
 8017d82:	b085      	sub	sp, #20
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
 8017d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d101      	bne.n	8017d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d98:	2302      	movs	r3, #2
 8017d9a:	e073      	b.n	8017e84 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	2201      	movs	r2, #1
 8017da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	68db      	ldr	r3, [r3, #12]
 8017dae:	4313      	orrs	r3, r2
 8017db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	4313      	orrs	r3, r2
 8017dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017dc6:	683b      	ldr	r3, [r7, #0]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	4313      	orrs	r3, r2
 8017dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	4313      	orrs	r3, r2
 8017dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	691b      	ldr	r3, [r3, #16]
 8017de6:	4313      	orrs	r3, r2
 8017de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	695b      	ldr	r3, [r3, #20]
 8017df4:	4313      	orrs	r3, r2
 8017df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e02:	4313      	orrs	r3, r2
 8017e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017e0c:	683b      	ldr	r3, [r7, #0]
 8017e0e:	699b      	ldr	r3, [r3, #24]
 8017e10:	041b      	lsls	r3, r3, #16
 8017e12:	4313      	orrs	r3, r2
 8017e14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	69db      	ldr	r3, [r3, #28]
 8017e20:	4313      	orrs	r3, r2
 8017e22:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4a19      	ldr	r2, [pc, #100]	@ (8017e90 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017e2a:	4293      	cmp	r3, r2
 8017e2c:	d004      	beq.n	8017e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4a18      	ldr	r2, [pc, #96]	@ (8017e94 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017e34:	4293      	cmp	r3, r2
 8017e36:	d11c      	bne.n	8017e72 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e42:	051b      	lsls	r3, r3, #20
 8017e44:	4313      	orrs	r3, r2
 8017e46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	6a1b      	ldr	r3, [r3, #32]
 8017e52:	4313      	orrs	r3, r2
 8017e54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e60:	4313      	orrs	r3, r2
 8017e62:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e6e:	4313      	orrs	r3, r2
 8017e70:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	68fa      	ldr	r2, [r7, #12]
 8017e78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017e82:	2300      	movs	r3, #0
}
 8017e84:	4618      	mov	r0, r3
 8017e86:	3714      	adds	r7, #20
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8e:	4770      	bx	lr
 8017e90:	40010000 	.word	0x40010000
 8017e94:	40010400 	.word	0x40010400

08017e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b083      	sub	sp, #12
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017ea0:	bf00      	nop
 8017ea2:	370c      	adds	r7, #12
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eaa:	4770      	bx	lr

08017eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017eac:	b480      	push	{r7}
 8017eae:	b083      	sub	sp, #12
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017eb4:	bf00      	nop
 8017eb6:	370c      	adds	r7, #12
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ebe:	4770      	bx	lr

08017ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b083      	sub	sp, #12
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017ec8:	bf00      	nop
 8017eca:	370c      	adds	r7, #12
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed2:	4770      	bx	lr

08017ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b082      	sub	sp, #8
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d101      	bne.n	8017ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	e042      	b.n	8017f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d106      	bne.n	8017efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7f1 fa29 	bl	8009350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	2224      	movs	r2, #36	@ 0x24
 8017f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	681a      	ldr	r2, [r3, #0]
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	f022 0201 	bic.w	r2, r2, #1
 8017f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d002      	beq.n	8017f24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017f1e:	6878      	ldr	r0, [r7, #4]
 8017f20:	f001 fbf8 	bl	8019714 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f000 fd89 	bl	8018a3c <UART_SetConfig>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	2b01      	cmp	r3, #1
 8017f2e:	d101      	bne.n	8017f34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017f30:	2301      	movs	r3, #1
 8017f32:	e01b      	b.n	8017f6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	685a      	ldr	r2, [r3, #4]
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	689a      	ldr	r2, [r3, #8]
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	681a      	ldr	r2, [r3, #0]
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	f042 0201 	orr.w	r2, r2, #1
 8017f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f001 fc77 	bl	8019858 <UART_CheckIdleState>
 8017f6a:	4603      	mov	r3, r0
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3708      	adds	r7, #8
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b08a      	sub	sp, #40	@ 0x28
 8017f78:	af02      	add	r7, sp, #8
 8017f7a:	60f8      	str	r0, [r7, #12]
 8017f7c:	60b9      	str	r1, [r7, #8]
 8017f7e:	603b      	str	r3, [r7, #0]
 8017f80:	4613      	mov	r3, r2
 8017f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f8a:	2b20      	cmp	r3, #32
 8017f8c:	d17b      	bne.n	8018086 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f8e:	68bb      	ldr	r3, [r7, #8]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d002      	beq.n	8017f9a <HAL_UART_Transmit+0x26>
 8017f94:	88fb      	ldrh	r3, [r7, #6]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d101      	bne.n	8017f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	e074      	b.n	8018088 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	2221      	movs	r2, #33	@ 0x21
 8017faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017fae:	f7f1 faf1 	bl	8009594 <HAL_GetTick>
 8017fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	88fa      	ldrh	r2, [r7, #6]
 8017fb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	88fa      	ldrh	r2, [r7, #6]
 8017fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	689b      	ldr	r3, [r3, #8]
 8017fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017fcc:	d108      	bne.n	8017fe0 <HAL_UART_Transmit+0x6c>
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	691b      	ldr	r3, [r3, #16]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d104      	bne.n	8017fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017fda:	68bb      	ldr	r3, [r7, #8]
 8017fdc:	61bb      	str	r3, [r7, #24]
 8017fde:	e003      	b.n	8017fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017fe8:	e030      	b.n	801804c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	9300      	str	r3, [sp, #0]
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	2180      	movs	r1, #128	@ 0x80
 8017ff4:	68f8      	ldr	r0, [r7, #12]
 8017ff6:	f001 fcd9 	bl	80199ac <UART_WaitOnFlagUntilTimeout>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d005      	beq.n	801800c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	2220      	movs	r2, #32
 8018004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8018008:	2303      	movs	r3, #3
 801800a:	e03d      	b.n	8018088 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d10b      	bne.n	801802a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018012:	69bb      	ldr	r3, [r7, #24]
 8018014:	881b      	ldrh	r3, [r3, #0]
 8018016:	461a      	mov	r2, r3
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018020:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018022:	69bb      	ldr	r3, [r7, #24]
 8018024:	3302      	adds	r3, #2
 8018026:	61bb      	str	r3, [r7, #24]
 8018028:	e007      	b.n	801803a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801802a:	69fb      	ldr	r3, [r7, #28]
 801802c:	781a      	ldrb	r2, [r3, #0]
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	3301      	adds	r3, #1
 8018038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018040:	b29b      	uxth	r3, r3
 8018042:	3b01      	subs	r3, #1
 8018044:	b29a      	uxth	r2, r3
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018052:	b29b      	uxth	r3, r3
 8018054:	2b00      	cmp	r3, #0
 8018056:	d1c8      	bne.n	8017fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018058:	683b      	ldr	r3, [r7, #0]
 801805a:	9300      	str	r3, [sp, #0]
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	2200      	movs	r2, #0
 8018060:	2140      	movs	r1, #64	@ 0x40
 8018062:	68f8      	ldr	r0, [r7, #12]
 8018064:	f001 fca2 	bl	80199ac <UART_WaitOnFlagUntilTimeout>
 8018068:	4603      	mov	r3, r0
 801806a:	2b00      	cmp	r3, #0
 801806c:	d005      	beq.n	801807a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	2220      	movs	r2, #32
 8018072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018076:	2303      	movs	r3, #3
 8018078:	e006      	b.n	8018088 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	2220      	movs	r2, #32
 801807e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018082:	2300      	movs	r3, #0
 8018084:	e000      	b.n	8018088 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018086:	2302      	movs	r3, #2
  }
}
 8018088:	4618      	mov	r0, r3
 801808a:	3720      	adds	r7, #32
 801808c:	46bd      	mov	sp, r7
 801808e:	bd80      	pop	{r7, pc}

08018090 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018090:	b480      	push	{r7}
 8018092:	b091      	sub	sp, #68	@ 0x44
 8018094:	af00      	add	r7, sp, #0
 8018096:	60f8      	str	r0, [r7, #12]
 8018098:	60b9      	str	r1, [r7, #8]
 801809a:	4613      	mov	r3, r2
 801809c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80180a4:	2b20      	cmp	r3, #32
 80180a6:	d178      	bne.n	801819a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d002      	beq.n	80180b4 <HAL_UART_Transmit_IT+0x24>
 80180ae:	88fb      	ldrh	r3, [r7, #6]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d101      	bne.n	80180b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80180b4:	2301      	movs	r3, #1
 80180b6:	e071      	b.n	801819c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	68ba      	ldr	r2, [r7, #8]
 80180bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	88fa      	ldrh	r2, [r7, #6]
 80180c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	88fa      	ldrh	r2, [r7, #6]
 80180ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2200      	movs	r2, #0
 80180d2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	2200      	movs	r2, #0
 80180d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	2221      	movs	r2, #33	@ 0x21
 80180e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80180e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80180ec:	d12a      	bne.n	8018144 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	689b      	ldr	r3, [r3, #8]
 80180f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180f6:	d107      	bne.n	8018108 <HAL_UART_Transmit_IT+0x78>
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	691b      	ldr	r3, [r3, #16]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d103      	bne.n	8018108 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	4a29      	ldr	r2, [pc, #164]	@ (80181a8 <HAL_UART_Transmit_IT+0x118>)
 8018104:	679a      	str	r2, [r3, #120]	@ 0x78
 8018106:	e002      	b.n	801810e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	4a28      	ldr	r2, [pc, #160]	@ (80181ac <HAL_UART_Transmit_IT+0x11c>)
 801810c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	3308      	adds	r3, #8
 8018114:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018118:	e853 3f00 	ldrex	r3, [r3]
 801811c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	3308      	adds	r3, #8
 801812c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801812e:	637a      	str	r2, [r7, #52]	@ 0x34
 8018130:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018132:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018136:	e841 2300 	strex	r3, r2, [r1]
 801813a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801813c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801813e:	2b00      	cmp	r3, #0
 8018140:	d1e5      	bne.n	801810e <HAL_UART_Transmit_IT+0x7e>
 8018142:	e028      	b.n	8018196 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	689b      	ldr	r3, [r3, #8]
 8018148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801814c:	d107      	bne.n	801815e <HAL_UART_Transmit_IT+0xce>
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	691b      	ldr	r3, [r3, #16]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d103      	bne.n	801815e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	4a15      	ldr	r2, [pc, #84]	@ (80181b0 <HAL_UART_Transmit_IT+0x120>)
 801815a:	679a      	str	r2, [r3, #120]	@ 0x78
 801815c:	e002      	b.n	8018164 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	4a14      	ldr	r2, [pc, #80]	@ (80181b4 <HAL_UART_Transmit_IT+0x124>)
 8018162:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	e853 3f00 	ldrex	r3, [r3]
 8018170:	613b      	str	r3, [r7, #16]
   return(result);
 8018172:	693b      	ldr	r3, [r7, #16]
 8018174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	461a      	mov	r2, r3
 8018180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018182:	623b      	str	r3, [r7, #32]
 8018184:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018186:	69f9      	ldr	r1, [r7, #28]
 8018188:	6a3a      	ldr	r2, [r7, #32]
 801818a:	e841 2300 	strex	r3, r2, [r1]
 801818e:	61bb      	str	r3, [r7, #24]
   return(result);
 8018190:	69bb      	ldr	r3, [r7, #24]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d1e6      	bne.n	8018164 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8018196:	2300      	movs	r3, #0
 8018198:	e000      	b.n	801819c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801819a:	2302      	movs	r3, #2
  }
}
 801819c:	4618      	mov	r0, r3
 801819e:	3744      	adds	r7, #68	@ 0x44
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr
 80181a8:	0801a017 	.word	0x0801a017
 80181ac:	08019f37 	.word	0x08019f37
 80181b0:	08019e75 	.word	0x08019e75
 80181b4:	08019dbd 	.word	0x08019dbd

080181b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b08a      	sub	sp, #40	@ 0x28
 80181bc:	af00      	add	r7, sp, #0
 80181be:	60f8      	str	r0, [r7, #12]
 80181c0:	60b9      	str	r1, [r7, #8]
 80181c2:	4613      	mov	r3, r2
 80181c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80181cc:	2b20      	cmp	r3, #32
 80181ce:	d137      	bne.n	8018240 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d002      	beq.n	80181dc <HAL_UART_Receive_IT+0x24>
 80181d6:	88fb      	ldrh	r3, [r7, #6]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d101      	bne.n	80181e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80181dc:	2301      	movs	r3, #1
 80181de:	e030      	b.n	8018242 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	2200      	movs	r2, #0
 80181e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	4a18      	ldr	r2, [pc, #96]	@ (801824c <HAL_UART_Receive_IT+0x94>)
 80181ec:	4293      	cmp	r3, r2
 80181ee:	d01f      	beq.n	8018230 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d018      	beq.n	8018230 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018204:	697b      	ldr	r3, [r7, #20]
 8018206:	e853 3f00 	ldrex	r3, [r3]
 801820a:	613b      	str	r3, [r7, #16]
   return(result);
 801820c:	693b      	ldr	r3, [r7, #16]
 801820e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018212:	627b      	str	r3, [r7, #36]	@ 0x24
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	461a      	mov	r2, r3
 801821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801821c:	623b      	str	r3, [r7, #32]
 801821e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018220:	69f9      	ldr	r1, [r7, #28]
 8018222:	6a3a      	ldr	r2, [r7, #32]
 8018224:	e841 2300 	strex	r3, r2, [r1]
 8018228:	61bb      	str	r3, [r7, #24]
   return(result);
 801822a:	69bb      	ldr	r3, [r7, #24]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d1e6      	bne.n	80181fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018230:	88fb      	ldrh	r3, [r7, #6]
 8018232:	461a      	mov	r2, r3
 8018234:	68b9      	ldr	r1, [r7, #8]
 8018236:	68f8      	ldr	r0, [r7, #12]
 8018238:	f001 fc26 	bl	8019a88 <UART_Start_Receive_IT>
 801823c:	4603      	mov	r3, r0
 801823e:	e000      	b.n	8018242 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018240:	2302      	movs	r3, #2
  }
}
 8018242:	4618      	mov	r0, r3
 8018244:	3728      	adds	r7, #40	@ 0x28
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}
 801824a:	bf00      	nop
 801824c:	58000c00 	.word	0x58000c00

08018250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b0ba      	sub	sp, #232	@ 0xe8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	69db      	ldr	r3, [r3, #28]
 801825e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	689b      	ldr	r3, [r3, #8]
 8018272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801827a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801827e:	4013      	ands	r3, r2
 8018280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018288:	2b00      	cmp	r3, #0
 801828a:	d11b      	bne.n	80182c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018290:	f003 0320 	and.w	r3, r3, #32
 8018294:	2b00      	cmp	r3, #0
 8018296:	d015      	beq.n	80182c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801829c:	f003 0320 	and.w	r3, r3, #32
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d105      	bne.n	80182b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80182a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d009      	beq.n	80182c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	f000 8393 	beq.w	80189e0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182be:	6878      	ldr	r0, [r7, #4]
 80182c0:	4798      	blx	r3
      }
      return;
 80182c2:	e38d      	b.n	80189e0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80182c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	f000 8123 	beq.w	8018514 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80182ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182d2:	4b8d      	ldr	r3, [pc, #564]	@ (8018508 <HAL_UART_IRQHandler+0x2b8>)
 80182d4:	4013      	ands	r3, r2
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d106      	bne.n	80182e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80182da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80182de:	4b8b      	ldr	r3, [pc, #556]	@ (801850c <HAL_UART_IRQHandler+0x2bc>)
 80182e0:	4013      	ands	r3, r2
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	f000 8116 	beq.w	8018514 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80182e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182ec:	f003 0301 	and.w	r3, r3, #1
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d011      	beq.n	8018318 <HAL_UART_IRQHandler+0xc8>
 80182f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d00b      	beq.n	8018318 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2201      	movs	r2, #1
 8018306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801830e:	f043 0201 	orr.w	r2, r3, #1
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801831c:	f003 0302 	and.w	r3, r3, #2
 8018320:	2b00      	cmp	r3, #0
 8018322:	d011      	beq.n	8018348 <HAL_UART_IRQHandler+0xf8>
 8018324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018328:	f003 0301 	and.w	r3, r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	d00b      	beq.n	8018348 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2202      	movs	r2, #2
 8018336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801833e:	f043 0204 	orr.w	r2, r3, #4
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801834c:	f003 0304 	and.w	r3, r3, #4
 8018350:	2b00      	cmp	r3, #0
 8018352:	d011      	beq.n	8018378 <HAL_UART_IRQHandler+0x128>
 8018354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	2b00      	cmp	r3, #0
 801835e:	d00b      	beq.n	8018378 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2204      	movs	r2, #4
 8018366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801836e:	f043 0202 	orr.w	r2, r3, #2
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801837c:	f003 0308 	and.w	r3, r3, #8
 8018380:	2b00      	cmp	r3, #0
 8018382:	d017      	beq.n	80183b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018388:	f003 0320 	and.w	r3, r3, #32
 801838c:	2b00      	cmp	r3, #0
 801838e:	d105      	bne.n	801839c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018394:	4b5c      	ldr	r3, [pc, #368]	@ (8018508 <HAL_UART_IRQHandler+0x2b8>)
 8018396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018398:	2b00      	cmp	r3, #0
 801839a:	d00b      	beq.n	80183b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	2208      	movs	r2, #8
 80183a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183aa:	f043 0208 	orr.w	r2, r3, #8
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80183b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d012      	beq.n	80183e6 <HAL_UART_IRQHandler+0x196>
 80183c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d00c      	beq.n	80183e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183dc:	f043 0220 	orr.w	r2, r3, #32
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	f000 82f9 	beq.w	80189e4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80183f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183f6:	f003 0320 	and.w	r3, r3, #32
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d013      	beq.n	8018426 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80183fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018402:	f003 0320 	and.w	r3, r3, #32
 8018406:	2b00      	cmp	r3, #0
 8018408:	d105      	bne.n	8018416 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801840a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801840e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018412:	2b00      	cmp	r3, #0
 8018414:	d007      	beq.n	8018426 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801841a:	2b00      	cmp	r3, #0
 801841c:	d003      	beq.n	8018426 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801842c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	689b      	ldr	r3, [r3, #8]
 8018436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801843a:	2b40      	cmp	r3, #64	@ 0x40
 801843c:	d005      	beq.n	801844a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801843e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018442:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018446:	2b00      	cmp	r3, #0
 8018448:	d054      	beq.n	80184f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f001 fc3e 	bl	8019ccc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	689b      	ldr	r3, [r3, #8]
 8018456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801845a:	2b40      	cmp	r3, #64	@ 0x40
 801845c:	d146      	bne.n	80184ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	3308      	adds	r3, #8
 8018464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801846c:	e853 3f00 	ldrex	r3, [r3]
 8018470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801847c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	3308      	adds	r3, #8
 8018486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801848a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801848e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801849a:	e841 2300 	strex	r3, r2, [r1]
 801849e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80184a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d1d9      	bne.n	801845e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d017      	beq.n	80184e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184ba:	4a15      	ldr	r2, [pc, #84]	@ (8018510 <HAL_UART_IRQHandler+0x2c0>)
 80184bc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7f4 fa7b 	bl	800c9c0 <HAL_DMA_Abort_IT>
 80184ca:	4603      	mov	r3, r0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d019      	beq.n	8018504 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184d8:	687a      	ldr	r2, [r7, #4]
 80184da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80184de:	4610      	mov	r0, r2
 80184e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184e2:	e00f      	b.n	8018504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f000 fa93 	bl	8018a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ea:	e00b      	b.n	8018504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80184ec:	6878      	ldr	r0, [r7, #4]
 80184ee:	f000 fa8f 	bl	8018a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184f2:	e007      	b.n	8018504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f000 fa8b 	bl	8018a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2200      	movs	r2, #0
 80184fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8018502:	e26f      	b.n	80189e4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018504:	bf00      	nop
    return;
 8018506:	e26d      	b.n	80189e4 <HAL_UART_IRQHandler+0x794>
 8018508:	10000001 	.word	0x10000001
 801850c:	04000120 	.word	0x04000120
 8018510:	08019d99 	.word	0x08019d99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018518:	2b01      	cmp	r3, #1
 801851a:	f040 8203 	bne.w	8018924 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018522:	f003 0310 	and.w	r3, r3, #16
 8018526:	2b00      	cmp	r3, #0
 8018528:	f000 81fc 	beq.w	8018924 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018530:	f003 0310 	and.w	r3, r3, #16
 8018534:	2b00      	cmp	r3, #0
 8018536:	f000 81f5 	beq.w	8018924 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2210      	movs	r2, #16
 8018540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	689b      	ldr	r3, [r3, #8]
 8018548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801854c:	2b40      	cmp	r3, #64	@ 0x40
 801854e:	f040 816d 	bne.w	801882c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	4aa4      	ldr	r2, [pc, #656]	@ (80187ec <HAL_UART_IRQHandler+0x59c>)
 801855c:	4293      	cmp	r3, r2
 801855e:	d068      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	4aa1      	ldr	r2, [pc, #644]	@ (80187f0 <HAL_UART_IRQHandler+0x5a0>)
 801856a:	4293      	cmp	r3, r2
 801856c:	d061      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	4a9f      	ldr	r2, [pc, #636]	@ (80187f4 <HAL_UART_IRQHandler+0x5a4>)
 8018578:	4293      	cmp	r3, r2
 801857a:	d05a      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a9c      	ldr	r2, [pc, #624]	@ (80187f8 <HAL_UART_IRQHandler+0x5a8>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d053      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	4a9a      	ldr	r2, [pc, #616]	@ (80187fc <HAL_UART_IRQHandler+0x5ac>)
 8018594:	4293      	cmp	r3, r2
 8018596:	d04c      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	4a97      	ldr	r2, [pc, #604]	@ (8018800 <HAL_UART_IRQHandler+0x5b0>)
 80185a2:	4293      	cmp	r3, r2
 80185a4:	d045      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4a95      	ldr	r2, [pc, #596]	@ (8018804 <HAL_UART_IRQHandler+0x5b4>)
 80185b0:	4293      	cmp	r3, r2
 80185b2:	d03e      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	4a92      	ldr	r2, [pc, #584]	@ (8018808 <HAL_UART_IRQHandler+0x5b8>)
 80185be:	4293      	cmp	r3, r2
 80185c0:	d037      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4a90      	ldr	r2, [pc, #576]	@ (801880c <HAL_UART_IRQHandler+0x5bc>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d030      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	4a8d      	ldr	r2, [pc, #564]	@ (8018810 <HAL_UART_IRQHandler+0x5c0>)
 80185da:	4293      	cmp	r3, r2
 80185dc:	d029      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	4a8b      	ldr	r2, [pc, #556]	@ (8018814 <HAL_UART_IRQHandler+0x5c4>)
 80185e8:	4293      	cmp	r3, r2
 80185ea:	d022      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	4a88      	ldr	r2, [pc, #544]	@ (8018818 <HAL_UART_IRQHandler+0x5c8>)
 80185f6:	4293      	cmp	r3, r2
 80185f8:	d01b      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	4a86      	ldr	r2, [pc, #536]	@ (801881c <HAL_UART_IRQHandler+0x5cc>)
 8018604:	4293      	cmp	r3, r2
 8018606:	d014      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4a83      	ldr	r2, [pc, #524]	@ (8018820 <HAL_UART_IRQHandler+0x5d0>)
 8018612:	4293      	cmp	r3, r2
 8018614:	d00d      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	4a81      	ldr	r2, [pc, #516]	@ (8018824 <HAL_UART_IRQHandler+0x5d4>)
 8018620:	4293      	cmp	r3, r2
 8018622:	d006      	beq.n	8018632 <HAL_UART_IRQHandler+0x3e2>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	4a7e      	ldr	r2, [pc, #504]	@ (8018828 <HAL_UART_IRQHandler+0x5d8>)
 801862e:	4293      	cmp	r3, r2
 8018630:	d106      	bne.n	8018640 <HAL_UART_IRQHandler+0x3f0>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	b29b      	uxth	r3, r3
 801863e:	e005      	b.n	801864c <HAL_UART_IRQHandler+0x3fc>
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	b29b      	uxth	r3, r3
 801864c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018654:	2b00      	cmp	r3, #0
 8018656:	f000 80ad 	beq.w	80187b4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018664:	429a      	cmp	r2, r3
 8018666:	f080 80a5 	bcs.w	80187b4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018670:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801867a:	69db      	ldr	r3, [r3, #28]
 801867c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018680:	f000 8087 	beq.w	8018792 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801868c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018690:	e853 3f00 	ldrex	r3, [r3]
 8018694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801869c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80186a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	461a      	mov	r2, r3
 80186aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80186ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80186b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80186ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80186be:	e841 2300 	strex	r3, r2, [r1]
 80186c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80186c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d1da      	bne.n	8018684 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	3308      	adds	r3, #8
 80186d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80186d8:	e853 3f00 	ldrex	r3, [r3]
 80186dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80186de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80186e0:	f023 0301 	bic.w	r3, r3, #1
 80186e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	3308      	adds	r3, #8
 80186ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80186f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80186f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80186fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80186fe:	e841 2300 	strex	r3, r2, [r1]
 8018702:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8018704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018706:	2b00      	cmp	r3, #0
 8018708:	d1e1      	bne.n	80186ce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	3308      	adds	r3, #8
 8018710:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018714:	e853 3f00 	ldrex	r3, [r3]
 8018718:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801871a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801871c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	3308      	adds	r3, #8
 801872a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801872e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018730:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018732:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018734:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018736:	e841 2300 	strex	r3, r2, [r1]
 801873a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801873c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801873e:	2b00      	cmp	r3, #0
 8018740:	d1e3      	bne.n	801870a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2220      	movs	r2, #32
 8018746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2200      	movs	r2, #0
 801874e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018758:	e853 3f00 	ldrex	r3, [r3]
 801875c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801875e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018760:	f023 0310 	bic.w	r3, r3, #16
 8018764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	461a      	mov	r2, r3
 801876e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018772:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018774:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018778:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801877a:	e841 2300 	strex	r3, r2, [r1]
 801877e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018782:	2b00      	cmp	r3, #0
 8018784:	d1e4      	bne.n	8018750 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801878c:	4618      	mov	r0, r3
 801878e:	f7f3 fdf9 	bl	800c384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	2202      	movs	r2, #2
 8018796:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	1ad3      	subs	r3, r2, r3
 80187a8:	b29b      	uxth	r3, r3
 80187aa:	4619      	mov	r1, r3
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f000 f939 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80187b2:	e119      	b.n	80189e8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80187be:	429a      	cmp	r2, r3
 80187c0:	f040 8112 	bne.w	80189e8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80187ca:	69db      	ldr	r3, [r3, #28]
 80187cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187d0:	f040 810a 	bne.w	80189e8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	2202      	movs	r2, #2
 80187d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187e0:	4619      	mov	r1, r3
 80187e2:	6878      	ldr	r0, [r7, #4]
 80187e4:	f000 f91e 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
      return;
 80187e8:	e0fe      	b.n	80189e8 <HAL_UART_IRQHandler+0x798>
 80187ea:	bf00      	nop
 80187ec:	40020010 	.word	0x40020010
 80187f0:	40020028 	.word	0x40020028
 80187f4:	40020040 	.word	0x40020040
 80187f8:	40020058 	.word	0x40020058
 80187fc:	40020070 	.word	0x40020070
 8018800:	40020088 	.word	0x40020088
 8018804:	400200a0 	.word	0x400200a0
 8018808:	400200b8 	.word	0x400200b8
 801880c:	40020410 	.word	0x40020410
 8018810:	40020428 	.word	0x40020428
 8018814:	40020440 	.word	0x40020440
 8018818:	40020458 	.word	0x40020458
 801881c:	40020470 	.word	0x40020470
 8018820:	40020488 	.word	0x40020488
 8018824:	400204a0 	.word	0x400204a0
 8018828:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018838:	b29b      	uxth	r3, r3
 801883a:	1ad3      	subs	r3, r2, r3
 801883c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018846:	b29b      	uxth	r3, r3
 8018848:	2b00      	cmp	r3, #0
 801884a:	f000 80cf 	beq.w	80189ec <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801884e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018852:	2b00      	cmp	r3, #0
 8018854:	f000 80ca 	beq.w	80189ec <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018860:	e853 3f00 	ldrex	r3, [r3]
 8018864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801886c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	461a      	mov	r2, r3
 8018876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801887a:	647b      	str	r3, [r7, #68]	@ 0x44
 801887c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801887e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018882:	e841 2300 	strex	r3, r2, [r1]
 8018886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801888a:	2b00      	cmp	r3, #0
 801888c:	d1e4      	bne.n	8018858 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	3308      	adds	r3, #8
 8018894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018898:	e853 3f00 	ldrex	r3, [r3]
 801889c:	623b      	str	r3, [r7, #32]
   return(result);
 801889e:	6a3a      	ldr	r2, [r7, #32]
 80188a0:	4b55      	ldr	r3, [pc, #340]	@ (80189f8 <HAL_UART_IRQHandler+0x7a8>)
 80188a2:	4013      	ands	r3, r2
 80188a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	3308      	adds	r3, #8
 80188ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80188b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80188b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80188b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188ba:	e841 2300 	strex	r3, r2, [r1]
 80188be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80188c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d1e3      	bne.n	801888e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2220      	movs	r2, #32
 80188ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2200      	movs	r2, #0
 80188d2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	2200      	movs	r2, #0
 80188d8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188e0:	693b      	ldr	r3, [r7, #16]
 80188e2:	e853 3f00 	ldrex	r3, [r3]
 80188e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	f023 0310 	bic.w	r3, r3, #16
 80188ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	461a      	mov	r2, r3
 80188f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80188fc:	61fb      	str	r3, [r7, #28]
 80188fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018900:	69b9      	ldr	r1, [r7, #24]
 8018902:	69fa      	ldr	r2, [r7, #28]
 8018904:	e841 2300 	strex	r3, r2, [r1]
 8018908:	617b      	str	r3, [r7, #20]
   return(result);
 801890a:	697b      	ldr	r3, [r7, #20]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d1e4      	bne.n	80188da <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2202      	movs	r2, #2
 8018914:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018916:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801891a:	4619      	mov	r1, r3
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f000 f881 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018922:	e063      	b.n	80189ec <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801892c:	2b00      	cmp	r3, #0
 801892e:	d00e      	beq.n	801894e <HAL_UART_IRQHandler+0x6fe>
 8018930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018938:	2b00      	cmp	r3, #0
 801893a:	d008      	beq.n	801894e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018946:	6878      	ldr	r0, [r7, #4]
 8018948:	f002 f926 	bl	801ab98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801894c:	e051      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801894e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018956:	2b00      	cmp	r3, #0
 8018958:	d014      	beq.n	8018984 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801895a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801895e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018962:	2b00      	cmp	r3, #0
 8018964:	d105      	bne.n	8018972 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801896a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801896e:	2b00      	cmp	r3, #0
 8018970:	d008      	beq.n	8018984 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018976:	2b00      	cmp	r3, #0
 8018978:	d03a      	beq.n	80189f0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	4798      	blx	r3
    }
    return;
 8018982:	e035      	b.n	80189f0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801898c:	2b00      	cmp	r3, #0
 801898e:	d009      	beq.n	80189a4 <HAL_UART_IRQHandler+0x754>
 8018990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018998:	2b00      	cmp	r3, #0
 801899a:	d003      	beq.n	80189a4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f001 fbaf 	bl	801a100 <UART_EndTransmit_IT>
    return;
 80189a2:	e026      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80189a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80189a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d009      	beq.n	80189c4 <HAL_UART_IRQHandler+0x774>
 80189b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d003      	beq.n	80189c4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80189bc:	6878      	ldr	r0, [r7, #4]
 80189be:	f002 f8ff 	bl	801abc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189c2:	e016      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80189c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80189c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d010      	beq.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
 80189d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	da0c      	bge.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80189d8:	6878      	ldr	r0, [r7, #4]
 80189da:	f002 f8e7 	bl	801abac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189de:	e008      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189e0:	bf00      	nop
 80189e2:	e006      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189e4:	bf00      	nop
 80189e6:	e004      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189e8:	bf00      	nop
 80189ea:	e002      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189ec:	bf00      	nop
 80189ee:	e000      	b.n	80189f2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189f0:	bf00      	nop
  }
}
 80189f2:	37e8      	adds	r7, #232	@ 0xe8
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}
 80189f8:	effffffe 	.word	0xeffffffe

080189fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018a04:	bf00      	nop
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr

08018a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018a10:	b480      	push	{r7}
 8018a12:	b083      	sub	sp, #12
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018a18:	bf00      	nop
 8018a1a:	370c      	adds	r7, #12
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a22:	4770      	bx	lr

08018a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018a24:	b480      	push	{r7}
 8018a26:	b083      	sub	sp, #12
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	460b      	mov	r3, r1
 8018a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018a30:	bf00      	nop
 8018a32:	370c      	adds	r7, #12
 8018a34:	46bd      	mov	sp, r7
 8018a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3a:	4770      	bx	lr

08018a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a40:	b092      	sub	sp, #72	@ 0x48
 8018a42:	af00      	add	r7, sp, #0
 8018a44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a46:	2300      	movs	r3, #0
 8018a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	689a      	ldr	r2, [r3, #8]
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	691b      	ldr	r3, [r3, #16]
 8018a54:	431a      	orrs	r2, r3
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	695b      	ldr	r3, [r3, #20]
 8018a5a:	431a      	orrs	r2, r3
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	69db      	ldr	r3, [r3, #28]
 8018a60:	4313      	orrs	r3, r2
 8018a62:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	4bbe      	ldr	r3, [pc, #760]	@ (8018d64 <UART_SetConfig+0x328>)
 8018a6c:	4013      	ands	r3, r2
 8018a6e:	697a      	ldr	r2, [r7, #20]
 8018a70:	6812      	ldr	r2, [r2, #0]
 8018a72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a74:	430b      	orrs	r3, r1
 8018a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	68da      	ldr	r2, [r3, #12]
 8018a86:	697b      	ldr	r3, [r7, #20]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	430a      	orrs	r2, r1
 8018a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	699b      	ldr	r3, [r3, #24]
 8018a92:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	4ab3      	ldr	r2, [pc, #716]	@ (8018d68 <UART_SetConfig+0x32c>)
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	d004      	beq.n	8018aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	6a1b      	ldr	r3, [r3, #32]
 8018aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018aa4:	4313      	orrs	r3, r2
 8018aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	689a      	ldr	r2, [r3, #8]
 8018aae:	4baf      	ldr	r3, [pc, #700]	@ (8018d6c <UART_SetConfig+0x330>)
 8018ab0:	4013      	ands	r3, r2
 8018ab2:	697a      	ldr	r2, [r7, #20]
 8018ab4:	6812      	ldr	r2, [r2, #0]
 8018ab6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018ab8:	430b      	orrs	r3, r1
 8018aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ac2:	f023 010f 	bic.w	r1, r3, #15
 8018ac6:	697b      	ldr	r3, [r7, #20]
 8018ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	430a      	orrs	r2, r1
 8018ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018ad2:	697b      	ldr	r3, [r7, #20]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	4aa6      	ldr	r2, [pc, #664]	@ (8018d70 <UART_SetConfig+0x334>)
 8018ad8:	4293      	cmp	r3, r2
 8018ada:	d177      	bne.n	8018bcc <UART_SetConfig+0x190>
 8018adc:	4ba5      	ldr	r3, [pc, #660]	@ (8018d74 <UART_SetConfig+0x338>)
 8018ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ae4:	2b28      	cmp	r3, #40	@ 0x28
 8018ae6:	d86d      	bhi.n	8018bc4 <UART_SetConfig+0x188>
 8018ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8018af0 <UART_SetConfig+0xb4>)
 8018aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aee:	bf00      	nop
 8018af0:	08018b95 	.word	0x08018b95
 8018af4:	08018bc5 	.word	0x08018bc5
 8018af8:	08018bc5 	.word	0x08018bc5
 8018afc:	08018bc5 	.word	0x08018bc5
 8018b00:	08018bc5 	.word	0x08018bc5
 8018b04:	08018bc5 	.word	0x08018bc5
 8018b08:	08018bc5 	.word	0x08018bc5
 8018b0c:	08018bc5 	.word	0x08018bc5
 8018b10:	08018b9d 	.word	0x08018b9d
 8018b14:	08018bc5 	.word	0x08018bc5
 8018b18:	08018bc5 	.word	0x08018bc5
 8018b1c:	08018bc5 	.word	0x08018bc5
 8018b20:	08018bc5 	.word	0x08018bc5
 8018b24:	08018bc5 	.word	0x08018bc5
 8018b28:	08018bc5 	.word	0x08018bc5
 8018b2c:	08018bc5 	.word	0x08018bc5
 8018b30:	08018ba5 	.word	0x08018ba5
 8018b34:	08018bc5 	.word	0x08018bc5
 8018b38:	08018bc5 	.word	0x08018bc5
 8018b3c:	08018bc5 	.word	0x08018bc5
 8018b40:	08018bc5 	.word	0x08018bc5
 8018b44:	08018bc5 	.word	0x08018bc5
 8018b48:	08018bc5 	.word	0x08018bc5
 8018b4c:	08018bc5 	.word	0x08018bc5
 8018b50:	08018bad 	.word	0x08018bad
 8018b54:	08018bc5 	.word	0x08018bc5
 8018b58:	08018bc5 	.word	0x08018bc5
 8018b5c:	08018bc5 	.word	0x08018bc5
 8018b60:	08018bc5 	.word	0x08018bc5
 8018b64:	08018bc5 	.word	0x08018bc5
 8018b68:	08018bc5 	.word	0x08018bc5
 8018b6c:	08018bc5 	.word	0x08018bc5
 8018b70:	08018bb5 	.word	0x08018bb5
 8018b74:	08018bc5 	.word	0x08018bc5
 8018b78:	08018bc5 	.word	0x08018bc5
 8018b7c:	08018bc5 	.word	0x08018bc5
 8018b80:	08018bc5 	.word	0x08018bc5
 8018b84:	08018bc5 	.word	0x08018bc5
 8018b88:	08018bc5 	.word	0x08018bc5
 8018b8c:	08018bc5 	.word	0x08018bc5
 8018b90:	08018bbd 	.word	0x08018bbd
 8018b94:	2301      	movs	r3, #1
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e326      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018b9c:	2304      	movs	r3, #4
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e322      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ba4:	2308      	movs	r3, #8
 8018ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018baa:	e31e      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018bac:	2310      	movs	r3, #16
 8018bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bb2:	e31a      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018bb4:	2320      	movs	r3, #32
 8018bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bba:	e316      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018bbc:	2340      	movs	r3, #64	@ 0x40
 8018bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bc2:	e312      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018bc4:	2380      	movs	r3, #128	@ 0x80
 8018bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bca:	e30e      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	4a69      	ldr	r2, [pc, #420]	@ (8018d78 <UART_SetConfig+0x33c>)
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	d130      	bne.n	8018c38 <UART_SetConfig+0x1fc>
 8018bd6:	4b67      	ldr	r3, [pc, #412]	@ (8018d74 <UART_SetConfig+0x338>)
 8018bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bda:	f003 0307 	and.w	r3, r3, #7
 8018bde:	2b05      	cmp	r3, #5
 8018be0:	d826      	bhi.n	8018c30 <UART_SetConfig+0x1f4>
 8018be2:	a201      	add	r2, pc, #4	@ (adr r2, 8018be8 <UART_SetConfig+0x1ac>)
 8018be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018be8:	08018c01 	.word	0x08018c01
 8018bec:	08018c09 	.word	0x08018c09
 8018bf0:	08018c11 	.word	0x08018c11
 8018bf4:	08018c19 	.word	0x08018c19
 8018bf8:	08018c21 	.word	0x08018c21
 8018bfc:	08018c29 	.word	0x08018c29
 8018c00:	2300      	movs	r3, #0
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e2f0      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c08:	2304      	movs	r3, #4
 8018c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0e:	e2ec      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c10:	2308      	movs	r3, #8
 8018c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c16:	e2e8      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c18:	2310      	movs	r3, #16
 8018c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c1e:	e2e4      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c20:	2320      	movs	r3, #32
 8018c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c26:	e2e0      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c28:	2340      	movs	r3, #64	@ 0x40
 8018c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c2e:	e2dc      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c30:	2380      	movs	r3, #128	@ 0x80
 8018c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c36:	e2d8      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c38:	697b      	ldr	r3, [r7, #20]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8018d7c <UART_SetConfig+0x340>)
 8018c3e:	4293      	cmp	r3, r2
 8018c40:	d130      	bne.n	8018ca4 <UART_SetConfig+0x268>
 8018c42:	4b4c      	ldr	r3, [pc, #304]	@ (8018d74 <UART_SetConfig+0x338>)
 8018c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c46:	f003 0307 	and.w	r3, r3, #7
 8018c4a:	2b05      	cmp	r3, #5
 8018c4c:	d826      	bhi.n	8018c9c <UART_SetConfig+0x260>
 8018c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c54 <UART_SetConfig+0x218>)
 8018c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c54:	08018c6d 	.word	0x08018c6d
 8018c58:	08018c75 	.word	0x08018c75
 8018c5c:	08018c7d 	.word	0x08018c7d
 8018c60:	08018c85 	.word	0x08018c85
 8018c64:	08018c8d 	.word	0x08018c8d
 8018c68:	08018c95 	.word	0x08018c95
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e2ba      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c74:	2304      	movs	r3, #4
 8018c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c7a:	e2b6      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c7c:	2308      	movs	r3, #8
 8018c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c82:	e2b2      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c84:	2310      	movs	r3, #16
 8018c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c8a:	e2ae      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c8c:	2320      	movs	r3, #32
 8018c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c92:	e2aa      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c94:	2340      	movs	r3, #64	@ 0x40
 8018c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c9a:	e2a6      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018c9c:	2380      	movs	r3, #128	@ 0x80
 8018c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ca2:	e2a2      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ca4:	697b      	ldr	r3, [r7, #20]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	4a35      	ldr	r2, [pc, #212]	@ (8018d80 <UART_SetConfig+0x344>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d130      	bne.n	8018d10 <UART_SetConfig+0x2d4>
 8018cae:	4b31      	ldr	r3, [pc, #196]	@ (8018d74 <UART_SetConfig+0x338>)
 8018cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cb2:	f003 0307 	and.w	r3, r3, #7
 8018cb6:	2b05      	cmp	r3, #5
 8018cb8:	d826      	bhi.n	8018d08 <UART_SetConfig+0x2cc>
 8018cba:	a201      	add	r2, pc, #4	@ (adr r2, 8018cc0 <UART_SetConfig+0x284>)
 8018cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cc0:	08018cd9 	.word	0x08018cd9
 8018cc4:	08018ce1 	.word	0x08018ce1
 8018cc8:	08018ce9 	.word	0x08018ce9
 8018ccc:	08018cf1 	.word	0x08018cf1
 8018cd0:	08018cf9 	.word	0x08018cf9
 8018cd4:	08018d01 	.word	0x08018d01
 8018cd8:	2300      	movs	r3, #0
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e284      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ce0:	2304      	movs	r3, #4
 8018ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ce6:	e280      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ce8:	2308      	movs	r3, #8
 8018cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cee:	e27c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018cf0:	2310      	movs	r3, #16
 8018cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cf6:	e278      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018cf8:	2320      	movs	r3, #32
 8018cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cfe:	e274      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d00:	2340      	movs	r3, #64	@ 0x40
 8018d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d06:	e270      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d08:	2380      	movs	r3, #128	@ 0x80
 8018d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d0e:	e26c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4a1b      	ldr	r2, [pc, #108]	@ (8018d84 <UART_SetConfig+0x348>)
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d142      	bne.n	8018da0 <UART_SetConfig+0x364>
 8018d1a:	4b16      	ldr	r3, [pc, #88]	@ (8018d74 <UART_SetConfig+0x338>)
 8018d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d1e:	f003 0307 	and.w	r3, r3, #7
 8018d22:	2b05      	cmp	r3, #5
 8018d24:	d838      	bhi.n	8018d98 <UART_SetConfig+0x35c>
 8018d26:	a201      	add	r2, pc, #4	@ (adr r2, 8018d2c <UART_SetConfig+0x2f0>)
 8018d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d2c:	08018d45 	.word	0x08018d45
 8018d30:	08018d4d 	.word	0x08018d4d
 8018d34:	08018d55 	.word	0x08018d55
 8018d38:	08018d5d 	.word	0x08018d5d
 8018d3c:	08018d89 	.word	0x08018d89
 8018d40:	08018d91 	.word	0x08018d91
 8018d44:	2300      	movs	r3, #0
 8018d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d4a:	e24e      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d4c:	2304      	movs	r3, #4
 8018d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d52:	e24a      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d54:	2308      	movs	r3, #8
 8018d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d5a:	e246      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d5c:	2310      	movs	r3, #16
 8018d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d62:	e242      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d64:	cfff69f3 	.word	0xcfff69f3
 8018d68:	58000c00 	.word	0x58000c00
 8018d6c:	11fff4ff 	.word	0x11fff4ff
 8018d70:	40011000 	.word	0x40011000
 8018d74:	58024400 	.word	0x58024400
 8018d78:	40004400 	.word	0x40004400
 8018d7c:	40004800 	.word	0x40004800
 8018d80:	40004c00 	.word	0x40004c00
 8018d84:	40005000 	.word	0x40005000
 8018d88:	2320      	movs	r3, #32
 8018d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d8e:	e22c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d90:	2340      	movs	r3, #64	@ 0x40
 8018d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d96:	e228      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018d98:	2380      	movs	r3, #128	@ 0x80
 8018d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d9e:	e224      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	4ab1      	ldr	r2, [pc, #708]	@ (801906c <UART_SetConfig+0x630>)
 8018da6:	4293      	cmp	r3, r2
 8018da8:	d176      	bne.n	8018e98 <UART_SetConfig+0x45c>
 8018daa:	4bb1      	ldr	r3, [pc, #708]	@ (8019070 <UART_SetConfig+0x634>)
 8018dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018db2:	2b28      	cmp	r3, #40	@ 0x28
 8018db4:	d86c      	bhi.n	8018e90 <UART_SetConfig+0x454>
 8018db6:	a201      	add	r2, pc, #4	@ (adr r2, 8018dbc <UART_SetConfig+0x380>)
 8018db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dbc:	08018e61 	.word	0x08018e61
 8018dc0:	08018e91 	.word	0x08018e91
 8018dc4:	08018e91 	.word	0x08018e91
 8018dc8:	08018e91 	.word	0x08018e91
 8018dcc:	08018e91 	.word	0x08018e91
 8018dd0:	08018e91 	.word	0x08018e91
 8018dd4:	08018e91 	.word	0x08018e91
 8018dd8:	08018e91 	.word	0x08018e91
 8018ddc:	08018e69 	.word	0x08018e69
 8018de0:	08018e91 	.word	0x08018e91
 8018de4:	08018e91 	.word	0x08018e91
 8018de8:	08018e91 	.word	0x08018e91
 8018dec:	08018e91 	.word	0x08018e91
 8018df0:	08018e91 	.word	0x08018e91
 8018df4:	08018e91 	.word	0x08018e91
 8018df8:	08018e91 	.word	0x08018e91
 8018dfc:	08018e71 	.word	0x08018e71
 8018e00:	08018e91 	.word	0x08018e91
 8018e04:	08018e91 	.word	0x08018e91
 8018e08:	08018e91 	.word	0x08018e91
 8018e0c:	08018e91 	.word	0x08018e91
 8018e10:	08018e91 	.word	0x08018e91
 8018e14:	08018e91 	.word	0x08018e91
 8018e18:	08018e91 	.word	0x08018e91
 8018e1c:	08018e79 	.word	0x08018e79
 8018e20:	08018e91 	.word	0x08018e91
 8018e24:	08018e91 	.word	0x08018e91
 8018e28:	08018e91 	.word	0x08018e91
 8018e2c:	08018e91 	.word	0x08018e91
 8018e30:	08018e91 	.word	0x08018e91
 8018e34:	08018e91 	.word	0x08018e91
 8018e38:	08018e91 	.word	0x08018e91
 8018e3c:	08018e81 	.word	0x08018e81
 8018e40:	08018e91 	.word	0x08018e91
 8018e44:	08018e91 	.word	0x08018e91
 8018e48:	08018e91 	.word	0x08018e91
 8018e4c:	08018e91 	.word	0x08018e91
 8018e50:	08018e91 	.word	0x08018e91
 8018e54:	08018e91 	.word	0x08018e91
 8018e58:	08018e91 	.word	0x08018e91
 8018e5c:	08018e89 	.word	0x08018e89
 8018e60:	2301      	movs	r3, #1
 8018e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e66:	e1c0      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e68:	2304      	movs	r3, #4
 8018e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e6e:	e1bc      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e70:	2308      	movs	r3, #8
 8018e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e76:	e1b8      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e78:	2310      	movs	r3, #16
 8018e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e7e:	e1b4      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e80:	2320      	movs	r3, #32
 8018e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e86:	e1b0      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e88:	2340      	movs	r3, #64	@ 0x40
 8018e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e8e:	e1ac      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e90:	2380      	movs	r3, #128	@ 0x80
 8018e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e96:	e1a8      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018e98:	697b      	ldr	r3, [r7, #20]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	4a75      	ldr	r2, [pc, #468]	@ (8019074 <UART_SetConfig+0x638>)
 8018e9e:	4293      	cmp	r3, r2
 8018ea0:	d130      	bne.n	8018f04 <UART_SetConfig+0x4c8>
 8018ea2:	4b73      	ldr	r3, [pc, #460]	@ (8019070 <UART_SetConfig+0x634>)
 8018ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ea6:	f003 0307 	and.w	r3, r3, #7
 8018eaa:	2b05      	cmp	r3, #5
 8018eac:	d826      	bhi.n	8018efc <UART_SetConfig+0x4c0>
 8018eae:	a201      	add	r2, pc, #4	@ (adr r2, 8018eb4 <UART_SetConfig+0x478>)
 8018eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eb4:	08018ecd 	.word	0x08018ecd
 8018eb8:	08018ed5 	.word	0x08018ed5
 8018ebc:	08018edd 	.word	0x08018edd
 8018ec0:	08018ee5 	.word	0x08018ee5
 8018ec4:	08018eed 	.word	0x08018eed
 8018ec8:	08018ef5 	.word	0x08018ef5
 8018ecc:	2300      	movs	r3, #0
 8018ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ed2:	e18a      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ed4:	2304      	movs	r3, #4
 8018ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eda:	e186      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018edc:	2308      	movs	r3, #8
 8018ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ee2:	e182      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ee4:	2310      	movs	r3, #16
 8018ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eea:	e17e      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018eec:	2320      	movs	r3, #32
 8018eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ef2:	e17a      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018ef4:	2340      	movs	r3, #64	@ 0x40
 8018ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018efa:	e176      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018efc:	2380      	movs	r3, #128	@ 0x80
 8018efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f02:	e172      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f04:	697b      	ldr	r3, [r7, #20]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	4a5b      	ldr	r2, [pc, #364]	@ (8019078 <UART_SetConfig+0x63c>)
 8018f0a:	4293      	cmp	r3, r2
 8018f0c:	d130      	bne.n	8018f70 <UART_SetConfig+0x534>
 8018f0e:	4b58      	ldr	r3, [pc, #352]	@ (8019070 <UART_SetConfig+0x634>)
 8018f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f12:	f003 0307 	and.w	r3, r3, #7
 8018f16:	2b05      	cmp	r3, #5
 8018f18:	d826      	bhi.n	8018f68 <UART_SetConfig+0x52c>
 8018f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8018f20 <UART_SetConfig+0x4e4>)
 8018f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f20:	08018f39 	.word	0x08018f39
 8018f24:	08018f41 	.word	0x08018f41
 8018f28:	08018f49 	.word	0x08018f49
 8018f2c:	08018f51 	.word	0x08018f51
 8018f30:	08018f59 	.word	0x08018f59
 8018f34:	08018f61 	.word	0x08018f61
 8018f38:	2300      	movs	r3, #0
 8018f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f3e:	e154      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f40:	2304      	movs	r3, #4
 8018f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f46:	e150      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f48:	2308      	movs	r3, #8
 8018f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f4e:	e14c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f50:	2310      	movs	r3, #16
 8018f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f56:	e148      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f58:	2320      	movs	r3, #32
 8018f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f5e:	e144      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f60:	2340      	movs	r3, #64	@ 0x40
 8018f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f66:	e140      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f68:	2380      	movs	r3, #128	@ 0x80
 8018f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f6e:	e13c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	4a41      	ldr	r2, [pc, #260]	@ (801907c <UART_SetConfig+0x640>)
 8018f76:	4293      	cmp	r3, r2
 8018f78:	f040 8082 	bne.w	8019080 <UART_SetConfig+0x644>
 8018f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8019070 <UART_SetConfig+0x634>)
 8018f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018f84:	2b28      	cmp	r3, #40	@ 0x28
 8018f86:	d86d      	bhi.n	8019064 <UART_SetConfig+0x628>
 8018f88:	a201      	add	r2, pc, #4	@ (adr r2, 8018f90 <UART_SetConfig+0x554>)
 8018f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f8e:	bf00      	nop
 8018f90:	08019035 	.word	0x08019035
 8018f94:	08019065 	.word	0x08019065
 8018f98:	08019065 	.word	0x08019065
 8018f9c:	08019065 	.word	0x08019065
 8018fa0:	08019065 	.word	0x08019065
 8018fa4:	08019065 	.word	0x08019065
 8018fa8:	08019065 	.word	0x08019065
 8018fac:	08019065 	.word	0x08019065
 8018fb0:	0801903d 	.word	0x0801903d
 8018fb4:	08019065 	.word	0x08019065
 8018fb8:	08019065 	.word	0x08019065
 8018fbc:	08019065 	.word	0x08019065
 8018fc0:	08019065 	.word	0x08019065
 8018fc4:	08019065 	.word	0x08019065
 8018fc8:	08019065 	.word	0x08019065
 8018fcc:	08019065 	.word	0x08019065
 8018fd0:	08019045 	.word	0x08019045
 8018fd4:	08019065 	.word	0x08019065
 8018fd8:	08019065 	.word	0x08019065
 8018fdc:	08019065 	.word	0x08019065
 8018fe0:	08019065 	.word	0x08019065
 8018fe4:	08019065 	.word	0x08019065
 8018fe8:	08019065 	.word	0x08019065
 8018fec:	08019065 	.word	0x08019065
 8018ff0:	0801904d 	.word	0x0801904d
 8018ff4:	08019065 	.word	0x08019065
 8018ff8:	08019065 	.word	0x08019065
 8018ffc:	08019065 	.word	0x08019065
 8019000:	08019065 	.word	0x08019065
 8019004:	08019065 	.word	0x08019065
 8019008:	08019065 	.word	0x08019065
 801900c:	08019065 	.word	0x08019065
 8019010:	08019055 	.word	0x08019055
 8019014:	08019065 	.word	0x08019065
 8019018:	08019065 	.word	0x08019065
 801901c:	08019065 	.word	0x08019065
 8019020:	08019065 	.word	0x08019065
 8019024:	08019065 	.word	0x08019065
 8019028:	08019065 	.word	0x08019065
 801902c:	08019065 	.word	0x08019065
 8019030:	0801905d 	.word	0x0801905d
 8019034:	2301      	movs	r3, #1
 8019036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801903a:	e0d6      	b.n	80191ea <UART_SetConfig+0x7ae>
 801903c:	2304      	movs	r3, #4
 801903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019042:	e0d2      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019044:	2308      	movs	r3, #8
 8019046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801904a:	e0ce      	b.n	80191ea <UART_SetConfig+0x7ae>
 801904c:	2310      	movs	r3, #16
 801904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019052:	e0ca      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019054:	2320      	movs	r3, #32
 8019056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801905a:	e0c6      	b.n	80191ea <UART_SetConfig+0x7ae>
 801905c:	2340      	movs	r3, #64	@ 0x40
 801905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019062:	e0c2      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019064:	2380      	movs	r3, #128	@ 0x80
 8019066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801906a:	e0be      	b.n	80191ea <UART_SetConfig+0x7ae>
 801906c:	40011400 	.word	0x40011400
 8019070:	58024400 	.word	0x58024400
 8019074:	40007800 	.word	0x40007800
 8019078:	40007c00 	.word	0x40007c00
 801907c:	40011800 	.word	0x40011800
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	4aad      	ldr	r2, [pc, #692]	@ (801933c <UART_SetConfig+0x900>)
 8019086:	4293      	cmp	r3, r2
 8019088:	d176      	bne.n	8019178 <UART_SetConfig+0x73c>
 801908a:	4bad      	ldr	r3, [pc, #692]	@ (8019340 <UART_SetConfig+0x904>)
 801908c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801908e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019092:	2b28      	cmp	r3, #40	@ 0x28
 8019094:	d86c      	bhi.n	8019170 <UART_SetConfig+0x734>
 8019096:	a201      	add	r2, pc, #4	@ (adr r2, 801909c <UART_SetConfig+0x660>)
 8019098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801909c:	08019141 	.word	0x08019141
 80190a0:	08019171 	.word	0x08019171
 80190a4:	08019171 	.word	0x08019171
 80190a8:	08019171 	.word	0x08019171
 80190ac:	08019171 	.word	0x08019171
 80190b0:	08019171 	.word	0x08019171
 80190b4:	08019171 	.word	0x08019171
 80190b8:	08019171 	.word	0x08019171
 80190bc:	08019149 	.word	0x08019149
 80190c0:	08019171 	.word	0x08019171
 80190c4:	08019171 	.word	0x08019171
 80190c8:	08019171 	.word	0x08019171
 80190cc:	08019171 	.word	0x08019171
 80190d0:	08019171 	.word	0x08019171
 80190d4:	08019171 	.word	0x08019171
 80190d8:	08019171 	.word	0x08019171
 80190dc:	08019151 	.word	0x08019151
 80190e0:	08019171 	.word	0x08019171
 80190e4:	08019171 	.word	0x08019171
 80190e8:	08019171 	.word	0x08019171
 80190ec:	08019171 	.word	0x08019171
 80190f0:	08019171 	.word	0x08019171
 80190f4:	08019171 	.word	0x08019171
 80190f8:	08019171 	.word	0x08019171
 80190fc:	08019159 	.word	0x08019159
 8019100:	08019171 	.word	0x08019171
 8019104:	08019171 	.word	0x08019171
 8019108:	08019171 	.word	0x08019171
 801910c:	08019171 	.word	0x08019171
 8019110:	08019171 	.word	0x08019171
 8019114:	08019171 	.word	0x08019171
 8019118:	08019171 	.word	0x08019171
 801911c:	08019161 	.word	0x08019161
 8019120:	08019171 	.word	0x08019171
 8019124:	08019171 	.word	0x08019171
 8019128:	08019171 	.word	0x08019171
 801912c:	08019171 	.word	0x08019171
 8019130:	08019171 	.word	0x08019171
 8019134:	08019171 	.word	0x08019171
 8019138:	08019171 	.word	0x08019171
 801913c:	08019169 	.word	0x08019169
 8019140:	2301      	movs	r3, #1
 8019142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019146:	e050      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019148:	2304      	movs	r3, #4
 801914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801914e:	e04c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019150:	2308      	movs	r3, #8
 8019152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019156:	e048      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019158:	2310      	movs	r3, #16
 801915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801915e:	e044      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019160:	2320      	movs	r3, #32
 8019162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019166:	e040      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019168:	2340      	movs	r3, #64	@ 0x40
 801916a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801916e:	e03c      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019170:	2380      	movs	r3, #128	@ 0x80
 8019172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019176:	e038      	b.n	80191ea <UART_SetConfig+0x7ae>
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	4a71      	ldr	r2, [pc, #452]	@ (8019344 <UART_SetConfig+0x908>)
 801917e:	4293      	cmp	r3, r2
 8019180:	d130      	bne.n	80191e4 <UART_SetConfig+0x7a8>
 8019182:	4b6f      	ldr	r3, [pc, #444]	@ (8019340 <UART_SetConfig+0x904>)
 8019184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019186:	f003 0307 	and.w	r3, r3, #7
 801918a:	2b05      	cmp	r3, #5
 801918c:	d826      	bhi.n	80191dc <UART_SetConfig+0x7a0>
 801918e:	a201      	add	r2, pc, #4	@ (adr r2, 8019194 <UART_SetConfig+0x758>)
 8019190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019194:	080191ad 	.word	0x080191ad
 8019198:	080191b5 	.word	0x080191b5
 801919c:	080191bd 	.word	0x080191bd
 80191a0:	080191c5 	.word	0x080191c5
 80191a4:	080191cd 	.word	0x080191cd
 80191a8:	080191d5 	.word	0x080191d5
 80191ac:	2302      	movs	r3, #2
 80191ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191b2:	e01a      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191b4:	2304      	movs	r3, #4
 80191b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ba:	e016      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191bc:	2308      	movs	r3, #8
 80191be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191c2:	e012      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191c4:	2310      	movs	r3, #16
 80191c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ca:	e00e      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191cc:	2320      	movs	r3, #32
 80191ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191d2:	e00a      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191d4:	2340      	movs	r3, #64	@ 0x40
 80191d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191da:	e006      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191dc:	2380      	movs	r3, #128	@ 0x80
 80191de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191e2:	e002      	b.n	80191ea <UART_SetConfig+0x7ae>
 80191e4:	2380      	movs	r3, #128	@ 0x80
 80191e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80191ea:	697b      	ldr	r3, [r7, #20]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	4a55      	ldr	r2, [pc, #340]	@ (8019344 <UART_SetConfig+0x908>)
 80191f0:	4293      	cmp	r3, r2
 80191f2:	f040 80f8 	bne.w	80193e6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80191f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80191fa:	2b20      	cmp	r3, #32
 80191fc:	dc46      	bgt.n	801928c <UART_SetConfig+0x850>
 80191fe:	2b02      	cmp	r3, #2
 8019200:	db75      	blt.n	80192ee <UART_SetConfig+0x8b2>
 8019202:	3b02      	subs	r3, #2
 8019204:	2b1e      	cmp	r3, #30
 8019206:	d872      	bhi.n	80192ee <UART_SetConfig+0x8b2>
 8019208:	a201      	add	r2, pc, #4	@ (adr r2, 8019210 <UART_SetConfig+0x7d4>)
 801920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801920e:	bf00      	nop
 8019210:	08019293 	.word	0x08019293
 8019214:	080192ef 	.word	0x080192ef
 8019218:	0801929b 	.word	0x0801929b
 801921c:	080192ef 	.word	0x080192ef
 8019220:	080192ef 	.word	0x080192ef
 8019224:	080192ef 	.word	0x080192ef
 8019228:	080192ab 	.word	0x080192ab
 801922c:	080192ef 	.word	0x080192ef
 8019230:	080192ef 	.word	0x080192ef
 8019234:	080192ef 	.word	0x080192ef
 8019238:	080192ef 	.word	0x080192ef
 801923c:	080192ef 	.word	0x080192ef
 8019240:	080192ef 	.word	0x080192ef
 8019244:	080192ef 	.word	0x080192ef
 8019248:	080192bb 	.word	0x080192bb
 801924c:	080192ef 	.word	0x080192ef
 8019250:	080192ef 	.word	0x080192ef
 8019254:	080192ef 	.word	0x080192ef
 8019258:	080192ef 	.word	0x080192ef
 801925c:	080192ef 	.word	0x080192ef
 8019260:	080192ef 	.word	0x080192ef
 8019264:	080192ef 	.word	0x080192ef
 8019268:	080192ef 	.word	0x080192ef
 801926c:	080192ef 	.word	0x080192ef
 8019270:	080192ef 	.word	0x080192ef
 8019274:	080192ef 	.word	0x080192ef
 8019278:	080192ef 	.word	0x080192ef
 801927c:	080192ef 	.word	0x080192ef
 8019280:	080192ef 	.word	0x080192ef
 8019284:	080192ef 	.word	0x080192ef
 8019288:	080192e1 	.word	0x080192e1
 801928c:	2b40      	cmp	r3, #64	@ 0x40
 801928e:	d02a      	beq.n	80192e6 <UART_SetConfig+0x8aa>
 8019290:	e02d      	b.n	80192ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019292:	f7fa fd8b 	bl	8013dac <HAL_RCCEx_GetD3PCLK1Freq>
 8019296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019298:	e02f      	b.n	80192fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801929a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801929e:	4618      	mov	r0, r3
 80192a0:	f7fa fd9a 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80192a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192a8:	e027      	b.n	80192fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80192aa:	f107 0318 	add.w	r3, r7, #24
 80192ae:	4618      	mov	r0, r3
 80192b0:	f7fa fee6 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80192b4:	69fb      	ldr	r3, [r7, #28]
 80192b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192b8:	e01f      	b.n	80192fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80192ba:	4b21      	ldr	r3, [pc, #132]	@ (8019340 <UART_SetConfig+0x904>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f003 0320 	and.w	r3, r3, #32
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d009      	beq.n	80192da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80192c6:	4b1e      	ldr	r3, [pc, #120]	@ (8019340 <UART_SetConfig+0x904>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	08db      	lsrs	r3, r3, #3
 80192cc:	f003 0303 	and.w	r3, r3, #3
 80192d0:	4a1d      	ldr	r2, [pc, #116]	@ (8019348 <UART_SetConfig+0x90c>)
 80192d2:	fa22 f303 	lsr.w	r3, r2, r3
 80192d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80192d8:	e00f      	b.n	80192fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80192da:	4b1b      	ldr	r3, [pc, #108]	@ (8019348 <UART_SetConfig+0x90c>)
 80192dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192de:	e00c      	b.n	80192fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80192e0:	4b1a      	ldr	r3, [pc, #104]	@ (801934c <UART_SetConfig+0x910>)
 80192e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192e4:	e009      	b.n	80192fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80192ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192ec:	e005      	b.n	80192fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80192ee:	2300      	movs	r3, #0
 80192f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80192f2:	2301      	movs	r3, #1
 80192f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80192f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80192fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	f000 81ee 	beq.w	80196de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019306:	4a12      	ldr	r2, [pc, #72]	@ (8019350 <UART_SetConfig+0x914>)
 8019308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801930c:	461a      	mov	r2, r3
 801930e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019310:	fbb3 f3f2 	udiv	r3, r3, r2
 8019314:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019316:	697b      	ldr	r3, [r7, #20]
 8019318:	685a      	ldr	r2, [r3, #4]
 801931a:	4613      	mov	r3, r2
 801931c:	005b      	lsls	r3, r3, #1
 801931e:	4413      	add	r3, r2
 8019320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019322:	429a      	cmp	r2, r3
 8019324:	d305      	bcc.n	8019332 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	685b      	ldr	r3, [r3, #4]
 801932a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801932c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801932e:	429a      	cmp	r2, r3
 8019330:	d910      	bls.n	8019354 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8019332:	2301      	movs	r3, #1
 8019334:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019338:	e1d1      	b.n	80196de <UART_SetConfig+0xca2>
 801933a:	bf00      	nop
 801933c:	40011c00 	.word	0x40011c00
 8019340:	58024400 	.word	0x58024400
 8019344:	58000c00 	.word	0x58000c00
 8019348:	03d09000 	.word	0x03d09000
 801934c:	003d0900 	.word	0x003d0900
 8019350:	0801ec24 	.word	0x0801ec24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019356:	2200      	movs	r2, #0
 8019358:	60bb      	str	r3, [r7, #8]
 801935a:	60fa      	str	r2, [r7, #12]
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019360:	4ac0      	ldr	r2, [pc, #768]	@ (8019664 <UART_SetConfig+0xc28>)
 8019362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019366:	b29b      	uxth	r3, r3
 8019368:	2200      	movs	r2, #0
 801936a:	603b      	str	r3, [r7, #0]
 801936c:	607a      	str	r2, [r7, #4]
 801936e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019376:	f7e7 f81b 	bl	80003b0 <__aeabi_uldivmod>
 801937a:	4602      	mov	r2, r0
 801937c:	460b      	mov	r3, r1
 801937e:	4610      	mov	r0, r2
 8019380:	4619      	mov	r1, r3
 8019382:	f04f 0200 	mov.w	r2, #0
 8019386:	f04f 0300 	mov.w	r3, #0
 801938a:	020b      	lsls	r3, r1, #8
 801938c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019390:	0202      	lsls	r2, r0, #8
 8019392:	6979      	ldr	r1, [r7, #20]
 8019394:	6849      	ldr	r1, [r1, #4]
 8019396:	0849      	lsrs	r1, r1, #1
 8019398:	2000      	movs	r0, #0
 801939a:	460c      	mov	r4, r1
 801939c:	4605      	mov	r5, r0
 801939e:	eb12 0804 	adds.w	r8, r2, r4
 80193a2:	eb43 0905 	adc.w	r9, r3, r5
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	685b      	ldr	r3, [r3, #4]
 80193aa:	2200      	movs	r2, #0
 80193ac:	469a      	mov	sl, r3
 80193ae:	4693      	mov	fp, r2
 80193b0:	4652      	mov	r2, sl
 80193b2:	465b      	mov	r3, fp
 80193b4:	4640      	mov	r0, r8
 80193b6:	4649      	mov	r1, r9
 80193b8:	f7e6 fffa 	bl	80003b0 <__aeabi_uldivmod>
 80193bc:	4602      	mov	r2, r0
 80193be:	460b      	mov	r3, r1
 80193c0:	4613      	mov	r3, r2
 80193c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80193c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80193ca:	d308      	bcc.n	80193de <UART_SetConfig+0x9a2>
 80193cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80193d2:	d204      	bcs.n	80193de <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80193d4:	697b      	ldr	r3, [r7, #20]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80193da:	60da      	str	r2, [r3, #12]
 80193dc:	e17f      	b.n	80196de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80193de:	2301      	movs	r3, #1
 80193e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80193e4:	e17b      	b.n	80196de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80193e6:	697b      	ldr	r3, [r7, #20]
 80193e8:	69db      	ldr	r3, [r3, #28]
 80193ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193ee:	f040 80bd 	bne.w	801956c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80193f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193f6:	2b20      	cmp	r3, #32
 80193f8:	dc48      	bgt.n	801948c <UART_SetConfig+0xa50>
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	db7b      	blt.n	80194f6 <UART_SetConfig+0xaba>
 80193fe:	2b20      	cmp	r3, #32
 8019400:	d879      	bhi.n	80194f6 <UART_SetConfig+0xaba>
 8019402:	a201      	add	r2, pc, #4	@ (adr r2, 8019408 <UART_SetConfig+0x9cc>)
 8019404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019408:	08019493 	.word	0x08019493
 801940c:	0801949b 	.word	0x0801949b
 8019410:	080194f7 	.word	0x080194f7
 8019414:	080194f7 	.word	0x080194f7
 8019418:	080194a3 	.word	0x080194a3
 801941c:	080194f7 	.word	0x080194f7
 8019420:	080194f7 	.word	0x080194f7
 8019424:	080194f7 	.word	0x080194f7
 8019428:	080194b3 	.word	0x080194b3
 801942c:	080194f7 	.word	0x080194f7
 8019430:	080194f7 	.word	0x080194f7
 8019434:	080194f7 	.word	0x080194f7
 8019438:	080194f7 	.word	0x080194f7
 801943c:	080194f7 	.word	0x080194f7
 8019440:	080194f7 	.word	0x080194f7
 8019444:	080194f7 	.word	0x080194f7
 8019448:	080194c3 	.word	0x080194c3
 801944c:	080194f7 	.word	0x080194f7
 8019450:	080194f7 	.word	0x080194f7
 8019454:	080194f7 	.word	0x080194f7
 8019458:	080194f7 	.word	0x080194f7
 801945c:	080194f7 	.word	0x080194f7
 8019460:	080194f7 	.word	0x080194f7
 8019464:	080194f7 	.word	0x080194f7
 8019468:	080194f7 	.word	0x080194f7
 801946c:	080194f7 	.word	0x080194f7
 8019470:	080194f7 	.word	0x080194f7
 8019474:	080194f7 	.word	0x080194f7
 8019478:	080194f7 	.word	0x080194f7
 801947c:	080194f7 	.word	0x080194f7
 8019480:	080194f7 	.word	0x080194f7
 8019484:	080194f7 	.word	0x080194f7
 8019488:	080194e9 	.word	0x080194e9
 801948c:	2b40      	cmp	r3, #64	@ 0x40
 801948e:	d02e      	beq.n	80194ee <UART_SetConfig+0xab2>
 8019490:	e031      	b.n	80194f6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019492:	f7f8 fded 	bl	8012070 <HAL_RCC_GetPCLK1Freq>
 8019496:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019498:	e033      	b.n	8019502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801949a:	f7f8 fdff 	bl	801209c <HAL_RCC_GetPCLK2Freq>
 801949e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80194a0:	e02f      	b.n	8019502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80194a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7fa fc96 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80194ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194b0:	e027      	b.n	8019502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80194b2:	f107 0318 	add.w	r3, r7, #24
 80194b6:	4618      	mov	r0, r3
 80194b8:	f7fa fde2 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194c0:	e01f      	b.n	8019502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80194c2:	4b69      	ldr	r3, [pc, #420]	@ (8019668 <UART_SetConfig+0xc2c>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	f003 0320 	and.w	r3, r3, #32
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d009      	beq.n	80194e2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80194ce:	4b66      	ldr	r3, [pc, #408]	@ (8019668 <UART_SetConfig+0xc2c>)
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	08db      	lsrs	r3, r3, #3
 80194d4:	f003 0303 	and.w	r3, r3, #3
 80194d8:	4a64      	ldr	r2, [pc, #400]	@ (801966c <UART_SetConfig+0xc30>)
 80194da:	fa22 f303 	lsr.w	r3, r2, r3
 80194de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80194e0:	e00f      	b.n	8019502 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80194e2:	4b62      	ldr	r3, [pc, #392]	@ (801966c <UART_SetConfig+0xc30>)
 80194e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194e6:	e00c      	b.n	8019502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80194e8:	4b61      	ldr	r3, [pc, #388]	@ (8019670 <UART_SetConfig+0xc34>)
 80194ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194ec:	e009      	b.n	8019502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80194ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194f4:	e005      	b.n	8019502 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80194f6:	2300      	movs	r3, #0
 80194f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80194fa:	2301      	movs	r3, #1
 80194fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019504:	2b00      	cmp	r3, #0
 8019506:	f000 80ea 	beq.w	80196de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801950e:	4a55      	ldr	r2, [pc, #340]	@ (8019664 <UART_SetConfig+0xc28>)
 8019510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019514:	461a      	mov	r2, r3
 8019516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019518:	fbb3 f3f2 	udiv	r3, r3, r2
 801951c:	005a      	lsls	r2, r3, #1
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	685b      	ldr	r3, [r3, #4]
 8019522:	085b      	lsrs	r3, r3, #1
 8019524:	441a      	add	r2, r3
 8019526:	697b      	ldr	r3, [r7, #20]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	fbb2 f3f3 	udiv	r3, r2, r3
 801952e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019532:	2b0f      	cmp	r3, #15
 8019534:	d916      	bls.n	8019564 <UART_SetConfig+0xb28>
 8019536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801953c:	d212      	bcs.n	8019564 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801953e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019540:	b29b      	uxth	r3, r3
 8019542:	f023 030f 	bic.w	r3, r3, #15
 8019546:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801954a:	085b      	lsrs	r3, r3, #1
 801954c:	b29b      	uxth	r3, r3
 801954e:	f003 0307 	and.w	r3, r3, #7
 8019552:	b29a      	uxth	r2, r3
 8019554:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019556:	4313      	orrs	r3, r2
 8019558:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019560:	60da      	str	r2, [r3, #12]
 8019562:	e0bc      	b.n	80196de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019564:	2301      	movs	r3, #1
 8019566:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801956a:	e0b8      	b.n	80196de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801956c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019570:	2b20      	cmp	r3, #32
 8019572:	dc4b      	bgt.n	801960c <UART_SetConfig+0xbd0>
 8019574:	2b00      	cmp	r3, #0
 8019576:	f2c0 8087 	blt.w	8019688 <UART_SetConfig+0xc4c>
 801957a:	2b20      	cmp	r3, #32
 801957c:	f200 8084 	bhi.w	8019688 <UART_SetConfig+0xc4c>
 8019580:	a201      	add	r2, pc, #4	@ (adr r2, 8019588 <UART_SetConfig+0xb4c>)
 8019582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019586:	bf00      	nop
 8019588:	08019613 	.word	0x08019613
 801958c:	0801961b 	.word	0x0801961b
 8019590:	08019689 	.word	0x08019689
 8019594:	08019689 	.word	0x08019689
 8019598:	08019623 	.word	0x08019623
 801959c:	08019689 	.word	0x08019689
 80195a0:	08019689 	.word	0x08019689
 80195a4:	08019689 	.word	0x08019689
 80195a8:	08019633 	.word	0x08019633
 80195ac:	08019689 	.word	0x08019689
 80195b0:	08019689 	.word	0x08019689
 80195b4:	08019689 	.word	0x08019689
 80195b8:	08019689 	.word	0x08019689
 80195bc:	08019689 	.word	0x08019689
 80195c0:	08019689 	.word	0x08019689
 80195c4:	08019689 	.word	0x08019689
 80195c8:	08019643 	.word	0x08019643
 80195cc:	08019689 	.word	0x08019689
 80195d0:	08019689 	.word	0x08019689
 80195d4:	08019689 	.word	0x08019689
 80195d8:	08019689 	.word	0x08019689
 80195dc:	08019689 	.word	0x08019689
 80195e0:	08019689 	.word	0x08019689
 80195e4:	08019689 	.word	0x08019689
 80195e8:	08019689 	.word	0x08019689
 80195ec:	08019689 	.word	0x08019689
 80195f0:	08019689 	.word	0x08019689
 80195f4:	08019689 	.word	0x08019689
 80195f8:	08019689 	.word	0x08019689
 80195fc:	08019689 	.word	0x08019689
 8019600:	08019689 	.word	0x08019689
 8019604:	08019689 	.word	0x08019689
 8019608:	0801967b 	.word	0x0801967b
 801960c:	2b40      	cmp	r3, #64	@ 0x40
 801960e:	d037      	beq.n	8019680 <UART_SetConfig+0xc44>
 8019610:	e03a      	b.n	8019688 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019612:	f7f8 fd2d 	bl	8012070 <HAL_RCC_GetPCLK1Freq>
 8019616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019618:	e03c      	b.n	8019694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801961a:	f7f8 fd3f 	bl	801209c <HAL_RCC_GetPCLK2Freq>
 801961e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019620:	e038      	b.n	8019694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019626:	4618      	mov	r0, r3
 8019628:	f7fa fbd6 	bl	8013dd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019630:	e030      	b.n	8019694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019632:	f107 0318 	add.w	r3, r7, #24
 8019636:	4618      	mov	r0, r3
 8019638:	f7fa fd22 	bl	8014080 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801963c:	69fb      	ldr	r3, [r7, #28]
 801963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019640:	e028      	b.n	8019694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019642:	4b09      	ldr	r3, [pc, #36]	@ (8019668 <UART_SetConfig+0xc2c>)
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	f003 0320 	and.w	r3, r3, #32
 801964a:	2b00      	cmp	r3, #0
 801964c:	d012      	beq.n	8019674 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801964e:	4b06      	ldr	r3, [pc, #24]	@ (8019668 <UART_SetConfig+0xc2c>)
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	08db      	lsrs	r3, r3, #3
 8019654:	f003 0303 	and.w	r3, r3, #3
 8019658:	4a04      	ldr	r2, [pc, #16]	@ (801966c <UART_SetConfig+0xc30>)
 801965a:	fa22 f303 	lsr.w	r3, r2, r3
 801965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019660:	e018      	b.n	8019694 <UART_SetConfig+0xc58>
 8019662:	bf00      	nop
 8019664:	0801ec24 	.word	0x0801ec24
 8019668:	58024400 	.word	0x58024400
 801966c:	03d09000 	.word	0x03d09000
 8019670:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019674:	4b24      	ldr	r3, [pc, #144]	@ (8019708 <UART_SetConfig+0xccc>)
 8019676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019678:	e00c      	b.n	8019694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801967a:	4b24      	ldr	r3, [pc, #144]	@ (801970c <UART_SetConfig+0xcd0>)
 801967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801967e:	e009      	b.n	8019694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019686:	e005      	b.n	8019694 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019688:	2300      	movs	r3, #0
 801968a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801968c:	2301      	movs	r3, #1
 801968e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019692:	bf00      	nop
    }

    if (pclk != 0U)
 8019694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019696:	2b00      	cmp	r3, #0
 8019698:	d021      	beq.n	80196de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801969e:	4a1c      	ldr	r2, [pc, #112]	@ (8019710 <UART_SetConfig+0xcd4>)
 80196a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80196a4:	461a      	mov	r2, r3
 80196a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	085b      	lsrs	r3, r3, #1
 80196b2:	441a      	add	r2, r3
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80196bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80196be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196c0:	2b0f      	cmp	r3, #15
 80196c2:	d909      	bls.n	80196d8 <UART_SetConfig+0xc9c>
 80196c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80196ca:	d205      	bcs.n	80196d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80196cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196ce:	b29a      	uxth	r2, r3
 80196d0:	697b      	ldr	r3, [r7, #20]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	60da      	str	r2, [r3, #12]
 80196d6:	e002      	b.n	80196de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80196d8:	2301      	movs	r3, #1
 80196da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80196de:	697b      	ldr	r3, [r7, #20]
 80196e0:	2201      	movs	r2, #1
 80196e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	2201      	movs	r2, #1
 80196ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	2200      	movs	r2, #0
 80196f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80196f4:	697b      	ldr	r3, [r7, #20]
 80196f6:	2200      	movs	r2, #0
 80196f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80196fa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80196fe:	4618      	mov	r0, r3
 8019700:	3748      	adds	r7, #72	@ 0x48
 8019702:	46bd      	mov	sp, r7
 8019704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019708:	03d09000 	.word	0x03d09000
 801970c:	003d0900 	.word	0x003d0900
 8019710:	0801ec24 	.word	0x0801ec24

08019714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019714:	b480      	push	{r7}
 8019716:	b083      	sub	sp, #12
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019720:	f003 0308 	and.w	r3, r3, #8
 8019724:	2b00      	cmp	r3, #0
 8019726:	d00a      	beq.n	801973e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	685b      	ldr	r3, [r3, #4]
 801972e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	430a      	orrs	r2, r1
 801973c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019742:	f003 0301 	and.w	r3, r3, #1
 8019746:	2b00      	cmp	r3, #0
 8019748:	d00a      	beq.n	8019760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	685b      	ldr	r3, [r3, #4]
 8019750:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	430a      	orrs	r2, r1
 801975e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019764:	f003 0302 	and.w	r3, r3, #2
 8019768:	2b00      	cmp	r3, #0
 801976a:	d00a      	beq.n	8019782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	430a      	orrs	r2, r1
 8019780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019786:	f003 0304 	and.w	r3, r3, #4
 801978a:	2b00      	cmp	r3, #0
 801978c:	d00a      	beq.n	80197a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	430a      	orrs	r2, r1
 80197a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197a8:	f003 0310 	and.w	r3, r3, #16
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d00a      	beq.n	80197c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	689b      	ldr	r3, [r3, #8]
 80197b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	430a      	orrs	r2, r1
 80197c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197ca:	f003 0320 	and.w	r3, r3, #32
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d00a      	beq.n	80197e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	689b      	ldr	r3, [r3, #8]
 80197d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	430a      	orrs	r2, r1
 80197e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d01a      	beq.n	801982a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	685b      	ldr	r3, [r3, #4]
 80197fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	430a      	orrs	r2, r1
 8019808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801980e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019812:	d10a      	bne.n	801982a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	685b      	ldr	r3, [r3, #4]
 801981a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	430a      	orrs	r2, r1
 8019828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801982e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019832:	2b00      	cmp	r3, #0
 8019834:	d00a      	beq.n	801984c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	685b      	ldr	r3, [r3, #4]
 801983c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	430a      	orrs	r2, r1
 801984a:	605a      	str	r2, [r3, #4]
  }
}
 801984c:	bf00      	nop
 801984e:	370c      	adds	r7, #12
 8019850:	46bd      	mov	sp, r7
 8019852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019856:	4770      	bx	lr

08019858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b098      	sub	sp, #96	@ 0x60
 801985c:	af02      	add	r7, sp, #8
 801985e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2200      	movs	r2, #0
 8019864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019868:	f7ef fe94 	bl	8009594 <HAL_GetTick>
 801986c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	f003 0308 	and.w	r3, r3, #8
 8019878:	2b08      	cmp	r3, #8
 801987a:	d12f      	bne.n	80198dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801987c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019880:	9300      	str	r3, [sp, #0]
 8019882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019884:	2200      	movs	r2, #0
 8019886:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801988a:	6878      	ldr	r0, [r7, #4]
 801988c:	f000 f88e 	bl	80199ac <UART_WaitOnFlagUntilTimeout>
 8019890:	4603      	mov	r3, r0
 8019892:	2b00      	cmp	r3, #0
 8019894:	d022      	beq.n	80198dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801989c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801989e:	e853 3f00 	ldrex	r3, [r3]
 80198a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80198a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80198aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	461a      	mov	r2, r3
 80198b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80198b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80198b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80198ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80198bc:	e841 2300 	strex	r3, r2, [r1]
 80198c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80198c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d1e6      	bne.n	8019896 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2220      	movs	r2, #32
 80198cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2200      	movs	r2, #0
 80198d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198d8:	2303      	movs	r3, #3
 80198da:	e063      	b.n	80199a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	f003 0304 	and.w	r3, r3, #4
 80198e6:	2b04      	cmp	r3, #4
 80198e8:	d149      	bne.n	801997e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80198ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80198ee:	9300      	str	r3, [sp, #0]
 80198f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198f2:	2200      	movs	r2, #0
 80198f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80198f8:	6878      	ldr	r0, [r7, #4]
 80198fa:	f000 f857 	bl	80199ac <UART_WaitOnFlagUntilTimeout>
 80198fe:	4603      	mov	r3, r0
 8019900:	2b00      	cmp	r3, #0
 8019902:	d03c      	beq.n	801997e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801990c:	e853 3f00 	ldrex	r3, [r3]
 8019910:	623b      	str	r3, [r7, #32]
   return(result);
 8019912:	6a3b      	ldr	r3, [r7, #32]
 8019914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	461a      	mov	r2, r3
 8019920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019922:	633b      	str	r3, [r7, #48]	@ 0x30
 8019924:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801992a:	e841 2300 	strex	r3, r2, [r1]
 801992e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019932:	2b00      	cmp	r3, #0
 8019934:	d1e6      	bne.n	8019904 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	3308      	adds	r3, #8
 801993c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801993e:	693b      	ldr	r3, [r7, #16]
 8019940:	e853 3f00 	ldrex	r3, [r3]
 8019944:	60fb      	str	r3, [r7, #12]
   return(result);
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	f023 0301 	bic.w	r3, r3, #1
 801994c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	3308      	adds	r3, #8
 8019954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019956:	61fa      	str	r2, [r7, #28]
 8019958:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801995a:	69b9      	ldr	r1, [r7, #24]
 801995c:	69fa      	ldr	r2, [r7, #28]
 801995e:	e841 2300 	strex	r3, r2, [r1]
 8019962:	617b      	str	r3, [r7, #20]
   return(result);
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1e5      	bne.n	8019936 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	2220      	movs	r2, #32
 801996e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	2200      	movs	r2, #0
 8019976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801997a:	2303      	movs	r3, #3
 801997c:	e012      	b.n	80199a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	2220      	movs	r2, #32
 8019982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	2220      	movs	r2, #32
 801998a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2200      	movs	r2, #0
 8019992:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	2200      	movs	r2, #0
 8019998:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	2200      	movs	r2, #0
 801999e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80199a2:	2300      	movs	r3, #0
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	3758      	adds	r7, #88	@ 0x58
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b084      	sub	sp, #16
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	60f8      	str	r0, [r7, #12]
 80199b4:	60b9      	str	r1, [r7, #8]
 80199b6:	603b      	str	r3, [r7, #0]
 80199b8:	4613      	mov	r3, r2
 80199ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80199bc:	e04f      	b.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80199be:	69bb      	ldr	r3, [r7, #24]
 80199c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199c4:	d04b      	beq.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80199c6:	f7ef fde5 	bl	8009594 <HAL_GetTick>
 80199ca:	4602      	mov	r2, r0
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	1ad3      	subs	r3, r2, r3
 80199d0:	69ba      	ldr	r2, [r7, #24]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d302      	bcc.n	80199dc <UART_WaitOnFlagUntilTimeout+0x30>
 80199d6:	69bb      	ldr	r3, [r7, #24]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d101      	bne.n	80199e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80199dc:	2303      	movs	r3, #3
 80199de:	e04e      	b.n	8019a7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	f003 0304 	and.w	r3, r3, #4
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d037      	beq.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199ee:	68bb      	ldr	r3, [r7, #8]
 80199f0:	2b80      	cmp	r3, #128	@ 0x80
 80199f2:	d034      	beq.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199f4:	68bb      	ldr	r3, [r7, #8]
 80199f6:	2b40      	cmp	r3, #64	@ 0x40
 80199f8:	d031      	beq.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	69db      	ldr	r3, [r3, #28]
 8019a00:	f003 0308 	and.w	r3, r3, #8
 8019a04:	2b08      	cmp	r3, #8
 8019a06:	d110      	bne.n	8019a2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	2208      	movs	r2, #8
 8019a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019a10:	68f8      	ldr	r0, [r7, #12]
 8019a12:	f000 f95b 	bl	8019ccc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	2208      	movs	r2, #8
 8019a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	2200      	movs	r2, #0
 8019a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019a26:	2301      	movs	r3, #1
 8019a28:	e029      	b.n	8019a7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	69db      	ldr	r3, [r3, #28]
 8019a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019a38:	d111      	bne.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019a44:	68f8      	ldr	r0, [r7, #12]
 8019a46:	f000 f941 	bl	8019ccc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	2220      	movs	r2, #32
 8019a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	2200      	movs	r2, #0
 8019a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019a5a:	2303      	movs	r3, #3
 8019a5c:	e00f      	b.n	8019a7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	69da      	ldr	r2, [r3, #28]
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	4013      	ands	r3, r2
 8019a68:	68ba      	ldr	r2, [r7, #8]
 8019a6a:	429a      	cmp	r2, r3
 8019a6c:	bf0c      	ite	eq
 8019a6e:	2301      	moveq	r3, #1
 8019a70:	2300      	movne	r3, #0
 8019a72:	b2db      	uxtb	r3, r3
 8019a74:	461a      	mov	r2, r3
 8019a76:	79fb      	ldrb	r3, [r7, #7]
 8019a78:	429a      	cmp	r2, r3
 8019a7a:	d0a0      	beq.n	80199be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019a7c:	2300      	movs	r3, #0
}
 8019a7e:	4618      	mov	r0, r3
 8019a80:	3710      	adds	r7, #16
 8019a82:	46bd      	mov	sp, r7
 8019a84:	bd80      	pop	{r7, pc}
	...

08019a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a88:	b480      	push	{r7}
 8019a8a:	b0a3      	sub	sp, #140	@ 0x8c
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	60f8      	str	r0, [r7, #12]
 8019a90:	60b9      	str	r1, [r7, #8]
 8019a92:	4613      	mov	r3, r2
 8019a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	68ba      	ldr	r2, [r7, #8]
 8019a9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	88fa      	ldrh	r2, [r7, #6]
 8019aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	88fa      	ldrh	r2, [r7, #6]
 8019aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	2200      	movs	r2, #0
 8019ab0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	689b      	ldr	r3, [r3, #8]
 8019ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019aba:	d10e      	bne.n	8019ada <UART_Start_Receive_IT+0x52>
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	691b      	ldr	r3, [r3, #16]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d105      	bne.n	8019ad0 <UART_Start_Receive_IT+0x48>
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019aca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ace:	e02d      	b.n	8019b2c <UART_Start_Receive_IT+0xa4>
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	22ff      	movs	r2, #255	@ 0xff
 8019ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ad8:	e028      	b.n	8019b2c <UART_Start_Receive_IT+0xa4>
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	689b      	ldr	r3, [r3, #8]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d10d      	bne.n	8019afe <UART_Start_Receive_IT+0x76>
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	691b      	ldr	r3, [r3, #16]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d104      	bne.n	8019af4 <UART_Start_Receive_IT+0x6c>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	22ff      	movs	r2, #255	@ 0xff
 8019aee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019af2:	e01b      	b.n	8019b2c <UART_Start_Receive_IT+0xa4>
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	227f      	movs	r2, #127	@ 0x7f
 8019af8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019afc:	e016      	b.n	8019b2c <UART_Start_Receive_IT+0xa4>
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	689b      	ldr	r3, [r3, #8]
 8019b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019b06:	d10d      	bne.n	8019b24 <UART_Start_Receive_IT+0x9c>
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	691b      	ldr	r3, [r3, #16]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d104      	bne.n	8019b1a <UART_Start_Receive_IT+0x92>
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	227f      	movs	r2, #127	@ 0x7f
 8019b14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019b18:	e008      	b.n	8019b2c <UART_Start_Receive_IT+0xa4>
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	223f      	movs	r2, #63	@ 0x3f
 8019b1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019b22:	e003      	b.n	8019b2c <UART_Start_Receive_IT+0xa4>
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	2200      	movs	r2, #0
 8019b28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	2222      	movs	r2, #34	@ 0x22
 8019b38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	3308      	adds	r3, #8
 8019b42:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b46:	e853 3f00 	ldrex	r3, [r3]
 8019b4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019b4e:	f043 0301 	orr.w	r3, r3, #1
 8019b52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	3308      	adds	r3, #8
 8019b5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b60:	673a      	str	r2, [r7, #112]	@ 0x70
 8019b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b64:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019b66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019b68:	e841 2300 	strex	r3, r2, [r1]
 8019b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d1e3      	bne.n	8019b3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b7c:	d14f      	bne.n	8019c1e <UART_Start_Receive_IT+0x196>
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b84:	88fa      	ldrh	r2, [r7, #6]
 8019b86:	429a      	cmp	r2, r3
 8019b88:	d349      	bcc.n	8019c1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	689b      	ldr	r3, [r3, #8]
 8019b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b92:	d107      	bne.n	8019ba4 <UART_Start_Receive_IT+0x11c>
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	691b      	ldr	r3, [r3, #16]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d103      	bne.n	8019ba4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	4a47      	ldr	r2, [pc, #284]	@ (8019cbc <UART_Start_Receive_IT+0x234>)
 8019ba0:	675a      	str	r2, [r3, #116]	@ 0x74
 8019ba2:	e002      	b.n	8019baa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	4a46      	ldr	r2, [pc, #280]	@ (8019cc0 <UART_Start_Receive_IT+0x238>)
 8019ba8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	691b      	ldr	r3, [r3, #16]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d01a      	beq.n	8019be8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bba:	e853 3f00 	ldrex	r3, [r3]
 8019bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019bc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	461a      	mov	r2, r3
 8019bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019bd6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bd8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019bda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019bdc:	e841 2300 	strex	r3, r2, [r1]
 8019be0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d1e4      	bne.n	8019bb2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	3308      	adds	r3, #8
 8019bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bf2:	e853 3f00 	ldrex	r3, [r3]
 8019bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	3308      	adds	r3, #8
 8019c06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019c08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019c0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019c10:	e841 2300 	strex	r3, r2, [r1]
 8019c14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d1e5      	bne.n	8019be8 <UART_Start_Receive_IT+0x160>
 8019c1c:	e046      	b.n	8019cac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	689b      	ldr	r3, [r3, #8]
 8019c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019c26:	d107      	bne.n	8019c38 <UART_Start_Receive_IT+0x1b0>
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	691b      	ldr	r3, [r3, #16]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d103      	bne.n	8019c38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	4a24      	ldr	r2, [pc, #144]	@ (8019cc4 <UART_Start_Receive_IT+0x23c>)
 8019c34:	675a      	str	r2, [r3, #116]	@ 0x74
 8019c36:	e002      	b.n	8019c3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	4a23      	ldr	r2, [pc, #140]	@ (8019cc8 <UART_Start_Receive_IT+0x240>)
 8019c3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	691b      	ldr	r3, [r3, #16]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d019      	beq.n	8019c7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c4e:	e853 3f00 	ldrex	r3, [r3]
 8019c52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c56:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019c5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	461a      	mov	r2, r3
 8019c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c66:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019c6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c6c:	e841 2300 	strex	r3, r2, [r1]
 8019c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d1e6      	bne.n	8019c46 <UART_Start_Receive_IT+0x1be>
 8019c78:	e018      	b.n	8019cac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c80:	697b      	ldr	r3, [r7, #20]
 8019c82:	e853 3f00 	ldrex	r3, [r3]
 8019c86:	613b      	str	r3, [r7, #16]
   return(result);
 8019c88:	693b      	ldr	r3, [r7, #16]
 8019c8a:	f043 0320 	orr.w	r3, r3, #32
 8019c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	461a      	mov	r2, r3
 8019c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c98:	623b      	str	r3, [r7, #32]
 8019c9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c9c:	69f9      	ldr	r1, [r7, #28]
 8019c9e:	6a3a      	ldr	r2, [r7, #32]
 8019ca0:	e841 2300 	strex	r3, r2, [r1]
 8019ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8019ca6:	69bb      	ldr	r3, [r7, #24]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d1e6      	bne.n	8019c7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019cac:	2300      	movs	r3, #0
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	378c      	adds	r7, #140	@ 0x8c
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb8:	4770      	bx	lr
 8019cba:	bf00      	nop
 8019cbc:	0801a82d 	.word	0x0801a82d
 8019cc0:	0801a4c9 	.word	0x0801a4c9
 8019cc4:	0801a311 	.word	0x0801a311
 8019cc8:	0801a159 	.word	0x0801a159

08019ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019ccc:	b480      	push	{r7}
 8019cce:	b095      	sub	sp, #84	@ 0x54
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cdc:	e853 3f00 	ldrex	r3, [r3]
 8019ce0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	461a      	mov	r2, r3
 8019cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8019cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019cf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019cfa:	e841 2300 	strex	r3, r2, [r1]
 8019cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d1e6      	bne.n	8019cd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	3308      	adds	r3, #8
 8019d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d0e:	6a3b      	ldr	r3, [r7, #32]
 8019d10:	e853 3f00 	ldrex	r3, [r3]
 8019d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8019d16:	69fa      	ldr	r2, [r7, #28]
 8019d18:	4b1e      	ldr	r3, [pc, #120]	@ (8019d94 <UART_EndRxTransfer+0xc8>)
 8019d1a:	4013      	ands	r3, r2
 8019d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	3308      	adds	r3, #8
 8019d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d2e:	e841 2300 	strex	r3, r2, [r1]
 8019d32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d1e5      	bne.n	8019d06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d3e:	2b01      	cmp	r3, #1
 8019d40:	d118      	bne.n	8019d74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	e853 3f00 	ldrex	r3, [r3]
 8019d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	f023 0310 	bic.w	r3, r3, #16
 8019d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	461a      	mov	r2, r3
 8019d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d60:	61bb      	str	r3, [r7, #24]
 8019d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d64:	6979      	ldr	r1, [r7, #20]
 8019d66:	69ba      	ldr	r2, [r7, #24]
 8019d68:	e841 2300 	strex	r3, r2, [r1]
 8019d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8019d6e:	693b      	ldr	r3, [r7, #16]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d1e6      	bne.n	8019d42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	2220      	movs	r2, #32
 8019d78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2200      	movs	r2, #0
 8019d80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	2200      	movs	r2, #0
 8019d86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019d88:	bf00      	nop
 8019d8a:	3754      	adds	r7, #84	@ 0x54
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d92:	4770      	bx	lr
 8019d94:	effffffe 	.word	0xeffffffe

08019d98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b084      	sub	sp, #16
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	2200      	movs	r2, #0
 8019daa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019dae:	68f8      	ldr	r0, [r7, #12]
 8019db0:	f7fe fe2e 	bl	8018a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019db4:	bf00      	nop
 8019db6:	3710      	adds	r7, #16
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}

08019dbc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019dbc:	b480      	push	{r7}
 8019dbe:	b08f      	sub	sp, #60	@ 0x3c
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019dca:	2b21      	cmp	r3, #33	@ 0x21
 8019dcc:	d14c      	bne.n	8019e68 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d132      	bne.n	8019e40 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de0:	6a3b      	ldr	r3, [r7, #32]
 8019de2:	e853 3f00 	ldrex	r3, [r3]
 8019de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8019de8:	69fb      	ldr	r3, [r7, #28]
 8019dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	461a      	mov	r2, r3
 8019df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dfa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e00:	e841 2300 	strex	r3, r2, [r1]
 8019e04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d1e6      	bne.n	8019dda <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	e853 3f00 	ldrex	r3, [r3]
 8019e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e1a:	68bb      	ldr	r3, [r7, #8]
 8019e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	461a      	mov	r2, r3
 8019e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e2a:	61bb      	str	r3, [r7, #24]
 8019e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e2e:	6979      	ldr	r1, [r7, #20]
 8019e30:	69ba      	ldr	r2, [r7, #24]
 8019e32:	e841 2300 	strex	r3, r2, [r1]
 8019e36:	613b      	str	r3, [r7, #16]
   return(result);
 8019e38:	693b      	ldr	r3, [r7, #16]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d1e6      	bne.n	8019e0c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019e3e:	e013      	b.n	8019e68 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e44:	781a      	ldrb	r2, [r3, #0]
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e50:	1c5a      	adds	r2, r3, #1
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	3b01      	subs	r3, #1
 8019e60:	b29a      	uxth	r2, r3
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e68:	bf00      	nop
 8019e6a:	373c      	adds	r7, #60	@ 0x3c
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e72:	4770      	bx	lr

08019e74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019e74:	b480      	push	{r7}
 8019e76:	b091      	sub	sp, #68	@ 0x44
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e82:	2b21      	cmp	r3, #33	@ 0x21
 8019e84:	d151      	bne.n	8019f2a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d132      	bne.n	8019ef8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e9a:	e853 3f00 	ldrex	r3, [r3]
 8019e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8019ea0:	6a3b      	ldr	r3, [r7, #32]
 8019ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	461a      	mov	r2, r3
 8019eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019eb8:	e841 2300 	strex	r3, r2, [r1]
 8019ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d1e6      	bne.n	8019e92 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019eca:	693b      	ldr	r3, [r7, #16]
 8019ecc:	e853 3f00 	ldrex	r3, [r3]
 8019ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	461a      	mov	r2, r3
 8019ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ee2:	61fb      	str	r3, [r7, #28]
 8019ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ee6:	69b9      	ldr	r1, [r7, #24]
 8019ee8:	69fa      	ldr	r2, [r7, #28]
 8019eea:	e841 2300 	strex	r3, r2, [r1]
 8019eee:	617b      	str	r3, [r7, #20]
   return(result);
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d1e6      	bne.n	8019ec4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019ef6:	e018      	b.n	8019f2a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f00:	881b      	ldrh	r3, [r3, #0]
 8019f02:	461a      	mov	r2, r3
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019f0c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f12:	1c9a      	adds	r2, r3, #2
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f1e:	b29b      	uxth	r3, r3
 8019f20:	3b01      	subs	r3, #1
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019f2a:	bf00      	nop
 8019f2c:	3744      	adds	r7, #68	@ 0x44
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f34:	4770      	bx	lr

08019f36 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f36:	b480      	push	{r7}
 8019f38:	b091      	sub	sp, #68	@ 0x44
 8019f3a:	af00      	add	r7, sp, #0
 8019f3c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f44:	2b21      	cmp	r3, #33	@ 0x21
 8019f46:	d160      	bne.n	801a00a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f50:	e057      	b.n	801a002 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d133      	bne.n	8019fc6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	3308      	adds	r3, #8
 8019f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f68:	e853 3f00 	ldrex	r3, [r3]
 8019f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8019f6e:	6a3b      	ldr	r3, [r7, #32]
 8019f70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	3308      	adds	r3, #8
 8019f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f86:	e841 2300 	strex	r3, r2, [r1]
 8019f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1e5      	bne.n	8019f5e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f98:	693b      	ldr	r3, [r7, #16]
 8019f9a:	e853 3f00 	ldrex	r3, [r3]
 8019f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	461a      	mov	r2, r3
 8019fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fb0:	61fb      	str	r3, [r7, #28]
 8019fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fb4:	69b9      	ldr	r1, [r7, #24]
 8019fb6:	69fa      	ldr	r2, [r7, #28]
 8019fb8:	e841 2300 	strex	r3, r2, [r1]
 8019fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8019fbe:	697b      	ldr	r3, [r7, #20]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d1e6      	bne.n	8019f92 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019fc4:	e021      	b.n	801a00a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	69db      	ldr	r3, [r3, #28]
 8019fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d013      	beq.n	8019ffc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fd8:	781a      	ldrb	r2, [r3, #0]
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fe4:	1c5a      	adds	r2, r3, #1
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ff0:	b29b      	uxth	r3, r3
 8019ff2:	3b01      	subs	r3, #1
 8019ff4:	b29a      	uxth	r2, r3
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019ffc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019ffe:	3b01      	subs	r3, #1
 801a000:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a002:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a004:	2b00      	cmp	r3, #0
 801a006:	d1a4      	bne.n	8019f52 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a008:	e7ff      	b.n	801a00a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801a00a:	bf00      	nop
 801a00c:	3744      	adds	r7, #68	@ 0x44
 801a00e:	46bd      	mov	sp, r7
 801a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a014:	4770      	bx	lr

0801a016 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a016:	b480      	push	{r7}
 801a018:	b091      	sub	sp, #68	@ 0x44
 801a01a:	af00      	add	r7, sp, #0
 801a01c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a024:	2b21      	cmp	r3, #33	@ 0x21
 801a026:	d165      	bne.n	801a0f4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801a02e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a030:	e05c      	b.n	801a0ec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a038:	b29b      	uxth	r3, r3
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d133      	bne.n	801a0a6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	3308      	adds	r3, #8
 801a044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a046:	6a3b      	ldr	r3, [r7, #32]
 801a048:	e853 3f00 	ldrex	r3, [r3]
 801a04c:	61fb      	str	r3, [r7, #28]
   return(result);
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a054:	637b      	str	r3, [r7, #52]	@ 0x34
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	3308      	adds	r3, #8
 801a05c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a05e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a060:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a062:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a066:	e841 2300 	strex	r3, r2, [r1]
 801a06a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d1e5      	bne.n	801a03e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	e853 3f00 	ldrex	r3, [r3]
 801a07e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a086:	633b      	str	r3, [r7, #48]	@ 0x30
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	461a      	mov	r2, r3
 801a08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a090:	61bb      	str	r3, [r7, #24]
 801a092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a094:	6979      	ldr	r1, [r7, #20]
 801a096:	69ba      	ldr	r2, [r7, #24]
 801a098:	e841 2300 	strex	r3, r2, [r1]
 801a09c:	613b      	str	r3, [r7, #16]
   return(result);
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d1e6      	bne.n	801a072 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a0a4:	e026      	b.n	801a0f4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	69db      	ldr	r3, [r3, #28]
 801a0ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d018      	beq.n	801a0e6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0bc:	881b      	ldrh	r3, [r3, #0]
 801a0be:	461a      	mov	r2, r3
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a0c8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0ce:	1c9a      	adds	r2, r3, #2
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	3b01      	subs	r3, #1
 801a0de:	b29a      	uxth	r2, r3
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a0e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0e8:	3b01      	subs	r3, #1
 801a0ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a0ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d19f      	bne.n	801a032 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a0f2:	e7ff      	b.n	801a0f4 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a0f4:	bf00      	nop
 801a0f6:	3744      	adds	r7, #68	@ 0x44
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fe:	4770      	bx	lr

0801a100 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b088      	sub	sp, #32
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	e853 3f00 	ldrex	r3, [r3]
 801a114:	60bb      	str	r3, [r7, #8]
   return(result);
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a11c:	61fb      	str	r3, [r7, #28]
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	461a      	mov	r2, r3
 801a124:	69fb      	ldr	r3, [r7, #28]
 801a126:	61bb      	str	r3, [r7, #24]
 801a128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a12a:	6979      	ldr	r1, [r7, #20]
 801a12c:	69ba      	ldr	r2, [r7, #24]
 801a12e:	e841 2300 	strex	r3, r2, [r1]
 801a132:	613b      	str	r3, [r7, #16]
   return(result);
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d1e6      	bne.n	801a108 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	2220      	movs	r2, #32
 801a13e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	2200      	movs	r2, #0
 801a146:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a148:	6878      	ldr	r0, [r7, #4]
 801a14a:	f7fe fc57 	bl	80189fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a14e:	bf00      	nop
 801a150:	3720      	adds	r7, #32
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}
	...

0801a158 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b09c      	sub	sp, #112	@ 0x70
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a166:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a170:	2b22      	cmp	r3, #34	@ 0x22
 801a172:	f040 80be 	bne.w	801a2f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a17c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a180:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a184:	b2d9      	uxtb	r1, r3
 801a186:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a18a:	b2da      	uxtb	r2, r3
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a190:	400a      	ands	r2, r1
 801a192:	b2d2      	uxtb	r2, r2
 801a194:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a19a:	1c5a      	adds	r2, r3, #1
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a1a6:	b29b      	uxth	r3, r3
 801a1a8:	3b01      	subs	r3, #1
 801a1aa:	b29a      	uxth	r2, r3
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a1b8:	b29b      	uxth	r3, r3
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	f040 80a1 	bne.w	801a302 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1c8:	e853 3f00 	ldrex	r3, [r3]
 801a1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a1d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	461a      	mov	r2, r3
 801a1dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1de:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1e6:	e841 2300 	strex	r3, r2, [r1]
 801a1ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a1ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d1e6      	bne.n	801a1c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	3308      	adds	r3, #8
 801a1f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1fc:	e853 3f00 	ldrex	r3, [r3]
 801a200:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a204:	f023 0301 	bic.w	r3, r3, #1
 801a208:	667b      	str	r3, [r7, #100]	@ 0x64
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	3308      	adds	r3, #8
 801a210:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a212:	647a      	str	r2, [r7, #68]	@ 0x44
 801a214:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a216:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a218:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a21a:	e841 2300 	strex	r3, r2, [r1]
 801a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a222:	2b00      	cmp	r3, #0
 801a224:	d1e5      	bne.n	801a1f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2220      	movs	r2, #32
 801a22a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	2200      	movs	r2, #0
 801a232:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	2200      	movs	r2, #0
 801a238:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a33      	ldr	r2, [pc, #204]	@ (801a30c <UART_RxISR_8BIT+0x1b4>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d01f      	beq.n	801a284 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	685b      	ldr	r3, [r3, #4]
 801a24a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d018      	beq.n	801a284 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a25a:	e853 3f00 	ldrex	r3, [r3]
 801a25e:	623b      	str	r3, [r7, #32]
   return(result);
 801a260:	6a3b      	ldr	r3, [r7, #32]
 801a262:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a266:	663b      	str	r3, [r7, #96]	@ 0x60
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	461a      	mov	r2, r3
 801a26e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a270:	633b      	str	r3, [r7, #48]	@ 0x30
 801a272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a278:	e841 2300 	strex	r3, r2, [r1]
 801a27c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a280:	2b00      	cmp	r3, #0
 801a282:	d1e6      	bne.n	801a252 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a288:	2b01      	cmp	r3, #1
 801a28a:	d12e      	bne.n	801a2ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	2200      	movs	r2, #0
 801a290:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a298:	693b      	ldr	r3, [r7, #16]
 801a29a:	e853 3f00 	ldrex	r3, [r3]
 801a29e:	60fb      	str	r3, [r7, #12]
   return(result);
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	f023 0310 	bic.w	r3, r3, #16
 801a2a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a2b0:	61fb      	str	r3, [r7, #28]
 801a2b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2b4:	69b9      	ldr	r1, [r7, #24]
 801a2b6:	69fa      	ldr	r2, [r7, #28]
 801a2b8:	e841 2300 	strex	r3, r2, [r1]
 801a2bc:	617b      	str	r3, [r7, #20]
   return(result);
 801a2be:	697b      	ldr	r3, [r7, #20]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d1e6      	bne.n	801a292 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	69db      	ldr	r3, [r3, #28]
 801a2ca:	f003 0310 	and.w	r3, r3, #16
 801a2ce:	2b10      	cmp	r3, #16
 801a2d0:	d103      	bne.n	801a2da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2210      	movs	r2, #16
 801a2d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2e0:	4619      	mov	r1, r3
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	f7fe fb9e 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a2e8:	e00b      	b.n	801a302 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a2ea:	6878      	ldr	r0, [r7, #4]
 801a2ec:	f7ec f996 	bl	800661c <HAL_UART_RxCpltCallback>
}
 801a2f0:	e007      	b.n	801a302 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	699a      	ldr	r2, [r3, #24]
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	f042 0208 	orr.w	r2, r2, #8
 801a300:	619a      	str	r2, [r3, #24]
}
 801a302:	bf00      	nop
 801a304:	3770      	adds	r7, #112	@ 0x70
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}
 801a30a:	bf00      	nop
 801a30c:	58000c00 	.word	0x58000c00

0801a310 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b09c      	sub	sp, #112	@ 0x70
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a31e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a328:	2b22      	cmp	r3, #34	@ 0x22
 801a32a:	f040 80be 	bne.w	801a4aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a334:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a33c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a33e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a342:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a346:	4013      	ands	r3, r2
 801a348:	b29a      	uxth	r2, r3
 801a34a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a34c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a352:	1c9a      	adds	r2, r3, #2
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a35e:	b29b      	uxth	r3, r3
 801a360:	3b01      	subs	r3, #1
 801a362:	b29a      	uxth	r2, r3
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a370:	b29b      	uxth	r3, r3
 801a372:	2b00      	cmp	r3, #0
 801a374:	f040 80a1 	bne.w	801a4ba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a37e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a380:	e853 3f00 	ldrex	r3, [r3]
 801a384:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a38c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	461a      	mov	r2, r3
 801a394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a396:	657b      	str	r3, [r7, #84]	@ 0x54
 801a398:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a39a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a39c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a39e:	e841 2300 	strex	r3, r2, [r1]
 801a3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d1e6      	bne.n	801a378 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	3308      	adds	r3, #8
 801a3b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3b4:	e853 3f00 	ldrex	r3, [r3]
 801a3b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3bc:	f023 0301 	bic.w	r3, r3, #1
 801a3c0:	663b      	str	r3, [r7, #96]	@ 0x60
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	3308      	adds	r3, #8
 801a3c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a3ca:	643a      	str	r2, [r7, #64]	@ 0x40
 801a3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3d2:	e841 2300 	strex	r3, r2, [r1]
 801a3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d1e5      	bne.n	801a3aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	2220      	movs	r2, #32
 801a3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4a33      	ldr	r2, [pc, #204]	@ (801a4c4 <UART_RxISR_16BIT+0x1b4>)
 801a3f8:	4293      	cmp	r3, r2
 801a3fa:	d01f      	beq.n	801a43c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	685b      	ldr	r3, [r3, #4]
 801a402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a406:	2b00      	cmp	r3, #0
 801a408:	d018      	beq.n	801a43c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a410:	6a3b      	ldr	r3, [r7, #32]
 801a412:	e853 3f00 	ldrex	r3, [r3]
 801a416:	61fb      	str	r3, [r7, #28]
   return(result);
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a41e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	461a      	mov	r2, r3
 801a426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a42a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a42c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a42e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a430:	e841 2300 	strex	r3, r2, [r1]
 801a434:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d1e6      	bne.n	801a40a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a440:	2b01      	cmp	r3, #1
 801a442:	d12e      	bne.n	801a4a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	2200      	movs	r2, #0
 801a448:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	e853 3f00 	ldrex	r3, [r3]
 801a456:	60bb      	str	r3, [r7, #8]
   return(result);
 801a458:	68bb      	ldr	r3, [r7, #8]
 801a45a:	f023 0310 	bic.w	r3, r3, #16
 801a45e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	461a      	mov	r2, r3
 801a466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a468:	61bb      	str	r3, [r7, #24]
 801a46a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a46c:	6979      	ldr	r1, [r7, #20]
 801a46e:	69ba      	ldr	r2, [r7, #24]
 801a470:	e841 2300 	strex	r3, r2, [r1]
 801a474:	613b      	str	r3, [r7, #16]
   return(result);
 801a476:	693b      	ldr	r3, [r7, #16]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d1e6      	bne.n	801a44a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	69db      	ldr	r3, [r3, #28]
 801a482:	f003 0310 	and.w	r3, r3, #16
 801a486:	2b10      	cmp	r3, #16
 801a488:	d103      	bne.n	801a492 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2210      	movs	r2, #16
 801a490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a498:	4619      	mov	r1, r3
 801a49a:	6878      	ldr	r0, [r7, #4]
 801a49c:	f7fe fac2 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a4a0:	e00b      	b.n	801a4ba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a4a2:	6878      	ldr	r0, [r7, #4]
 801a4a4:	f7ec f8ba 	bl	800661c <HAL_UART_RxCpltCallback>
}
 801a4a8:	e007      	b.n	801a4ba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	699a      	ldr	r2, [r3, #24]
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	f042 0208 	orr.w	r2, r2, #8
 801a4b8:	619a      	str	r2, [r3, #24]
}
 801a4ba:	bf00      	nop
 801a4bc:	3770      	adds	r7, #112	@ 0x70
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	bd80      	pop	{r7, pc}
 801a4c2:	bf00      	nop
 801a4c4:	58000c00 	.word	0x58000c00

0801a4c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b0ac      	sub	sp, #176	@ 0xb0
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	69db      	ldr	r3, [r3, #28]
 801a4e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	689b      	ldr	r3, [r3, #8]
 801a4f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a4fe:	2b22      	cmp	r3, #34	@ 0x22
 801a500:	f040 8181 	bne.w	801a806 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a50a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a50e:	e124      	b.n	801a75a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a516:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a51a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a51e:	b2d9      	uxtb	r1, r3
 801a520:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a524:	b2da      	uxtb	r2, r3
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a52a:	400a      	ands	r2, r1
 801a52c:	b2d2      	uxtb	r2, r2
 801a52e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a534:	1c5a      	adds	r2, r3, #1
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a540:	b29b      	uxth	r3, r3
 801a542:	3b01      	subs	r3, #1
 801a544:	b29a      	uxth	r2, r3
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	69db      	ldr	r3, [r3, #28]
 801a552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a55a:	f003 0307 	and.w	r3, r3, #7
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d053      	beq.n	801a60a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a566:	f003 0301 	and.w	r3, r3, #1
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d011      	beq.n	801a592 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a56e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a576:	2b00      	cmp	r3, #0
 801a578:	d00b      	beq.n	801a592 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	2201      	movs	r2, #1
 801a580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a588:	f043 0201 	orr.w	r2, r3, #1
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a596:	f003 0302 	and.w	r3, r3, #2
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d011      	beq.n	801a5c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a59e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5a2:	f003 0301 	and.w	r3, r3, #1
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d00b      	beq.n	801a5c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	2202      	movs	r2, #2
 801a5b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5b8:	f043 0204 	orr.w	r2, r3, #4
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a5c6:	f003 0304 	and.w	r3, r3, #4
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d011      	beq.n	801a5f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a5ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5d2:	f003 0301 	and.w	r3, r3, #1
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d00b      	beq.n	801a5f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	2204      	movs	r2, #4
 801a5e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5e8:	f043 0202 	orr.w	r2, r3, #2
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d006      	beq.n	801a60a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a5fc:	6878      	ldr	r0, [r7, #4]
 801a5fe:	f7fe fa07 	bl	8018a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	2200      	movs	r2, #0
 801a606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a610:	b29b      	uxth	r3, r3
 801a612:	2b00      	cmp	r3, #0
 801a614:	f040 80a1 	bne.w	801a75a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a61e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a620:	e853 3f00 	ldrex	r3, [r3]
 801a624:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a62c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	461a      	mov	r2, r3
 801a636:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a63a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a63c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a63e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a640:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a642:	e841 2300 	strex	r3, r2, [r1]
 801a646:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a648:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d1e4      	bne.n	801a618 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	3308      	adds	r3, #8
 801a654:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a658:	e853 3f00 	ldrex	r3, [r3]
 801a65c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a65e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a660:	4b6f      	ldr	r3, [pc, #444]	@ (801a820 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a662:	4013      	ands	r3, r2
 801a664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	3308      	adds	r3, #8
 801a66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a672:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a674:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a676:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a678:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a67a:	e841 2300 	strex	r3, r2, [r1]
 801a67e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a682:	2b00      	cmp	r3, #0
 801a684:	d1e3      	bne.n	801a64e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	2220      	movs	r2, #32
 801a68a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2200      	movs	r2, #0
 801a692:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	2200      	movs	r2, #0
 801a698:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	4a61      	ldr	r2, [pc, #388]	@ (801a824 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a6a0:	4293      	cmp	r3, r2
 801a6a2:	d021      	beq.n	801a6e8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	685b      	ldr	r3, [r3, #4]
 801a6aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d01a      	beq.n	801a6e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6ba:	e853 3f00 	ldrex	r3, [r3]
 801a6be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a6c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a6c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a6c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6d4:	657b      	str	r3, [r7, #84]	@ 0x54
 801a6d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a6da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a6dc:	e841 2300 	strex	r3, r2, [r1]
 801a6e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a6e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d1e4      	bne.n	801a6b2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ec:	2b01      	cmp	r3, #1
 801a6ee:	d130      	bne.n	801a752 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6fe:	e853 3f00 	ldrex	r3, [r3]
 801a702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a706:	f023 0310 	bic.w	r3, r3, #16
 801a70a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	461a      	mov	r2, r3
 801a714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a718:	643b      	str	r3, [r7, #64]	@ 0x40
 801a71a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a71c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a71e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a720:	e841 2300 	strex	r3, r2, [r1]
 801a724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d1e4      	bne.n	801a6f6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	69db      	ldr	r3, [r3, #28]
 801a732:	f003 0310 	and.w	r3, r3, #16
 801a736:	2b10      	cmp	r3, #16
 801a738:	d103      	bne.n	801a742 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	2210      	movs	r2, #16
 801a740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a748:	4619      	mov	r1, r3
 801a74a:	6878      	ldr	r0, [r7, #4]
 801a74c:	f7fe f96a 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a750:	e00e      	b.n	801a770 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f7eb ff62 	bl	800661c <HAL_UART_RxCpltCallback>
        break;
 801a758:	e00a      	b.n	801a770 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a75a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d006      	beq.n	801a770 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a766:	f003 0320 	and.w	r3, r3, #32
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	f47f aed0 	bne.w	801a510 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a776:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a77a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d049      	beq.n	801a816 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a788:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d242      	bcs.n	801a816 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	3308      	adds	r3, #8
 801a796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a798:	6a3b      	ldr	r3, [r7, #32]
 801a79a:	e853 3f00 	ldrex	r3, [r3]
 801a79e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a7a0:	69fb      	ldr	r3, [r7, #28]
 801a7a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a7a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	3308      	adds	r3, #8
 801a7b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a7b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a7ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7bc:	e841 2300 	strex	r3, r2, [r1]
 801a7c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d1e3      	bne.n	801a790 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	4a17      	ldr	r2, [pc, #92]	@ (801a828 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a7cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	e853 3f00 	ldrex	r3, [r3]
 801a7da:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	f043 0320 	orr.w	r3, r3, #32
 801a7e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a7f0:	61bb      	str	r3, [r7, #24]
 801a7f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7f4:	6979      	ldr	r1, [r7, #20]
 801a7f6:	69ba      	ldr	r2, [r7, #24]
 801a7f8:	e841 2300 	strex	r3, r2, [r1]
 801a7fc:	613b      	str	r3, [r7, #16]
   return(result);
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d1e4      	bne.n	801a7ce <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a804:	e007      	b.n	801a816 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	699a      	ldr	r2, [r3, #24]
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	f042 0208 	orr.w	r2, r2, #8
 801a814:	619a      	str	r2, [r3, #24]
}
 801a816:	bf00      	nop
 801a818:	37b0      	adds	r7, #176	@ 0xb0
 801a81a:	46bd      	mov	sp, r7
 801a81c:	bd80      	pop	{r7, pc}
 801a81e:	bf00      	nop
 801a820:	effffffe 	.word	0xeffffffe
 801a824:	58000c00 	.word	0x58000c00
 801a828:	0801a159 	.word	0x0801a159

0801a82c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b0ae      	sub	sp, #184	@ 0xb8
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a83a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	69db      	ldr	r3, [r3, #28]
 801a844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	689b      	ldr	r3, [r3, #8]
 801a858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a862:	2b22      	cmp	r3, #34	@ 0x22
 801a864:	f040 8185 	bne.w	801ab72 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a86e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a872:	e128      	b.n	801aac6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a87a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a886:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a88a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a88e:	4013      	ands	r3, r2
 801a890:	b29a      	uxth	r2, r3
 801a892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a89c:	1c9a      	adds	r2, r3, #2
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a8a8:	b29b      	uxth	r3, r3
 801a8aa:	3b01      	subs	r3, #1
 801a8ac:	b29a      	uxth	r2, r3
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	69db      	ldr	r3, [r3, #28]
 801a8ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a8be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8c2:	f003 0307 	and.w	r3, r3, #7
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d053      	beq.n	801a972 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a8ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8ce:	f003 0301 	and.w	r3, r3, #1
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d011      	beq.n	801a8fa <UART_RxISR_16BIT_FIFOEN+0xce>
 801a8d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d00b      	beq.n	801a8fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	2201      	movs	r2, #1
 801a8e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8f0:	f043 0201 	orr.w	r2, r3, #1
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8fe:	f003 0302 	and.w	r3, r3, #2
 801a902:	2b00      	cmp	r3, #0
 801a904:	d011      	beq.n	801a92a <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a90a:	f003 0301 	and.w	r3, r3, #1
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d00b      	beq.n	801a92a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	2202      	movs	r2, #2
 801a918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a920:	f043 0204 	orr.w	r2, r3, #4
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a92a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a92e:	f003 0304 	and.w	r3, r3, #4
 801a932:	2b00      	cmp	r3, #0
 801a934:	d011      	beq.n	801a95a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a93a:	f003 0301 	and.w	r3, r3, #1
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00b      	beq.n	801a95a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	2204      	movs	r2, #4
 801a948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a950:	f043 0202 	orr.w	r2, r3, #2
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a960:	2b00      	cmp	r3, #0
 801a962:	d006      	beq.n	801a972 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a964:	6878      	ldr	r0, [r7, #4]
 801a966:	f7fe f853 	bl	8018a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	2200      	movs	r2, #0
 801a96e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a978:	b29b      	uxth	r3, r3
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	f040 80a3 	bne.w	801aac6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a988:	e853 3f00 	ldrex	r3, [r3]
 801a98c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a98e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	461a      	mov	r2, r3
 801a99e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a9a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a9a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a9aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a9ae:	e841 2300 	strex	r3, r2, [r1]
 801a9b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a9b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d1e2      	bne.n	801a980 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	3308      	adds	r3, #8
 801a9c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a9c4:	e853 3f00 	ldrex	r3, [r3]
 801a9c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a9ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a9cc:	4b6f      	ldr	r3, [pc, #444]	@ (801ab8c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a9ce:	4013      	ands	r3, r2
 801a9d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	3308      	adds	r3, #8
 801a9da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a9de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a9e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a9e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a9e6:	e841 2300 	strex	r3, r2, [r1]
 801a9ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a9ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d1e3      	bne.n	801a9ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	2220      	movs	r2, #32
 801a9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	2200      	movs	r2, #0
 801aa04:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	4a61      	ldr	r2, [pc, #388]	@ (801ab90 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801aa0c:	4293      	cmp	r3, r2
 801aa0e:	d021      	beq.n	801aa54 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	685b      	ldr	r3, [r3, #4]
 801aa16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d01a      	beq.n	801aa54 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa26:	e853 3f00 	ldrex	r3, [r3]
 801aa2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801aa2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aa32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	461a      	mov	r2, r3
 801aa3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801aa40:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa42:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801aa46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa48:	e841 2300 	strex	r3, r2, [r1]
 801aa4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801aa4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d1e4      	bne.n	801aa1e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d130      	bne.n	801aabe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa6a:	e853 3f00 	ldrex	r3, [r3]
 801aa6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801aa70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa72:	f023 0310 	bic.w	r3, r3, #16
 801aa76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	461a      	mov	r2, r3
 801aa80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801aa84:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801aa8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa8c:	e841 2300 	strex	r3, r2, [r1]
 801aa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801aa92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d1e4      	bne.n	801aa62 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	69db      	ldr	r3, [r3, #28]
 801aa9e:	f003 0310 	and.w	r3, r3, #16
 801aaa2:	2b10      	cmp	r3, #16
 801aaa4:	d103      	bne.n	801aaae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	2210      	movs	r2, #16
 801aaac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aab4:	4619      	mov	r1, r3
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f7fd ffb4 	bl	8018a24 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aabc:	e00e      	b.n	801aadc <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aabe:	6878      	ldr	r0, [r7, #4]
 801aac0:	f7eb fdac 	bl	800661c <HAL_UART_RxCpltCallback>
        break;
 801aac4:	e00a      	b.n	801aadc <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aac6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d006      	beq.n	801aadc <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aace:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aad2:	f003 0320 	and.w	r3, r3, #32
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	f47f aecc 	bne.w	801a874 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aae2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aae6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d049      	beq.n	801ab82 <UART_RxISR_16BIT_FIFOEN+0x356>
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aaf4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aaf8:	429a      	cmp	r2, r3
 801aafa:	d242      	bcs.n	801ab82 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	3308      	adds	r3, #8
 801ab02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab06:	e853 3f00 	ldrex	r3, [r3]
 801ab0a:	623b      	str	r3, [r7, #32]
   return(result);
 801ab0c:	6a3b      	ldr	r3, [r7, #32]
 801ab0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ab12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	3308      	adds	r3, #8
 801ab1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801ab20:	633a      	str	r2, [r7, #48]	@ 0x30
 801ab22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ab26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab28:	e841 2300 	strex	r3, r2, [r1]
 801ab2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801ab2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d1e3      	bne.n	801aafc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	4a17      	ldr	r2, [pc, #92]	@ (801ab94 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801ab38:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab40:	693b      	ldr	r3, [r7, #16]
 801ab42:	e853 3f00 	ldrex	r3, [r3]
 801ab46:	60fb      	str	r3, [r7, #12]
   return(result);
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	f043 0320 	orr.w	r3, r3, #32
 801ab4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	461a      	mov	r2, r3
 801ab58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ab5c:	61fb      	str	r3, [r7, #28]
 801ab5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab60:	69b9      	ldr	r1, [r7, #24]
 801ab62:	69fa      	ldr	r2, [r7, #28]
 801ab64:	e841 2300 	strex	r3, r2, [r1]
 801ab68:	617b      	str	r3, [r7, #20]
   return(result);
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d1e4      	bne.n	801ab3a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab70:	e007      	b.n	801ab82 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	699a      	ldr	r2, [r3, #24]
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	f042 0208 	orr.w	r2, r2, #8
 801ab80:	619a      	str	r2, [r3, #24]
}
 801ab82:	bf00      	nop
 801ab84:	37b8      	adds	r7, #184	@ 0xb8
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bd80      	pop	{r7, pc}
 801ab8a:	bf00      	nop
 801ab8c:	effffffe 	.word	0xeffffffe
 801ab90:	58000c00 	.word	0x58000c00
 801ab94:	0801a311 	.word	0x0801a311

0801ab98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab98:	b480      	push	{r7}
 801ab9a:	b083      	sub	sp, #12
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801aba0:	bf00      	nop
 801aba2:	370c      	adds	r7, #12
 801aba4:	46bd      	mov	sp, r7
 801aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abaa:	4770      	bx	lr

0801abac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801abac:	b480      	push	{r7}
 801abae:	b083      	sub	sp, #12
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801abb4:	bf00      	nop
 801abb6:	370c      	adds	r7, #12
 801abb8:	46bd      	mov	sp, r7
 801abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abbe:	4770      	bx	lr

0801abc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b083      	sub	sp, #12
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801abc8:	bf00      	nop
 801abca:	370c      	adds	r7, #12
 801abcc:	46bd      	mov	sp, r7
 801abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd2:	4770      	bx	lr

0801abd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801abd4:	b480      	push	{r7}
 801abd6:	b085      	sub	sp, #20
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abe2:	2b01      	cmp	r3, #1
 801abe4:	d101      	bne.n	801abea <HAL_UARTEx_DisableFifoMode+0x16>
 801abe6:	2302      	movs	r3, #2
 801abe8:	e027      	b.n	801ac3a <HAL_UARTEx_DisableFifoMode+0x66>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2201      	movs	r2, #1
 801abee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	2224      	movs	r2, #36	@ 0x24
 801abf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	681a      	ldr	r2, [r3, #0]
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	f022 0201 	bic.w	r2, r2, #1
 801ac10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801ac18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	68fa      	ldr	r2, [r7, #12]
 801ac26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2220      	movs	r2, #32
 801ac2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	2200      	movs	r2, #0
 801ac34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac38:	2300      	movs	r3, #0
}
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3714      	adds	r7, #20
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac44:	4770      	bx	lr

0801ac46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac46:	b580      	push	{r7, lr}
 801ac48:	b084      	sub	sp, #16
 801ac4a:	af00      	add	r7, sp, #0
 801ac4c:	6078      	str	r0, [r7, #4]
 801ac4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac56:	2b01      	cmp	r3, #1
 801ac58:	d101      	bne.n	801ac5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ac5a:	2302      	movs	r3, #2
 801ac5c:	e02d      	b.n	801acba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	2201      	movs	r2, #1
 801ac62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	2224      	movs	r2, #36	@ 0x24
 801ac6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	681a      	ldr	r2, [r3, #0]
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	f022 0201 	bic.w	r2, r2, #1
 801ac84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	689b      	ldr	r3, [r3, #8]
 801ac8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	683a      	ldr	r2, [r7, #0]
 801ac96:	430a      	orrs	r2, r1
 801ac98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac9a:	6878      	ldr	r0, [r7, #4]
 801ac9c:	f000 f850 	bl	801ad40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	68fa      	ldr	r2, [r7, #12]
 801aca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2220      	movs	r2, #32
 801acac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	2200      	movs	r2, #0
 801acb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801acb8:	2300      	movs	r3, #0
}
 801acba:	4618      	mov	r0, r3
 801acbc:	3710      	adds	r7, #16
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}

0801acc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801acc2:	b580      	push	{r7, lr}
 801acc4:	b084      	sub	sp, #16
 801acc6:	af00      	add	r7, sp, #0
 801acc8:	6078      	str	r0, [r7, #4]
 801acca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801acd2:	2b01      	cmp	r3, #1
 801acd4:	d101      	bne.n	801acda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801acd6:	2302      	movs	r3, #2
 801acd8:	e02d      	b.n	801ad36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	2201      	movs	r2, #1
 801acde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	2224      	movs	r2, #36	@ 0x24
 801ace6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	f022 0201 	bic.w	r2, r2, #1
 801ad00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	689b      	ldr	r3, [r3, #8]
 801ad08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	683a      	ldr	r2, [r7, #0]
 801ad12:	430a      	orrs	r2, r1
 801ad14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 f812 	bl	801ad40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	68fa      	ldr	r2, [r7, #12]
 801ad22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2220      	movs	r2, #32
 801ad28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	2200      	movs	r2, #0
 801ad30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ad34:	2300      	movs	r3, #0
}
 801ad36:	4618      	mov	r0, r3
 801ad38:	3710      	adds	r7, #16
 801ad3a:	46bd      	mov	sp, r7
 801ad3c:	bd80      	pop	{r7, pc}
	...

0801ad40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ad40:	b480      	push	{r7}
 801ad42:	b085      	sub	sp, #20
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d108      	bne.n	801ad62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	2201      	movs	r2, #1
 801ad54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	2201      	movs	r2, #1
 801ad5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ad60:	e031      	b.n	801adc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ad62:	2310      	movs	r3, #16
 801ad64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ad66:	2310      	movs	r3, #16
 801ad68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	689b      	ldr	r3, [r3, #8]
 801ad70:	0e5b      	lsrs	r3, r3, #25
 801ad72:	b2db      	uxtb	r3, r3
 801ad74:	f003 0307 	and.w	r3, r3, #7
 801ad78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	689b      	ldr	r3, [r3, #8]
 801ad80:	0f5b      	lsrs	r3, r3, #29
 801ad82:	b2db      	uxtb	r3, r3
 801ad84:	f003 0307 	and.w	r3, r3, #7
 801ad88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad8a:	7bbb      	ldrb	r3, [r7, #14]
 801ad8c:	7b3a      	ldrb	r2, [r7, #12]
 801ad8e:	4911      	ldr	r1, [pc, #68]	@ (801add4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad90:	5c8a      	ldrb	r2, [r1, r2]
 801ad92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad96:	7b3a      	ldrb	r2, [r7, #12]
 801ad98:	490f      	ldr	r1, [pc, #60]	@ (801add8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad9c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ada0:	b29a      	uxth	r2, r3
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ada8:	7bfb      	ldrb	r3, [r7, #15]
 801adaa:	7b7a      	ldrb	r2, [r7, #13]
 801adac:	4909      	ldr	r1, [pc, #36]	@ (801add4 <UARTEx_SetNbDataToProcess+0x94>)
 801adae:	5c8a      	ldrb	r2, [r1, r2]
 801adb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801adb4:	7b7a      	ldrb	r2, [r7, #13]
 801adb6:	4908      	ldr	r1, [pc, #32]	@ (801add8 <UARTEx_SetNbDataToProcess+0x98>)
 801adb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801adba:	fb93 f3f2 	sdiv	r3, r3, r2
 801adbe:	b29a      	uxth	r2, r3
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801adc6:	bf00      	nop
 801adc8:	3714      	adds	r7, #20
 801adca:	46bd      	mov	sp, r7
 801adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add0:	4770      	bx	lr
 801add2:	bf00      	nop
 801add4:	0801ec3c 	.word	0x0801ec3c
 801add8:	0801ec44 	.word	0x0801ec44

0801addc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801ade0:	4904      	ldr	r1, [pc, #16]	@ (801adf4 <MX_FATFS_Init+0x18>)
 801ade2:	4805      	ldr	r0, [pc, #20]	@ (801adf8 <MX_FATFS_Init+0x1c>)
 801ade4:	f003 f8d8 	bl	801df98 <FATFS_LinkDriver>
 801ade8:	4603      	mov	r3, r0
 801adea:	461a      	mov	r2, r3
 801adec:	4b03      	ldr	r3, [pc, #12]	@ (801adfc <MX_FATFS_Init+0x20>)
 801adee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801adf0:	bf00      	nop
 801adf2:	bd80      	pop	{r7, pc}
 801adf4:	2400054c 	.word	0x2400054c
 801adf8:	24000014 	.word	0x24000014
 801adfc:	24000548 	.word	0x24000548

0801ae00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ae00:	b480      	push	{r7}
 801ae02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801ae04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801ae06:	4618      	mov	r0, r3
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0e:	4770      	bx	lr

0801ae10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b082      	sub	sp, #8
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	4603      	mov	r3, r0
 801ae18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801ae1a:	79fb      	ldrb	r3, [r7, #7]
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	f7e9 fbcd 	bl	80045bc <SD_disk_initialize>
 801ae22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801ae24:	4618      	mov	r0, r3
 801ae26:	3708      	adds	r7, #8
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}

0801ae2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801ae2c:	b580      	push	{r7, lr}
 801ae2e:	b082      	sub	sp, #8
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	4603      	mov	r3, r0
 801ae34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ae36:	79fb      	ldrb	r3, [r7, #7]
 801ae38:	4618      	mov	r0, r3
 801ae3a:	f7e9 fcab 	bl	8004794 <SD_disk_status>
 801ae3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ae40:	4618      	mov	r0, r3
 801ae42:	3708      	adds	r7, #8
 801ae44:	46bd      	mov	sp, r7
 801ae46:	bd80      	pop	{r7, pc}

0801ae48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b084      	sub	sp, #16
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	60b9      	str	r1, [r7, #8]
 801ae50:	607a      	str	r2, [r7, #4]
 801ae52:	603b      	str	r3, [r7, #0]
 801ae54:	4603      	mov	r3, r0
 801ae56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ae58:	7bf8      	ldrb	r0, [r7, #15]
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	687a      	ldr	r2, [r7, #4]
 801ae5e:	68b9      	ldr	r1, [r7, #8]
 801ae60:	f7e9 fcae 	bl	80047c0 <SD_disk_read>
 801ae64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ae66:	4618      	mov	r0, r3
 801ae68:	3710      	adds	r7, #16
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}

0801ae6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ae6e:	b580      	push	{r7, lr}
 801ae70:	b084      	sub	sp, #16
 801ae72:	af00      	add	r7, sp, #0
 801ae74:	60b9      	str	r1, [r7, #8]
 801ae76:	607a      	str	r2, [r7, #4]
 801ae78:	603b      	str	r3, [r7, #0]
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ae7e:	7bf8      	ldrb	r0, [r7, #15]
 801ae80:	683b      	ldr	r3, [r7, #0]
 801ae82:	687a      	ldr	r2, [r7, #4]
 801ae84:	68b9      	ldr	r1, [r7, #8]
 801ae86:	f7e9 fd05 	bl	8004894 <SD_disk_write>
 801ae8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	3710      	adds	r7, #16
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd80      	pop	{r7, pc}

0801ae94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b082      	sub	sp, #8
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	603a      	str	r2, [r7, #0]
 801ae9e:	71fb      	strb	r3, [r7, #7]
 801aea0:	460b      	mov	r3, r1
 801aea2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801aea4:	79b9      	ldrb	r1, [r7, #6]
 801aea6:	79fb      	ldrb	r3, [r7, #7]
 801aea8:	683a      	ldr	r2, [r7, #0]
 801aeaa:	4618      	mov	r0, r3
 801aeac:	f7e9 fd76 	bl	800499c <SD_disk_ioctl>
 801aeb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	3708      	adds	r7, #8
 801aeb6:	46bd      	mov	sp, r7
 801aeb8:	bd80      	pop	{r7, pc}
	...

0801aebc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b084      	sub	sp, #16
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	4603      	mov	r3, r0
 801aec4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801aec6:	79fb      	ldrb	r3, [r7, #7]
 801aec8:	4a08      	ldr	r2, [pc, #32]	@ (801aeec <disk_status+0x30>)
 801aeca:	009b      	lsls	r3, r3, #2
 801aecc:	4413      	add	r3, r2
 801aece:	685b      	ldr	r3, [r3, #4]
 801aed0:	685b      	ldr	r3, [r3, #4]
 801aed2:	79fa      	ldrb	r2, [r7, #7]
 801aed4:	4905      	ldr	r1, [pc, #20]	@ (801aeec <disk_status+0x30>)
 801aed6:	440a      	add	r2, r1
 801aed8:	7a12      	ldrb	r2, [r2, #8]
 801aeda:	4610      	mov	r0, r2
 801aedc:	4798      	blx	r3
 801aede:	4603      	mov	r3, r0
 801aee0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aee2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aee4:	4618      	mov	r0, r3
 801aee6:	3710      	adds	r7, #16
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}
 801aeec:	24000768 	.word	0x24000768

0801aef0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b084      	sub	sp, #16
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	4603      	mov	r3, r0
 801aef8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aefa:	2300      	movs	r3, #0
 801aefc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aefe:	79fb      	ldrb	r3, [r7, #7]
 801af00:	4a0e      	ldr	r2, [pc, #56]	@ (801af3c <disk_initialize+0x4c>)
 801af02:	5cd3      	ldrb	r3, [r2, r3]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d114      	bne.n	801af32 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801af08:	79fb      	ldrb	r3, [r7, #7]
 801af0a:	4a0c      	ldr	r2, [pc, #48]	@ (801af3c <disk_initialize+0x4c>)
 801af0c:	009b      	lsls	r3, r3, #2
 801af0e:	4413      	add	r3, r2
 801af10:	685b      	ldr	r3, [r3, #4]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	79fa      	ldrb	r2, [r7, #7]
 801af16:	4909      	ldr	r1, [pc, #36]	@ (801af3c <disk_initialize+0x4c>)
 801af18:	440a      	add	r2, r1
 801af1a:	7a12      	ldrb	r2, [r2, #8]
 801af1c:	4610      	mov	r0, r2
 801af1e:	4798      	blx	r3
 801af20:	4603      	mov	r3, r0
 801af22:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801af24:	7bfb      	ldrb	r3, [r7, #15]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d103      	bne.n	801af32 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801af2a:	79fb      	ldrb	r3, [r7, #7]
 801af2c:	4a03      	ldr	r2, [pc, #12]	@ (801af3c <disk_initialize+0x4c>)
 801af2e:	2101      	movs	r1, #1
 801af30:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801af32:	7bfb      	ldrb	r3, [r7, #15]
}
 801af34:	4618      	mov	r0, r3
 801af36:	3710      	adds	r7, #16
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	24000768 	.word	0x24000768

0801af40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801af40:	b590      	push	{r4, r7, lr}
 801af42:	b087      	sub	sp, #28
 801af44:	af00      	add	r7, sp, #0
 801af46:	60b9      	str	r1, [r7, #8]
 801af48:	607a      	str	r2, [r7, #4]
 801af4a:	603b      	str	r3, [r7, #0]
 801af4c:	4603      	mov	r3, r0
 801af4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801af50:	7bfb      	ldrb	r3, [r7, #15]
 801af52:	4a0a      	ldr	r2, [pc, #40]	@ (801af7c <disk_read+0x3c>)
 801af54:	009b      	lsls	r3, r3, #2
 801af56:	4413      	add	r3, r2
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	689c      	ldr	r4, [r3, #8]
 801af5c:	7bfb      	ldrb	r3, [r7, #15]
 801af5e:	4a07      	ldr	r2, [pc, #28]	@ (801af7c <disk_read+0x3c>)
 801af60:	4413      	add	r3, r2
 801af62:	7a18      	ldrb	r0, [r3, #8]
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	687a      	ldr	r2, [r7, #4]
 801af68:	68b9      	ldr	r1, [r7, #8]
 801af6a:	47a0      	blx	r4
 801af6c:	4603      	mov	r3, r0
 801af6e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af70:	7dfb      	ldrb	r3, [r7, #23]
}
 801af72:	4618      	mov	r0, r3
 801af74:	371c      	adds	r7, #28
 801af76:	46bd      	mov	sp, r7
 801af78:	bd90      	pop	{r4, r7, pc}
 801af7a:	bf00      	nop
 801af7c:	24000768 	.word	0x24000768

0801af80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801af80:	b590      	push	{r4, r7, lr}
 801af82:	b087      	sub	sp, #28
 801af84:	af00      	add	r7, sp, #0
 801af86:	60b9      	str	r1, [r7, #8]
 801af88:	607a      	str	r2, [r7, #4]
 801af8a:	603b      	str	r3, [r7, #0]
 801af8c:	4603      	mov	r3, r0
 801af8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801af90:	7bfb      	ldrb	r3, [r7, #15]
 801af92:	4a0a      	ldr	r2, [pc, #40]	@ (801afbc <disk_write+0x3c>)
 801af94:	009b      	lsls	r3, r3, #2
 801af96:	4413      	add	r3, r2
 801af98:	685b      	ldr	r3, [r3, #4]
 801af9a:	68dc      	ldr	r4, [r3, #12]
 801af9c:	7bfb      	ldrb	r3, [r7, #15]
 801af9e:	4a07      	ldr	r2, [pc, #28]	@ (801afbc <disk_write+0x3c>)
 801afa0:	4413      	add	r3, r2
 801afa2:	7a18      	ldrb	r0, [r3, #8]
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	687a      	ldr	r2, [r7, #4]
 801afa8:	68b9      	ldr	r1, [r7, #8]
 801afaa:	47a0      	blx	r4
 801afac:	4603      	mov	r3, r0
 801afae:	75fb      	strb	r3, [r7, #23]
  return res;
 801afb0:	7dfb      	ldrb	r3, [r7, #23]
}
 801afb2:	4618      	mov	r0, r3
 801afb4:	371c      	adds	r7, #28
 801afb6:	46bd      	mov	sp, r7
 801afb8:	bd90      	pop	{r4, r7, pc}
 801afba:	bf00      	nop
 801afbc:	24000768 	.word	0x24000768

0801afc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b084      	sub	sp, #16
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	4603      	mov	r3, r0
 801afc8:	603a      	str	r2, [r7, #0]
 801afca:	71fb      	strb	r3, [r7, #7]
 801afcc:	460b      	mov	r3, r1
 801afce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801afd0:	79fb      	ldrb	r3, [r7, #7]
 801afd2:	4a09      	ldr	r2, [pc, #36]	@ (801aff8 <disk_ioctl+0x38>)
 801afd4:	009b      	lsls	r3, r3, #2
 801afd6:	4413      	add	r3, r2
 801afd8:	685b      	ldr	r3, [r3, #4]
 801afda:	691b      	ldr	r3, [r3, #16]
 801afdc:	79fa      	ldrb	r2, [r7, #7]
 801afde:	4906      	ldr	r1, [pc, #24]	@ (801aff8 <disk_ioctl+0x38>)
 801afe0:	440a      	add	r2, r1
 801afe2:	7a10      	ldrb	r0, [r2, #8]
 801afe4:	79b9      	ldrb	r1, [r7, #6]
 801afe6:	683a      	ldr	r2, [r7, #0]
 801afe8:	4798      	blx	r3
 801afea:	4603      	mov	r3, r0
 801afec:	73fb      	strb	r3, [r7, #15]
  return res;
 801afee:	7bfb      	ldrb	r3, [r7, #15]
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3710      	adds	r7, #16
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}
 801aff8:	24000768 	.word	0x24000768

0801affc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801affc:	b480      	push	{r7}
 801affe:	b085      	sub	sp, #20
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	3301      	adds	r3, #1
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801b00c:	89fb      	ldrh	r3, [r7, #14]
 801b00e:	021b      	lsls	r3, r3, #8
 801b010:	b21a      	sxth	r2, r3
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	781b      	ldrb	r3, [r3, #0]
 801b016:	b21b      	sxth	r3, r3
 801b018:	4313      	orrs	r3, r2
 801b01a:	b21b      	sxth	r3, r3
 801b01c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801b01e:	89fb      	ldrh	r3, [r7, #14]
}
 801b020:	4618      	mov	r0, r3
 801b022:	3714      	adds	r7, #20
 801b024:	46bd      	mov	sp, r7
 801b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02a:	4770      	bx	lr

0801b02c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b02c:	b480      	push	{r7}
 801b02e:	b085      	sub	sp, #20
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	3303      	adds	r3, #3
 801b038:	781b      	ldrb	r3, [r3, #0]
 801b03a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	021b      	lsls	r3, r3, #8
 801b040:	687a      	ldr	r2, [r7, #4]
 801b042:	3202      	adds	r2, #2
 801b044:	7812      	ldrb	r2, [r2, #0]
 801b046:	4313      	orrs	r3, r2
 801b048:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	021b      	lsls	r3, r3, #8
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	3201      	adds	r2, #1
 801b052:	7812      	ldrb	r2, [r2, #0]
 801b054:	4313      	orrs	r3, r2
 801b056:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	021b      	lsls	r3, r3, #8
 801b05c:	687a      	ldr	r2, [r7, #4]
 801b05e:	7812      	ldrb	r2, [r2, #0]
 801b060:	4313      	orrs	r3, r2
 801b062:	60fb      	str	r3, [r7, #12]
	return rv;
 801b064:	68fb      	ldr	r3, [r7, #12]
}
 801b066:	4618      	mov	r0, r3
 801b068:	3714      	adds	r7, #20
 801b06a:	46bd      	mov	sp, r7
 801b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b070:	4770      	bx	lr

0801b072 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b072:	b480      	push	{r7}
 801b074:	b083      	sub	sp, #12
 801b076:	af00      	add	r7, sp, #0
 801b078:	6078      	str	r0, [r7, #4]
 801b07a:	460b      	mov	r3, r1
 801b07c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	1c5a      	adds	r2, r3, #1
 801b082:	607a      	str	r2, [r7, #4]
 801b084:	887a      	ldrh	r2, [r7, #2]
 801b086:	b2d2      	uxtb	r2, r2
 801b088:	701a      	strb	r2, [r3, #0]
 801b08a:	887b      	ldrh	r3, [r7, #2]
 801b08c:	0a1b      	lsrs	r3, r3, #8
 801b08e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	1c5a      	adds	r2, r3, #1
 801b094:	607a      	str	r2, [r7, #4]
 801b096:	887a      	ldrh	r2, [r7, #2]
 801b098:	b2d2      	uxtb	r2, r2
 801b09a:	701a      	strb	r2, [r3, #0]
}
 801b09c:	bf00      	nop
 801b09e:	370c      	adds	r7, #12
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a6:	4770      	bx	lr

0801b0a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b0a8:	b480      	push	{r7}
 801b0aa:	b083      	sub	sp, #12
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
 801b0b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	1c5a      	adds	r2, r3, #1
 801b0b6:	607a      	str	r2, [r7, #4]
 801b0b8:	683a      	ldr	r2, [r7, #0]
 801b0ba:	b2d2      	uxtb	r2, r2
 801b0bc:	701a      	strb	r2, [r3, #0]
 801b0be:	683b      	ldr	r3, [r7, #0]
 801b0c0:	0a1b      	lsrs	r3, r3, #8
 801b0c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	1c5a      	adds	r2, r3, #1
 801b0c8:	607a      	str	r2, [r7, #4]
 801b0ca:	683a      	ldr	r2, [r7, #0]
 801b0cc:	b2d2      	uxtb	r2, r2
 801b0ce:	701a      	strb	r2, [r3, #0]
 801b0d0:	683b      	ldr	r3, [r7, #0]
 801b0d2:	0a1b      	lsrs	r3, r3, #8
 801b0d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	1c5a      	adds	r2, r3, #1
 801b0da:	607a      	str	r2, [r7, #4]
 801b0dc:	683a      	ldr	r2, [r7, #0]
 801b0de:	b2d2      	uxtb	r2, r2
 801b0e0:	701a      	strb	r2, [r3, #0]
 801b0e2:	683b      	ldr	r3, [r7, #0]
 801b0e4:	0a1b      	lsrs	r3, r3, #8
 801b0e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	1c5a      	adds	r2, r3, #1
 801b0ec:	607a      	str	r2, [r7, #4]
 801b0ee:	683a      	ldr	r2, [r7, #0]
 801b0f0:	b2d2      	uxtb	r2, r2
 801b0f2:	701a      	strb	r2, [r3, #0]
}
 801b0f4:	bf00      	nop
 801b0f6:	370c      	adds	r7, #12
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fe:	4770      	bx	lr

0801b100 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b100:	b480      	push	{r7}
 801b102:	b087      	sub	sp, #28
 801b104:	af00      	add	r7, sp, #0
 801b106:	60f8      	str	r0, [r7, #12]
 801b108:	60b9      	str	r1, [r7, #8]
 801b10a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b110:	68bb      	ldr	r3, [r7, #8]
 801b112:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d00d      	beq.n	801b136 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b11a:	693a      	ldr	r2, [r7, #16]
 801b11c:	1c53      	adds	r3, r2, #1
 801b11e:	613b      	str	r3, [r7, #16]
 801b120:	697b      	ldr	r3, [r7, #20]
 801b122:	1c59      	adds	r1, r3, #1
 801b124:	6179      	str	r1, [r7, #20]
 801b126:	7812      	ldrb	r2, [r2, #0]
 801b128:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	3b01      	subs	r3, #1
 801b12e:	607b      	str	r3, [r7, #4]
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1f1      	bne.n	801b11a <mem_cpy+0x1a>
	}
}
 801b136:	bf00      	nop
 801b138:	371c      	adds	r7, #28
 801b13a:	46bd      	mov	sp, r7
 801b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b140:	4770      	bx	lr

0801b142 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b142:	b480      	push	{r7}
 801b144:	b087      	sub	sp, #28
 801b146:	af00      	add	r7, sp, #0
 801b148:	60f8      	str	r0, [r7, #12]
 801b14a:	60b9      	str	r1, [r7, #8]
 801b14c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b152:	697b      	ldr	r3, [r7, #20]
 801b154:	1c5a      	adds	r2, r3, #1
 801b156:	617a      	str	r2, [r7, #20]
 801b158:	68ba      	ldr	r2, [r7, #8]
 801b15a:	b2d2      	uxtb	r2, r2
 801b15c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	3b01      	subs	r3, #1
 801b162:	607b      	str	r3, [r7, #4]
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d1f3      	bne.n	801b152 <mem_set+0x10>
}
 801b16a:	bf00      	nop
 801b16c:	bf00      	nop
 801b16e:	371c      	adds	r7, #28
 801b170:	46bd      	mov	sp, r7
 801b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b176:	4770      	bx	lr

0801b178 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b178:	b480      	push	{r7}
 801b17a:	b089      	sub	sp, #36	@ 0x24
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	60f8      	str	r0, [r7, #12]
 801b180:	60b9      	str	r1, [r7, #8]
 801b182:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	61fb      	str	r3, [r7, #28]
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b18c:	2300      	movs	r3, #0
 801b18e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b190:	69fb      	ldr	r3, [r7, #28]
 801b192:	1c5a      	adds	r2, r3, #1
 801b194:	61fa      	str	r2, [r7, #28]
 801b196:	781b      	ldrb	r3, [r3, #0]
 801b198:	4619      	mov	r1, r3
 801b19a:	69bb      	ldr	r3, [r7, #24]
 801b19c:	1c5a      	adds	r2, r3, #1
 801b19e:	61ba      	str	r2, [r7, #24]
 801b1a0:	781b      	ldrb	r3, [r3, #0]
 801b1a2:	1acb      	subs	r3, r1, r3
 801b1a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	3b01      	subs	r3, #1
 801b1aa:	607b      	str	r3, [r7, #4]
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d002      	beq.n	801b1b8 <mem_cmp+0x40>
 801b1b2:	697b      	ldr	r3, [r7, #20]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d0eb      	beq.n	801b190 <mem_cmp+0x18>

	return r;
 801b1b8:	697b      	ldr	r3, [r7, #20]
}
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	3724      	adds	r7, #36	@ 0x24
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c4:	4770      	bx	lr

0801b1c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b1c6:	b480      	push	{r7}
 801b1c8:	b083      	sub	sp, #12
 801b1ca:	af00      	add	r7, sp, #0
 801b1cc:	6078      	str	r0, [r7, #4]
 801b1ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b1d0:	e002      	b.n	801b1d8 <chk_chr+0x12>
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	3301      	adds	r3, #1
 801b1d6:	607b      	str	r3, [r7, #4]
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	781b      	ldrb	r3, [r3, #0]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d005      	beq.n	801b1ec <chk_chr+0x26>
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	461a      	mov	r2, r3
 801b1e6:	683b      	ldr	r3, [r7, #0]
 801b1e8:	4293      	cmp	r3, r2
 801b1ea:	d1f2      	bne.n	801b1d2 <chk_chr+0xc>
	return *str;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	781b      	ldrb	r3, [r3, #0]
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	370c      	adds	r7, #12
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1fa:	4770      	bx	lr

0801b1fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b1fc:	b480      	push	{r7}
 801b1fe:	b085      	sub	sp, #20
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b206:	2300      	movs	r3, #0
 801b208:	60bb      	str	r3, [r7, #8]
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	60fb      	str	r3, [r7, #12]
 801b20e:	e029      	b.n	801b264 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b210:	4a27      	ldr	r2, [pc, #156]	@ (801b2b0 <chk_lock+0xb4>)
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	011b      	lsls	r3, r3, #4
 801b216:	4413      	add	r3, r2
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d01d      	beq.n	801b25a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b21e:	4a24      	ldr	r2, [pc, #144]	@ (801b2b0 <chk_lock+0xb4>)
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	011b      	lsls	r3, r3, #4
 801b224:	4413      	add	r3, r2
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	429a      	cmp	r2, r3
 801b22e:	d116      	bne.n	801b25e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b230:	4a1f      	ldr	r2, [pc, #124]	@ (801b2b0 <chk_lock+0xb4>)
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	011b      	lsls	r3, r3, #4
 801b236:	4413      	add	r3, r2
 801b238:	3304      	adds	r3, #4
 801b23a:	681a      	ldr	r2, [r3, #0]
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b240:	429a      	cmp	r2, r3
 801b242:	d10c      	bne.n	801b25e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b244:	4a1a      	ldr	r2, [pc, #104]	@ (801b2b0 <chk_lock+0xb4>)
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	011b      	lsls	r3, r3, #4
 801b24a:	4413      	add	r3, r2
 801b24c:	3308      	adds	r3, #8
 801b24e:	681a      	ldr	r2, [r3, #0]
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b254:	429a      	cmp	r2, r3
 801b256:	d102      	bne.n	801b25e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b258:	e007      	b.n	801b26a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b25a:	2301      	movs	r3, #1
 801b25c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	3301      	adds	r3, #1
 801b262:	60fb      	str	r3, [r7, #12]
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d0d2      	beq.n	801b210 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	2b01      	cmp	r3, #1
 801b26e:	d109      	bne.n	801b284 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b270:	68bb      	ldr	r3, [r7, #8]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d102      	bne.n	801b27c <chk_lock+0x80>
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	2b02      	cmp	r3, #2
 801b27a:	d101      	bne.n	801b280 <chk_lock+0x84>
 801b27c:	2300      	movs	r3, #0
 801b27e:	e010      	b.n	801b2a2 <chk_lock+0xa6>
 801b280:	2312      	movs	r3, #18
 801b282:	e00e      	b.n	801b2a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b284:	683b      	ldr	r3, [r7, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d108      	bne.n	801b29c <chk_lock+0xa0>
 801b28a:	4a09      	ldr	r2, [pc, #36]	@ (801b2b0 <chk_lock+0xb4>)
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	011b      	lsls	r3, r3, #4
 801b290:	4413      	add	r3, r2
 801b292:	330c      	adds	r3, #12
 801b294:	881b      	ldrh	r3, [r3, #0]
 801b296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b29a:	d101      	bne.n	801b2a0 <chk_lock+0xa4>
 801b29c:	2310      	movs	r3, #16
 801b29e:	e000      	b.n	801b2a2 <chk_lock+0xa6>
 801b2a0:	2300      	movs	r3, #0
}
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	3714      	adds	r7, #20
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ac:	4770      	bx	lr
 801b2ae:	bf00      	nop
 801b2b0:	24000558 	.word	0x24000558

0801b2b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b2b4:	b480      	push	{r7}
 801b2b6:	b083      	sub	sp, #12
 801b2b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	607b      	str	r3, [r7, #4]
 801b2be:	e002      	b.n	801b2c6 <enq_lock+0x12>
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	3301      	adds	r3, #1
 801b2c4:	607b      	str	r3, [r7, #4]
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d106      	bne.n	801b2da <enq_lock+0x26>
 801b2cc:	4a09      	ldr	r2, [pc, #36]	@ (801b2f4 <enq_lock+0x40>)
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	011b      	lsls	r3, r3, #4
 801b2d2:	4413      	add	r3, r2
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d1f2      	bne.n	801b2c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	2b01      	cmp	r3, #1
 801b2de:	bf14      	ite	ne
 801b2e0:	2301      	movne	r3, #1
 801b2e2:	2300      	moveq	r3, #0
 801b2e4:	b2db      	uxtb	r3, r3
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	370c      	adds	r7, #12
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f0:	4770      	bx	lr
 801b2f2:	bf00      	nop
 801b2f4:	24000558 	.word	0x24000558

0801b2f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b2f8:	b480      	push	{r7}
 801b2fa:	b085      	sub	sp, #20
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
 801b300:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b302:	2300      	movs	r3, #0
 801b304:	60fb      	str	r3, [r7, #12]
 801b306:	e01f      	b.n	801b348 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b308:	4a41      	ldr	r2, [pc, #260]	@ (801b410 <inc_lock+0x118>)
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	011b      	lsls	r3, r3, #4
 801b30e:	4413      	add	r3, r2
 801b310:	681a      	ldr	r2, [r3, #0]
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	429a      	cmp	r2, r3
 801b318:	d113      	bne.n	801b342 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b31a:	4a3d      	ldr	r2, [pc, #244]	@ (801b410 <inc_lock+0x118>)
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	011b      	lsls	r3, r3, #4
 801b320:	4413      	add	r3, r2
 801b322:	3304      	adds	r3, #4
 801b324:	681a      	ldr	r2, [r3, #0]
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b32a:	429a      	cmp	r2, r3
 801b32c:	d109      	bne.n	801b342 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b32e:	4a38      	ldr	r2, [pc, #224]	@ (801b410 <inc_lock+0x118>)
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	011b      	lsls	r3, r3, #4
 801b334:	4413      	add	r3, r2
 801b336:	3308      	adds	r3, #8
 801b338:	681a      	ldr	r2, [r3, #0]
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b33e:	429a      	cmp	r2, r3
 801b340:	d006      	beq.n	801b350 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	3301      	adds	r3, #1
 801b346:	60fb      	str	r3, [r7, #12]
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d0dc      	beq.n	801b308 <inc_lock+0x10>
 801b34e:	e000      	b.n	801b352 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b350:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	2b01      	cmp	r3, #1
 801b356:	d132      	bne.n	801b3be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b358:	2300      	movs	r3, #0
 801b35a:	60fb      	str	r3, [r7, #12]
 801b35c:	e002      	b.n	801b364 <inc_lock+0x6c>
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	3301      	adds	r3, #1
 801b362:	60fb      	str	r3, [r7, #12]
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d106      	bne.n	801b378 <inc_lock+0x80>
 801b36a:	4a29      	ldr	r2, [pc, #164]	@ (801b410 <inc_lock+0x118>)
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	011b      	lsls	r3, r3, #4
 801b370:	4413      	add	r3, r2
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d1f2      	bne.n	801b35e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	2b01      	cmp	r3, #1
 801b37c:	d101      	bne.n	801b382 <inc_lock+0x8a>
 801b37e:	2300      	movs	r3, #0
 801b380:	e040      	b.n	801b404 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681a      	ldr	r2, [r3, #0]
 801b386:	4922      	ldr	r1, [pc, #136]	@ (801b410 <inc_lock+0x118>)
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	011b      	lsls	r3, r3, #4
 801b38c:	440b      	add	r3, r1
 801b38e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	689a      	ldr	r2, [r3, #8]
 801b394:	491e      	ldr	r1, [pc, #120]	@ (801b410 <inc_lock+0x118>)
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	011b      	lsls	r3, r3, #4
 801b39a:	440b      	add	r3, r1
 801b39c:	3304      	adds	r3, #4
 801b39e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	695a      	ldr	r2, [r3, #20]
 801b3a4:	491a      	ldr	r1, [pc, #104]	@ (801b410 <inc_lock+0x118>)
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	011b      	lsls	r3, r3, #4
 801b3aa:	440b      	add	r3, r1
 801b3ac:	3308      	adds	r3, #8
 801b3ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b3b0:	4a17      	ldr	r2, [pc, #92]	@ (801b410 <inc_lock+0x118>)
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	011b      	lsls	r3, r3, #4
 801b3b6:	4413      	add	r3, r2
 801b3b8:	330c      	adds	r3, #12
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b3be:	683b      	ldr	r3, [r7, #0]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d009      	beq.n	801b3d8 <inc_lock+0xe0>
 801b3c4:	4a12      	ldr	r2, [pc, #72]	@ (801b410 <inc_lock+0x118>)
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	011b      	lsls	r3, r3, #4
 801b3ca:	4413      	add	r3, r2
 801b3cc:	330c      	adds	r3, #12
 801b3ce:	881b      	ldrh	r3, [r3, #0]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d001      	beq.n	801b3d8 <inc_lock+0xe0>
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	e015      	b.n	801b404 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b3d8:	683b      	ldr	r3, [r7, #0]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d108      	bne.n	801b3f0 <inc_lock+0xf8>
 801b3de:	4a0c      	ldr	r2, [pc, #48]	@ (801b410 <inc_lock+0x118>)
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	011b      	lsls	r3, r3, #4
 801b3e4:	4413      	add	r3, r2
 801b3e6:	330c      	adds	r3, #12
 801b3e8:	881b      	ldrh	r3, [r3, #0]
 801b3ea:	3301      	adds	r3, #1
 801b3ec:	b29a      	uxth	r2, r3
 801b3ee:	e001      	b.n	801b3f4 <inc_lock+0xfc>
 801b3f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3f4:	4906      	ldr	r1, [pc, #24]	@ (801b410 <inc_lock+0x118>)
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	011b      	lsls	r3, r3, #4
 801b3fa:	440b      	add	r3, r1
 801b3fc:	330c      	adds	r3, #12
 801b3fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	3301      	adds	r3, #1
}
 801b404:	4618      	mov	r0, r3
 801b406:	3714      	adds	r7, #20
 801b408:	46bd      	mov	sp, r7
 801b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40e:	4770      	bx	lr
 801b410:	24000558 	.word	0x24000558

0801b414 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b414:	b480      	push	{r7}
 801b416:	b085      	sub	sp, #20
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	3b01      	subs	r3, #1
 801b420:	607b      	str	r3, [r7, #4]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d125      	bne.n	801b474 <dec_lock+0x60>
		n = Files[i].ctr;
 801b428:	4a17      	ldr	r2, [pc, #92]	@ (801b488 <dec_lock+0x74>)
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	011b      	lsls	r3, r3, #4
 801b42e:	4413      	add	r3, r2
 801b430:	330c      	adds	r3, #12
 801b432:	881b      	ldrh	r3, [r3, #0]
 801b434:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b436:	89fb      	ldrh	r3, [r7, #14]
 801b438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b43c:	d101      	bne.n	801b442 <dec_lock+0x2e>
 801b43e:	2300      	movs	r3, #0
 801b440:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b442:	89fb      	ldrh	r3, [r7, #14]
 801b444:	2b00      	cmp	r3, #0
 801b446:	d002      	beq.n	801b44e <dec_lock+0x3a>
 801b448:	89fb      	ldrh	r3, [r7, #14]
 801b44a:	3b01      	subs	r3, #1
 801b44c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b44e:	4a0e      	ldr	r2, [pc, #56]	@ (801b488 <dec_lock+0x74>)
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	011b      	lsls	r3, r3, #4
 801b454:	4413      	add	r3, r2
 801b456:	330c      	adds	r3, #12
 801b458:	89fa      	ldrh	r2, [r7, #14]
 801b45a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b45c:	89fb      	ldrh	r3, [r7, #14]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d105      	bne.n	801b46e <dec_lock+0x5a>
 801b462:	4a09      	ldr	r2, [pc, #36]	@ (801b488 <dec_lock+0x74>)
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	011b      	lsls	r3, r3, #4
 801b468:	4413      	add	r3, r2
 801b46a:	2200      	movs	r2, #0
 801b46c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b46e:	2300      	movs	r3, #0
 801b470:	737b      	strb	r3, [r7, #13]
 801b472:	e001      	b.n	801b478 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b474:	2302      	movs	r3, #2
 801b476:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b478:	7b7b      	ldrb	r3, [r7, #13]
}
 801b47a:	4618      	mov	r0, r3
 801b47c:	3714      	adds	r7, #20
 801b47e:	46bd      	mov	sp, r7
 801b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b484:	4770      	bx	lr
 801b486:	bf00      	nop
 801b488:	24000558 	.word	0x24000558

0801b48c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b48c:	b480      	push	{r7}
 801b48e:	b085      	sub	sp, #20
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b494:	2300      	movs	r3, #0
 801b496:	60fb      	str	r3, [r7, #12]
 801b498:	e010      	b.n	801b4bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b49a:	4a0d      	ldr	r2, [pc, #52]	@ (801b4d0 <clear_lock+0x44>)
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	011b      	lsls	r3, r3, #4
 801b4a0:	4413      	add	r3, r2
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	687a      	ldr	r2, [r7, #4]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d105      	bne.n	801b4b6 <clear_lock+0x2a>
 801b4aa:	4a09      	ldr	r2, [pc, #36]	@ (801b4d0 <clear_lock+0x44>)
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	011b      	lsls	r3, r3, #4
 801b4b0:	4413      	add	r3, r2
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	60fb      	str	r3, [r7, #12]
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d0eb      	beq.n	801b49a <clear_lock+0xe>
	}
}
 801b4c2:	bf00      	nop
 801b4c4:	bf00      	nop
 801b4c6:	3714      	adds	r7, #20
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ce:	4770      	bx	lr
 801b4d0:	24000558 	.word	0x24000558

0801b4d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b086      	sub	sp, #24
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b4dc:	2300      	movs	r3, #0
 801b4de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	78db      	ldrb	r3, [r3, #3]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d034      	beq.n	801b552 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	7858      	ldrb	r0, [r3, #1]
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4f8:	2301      	movs	r3, #1
 801b4fa:	697a      	ldr	r2, [r7, #20]
 801b4fc:	f7ff fd40 	bl	801af80 <disk_write>
 801b500:	4603      	mov	r3, r0
 801b502:	2b00      	cmp	r3, #0
 801b504:	d002      	beq.n	801b50c <sync_window+0x38>
			res = FR_DISK_ERR;
 801b506:	2301      	movs	r3, #1
 801b508:	73fb      	strb	r3, [r7, #15]
 801b50a:	e022      	b.n	801b552 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	2200      	movs	r2, #0
 801b510:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b516:	697a      	ldr	r2, [r7, #20]
 801b518:	1ad2      	subs	r2, r2, r3
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	6a1b      	ldr	r3, [r3, #32]
 801b51e:	429a      	cmp	r2, r3
 801b520:	d217      	bcs.n	801b552 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	789b      	ldrb	r3, [r3, #2]
 801b526:	613b      	str	r3, [r7, #16]
 801b528:	e010      	b.n	801b54c <sync_window+0x78>
					wsect += fs->fsize;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	6a1b      	ldr	r3, [r3, #32]
 801b52e:	697a      	ldr	r2, [r7, #20]
 801b530:	4413      	add	r3, r2
 801b532:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	7858      	ldrb	r0, [r3, #1]
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b53e:	2301      	movs	r3, #1
 801b540:	697a      	ldr	r2, [r7, #20]
 801b542:	f7ff fd1d 	bl	801af80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b546:	693b      	ldr	r3, [r7, #16]
 801b548:	3b01      	subs	r3, #1
 801b54a:	613b      	str	r3, [r7, #16]
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	2b01      	cmp	r3, #1
 801b550:	d8eb      	bhi.n	801b52a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b552:	7bfb      	ldrb	r3, [r7, #15]
}
 801b554:	4618      	mov	r0, r3
 801b556:	3718      	adds	r7, #24
 801b558:	46bd      	mov	sp, r7
 801b55a:	bd80      	pop	{r7, pc}

0801b55c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b084      	sub	sp, #16
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
 801b564:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b566:	2300      	movs	r3, #0
 801b568:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b56e:	683a      	ldr	r2, [r7, #0]
 801b570:	429a      	cmp	r2, r3
 801b572:	d01b      	beq.n	801b5ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b574:	6878      	ldr	r0, [r7, #4]
 801b576:	f7ff ffad 	bl	801b4d4 <sync_window>
 801b57a:	4603      	mov	r3, r0
 801b57c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b57e:	7bfb      	ldrb	r3, [r7, #15]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d113      	bne.n	801b5ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	7858      	ldrb	r0, [r3, #1]
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b58e:	2301      	movs	r3, #1
 801b590:	683a      	ldr	r2, [r7, #0]
 801b592:	f7ff fcd5 	bl	801af40 <disk_read>
 801b596:	4603      	mov	r3, r0
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d004      	beq.n	801b5a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b59c:	f04f 33ff 	mov.w	r3, #4294967295
 801b5a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b5a2:	2301      	movs	r3, #1
 801b5a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	683a      	ldr	r2, [r7, #0]
 801b5aa:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	3710      	adds	r7, #16
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	bd80      	pop	{r7, pc}
	...

0801b5b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b084      	sub	sp, #16
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b5c0:	6878      	ldr	r0, [r7, #4]
 801b5c2:	f7ff ff87 	bl	801b4d4 <sync_window>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b5ca:	7bfb      	ldrb	r3, [r7, #15]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d159      	bne.n	801b684 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	781b      	ldrb	r3, [r3, #0]
 801b5d4:	2b03      	cmp	r3, #3
 801b5d6:	d149      	bne.n	801b66c <sync_fs+0xb4>
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	791b      	ldrb	r3, [r3, #4]
 801b5dc:	2b01      	cmp	r3, #1
 801b5de:	d145      	bne.n	801b66c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	899b      	ldrh	r3, [r3, #12]
 801b5ea:	461a      	mov	r2, r3
 801b5ec:	2100      	movs	r1, #0
 801b5ee:	f7ff fda8 	bl	801b142 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	3338      	adds	r3, #56	@ 0x38
 801b5f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b5fa:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b5fe:	4618      	mov	r0, r3
 801b600:	f7ff fd37 	bl	801b072 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	3338      	adds	r3, #56	@ 0x38
 801b608:	4921      	ldr	r1, [pc, #132]	@ (801b690 <sync_fs+0xd8>)
 801b60a:	4618      	mov	r0, r3
 801b60c:	f7ff fd4c 	bl	801b0a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	3338      	adds	r3, #56	@ 0x38
 801b614:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b618:	491e      	ldr	r1, [pc, #120]	@ (801b694 <sync_fs+0xdc>)
 801b61a:	4618      	mov	r0, r3
 801b61c:	f7ff fd44 	bl	801b0a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	3338      	adds	r3, #56	@ 0x38
 801b624:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	699b      	ldr	r3, [r3, #24]
 801b62c:	4619      	mov	r1, r3
 801b62e:	4610      	mov	r0, r2
 801b630:	f7ff fd3a 	bl	801b0a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	3338      	adds	r3, #56	@ 0x38
 801b638:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	695b      	ldr	r3, [r3, #20]
 801b640:	4619      	mov	r1, r3
 801b642:	4610      	mov	r0, r2
 801b644:	f7ff fd30 	bl	801b0a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b64c:	1c5a      	adds	r2, r3, #1
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	7858      	ldrb	r0, [r3, #1]
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b660:	2301      	movs	r3, #1
 801b662:	f7ff fc8d 	bl	801af80 <disk_write>
			fs->fsi_flag = 0;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	2200      	movs	r2, #0
 801b66a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	785b      	ldrb	r3, [r3, #1]
 801b670:	2200      	movs	r2, #0
 801b672:	2100      	movs	r1, #0
 801b674:	4618      	mov	r0, r3
 801b676:	f7ff fca3 	bl	801afc0 <disk_ioctl>
 801b67a:	4603      	mov	r3, r0
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d001      	beq.n	801b684 <sync_fs+0xcc>
 801b680:	2301      	movs	r3, #1
 801b682:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b684:	7bfb      	ldrb	r3, [r7, #15]
}
 801b686:	4618      	mov	r0, r3
 801b688:	3710      	adds	r7, #16
 801b68a:	46bd      	mov	sp, r7
 801b68c:	bd80      	pop	{r7, pc}
 801b68e:	bf00      	nop
 801b690:	41615252 	.word	0x41615252
 801b694:	61417272 	.word	0x61417272

0801b698 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b698:	b480      	push	{r7}
 801b69a:	b083      	sub	sp, #12
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
 801b6a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	3b02      	subs	r3, #2
 801b6a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	69db      	ldr	r3, [r3, #28]
 801b6ac:	3b02      	subs	r3, #2
 801b6ae:	683a      	ldr	r2, [r7, #0]
 801b6b0:	429a      	cmp	r2, r3
 801b6b2:	d301      	bcc.n	801b6b8 <clust2sect+0x20>
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	e008      	b.n	801b6ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	895b      	ldrh	r3, [r3, #10]
 801b6bc:	461a      	mov	r2, r3
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	fb03 f202 	mul.w	r2, r3, r2
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b6c8:	4413      	add	r3, r2
}
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	370c      	adds	r7, #12
 801b6ce:	46bd      	mov	sp, r7
 801b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d4:	4770      	bx	lr

0801b6d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b6d6:	b580      	push	{r7, lr}
 801b6d8:	b086      	sub	sp, #24
 801b6da:	af00      	add	r7, sp, #0
 801b6dc:	6078      	str	r0, [r7, #4]
 801b6de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b6e6:	683b      	ldr	r3, [r7, #0]
 801b6e8:	2b01      	cmp	r3, #1
 801b6ea:	d904      	bls.n	801b6f6 <get_fat+0x20>
 801b6ec:	693b      	ldr	r3, [r7, #16]
 801b6ee:	69db      	ldr	r3, [r3, #28]
 801b6f0:	683a      	ldr	r2, [r7, #0]
 801b6f2:	429a      	cmp	r2, r3
 801b6f4:	d302      	bcc.n	801b6fc <get_fat+0x26>
		val = 1;	/* Internal error */
 801b6f6:	2301      	movs	r3, #1
 801b6f8:	617b      	str	r3, [r7, #20]
 801b6fa:	e0ba      	b.n	801b872 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b6fc:	f04f 33ff 	mov.w	r3, #4294967295
 801b700:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b702:	693b      	ldr	r3, [r7, #16]
 801b704:	781b      	ldrb	r3, [r3, #0]
 801b706:	2b03      	cmp	r3, #3
 801b708:	f000 8082 	beq.w	801b810 <get_fat+0x13a>
 801b70c:	2b03      	cmp	r3, #3
 801b70e:	f300 80a6 	bgt.w	801b85e <get_fat+0x188>
 801b712:	2b01      	cmp	r3, #1
 801b714:	d002      	beq.n	801b71c <get_fat+0x46>
 801b716:	2b02      	cmp	r3, #2
 801b718:	d055      	beq.n	801b7c6 <get_fat+0xf0>
 801b71a:	e0a0      	b.n	801b85e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b71c:	683b      	ldr	r3, [r7, #0]
 801b71e:	60fb      	str	r3, [r7, #12]
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	085b      	lsrs	r3, r3, #1
 801b724:	68fa      	ldr	r2, [r7, #12]
 801b726:	4413      	add	r3, r2
 801b728:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b72a:	693b      	ldr	r3, [r7, #16]
 801b72c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b72e:	693b      	ldr	r3, [r7, #16]
 801b730:	899b      	ldrh	r3, [r3, #12]
 801b732:	4619      	mov	r1, r3
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	fbb3 f3f1 	udiv	r3, r3, r1
 801b73a:	4413      	add	r3, r2
 801b73c:	4619      	mov	r1, r3
 801b73e:	6938      	ldr	r0, [r7, #16]
 801b740:	f7ff ff0c 	bl	801b55c <move_window>
 801b744:	4603      	mov	r3, r0
 801b746:	2b00      	cmp	r3, #0
 801b748:	f040 808c 	bne.w	801b864 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	1c5a      	adds	r2, r3, #1
 801b750:	60fa      	str	r2, [r7, #12]
 801b752:	693a      	ldr	r2, [r7, #16]
 801b754:	8992      	ldrh	r2, [r2, #12]
 801b756:	fbb3 f1f2 	udiv	r1, r3, r2
 801b75a:	fb01 f202 	mul.w	r2, r1, r2
 801b75e:	1a9b      	subs	r3, r3, r2
 801b760:	693a      	ldr	r2, [r7, #16]
 801b762:	4413      	add	r3, r2
 801b764:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b768:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b76a:	693b      	ldr	r3, [r7, #16]
 801b76c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b76e:	693b      	ldr	r3, [r7, #16]
 801b770:	899b      	ldrh	r3, [r3, #12]
 801b772:	4619      	mov	r1, r3
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	fbb3 f3f1 	udiv	r3, r3, r1
 801b77a:	4413      	add	r3, r2
 801b77c:	4619      	mov	r1, r3
 801b77e:	6938      	ldr	r0, [r7, #16]
 801b780:	f7ff feec 	bl	801b55c <move_window>
 801b784:	4603      	mov	r3, r0
 801b786:	2b00      	cmp	r3, #0
 801b788:	d16e      	bne.n	801b868 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b78a:	693b      	ldr	r3, [r7, #16]
 801b78c:	899b      	ldrh	r3, [r3, #12]
 801b78e:	461a      	mov	r2, r3
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	fbb3 f1f2 	udiv	r1, r3, r2
 801b796:	fb01 f202 	mul.w	r2, r1, r2
 801b79a:	1a9b      	subs	r3, r3, r2
 801b79c:	693a      	ldr	r2, [r7, #16]
 801b79e:	4413      	add	r3, r2
 801b7a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b7a4:	021b      	lsls	r3, r3, #8
 801b7a6:	68ba      	ldr	r2, [r7, #8]
 801b7a8:	4313      	orrs	r3, r2
 801b7aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b7ac:	683b      	ldr	r3, [r7, #0]
 801b7ae:	f003 0301 	and.w	r3, r3, #1
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d002      	beq.n	801b7bc <get_fat+0xe6>
 801b7b6:	68bb      	ldr	r3, [r7, #8]
 801b7b8:	091b      	lsrs	r3, r3, #4
 801b7ba:	e002      	b.n	801b7c2 <get_fat+0xec>
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b7c2:	617b      	str	r3, [r7, #20]
			break;
 801b7c4:	e055      	b.n	801b872 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b7c6:	693b      	ldr	r3, [r7, #16]
 801b7c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7ca:	693b      	ldr	r3, [r7, #16]
 801b7cc:	899b      	ldrh	r3, [r3, #12]
 801b7ce:	085b      	lsrs	r3, r3, #1
 801b7d0:	b29b      	uxth	r3, r3
 801b7d2:	4619      	mov	r1, r3
 801b7d4:	683b      	ldr	r3, [r7, #0]
 801b7d6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7da:	4413      	add	r3, r2
 801b7dc:	4619      	mov	r1, r3
 801b7de:	6938      	ldr	r0, [r7, #16]
 801b7e0:	f7ff febc 	bl	801b55c <move_window>
 801b7e4:	4603      	mov	r3, r0
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d140      	bne.n	801b86c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b7ea:	693b      	ldr	r3, [r7, #16]
 801b7ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	005b      	lsls	r3, r3, #1
 801b7f4:	693a      	ldr	r2, [r7, #16]
 801b7f6:	8992      	ldrh	r2, [r2, #12]
 801b7f8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7fc:	fb00 f202 	mul.w	r2, r0, r2
 801b800:	1a9b      	subs	r3, r3, r2
 801b802:	440b      	add	r3, r1
 801b804:	4618      	mov	r0, r3
 801b806:	f7ff fbf9 	bl	801affc <ld_word>
 801b80a:	4603      	mov	r3, r0
 801b80c:	617b      	str	r3, [r7, #20]
			break;
 801b80e:	e030      	b.n	801b872 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b810:	693b      	ldr	r3, [r7, #16]
 801b812:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b814:	693b      	ldr	r3, [r7, #16]
 801b816:	899b      	ldrh	r3, [r3, #12]
 801b818:	089b      	lsrs	r3, r3, #2
 801b81a:	b29b      	uxth	r3, r3
 801b81c:	4619      	mov	r1, r3
 801b81e:	683b      	ldr	r3, [r7, #0]
 801b820:	fbb3 f3f1 	udiv	r3, r3, r1
 801b824:	4413      	add	r3, r2
 801b826:	4619      	mov	r1, r3
 801b828:	6938      	ldr	r0, [r7, #16]
 801b82a:	f7ff fe97 	bl	801b55c <move_window>
 801b82e:	4603      	mov	r3, r0
 801b830:	2b00      	cmp	r3, #0
 801b832:	d11d      	bne.n	801b870 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b834:	693b      	ldr	r3, [r7, #16]
 801b836:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b83a:	683b      	ldr	r3, [r7, #0]
 801b83c:	009b      	lsls	r3, r3, #2
 801b83e:	693a      	ldr	r2, [r7, #16]
 801b840:	8992      	ldrh	r2, [r2, #12]
 801b842:	fbb3 f0f2 	udiv	r0, r3, r2
 801b846:	fb00 f202 	mul.w	r2, r0, r2
 801b84a:	1a9b      	subs	r3, r3, r2
 801b84c:	440b      	add	r3, r1
 801b84e:	4618      	mov	r0, r3
 801b850:	f7ff fbec 	bl	801b02c <ld_dword>
 801b854:	4603      	mov	r3, r0
 801b856:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b85a:	617b      	str	r3, [r7, #20]
			break;
 801b85c:	e009      	b.n	801b872 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b85e:	2301      	movs	r3, #1
 801b860:	617b      	str	r3, [r7, #20]
 801b862:	e006      	b.n	801b872 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b864:	bf00      	nop
 801b866:	e004      	b.n	801b872 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b868:	bf00      	nop
 801b86a:	e002      	b.n	801b872 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b86c:	bf00      	nop
 801b86e:	e000      	b.n	801b872 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b870:	bf00      	nop
		}
	}

	return val;
 801b872:	697b      	ldr	r3, [r7, #20]
}
 801b874:	4618      	mov	r0, r3
 801b876:	3718      	adds	r7, #24
 801b878:	46bd      	mov	sp, r7
 801b87a:	bd80      	pop	{r7, pc}

0801b87c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b87c:	b590      	push	{r4, r7, lr}
 801b87e:	b089      	sub	sp, #36	@ 0x24
 801b880:	af00      	add	r7, sp, #0
 801b882:	60f8      	str	r0, [r7, #12]
 801b884:	60b9      	str	r1, [r7, #8]
 801b886:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b888:	2302      	movs	r3, #2
 801b88a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b88c:	68bb      	ldr	r3, [r7, #8]
 801b88e:	2b01      	cmp	r3, #1
 801b890:	f240 8109 	bls.w	801baa6 <put_fat+0x22a>
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	69db      	ldr	r3, [r3, #28]
 801b898:	68ba      	ldr	r2, [r7, #8]
 801b89a:	429a      	cmp	r2, r3
 801b89c:	f080 8103 	bcs.w	801baa6 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	781b      	ldrb	r3, [r3, #0]
 801b8a4:	2b03      	cmp	r3, #3
 801b8a6:	f000 80b6 	beq.w	801ba16 <put_fat+0x19a>
 801b8aa:	2b03      	cmp	r3, #3
 801b8ac:	f300 80fb 	bgt.w	801baa6 <put_fat+0x22a>
 801b8b0:	2b01      	cmp	r3, #1
 801b8b2:	d003      	beq.n	801b8bc <put_fat+0x40>
 801b8b4:	2b02      	cmp	r3, #2
 801b8b6:	f000 8083 	beq.w	801b9c0 <put_fat+0x144>
 801b8ba:	e0f4      	b.n	801baa6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	61bb      	str	r3, [r7, #24]
 801b8c0:	69bb      	ldr	r3, [r7, #24]
 801b8c2:	085b      	lsrs	r3, r3, #1
 801b8c4:	69ba      	ldr	r2, [r7, #24]
 801b8c6:	4413      	add	r3, r2
 801b8c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	899b      	ldrh	r3, [r3, #12]
 801b8d2:	4619      	mov	r1, r3
 801b8d4:	69bb      	ldr	r3, [r7, #24]
 801b8d6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8da:	4413      	add	r3, r2
 801b8dc:	4619      	mov	r1, r3
 801b8de:	68f8      	ldr	r0, [r7, #12]
 801b8e0:	f7ff fe3c 	bl	801b55c <move_window>
 801b8e4:	4603      	mov	r3, r0
 801b8e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8e8:	7ffb      	ldrb	r3, [r7, #31]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	f040 80d4 	bne.w	801ba98 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8f6:	69bb      	ldr	r3, [r7, #24]
 801b8f8:	1c5a      	adds	r2, r3, #1
 801b8fa:	61ba      	str	r2, [r7, #24]
 801b8fc:	68fa      	ldr	r2, [r7, #12]
 801b8fe:	8992      	ldrh	r2, [r2, #12]
 801b900:	fbb3 f0f2 	udiv	r0, r3, r2
 801b904:	fb00 f202 	mul.w	r2, r0, r2
 801b908:	1a9b      	subs	r3, r3, r2
 801b90a:	440b      	add	r3, r1
 801b90c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	f003 0301 	and.w	r3, r3, #1
 801b914:	2b00      	cmp	r3, #0
 801b916:	d00d      	beq.n	801b934 <put_fat+0xb8>
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	b25b      	sxtb	r3, r3
 801b91e:	f003 030f 	and.w	r3, r3, #15
 801b922:	b25a      	sxtb	r2, r3
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	b2db      	uxtb	r3, r3
 801b928:	011b      	lsls	r3, r3, #4
 801b92a:	b25b      	sxtb	r3, r3
 801b92c:	4313      	orrs	r3, r2
 801b92e:	b25b      	sxtb	r3, r3
 801b930:	b2db      	uxtb	r3, r3
 801b932:	e001      	b.n	801b938 <put_fat+0xbc>
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	b2db      	uxtb	r3, r3
 801b938:	697a      	ldr	r2, [r7, #20]
 801b93a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	2201      	movs	r2, #1
 801b940:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	899b      	ldrh	r3, [r3, #12]
 801b94a:	4619      	mov	r1, r3
 801b94c:	69bb      	ldr	r3, [r7, #24]
 801b94e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b952:	4413      	add	r3, r2
 801b954:	4619      	mov	r1, r3
 801b956:	68f8      	ldr	r0, [r7, #12]
 801b958:	f7ff fe00 	bl	801b55c <move_window>
 801b95c:	4603      	mov	r3, r0
 801b95e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b960:	7ffb      	ldrb	r3, [r7, #31]
 801b962:	2b00      	cmp	r3, #0
 801b964:	f040 809a 	bne.w	801ba9c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	899b      	ldrh	r3, [r3, #12]
 801b972:	461a      	mov	r2, r3
 801b974:	69bb      	ldr	r3, [r7, #24]
 801b976:	fbb3 f0f2 	udiv	r0, r3, r2
 801b97a:	fb00 f202 	mul.w	r2, r0, r2
 801b97e:	1a9b      	subs	r3, r3, r2
 801b980:	440b      	add	r3, r1
 801b982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	f003 0301 	and.w	r3, r3, #1
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d003      	beq.n	801b996 <put_fat+0x11a>
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	091b      	lsrs	r3, r3, #4
 801b992:	b2db      	uxtb	r3, r3
 801b994:	e00e      	b.n	801b9b4 <put_fat+0x138>
 801b996:	697b      	ldr	r3, [r7, #20]
 801b998:	781b      	ldrb	r3, [r3, #0]
 801b99a:	b25b      	sxtb	r3, r3
 801b99c:	f023 030f 	bic.w	r3, r3, #15
 801b9a0:	b25a      	sxtb	r2, r3
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	0a1b      	lsrs	r3, r3, #8
 801b9a6:	b25b      	sxtb	r3, r3
 801b9a8:	f003 030f 	and.w	r3, r3, #15
 801b9ac:	b25b      	sxtb	r3, r3
 801b9ae:	4313      	orrs	r3, r2
 801b9b0:	b25b      	sxtb	r3, r3
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	697a      	ldr	r2, [r7, #20]
 801b9b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	2201      	movs	r2, #1
 801b9bc:	70da      	strb	r2, [r3, #3]
			break;
 801b9be:	e072      	b.n	801baa6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	899b      	ldrh	r3, [r3, #12]
 801b9c8:	085b      	lsrs	r3, r3, #1
 801b9ca:	b29b      	uxth	r3, r3
 801b9cc:	4619      	mov	r1, r3
 801b9ce:	68bb      	ldr	r3, [r7, #8]
 801b9d0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9d4:	4413      	add	r3, r2
 801b9d6:	4619      	mov	r1, r3
 801b9d8:	68f8      	ldr	r0, [r7, #12]
 801b9da:	f7ff fdbf 	bl	801b55c <move_window>
 801b9de:	4603      	mov	r3, r0
 801b9e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b9e2:	7ffb      	ldrb	r3, [r7, #31]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d15b      	bne.n	801baa0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9ee:	68bb      	ldr	r3, [r7, #8]
 801b9f0:	005b      	lsls	r3, r3, #1
 801b9f2:	68fa      	ldr	r2, [r7, #12]
 801b9f4:	8992      	ldrh	r2, [r2, #12]
 801b9f6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9fa:	fb00 f202 	mul.w	r2, r0, r2
 801b9fe:	1a9b      	subs	r3, r3, r2
 801ba00:	440b      	add	r3, r1
 801ba02:	687a      	ldr	r2, [r7, #4]
 801ba04:	b292      	uxth	r2, r2
 801ba06:	4611      	mov	r1, r2
 801ba08:	4618      	mov	r0, r3
 801ba0a:	f7ff fb32 	bl	801b072 <st_word>
			fs->wflag = 1;
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	2201      	movs	r2, #1
 801ba12:	70da      	strb	r2, [r3, #3]
			break;
 801ba14:	e047      	b.n	801baa6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	899b      	ldrh	r3, [r3, #12]
 801ba1e:	089b      	lsrs	r3, r3, #2
 801ba20:	b29b      	uxth	r3, r3
 801ba22:	4619      	mov	r1, r3
 801ba24:	68bb      	ldr	r3, [r7, #8]
 801ba26:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba2a:	4413      	add	r3, r2
 801ba2c:	4619      	mov	r1, r3
 801ba2e:	68f8      	ldr	r0, [r7, #12]
 801ba30:	f7ff fd94 	bl	801b55c <move_window>
 801ba34:	4603      	mov	r3, r0
 801ba36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ba38:	7ffb      	ldrb	r3, [r7, #31]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d132      	bne.n	801baa4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba4a:	68bb      	ldr	r3, [r7, #8]
 801ba4c:	009b      	lsls	r3, r3, #2
 801ba4e:	68fa      	ldr	r2, [r7, #12]
 801ba50:	8992      	ldrh	r2, [r2, #12]
 801ba52:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba56:	fb00 f202 	mul.w	r2, r0, r2
 801ba5a:	1a9b      	subs	r3, r3, r2
 801ba5c:	440b      	add	r3, r1
 801ba5e:	4618      	mov	r0, r3
 801ba60:	f7ff fae4 	bl	801b02c <ld_dword>
 801ba64:	4603      	mov	r3, r0
 801ba66:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801ba6a:	4323      	orrs	r3, r4
 801ba6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba74:	68bb      	ldr	r3, [r7, #8]
 801ba76:	009b      	lsls	r3, r3, #2
 801ba78:	68fa      	ldr	r2, [r7, #12]
 801ba7a:	8992      	ldrh	r2, [r2, #12]
 801ba7c:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba80:	fb00 f202 	mul.w	r2, r0, r2
 801ba84:	1a9b      	subs	r3, r3, r2
 801ba86:	440b      	add	r3, r1
 801ba88:	6879      	ldr	r1, [r7, #4]
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	f7ff fb0c 	bl	801b0a8 <st_dword>
			fs->wflag = 1;
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	2201      	movs	r2, #1
 801ba94:	70da      	strb	r2, [r3, #3]
			break;
 801ba96:	e006      	b.n	801baa6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba98:	bf00      	nop
 801ba9a:	e004      	b.n	801baa6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba9c:	bf00      	nop
 801ba9e:	e002      	b.n	801baa6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801baa0:	bf00      	nop
 801baa2:	e000      	b.n	801baa6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801baa4:	bf00      	nop
		}
	}
	return res;
 801baa6:	7ffb      	ldrb	r3, [r7, #31]
}
 801baa8:	4618      	mov	r0, r3
 801baaa:	3724      	adds	r7, #36	@ 0x24
 801baac:	46bd      	mov	sp, r7
 801baae:	bd90      	pop	{r4, r7, pc}

0801bab0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b088      	sub	sp, #32
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	60f8      	str	r0, [r7, #12]
 801bab8:	60b9      	str	r1, [r7, #8]
 801baba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801babc:	2300      	movs	r3, #0
 801babe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	2b01      	cmp	r3, #1
 801baca:	d904      	bls.n	801bad6 <remove_chain+0x26>
 801bacc:	69bb      	ldr	r3, [r7, #24]
 801bace:	69db      	ldr	r3, [r3, #28]
 801bad0:	68ba      	ldr	r2, [r7, #8]
 801bad2:	429a      	cmp	r2, r3
 801bad4:	d301      	bcc.n	801bada <remove_chain+0x2a>
 801bad6:	2302      	movs	r3, #2
 801bad8:	e04b      	b.n	801bb72 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d00c      	beq.n	801bafa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bae0:	f04f 32ff 	mov.w	r2, #4294967295
 801bae4:	6879      	ldr	r1, [r7, #4]
 801bae6:	69b8      	ldr	r0, [r7, #24]
 801bae8:	f7ff fec8 	bl	801b87c <put_fat>
 801baec:	4603      	mov	r3, r0
 801baee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801baf0:	7ffb      	ldrb	r3, [r7, #31]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d001      	beq.n	801bafa <remove_chain+0x4a>
 801baf6:	7ffb      	ldrb	r3, [r7, #31]
 801baf8:	e03b      	b.n	801bb72 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801bafa:	68b9      	ldr	r1, [r7, #8]
 801bafc:	68f8      	ldr	r0, [r7, #12]
 801bafe:	f7ff fdea 	bl	801b6d6 <get_fat>
 801bb02:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d031      	beq.n	801bb6e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801bb0a:	697b      	ldr	r3, [r7, #20]
 801bb0c:	2b01      	cmp	r3, #1
 801bb0e:	d101      	bne.n	801bb14 <remove_chain+0x64>
 801bb10:	2302      	movs	r3, #2
 801bb12:	e02e      	b.n	801bb72 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801bb14:	697b      	ldr	r3, [r7, #20]
 801bb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb1a:	d101      	bne.n	801bb20 <remove_chain+0x70>
 801bb1c:	2301      	movs	r3, #1
 801bb1e:	e028      	b.n	801bb72 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801bb20:	2200      	movs	r2, #0
 801bb22:	68b9      	ldr	r1, [r7, #8]
 801bb24:	69b8      	ldr	r0, [r7, #24]
 801bb26:	f7ff fea9 	bl	801b87c <put_fat>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bb2e:	7ffb      	ldrb	r3, [r7, #31]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d001      	beq.n	801bb38 <remove_chain+0x88>
 801bb34:	7ffb      	ldrb	r3, [r7, #31]
 801bb36:	e01c      	b.n	801bb72 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bb38:	69bb      	ldr	r3, [r7, #24]
 801bb3a:	699a      	ldr	r2, [r3, #24]
 801bb3c:	69bb      	ldr	r3, [r7, #24]
 801bb3e:	69db      	ldr	r3, [r3, #28]
 801bb40:	3b02      	subs	r3, #2
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d20b      	bcs.n	801bb5e <remove_chain+0xae>
			fs->free_clst++;
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	699b      	ldr	r3, [r3, #24]
 801bb4a:	1c5a      	adds	r2, r3, #1
 801bb4c:	69bb      	ldr	r3, [r7, #24]
 801bb4e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801bb50:	69bb      	ldr	r3, [r7, #24]
 801bb52:	791b      	ldrb	r3, [r3, #4]
 801bb54:	f043 0301 	orr.w	r3, r3, #1
 801bb58:	b2da      	uxtb	r2, r3
 801bb5a:	69bb      	ldr	r3, [r7, #24]
 801bb5c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bb5e:	697b      	ldr	r3, [r7, #20]
 801bb60:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bb62:	69bb      	ldr	r3, [r7, #24]
 801bb64:	69db      	ldr	r3, [r3, #28]
 801bb66:	68ba      	ldr	r2, [r7, #8]
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	d3c6      	bcc.n	801bafa <remove_chain+0x4a>
 801bb6c:	e000      	b.n	801bb70 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bb6e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bb70:	2300      	movs	r3, #0
}
 801bb72:	4618      	mov	r0, r3
 801bb74:	3720      	adds	r7, #32
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd80      	pop	{r7, pc}

0801bb7a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bb7a:	b580      	push	{r7, lr}
 801bb7c:	b088      	sub	sp, #32
 801bb7e:	af00      	add	r7, sp, #0
 801bb80:	6078      	str	r0, [r7, #4]
 801bb82:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bb8a:	683b      	ldr	r3, [r7, #0]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d10d      	bne.n	801bbac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	695b      	ldr	r3, [r3, #20]
 801bb94:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bb96:	69bb      	ldr	r3, [r7, #24]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d004      	beq.n	801bba6 <create_chain+0x2c>
 801bb9c:	693b      	ldr	r3, [r7, #16]
 801bb9e:	69db      	ldr	r3, [r3, #28]
 801bba0:	69ba      	ldr	r2, [r7, #24]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d31b      	bcc.n	801bbde <create_chain+0x64>
 801bba6:	2301      	movs	r3, #1
 801bba8:	61bb      	str	r3, [r7, #24]
 801bbaa:	e018      	b.n	801bbde <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bbac:	6839      	ldr	r1, [r7, #0]
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	f7ff fd91 	bl	801b6d6 <get_fat>
 801bbb4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	2b01      	cmp	r3, #1
 801bbba:	d801      	bhi.n	801bbc0 <create_chain+0x46>
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	e070      	b.n	801bca2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbc6:	d101      	bne.n	801bbcc <create_chain+0x52>
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	e06a      	b.n	801bca2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bbcc:	693b      	ldr	r3, [r7, #16]
 801bbce:	69db      	ldr	r3, [r3, #28]
 801bbd0:	68fa      	ldr	r2, [r7, #12]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d201      	bcs.n	801bbda <create_chain+0x60>
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	e063      	b.n	801bca2 <create_chain+0x128>
		scl = clst;
 801bbda:	683b      	ldr	r3, [r7, #0]
 801bbdc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bbde:	69bb      	ldr	r3, [r7, #24]
 801bbe0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bbe2:	69fb      	ldr	r3, [r7, #28]
 801bbe4:	3301      	adds	r3, #1
 801bbe6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bbe8:	693b      	ldr	r3, [r7, #16]
 801bbea:	69db      	ldr	r3, [r3, #28]
 801bbec:	69fa      	ldr	r2, [r7, #28]
 801bbee:	429a      	cmp	r2, r3
 801bbf0:	d307      	bcc.n	801bc02 <create_chain+0x88>
				ncl = 2;
 801bbf2:	2302      	movs	r3, #2
 801bbf4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bbf6:	69fa      	ldr	r2, [r7, #28]
 801bbf8:	69bb      	ldr	r3, [r7, #24]
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d901      	bls.n	801bc02 <create_chain+0x88>
 801bbfe:	2300      	movs	r3, #0
 801bc00:	e04f      	b.n	801bca2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bc02:	69f9      	ldr	r1, [r7, #28]
 801bc04:	6878      	ldr	r0, [r7, #4]
 801bc06:	f7ff fd66 	bl	801b6d6 <get_fat>
 801bc0a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d00e      	beq.n	801bc30 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	2b01      	cmp	r3, #1
 801bc16:	d003      	beq.n	801bc20 <create_chain+0xa6>
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc1e:	d101      	bne.n	801bc24 <create_chain+0xaa>
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	e03e      	b.n	801bca2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bc24:	69fa      	ldr	r2, [r7, #28]
 801bc26:	69bb      	ldr	r3, [r7, #24]
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d1da      	bne.n	801bbe2 <create_chain+0x68>
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	e038      	b.n	801bca2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bc30:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bc32:	f04f 32ff 	mov.w	r2, #4294967295
 801bc36:	69f9      	ldr	r1, [r7, #28]
 801bc38:	6938      	ldr	r0, [r7, #16]
 801bc3a:	f7ff fe1f 	bl	801b87c <put_fat>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bc42:	7dfb      	ldrb	r3, [r7, #23]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d109      	bne.n	801bc5c <create_chain+0xe2>
 801bc48:	683b      	ldr	r3, [r7, #0]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d006      	beq.n	801bc5c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bc4e:	69fa      	ldr	r2, [r7, #28]
 801bc50:	6839      	ldr	r1, [r7, #0]
 801bc52:	6938      	ldr	r0, [r7, #16]
 801bc54:	f7ff fe12 	bl	801b87c <put_fat>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bc5c:	7dfb      	ldrb	r3, [r7, #23]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d116      	bne.n	801bc90 <create_chain+0x116>
		fs->last_clst = ncl;
 801bc62:	693b      	ldr	r3, [r7, #16]
 801bc64:	69fa      	ldr	r2, [r7, #28]
 801bc66:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bc68:	693b      	ldr	r3, [r7, #16]
 801bc6a:	699a      	ldr	r2, [r3, #24]
 801bc6c:	693b      	ldr	r3, [r7, #16]
 801bc6e:	69db      	ldr	r3, [r3, #28]
 801bc70:	3b02      	subs	r3, #2
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d804      	bhi.n	801bc80 <create_chain+0x106>
 801bc76:	693b      	ldr	r3, [r7, #16]
 801bc78:	699b      	ldr	r3, [r3, #24]
 801bc7a:	1e5a      	subs	r2, r3, #1
 801bc7c:	693b      	ldr	r3, [r7, #16]
 801bc7e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bc80:	693b      	ldr	r3, [r7, #16]
 801bc82:	791b      	ldrb	r3, [r3, #4]
 801bc84:	f043 0301 	orr.w	r3, r3, #1
 801bc88:	b2da      	uxtb	r2, r3
 801bc8a:	693b      	ldr	r3, [r7, #16]
 801bc8c:	711a      	strb	r2, [r3, #4]
 801bc8e:	e007      	b.n	801bca0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bc90:	7dfb      	ldrb	r3, [r7, #23]
 801bc92:	2b01      	cmp	r3, #1
 801bc94:	d102      	bne.n	801bc9c <create_chain+0x122>
 801bc96:	f04f 33ff 	mov.w	r3, #4294967295
 801bc9a:	e000      	b.n	801bc9e <create_chain+0x124>
 801bc9c:	2301      	movs	r3, #1
 801bc9e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bca0:	69fb      	ldr	r3, [r7, #28]
}
 801bca2:	4618      	mov	r0, r3
 801bca4:	3720      	adds	r7, #32
 801bca6:	46bd      	mov	sp, r7
 801bca8:	bd80      	pop	{r7, pc}

0801bcaa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bcaa:	b480      	push	{r7}
 801bcac:	b087      	sub	sp, #28
 801bcae:	af00      	add	r7, sp, #0
 801bcb0:	6078      	str	r0, [r7, #4]
 801bcb2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcbe:	3304      	adds	r3, #4
 801bcc0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	899b      	ldrh	r3, [r3, #12]
 801bcc6:	461a      	mov	r2, r3
 801bcc8:	683b      	ldr	r3, [r7, #0]
 801bcca:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcce:	68fa      	ldr	r2, [r7, #12]
 801bcd0:	8952      	ldrh	r2, [r2, #10]
 801bcd2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcd6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bcd8:	693b      	ldr	r3, [r7, #16]
 801bcda:	1d1a      	adds	r2, r3, #4
 801bcdc:	613a      	str	r2, [r7, #16]
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bce2:	68bb      	ldr	r3, [r7, #8]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d101      	bne.n	801bcec <clmt_clust+0x42>
 801bce8:	2300      	movs	r3, #0
 801bcea:	e010      	b.n	801bd0e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bcec:	697a      	ldr	r2, [r7, #20]
 801bcee:	68bb      	ldr	r3, [r7, #8]
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d307      	bcc.n	801bd04 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bcf4:	697a      	ldr	r2, [r7, #20]
 801bcf6:	68bb      	ldr	r3, [r7, #8]
 801bcf8:	1ad3      	subs	r3, r2, r3
 801bcfa:	617b      	str	r3, [r7, #20]
 801bcfc:	693b      	ldr	r3, [r7, #16]
 801bcfe:	3304      	adds	r3, #4
 801bd00:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bd02:	e7e9      	b.n	801bcd8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bd04:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bd06:	693b      	ldr	r3, [r7, #16]
 801bd08:	681a      	ldr	r2, [r3, #0]
 801bd0a:	697b      	ldr	r3, [r7, #20]
 801bd0c:	4413      	add	r3, r2
}
 801bd0e:	4618      	mov	r0, r3
 801bd10:	371c      	adds	r7, #28
 801bd12:	46bd      	mov	sp, r7
 801bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd18:	4770      	bx	lr

0801bd1a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bd1a:	b580      	push	{r7, lr}
 801bd1c:	b086      	sub	sp, #24
 801bd1e:	af00      	add	r7, sp, #0
 801bd20:	6078      	str	r0, [r7, #4]
 801bd22:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bd2a:	683b      	ldr	r3, [r7, #0]
 801bd2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd30:	d204      	bcs.n	801bd3c <dir_sdi+0x22>
 801bd32:	683b      	ldr	r3, [r7, #0]
 801bd34:	f003 031f 	and.w	r3, r3, #31
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d001      	beq.n	801bd40 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bd3c:	2302      	movs	r3, #2
 801bd3e:	e071      	b.n	801be24 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	683a      	ldr	r2, [r7, #0]
 801bd44:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	689b      	ldr	r3, [r3, #8]
 801bd4a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d106      	bne.n	801bd60 <dir_sdi+0x46>
 801bd52:	693b      	ldr	r3, [r7, #16]
 801bd54:	781b      	ldrb	r3, [r3, #0]
 801bd56:	2b02      	cmp	r3, #2
 801bd58:	d902      	bls.n	801bd60 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd5e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d10c      	bne.n	801bd80 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bd66:	683b      	ldr	r3, [r7, #0]
 801bd68:	095b      	lsrs	r3, r3, #5
 801bd6a:	693a      	ldr	r2, [r7, #16]
 801bd6c:	8912      	ldrh	r2, [r2, #8]
 801bd6e:	4293      	cmp	r3, r2
 801bd70:	d301      	bcc.n	801bd76 <dir_sdi+0x5c>
 801bd72:	2302      	movs	r3, #2
 801bd74:	e056      	b.n	801be24 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	61da      	str	r2, [r3, #28]
 801bd7e:	e02d      	b.n	801bddc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	895b      	ldrh	r3, [r3, #10]
 801bd84:	461a      	mov	r2, r3
 801bd86:	693b      	ldr	r3, [r7, #16]
 801bd88:	899b      	ldrh	r3, [r3, #12]
 801bd8a:	fb02 f303 	mul.w	r3, r2, r3
 801bd8e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd90:	e019      	b.n	801bdc6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	6979      	ldr	r1, [r7, #20]
 801bd96:	4618      	mov	r0, r3
 801bd98:	f7ff fc9d 	bl	801b6d6 <get_fat>
 801bd9c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bda4:	d101      	bne.n	801bdaa <dir_sdi+0x90>
 801bda6:	2301      	movs	r3, #1
 801bda8:	e03c      	b.n	801be24 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bdaa:	697b      	ldr	r3, [r7, #20]
 801bdac:	2b01      	cmp	r3, #1
 801bdae:	d904      	bls.n	801bdba <dir_sdi+0xa0>
 801bdb0:	693b      	ldr	r3, [r7, #16]
 801bdb2:	69db      	ldr	r3, [r3, #28]
 801bdb4:	697a      	ldr	r2, [r7, #20]
 801bdb6:	429a      	cmp	r2, r3
 801bdb8:	d301      	bcc.n	801bdbe <dir_sdi+0xa4>
 801bdba:	2302      	movs	r3, #2
 801bdbc:	e032      	b.n	801be24 <dir_sdi+0x10a>
			ofs -= csz;
 801bdbe:	683a      	ldr	r2, [r7, #0]
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	1ad3      	subs	r3, r2, r3
 801bdc4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bdc6:	683a      	ldr	r2, [r7, #0]
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d2e1      	bcs.n	801bd92 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bdce:	6979      	ldr	r1, [r7, #20]
 801bdd0:	6938      	ldr	r0, [r7, #16]
 801bdd2:	f7ff fc61 	bl	801b698 <clust2sect>
 801bdd6:	4602      	mov	r2, r0
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	697a      	ldr	r2, [r7, #20]
 801bde0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	69db      	ldr	r3, [r3, #28]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d101      	bne.n	801bdee <dir_sdi+0xd4>
 801bdea:	2302      	movs	r3, #2
 801bdec:	e01a      	b.n	801be24 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	69da      	ldr	r2, [r3, #28]
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	899b      	ldrh	r3, [r3, #12]
 801bdf6:	4619      	mov	r1, r3
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	fbb3 f3f1 	udiv	r3, r3, r1
 801bdfe:	441a      	add	r2, r3
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801be04:	693b      	ldr	r3, [r7, #16]
 801be06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801be0a:	693b      	ldr	r3, [r7, #16]
 801be0c:	899b      	ldrh	r3, [r3, #12]
 801be0e:	461a      	mov	r2, r3
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	fbb3 f0f2 	udiv	r0, r3, r2
 801be16:	fb00 f202 	mul.w	r2, r0, r2
 801be1a:	1a9b      	subs	r3, r3, r2
 801be1c:	18ca      	adds	r2, r1, r3
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801be22:	2300      	movs	r3, #0
}
 801be24:	4618      	mov	r0, r3
 801be26:	3718      	adds	r7, #24
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}

0801be2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801be2c:	b580      	push	{r7, lr}
 801be2e:	b086      	sub	sp, #24
 801be30:	af00      	add	r7, sp, #0
 801be32:	6078      	str	r0, [r7, #4]
 801be34:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	695b      	ldr	r3, [r3, #20]
 801be40:	3320      	adds	r3, #32
 801be42:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	69db      	ldr	r3, [r3, #28]
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d003      	beq.n	801be54 <dir_next+0x28>
 801be4c:	68bb      	ldr	r3, [r7, #8]
 801be4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801be52:	d301      	bcc.n	801be58 <dir_next+0x2c>
 801be54:	2304      	movs	r3, #4
 801be56:	e0bb      	b.n	801bfd0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	899b      	ldrh	r3, [r3, #12]
 801be5c:	461a      	mov	r2, r3
 801be5e:	68bb      	ldr	r3, [r7, #8]
 801be60:	fbb3 f1f2 	udiv	r1, r3, r2
 801be64:	fb01 f202 	mul.w	r2, r1, r2
 801be68:	1a9b      	subs	r3, r3, r2
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	f040 809d 	bne.w	801bfaa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	69db      	ldr	r3, [r3, #28]
 801be74:	1c5a      	adds	r2, r3, #1
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	699b      	ldr	r3, [r3, #24]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d10b      	bne.n	801be9a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801be82:	68bb      	ldr	r3, [r7, #8]
 801be84:	095b      	lsrs	r3, r3, #5
 801be86:	68fa      	ldr	r2, [r7, #12]
 801be88:	8912      	ldrh	r2, [r2, #8]
 801be8a:	4293      	cmp	r3, r2
 801be8c:	f0c0 808d 	bcc.w	801bfaa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2200      	movs	r2, #0
 801be94:	61da      	str	r2, [r3, #28]
 801be96:	2304      	movs	r3, #4
 801be98:	e09a      	b.n	801bfd0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	899b      	ldrh	r3, [r3, #12]
 801be9e:	461a      	mov	r2, r3
 801bea0:	68bb      	ldr	r3, [r7, #8]
 801bea2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bea6:	68fa      	ldr	r2, [r7, #12]
 801bea8:	8952      	ldrh	r2, [r2, #10]
 801beaa:	3a01      	subs	r2, #1
 801beac:	4013      	ands	r3, r2
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d17b      	bne.n	801bfaa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801beb2:	687a      	ldr	r2, [r7, #4]
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	699b      	ldr	r3, [r3, #24]
 801beb8:	4619      	mov	r1, r3
 801beba:	4610      	mov	r0, r2
 801bebc:	f7ff fc0b 	bl	801b6d6 <get_fat>
 801bec0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801bec2:	697b      	ldr	r3, [r7, #20]
 801bec4:	2b01      	cmp	r3, #1
 801bec6:	d801      	bhi.n	801becc <dir_next+0xa0>
 801bec8:	2302      	movs	r3, #2
 801beca:	e081      	b.n	801bfd0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801becc:	697b      	ldr	r3, [r7, #20]
 801bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bed2:	d101      	bne.n	801bed8 <dir_next+0xac>
 801bed4:	2301      	movs	r3, #1
 801bed6:	e07b      	b.n	801bfd0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	69db      	ldr	r3, [r3, #28]
 801bedc:	697a      	ldr	r2, [r7, #20]
 801bede:	429a      	cmp	r2, r3
 801bee0:	d359      	bcc.n	801bf96 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801bee2:	683b      	ldr	r3, [r7, #0]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d104      	bne.n	801bef2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	2200      	movs	r2, #0
 801beec:	61da      	str	r2, [r3, #28]
 801beee:	2304      	movs	r3, #4
 801bef0:	e06e      	b.n	801bfd0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bef2:	687a      	ldr	r2, [r7, #4]
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	699b      	ldr	r3, [r3, #24]
 801bef8:	4619      	mov	r1, r3
 801befa:	4610      	mov	r0, r2
 801befc:	f7ff fe3d 	bl	801bb7a <create_chain>
 801bf00:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bf02:	697b      	ldr	r3, [r7, #20]
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d101      	bne.n	801bf0c <dir_next+0xe0>
 801bf08:	2307      	movs	r3, #7
 801bf0a:	e061      	b.n	801bfd0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bf0c:	697b      	ldr	r3, [r7, #20]
 801bf0e:	2b01      	cmp	r3, #1
 801bf10:	d101      	bne.n	801bf16 <dir_next+0xea>
 801bf12:	2302      	movs	r3, #2
 801bf14:	e05c      	b.n	801bfd0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bf16:	697b      	ldr	r3, [r7, #20]
 801bf18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf1c:	d101      	bne.n	801bf22 <dir_next+0xf6>
 801bf1e:	2301      	movs	r3, #1
 801bf20:	e056      	b.n	801bfd0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bf22:	68f8      	ldr	r0, [r7, #12]
 801bf24:	f7ff fad6 	bl	801b4d4 <sync_window>
 801bf28:	4603      	mov	r3, r0
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d001      	beq.n	801bf32 <dir_next+0x106>
 801bf2e:	2301      	movs	r3, #1
 801bf30:	e04e      	b.n	801bfd0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	899b      	ldrh	r3, [r3, #12]
 801bf3c:	461a      	mov	r2, r3
 801bf3e:	2100      	movs	r1, #0
 801bf40:	f7ff f8ff 	bl	801b142 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf44:	2300      	movs	r3, #0
 801bf46:	613b      	str	r3, [r7, #16]
 801bf48:	6979      	ldr	r1, [r7, #20]
 801bf4a:	68f8      	ldr	r0, [r7, #12]
 801bf4c:	f7ff fba4 	bl	801b698 <clust2sect>
 801bf50:	4602      	mov	r2, r0
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf56:	e012      	b.n	801bf7e <dir_next+0x152>
						fs->wflag = 1;
 801bf58:	68fb      	ldr	r3, [r7, #12]
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bf5e:	68f8      	ldr	r0, [r7, #12]
 801bf60:	f7ff fab8 	bl	801b4d4 <sync_window>
 801bf64:	4603      	mov	r3, r0
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d001      	beq.n	801bf6e <dir_next+0x142>
 801bf6a:	2301      	movs	r3, #1
 801bf6c:	e030      	b.n	801bfd0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf6e:	693b      	ldr	r3, [r7, #16]
 801bf70:	3301      	adds	r3, #1
 801bf72:	613b      	str	r3, [r7, #16]
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf78:	1c5a      	adds	r2, r3, #1
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	895b      	ldrh	r3, [r3, #10]
 801bf82:	461a      	mov	r2, r3
 801bf84:	693b      	ldr	r3, [r7, #16]
 801bf86:	4293      	cmp	r3, r2
 801bf88:	d3e6      	bcc.n	801bf58 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bf8e:	693b      	ldr	r3, [r7, #16]
 801bf90:	1ad2      	subs	r2, r2, r3
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	697a      	ldr	r2, [r7, #20]
 801bf9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bf9c:	6979      	ldr	r1, [r7, #20]
 801bf9e:	68f8      	ldr	r0, [r7, #12]
 801bfa0:	f7ff fb7a 	bl	801b698 <clust2sect>
 801bfa4:	4602      	mov	r2, r0
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	68ba      	ldr	r2, [r7, #8]
 801bfae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bfb0:	68fb      	ldr	r3, [r7, #12]
 801bfb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	899b      	ldrh	r3, [r3, #12]
 801bfba:	461a      	mov	r2, r3
 801bfbc:	68bb      	ldr	r3, [r7, #8]
 801bfbe:	fbb3 f0f2 	udiv	r0, r3, r2
 801bfc2:	fb00 f202 	mul.w	r2, r0, r2
 801bfc6:	1a9b      	subs	r3, r3, r2
 801bfc8:	18ca      	adds	r2, r1, r3
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bfce:	2300      	movs	r3, #0
}
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	3718      	adds	r7, #24
 801bfd4:	46bd      	mov	sp, r7
 801bfd6:	bd80      	pop	{r7, pc}

0801bfd8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b086      	sub	sp, #24
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
 801bfe0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bfe8:	2100      	movs	r1, #0
 801bfea:	6878      	ldr	r0, [r7, #4]
 801bfec:	f7ff fe95 	bl	801bd1a <dir_sdi>
 801bff0:	4603      	mov	r3, r0
 801bff2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bff4:	7dfb      	ldrb	r3, [r7, #23]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d12b      	bne.n	801c052 <dir_alloc+0x7a>
		n = 0;
 801bffa:	2300      	movs	r3, #0
 801bffc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	69db      	ldr	r3, [r3, #28]
 801c002:	4619      	mov	r1, r3
 801c004:	68f8      	ldr	r0, [r7, #12]
 801c006:	f7ff faa9 	bl	801b55c <move_window>
 801c00a:	4603      	mov	r3, r0
 801c00c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c00e:	7dfb      	ldrb	r3, [r7, #23]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d11d      	bne.n	801c050 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	6a1b      	ldr	r3, [r3, #32]
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	2be5      	cmp	r3, #229	@ 0xe5
 801c01c:	d004      	beq.n	801c028 <dir_alloc+0x50>
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	6a1b      	ldr	r3, [r3, #32]
 801c022:	781b      	ldrb	r3, [r3, #0]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d107      	bne.n	801c038 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c028:	693b      	ldr	r3, [r7, #16]
 801c02a:	3301      	adds	r3, #1
 801c02c:	613b      	str	r3, [r7, #16]
 801c02e:	693a      	ldr	r2, [r7, #16]
 801c030:	683b      	ldr	r3, [r7, #0]
 801c032:	429a      	cmp	r2, r3
 801c034:	d102      	bne.n	801c03c <dir_alloc+0x64>
 801c036:	e00c      	b.n	801c052 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c038:	2300      	movs	r3, #0
 801c03a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c03c:	2101      	movs	r1, #1
 801c03e:	6878      	ldr	r0, [r7, #4]
 801c040:	f7ff fef4 	bl	801be2c <dir_next>
 801c044:	4603      	mov	r3, r0
 801c046:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c048:	7dfb      	ldrb	r3, [r7, #23]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d0d7      	beq.n	801bffe <dir_alloc+0x26>
 801c04e:	e000      	b.n	801c052 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c050:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c052:	7dfb      	ldrb	r3, [r7, #23]
 801c054:	2b04      	cmp	r3, #4
 801c056:	d101      	bne.n	801c05c <dir_alloc+0x84>
 801c058:	2307      	movs	r3, #7
 801c05a:	75fb      	strb	r3, [r7, #23]
	return res;
 801c05c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c05e:	4618      	mov	r0, r3
 801c060:	3718      	adds	r7, #24
 801c062:	46bd      	mov	sp, r7
 801c064:	bd80      	pop	{r7, pc}

0801c066 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c066:	b580      	push	{r7, lr}
 801c068:	b084      	sub	sp, #16
 801c06a:	af00      	add	r7, sp, #0
 801c06c:	6078      	str	r0, [r7, #4]
 801c06e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c070:	683b      	ldr	r3, [r7, #0]
 801c072:	331a      	adds	r3, #26
 801c074:	4618      	mov	r0, r3
 801c076:	f7fe ffc1 	bl	801affc <ld_word>
 801c07a:	4603      	mov	r3, r0
 801c07c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	781b      	ldrb	r3, [r3, #0]
 801c082:	2b03      	cmp	r3, #3
 801c084:	d109      	bne.n	801c09a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	3314      	adds	r3, #20
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7fe ffb6 	bl	801affc <ld_word>
 801c090:	4603      	mov	r3, r0
 801c092:	041b      	lsls	r3, r3, #16
 801c094:	68fa      	ldr	r2, [r7, #12]
 801c096:	4313      	orrs	r3, r2
 801c098:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c09a:	68fb      	ldr	r3, [r7, #12]
}
 801c09c:	4618      	mov	r0, r3
 801c09e:	3710      	adds	r7, #16
 801c0a0:	46bd      	mov	sp, r7
 801c0a2:	bd80      	pop	{r7, pc}

0801c0a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b084      	sub	sp, #16
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	60f8      	str	r0, [r7, #12]
 801c0ac:	60b9      	str	r1, [r7, #8]
 801c0ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	331a      	adds	r3, #26
 801c0b4:	687a      	ldr	r2, [r7, #4]
 801c0b6:	b292      	uxth	r2, r2
 801c0b8:	4611      	mov	r1, r2
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7fe ffd9 	bl	801b072 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	781b      	ldrb	r3, [r3, #0]
 801c0c4:	2b03      	cmp	r3, #3
 801c0c6:	d109      	bne.n	801c0dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c0c8:	68bb      	ldr	r3, [r7, #8]
 801c0ca:	f103 0214 	add.w	r2, r3, #20
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	0c1b      	lsrs	r3, r3, #16
 801c0d2:	b29b      	uxth	r3, r3
 801c0d4:	4619      	mov	r1, r3
 801c0d6:	4610      	mov	r0, r2
 801c0d8:	f7fe ffcb 	bl	801b072 <st_word>
	}
}
 801c0dc:	bf00      	nop
 801c0de:	3710      	adds	r7, #16
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bd80      	pop	{r7, pc}

0801c0e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c0e4:	b590      	push	{r4, r7, lr}
 801c0e6:	b087      	sub	sp, #28
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
 801c0ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	331a      	adds	r3, #26
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f7fe ff82 	bl	801affc <ld_word>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d001      	beq.n	801c102 <cmp_lfn+0x1e>
 801c0fe:	2300      	movs	r3, #0
 801c100:	e059      	b.n	801c1b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c10a:	1e5a      	subs	r2, r3, #1
 801c10c:	4613      	mov	r3, r2
 801c10e:	005b      	lsls	r3, r3, #1
 801c110:	4413      	add	r3, r2
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	4413      	add	r3, r2
 801c116:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c118:	2301      	movs	r3, #1
 801c11a:	81fb      	strh	r3, [r7, #14]
 801c11c:	2300      	movs	r3, #0
 801c11e:	613b      	str	r3, [r7, #16]
 801c120:	e033      	b.n	801c18a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c122:	4a27      	ldr	r2, [pc, #156]	@ (801c1c0 <cmp_lfn+0xdc>)
 801c124:	693b      	ldr	r3, [r7, #16]
 801c126:	4413      	add	r3, r2
 801c128:	781b      	ldrb	r3, [r3, #0]
 801c12a:	461a      	mov	r2, r3
 801c12c:	683b      	ldr	r3, [r7, #0]
 801c12e:	4413      	add	r3, r2
 801c130:	4618      	mov	r0, r3
 801c132:	f7fe ff63 	bl	801affc <ld_word>
 801c136:	4603      	mov	r3, r0
 801c138:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c13a:	89fb      	ldrh	r3, [r7, #14]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d01a      	beq.n	801c176 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c140:	697b      	ldr	r3, [r7, #20]
 801c142:	2bfe      	cmp	r3, #254	@ 0xfe
 801c144:	d812      	bhi.n	801c16c <cmp_lfn+0x88>
 801c146:	89bb      	ldrh	r3, [r7, #12]
 801c148:	4618      	mov	r0, r3
 801c14a:	f001 ff71 	bl	801e030 <ff_wtoupper>
 801c14e:	4603      	mov	r3, r0
 801c150:	461c      	mov	r4, r3
 801c152:	697b      	ldr	r3, [r7, #20]
 801c154:	1c5a      	adds	r2, r3, #1
 801c156:	617a      	str	r2, [r7, #20]
 801c158:	005b      	lsls	r3, r3, #1
 801c15a:	687a      	ldr	r2, [r7, #4]
 801c15c:	4413      	add	r3, r2
 801c15e:	881b      	ldrh	r3, [r3, #0]
 801c160:	4618      	mov	r0, r3
 801c162:	f001 ff65 	bl	801e030 <ff_wtoupper>
 801c166:	4603      	mov	r3, r0
 801c168:	429c      	cmp	r4, r3
 801c16a:	d001      	beq.n	801c170 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c16c:	2300      	movs	r3, #0
 801c16e:	e022      	b.n	801c1b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 801c170:	89bb      	ldrh	r3, [r7, #12]
 801c172:	81fb      	strh	r3, [r7, #14]
 801c174:	e006      	b.n	801c184 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c176:	89bb      	ldrh	r3, [r7, #12]
 801c178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c17c:	4293      	cmp	r3, r2
 801c17e:	d001      	beq.n	801c184 <cmp_lfn+0xa0>
 801c180:	2300      	movs	r3, #0
 801c182:	e018      	b.n	801c1b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c184:	693b      	ldr	r3, [r7, #16]
 801c186:	3301      	adds	r3, #1
 801c188:	613b      	str	r3, [r7, #16]
 801c18a:	693b      	ldr	r3, [r7, #16]
 801c18c:	2b0c      	cmp	r3, #12
 801c18e:	d9c8      	bls.n	801c122 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c190:	683b      	ldr	r3, [r7, #0]
 801c192:	781b      	ldrb	r3, [r3, #0]
 801c194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d00b      	beq.n	801c1b4 <cmp_lfn+0xd0>
 801c19c:	89fb      	ldrh	r3, [r7, #14]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d008      	beq.n	801c1b4 <cmp_lfn+0xd0>
 801c1a2:	697b      	ldr	r3, [r7, #20]
 801c1a4:	005b      	lsls	r3, r3, #1
 801c1a6:	687a      	ldr	r2, [r7, #4]
 801c1a8:	4413      	add	r3, r2
 801c1aa:	881b      	ldrh	r3, [r3, #0]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d001      	beq.n	801c1b4 <cmp_lfn+0xd0>
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	e000      	b.n	801c1b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c1b4:	2301      	movs	r3, #1
}
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	371c      	adds	r7, #28
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd90      	pop	{r4, r7, pc}
 801c1be:	bf00      	nop
 801c1c0:	0801eccc 	.word	0x0801eccc

0801c1c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b086      	sub	sp, #24
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
 801c1cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	331a      	adds	r3, #26
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	f7fe ff12 	bl	801affc <ld_word>
 801c1d8:	4603      	mov	r3, r0
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d001      	beq.n	801c1e2 <pick_lfn+0x1e>
 801c1de:	2300      	movs	r3, #0
 801c1e0:	e04d      	b.n	801c27e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	781b      	ldrb	r3, [r3, #0]
 801c1e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c1ea:	1e5a      	subs	r2, r3, #1
 801c1ec:	4613      	mov	r3, r2
 801c1ee:	005b      	lsls	r3, r3, #1
 801c1f0:	4413      	add	r3, r2
 801c1f2:	009b      	lsls	r3, r3, #2
 801c1f4:	4413      	add	r3, r2
 801c1f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c1f8:	2301      	movs	r3, #1
 801c1fa:	81fb      	strh	r3, [r7, #14]
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	613b      	str	r3, [r7, #16]
 801c200:	e028      	b.n	801c254 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c202:	4a21      	ldr	r2, [pc, #132]	@ (801c288 <pick_lfn+0xc4>)
 801c204:	693b      	ldr	r3, [r7, #16]
 801c206:	4413      	add	r3, r2
 801c208:	781b      	ldrb	r3, [r3, #0]
 801c20a:	461a      	mov	r2, r3
 801c20c:	683b      	ldr	r3, [r7, #0]
 801c20e:	4413      	add	r3, r2
 801c210:	4618      	mov	r0, r3
 801c212:	f7fe fef3 	bl	801affc <ld_word>
 801c216:	4603      	mov	r3, r0
 801c218:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c21a:	89fb      	ldrh	r3, [r7, #14]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d00f      	beq.n	801c240 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c220:	697b      	ldr	r3, [r7, #20]
 801c222:	2bfe      	cmp	r3, #254	@ 0xfe
 801c224:	d901      	bls.n	801c22a <pick_lfn+0x66>
 801c226:	2300      	movs	r3, #0
 801c228:	e029      	b.n	801c27e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c22a:	89bb      	ldrh	r3, [r7, #12]
 801c22c:	81fb      	strh	r3, [r7, #14]
 801c22e:	697b      	ldr	r3, [r7, #20]
 801c230:	1c5a      	adds	r2, r3, #1
 801c232:	617a      	str	r2, [r7, #20]
 801c234:	005b      	lsls	r3, r3, #1
 801c236:	687a      	ldr	r2, [r7, #4]
 801c238:	4413      	add	r3, r2
 801c23a:	89fa      	ldrh	r2, [r7, #14]
 801c23c:	801a      	strh	r2, [r3, #0]
 801c23e:	e006      	b.n	801c24e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c240:	89bb      	ldrh	r3, [r7, #12]
 801c242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c246:	4293      	cmp	r3, r2
 801c248:	d001      	beq.n	801c24e <pick_lfn+0x8a>
 801c24a:	2300      	movs	r3, #0
 801c24c:	e017      	b.n	801c27e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c24e:	693b      	ldr	r3, [r7, #16]
 801c250:	3301      	adds	r3, #1
 801c252:	613b      	str	r3, [r7, #16]
 801c254:	693b      	ldr	r3, [r7, #16]
 801c256:	2b0c      	cmp	r3, #12
 801c258:	d9d3      	bls.n	801c202 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c25a:	683b      	ldr	r3, [r7, #0]
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c262:	2b00      	cmp	r3, #0
 801c264:	d00a      	beq.n	801c27c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c266:	697b      	ldr	r3, [r7, #20]
 801c268:	2bfe      	cmp	r3, #254	@ 0xfe
 801c26a:	d901      	bls.n	801c270 <pick_lfn+0xac>
 801c26c:	2300      	movs	r3, #0
 801c26e:	e006      	b.n	801c27e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c270:	697b      	ldr	r3, [r7, #20]
 801c272:	005b      	lsls	r3, r3, #1
 801c274:	687a      	ldr	r2, [r7, #4]
 801c276:	4413      	add	r3, r2
 801c278:	2200      	movs	r2, #0
 801c27a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c27c:	2301      	movs	r3, #1
}
 801c27e:	4618      	mov	r0, r3
 801c280:	3718      	adds	r7, #24
 801c282:	46bd      	mov	sp, r7
 801c284:	bd80      	pop	{r7, pc}
 801c286:	bf00      	nop
 801c288:	0801eccc 	.word	0x0801eccc

0801c28c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b088      	sub	sp, #32
 801c290:	af00      	add	r7, sp, #0
 801c292:	60f8      	str	r0, [r7, #12]
 801c294:	60b9      	str	r1, [r7, #8]
 801c296:	4611      	mov	r1, r2
 801c298:	461a      	mov	r2, r3
 801c29a:	460b      	mov	r3, r1
 801c29c:	71fb      	strb	r3, [r7, #7]
 801c29e:	4613      	mov	r3, r2
 801c2a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c2a2:	68bb      	ldr	r3, [r7, #8]
 801c2a4:	330d      	adds	r3, #13
 801c2a6:	79ba      	ldrb	r2, [r7, #6]
 801c2a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c2aa:	68bb      	ldr	r3, [r7, #8]
 801c2ac:	330b      	adds	r3, #11
 801c2ae:	220f      	movs	r2, #15
 801c2b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c2b2:	68bb      	ldr	r3, [r7, #8]
 801c2b4:	330c      	adds	r3, #12
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c2ba:	68bb      	ldr	r3, [r7, #8]
 801c2bc:	331a      	adds	r3, #26
 801c2be:	2100      	movs	r1, #0
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	f7fe fed6 	bl	801b072 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c2c6:	79fb      	ldrb	r3, [r7, #7]
 801c2c8:	1e5a      	subs	r2, r3, #1
 801c2ca:	4613      	mov	r3, r2
 801c2cc:	005b      	lsls	r3, r3, #1
 801c2ce:	4413      	add	r3, r2
 801c2d0:	009b      	lsls	r3, r3, #2
 801c2d2:	4413      	add	r3, r2
 801c2d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	82fb      	strh	r3, [r7, #22]
 801c2da:	2300      	movs	r3, #0
 801c2dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c2de:	8afb      	ldrh	r3, [r7, #22]
 801c2e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2e4:	4293      	cmp	r3, r2
 801c2e6:	d007      	beq.n	801c2f8 <put_lfn+0x6c>
 801c2e8:	69fb      	ldr	r3, [r7, #28]
 801c2ea:	1c5a      	adds	r2, r3, #1
 801c2ec:	61fa      	str	r2, [r7, #28]
 801c2ee:	005b      	lsls	r3, r3, #1
 801c2f0:	68fa      	ldr	r2, [r7, #12]
 801c2f2:	4413      	add	r3, r2
 801c2f4:	881b      	ldrh	r3, [r3, #0]
 801c2f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c2f8:	4a17      	ldr	r2, [pc, #92]	@ (801c358 <put_lfn+0xcc>)
 801c2fa:	69bb      	ldr	r3, [r7, #24]
 801c2fc:	4413      	add	r3, r2
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	461a      	mov	r2, r3
 801c302:	68bb      	ldr	r3, [r7, #8]
 801c304:	4413      	add	r3, r2
 801c306:	8afa      	ldrh	r2, [r7, #22]
 801c308:	4611      	mov	r1, r2
 801c30a:	4618      	mov	r0, r3
 801c30c:	f7fe feb1 	bl	801b072 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c310:	8afb      	ldrh	r3, [r7, #22]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d102      	bne.n	801c31c <put_lfn+0x90>
 801c316:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c31a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c31c:	69bb      	ldr	r3, [r7, #24]
 801c31e:	3301      	adds	r3, #1
 801c320:	61bb      	str	r3, [r7, #24]
 801c322:	69bb      	ldr	r3, [r7, #24]
 801c324:	2b0c      	cmp	r3, #12
 801c326:	d9da      	bls.n	801c2de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c328:	8afb      	ldrh	r3, [r7, #22]
 801c32a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c32e:	4293      	cmp	r3, r2
 801c330:	d006      	beq.n	801c340 <put_lfn+0xb4>
 801c332:	69fb      	ldr	r3, [r7, #28]
 801c334:	005b      	lsls	r3, r3, #1
 801c336:	68fa      	ldr	r2, [r7, #12]
 801c338:	4413      	add	r3, r2
 801c33a:	881b      	ldrh	r3, [r3, #0]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d103      	bne.n	801c348 <put_lfn+0xbc>
 801c340:	79fb      	ldrb	r3, [r7, #7]
 801c342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c346:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	79fa      	ldrb	r2, [r7, #7]
 801c34c:	701a      	strb	r2, [r3, #0]
}
 801c34e:	bf00      	nop
 801c350:	3720      	adds	r7, #32
 801c352:	46bd      	mov	sp, r7
 801c354:	bd80      	pop	{r7, pc}
 801c356:	bf00      	nop
 801c358:	0801eccc 	.word	0x0801eccc

0801c35c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b08c      	sub	sp, #48	@ 0x30
 801c360:	af00      	add	r7, sp, #0
 801c362:	60f8      	str	r0, [r7, #12]
 801c364:	60b9      	str	r1, [r7, #8]
 801c366:	607a      	str	r2, [r7, #4]
 801c368:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c36a:	220b      	movs	r2, #11
 801c36c:	68b9      	ldr	r1, [r7, #8]
 801c36e:	68f8      	ldr	r0, [r7, #12]
 801c370:	f7fe fec6 	bl	801b100 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	2b05      	cmp	r3, #5
 801c378:	d929      	bls.n	801c3ce <gen_numname+0x72>
		sr = seq;
 801c37a:	683b      	ldr	r3, [r7, #0]
 801c37c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c37e:	e020      	b.n	801c3c2 <gen_numname+0x66>
			wc = *lfn++;
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	1c9a      	adds	r2, r3, #2
 801c384:	607a      	str	r2, [r7, #4]
 801c386:	881b      	ldrh	r3, [r3, #0]
 801c388:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c38a:	2300      	movs	r3, #0
 801c38c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c38e:	e015      	b.n	801c3bc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c390:	69fb      	ldr	r3, [r7, #28]
 801c392:	005a      	lsls	r2, r3, #1
 801c394:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c396:	f003 0301 	and.w	r3, r3, #1
 801c39a:	4413      	add	r3, r2
 801c39c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c39e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c3a0:	085b      	lsrs	r3, r3, #1
 801c3a2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c3a4:	69fb      	ldr	r3, [r7, #28]
 801c3a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d003      	beq.n	801c3b6 <gen_numname+0x5a>
 801c3ae:	69fa      	ldr	r2, [r7, #28]
 801c3b0:	4b30      	ldr	r3, [pc, #192]	@ (801c474 <gen_numname+0x118>)
 801c3b2:	4053      	eors	r3, r2
 801c3b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3b8:	3301      	adds	r3, #1
 801c3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3be:	2b0f      	cmp	r3, #15
 801c3c0:	d9e6      	bls.n	801c390 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	881b      	ldrh	r3, [r3, #0]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d1da      	bne.n	801c380 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c3ca:	69fb      	ldr	r3, [r7, #28]
 801c3cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c3ce:	2307      	movs	r3, #7
 801c3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c3d2:	683b      	ldr	r3, [r7, #0]
 801c3d4:	b2db      	uxtb	r3, r3
 801c3d6:	f003 030f 	and.w	r3, r3, #15
 801c3da:	b2db      	uxtb	r3, r3
 801c3dc:	3330      	adds	r3, #48	@ 0x30
 801c3de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3e6:	2b39      	cmp	r3, #57	@ 0x39
 801c3e8:	d904      	bls.n	801c3f4 <gen_numname+0x98>
 801c3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3ee:	3307      	adds	r3, #7
 801c3f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3f6:	1e5a      	subs	r2, r3, #1
 801c3f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c3fa:	3330      	adds	r3, #48	@ 0x30
 801c3fc:	443b      	add	r3, r7
 801c3fe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c402:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c406:	683b      	ldr	r3, [r7, #0]
 801c408:	091b      	lsrs	r3, r3, #4
 801c40a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c40c:	683b      	ldr	r3, [r7, #0]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d1df      	bne.n	801c3d2 <gen_numname+0x76>
	ns[i] = '~';
 801c412:	f107 0214 	add.w	r2, r7, #20
 801c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c418:	4413      	add	r3, r2
 801c41a:	227e      	movs	r2, #126	@ 0x7e
 801c41c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c41e:	2300      	movs	r3, #0
 801c420:	627b      	str	r3, [r7, #36]	@ 0x24
 801c422:	e002      	b.n	801c42a <gen_numname+0xce>
 801c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c426:	3301      	adds	r3, #1
 801c428:	627b      	str	r3, [r7, #36]	@ 0x24
 801c42a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42e:	429a      	cmp	r2, r3
 801c430:	d205      	bcs.n	801c43e <gen_numname+0xe2>
 801c432:	68fa      	ldr	r2, [r7, #12]
 801c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c436:	4413      	add	r3, r2
 801c438:	781b      	ldrb	r3, [r3, #0]
 801c43a:	2b20      	cmp	r3, #32
 801c43c:	d1f2      	bne.n	801c424 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c440:	2b07      	cmp	r3, #7
 801c442:	d807      	bhi.n	801c454 <gen_numname+0xf8>
 801c444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c446:	1c5a      	adds	r2, r3, #1
 801c448:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c44a:	3330      	adds	r3, #48	@ 0x30
 801c44c:	443b      	add	r3, r7
 801c44e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c452:	e000      	b.n	801c456 <gen_numname+0xfa>
 801c454:	2120      	movs	r1, #32
 801c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c458:	1c5a      	adds	r2, r3, #1
 801c45a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c45c:	68fa      	ldr	r2, [r7, #12]
 801c45e:	4413      	add	r3, r2
 801c460:	460a      	mov	r2, r1
 801c462:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c466:	2b07      	cmp	r3, #7
 801c468:	d9e9      	bls.n	801c43e <gen_numname+0xe2>
}
 801c46a:	bf00      	nop
 801c46c:	bf00      	nop
 801c46e:	3730      	adds	r7, #48	@ 0x30
 801c470:	46bd      	mov	sp, r7
 801c472:	bd80      	pop	{r7, pc}
 801c474:	00011021 	.word	0x00011021

0801c478 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c478:	b480      	push	{r7}
 801c47a:	b085      	sub	sp, #20
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c480:	2300      	movs	r3, #0
 801c482:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c484:	230b      	movs	r3, #11
 801c486:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c488:	7bfb      	ldrb	r3, [r7, #15]
 801c48a:	b2da      	uxtb	r2, r3
 801c48c:	0852      	lsrs	r2, r2, #1
 801c48e:	01db      	lsls	r3, r3, #7
 801c490:	4313      	orrs	r3, r2
 801c492:	b2da      	uxtb	r2, r3
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	1c59      	adds	r1, r3, #1
 801c498:	6079      	str	r1, [r7, #4]
 801c49a:	781b      	ldrb	r3, [r3, #0]
 801c49c:	4413      	add	r3, r2
 801c49e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	3b01      	subs	r3, #1
 801c4a4:	60bb      	str	r3, [r7, #8]
 801c4a6:	68bb      	ldr	r3, [r7, #8]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d1ed      	bne.n	801c488 <sum_sfn+0x10>
	return sum;
 801c4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	3714      	adds	r7, #20
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b8:	4770      	bx	lr

0801c4ba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c4ba:	b580      	push	{r7, lr}
 801c4bc:	b086      	sub	sp, #24
 801c4be:	af00      	add	r7, sp, #0
 801c4c0:	6078      	str	r0, [r7, #4]
 801c4c2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c4c4:	2304      	movs	r3, #4
 801c4c6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c4ce:	23ff      	movs	r3, #255	@ 0xff
 801c4d0:	757b      	strb	r3, [r7, #21]
 801c4d2:	23ff      	movs	r3, #255	@ 0xff
 801c4d4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c4d6:	e081      	b.n	801c5dc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	69db      	ldr	r3, [r3, #28]
 801c4dc:	4619      	mov	r1, r3
 801c4de:	6938      	ldr	r0, [r7, #16]
 801c4e0:	f7ff f83c 	bl	801b55c <move_window>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c4e8:	7dfb      	ldrb	r3, [r7, #23]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d17c      	bne.n	801c5e8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6a1b      	ldr	r3, [r3, #32]
 801c4f2:	781b      	ldrb	r3, [r3, #0]
 801c4f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c4f6:	7dbb      	ldrb	r3, [r7, #22]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d102      	bne.n	801c502 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c4fc:	2304      	movs	r3, #4
 801c4fe:	75fb      	strb	r3, [r7, #23]
 801c500:	e077      	b.n	801c5f2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	6a1b      	ldr	r3, [r3, #32]
 801c506:	330b      	adds	r3, #11
 801c508:	781b      	ldrb	r3, [r3, #0]
 801c50a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c50e:	73fb      	strb	r3, [r7, #15]
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	7bfa      	ldrb	r2, [r7, #15]
 801c514:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c516:	7dbb      	ldrb	r3, [r7, #22]
 801c518:	2be5      	cmp	r3, #229	@ 0xe5
 801c51a:	d00e      	beq.n	801c53a <dir_read+0x80>
 801c51c:	7dbb      	ldrb	r3, [r7, #22]
 801c51e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c520:	d00b      	beq.n	801c53a <dir_read+0x80>
 801c522:	7bfb      	ldrb	r3, [r7, #15]
 801c524:	f023 0320 	bic.w	r3, r3, #32
 801c528:	2b08      	cmp	r3, #8
 801c52a:	bf0c      	ite	eq
 801c52c:	2301      	moveq	r3, #1
 801c52e:	2300      	movne	r3, #0
 801c530:	b2db      	uxtb	r3, r3
 801c532:	461a      	mov	r2, r3
 801c534:	683b      	ldr	r3, [r7, #0]
 801c536:	4293      	cmp	r3, r2
 801c538:	d002      	beq.n	801c540 <dir_read+0x86>
				ord = 0xFF;
 801c53a:	23ff      	movs	r3, #255	@ 0xff
 801c53c:	757b      	strb	r3, [r7, #21]
 801c53e:	e044      	b.n	801c5ca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c540:	7bfb      	ldrb	r3, [r7, #15]
 801c542:	2b0f      	cmp	r3, #15
 801c544:	d12f      	bne.n	801c5a6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c546:	7dbb      	ldrb	r3, [r7, #22]
 801c548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d00d      	beq.n	801c56c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	6a1b      	ldr	r3, [r3, #32]
 801c554:	7b5b      	ldrb	r3, [r3, #13]
 801c556:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c558:	7dbb      	ldrb	r3, [r7, #22]
 801c55a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c55e:	75bb      	strb	r3, [r7, #22]
 801c560:	7dbb      	ldrb	r3, [r7, #22]
 801c562:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	695a      	ldr	r2, [r3, #20]
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c56c:	7dba      	ldrb	r2, [r7, #22]
 801c56e:	7d7b      	ldrb	r3, [r7, #21]
 801c570:	429a      	cmp	r2, r3
 801c572:	d115      	bne.n	801c5a0 <dir_read+0xe6>
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6a1b      	ldr	r3, [r3, #32]
 801c578:	330d      	adds	r3, #13
 801c57a:	781b      	ldrb	r3, [r3, #0]
 801c57c:	7d3a      	ldrb	r2, [r7, #20]
 801c57e:	429a      	cmp	r2, r3
 801c580:	d10e      	bne.n	801c5a0 <dir_read+0xe6>
 801c582:	693b      	ldr	r3, [r7, #16]
 801c584:	691a      	ldr	r2, [r3, #16]
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	6a1b      	ldr	r3, [r3, #32]
 801c58a:	4619      	mov	r1, r3
 801c58c:	4610      	mov	r0, r2
 801c58e:	f7ff fe19 	bl	801c1c4 <pick_lfn>
 801c592:	4603      	mov	r3, r0
 801c594:	2b00      	cmp	r3, #0
 801c596:	d003      	beq.n	801c5a0 <dir_read+0xe6>
 801c598:	7d7b      	ldrb	r3, [r7, #21]
 801c59a:	3b01      	subs	r3, #1
 801c59c:	b2db      	uxtb	r3, r3
 801c59e:	e000      	b.n	801c5a2 <dir_read+0xe8>
 801c5a0:	23ff      	movs	r3, #255	@ 0xff
 801c5a2:	757b      	strb	r3, [r7, #21]
 801c5a4:	e011      	b.n	801c5ca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c5a6:	7d7b      	ldrb	r3, [r7, #21]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d109      	bne.n	801c5c0 <dir_read+0x106>
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	6a1b      	ldr	r3, [r3, #32]
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	f7ff ff61 	bl	801c478 <sum_sfn>
 801c5b6:	4603      	mov	r3, r0
 801c5b8:	461a      	mov	r2, r3
 801c5ba:	7d3b      	ldrb	r3, [r7, #20]
 801c5bc:	4293      	cmp	r3, r2
 801c5be:	d015      	beq.n	801c5ec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 801c5c6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c5c8:	e010      	b.n	801c5ec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c5ca:	2100      	movs	r1, #0
 801c5cc:	6878      	ldr	r0, [r7, #4]
 801c5ce:	f7ff fc2d 	bl	801be2c <dir_next>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c5d6:	7dfb      	ldrb	r3, [r7, #23]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d109      	bne.n	801c5f0 <dir_read+0x136>
	while (dp->sect) {
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	69db      	ldr	r3, [r3, #28]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	f47f af79 	bne.w	801c4d8 <dir_read+0x1e>
 801c5e6:	e004      	b.n	801c5f2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5e8:	bf00      	nop
 801c5ea:	e002      	b.n	801c5f2 <dir_read+0x138>
					break;
 801c5ec:	bf00      	nop
 801c5ee:	e000      	b.n	801c5f2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5f0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c5f2:	7dfb      	ldrb	r3, [r7, #23]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d002      	beq.n	801c5fe <dir_read+0x144>
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	61da      	str	r2, [r3, #28]
	return res;
 801c5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801c600:	4618      	mov	r0, r3
 801c602:	3718      	adds	r7, #24
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}

0801c608 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b086      	sub	sp, #24
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c616:	2100      	movs	r1, #0
 801c618:	6878      	ldr	r0, [r7, #4]
 801c61a:	f7ff fb7e 	bl	801bd1a <dir_sdi>
 801c61e:	4603      	mov	r3, r0
 801c620:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c622:	7dfb      	ldrb	r3, [r7, #23]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d001      	beq.n	801c62c <dir_find+0x24>
 801c628:	7dfb      	ldrb	r3, [r7, #23]
 801c62a:	e0a9      	b.n	801c780 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c62c:	23ff      	movs	r3, #255	@ 0xff
 801c62e:	753b      	strb	r3, [r7, #20]
 801c630:	7d3b      	ldrb	r3, [r7, #20]
 801c632:	757b      	strb	r3, [r7, #21]
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	f04f 32ff 	mov.w	r2, #4294967295
 801c63a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	69db      	ldr	r3, [r3, #28]
 801c640:	4619      	mov	r1, r3
 801c642:	6938      	ldr	r0, [r7, #16]
 801c644:	f7fe ff8a 	bl	801b55c <move_window>
 801c648:	4603      	mov	r3, r0
 801c64a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c64c:	7dfb      	ldrb	r3, [r7, #23]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	f040 8090 	bne.w	801c774 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	6a1b      	ldr	r3, [r3, #32]
 801c658:	781b      	ldrb	r3, [r3, #0]
 801c65a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c65c:	7dbb      	ldrb	r3, [r7, #22]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d102      	bne.n	801c668 <dir_find+0x60>
 801c662:	2304      	movs	r3, #4
 801c664:	75fb      	strb	r3, [r7, #23]
 801c666:	e08a      	b.n	801c77e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	6a1b      	ldr	r3, [r3, #32]
 801c66c:	330b      	adds	r3, #11
 801c66e:	781b      	ldrb	r3, [r3, #0]
 801c670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c674:	73fb      	strb	r3, [r7, #15]
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	7bfa      	ldrb	r2, [r7, #15]
 801c67a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c67c:	7dbb      	ldrb	r3, [r7, #22]
 801c67e:	2be5      	cmp	r3, #229	@ 0xe5
 801c680:	d007      	beq.n	801c692 <dir_find+0x8a>
 801c682:	7bfb      	ldrb	r3, [r7, #15]
 801c684:	f003 0308 	and.w	r3, r3, #8
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d009      	beq.n	801c6a0 <dir_find+0x98>
 801c68c:	7bfb      	ldrb	r3, [r7, #15]
 801c68e:	2b0f      	cmp	r3, #15
 801c690:	d006      	beq.n	801c6a0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c692:	23ff      	movs	r3, #255	@ 0xff
 801c694:	757b      	strb	r3, [r7, #21]
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	f04f 32ff 	mov.w	r2, #4294967295
 801c69c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c69e:	e05e      	b.n	801c75e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c6a0:	7bfb      	ldrb	r3, [r7, #15]
 801c6a2:	2b0f      	cmp	r3, #15
 801c6a4:	d136      	bne.n	801c714 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d154      	bne.n	801c75e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c6b4:	7dbb      	ldrb	r3, [r7, #22]
 801c6b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d00d      	beq.n	801c6da <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	6a1b      	ldr	r3, [r3, #32]
 801c6c2:	7b5b      	ldrb	r3, [r3, #13]
 801c6c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c6c6:	7dbb      	ldrb	r3, [r7, #22]
 801c6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c6cc:	75bb      	strb	r3, [r7, #22]
 801c6ce:	7dbb      	ldrb	r3, [r7, #22]
 801c6d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	695a      	ldr	r2, [r3, #20]
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c6da:	7dba      	ldrb	r2, [r7, #22]
 801c6dc:	7d7b      	ldrb	r3, [r7, #21]
 801c6de:	429a      	cmp	r2, r3
 801c6e0:	d115      	bne.n	801c70e <dir_find+0x106>
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	6a1b      	ldr	r3, [r3, #32]
 801c6e6:	330d      	adds	r3, #13
 801c6e8:	781b      	ldrb	r3, [r3, #0]
 801c6ea:	7d3a      	ldrb	r2, [r7, #20]
 801c6ec:	429a      	cmp	r2, r3
 801c6ee:	d10e      	bne.n	801c70e <dir_find+0x106>
 801c6f0:	693b      	ldr	r3, [r7, #16]
 801c6f2:	691a      	ldr	r2, [r3, #16]
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	6a1b      	ldr	r3, [r3, #32]
 801c6f8:	4619      	mov	r1, r3
 801c6fa:	4610      	mov	r0, r2
 801c6fc:	f7ff fcf2 	bl	801c0e4 <cmp_lfn>
 801c700:	4603      	mov	r3, r0
 801c702:	2b00      	cmp	r3, #0
 801c704:	d003      	beq.n	801c70e <dir_find+0x106>
 801c706:	7d7b      	ldrb	r3, [r7, #21]
 801c708:	3b01      	subs	r3, #1
 801c70a:	b2db      	uxtb	r3, r3
 801c70c:	e000      	b.n	801c710 <dir_find+0x108>
 801c70e:	23ff      	movs	r3, #255	@ 0xff
 801c710:	757b      	strb	r3, [r7, #21]
 801c712:	e024      	b.n	801c75e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c714:	7d7b      	ldrb	r3, [r7, #21]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d109      	bne.n	801c72e <dir_find+0x126>
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	6a1b      	ldr	r3, [r3, #32]
 801c71e:	4618      	mov	r0, r3
 801c720:	f7ff feaa 	bl	801c478 <sum_sfn>
 801c724:	4603      	mov	r3, r0
 801c726:	461a      	mov	r2, r3
 801c728:	7d3b      	ldrb	r3, [r7, #20]
 801c72a:	4293      	cmp	r3, r2
 801c72c:	d024      	beq.n	801c778 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c734:	f003 0301 	and.w	r3, r3, #1
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d10a      	bne.n	801c752 <dir_find+0x14a>
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	6a18      	ldr	r0, [r3, #32]
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	3324      	adds	r3, #36	@ 0x24
 801c744:	220b      	movs	r2, #11
 801c746:	4619      	mov	r1, r3
 801c748:	f7fe fd16 	bl	801b178 <mem_cmp>
 801c74c:	4603      	mov	r3, r0
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d014      	beq.n	801c77c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c752:	23ff      	movs	r3, #255	@ 0xff
 801c754:	757b      	strb	r3, [r7, #21]
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	f04f 32ff 	mov.w	r2, #4294967295
 801c75c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c75e:	2100      	movs	r1, #0
 801c760:	6878      	ldr	r0, [r7, #4]
 801c762:	f7ff fb63 	bl	801be2c <dir_next>
 801c766:	4603      	mov	r3, r0
 801c768:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c76a:	7dfb      	ldrb	r3, [r7, #23]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	f43f af65 	beq.w	801c63c <dir_find+0x34>
 801c772:	e004      	b.n	801c77e <dir_find+0x176>
		if (res != FR_OK) break;
 801c774:	bf00      	nop
 801c776:	e002      	b.n	801c77e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c778:	bf00      	nop
 801c77a:	e000      	b.n	801c77e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c77c:	bf00      	nop

	return res;
 801c77e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c780:	4618      	mov	r0, r3
 801c782:	3718      	adds	r7, #24
 801c784:	46bd      	mov	sp, r7
 801c786:	bd80      	pop	{r7, pc}

0801c788 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b08c      	sub	sp, #48	@ 0x30
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c79c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d001      	beq.n	801c7a8 <dir_register+0x20>
 801c7a4:	2306      	movs	r3, #6
 801c7a6:	e0e0      	b.n	801c96a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	627b      	str	r3, [r7, #36]	@ 0x24
 801c7ac:	e002      	b.n	801c7b4 <dir_register+0x2c>
 801c7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7b0:	3301      	adds	r3, #1
 801c7b2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c7b4:	69fb      	ldr	r3, [r7, #28]
 801c7b6:	691a      	ldr	r2, [r3, #16]
 801c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7ba:	005b      	lsls	r3, r3, #1
 801c7bc:	4413      	add	r3, r2
 801c7be:	881b      	ldrh	r3, [r3, #0]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d1f4      	bne.n	801c7ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c7ca:	f107 030c 	add.w	r3, r7, #12
 801c7ce:	220c      	movs	r2, #12
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	f7fe fc95 	bl	801b100 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c7d6:	7dfb      	ldrb	r3, [r7, #23]
 801c7d8:	f003 0301 	and.w	r3, r3, #1
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d032      	beq.n	801c846 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	2240      	movs	r2, #64	@ 0x40
 801c7e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c7e8:	2301      	movs	r3, #1
 801c7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7ec:	e016      	b.n	801c81c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c7f4:	69fb      	ldr	r3, [r7, #28]
 801c7f6:	691a      	ldr	r2, [r3, #16]
 801c7f8:	f107 010c 	add.w	r1, r7, #12
 801c7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7fe:	f7ff fdad 	bl	801c35c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c802:	6878      	ldr	r0, [r7, #4]
 801c804:	f7ff ff00 	bl	801c608 <dir_find>
 801c808:	4603      	mov	r3, r0
 801c80a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c80e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c812:	2b00      	cmp	r3, #0
 801c814:	d106      	bne.n	801c824 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c818:	3301      	adds	r3, #1
 801c81a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c81e:	2b63      	cmp	r3, #99	@ 0x63
 801c820:	d9e5      	bls.n	801c7ee <dir_register+0x66>
 801c822:	e000      	b.n	801c826 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c824:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c828:	2b64      	cmp	r3, #100	@ 0x64
 801c82a:	d101      	bne.n	801c830 <dir_register+0xa8>
 801c82c:	2307      	movs	r3, #7
 801c82e:	e09c      	b.n	801c96a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c830:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c834:	2b04      	cmp	r3, #4
 801c836:	d002      	beq.n	801c83e <dir_register+0xb6>
 801c838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c83c:	e095      	b.n	801c96a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c83e:	7dfa      	ldrb	r2, [r7, #23]
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c846:	7dfb      	ldrb	r3, [r7, #23]
 801c848:	f003 0302 	and.w	r3, r3, #2
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d007      	beq.n	801c860 <dir_register+0xd8>
 801c850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c852:	330c      	adds	r3, #12
 801c854:	4a47      	ldr	r2, [pc, #284]	@ (801c974 <dir_register+0x1ec>)
 801c856:	fba2 2303 	umull	r2, r3, r2, r3
 801c85a:	089b      	lsrs	r3, r3, #2
 801c85c:	3301      	adds	r3, #1
 801c85e:	e000      	b.n	801c862 <dir_register+0xda>
 801c860:	2301      	movs	r3, #1
 801c862:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c864:	6a39      	ldr	r1, [r7, #32]
 801c866:	6878      	ldr	r0, [r7, #4]
 801c868:	f7ff fbb6 	bl	801bfd8 <dir_alloc>
 801c86c:	4603      	mov	r3, r0
 801c86e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c872:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c876:	2b00      	cmp	r3, #0
 801c878:	d148      	bne.n	801c90c <dir_register+0x184>
 801c87a:	6a3b      	ldr	r3, [r7, #32]
 801c87c:	3b01      	subs	r3, #1
 801c87e:	623b      	str	r3, [r7, #32]
 801c880:	6a3b      	ldr	r3, [r7, #32]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d042      	beq.n	801c90c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	695a      	ldr	r2, [r3, #20]
 801c88a:	6a3b      	ldr	r3, [r7, #32]
 801c88c:	015b      	lsls	r3, r3, #5
 801c88e:	1ad3      	subs	r3, r2, r3
 801c890:	4619      	mov	r1, r3
 801c892:	6878      	ldr	r0, [r7, #4]
 801c894:	f7ff fa41 	bl	801bd1a <dir_sdi>
 801c898:	4603      	mov	r3, r0
 801c89a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c89e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d132      	bne.n	801c90c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	3324      	adds	r3, #36	@ 0x24
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7ff fde4 	bl	801c478 <sum_sfn>
 801c8b0:	4603      	mov	r3, r0
 801c8b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	69db      	ldr	r3, [r3, #28]
 801c8b8:	4619      	mov	r1, r3
 801c8ba:	69f8      	ldr	r0, [r7, #28]
 801c8bc:	f7fe fe4e 	bl	801b55c <move_window>
 801c8c0:	4603      	mov	r3, r0
 801c8c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d11d      	bne.n	801c90a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c8ce:	69fb      	ldr	r3, [r7, #28]
 801c8d0:	6918      	ldr	r0, [r3, #16]
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	6a19      	ldr	r1, [r3, #32]
 801c8d6:	6a3b      	ldr	r3, [r7, #32]
 801c8d8:	b2da      	uxtb	r2, r3
 801c8da:	7efb      	ldrb	r3, [r7, #27]
 801c8dc:	f7ff fcd6 	bl	801c28c <put_lfn>
				fs->wflag = 1;
 801c8e0:	69fb      	ldr	r3, [r7, #28]
 801c8e2:	2201      	movs	r2, #1
 801c8e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c8e6:	2100      	movs	r1, #0
 801c8e8:	6878      	ldr	r0, [r7, #4]
 801c8ea:	f7ff fa9f 	bl	801be2c <dir_next>
 801c8ee:	4603      	mov	r3, r0
 801c8f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d107      	bne.n	801c90c <dir_register+0x184>
 801c8fc:	6a3b      	ldr	r3, [r7, #32]
 801c8fe:	3b01      	subs	r3, #1
 801c900:	623b      	str	r3, [r7, #32]
 801c902:	6a3b      	ldr	r3, [r7, #32]
 801c904:	2b00      	cmp	r3, #0
 801c906:	d1d5      	bne.n	801c8b4 <dir_register+0x12c>
 801c908:	e000      	b.n	801c90c <dir_register+0x184>
				if (res != FR_OK) break;
 801c90a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c90c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c910:	2b00      	cmp	r3, #0
 801c912:	d128      	bne.n	801c966 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	69db      	ldr	r3, [r3, #28]
 801c918:	4619      	mov	r1, r3
 801c91a:	69f8      	ldr	r0, [r7, #28]
 801c91c:	f7fe fe1e 	bl	801b55c <move_window>
 801c920:	4603      	mov	r3, r0
 801c922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d11b      	bne.n	801c966 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	6a1b      	ldr	r3, [r3, #32]
 801c932:	2220      	movs	r2, #32
 801c934:	2100      	movs	r1, #0
 801c936:	4618      	mov	r0, r3
 801c938:	f7fe fc03 	bl	801b142 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	6a18      	ldr	r0, [r3, #32]
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	3324      	adds	r3, #36	@ 0x24
 801c944:	220b      	movs	r2, #11
 801c946:	4619      	mov	r1, r3
 801c948:	f7fe fbda 	bl	801b100 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	6a1b      	ldr	r3, [r3, #32]
 801c956:	330c      	adds	r3, #12
 801c958:	f002 0218 	and.w	r2, r2, #24
 801c95c:	b2d2      	uxtb	r2, r2
 801c95e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c960:	69fb      	ldr	r3, [r7, #28]
 801c962:	2201      	movs	r2, #1
 801c964:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c96a:	4618      	mov	r0, r3
 801c96c:	3730      	adds	r7, #48	@ 0x30
 801c96e:	46bd      	mov	sp, r7
 801c970:	bd80      	pop	{r7, pc}
 801c972:	bf00      	nop
 801c974:	4ec4ec4f 	.word	0x4ec4ec4f

0801c978 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b086      	sub	sp, #24
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	695b      	ldr	r3, [r3, #20]
 801c98a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c990:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c994:	d007      	beq.n	801c9a6 <dir_remove+0x2e>
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c99a:	4619      	mov	r1, r3
 801c99c:	6878      	ldr	r0, [r7, #4]
 801c99e:	f7ff f9bc 	bl	801bd1a <dir_sdi>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	e000      	b.n	801c9a8 <dir_remove+0x30>
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c9aa:	7dfb      	ldrb	r3, [r7, #23]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d128      	bne.n	801ca02 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	69db      	ldr	r3, [r3, #28]
 801c9b4:	4619      	mov	r1, r3
 801c9b6:	6938      	ldr	r0, [r7, #16]
 801c9b8:	f7fe fdd0 	bl	801b55c <move_window>
 801c9bc:	4603      	mov	r3, r0
 801c9be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c9c0:	7dfb      	ldrb	r3, [r7, #23]
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d115      	bne.n	801c9f2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	6a1b      	ldr	r3, [r3, #32]
 801c9ca:	22e5      	movs	r2, #229	@ 0xe5
 801c9cc:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c9ce:	693b      	ldr	r3, [r7, #16]
 801c9d0:	2201      	movs	r2, #1
 801c9d2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	695b      	ldr	r3, [r3, #20]
 801c9d8:	68fa      	ldr	r2, [r7, #12]
 801c9da:	429a      	cmp	r2, r3
 801c9dc:	d90b      	bls.n	801c9f6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c9de:	2100      	movs	r1, #0
 801c9e0:	6878      	ldr	r0, [r7, #4]
 801c9e2:	f7ff fa23 	bl	801be2c <dir_next>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c9ea:	7dfb      	ldrb	r3, [r7, #23]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d0df      	beq.n	801c9b0 <dir_remove+0x38>
 801c9f0:	e002      	b.n	801c9f8 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c9f2:	bf00      	nop
 801c9f4:	e000      	b.n	801c9f8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9f6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c9f8:	7dfb      	ldrb	r3, [r7, #23]
 801c9fa:	2b04      	cmp	r3, #4
 801c9fc:	d101      	bne.n	801ca02 <dir_remove+0x8a>
 801c9fe:	2302      	movs	r3, #2
 801ca00:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801ca02:	7dfb      	ldrb	r3, [r7, #23]
}
 801ca04:	4618      	mov	r0, r3
 801ca06:	3718      	adds	r7, #24
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	bd80      	pop	{r7, pc}

0801ca0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801ca0c:	b580      	push	{r7, lr}
 801ca0e:	b08a      	sub	sp, #40	@ 0x28
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
 801ca14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	613b      	str	r3, [r7, #16]
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	691b      	ldr	r3, [r3, #16]
 801ca22:	60fb      	str	r3, [r7, #12]
 801ca24:	2300      	movs	r3, #0
 801ca26:	617b      	str	r3, [r7, #20]
 801ca28:	697b      	ldr	r3, [r7, #20]
 801ca2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801ca2c:	69bb      	ldr	r3, [r7, #24]
 801ca2e:	1c5a      	adds	r2, r3, #1
 801ca30:	61ba      	str	r2, [r7, #24]
 801ca32:	693a      	ldr	r2, [r7, #16]
 801ca34:	4413      	add	r3, r2
 801ca36:	781b      	ldrb	r3, [r3, #0]
 801ca38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ca3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca3c:	2b1f      	cmp	r3, #31
 801ca3e:	d940      	bls.n	801cac2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ca40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca42:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca44:	d006      	beq.n	801ca54 <create_name+0x48>
 801ca46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca48:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca4a:	d110      	bne.n	801ca6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ca4c:	e002      	b.n	801ca54 <create_name+0x48>
 801ca4e:	69bb      	ldr	r3, [r7, #24]
 801ca50:	3301      	adds	r3, #1
 801ca52:	61bb      	str	r3, [r7, #24]
 801ca54:	693a      	ldr	r2, [r7, #16]
 801ca56:	69bb      	ldr	r3, [r7, #24]
 801ca58:	4413      	add	r3, r2
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca5e:	d0f6      	beq.n	801ca4e <create_name+0x42>
 801ca60:	693a      	ldr	r2, [r7, #16]
 801ca62:	69bb      	ldr	r3, [r7, #24]
 801ca64:	4413      	add	r3, r2
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca6a:	d0f0      	beq.n	801ca4e <create_name+0x42>
			break;
 801ca6c:	e02a      	b.n	801cac4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ca6e:	697b      	ldr	r3, [r7, #20]
 801ca70:	2bfe      	cmp	r3, #254	@ 0xfe
 801ca72:	d901      	bls.n	801ca78 <create_name+0x6c>
 801ca74:	2306      	movs	r3, #6
 801ca76:	e17d      	b.n	801cd74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ca78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca7a:	b2db      	uxtb	r3, r3
 801ca7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ca7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca80:	2101      	movs	r1, #1
 801ca82:	4618      	mov	r0, r3
 801ca84:	f001 fa98 	bl	801dfb8 <ff_convert>
 801ca88:	4603      	mov	r3, r0
 801ca8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ca8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d101      	bne.n	801ca96 <create_name+0x8a>
 801ca92:	2306      	movs	r3, #6
 801ca94:	e16e      	b.n	801cd74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ca96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca98:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca9a:	d809      	bhi.n	801cab0 <create_name+0xa4>
 801ca9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca9e:	4619      	mov	r1, r3
 801caa0:	488d      	ldr	r0, [pc, #564]	@ (801ccd8 <create_name+0x2cc>)
 801caa2:	f7fe fb90 	bl	801b1c6 <chk_chr>
 801caa6:	4603      	mov	r3, r0
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d001      	beq.n	801cab0 <create_name+0xa4>
 801caac:	2306      	movs	r3, #6
 801caae:	e161      	b.n	801cd74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801cab0:	697b      	ldr	r3, [r7, #20]
 801cab2:	1c5a      	adds	r2, r3, #1
 801cab4:	617a      	str	r2, [r7, #20]
 801cab6:	005b      	lsls	r3, r3, #1
 801cab8:	68fa      	ldr	r2, [r7, #12]
 801caba:	4413      	add	r3, r2
 801cabc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cabe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801cac0:	e7b4      	b.n	801ca2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801cac2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801cac4:	693a      	ldr	r2, [r7, #16]
 801cac6:	69bb      	ldr	r3, [r7, #24]
 801cac8:	441a      	add	r2, r3
 801caca:	683b      	ldr	r3, [r7, #0]
 801cacc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801cace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cad0:	2b1f      	cmp	r3, #31
 801cad2:	d801      	bhi.n	801cad8 <create_name+0xcc>
 801cad4:	2304      	movs	r3, #4
 801cad6:	e000      	b.n	801cada <create_name+0xce>
 801cad8:	2300      	movs	r3, #0
 801cada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cade:	e011      	b.n	801cb04 <create_name+0xf8>
		w = lfn[di - 1];
 801cae0:	697a      	ldr	r2, [r7, #20]
 801cae2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cae6:	4413      	add	r3, r2
 801cae8:	005b      	lsls	r3, r3, #1
 801caea:	68fa      	ldr	r2, [r7, #12]
 801caec:	4413      	add	r3, r2
 801caee:	881b      	ldrh	r3, [r3, #0]
 801caf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801caf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801caf4:	2b20      	cmp	r3, #32
 801caf6:	d002      	beq.n	801cafe <create_name+0xf2>
 801caf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cafa:	2b2e      	cmp	r3, #46	@ 0x2e
 801cafc:	d106      	bne.n	801cb0c <create_name+0x100>
		di--;
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	3b01      	subs	r3, #1
 801cb02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cb04:	697b      	ldr	r3, [r7, #20]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d1ea      	bne.n	801cae0 <create_name+0xd4>
 801cb0a:	e000      	b.n	801cb0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801cb0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801cb0e:	697b      	ldr	r3, [r7, #20]
 801cb10:	005b      	lsls	r3, r3, #1
 801cb12:	68fa      	ldr	r2, [r7, #12]
 801cb14:	4413      	add	r3, r2
 801cb16:	2200      	movs	r2, #0
 801cb18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801cb1a:	697b      	ldr	r3, [r7, #20]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d101      	bne.n	801cb24 <create_name+0x118>
 801cb20:	2306      	movs	r3, #6
 801cb22:	e127      	b.n	801cd74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	3324      	adds	r3, #36	@ 0x24
 801cb28:	220b      	movs	r2, #11
 801cb2a:	2120      	movs	r1, #32
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	f7fe fb08 	bl	801b142 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801cb32:	2300      	movs	r3, #0
 801cb34:	61bb      	str	r3, [r7, #24]
 801cb36:	e002      	b.n	801cb3e <create_name+0x132>
 801cb38:	69bb      	ldr	r3, [r7, #24]
 801cb3a:	3301      	adds	r3, #1
 801cb3c:	61bb      	str	r3, [r7, #24]
 801cb3e:	69bb      	ldr	r3, [r7, #24]
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	68fa      	ldr	r2, [r7, #12]
 801cb44:	4413      	add	r3, r2
 801cb46:	881b      	ldrh	r3, [r3, #0]
 801cb48:	2b20      	cmp	r3, #32
 801cb4a:	d0f5      	beq.n	801cb38 <create_name+0x12c>
 801cb4c:	69bb      	ldr	r3, [r7, #24]
 801cb4e:	005b      	lsls	r3, r3, #1
 801cb50:	68fa      	ldr	r2, [r7, #12]
 801cb52:	4413      	add	r3, r2
 801cb54:	881b      	ldrh	r3, [r3, #0]
 801cb56:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb58:	d0ee      	beq.n	801cb38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801cb5a:	69bb      	ldr	r3, [r7, #24]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d009      	beq.n	801cb74 <create_name+0x168>
 801cb60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb64:	f043 0303 	orr.w	r3, r3, #3
 801cb68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cb6c:	e002      	b.n	801cb74 <create_name+0x168>
 801cb6e:	697b      	ldr	r3, [r7, #20]
 801cb70:	3b01      	subs	r3, #1
 801cb72:	617b      	str	r3, [r7, #20]
 801cb74:	697b      	ldr	r3, [r7, #20]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d009      	beq.n	801cb8e <create_name+0x182>
 801cb7a:	697a      	ldr	r2, [r7, #20]
 801cb7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cb80:	4413      	add	r3, r2
 801cb82:	005b      	lsls	r3, r3, #1
 801cb84:	68fa      	ldr	r2, [r7, #12]
 801cb86:	4413      	add	r3, r2
 801cb88:	881b      	ldrh	r3, [r3, #0]
 801cb8a:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb8c:	d1ef      	bne.n	801cb6e <create_name+0x162>

	i = b = 0; ni = 8;
 801cb8e:	2300      	movs	r3, #0
 801cb90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb94:	2300      	movs	r3, #0
 801cb96:	623b      	str	r3, [r7, #32]
 801cb98:	2308      	movs	r3, #8
 801cb9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cb9c:	69bb      	ldr	r3, [r7, #24]
 801cb9e:	1c5a      	adds	r2, r3, #1
 801cba0:	61ba      	str	r2, [r7, #24]
 801cba2:	005b      	lsls	r3, r3, #1
 801cba4:	68fa      	ldr	r2, [r7, #12]
 801cba6:	4413      	add	r3, r2
 801cba8:	881b      	ldrh	r3, [r3, #0]
 801cbaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cbac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	f000 8090 	beq.w	801ccd4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cbb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbb6:	2b20      	cmp	r3, #32
 801cbb8:	d006      	beq.n	801cbc8 <create_name+0x1bc>
 801cbba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbbc:	2b2e      	cmp	r3, #46	@ 0x2e
 801cbbe:	d10a      	bne.n	801cbd6 <create_name+0x1ca>
 801cbc0:	69ba      	ldr	r2, [r7, #24]
 801cbc2:	697b      	ldr	r3, [r7, #20]
 801cbc4:	429a      	cmp	r2, r3
 801cbc6:	d006      	beq.n	801cbd6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbcc:	f043 0303 	orr.w	r3, r3, #3
 801cbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbd4:	e07d      	b.n	801ccd2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cbd6:	6a3a      	ldr	r2, [r7, #32]
 801cbd8:	69fb      	ldr	r3, [r7, #28]
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d203      	bcs.n	801cbe6 <create_name+0x1da>
 801cbde:	69ba      	ldr	r2, [r7, #24]
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	429a      	cmp	r2, r3
 801cbe4:	d123      	bne.n	801cc2e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cbe6:	69fb      	ldr	r3, [r7, #28]
 801cbe8:	2b0b      	cmp	r3, #11
 801cbea:	d106      	bne.n	801cbfa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cbec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbf0:	f043 0303 	orr.w	r3, r3, #3
 801cbf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbf8:	e075      	b.n	801cce6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cbfa:	69ba      	ldr	r2, [r7, #24]
 801cbfc:	697b      	ldr	r3, [r7, #20]
 801cbfe:	429a      	cmp	r2, r3
 801cc00:	d005      	beq.n	801cc0e <create_name+0x202>
 801cc02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc06:	f043 0303 	orr.w	r3, r3, #3
 801cc0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cc0e:	69ba      	ldr	r2, [r7, #24]
 801cc10:	697b      	ldr	r3, [r7, #20]
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d866      	bhi.n	801cce4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cc16:	697b      	ldr	r3, [r7, #20]
 801cc18:	61bb      	str	r3, [r7, #24]
 801cc1a:	2308      	movs	r3, #8
 801cc1c:	623b      	str	r3, [r7, #32]
 801cc1e:	230b      	movs	r3, #11
 801cc20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cc22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc26:	009b      	lsls	r3, r3, #2
 801cc28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc2c:	e051      	b.n	801ccd2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cc2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc30:	2b7f      	cmp	r3, #127	@ 0x7f
 801cc32:	d914      	bls.n	801cc5e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cc34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc36:	2100      	movs	r1, #0
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f001 f9bd 	bl	801dfb8 <ff_convert>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cc42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d004      	beq.n	801cc52 <create_name+0x246>
 801cc48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc4a:	3b80      	subs	r3, #128	@ 0x80
 801cc4c:	4a23      	ldr	r2, [pc, #140]	@ (801ccdc <create_name+0x2d0>)
 801cc4e:	5cd3      	ldrb	r3, [r2, r3]
 801cc50:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cc52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc56:	f043 0302 	orr.w	r3, r3, #2
 801cc5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cc5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d007      	beq.n	801cc74 <create_name+0x268>
 801cc64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc66:	4619      	mov	r1, r3
 801cc68:	481d      	ldr	r0, [pc, #116]	@ (801cce0 <create_name+0x2d4>)
 801cc6a:	f7fe faac 	bl	801b1c6 <chk_chr>
 801cc6e:	4603      	mov	r3, r0
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d008      	beq.n	801cc86 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cc74:	235f      	movs	r3, #95	@ 0x5f
 801cc76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cc78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc7c:	f043 0303 	orr.w	r3, r3, #3
 801cc80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cc84:	e01b      	b.n	801ccbe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cc86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc88:	2b40      	cmp	r3, #64	@ 0x40
 801cc8a:	d909      	bls.n	801cca0 <create_name+0x294>
 801cc8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc8e:	2b5a      	cmp	r3, #90	@ 0x5a
 801cc90:	d806      	bhi.n	801cca0 <create_name+0x294>
					b |= 2;
 801cc92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc96:	f043 0302 	orr.w	r3, r3, #2
 801cc9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc9e:	e00e      	b.n	801ccbe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cca2:	2b60      	cmp	r3, #96	@ 0x60
 801cca4:	d90b      	bls.n	801ccbe <create_name+0x2b2>
 801cca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cca8:	2b7a      	cmp	r3, #122	@ 0x7a
 801ccaa:	d808      	bhi.n	801ccbe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ccac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccb0:	f043 0301 	orr.w	r3, r3, #1
 801ccb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ccb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ccba:	3b20      	subs	r3, #32
 801ccbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801ccbe:	6a3b      	ldr	r3, [r7, #32]
 801ccc0:	1c5a      	adds	r2, r3, #1
 801ccc2:	623a      	str	r2, [r7, #32]
 801ccc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ccc6:	b2d1      	uxtb	r1, r2
 801ccc8:	687a      	ldr	r2, [r7, #4]
 801ccca:	4413      	add	r3, r2
 801cccc:	460a      	mov	r2, r1
 801ccce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ccd2:	e763      	b.n	801cb9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ccd4:	bf00      	nop
 801ccd6:	e006      	b.n	801cce6 <create_name+0x2da>
 801ccd8:	0801ebb4 	.word	0x0801ebb4
 801ccdc:	0801ec4c 	.word	0x0801ec4c
 801cce0:	0801ebc0 	.word	0x0801ebc0
			if (si > di) break;			/* No extension */
 801cce4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ccec:	2be5      	cmp	r3, #229	@ 0xe5
 801ccee:	d103      	bne.n	801ccf8 <create_name+0x2ec>
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	2205      	movs	r2, #5
 801ccf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ccf8:	69fb      	ldr	r3, [r7, #28]
 801ccfa:	2b08      	cmp	r3, #8
 801ccfc:	d104      	bne.n	801cd08 <create_name+0x2fc>
 801ccfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd02:	009b      	lsls	r3, r3, #2
 801cd04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801cd08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd0c:	f003 030c 	and.w	r3, r3, #12
 801cd10:	2b0c      	cmp	r3, #12
 801cd12:	d005      	beq.n	801cd20 <create_name+0x314>
 801cd14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd18:	f003 0303 	and.w	r3, r3, #3
 801cd1c:	2b03      	cmp	r3, #3
 801cd1e:	d105      	bne.n	801cd2c <create_name+0x320>
 801cd20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd24:	f043 0302 	orr.w	r3, r3, #2
 801cd28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd30:	f003 0302 	and.w	r3, r3, #2
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d117      	bne.n	801cd68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cd38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd3c:	f003 0303 	and.w	r3, r3, #3
 801cd40:	2b01      	cmp	r3, #1
 801cd42:	d105      	bne.n	801cd50 <create_name+0x344>
 801cd44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd48:	f043 0310 	orr.w	r3, r3, #16
 801cd4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cd50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd54:	f003 030c 	and.w	r3, r3, #12
 801cd58:	2b04      	cmp	r3, #4
 801cd5a:	d105      	bne.n	801cd68 <create_name+0x35c>
 801cd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd60:	f043 0308 	orr.w	r3, r3, #8
 801cd64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cd6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801cd72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801cd74:	4618      	mov	r0, r3
 801cd76:	3728      	adds	r7, #40	@ 0x28
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}

0801cd7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cd7c:	b580      	push	{r7, lr}
 801cd7e:	b086      	sub	sp, #24
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	6078      	str	r0, [r7, #4]
 801cd84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801cd8a:	693b      	ldr	r3, [r7, #16]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cd90:	e002      	b.n	801cd98 <follow_path+0x1c>
 801cd92:	683b      	ldr	r3, [r7, #0]
 801cd94:	3301      	adds	r3, #1
 801cd96:	603b      	str	r3, [r7, #0]
 801cd98:	683b      	ldr	r3, [r7, #0]
 801cd9a:	781b      	ldrb	r3, [r3, #0]
 801cd9c:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd9e:	d0f8      	beq.n	801cd92 <follow_path+0x16>
 801cda0:	683b      	ldr	r3, [r7, #0]
 801cda2:	781b      	ldrb	r3, [r3, #0]
 801cda4:	2b5c      	cmp	r3, #92	@ 0x5c
 801cda6:	d0f4      	beq.n	801cd92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cda8:	693b      	ldr	r3, [r7, #16]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	781b      	ldrb	r3, [r3, #0]
 801cdb2:	2b1f      	cmp	r3, #31
 801cdb4:	d80a      	bhi.n	801cdcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2280      	movs	r2, #128	@ 0x80
 801cdba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cdbe:	2100      	movs	r1, #0
 801cdc0:	6878      	ldr	r0, [r7, #4]
 801cdc2:	f7fe ffaa 	bl	801bd1a <dir_sdi>
 801cdc6:	4603      	mov	r3, r0
 801cdc8:	75fb      	strb	r3, [r7, #23]
 801cdca:	e048      	b.n	801ce5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cdcc:	463b      	mov	r3, r7
 801cdce:	4619      	mov	r1, r3
 801cdd0:	6878      	ldr	r0, [r7, #4]
 801cdd2:	f7ff fe1b 	bl	801ca0c <create_name>
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cdda:	7dfb      	ldrb	r3, [r7, #23]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d139      	bne.n	801ce54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cde0:	6878      	ldr	r0, [r7, #4]
 801cde2:	f7ff fc11 	bl	801c608 <dir_find>
 801cde6:	4603      	mov	r3, r0
 801cde8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cdf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cdf2:	7dfb      	ldrb	r3, [r7, #23]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d00a      	beq.n	801ce0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cdf8:	7dfb      	ldrb	r3, [r7, #23]
 801cdfa:	2b04      	cmp	r3, #4
 801cdfc:	d12c      	bne.n	801ce58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cdfe:	7afb      	ldrb	r3, [r7, #11]
 801ce00:	f003 0304 	and.w	r3, r3, #4
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d127      	bne.n	801ce58 <follow_path+0xdc>
 801ce08:	2305      	movs	r3, #5
 801ce0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801ce0c:	e024      	b.n	801ce58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ce0e:	7afb      	ldrb	r3, [r7, #11]
 801ce10:	f003 0304 	and.w	r3, r3, #4
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d121      	bne.n	801ce5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ce18:	693b      	ldr	r3, [r7, #16]
 801ce1a:	799b      	ldrb	r3, [r3, #6]
 801ce1c:	f003 0310 	and.w	r3, r3, #16
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d102      	bne.n	801ce2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ce24:	2305      	movs	r3, #5
 801ce26:	75fb      	strb	r3, [r7, #23]
 801ce28:	e019      	b.n	801ce5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	695b      	ldr	r3, [r3, #20]
 801ce34:	68fa      	ldr	r2, [r7, #12]
 801ce36:	8992      	ldrh	r2, [r2, #12]
 801ce38:	fbb3 f0f2 	udiv	r0, r3, r2
 801ce3c:	fb00 f202 	mul.w	r2, r0, r2
 801ce40:	1a9b      	subs	r3, r3, r2
 801ce42:	440b      	add	r3, r1
 801ce44:	4619      	mov	r1, r3
 801ce46:	68f8      	ldr	r0, [r7, #12]
 801ce48:	f7ff f90d 	bl	801c066 <ld_clust>
 801ce4c:	4602      	mov	r2, r0
 801ce4e:	693b      	ldr	r3, [r7, #16]
 801ce50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ce52:	e7bb      	b.n	801cdcc <follow_path+0x50>
			if (res != FR_OK) break;
 801ce54:	bf00      	nop
 801ce56:	e002      	b.n	801ce5e <follow_path+0xe2>
				break;
 801ce58:	bf00      	nop
 801ce5a:	e000      	b.n	801ce5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ce5c:	bf00      	nop
			}
		}
	}

	return res;
 801ce5e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce60:	4618      	mov	r0, r3
 801ce62:	3718      	adds	r7, #24
 801ce64:	46bd      	mov	sp, r7
 801ce66:	bd80      	pop	{r7, pc}

0801ce68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ce68:	b480      	push	{r7}
 801ce6a:	b087      	sub	sp, #28
 801ce6c:	af00      	add	r7, sp, #0
 801ce6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ce70:	f04f 33ff 	mov.w	r3, #4294967295
 801ce74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d031      	beq.n	801cee2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	617b      	str	r3, [r7, #20]
 801ce84:	e002      	b.n	801ce8c <get_ldnumber+0x24>
 801ce86:	697b      	ldr	r3, [r7, #20]
 801ce88:	3301      	adds	r3, #1
 801ce8a:	617b      	str	r3, [r7, #20]
 801ce8c:	697b      	ldr	r3, [r7, #20]
 801ce8e:	781b      	ldrb	r3, [r3, #0]
 801ce90:	2b1f      	cmp	r3, #31
 801ce92:	d903      	bls.n	801ce9c <get_ldnumber+0x34>
 801ce94:	697b      	ldr	r3, [r7, #20]
 801ce96:	781b      	ldrb	r3, [r3, #0]
 801ce98:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce9a:	d1f4      	bne.n	801ce86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ce9c:	697b      	ldr	r3, [r7, #20]
 801ce9e:	781b      	ldrb	r3, [r3, #0]
 801cea0:	2b3a      	cmp	r3, #58	@ 0x3a
 801cea2:	d11c      	bne.n	801cede <get_ldnumber+0x76>
			tp = *path;
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	1c5a      	adds	r2, r3, #1
 801ceae:	60fa      	str	r2, [r7, #12]
 801ceb0:	781b      	ldrb	r3, [r3, #0]
 801ceb2:	3b30      	subs	r3, #48	@ 0x30
 801ceb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ceb6:	68bb      	ldr	r3, [r7, #8]
 801ceb8:	2b09      	cmp	r3, #9
 801ceba:	d80e      	bhi.n	801ceda <get_ldnumber+0x72>
 801cebc:	68fa      	ldr	r2, [r7, #12]
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	429a      	cmp	r2, r3
 801cec2:	d10a      	bne.n	801ceda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801cec4:	68bb      	ldr	r3, [r7, #8]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d107      	bne.n	801ceda <get_ldnumber+0x72>
					vol = (int)i;
 801ceca:	68bb      	ldr	r3, [r7, #8]
 801cecc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	3301      	adds	r3, #1
 801ced2:	617b      	str	r3, [r7, #20]
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	697a      	ldr	r2, [r7, #20]
 801ced8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ceda:	693b      	ldr	r3, [r7, #16]
 801cedc:	e002      	b.n	801cee4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cede:	2300      	movs	r3, #0
 801cee0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801cee2:	693b      	ldr	r3, [r7, #16]
}
 801cee4:	4618      	mov	r0, r3
 801cee6:	371c      	adds	r7, #28
 801cee8:	46bd      	mov	sp, r7
 801ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceee:	4770      	bx	lr

0801cef0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b082      	sub	sp, #8
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
 801cef8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2200      	movs	r2, #0
 801cefe:	70da      	strb	r2, [r3, #3]
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	f04f 32ff 	mov.w	r2, #4294967295
 801cf06:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801cf08:	6839      	ldr	r1, [r7, #0]
 801cf0a:	6878      	ldr	r0, [r7, #4]
 801cf0c:	f7fe fb26 	bl	801b55c <move_window>
 801cf10:	4603      	mov	r3, r0
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d001      	beq.n	801cf1a <check_fs+0x2a>
 801cf16:	2304      	movs	r3, #4
 801cf18:	e038      	b.n	801cf8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	3338      	adds	r3, #56	@ 0x38
 801cf1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7fe f86a 	bl	801affc <ld_word>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	461a      	mov	r2, r3
 801cf2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf30:	429a      	cmp	r2, r3
 801cf32:	d001      	beq.n	801cf38 <check_fs+0x48>
 801cf34:	2303      	movs	r3, #3
 801cf36:	e029      	b.n	801cf8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf3e:	2be9      	cmp	r3, #233	@ 0xe9
 801cf40:	d009      	beq.n	801cf56 <check_fs+0x66>
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf48:	2beb      	cmp	r3, #235	@ 0xeb
 801cf4a:	d11e      	bne.n	801cf8a <check_fs+0x9a>
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cf52:	2b90      	cmp	r3, #144	@ 0x90
 801cf54:	d119      	bne.n	801cf8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	3338      	adds	r3, #56	@ 0x38
 801cf5a:	3336      	adds	r3, #54	@ 0x36
 801cf5c:	4618      	mov	r0, r3
 801cf5e:	f7fe f865 	bl	801b02c <ld_dword>
 801cf62:	4603      	mov	r3, r0
 801cf64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cf68:	4a0a      	ldr	r2, [pc, #40]	@ (801cf94 <check_fs+0xa4>)
 801cf6a:	4293      	cmp	r3, r2
 801cf6c:	d101      	bne.n	801cf72 <check_fs+0x82>
 801cf6e:	2300      	movs	r3, #0
 801cf70:	e00c      	b.n	801cf8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	3338      	adds	r3, #56	@ 0x38
 801cf76:	3352      	adds	r3, #82	@ 0x52
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f7fe f857 	bl	801b02c <ld_dword>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	4a05      	ldr	r2, [pc, #20]	@ (801cf98 <check_fs+0xa8>)
 801cf82:	4293      	cmp	r3, r2
 801cf84:	d101      	bne.n	801cf8a <check_fs+0x9a>
 801cf86:	2300      	movs	r3, #0
 801cf88:	e000      	b.n	801cf8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cf8a:	2302      	movs	r3, #2
}
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	3708      	adds	r7, #8
 801cf90:	46bd      	mov	sp, r7
 801cf92:	bd80      	pop	{r7, pc}
 801cf94:	00544146 	.word	0x00544146
 801cf98:	33544146 	.word	0x33544146

0801cf9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cf9c:	b580      	push	{r7, lr}
 801cf9e:	b096      	sub	sp, #88	@ 0x58
 801cfa0:	af00      	add	r7, sp, #0
 801cfa2:	60f8      	str	r0, [r7, #12]
 801cfa4:	60b9      	str	r1, [r7, #8]
 801cfa6:	4613      	mov	r3, r2
 801cfa8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cfaa:	68bb      	ldr	r3, [r7, #8]
 801cfac:	2200      	movs	r2, #0
 801cfae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cfb0:	68f8      	ldr	r0, [r7, #12]
 801cfb2:	f7ff ff59 	bl	801ce68 <get_ldnumber>
 801cfb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cfb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	da01      	bge.n	801cfc2 <find_volume+0x26>
 801cfbe:	230b      	movs	r3, #11
 801cfc0:	e265      	b.n	801d48e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cfc2:	4a9f      	ldr	r2, [pc, #636]	@ (801d240 <find_volume+0x2a4>)
 801cfc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d101      	bne.n	801cfd6 <find_volume+0x3a>
 801cfd2:	230c      	movs	r3, #12
 801cfd4:	e25b      	b.n	801d48e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cfd6:	68bb      	ldr	r3, [r7, #8]
 801cfd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cfdc:	79fb      	ldrb	r3, [r7, #7]
 801cfde:	f023 0301 	bic.w	r3, r3, #1
 801cfe2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfe6:	781b      	ldrb	r3, [r3, #0]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d01a      	beq.n	801d022 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfee:	785b      	ldrb	r3, [r3, #1]
 801cff0:	4618      	mov	r0, r3
 801cff2:	f7fd ff63 	bl	801aebc <disk_status>
 801cff6:	4603      	mov	r3, r0
 801cff8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cffc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d000:	f003 0301 	and.w	r3, r3, #1
 801d004:	2b00      	cmp	r3, #0
 801d006:	d10c      	bne.n	801d022 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801d008:	79fb      	ldrb	r3, [r7, #7]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d007      	beq.n	801d01e <find_volume+0x82>
 801d00e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d012:	f003 0304 	and.w	r3, r3, #4
 801d016:	2b00      	cmp	r3, #0
 801d018:	d001      	beq.n	801d01e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801d01a:	230a      	movs	r3, #10
 801d01c:	e237      	b.n	801d48e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801d01e:	2300      	movs	r3, #0
 801d020:	e235      	b.n	801d48e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801d022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d024:	2200      	movs	r2, #0
 801d026:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801d028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d02a:	b2da      	uxtb	r2, r3
 801d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d02e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d032:	785b      	ldrb	r3, [r3, #1]
 801d034:	4618      	mov	r0, r3
 801d036:	f7fd ff5b 	bl	801aef0 <disk_initialize>
 801d03a:	4603      	mov	r3, r0
 801d03c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d040:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d044:	f003 0301 	and.w	r3, r3, #1
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d001      	beq.n	801d050 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d04c:	2303      	movs	r3, #3
 801d04e:	e21e      	b.n	801d48e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d050:	79fb      	ldrb	r3, [r7, #7]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d007      	beq.n	801d066 <find_volume+0xca>
 801d056:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d05a:	f003 0304 	and.w	r3, r3, #4
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d001      	beq.n	801d066 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d062:	230a      	movs	r3, #10
 801d064:	e213      	b.n	801d48e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801d066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d068:	7858      	ldrb	r0, [r3, #1]
 801d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06c:	330c      	adds	r3, #12
 801d06e:	461a      	mov	r2, r3
 801d070:	2102      	movs	r1, #2
 801d072:	f7fd ffa5 	bl	801afc0 <disk_ioctl>
 801d076:	4603      	mov	r3, r0
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d001      	beq.n	801d080 <find_volume+0xe4>
 801d07c:	2301      	movs	r3, #1
 801d07e:	e206      	b.n	801d48e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d082:	899b      	ldrh	r3, [r3, #12]
 801d084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d088:	d80d      	bhi.n	801d0a6 <find_volume+0x10a>
 801d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d08c:	899b      	ldrh	r3, [r3, #12]
 801d08e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d092:	d308      	bcc.n	801d0a6 <find_volume+0x10a>
 801d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d096:	899b      	ldrh	r3, [r3, #12]
 801d098:	461a      	mov	r2, r3
 801d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d09c:	899b      	ldrh	r3, [r3, #12]
 801d09e:	3b01      	subs	r3, #1
 801d0a0:	4013      	ands	r3, r2
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d001      	beq.n	801d0aa <find_volume+0x10e>
 801d0a6:	2301      	movs	r3, #1
 801d0a8:	e1f1      	b.n	801d48e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d0ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d0b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d0b2:	f7ff ff1d 	bl	801cef0 <check_fs>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0c0:	2b02      	cmp	r3, #2
 801d0c2:	d149      	bne.n	801d158 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0c4:	2300      	movs	r3, #0
 801d0c6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0c8:	e01e      	b.n	801d108 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0cc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d0d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0d2:	011b      	lsls	r3, r3, #4
 801d0d4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d0d8:	4413      	add	r3, r2
 801d0da:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0de:	3304      	adds	r3, #4
 801d0e0:	781b      	ldrb	r3, [r3, #0]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d006      	beq.n	801d0f4 <find_volume+0x158>
 801d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0e8:	3308      	adds	r3, #8
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	f7fd ff9e 	bl	801b02c <ld_dword>
 801d0f0:	4602      	mov	r2, r0
 801d0f2:	e000      	b.n	801d0f6 <find_volume+0x15a>
 801d0f4:	2200      	movs	r2, #0
 801d0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0f8:	009b      	lsls	r3, r3, #2
 801d0fa:	3358      	adds	r3, #88	@ 0x58
 801d0fc:	443b      	add	r3, r7
 801d0fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d104:	3301      	adds	r3, #1
 801d106:	643b      	str	r3, [r7, #64]	@ 0x40
 801d108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d10a:	2b03      	cmp	r3, #3
 801d10c:	d9dd      	bls.n	801d0ca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d10e:	2300      	movs	r3, #0
 801d110:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d114:	2b00      	cmp	r3, #0
 801d116:	d002      	beq.n	801d11e <find_volume+0x182>
 801d118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d11a:	3b01      	subs	r3, #1
 801d11c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d120:	009b      	lsls	r3, r3, #2
 801d122:	3358      	adds	r3, #88	@ 0x58
 801d124:	443b      	add	r3, r7
 801d126:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d12a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d12c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d005      	beq.n	801d13e <find_volume+0x1a2>
 801d132:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d134:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d136:	f7ff fedb 	bl	801cef0 <check_fs>
 801d13a:	4603      	mov	r3, r0
 801d13c:	e000      	b.n	801d140 <find_volume+0x1a4>
 801d13e:	2303      	movs	r3, #3
 801d140:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d144:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d148:	2b01      	cmp	r3, #1
 801d14a:	d905      	bls.n	801d158 <find_volume+0x1bc>
 801d14c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d14e:	3301      	adds	r3, #1
 801d150:	643b      	str	r3, [r7, #64]	@ 0x40
 801d152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d154:	2b03      	cmp	r3, #3
 801d156:	d9e2      	bls.n	801d11e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d158:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d15c:	2b04      	cmp	r3, #4
 801d15e:	d101      	bne.n	801d164 <find_volume+0x1c8>
 801d160:	2301      	movs	r3, #1
 801d162:	e194      	b.n	801d48e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d168:	2b01      	cmp	r3, #1
 801d16a:	d901      	bls.n	801d170 <find_volume+0x1d4>
 801d16c:	230d      	movs	r3, #13
 801d16e:	e18e      	b.n	801d48e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d172:	3338      	adds	r3, #56	@ 0x38
 801d174:	330b      	adds	r3, #11
 801d176:	4618      	mov	r0, r3
 801d178:	f7fd ff40 	bl	801affc <ld_word>
 801d17c:	4603      	mov	r3, r0
 801d17e:	461a      	mov	r2, r3
 801d180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d182:	899b      	ldrh	r3, [r3, #12]
 801d184:	429a      	cmp	r2, r3
 801d186:	d001      	beq.n	801d18c <find_volume+0x1f0>
 801d188:	230d      	movs	r3, #13
 801d18a:	e180      	b.n	801d48e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d18e:	3338      	adds	r3, #56	@ 0x38
 801d190:	3316      	adds	r3, #22
 801d192:	4618      	mov	r0, r3
 801d194:	f7fd ff32 	bl	801affc <ld_word>
 801d198:	4603      	mov	r3, r0
 801d19a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d19c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d106      	bne.n	801d1b0 <find_volume+0x214>
 801d1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1a4:	3338      	adds	r3, #56	@ 0x38
 801d1a6:	3324      	adds	r3, #36	@ 0x24
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f7fd ff3f 	bl	801b02c <ld_dword>
 801d1ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d1b4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1b8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c2:	789b      	ldrb	r3, [r3, #2]
 801d1c4:	2b01      	cmp	r3, #1
 801d1c6:	d005      	beq.n	801d1d4 <find_volume+0x238>
 801d1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ca:	789b      	ldrb	r3, [r3, #2]
 801d1cc:	2b02      	cmp	r3, #2
 801d1ce:	d001      	beq.n	801d1d4 <find_volume+0x238>
 801d1d0:	230d      	movs	r3, #13
 801d1d2:	e15c      	b.n	801d48e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1d6:	789b      	ldrb	r3, [r3, #2]
 801d1d8:	461a      	mov	r2, r3
 801d1da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1dc:	fb02 f303 	mul.w	r3, r2, r3
 801d1e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d1e8:	461a      	mov	r2, r3
 801d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1f0:	895b      	ldrh	r3, [r3, #10]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d008      	beq.n	801d208 <find_volume+0x26c>
 801d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1f8:	895b      	ldrh	r3, [r3, #10]
 801d1fa:	461a      	mov	r2, r3
 801d1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1fe:	895b      	ldrh	r3, [r3, #10]
 801d200:	3b01      	subs	r3, #1
 801d202:	4013      	ands	r3, r2
 801d204:	2b00      	cmp	r3, #0
 801d206:	d001      	beq.n	801d20c <find_volume+0x270>
 801d208:	230d      	movs	r3, #13
 801d20a:	e140      	b.n	801d48e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d20e:	3338      	adds	r3, #56	@ 0x38
 801d210:	3311      	adds	r3, #17
 801d212:	4618      	mov	r0, r3
 801d214:	f7fd fef2 	bl	801affc <ld_word>
 801d218:	4603      	mov	r3, r0
 801d21a:	461a      	mov	r2, r3
 801d21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d21e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d222:	891b      	ldrh	r3, [r3, #8]
 801d224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d226:	8992      	ldrh	r2, [r2, #12]
 801d228:	0952      	lsrs	r2, r2, #5
 801d22a:	b292      	uxth	r2, r2
 801d22c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d230:	fb01 f202 	mul.w	r2, r1, r2
 801d234:	1a9b      	subs	r3, r3, r2
 801d236:	b29b      	uxth	r3, r3
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d003      	beq.n	801d244 <find_volume+0x2a8>
 801d23c:	230d      	movs	r3, #13
 801d23e:	e126      	b.n	801d48e <find_volume+0x4f2>
 801d240:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d246:	3338      	adds	r3, #56	@ 0x38
 801d248:	3313      	adds	r3, #19
 801d24a:	4618      	mov	r0, r3
 801d24c:	f7fd fed6 	bl	801affc <ld_word>
 801d250:	4603      	mov	r3, r0
 801d252:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d256:	2b00      	cmp	r3, #0
 801d258:	d106      	bne.n	801d268 <find_volume+0x2cc>
 801d25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d25c:	3338      	adds	r3, #56	@ 0x38
 801d25e:	3320      	adds	r3, #32
 801d260:	4618      	mov	r0, r3
 801d262:	f7fd fee3 	bl	801b02c <ld_dword>
 801d266:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d26a:	3338      	adds	r3, #56	@ 0x38
 801d26c:	330e      	adds	r3, #14
 801d26e:	4618      	mov	r0, r3
 801d270:	f7fd fec4 	bl	801affc <ld_word>
 801d274:	4603      	mov	r3, r0
 801d276:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d278:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d101      	bne.n	801d282 <find_volume+0x2e6>
 801d27e:	230d      	movs	r3, #13
 801d280:	e105      	b.n	801d48e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d282:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d286:	4413      	add	r3, r2
 801d288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d28a:	8911      	ldrh	r1, [r2, #8]
 801d28c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d28e:	8992      	ldrh	r2, [r2, #12]
 801d290:	0952      	lsrs	r2, r2, #5
 801d292:	b292      	uxth	r2, r2
 801d294:	fbb1 f2f2 	udiv	r2, r1, r2
 801d298:	b292      	uxth	r2, r2
 801d29a:	4413      	add	r3, r2
 801d29c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d29e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2a2:	429a      	cmp	r2, r3
 801d2a4:	d201      	bcs.n	801d2aa <find_volume+0x30e>
 801d2a6:	230d      	movs	r3, #13
 801d2a8:	e0f1      	b.n	801d48e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2ae:	1ad3      	subs	r3, r2, r3
 801d2b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d2b2:	8952      	ldrh	r2, [r2, #10]
 801d2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 801d2b8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d101      	bne.n	801d2c4 <find_volume+0x328>
 801d2c0:	230d      	movs	r3, #13
 801d2c2:	e0e4      	b.n	801d48e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d2c4:	2303      	movs	r3, #3
 801d2c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2cc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d2d0:	4293      	cmp	r3, r2
 801d2d2:	d802      	bhi.n	801d2da <find_volume+0x33e>
 801d2d4:	2302      	movs	r3, #2
 801d2d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2dc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d2e0:	4293      	cmp	r3, r2
 801d2e2:	d802      	bhi.n	801d2ea <find_volume+0x34e>
 801d2e4:	2301      	movs	r3, #1
 801d2e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ec:	1c9a      	adds	r2, r3, #2
 801d2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2f6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d2f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d2fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d2fc:	441a      	add	r2, r3
 801d2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d300:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d302:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d306:	441a      	add	r2, r3
 801d308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d30a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d30c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d310:	2b03      	cmp	r3, #3
 801d312:	d11e      	bne.n	801d352 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d316:	3338      	adds	r3, #56	@ 0x38
 801d318:	332a      	adds	r3, #42	@ 0x2a
 801d31a:	4618      	mov	r0, r3
 801d31c:	f7fd fe6e 	bl	801affc <ld_word>
 801d320:	4603      	mov	r3, r0
 801d322:	2b00      	cmp	r3, #0
 801d324:	d001      	beq.n	801d32a <find_volume+0x38e>
 801d326:	230d      	movs	r3, #13
 801d328:	e0b1      	b.n	801d48e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d32c:	891b      	ldrh	r3, [r3, #8]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d001      	beq.n	801d336 <find_volume+0x39a>
 801d332:	230d      	movs	r3, #13
 801d334:	e0ab      	b.n	801d48e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d338:	3338      	adds	r3, #56	@ 0x38
 801d33a:	332c      	adds	r3, #44	@ 0x2c
 801d33c:	4618      	mov	r0, r3
 801d33e:	f7fd fe75 	bl	801b02c <ld_dword>
 801d342:	4602      	mov	r2, r0
 801d344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d346:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d34a:	69db      	ldr	r3, [r3, #28]
 801d34c:	009b      	lsls	r3, r3, #2
 801d34e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d350:	e01f      	b.n	801d392 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d354:	891b      	ldrh	r3, [r3, #8]
 801d356:	2b00      	cmp	r3, #0
 801d358:	d101      	bne.n	801d35e <find_volume+0x3c2>
 801d35a:	230d      	movs	r3, #13
 801d35c:	e097      	b.n	801d48e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d364:	441a      	add	r2, r3
 801d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d368:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d36a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d36e:	2b02      	cmp	r3, #2
 801d370:	d103      	bne.n	801d37a <find_volume+0x3de>
 801d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d374:	69db      	ldr	r3, [r3, #28]
 801d376:	005b      	lsls	r3, r3, #1
 801d378:	e00a      	b.n	801d390 <find_volume+0x3f4>
 801d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d37c:	69da      	ldr	r2, [r3, #28]
 801d37e:	4613      	mov	r3, r2
 801d380:	005b      	lsls	r3, r3, #1
 801d382:	4413      	add	r3, r2
 801d384:	085a      	lsrs	r2, r3, #1
 801d386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d388:	69db      	ldr	r3, [r3, #28]
 801d38a:	f003 0301 	and.w	r3, r3, #1
 801d38e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d390:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d394:	6a1a      	ldr	r2, [r3, #32]
 801d396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d398:	899b      	ldrh	r3, [r3, #12]
 801d39a:	4619      	mov	r1, r3
 801d39c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d39e:	440b      	add	r3, r1
 801d3a0:	3b01      	subs	r3, #1
 801d3a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d3a4:	8989      	ldrh	r1, [r1, #12]
 801d3a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801d3aa:	429a      	cmp	r2, r3
 801d3ac:	d201      	bcs.n	801d3b2 <find_volume+0x416>
 801d3ae:	230d      	movs	r3, #13
 801d3b0:	e06d      	b.n	801d48e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d3b8:	619a      	str	r2, [r3, #24]
 801d3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3bc:	699a      	ldr	r2, [r3, #24]
 801d3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3c4:	2280      	movs	r2, #128	@ 0x80
 801d3c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d3cc:	2b03      	cmp	r3, #3
 801d3ce:	d149      	bne.n	801d464 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3d2:	3338      	adds	r3, #56	@ 0x38
 801d3d4:	3330      	adds	r3, #48	@ 0x30
 801d3d6:	4618      	mov	r0, r3
 801d3d8:	f7fd fe10 	bl	801affc <ld_word>
 801d3dc:	4603      	mov	r3, r0
 801d3de:	2b01      	cmp	r3, #1
 801d3e0:	d140      	bne.n	801d464 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3e4:	3301      	adds	r3, #1
 801d3e6:	4619      	mov	r1, r3
 801d3e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3ea:	f7fe f8b7 	bl	801b55c <move_window>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d137      	bne.n	801d464 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3fc:	3338      	adds	r3, #56	@ 0x38
 801d3fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d402:	4618      	mov	r0, r3
 801d404:	f7fd fdfa 	bl	801affc <ld_word>
 801d408:	4603      	mov	r3, r0
 801d40a:	461a      	mov	r2, r3
 801d40c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d410:	429a      	cmp	r2, r3
 801d412:	d127      	bne.n	801d464 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d416:	3338      	adds	r3, #56	@ 0x38
 801d418:	4618      	mov	r0, r3
 801d41a:	f7fd fe07 	bl	801b02c <ld_dword>
 801d41e:	4603      	mov	r3, r0
 801d420:	4a1d      	ldr	r2, [pc, #116]	@ (801d498 <find_volume+0x4fc>)
 801d422:	4293      	cmp	r3, r2
 801d424:	d11e      	bne.n	801d464 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d428:	3338      	adds	r3, #56	@ 0x38
 801d42a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d42e:	4618      	mov	r0, r3
 801d430:	f7fd fdfc 	bl	801b02c <ld_dword>
 801d434:	4603      	mov	r3, r0
 801d436:	4a19      	ldr	r2, [pc, #100]	@ (801d49c <find_volume+0x500>)
 801d438:	4293      	cmp	r3, r2
 801d43a:	d113      	bne.n	801d464 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d43e:	3338      	adds	r3, #56	@ 0x38
 801d440:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d444:	4618      	mov	r0, r3
 801d446:	f7fd fdf1 	bl	801b02c <ld_dword>
 801d44a:	4602      	mov	r2, r0
 801d44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d44e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d452:	3338      	adds	r3, #56	@ 0x38
 801d454:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d458:	4618      	mov	r0, r3
 801d45a:	f7fd fde7 	bl	801b02c <ld_dword>
 801d45e:	4602      	mov	r2, r0
 801d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d462:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d466:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d46a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d46c:	4b0c      	ldr	r3, [pc, #48]	@ (801d4a0 <find_volume+0x504>)
 801d46e:	881b      	ldrh	r3, [r3, #0]
 801d470:	3301      	adds	r3, #1
 801d472:	b29a      	uxth	r2, r3
 801d474:	4b0a      	ldr	r3, [pc, #40]	@ (801d4a0 <find_volume+0x504>)
 801d476:	801a      	strh	r2, [r3, #0]
 801d478:	4b09      	ldr	r3, [pc, #36]	@ (801d4a0 <find_volume+0x504>)
 801d47a:	881a      	ldrh	r2, [r3, #0]
 801d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d47e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d482:	4a08      	ldr	r2, [pc, #32]	@ (801d4a4 <find_volume+0x508>)
 801d484:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d486:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d488:	f7fe f800 	bl	801b48c <clear_lock>
#endif
	return FR_OK;
 801d48c:	2300      	movs	r3, #0
}
 801d48e:	4618      	mov	r0, r3
 801d490:	3758      	adds	r7, #88	@ 0x58
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}
 801d496:	bf00      	nop
 801d498:	41615252 	.word	0x41615252
 801d49c:	61417272 	.word	0x61417272
 801d4a0:	24000554 	.word	0x24000554
 801d4a4:	24000568 	.word	0x24000568

0801d4a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	b084      	sub	sp, #16
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	6078      	str	r0, [r7, #4]
 801d4b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d4b2:	2309      	movs	r3, #9
 801d4b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d01c      	beq.n	801d4f6 <validate+0x4e>
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d018      	beq.n	801d4f6 <validate+0x4e>
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	781b      	ldrb	r3, [r3, #0]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d013      	beq.n	801d4f6 <validate+0x4e>
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	889a      	ldrh	r2, [r3, #4]
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	88db      	ldrh	r3, [r3, #6]
 801d4d8:	429a      	cmp	r2, r3
 801d4da:	d10c      	bne.n	801d4f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	785b      	ldrb	r3, [r3, #1]
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	f7fd fcea 	bl	801aebc <disk_status>
 801d4e8:	4603      	mov	r3, r0
 801d4ea:	f003 0301 	and.w	r3, r3, #1
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d101      	bne.n	801d4f6 <validate+0x4e>
			res = FR_OK;
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d4f6:	7bfb      	ldrb	r3, [r7, #15]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	d102      	bne.n	801d502 <validate+0x5a>
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	e000      	b.n	801d504 <validate+0x5c>
 801d502:	2300      	movs	r3, #0
 801d504:	683a      	ldr	r2, [r7, #0]
 801d506:	6013      	str	r3, [r2, #0]
	return res;
 801d508:	7bfb      	ldrb	r3, [r7, #15]
}
 801d50a:	4618      	mov	r0, r3
 801d50c:	3710      	adds	r7, #16
 801d50e:	46bd      	mov	sp, r7
 801d510:	bd80      	pop	{r7, pc}
	...

0801d514 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b088      	sub	sp, #32
 801d518:	af00      	add	r7, sp, #0
 801d51a:	60f8      	str	r0, [r7, #12]
 801d51c:	60b9      	str	r1, [r7, #8]
 801d51e:	4613      	mov	r3, r2
 801d520:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d526:	f107 0310 	add.w	r3, r7, #16
 801d52a:	4618      	mov	r0, r3
 801d52c:	f7ff fc9c 	bl	801ce68 <get_ldnumber>
 801d530:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d532:	69fb      	ldr	r3, [r7, #28]
 801d534:	2b00      	cmp	r3, #0
 801d536:	da01      	bge.n	801d53c <f_mount+0x28>
 801d538:	230b      	movs	r3, #11
 801d53a:	e02b      	b.n	801d594 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d53c:	4a17      	ldr	r2, [pc, #92]	@ (801d59c <f_mount+0x88>)
 801d53e:	69fb      	ldr	r3, [r7, #28]
 801d540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d544:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d546:	69bb      	ldr	r3, [r7, #24]
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d005      	beq.n	801d558 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d54c:	69b8      	ldr	r0, [r7, #24]
 801d54e:	f7fd ff9d 	bl	801b48c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d552:	69bb      	ldr	r3, [r7, #24]
 801d554:	2200      	movs	r2, #0
 801d556:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d002      	beq.n	801d564 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	2200      	movs	r2, #0
 801d562:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d564:	68fa      	ldr	r2, [r7, #12]
 801d566:	490d      	ldr	r1, [pc, #52]	@ (801d59c <f_mount+0x88>)
 801d568:	69fb      	ldr	r3, [r7, #28]
 801d56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	2b00      	cmp	r3, #0
 801d572:	d002      	beq.n	801d57a <f_mount+0x66>
 801d574:	79fb      	ldrb	r3, [r7, #7]
 801d576:	2b01      	cmp	r3, #1
 801d578:	d001      	beq.n	801d57e <f_mount+0x6a>
 801d57a:	2300      	movs	r3, #0
 801d57c:	e00a      	b.n	801d594 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d57e:	f107 010c 	add.w	r1, r7, #12
 801d582:	f107 0308 	add.w	r3, r7, #8
 801d586:	2200      	movs	r2, #0
 801d588:	4618      	mov	r0, r3
 801d58a:	f7ff fd07 	bl	801cf9c <find_volume>
 801d58e:	4603      	mov	r3, r0
 801d590:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d592:	7dfb      	ldrb	r3, [r7, #23]
}
 801d594:	4618      	mov	r0, r3
 801d596:	3720      	adds	r7, #32
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd80      	pop	{r7, pc}
 801d59c:	24000550 	.word	0x24000550

0801d5a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b09a      	sub	sp, #104	@ 0x68
 801d5a4:	af00      	add	r7, sp, #0
 801d5a6:	60f8      	str	r0, [r7, #12]
 801d5a8:	60b9      	str	r1, [r7, #8]
 801d5aa:	4613      	mov	r3, r2
 801d5ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d101      	bne.n	801d5b8 <f_open+0x18>
 801d5b4:	2309      	movs	r3, #9
 801d5b6:	e1b7      	b.n	801d928 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d5b8:	79fb      	ldrb	r3, [r7, #7]
 801d5ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d5be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d5c0:	79fa      	ldrb	r2, [r7, #7]
 801d5c2:	f107 0114 	add.w	r1, r7, #20
 801d5c6:	f107 0308 	add.w	r3, r7, #8
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	f7ff fce6 	bl	801cf9c <find_volume>
 801d5d0:	4603      	mov	r3, r0
 801d5d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d5d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	f040 819b 	bne.w	801d916 <f_open+0x376>
		dj.obj.fs = fs;
 801d5e0:	697b      	ldr	r3, [r7, #20]
 801d5e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d5e4:	68ba      	ldr	r2, [r7, #8]
 801d5e6:	f107 0318 	add.w	r3, r7, #24
 801d5ea:	4611      	mov	r1, r2
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f7ff fbc5 	bl	801cd7c <follow_path>
 801d5f2:	4603      	mov	r3, r0
 801d5f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d5f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d118      	bne.n	801d632 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d600:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d604:	b25b      	sxtb	r3, r3
 801d606:	2b00      	cmp	r3, #0
 801d608:	da03      	bge.n	801d612 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d60a:	2306      	movs	r3, #6
 801d60c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d610:	e00f      	b.n	801d632 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d612:	79fb      	ldrb	r3, [r7, #7]
 801d614:	2b01      	cmp	r3, #1
 801d616:	bf8c      	ite	hi
 801d618:	2301      	movhi	r3, #1
 801d61a:	2300      	movls	r3, #0
 801d61c:	b2db      	uxtb	r3, r3
 801d61e:	461a      	mov	r2, r3
 801d620:	f107 0318 	add.w	r3, r7, #24
 801d624:	4611      	mov	r1, r2
 801d626:	4618      	mov	r0, r3
 801d628:	f7fd fde8 	bl	801b1fc <chk_lock>
 801d62c:	4603      	mov	r3, r0
 801d62e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d632:	79fb      	ldrb	r3, [r7, #7]
 801d634:	f003 031c 	and.w	r3, r3, #28
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d07f      	beq.n	801d73c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d63c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d640:	2b00      	cmp	r3, #0
 801d642:	d017      	beq.n	801d674 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d644:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d648:	2b04      	cmp	r3, #4
 801d64a:	d10e      	bne.n	801d66a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d64c:	f7fd fe32 	bl	801b2b4 <enq_lock>
 801d650:	4603      	mov	r3, r0
 801d652:	2b00      	cmp	r3, #0
 801d654:	d006      	beq.n	801d664 <f_open+0xc4>
 801d656:	f107 0318 	add.w	r3, r7, #24
 801d65a:	4618      	mov	r0, r3
 801d65c:	f7ff f894 	bl	801c788 <dir_register>
 801d660:	4603      	mov	r3, r0
 801d662:	e000      	b.n	801d666 <f_open+0xc6>
 801d664:	2312      	movs	r3, #18
 801d666:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d66a:	79fb      	ldrb	r3, [r7, #7]
 801d66c:	f043 0308 	orr.w	r3, r3, #8
 801d670:	71fb      	strb	r3, [r7, #7]
 801d672:	e010      	b.n	801d696 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d674:	7fbb      	ldrb	r3, [r7, #30]
 801d676:	f003 0311 	and.w	r3, r3, #17
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d003      	beq.n	801d686 <f_open+0xe6>
					res = FR_DENIED;
 801d67e:	2307      	movs	r3, #7
 801d680:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d684:	e007      	b.n	801d696 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d686:	79fb      	ldrb	r3, [r7, #7]
 801d688:	f003 0304 	and.w	r3, r3, #4
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d002      	beq.n	801d696 <f_open+0xf6>
 801d690:	2308      	movs	r3, #8
 801d692:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d696:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d168      	bne.n	801d770 <f_open+0x1d0>
 801d69e:	79fb      	ldrb	r3, [r7, #7]
 801d6a0:	f003 0308 	and.w	r3, r3, #8
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d063      	beq.n	801d770 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d6a8:	f7fd fbaa 	bl	801ae00 <get_fattime>
 801d6ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6b0:	330e      	adds	r3, #14
 801d6b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f7fd fcf7 	bl	801b0a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6bc:	3316      	adds	r3, #22
 801d6be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7fd fcf1 	bl	801b0a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6c8:	330b      	adds	r3, #11
 801d6ca:	2220      	movs	r2, #32
 801d6cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d6ce:	697b      	ldr	r3, [r7, #20]
 801d6d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6d2:	4611      	mov	r1, r2
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f7fe fcc6 	bl	801c066 <ld_clust>
 801d6da:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d6dc:	697b      	ldr	r3, [r7, #20]
 801d6de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f7fe fcde 	bl	801c0a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6ea:	331c      	adds	r3, #28
 801d6ec:	2100      	movs	r1, #0
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f7fd fcda 	bl	801b0a8 <st_dword>
					fs->wflag = 1;
 801d6f4:	697b      	ldr	r3, [r7, #20]
 801d6f6:	2201      	movs	r2, #1
 801d6f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d6fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d037      	beq.n	801d770 <f_open+0x1d0>
						dw = fs->winsect;
 801d700:	697b      	ldr	r3, [r7, #20]
 801d702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d704:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d706:	f107 0318 	add.w	r3, r7, #24
 801d70a:	2200      	movs	r2, #0
 801d70c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d70e:	4618      	mov	r0, r3
 801d710:	f7fe f9ce 	bl	801bab0 <remove_chain>
 801d714:	4603      	mov	r3, r0
 801d716:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d71a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d126      	bne.n	801d770 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d722:	697b      	ldr	r3, [r7, #20]
 801d724:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d726:	4618      	mov	r0, r3
 801d728:	f7fd ff18 	bl	801b55c <move_window>
 801d72c:	4603      	mov	r3, r0
 801d72e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d736:	3a01      	subs	r2, #1
 801d738:	615a      	str	r2, [r3, #20]
 801d73a:	e019      	b.n	801d770 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d73c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d740:	2b00      	cmp	r3, #0
 801d742:	d115      	bne.n	801d770 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d744:	7fbb      	ldrb	r3, [r7, #30]
 801d746:	f003 0310 	and.w	r3, r3, #16
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d003      	beq.n	801d756 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d74e:	2304      	movs	r3, #4
 801d750:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d754:	e00c      	b.n	801d770 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d756:	79fb      	ldrb	r3, [r7, #7]
 801d758:	f003 0302 	and.w	r3, r3, #2
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d007      	beq.n	801d770 <f_open+0x1d0>
 801d760:	7fbb      	ldrb	r3, [r7, #30]
 801d762:	f003 0301 	and.w	r3, r3, #1
 801d766:	2b00      	cmp	r3, #0
 801d768:	d002      	beq.n	801d770 <f_open+0x1d0>
						res = FR_DENIED;
 801d76a:	2307      	movs	r3, #7
 801d76c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d770:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d774:	2b00      	cmp	r3, #0
 801d776:	d126      	bne.n	801d7c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d778:	79fb      	ldrb	r3, [r7, #7]
 801d77a:	f003 0308 	and.w	r3, r3, #8
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d003      	beq.n	801d78a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d782:	79fb      	ldrb	r3, [r7, #7]
 801d784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d788:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d78a:	697b      	ldr	r3, [r7, #20]
 801d78c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d792:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d798:	79fb      	ldrb	r3, [r7, #7]
 801d79a:	2b01      	cmp	r3, #1
 801d79c:	bf8c      	ite	hi
 801d79e:	2301      	movhi	r3, #1
 801d7a0:	2300      	movls	r3, #0
 801d7a2:	b2db      	uxtb	r3, r3
 801d7a4:	461a      	mov	r2, r3
 801d7a6:	f107 0318 	add.w	r3, r7, #24
 801d7aa:	4611      	mov	r1, r2
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f7fd fda3 	bl	801b2f8 <inc_lock>
 801d7b2:	4602      	mov	r2, r0
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	691b      	ldr	r3, [r3, #16]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d102      	bne.n	801d7c6 <f_open+0x226>
 801d7c0:	2302      	movs	r3, #2
 801d7c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d7c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	f040 80a3 	bne.w	801d916 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d7d0:	697b      	ldr	r3, [r7, #20]
 801d7d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d7d4:	4611      	mov	r1, r2
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	f7fe fc45 	bl	801c066 <ld_clust>
 801d7dc:	4602      	mov	r2, r0
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7e4:	331c      	adds	r3, #28
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	f7fd fc20 	bl	801b02c <ld_dword>
 801d7ec:	4602      	mov	r2, r0
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	2200      	movs	r2, #0
 801d7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d7f8:	697a      	ldr	r2, [r7, #20]
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d7fe:	697b      	ldr	r3, [r7, #20]
 801d800:	88da      	ldrh	r2, [r3, #6]
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	79fa      	ldrb	r2, [r7, #7]
 801d80a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	2200      	movs	r2, #0
 801d810:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	2200      	movs	r2, #0
 801d816:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	2200      	movs	r2, #0
 801d81c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	3330      	adds	r3, #48	@ 0x30
 801d822:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d826:	2100      	movs	r1, #0
 801d828:	4618      	mov	r0, r3
 801d82a:	f7fd fc8a 	bl	801b142 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d82e:	79fb      	ldrb	r3, [r7, #7]
 801d830:	f003 0320 	and.w	r3, r3, #32
 801d834:	2b00      	cmp	r3, #0
 801d836:	d06e      	beq.n	801d916 <f_open+0x376>
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	68db      	ldr	r3, [r3, #12]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d06a      	beq.n	801d916 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	68da      	ldr	r2, [r3, #12]
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d848:	697b      	ldr	r3, [r7, #20]
 801d84a:	895b      	ldrh	r3, [r3, #10]
 801d84c:	461a      	mov	r2, r3
 801d84e:	697b      	ldr	r3, [r7, #20]
 801d850:	899b      	ldrh	r3, [r3, #12]
 801d852:	fb02 f303 	mul.w	r3, r2, r3
 801d856:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	689b      	ldr	r3, [r3, #8]
 801d85c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	68db      	ldr	r3, [r3, #12]
 801d862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d864:	e016      	b.n	801d894 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d86a:	4618      	mov	r0, r3
 801d86c:	f7fd ff33 	bl	801b6d6 <get_fat>
 801d870:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d874:	2b01      	cmp	r3, #1
 801d876:	d802      	bhi.n	801d87e <f_open+0x2de>
 801d878:	2302      	movs	r3, #2
 801d87a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d87e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d880:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d884:	d102      	bne.n	801d88c <f_open+0x2ec>
 801d886:	2301      	movs	r3, #1
 801d888:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d88c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d890:	1ad3      	subs	r3, r2, r3
 801d892:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d894:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d103      	bne.n	801d8a4 <f_open+0x304>
 801d89c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d89e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d8a0:	429a      	cmp	r2, r3
 801d8a2:	d8e0      	bhi.n	801d866 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d8a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d8aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d131      	bne.n	801d916 <f_open+0x376>
 801d8b2:	697b      	ldr	r3, [r7, #20]
 801d8b4:	899b      	ldrh	r3, [r3, #12]
 801d8b6:	461a      	mov	r2, r3
 801d8b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8be:	fb01 f202 	mul.w	r2, r1, r2
 801d8c2:	1a9b      	subs	r3, r3, r2
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d026      	beq.n	801d916 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d8c8:	697b      	ldr	r3, [r7, #20]
 801d8ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	f7fd fee3 	bl	801b698 <clust2sect>
 801d8d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d103      	bne.n	801d8e2 <f_open+0x342>
						res = FR_INT_ERR;
 801d8da:	2302      	movs	r3, #2
 801d8dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d8e0:	e019      	b.n	801d916 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	899b      	ldrh	r3, [r3, #12]
 801d8e6:	461a      	mov	r2, r3
 801d8e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8ea:	fbb3 f2f2 	udiv	r2, r3, r2
 801d8ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8f0:	441a      	add	r2, r3
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d8f6:	697b      	ldr	r3, [r7, #20]
 801d8f8:	7858      	ldrb	r0, [r3, #1]
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	6a1a      	ldr	r2, [r3, #32]
 801d904:	2301      	movs	r3, #1
 801d906:	f7fd fb1b 	bl	801af40 <disk_read>
 801d90a:	4603      	mov	r3, r0
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d002      	beq.n	801d916 <f_open+0x376>
 801d910:	2301      	movs	r3, #1
 801d912:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d916:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d002      	beq.n	801d924 <f_open+0x384>
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	2200      	movs	r2, #0
 801d922:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d924:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d928:	4618      	mov	r0, r3
 801d92a:	3768      	adds	r7, #104	@ 0x68
 801d92c:	46bd      	mov	sp, r7
 801d92e:	bd80      	pop	{r7, pc}

0801d930 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d930:	b580      	push	{r7, lr}
 801d932:	b08c      	sub	sp, #48	@ 0x30
 801d934:	af00      	add	r7, sp, #0
 801d936:	60f8      	str	r0, [r7, #12]
 801d938:	60b9      	str	r1, [r7, #8]
 801d93a:	607a      	str	r2, [r7, #4]
 801d93c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d93e:	68bb      	ldr	r3, [r7, #8]
 801d940:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d942:	683b      	ldr	r3, [r7, #0]
 801d944:	2200      	movs	r2, #0
 801d946:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	f107 0210 	add.w	r2, r7, #16
 801d94e:	4611      	mov	r1, r2
 801d950:	4618      	mov	r0, r3
 801d952:	f7ff fda9 	bl	801d4a8 <validate>
 801d956:	4603      	mov	r3, r0
 801d958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d95c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d960:	2b00      	cmp	r3, #0
 801d962:	d107      	bne.n	801d974 <f_write+0x44>
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	7d5b      	ldrb	r3, [r3, #21]
 801d968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d96c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d970:	2b00      	cmp	r3, #0
 801d972:	d002      	beq.n	801d97a <f_write+0x4a>
 801d974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d978:	e16a      	b.n	801dc50 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	7d1b      	ldrb	r3, [r3, #20]
 801d97e:	f003 0302 	and.w	r3, r3, #2
 801d982:	2b00      	cmp	r3, #0
 801d984:	d101      	bne.n	801d98a <f_write+0x5a>
 801d986:	2307      	movs	r3, #7
 801d988:	e162      	b.n	801dc50 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	699a      	ldr	r2, [r3, #24]
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	441a      	add	r2, r3
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	699b      	ldr	r3, [r3, #24]
 801d996:	429a      	cmp	r2, r3
 801d998:	f080 814c 	bcs.w	801dc34 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	699b      	ldr	r3, [r3, #24]
 801d9a0:	43db      	mvns	r3, r3
 801d9a2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d9a4:	e146      	b.n	801dc34 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	699b      	ldr	r3, [r3, #24]
 801d9aa:	693a      	ldr	r2, [r7, #16]
 801d9ac:	8992      	ldrh	r2, [r2, #12]
 801d9ae:	fbb3 f1f2 	udiv	r1, r3, r2
 801d9b2:	fb01 f202 	mul.w	r2, r1, r2
 801d9b6:	1a9b      	subs	r3, r3, r2
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	f040 80f1 	bne.w	801dba0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	699b      	ldr	r3, [r3, #24]
 801d9c2:	693a      	ldr	r2, [r7, #16]
 801d9c4:	8992      	ldrh	r2, [r2, #12]
 801d9c6:	fbb3 f3f2 	udiv	r3, r3, r2
 801d9ca:	693a      	ldr	r2, [r7, #16]
 801d9cc:	8952      	ldrh	r2, [r2, #10]
 801d9ce:	3a01      	subs	r2, #1
 801d9d0:	4013      	ands	r3, r2
 801d9d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d9d4:	69bb      	ldr	r3, [r7, #24]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d143      	bne.n	801da62 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	699b      	ldr	r3, [r3, #24]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d10c      	bne.n	801d9fc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d9e2:	68fb      	ldr	r3, [r7, #12]
 801d9e4:	689b      	ldr	r3, [r3, #8]
 801d9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d11a      	bne.n	801da24 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	2100      	movs	r1, #0
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f7fe f8c1 	bl	801bb7a <create_chain>
 801d9f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9fa:	e013      	b.n	801da24 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da00:	2b00      	cmp	r3, #0
 801da02:	d007      	beq.n	801da14 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	699b      	ldr	r3, [r3, #24]
 801da08:	4619      	mov	r1, r3
 801da0a:	68f8      	ldr	r0, [r7, #12]
 801da0c:	f7fe f94d 	bl	801bcaa <clmt_clust>
 801da10:	62b8      	str	r0, [r7, #40]	@ 0x28
 801da12:	e007      	b.n	801da24 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801da14:	68fa      	ldr	r2, [r7, #12]
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	69db      	ldr	r3, [r3, #28]
 801da1a:	4619      	mov	r1, r3
 801da1c:	4610      	mov	r0, r2
 801da1e:	f7fe f8ac 	bl	801bb7a <create_chain>
 801da22:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801da24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da26:	2b00      	cmp	r3, #0
 801da28:	f000 8109 	beq.w	801dc3e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801da2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da2e:	2b01      	cmp	r3, #1
 801da30:	d104      	bne.n	801da3c <f_write+0x10c>
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	2202      	movs	r2, #2
 801da36:	755a      	strb	r2, [r3, #21]
 801da38:	2302      	movs	r3, #2
 801da3a:	e109      	b.n	801dc50 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801da3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da42:	d104      	bne.n	801da4e <f_write+0x11e>
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	2201      	movs	r2, #1
 801da48:	755a      	strb	r2, [r3, #21]
 801da4a:	2301      	movs	r3, #1
 801da4c:	e100      	b.n	801dc50 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da52:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	689b      	ldr	r3, [r3, #8]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d102      	bne.n	801da62 <f_write+0x132>
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da60:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	7d1b      	ldrb	r3, [r3, #20]
 801da66:	b25b      	sxtb	r3, r3
 801da68:	2b00      	cmp	r3, #0
 801da6a:	da18      	bge.n	801da9e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da6c:	693b      	ldr	r3, [r7, #16]
 801da6e:	7858      	ldrb	r0, [r3, #1]
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	6a1a      	ldr	r2, [r3, #32]
 801da7a:	2301      	movs	r3, #1
 801da7c:	f7fd fa80 	bl	801af80 <disk_write>
 801da80:	4603      	mov	r3, r0
 801da82:	2b00      	cmp	r3, #0
 801da84:	d004      	beq.n	801da90 <f_write+0x160>
 801da86:	68fb      	ldr	r3, [r7, #12]
 801da88:	2201      	movs	r2, #1
 801da8a:	755a      	strb	r2, [r3, #21]
 801da8c:	2301      	movs	r3, #1
 801da8e:	e0df      	b.n	801dc50 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	7d1b      	ldrb	r3, [r3, #20]
 801da94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da98:	b2da      	uxtb	r2, r3
 801da9a:	68fb      	ldr	r3, [r7, #12]
 801da9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801da9e:	693a      	ldr	r2, [r7, #16]
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	69db      	ldr	r3, [r3, #28]
 801daa4:	4619      	mov	r1, r3
 801daa6:	4610      	mov	r0, r2
 801daa8:	f7fd fdf6 	bl	801b698 <clust2sect>
 801daac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801daae:	697b      	ldr	r3, [r7, #20]
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d104      	bne.n	801dabe <f_write+0x18e>
 801dab4:	68fb      	ldr	r3, [r7, #12]
 801dab6:	2202      	movs	r2, #2
 801dab8:	755a      	strb	r2, [r3, #21]
 801daba:	2302      	movs	r3, #2
 801dabc:	e0c8      	b.n	801dc50 <f_write+0x320>
			sect += csect;
 801dabe:	697a      	ldr	r2, [r7, #20]
 801dac0:	69bb      	ldr	r3, [r7, #24]
 801dac2:	4413      	add	r3, r2
 801dac4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801dac6:	693b      	ldr	r3, [r7, #16]
 801dac8:	899b      	ldrh	r3, [r3, #12]
 801daca:	461a      	mov	r2, r3
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	fbb3 f3f2 	udiv	r3, r3, r2
 801dad2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801dad4:	6a3b      	ldr	r3, [r7, #32]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d043      	beq.n	801db62 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801dada:	69ba      	ldr	r2, [r7, #24]
 801dadc:	6a3b      	ldr	r3, [r7, #32]
 801dade:	4413      	add	r3, r2
 801dae0:	693a      	ldr	r2, [r7, #16]
 801dae2:	8952      	ldrh	r2, [r2, #10]
 801dae4:	4293      	cmp	r3, r2
 801dae6:	d905      	bls.n	801daf4 <f_write+0x1c4>
					cc = fs->csize - csect;
 801dae8:	693b      	ldr	r3, [r7, #16]
 801daea:	895b      	ldrh	r3, [r3, #10]
 801daec:	461a      	mov	r2, r3
 801daee:	69bb      	ldr	r3, [r7, #24]
 801daf0:	1ad3      	subs	r3, r2, r3
 801daf2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801daf4:	693b      	ldr	r3, [r7, #16]
 801daf6:	7858      	ldrb	r0, [r3, #1]
 801daf8:	6a3b      	ldr	r3, [r7, #32]
 801dafa:	697a      	ldr	r2, [r7, #20]
 801dafc:	69f9      	ldr	r1, [r7, #28]
 801dafe:	f7fd fa3f 	bl	801af80 <disk_write>
 801db02:	4603      	mov	r3, r0
 801db04:	2b00      	cmp	r3, #0
 801db06:	d004      	beq.n	801db12 <f_write+0x1e2>
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	2201      	movs	r2, #1
 801db0c:	755a      	strb	r2, [r3, #21]
 801db0e:	2301      	movs	r3, #1
 801db10:	e09e      	b.n	801dc50 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	6a1a      	ldr	r2, [r3, #32]
 801db16:	697b      	ldr	r3, [r7, #20]
 801db18:	1ad3      	subs	r3, r2, r3
 801db1a:	6a3a      	ldr	r2, [r7, #32]
 801db1c:	429a      	cmp	r2, r3
 801db1e:	d918      	bls.n	801db52 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	6a1a      	ldr	r2, [r3, #32]
 801db2a:	697b      	ldr	r3, [r7, #20]
 801db2c:	1ad3      	subs	r3, r2, r3
 801db2e:	693a      	ldr	r2, [r7, #16]
 801db30:	8992      	ldrh	r2, [r2, #12]
 801db32:	fb02 f303 	mul.w	r3, r2, r3
 801db36:	69fa      	ldr	r2, [r7, #28]
 801db38:	18d1      	adds	r1, r2, r3
 801db3a:	693b      	ldr	r3, [r7, #16]
 801db3c:	899b      	ldrh	r3, [r3, #12]
 801db3e:	461a      	mov	r2, r3
 801db40:	f7fd fade 	bl	801b100 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	7d1b      	ldrb	r3, [r3, #20]
 801db48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db4c:	b2da      	uxtb	r2, r3
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801db52:	693b      	ldr	r3, [r7, #16]
 801db54:	899b      	ldrh	r3, [r3, #12]
 801db56:	461a      	mov	r2, r3
 801db58:	6a3b      	ldr	r3, [r7, #32]
 801db5a:	fb02 f303 	mul.w	r3, r2, r3
 801db5e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801db60:	e04b      	b.n	801dbfa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	6a1b      	ldr	r3, [r3, #32]
 801db66:	697a      	ldr	r2, [r7, #20]
 801db68:	429a      	cmp	r2, r3
 801db6a:	d016      	beq.n	801db9a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	699a      	ldr	r2, [r3, #24]
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db74:	429a      	cmp	r2, r3
 801db76:	d210      	bcs.n	801db9a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801db78:	693b      	ldr	r3, [r7, #16]
 801db7a:	7858      	ldrb	r0, [r3, #1]
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db82:	2301      	movs	r3, #1
 801db84:	697a      	ldr	r2, [r7, #20]
 801db86:	f7fd f9db 	bl	801af40 <disk_read>
 801db8a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d004      	beq.n	801db9a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	2201      	movs	r2, #1
 801db94:	755a      	strb	r2, [r3, #21]
 801db96:	2301      	movs	r3, #1
 801db98:	e05a      	b.n	801dc50 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	697a      	ldr	r2, [r7, #20]
 801db9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801dba0:	693b      	ldr	r3, [r7, #16]
 801dba2:	899b      	ldrh	r3, [r3, #12]
 801dba4:	4618      	mov	r0, r3
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	699b      	ldr	r3, [r3, #24]
 801dbaa:	693a      	ldr	r2, [r7, #16]
 801dbac:	8992      	ldrh	r2, [r2, #12]
 801dbae:	fbb3 f1f2 	udiv	r1, r3, r2
 801dbb2:	fb01 f202 	mul.w	r2, r1, r2
 801dbb6:	1a9b      	subs	r3, r3, r2
 801dbb8:	1ac3      	subs	r3, r0, r3
 801dbba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801dbbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	429a      	cmp	r2, r3
 801dbc2:	d901      	bls.n	801dbc8 <f_write+0x298>
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	699b      	ldr	r3, [r3, #24]
 801dbd2:	693a      	ldr	r2, [r7, #16]
 801dbd4:	8992      	ldrh	r2, [r2, #12]
 801dbd6:	fbb3 f0f2 	udiv	r0, r3, r2
 801dbda:	fb00 f202 	mul.w	r2, r0, r2
 801dbde:	1a9b      	subs	r3, r3, r2
 801dbe0:	440b      	add	r3, r1
 801dbe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dbe4:	69f9      	ldr	r1, [r7, #28]
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	f7fd fa8a 	bl	801b100 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	7d1b      	ldrb	r3, [r3, #20]
 801dbf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801dbf4:	b2da      	uxtb	r2, r3
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801dbfa:	69fa      	ldr	r2, [r7, #28]
 801dbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbfe:	4413      	add	r3, r2
 801dc00:	61fb      	str	r3, [r7, #28]
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	699a      	ldr	r2, [r3, #24]
 801dc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc08:	441a      	add	r2, r3
 801dc0a:	68fb      	ldr	r3, [r7, #12]
 801dc0c:	619a      	str	r2, [r3, #24]
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	68da      	ldr	r2, [r3, #12]
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	699b      	ldr	r3, [r3, #24]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	bf38      	it	cc
 801dc1a:	461a      	movcc	r2, r3
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	60da      	str	r2, [r3, #12]
 801dc20:	683b      	ldr	r3, [r7, #0]
 801dc22:	681a      	ldr	r2, [r3, #0]
 801dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc26:	441a      	add	r2, r3
 801dc28:	683b      	ldr	r3, [r7, #0]
 801dc2a:	601a      	str	r2, [r3, #0]
 801dc2c:	687a      	ldr	r2, [r7, #4]
 801dc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc30:	1ad3      	subs	r3, r2, r3
 801dc32:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	f47f aeb5 	bne.w	801d9a6 <f_write+0x76>
 801dc3c:	e000      	b.n	801dc40 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dc3e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	7d1b      	ldrb	r3, [r3, #20]
 801dc44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc48:	b2da      	uxtb	r2, r3
 801dc4a:	68fb      	ldr	r3, [r7, #12]
 801dc4c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dc4e:	2300      	movs	r3, #0
}
 801dc50:	4618      	mov	r0, r3
 801dc52:	3730      	adds	r7, #48	@ 0x30
 801dc54:	46bd      	mov	sp, r7
 801dc56:	bd80      	pop	{r7, pc}

0801dc58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b086      	sub	sp, #24
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	f107 0208 	add.w	r2, r7, #8
 801dc66:	4611      	mov	r1, r2
 801dc68:	4618      	mov	r0, r3
 801dc6a:	f7ff fc1d 	bl	801d4a8 <validate>
 801dc6e:	4603      	mov	r3, r0
 801dc70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dc72:	7dfb      	ldrb	r3, [r7, #23]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d168      	bne.n	801dd4a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	7d1b      	ldrb	r3, [r3, #20]
 801dc7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d062      	beq.n	801dd4a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	7d1b      	ldrb	r3, [r3, #20]
 801dc88:	b25b      	sxtb	r3, r3
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	da15      	bge.n	801dcba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dc8e:	68bb      	ldr	r3, [r7, #8]
 801dc90:	7858      	ldrb	r0, [r3, #1]
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	6a1a      	ldr	r2, [r3, #32]
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	f7fd f96f 	bl	801af80 <disk_write>
 801dca2:	4603      	mov	r3, r0
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d001      	beq.n	801dcac <f_sync+0x54>
 801dca8:	2301      	movs	r3, #1
 801dcaa:	e04f      	b.n	801dd4c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	7d1b      	ldrb	r3, [r3, #20]
 801dcb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dcb4:	b2da      	uxtb	r2, r3
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dcba:	f7fd f8a1 	bl	801ae00 <get_fattime>
 801dcbe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dcc0:	68ba      	ldr	r2, [r7, #8]
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dcc6:	4619      	mov	r1, r3
 801dcc8:	4610      	mov	r0, r2
 801dcca:	f7fd fc47 	bl	801b55c <move_window>
 801dcce:	4603      	mov	r3, r0
 801dcd0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dcd2:	7dfb      	ldrb	r3, [r7, #23]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d138      	bne.n	801dd4a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcdc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	330b      	adds	r3, #11
 801dce2:	781a      	ldrb	r2, [r3, #0]
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	330b      	adds	r3, #11
 801dce8:	f042 0220 	orr.w	r2, r2, #32
 801dcec:	b2d2      	uxtb	r2, r2
 801dcee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	6818      	ldr	r0, [r3, #0]
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	689b      	ldr	r3, [r3, #8]
 801dcf8:	461a      	mov	r2, r3
 801dcfa:	68f9      	ldr	r1, [r7, #12]
 801dcfc:	f7fe f9d2 	bl	801c0a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	f103 021c 	add.w	r2, r3, #28
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	68db      	ldr	r3, [r3, #12]
 801dd0a:	4619      	mov	r1, r3
 801dd0c:	4610      	mov	r0, r2
 801dd0e:	f7fd f9cb 	bl	801b0a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	3316      	adds	r3, #22
 801dd16:	6939      	ldr	r1, [r7, #16]
 801dd18:	4618      	mov	r0, r3
 801dd1a:	f7fd f9c5 	bl	801b0a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	3312      	adds	r3, #18
 801dd22:	2100      	movs	r1, #0
 801dd24:	4618      	mov	r0, r3
 801dd26:	f7fd f9a4 	bl	801b072 <st_word>
					fs->wflag = 1;
 801dd2a:	68bb      	ldr	r3, [r7, #8]
 801dd2c:	2201      	movs	r2, #1
 801dd2e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dd30:	68bb      	ldr	r3, [r7, #8]
 801dd32:	4618      	mov	r0, r3
 801dd34:	f7fd fc40 	bl	801b5b8 <sync_fs>
 801dd38:	4603      	mov	r3, r0
 801dd3a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	7d1b      	ldrb	r3, [r3, #20]
 801dd40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dd44:	b2da      	uxtb	r2, r3
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	3718      	adds	r7, #24
 801dd50:	46bd      	mov	sp, r7
 801dd52:	bd80      	pop	{r7, pc}

0801dd54 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dd54:	b580      	push	{r7, lr}
 801dd56:	b084      	sub	sp, #16
 801dd58:	af00      	add	r7, sp, #0
 801dd5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dd5c:	6878      	ldr	r0, [r7, #4]
 801dd5e:	f7ff ff7b 	bl	801dc58 <f_sync>
 801dd62:	4603      	mov	r3, r0
 801dd64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dd66:	7bfb      	ldrb	r3, [r7, #15]
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d118      	bne.n	801dd9e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	f107 0208 	add.w	r2, r7, #8
 801dd72:	4611      	mov	r1, r2
 801dd74:	4618      	mov	r0, r3
 801dd76:	f7ff fb97 	bl	801d4a8 <validate>
 801dd7a:	4603      	mov	r3, r0
 801dd7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dd7e:	7bfb      	ldrb	r3, [r7, #15]
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d10c      	bne.n	801dd9e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	691b      	ldr	r3, [r3, #16]
 801dd88:	4618      	mov	r0, r3
 801dd8a:	f7fd fb43 	bl	801b414 <dec_lock>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dd92:	7bfb      	ldrb	r3, [r7, #15]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d102      	bne.n	801dd9e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dda0:	4618      	mov	r0, r3
 801dda2:	3710      	adds	r7, #16
 801dda4:	46bd      	mov	sp, r7
 801dda6:	bd80      	pop	{r7, pc}

0801dda8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b0a0      	sub	sp, #128	@ 0x80
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801ddb4:	f107 010c 	add.w	r1, r7, #12
 801ddb8:	1d3b      	adds	r3, r7, #4
 801ddba:	2202      	movs	r2, #2
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	f7ff f8ed 	bl	801cf9c <find_volume>
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801ddcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	f040 808e 	bne.w	801def2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801ddd6:	687a      	ldr	r2, [r7, #4]
 801ddd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dddc:	4611      	mov	r1, r2
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7fe ffcc 	bl	801cd7c <follow_path>
 801dde4:	4603      	mov	r3, r0
 801dde6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801ddea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d108      	bne.n	801de04 <f_unlink+0x5c>
 801ddf2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddf6:	2102      	movs	r1, #2
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	f7fd f9ff 	bl	801b1fc <chk_lock>
 801ddfe:	4603      	mov	r3, r0
 801de00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801de04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d172      	bne.n	801def2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801de0c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801de10:	b25b      	sxtb	r3, r3
 801de12:	2b00      	cmp	r3, #0
 801de14:	da03      	bge.n	801de1e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801de16:	2306      	movs	r3, #6
 801de18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801de1c:	e008      	b.n	801de30 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801de1e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de22:	f003 0301 	and.w	r3, r3, #1
 801de26:	2b00      	cmp	r3, #0
 801de28:	d002      	beq.n	801de30 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801de2a:	2307      	movs	r3, #7
 801de2c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801de30:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de34:	2b00      	cmp	r3, #0
 801de36:	d134      	bne.n	801dea2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801de3c:	4611      	mov	r1, r2
 801de3e:	4618      	mov	r0, r3
 801de40:	f7fe f911 	bl	801c066 <ld_clust>
 801de44:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801de46:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de4a:	f003 0310 	and.w	r3, r3, #16
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d027      	beq.n	801dea2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801de52:	68fb      	ldr	r3, [r7, #12]
 801de54:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801de56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de58:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801de5a:	f107 0310 	add.w	r3, r7, #16
 801de5e:	2100      	movs	r1, #0
 801de60:	4618      	mov	r0, r3
 801de62:	f7fd ff5a 	bl	801bd1a <dir_sdi>
 801de66:	4603      	mov	r3, r0
 801de68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801de6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de70:	2b00      	cmp	r3, #0
 801de72:	d116      	bne.n	801dea2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801de74:	f107 0310 	add.w	r3, r7, #16
 801de78:	2100      	movs	r1, #0
 801de7a:	4618      	mov	r0, r3
 801de7c:	f7fe fb1d 	bl	801c4ba <dir_read>
 801de80:	4603      	mov	r3, r0
 801de82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801de86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d102      	bne.n	801de94 <f_unlink+0xec>
 801de8e:	2307      	movs	r3, #7
 801de90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801de94:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de98:	2b04      	cmp	r3, #4
 801de9a:	d102      	bne.n	801dea2 <f_unlink+0xfa>
 801de9c:	2300      	movs	r3, #0
 801de9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801dea2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d123      	bne.n	801def2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801deaa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801deae:	4618      	mov	r0, r3
 801deb0:	f7fe fd62 	bl	801c978 <dir_remove>
 801deb4:	4603      	mov	r3, r0
 801deb6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801deba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d10c      	bne.n	801dedc <f_unlink+0x134>
 801dec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d009      	beq.n	801dedc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801dec8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801decc:	2200      	movs	r2, #0
 801dece:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801ded0:	4618      	mov	r0, r3
 801ded2:	f7fd fded 	bl	801bab0 <remove_chain>
 801ded6:	4603      	mov	r3, r0
 801ded8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801dedc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d106      	bne.n	801def2 <f_unlink+0x14a>
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	4618      	mov	r0, r3
 801dee8:	f7fd fb66 	bl	801b5b8 <sync_fs>
 801deec:	4603      	mov	r3, r0
 801deee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801def2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801def6:	4618      	mov	r0, r3
 801def8:	3780      	adds	r7, #128	@ 0x80
 801defa:	46bd      	mov	sp, r7
 801defc:	bd80      	pop	{r7, pc}
	...

0801df00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801df00:	b480      	push	{r7}
 801df02:	b087      	sub	sp, #28
 801df04:	af00      	add	r7, sp, #0
 801df06:	60f8      	str	r0, [r7, #12]
 801df08:	60b9      	str	r1, [r7, #8]
 801df0a:	4613      	mov	r3, r2
 801df0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801df0e:	2301      	movs	r3, #1
 801df10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801df12:	2300      	movs	r3, #0
 801df14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801df16:	4b1f      	ldr	r3, [pc, #124]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df18:	7a5b      	ldrb	r3, [r3, #9]
 801df1a:	b2db      	uxtb	r3, r3
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d131      	bne.n	801df84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801df20:	4b1c      	ldr	r3, [pc, #112]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df22:	7a5b      	ldrb	r3, [r3, #9]
 801df24:	b2db      	uxtb	r3, r3
 801df26:	461a      	mov	r2, r3
 801df28:	4b1a      	ldr	r3, [pc, #104]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df2a:	2100      	movs	r1, #0
 801df2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801df2e:	4b19      	ldr	r3, [pc, #100]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df30:	7a5b      	ldrb	r3, [r3, #9]
 801df32:	b2db      	uxtb	r3, r3
 801df34:	4a17      	ldr	r2, [pc, #92]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df36:	009b      	lsls	r3, r3, #2
 801df38:	4413      	add	r3, r2
 801df3a:	68fa      	ldr	r2, [r7, #12]
 801df3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801df3e:	4b15      	ldr	r3, [pc, #84]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df40:	7a5b      	ldrb	r3, [r3, #9]
 801df42:	b2db      	uxtb	r3, r3
 801df44:	461a      	mov	r2, r3
 801df46:	4b13      	ldr	r3, [pc, #76]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df48:	4413      	add	r3, r2
 801df4a:	79fa      	ldrb	r2, [r7, #7]
 801df4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801df4e:	4b11      	ldr	r3, [pc, #68]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df50:	7a5b      	ldrb	r3, [r3, #9]
 801df52:	b2db      	uxtb	r3, r3
 801df54:	1c5a      	adds	r2, r3, #1
 801df56:	b2d1      	uxtb	r1, r2
 801df58:	4a0e      	ldr	r2, [pc, #56]	@ (801df94 <FATFS_LinkDriverEx+0x94>)
 801df5a:	7251      	strb	r1, [r2, #9]
 801df5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801df5e:	7dbb      	ldrb	r3, [r7, #22]
 801df60:	3330      	adds	r3, #48	@ 0x30
 801df62:	b2da      	uxtb	r2, r3
 801df64:	68bb      	ldr	r3, [r7, #8]
 801df66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801df68:	68bb      	ldr	r3, [r7, #8]
 801df6a:	3301      	adds	r3, #1
 801df6c:	223a      	movs	r2, #58	@ 0x3a
 801df6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	3302      	adds	r3, #2
 801df74:	222f      	movs	r2, #47	@ 0x2f
 801df76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801df78:	68bb      	ldr	r3, [r7, #8]
 801df7a:	3303      	adds	r3, #3
 801df7c:	2200      	movs	r2, #0
 801df7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801df80:	2300      	movs	r3, #0
 801df82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801df84:	7dfb      	ldrb	r3, [r7, #23]
}
 801df86:	4618      	mov	r0, r3
 801df88:	371c      	adds	r7, #28
 801df8a:	46bd      	mov	sp, r7
 801df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df90:	4770      	bx	lr
 801df92:	bf00      	nop
 801df94:	24000768 	.word	0x24000768

0801df98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801df98:	b580      	push	{r7, lr}
 801df9a:	b082      	sub	sp, #8
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	6078      	str	r0, [r7, #4]
 801dfa0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	6839      	ldr	r1, [r7, #0]
 801dfa6:	6878      	ldr	r0, [r7, #4]
 801dfa8:	f7ff ffaa 	bl	801df00 <FATFS_LinkDriverEx>
 801dfac:	4603      	mov	r3, r0
}
 801dfae:	4618      	mov	r0, r3
 801dfb0:	3708      	adds	r7, #8
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	bd80      	pop	{r7, pc}
	...

0801dfb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801dfb8:	b480      	push	{r7}
 801dfba:	b085      	sub	sp, #20
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	6039      	str	r1, [r7, #0]
 801dfc2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dfc4:	88fb      	ldrh	r3, [r7, #6]
 801dfc6:	2b7f      	cmp	r3, #127	@ 0x7f
 801dfc8:	d802      	bhi.n	801dfd0 <ff_convert+0x18>
		c = chr;
 801dfca:	88fb      	ldrh	r3, [r7, #6]
 801dfcc:	81fb      	strh	r3, [r7, #14]
 801dfce:	e025      	b.n	801e01c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dfd0:	683b      	ldr	r3, [r7, #0]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d00b      	beq.n	801dfee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dfd6:	88fb      	ldrh	r3, [r7, #6]
 801dfd8:	2bff      	cmp	r3, #255	@ 0xff
 801dfda:	d805      	bhi.n	801dfe8 <ff_convert+0x30>
 801dfdc:	88fb      	ldrh	r3, [r7, #6]
 801dfde:	3b80      	subs	r3, #128	@ 0x80
 801dfe0:	4a12      	ldr	r2, [pc, #72]	@ (801e02c <ff_convert+0x74>)
 801dfe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfe6:	e000      	b.n	801dfea <ff_convert+0x32>
 801dfe8:	2300      	movs	r3, #0
 801dfea:	81fb      	strh	r3, [r7, #14]
 801dfec:	e016      	b.n	801e01c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dfee:	2300      	movs	r3, #0
 801dff0:	81fb      	strh	r3, [r7, #14]
 801dff2:	e009      	b.n	801e008 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dff4:	89fb      	ldrh	r3, [r7, #14]
 801dff6:	4a0d      	ldr	r2, [pc, #52]	@ (801e02c <ff_convert+0x74>)
 801dff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dffc:	88fa      	ldrh	r2, [r7, #6]
 801dffe:	429a      	cmp	r2, r3
 801e000:	d006      	beq.n	801e010 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801e002:	89fb      	ldrh	r3, [r7, #14]
 801e004:	3301      	adds	r3, #1
 801e006:	81fb      	strh	r3, [r7, #14]
 801e008:	89fb      	ldrh	r3, [r7, #14]
 801e00a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e00c:	d9f2      	bls.n	801dff4 <ff_convert+0x3c>
 801e00e:	e000      	b.n	801e012 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801e010:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801e012:	89fb      	ldrh	r3, [r7, #14]
 801e014:	3380      	adds	r3, #128	@ 0x80
 801e016:	b29b      	uxth	r3, r3
 801e018:	b2db      	uxtb	r3, r3
 801e01a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801e01c:	89fb      	ldrh	r3, [r7, #14]
}
 801e01e:	4618      	mov	r0, r3
 801e020:	3714      	adds	r7, #20
 801e022:	46bd      	mov	sp, r7
 801e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e028:	4770      	bx	lr
 801e02a:	bf00      	nop
 801e02c:	0801ecdc 	.word	0x0801ecdc

0801e030 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801e030:	b480      	push	{r7}
 801e032:	b087      	sub	sp, #28
 801e034:	af00      	add	r7, sp, #0
 801e036:	4603      	mov	r3, r0
 801e038:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801e03a:	88fb      	ldrh	r3, [r7, #6]
 801e03c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e040:	d201      	bcs.n	801e046 <ff_wtoupper+0x16>
 801e042:	4b3e      	ldr	r3, [pc, #248]	@ (801e13c <ff_wtoupper+0x10c>)
 801e044:	e000      	b.n	801e048 <ff_wtoupper+0x18>
 801e046:	4b3e      	ldr	r3, [pc, #248]	@ (801e140 <ff_wtoupper+0x110>)
 801e048:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801e04a:	697b      	ldr	r3, [r7, #20]
 801e04c:	1c9a      	adds	r2, r3, #2
 801e04e:	617a      	str	r2, [r7, #20]
 801e050:	881b      	ldrh	r3, [r3, #0]
 801e052:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801e054:	8a7b      	ldrh	r3, [r7, #18]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d068      	beq.n	801e12c <ff_wtoupper+0xfc>
 801e05a:	88fa      	ldrh	r2, [r7, #6]
 801e05c:	8a7b      	ldrh	r3, [r7, #18]
 801e05e:	429a      	cmp	r2, r3
 801e060:	d364      	bcc.n	801e12c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801e062:	697b      	ldr	r3, [r7, #20]
 801e064:	1c9a      	adds	r2, r3, #2
 801e066:	617a      	str	r2, [r7, #20]
 801e068:	881b      	ldrh	r3, [r3, #0]
 801e06a:	823b      	strh	r3, [r7, #16]
 801e06c:	8a3b      	ldrh	r3, [r7, #16]
 801e06e:	0a1b      	lsrs	r3, r3, #8
 801e070:	81fb      	strh	r3, [r7, #14]
 801e072:	8a3b      	ldrh	r3, [r7, #16]
 801e074:	b2db      	uxtb	r3, r3
 801e076:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801e078:	88fa      	ldrh	r2, [r7, #6]
 801e07a:	8a79      	ldrh	r1, [r7, #18]
 801e07c:	8a3b      	ldrh	r3, [r7, #16]
 801e07e:	440b      	add	r3, r1
 801e080:	429a      	cmp	r2, r3
 801e082:	da49      	bge.n	801e118 <ff_wtoupper+0xe8>
			switch (cmd) {
 801e084:	89fb      	ldrh	r3, [r7, #14]
 801e086:	2b08      	cmp	r3, #8
 801e088:	d84f      	bhi.n	801e12a <ff_wtoupper+0xfa>
 801e08a:	a201      	add	r2, pc, #4	@ (adr r2, 801e090 <ff_wtoupper+0x60>)
 801e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e090:	0801e0b5 	.word	0x0801e0b5
 801e094:	0801e0c7 	.word	0x0801e0c7
 801e098:	0801e0dd 	.word	0x0801e0dd
 801e09c:	0801e0e5 	.word	0x0801e0e5
 801e0a0:	0801e0ed 	.word	0x0801e0ed
 801e0a4:	0801e0f5 	.word	0x0801e0f5
 801e0a8:	0801e0fd 	.word	0x0801e0fd
 801e0ac:	0801e105 	.word	0x0801e105
 801e0b0:	0801e10d 	.word	0x0801e10d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e0b4:	88fa      	ldrh	r2, [r7, #6]
 801e0b6:	8a7b      	ldrh	r3, [r7, #18]
 801e0b8:	1ad3      	subs	r3, r2, r3
 801e0ba:	005b      	lsls	r3, r3, #1
 801e0bc:	697a      	ldr	r2, [r7, #20]
 801e0be:	4413      	add	r3, r2
 801e0c0:	881b      	ldrh	r3, [r3, #0]
 801e0c2:	80fb      	strh	r3, [r7, #6]
 801e0c4:	e027      	b.n	801e116 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e0c6:	88fa      	ldrh	r2, [r7, #6]
 801e0c8:	8a7b      	ldrh	r3, [r7, #18]
 801e0ca:	1ad3      	subs	r3, r2, r3
 801e0cc:	b29b      	uxth	r3, r3
 801e0ce:	f003 0301 	and.w	r3, r3, #1
 801e0d2:	b29b      	uxth	r3, r3
 801e0d4:	88fa      	ldrh	r2, [r7, #6]
 801e0d6:	1ad3      	subs	r3, r2, r3
 801e0d8:	80fb      	strh	r3, [r7, #6]
 801e0da:	e01c      	b.n	801e116 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e0dc:	88fb      	ldrh	r3, [r7, #6]
 801e0de:	3b10      	subs	r3, #16
 801e0e0:	80fb      	strh	r3, [r7, #6]
 801e0e2:	e018      	b.n	801e116 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e0e4:	88fb      	ldrh	r3, [r7, #6]
 801e0e6:	3b20      	subs	r3, #32
 801e0e8:	80fb      	strh	r3, [r7, #6]
 801e0ea:	e014      	b.n	801e116 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e0ec:	88fb      	ldrh	r3, [r7, #6]
 801e0ee:	3b30      	subs	r3, #48	@ 0x30
 801e0f0:	80fb      	strh	r3, [r7, #6]
 801e0f2:	e010      	b.n	801e116 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e0f4:	88fb      	ldrh	r3, [r7, #6]
 801e0f6:	3b1a      	subs	r3, #26
 801e0f8:	80fb      	strh	r3, [r7, #6]
 801e0fa:	e00c      	b.n	801e116 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e0fc:	88fb      	ldrh	r3, [r7, #6]
 801e0fe:	3308      	adds	r3, #8
 801e100:	80fb      	strh	r3, [r7, #6]
 801e102:	e008      	b.n	801e116 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e104:	88fb      	ldrh	r3, [r7, #6]
 801e106:	3b50      	subs	r3, #80	@ 0x50
 801e108:	80fb      	strh	r3, [r7, #6]
 801e10a:	e004      	b.n	801e116 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e10c:	88fb      	ldrh	r3, [r7, #6]
 801e10e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e112:	80fb      	strh	r3, [r7, #6]
 801e114:	bf00      	nop
			}
			break;
 801e116:	e008      	b.n	801e12a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e118:	89fb      	ldrh	r3, [r7, #14]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d195      	bne.n	801e04a <ff_wtoupper+0x1a>
 801e11e:	8a3b      	ldrh	r3, [r7, #16]
 801e120:	005b      	lsls	r3, r3, #1
 801e122:	697a      	ldr	r2, [r7, #20]
 801e124:	4413      	add	r3, r2
 801e126:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e128:	e78f      	b.n	801e04a <ff_wtoupper+0x1a>
			break;
 801e12a:	bf00      	nop
	}

	return chr;
 801e12c:	88fb      	ldrh	r3, [r7, #6]
}
 801e12e:	4618      	mov	r0, r3
 801e130:	371c      	adds	r7, #28
 801e132:	46bd      	mov	sp, r7
 801e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e138:	4770      	bx	lr
 801e13a:	bf00      	nop
 801e13c:	0801eddc 	.word	0x0801eddc
 801e140:	0801efd0 	.word	0x0801efd0

0801e144 <memset>:
 801e144:	4402      	add	r2, r0
 801e146:	4603      	mov	r3, r0
 801e148:	4293      	cmp	r3, r2
 801e14a:	d100      	bne.n	801e14e <memset+0xa>
 801e14c:	4770      	bx	lr
 801e14e:	f803 1b01 	strb.w	r1, [r3], #1
 801e152:	e7f9      	b.n	801e148 <memset+0x4>

0801e154 <__errno>:
 801e154:	4b01      	ldr	r3, [pc, #4]	@ (801e15c <__errno+0x8>)
 801e156:	6818      	ldr	r0, [r3, #0]
 801e158:	4770      	bx	lr
 801e15a:	bf00      	nop
 801e15c:	24000028 	.word	0x24000028

0801e160 <__libc_init_array>:
 801e160:	b570      	push	{r4, r5, r6, lr}
 801e162:	4d0d      	ldr	r5, [pc, #52]	@ (801e198 <__libc_init_array+0x38>)
 801e164:	4c0d      	ldr	r4, [pc, #52]	@ (801e19c <__libc_init_array+0x3c>)
 801e166:	1b64      	subs	r4, r4, r5
 801e168:	10a4      	asrs	r4, r4, #2
 801e16a:	2600      	movs	r6, #0
 801e16c:	42a6      	cmp	r6, r4
 801e16e:	d109      	bne.n	801e184 <__libc_init_array+0x24>
 801e170:	4d0b      	ldr	r5, [pc, #44]	@ (801e1a0 <__libc_init_array+0x40>)
 801e172:	4c0c      	ldr	r4, [pc, #48]	@ (801e1a4 <__libc_init_array+0x44>)
 801e174:	f000 fd00 	bl	801eb78 <_init>
 801e178:	1b64      	subs	r4, r4, r5
 801e17a:	10a4      	asrs	r4, r4, #2
 801e17c:	2600      	movs	r6, #0
 801e17e:	42a6      	cmp	r6, r4
 801e180:	d105      	bne.n	801e18e <__libc_init_array+0x2e>
 801e182:	bd70      	pop	{r4, r5, r6, pc}
 801e184:	f855 3b04 	ldr.w	r3, [r5], #4
 801e188:	4798      	blx	r3
 801e18a:	3601      	adds	r6, #1
 801e18c:	e7ee      	b.n	801e16c <__libc_init_array+0xc>
 801e18e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e192:	4798      	blx	r3
 801e194:	3601      	adds	r6, #1
 801e196:	e7f2      	b.n	801e17e <__libc_init_array+0x1e>
 801e198:	080209c0 	.word	0x080209c0
 801e19c:	080209c0 	.word	0x080209c0
 801e1a0:	080209c0 	.word	0x080209c0
 801e1a4:	080209c4 	.word	0x080209c4

0801e1a8 <atan2>:
 801e1a8:	f000 bbae 	b.w	801e908 <__ieee754_atan2>
 801e1ac:	0000      	movs	r0, r0
	...

0801e1b0 <sqrt>:
 801e1b0:	b508      	push	{r3, lr}
 801e1b2:	ed2d 8b04 	vpush	{d8-d9}
 801e1b6:	eeb0 8b40 	vmov.f64	d8, d0
 801e1ba:	f000 fba1 	bl	801e900 <__ieee754_sqrt>
 801e1be:	eeb4 8b48 	vcmp.f64	d8, d8
 801e1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1c6:	d60c      	bvs.n	801e1e2 <sqrt+0x32>
 801e1c8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e1e8 <sqrt+0x38>
 801e1cc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1d4:	d505      	bpl.n	801e1e2 <sqrt+0x32>
 801e1d6:	f7ff ffbd 	bl	801e154 <__errno>
 801e1da:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e1de:	2321      	movs	r3, #33	@ 0x21
 801e1e0:	6003      	str	r3, [r0, #0]
 801e1e2:	ecbd 8b04 	vpop	{d8-d9}
 801e1e6:	bd08      	pop	{r3, pc}
	...

0801e1f0 <atan>:
 801e1f0:	b538      	push	{r3, r4, r5, lr}
 801e1f2:	eeb0 7b40 	vmov.f64	d7, d0
 801e1f6:	ee17 5a90 	vmov	r5, s15
 801e1fa:	4b73      	ldr	r3, [pc, #460]	@ (801e3c8 <atan+0x1d8>)
 801e1fc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e200:	429c      	cmp	r4, r3
 801e202:	d913      	bls.n	801e22c <atan+0x3c>
 801e204:	4b71      	ldr	r3, [pc, #452]	@ (801e3cc <atan+0x1dc>)
 801e206:	429c      	cmp	r4, r3
 801e208:	d803      	bhi.n	801e212 <atan+0x22>
 801e20a:	d107      	bne.n	801e21c <atan+0x2c>
 801e20c:	ee10 3a10 	vmov	r3, s0
 801e210:	b123      	cbz	r3, 801e21c <atan+0x2c>
 801e212:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e216:	eeb0 0b47 	vmov.f64	d0, d7
 801e21a:	bd38      	pop	{r3, r4, r5, pc}
 801e21c:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e358 <atan+0x168>
 801e220:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e360 <atan+0x170>
 801e224:	2d00      	cmp	r5, #0
 801e226:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e22a:	e7f4      	b.n	801e216 <atan+0x26>
 801e22c:	4b68      	ldr	r3, [pc, #416]	@ (801e3d0 <atan+0x1e0>)
 801e22e:	429c      	cmp	r4, r3
 801e230:	d811      	bhi.n	801e256 <atan+0x66>
 801e232:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e236:	429c      	cmp	r4, r3
 801e238:	d80a      	bhi.n	801e250 <atan+0x60>
 801e23a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e23e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e368 <atan+0x178>
 801e242:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e246:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e24e:	dce2      	bgt.n	801e216 <atan+0x26>
 801e250:	f04f 33ff 	mov.w	r3, #4294967295
 801e254:	e013      	b.n	801e27e <atan+0x8e>
 801e256:	f000 f8c5 	bl	801e3e4 <fabs>
 801e25a:	4b5e      	ldr	r3, [pc, #376]	@ (801e3d4 <atan+0x1e4>)
 801e25c:	429c      	cmp	r4, r3
 801e25e:	d84f      	bhi.n	801e300 <atan+0x110>
 801e260:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e264:	429c      	cmp	r4, r3
 801e266:	d841      	bhi.n	801e2ec <atan+0xfc>
 801e268:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e26c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e270:	2300      	movs	r3, #0
 801e272:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e276:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e27a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e27e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e370 <atan+0x180>
 801e282:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e286:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e28a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e378 <atan+0x188>
 801e28e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e292:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e380 <atan+0x190>
 801e296:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e29a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e388 <atan+0x198>
 801e29e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e2a2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e390 <atan+0x1a0>
 801e2a6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e2aa:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e398 <atan+0x1a8>
 801e2ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e3a0 <atan+0x1b0>
 801e2b2:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e2b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3a8 <atan+0x1b8>
 801e2ba:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e2be:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3b0 <atan+0x1c0>
 801e2c2:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2c6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e3b8 <atan+0x1c8>
 801e2ca:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e2ce:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3c0 <atan+0x1d0>
 801e2d2:	1c5a      	adds	r2, r3, #1
 801e2d4:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2d8:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e2dc:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e2e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e2e4:	d121      	bne.n	801e32a <atan+0x13a>
 801e2e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2ea:	e794      	b.n	801e216 <atan+0x26>
 801e2ec:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e2f0:	2301      	movs	r3, #1
 801e2f2:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2f6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e2fa:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e2fe:	e7be      	b.n	801e27e <atan+0x8e>
 801e300:	4b35      	ldr	r3, [pc, #212]	@ (801e3d8 <atan+0x1e8>)
 801e302:	429c      	cmp	r4, r3
 801e304:	d20b      	bcs.n	801e31e <atan+0x12e>
 801e306:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e30a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e30e:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e312:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e316:	2302      	movs	r3, #2
 801e318:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e31c:	e7af      	b.n	801e27e <atan+0x8e>
 801e31e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e322:	2303      	movs	r3, #3
 801e324:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e328:	e7a9      	b.n	801e27e <atan+0x8e>
 801e32a:	4a2c      	ldr	r2, [pc, #176]	@ (801e3dc <atan+0x1ec>)
 801e32c:	492c      	ldr	r1, [pc, #176]	@ (801e3e0 <atan+0x1f0>)
 801e32e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e332:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e336:	ed93 5b00 	vldr	d5, [r3]
 801e33a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e33e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e342:	ed92 7b00 	vldr	d7, [r2]
 801e346:	2d00      	cmp	r5, #0
 801e348:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e34c:	bfb8      	it	lt
 801e34e:	eeb1 7b47 	vneglt.f64	d7, d7
 801e352:	e760      	b.n	801e216 <atan+0x26>
 801e354:	f3af 8000 	nop.w
 801e358:	54442d18 	.word	0x54442d18
 801e35c:	bff921fb 	.word	0xbff921fb
 801e360:	54442d18 	.word	0x54442d18
 801e364:	3ff921fb 	.word	0x3ff921fb
 801e368:	8800759c 	.word	0x8800759c
 801e36c:	7e37e43c 	.word	0x7e37e43c
 801e370:	e322da11 	.word	0xe322da11
 801e374:	3f90ad3a 	.word	0x3f90ad3a
 801e378:	24760deb 	.word	0x24760deb
 801e37c:	3fa97b4b 	.word	0x3fa97b4b
 801e380:	a0d03d51 	.word	0xa0d03d51
 801e384:	3fb10d66 	.word	0x3fb10d66
 801e388:	c54c206e 	.word	0xc54c206e
 801e38c:	3fb745cd 	.word	0x3fb745cd
 801e390:	920083ff 	.word	0x920083ff
 801e394:	3fc24924 	.word	0x3fc24924
 801e398:	5555550d 	.word	0x5555550d
 801e39c:	3fd55555 	.word	0x3fd55555
 801e3a0:	52defd9a 	.word	0x52defd9a
 801e3a4:	bfadde2d 	.word	0xbfadde2d
 801e3a8:	2c6a6c2f 	.word	0x2c6a6c2f
 801e3ac:	bfa2b444 	.word	0xbfa2b444
 801e3b0:	af749a6d 	.word	0xaf749a6d
 801e3b4:	bfb3b0f2 	.word	0xbfb3b0f2
 801e3b8:	fe231671 	.word	0xfe231671
 801e3bc:	bfbc71c6 	.word	0xbfbc71c6
 801e3c0:	9998ebc4 	.word	0x9998ebc4
 801e3c4:	bfc99999 	.word	0xbfc99999
 801e3c8:	440fffff 	.word	0x440fffff
 801e3cc:	7ff00000 	.word	0x7ff00000
 801e3d0:	3fdbffff 	.word	0x3fdbffff
 801e3d4:	3ff2ffff 	.word	0x3ff2ffff
 801e3d8:	40038000 	.word	0x40038000
 801e3dc:	0801f0b0 	.word	0x0801f0b0
 801e3e0:	0801f090 	.word	0x0801f090

0801e3e4 <fabs>:
 801e3e4:	ec51 0b10 	vmov	r0, r1, d0
 801e3e8:	4602      	mov	r2, r0
 801e3ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e3ee:	ec43 2b10 	vmov	d0, r2, r3
 801e3f2:	4770      	bx	lr

0801e3f4 <checkint>:
 801e3f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e3f8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	b570      	push	{r4, r5, r6, lr}
 801e400:	dd2a      	ble.n	801e458 <checkint+0x64>
 801e402:	f240 4333 	movw	r3, #1075	@ 0x433
 801e406:	429a      	cmp	r2, r3
 801e408:	dc24      	bgt.n	801e454 <checkint+0x60>
 801e40a:	1a9b      	subs	r3, r3, r2
 801e40c:	f1a3 0620 	sub.w	r6, r3, #32
 801e410:	f04f 32ff 	mov.w	r2, #4294967295
 801e414:	fa02 f403 	lsl.w	r4, r2, r3
 801e418:	fa02 f606 	lsl.w	r6, r2, r6
 801e41c:	f1c3 0520 	rsb	r5, r3, #32
 801e420:	fa22 f505 	lsr.w	r5, r2, r5
 801e424:	4334      	orrs	r4, r6
 801e426:	432c      	orrs	r4, r5
 801e428:	409a      	lsls	r2, r3
 801e42a:	ea20 0202 	bic.w	r2, r0, r2
 801e42e:	ea21 0404 	bic.w	r4, r1, r4
 801e432:	4322      	orrs	r2, r4
 801e434:	f1a3 0420 	sub.w	r4, r3, #32
 801e438:	f1c3 0220 	rsb	r2, r3, #32
 801e43c:	d10c      	bne.n	801e458 <checkint+0x64>
 801e43e:	40d8      	lsrs	r0, r3
 801e440:	fa01 f302 	lsl.w	r3, r1, r2
 801e444:	4318      	orrs	r0, r3
 801e446:	40e1      	lsrs	r1, r4
 801e448:	4308      	orrs	r0, r1
 801e44a:	f000 0001 	and.w	r0, r0, #1
 801e44e:	f1d0 0002 	rsbs	r0, r0, #2
 801e452:	bd70      	pop	{r4, r5, r6, pc}
 801e454:	2002      	movs	r0, #2
 801e456:	e7fc      	b.n	801e452 <checkint+0x5e>
 801e458:	2000      	movs	r0, #0
 801e45a:	e7fa      	b.n	801e452 <checkint+0x5e>
 801e45c:	0000      	movs	r0, r0
	...

0801e460 <pow>:
 801e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e464:	ee10 4a90 	vmov	r4, s1
 801e468:	ed2d 8b0a 	vpush	{d8-d12}
 801e46c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e470:	ee11 aa90 	vmov	sl, s3
 801e474:	f108 32ff 	add.w	r2, r8, #4294967295
 801e478:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e47c:	429a      	cmp	r2, r3
 801e47e:	ee10 5a10 	vmov	r5, s0
 801e482:	ee11 0a10 	vmov	r0, s2
 801e486:	b087      	sub	sp, #28
 801e488:	46c4      	mov	ip, r8
 801e48a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e48e:	d806      	bhi.n	801e49e <pow+0x3e>
 801e490:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e494:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e498:	2b7f      	cmp	r3, #127	@ 0x7f
 801e49a:	f240 8157 	bls.w	801e74c <pow+0x2ec>
 801e49e:	1802      	adds	r2, r0, r0
 801e4a0:	eb4a 010a 	adc.w	r1, sl, sl
 801e4a4:	f06f 0b01 	mvn.w	fp, #1
 801e4a8:	1e57      	subs	r7, r2, #1
 801e4aa:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e4ae:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e4b2:	45bb      	cmp	fp, r7
 801e4b4:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e4b8:	d242      	bcs.n	801e540 <pow+0xe0>
 801e4ba:	ea52 0301 	orrs.w	r3, r2, r1
 801e4be:	f04f 0300 	mov.w	r3, #0
 801e4c2:	d10c      	bne.n	801e4de <pow+0x7e>
 801e4c4:	196d      	adds	r5, r5, r5
 801e4c6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e4ca:	4164      	adcs	r4, r4
 801e4cc:	42ab      	cmp	r3, r5
 801e4ce:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e4d2:	41a3      	sbcs	r3, r4
 801e4d4:	f0c0 808f 	bcc.w	801e5f6 <pow+0x196>
 801e4d8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e4dc:	e02b      	b.n	801e536 <pow+0xd6>
 801e4de:	4ed4      	ldr	r6, [pc, #848]	@ (801e830 <pow+0x3d0>)
 801e4e0:	42b4      	cmp	r4, r6
 801e4e2:	bf08      	it	eq
 801e4e4:	429d      	cmpeq	r5, r3
 801e4e6:	d109      	bne.n	801e4fc <pow+0x9c>
 801e4e8:	1800      	adds	r0, r0, r0
 801e4ea:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e4ee:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e4f2:	4283      	cmp	r3, r0
 801e4f4:	4bcf      	ldr	r3, [pc, #828]	@ (801e834 <pow+0x3d4>)
 801e4f6:	eb73 030a 	sbcs.w	r3, r3, sl
 801e4fa:	e7eb      	b.n	801e4d4 <pow+0x74>
 801e4fc:	196d      	adds	r5, r5, r5
 801e4fe:	48ce      	ldr	r0, [pc, #824]	@ (801e838 <pow+0x3d8>)
 801e500:	4164      	adcs	r4, r4
 801e502:	42ab      	cmp	r3, r5
 801e504:	eb70 0604 	sbcs.w	r6, r0, r4
 801e508:	d375      	bcc.n	801e5f6 <pow+0x196>
 801e50a:	4281      	cmp	r1, r0
 801e50c:	bf08      	it	eq
 801e50e:	429a      	cmpeq	r2, r3
 801e510:	d171      	bne.n	801e5f6 <pow+0x196>
 801e512:	4aca      	ldr	r2, [pc, #808]	@ (801e83c <pow+0x3dc>)
 801e514:	4294      	cmp	r4, r2
 801e516:	bf08      	it	eq
 801e518:	429d      	cmpeq	r5, r3
 801e51a:	d0dd      	beq.n	801e4d8 <pow+0x78>
 801e51c:	4294      	cmp	r4, r2
 801e51e:	ea6f 0a0a 	mvn.w	sl, sl
 801e522:	bf34      	ite	cc
 801e524:	2400      	movcc	r4, #0
 801e526:	2401      	movcs	r4, #1
 801e528:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e52c:	4554      	cmp	r4, sl
 801e52e:	f040 81dc 	bne.w	801e8ea <pow+0x48a>
 801e532:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e536:	b007      	add	sp, #28
 801e538:	ecbd 8b0a 	vpop	{d8-d12}
 801e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e540:	196f      	adds	r7, r5, r5
 801e542:	eb44 0904 	adc.w	r9, r4, r4
 801e546:	1e7a      	subs	r2, r7, #1
 801e548:	f169 0300 	sbc.w	r3, r9, #0
 801e54c:	4593      	cmp	fp, r2
 801e54e:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e552:	d225      	bcs.n	801e5a0 <pow+0x140>
 801e554:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e558:	2c00      	cmp	r4, #0
 801e55a:	da13      	bge.n	801e584 <pow+0x124>
 801e55c:	4651      	mov	r1, sl
 801e55e:	f7ff ff49 	bl	801e3f4 <checkint>
 801e562:	2801      	cmp	r0, #1
 801e564:	d10e      	bne.n	801e584 <pow+0x124>
 801e566:	eeb1 0b40 	vneg.f64	d0, d0
 801e56a:	ea57 0909 	orrs.w	r9, r7, r9
 801e56e:	d10b      	bne.n	801e588 <pow+0x128>
 801e570:	f1ba 0f00 	cmp.w	sl, #0
 801e574:	dadf      	bge.n	801e536 <pow+0xd6>
 801e576:	b007      	add	sp, #28
 801e578:	ecbd 8b0a 	vpop	{d8-d12}
 801e57c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e580:	f000 bab6 	b.w	801eaf0 <__math_divzero>
 801e584:	2000      	movs	r0, #0
 801e586:	e7f0      	b.n	801e56a <pow+0x10a>
 801e588:	f1ba 0f00 	cmp.w	sl, #0
 801e58c:	dad3      	bge.n	801e536 <pow+0xd6>
 801e58e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e592:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e596:	ed8d 7b00 	vstr	d7, [sp]
 801e59a:	ed9d 0b00 	vldr	d0, [sp]
 801e59e:	e7ca      	b.n	801e536 <pow+0xd6>
 801e5a0:	2c00      	cmp	r4, #0
 801e5a2:	da2b      	bge.n	801e5fc <pow+0x19c>
 801e5a4:	4651      	mov	r1, sl
 801e5a6:	f7ff ff25 	bl	801e3f4 <checkint>
 801e5aa:	b930      	cbnz	r0, 801e5ba <pow+0x15a>
 801e5ac:	b007      	add	sp, #28
 801e5ae:	ecbd 8b0a 	vpop	{d8-d12}
 801e5b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5b6:	f000 bab3 	b.w	801eb20 <__math_invalid>
 801e5ba:	1e41      	subs	r1, r0, #1
 801e5bc:	4248      	negs	r0, r1
 801e5be:	4148      	adcs	r0, r1
 801e5c0:	0480      	lsls	r0, r0, #18
 801e5c2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e5c6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e5ca:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e5ce:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e5d2:	2b7f      	cmp	r3, #127	@ 0x7f
 801e5d4:	d92d      	bls.n	801e632 <pow+0x1d2>
 801e5d6:	4b96      	ldr	r3, [pc, #600]	@ (801e830 <pow+0x3d0>)
 801e5d8:	2000      	movs	r0, #0
 801e5da:	429c      	cmp	r4, r3
 801e5dc:	bf08      	it	eq
 801e5de:	4285      	cmpeq	r5, r0
 801e5e0:	f43f af7a 	beq.w	801e4d8 <pow+0x78>
 801e5e4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e5e8:	428a      	cmp	r2, r1
 801e5ea:	d80c      	bhi.n	801e606 <pow+0x1a6>
 801e5ec:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e5f0:	42a8      	cmp	r0, r5
 801e5f2:	41a3      	sbcs	r3, r4
 801e5f4:	d204      	bcs.n	801e600 <pow+0x1a0>
 801e5f6:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e5fa:	e79c      	b.n	801e536 <pow+0xd6>
 801e5fc:	2000      	movs	r0, #0
 801e5fe:	e7e4      	b.n	801e5ca <pow+0x16a>
 801e600:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e604:	e797      	b.n	801e536 <pow+0xd6>
 801e606:	2d01      	cmp	r5, #1
 801e608:	eb74 0303 	sbcs.w	r3, r4, r3
 801e60c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e610:	bf34      	ite	cc
 801e612:	2301      	movcc	r3, #1
 801e614:	2300      	movcs	r3, #0
 801e616:	4296      	cmp	r6, r2
 801e618:	bf8c      	ite	hi
 801e61a:	2600      	movhi	r6, #0
 801e61c:	2601      	movls	r6, #1
 801e61e:	42b3      	cmp	r3, r6
 801e620:	f000 809c 	beq.w	801e75c <pow+0x2fc>
 801e624:	b007      	add	sp, #28
 801e626:	ecbd 8b0a 	vpop	{d8-d12}
 801e62a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e62e:	f000 ba57 	b.w	801eae0 <__math_oflow>
 801e632:	f1bc 0f00 	cmp.w	ip, #0
 801e636:	d10a      	bne.n	801e64e <pow+0x1ee>
 801e638:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e820 <pow+0x3c0>
 801e63c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e640:	ec53 2b17 	vmov	r2, r3, d7
 801e644:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e648:	4615      	mov	r5, r2
 801e64a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e64e:	4a7c      	ldr	r2, [pc, #496]	@ (801e840 <pow+0x3e0>)
 801e650:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e654:	4422      	add	r2, r4
 801e656:	1513      	asrs	r3, r2, #20
 801e658:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e65c:	ee03 3a10 	vmov	s6, r3
 801e660:	0d12      	lsrs	r2, r2, #20
 801e662:	4b78      	ldr	r3, [pc, #480]	@ (801e844 <pow+0x3e4>)
 801e664:	0512      	lsls	r2, r2, #20
 801e666:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e66a:	1aa7      	subs	r7, r4, r2
 801e66c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e670:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e674:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e678:	1e2e      	subs	r6, r5, #0
 801e67a:	ec47 6b14 	vmov	d4, r6, r7
 801e67e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e682:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e686:	ed93 5b00 	vldr	d5, [r3]
 801e68a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e68e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e692:	ed93 5b02 	vldr	d5, [r3, #8]
 801e696:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e69a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e69e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e6a2:	ed93 5b04 	vldr	d5, [r3, #16]
 801e6a6:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e6aa:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e6ae:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e6b2:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e6b6:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e6ba:	eeb0 9b40 	vmov.f64	d9, d0
 801e6be:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e6c2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e6c6:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e6ca:	ed93 5b06 	vldr	d5, [r3, #24]
 801e6ce:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e6d2:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e6d6:	ed93 4b08 	vldr	d4, [r3, #32]
 801e6da:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e6de:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e6e2:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e6e6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e6ea:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e6ee:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e6f2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e6f6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e6fa:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e6fe:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e702:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e706:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e70a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e70e:	ee16 3a90 	vmov	r3, s13
 801e712:	eeb0 5b46 	vmov.f64	d5, d6
 801e716:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e71a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e71e:	18b2      	adds	r2, r6, r2
 801e720:	2a3e      	cmp	r2, #62	@ 0x3e
 801e722:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e726:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e72a:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e72e:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e732:	d91b      	bls.n	801e76c <pow+0x30c>
 801e734:	2a00      	cmp	r2, #0
 801e736:	da0b      	bge.n	801e750 <pow+0x2f0>
 801e738:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e73c:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e740:	2800      	cmp	r0, #0
 801e742:	f43f aef8 	beq.w	801e536 <pow+0xd6>
 801e746:	eeb1 0b40 	vneg.f64	d0, d0
 801e74a:	e6f4      	b.n	801e536 <pow+0xd6>
 801e74c:	2000      	movs	r0, #0
 801e74e:	e77e      	b.n	801e64e <pow+0x1ee>
 801e750:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e754:	d909      	bls.n	801e76a <pow+0x30a>
 801e756:	2b00      	cmp	r3, #0
 801e758:	f6bf af64 	bge.w	801e624 <pow+0x1c4>
 801e75c:	b007      	add	sp, #28
 801e75e:	ecbd 8b0a 	vpop	{d8-d12}
 801e762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e766:	f000 b9b3 	b.w	801ead0 <__math_uflow>
 801e76a:	2600      	movs	r6, #0
 801e76c:	4936      	ldr	r1, [pc, #216]	@ (801e848 <pow+0x3e8>)
 801e76e:	ed91 4b02 	vldr	d4, [r1, #8]
 801e772:	ed91 3b00 	vldr	d3, [r1]
 801e776:	eeb0 7b44 	vmov.f64	d7, d4
 801e77a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e77e:	ee17 5a10 	vmov	r5, s14
 801e782:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e786:	ed91 4b04 	vldr	d4, [r1, #16]
 801e78a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e78e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e792:	ed91 4b06 	vldr	d4, [r1, #24]
 801e796:	18dc      	adds	r4, r3, r3
 801e798:	f104 030f 	add.w	r3, r4, #15
 801e79c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e7a0:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e7a4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e7a8:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e7ac:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e7b0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e7b4:	ed91 4b08 	vldr	d4, [r1, #32]
 801e7b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e7bc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e7c0:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7c4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e7c8:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7cc:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e7d0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e7d4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e7d8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e7dc:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7e0:	1940      	adds	r0, r0, r5
 801e7e2:	2700      	movs	r7, #0
 801e7e4:	eb17 020c 	adds.w	r2, r7, ip
 801e7e8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e7ec:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7f0:	2e00      	cmp	r6, #0
 801e7f2:	d175      	bne.n	801e8e0 <pow+0x480>
 801e7f4:	42bd      	cmp	r5, r7
 801e7f6:	db29      	blt.n	801e84c <pow+0x3ec>
 801e7f8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e7fc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e800:	4610      	mov	r0, r2
 801e802:	ec41 0b10 	vmov	d0, r0, r1
 801e806:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e80a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e828 <pow+0x3c8>
 801e80e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e812:	b007      	add	sp, #28
 801e814:	ecbd 8b0a 	vpop	{d8-d12}
 801e818:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e81c:	f000 b998 	b.w	801eb50 <__math_check_oflow>
 801e820:	00000000 	.word	0x00000000
 801e824:	43300000 	.word	0x43300000
 801e828:	00000000 	.word	0x00000000
 801e82c:	7f000000 	.word	0x7f000000
 801e830:	3ff00000 	.word	0x3ff00000
 801e834:	fff00000 	.word	0xfff00000
 801e838:	ffe00000 	.word	0xffe00000
 801e83c:	7fe00000 	.word	0x7fe00000
 801e840:	c0196aab 	.word	0xc0196aab
 801e844:	0801f0d0 	.word	0x0801f0d0
 801e848:	08020148 	.word	0x08020148
 801e84c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e850:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e854:	4610      	mov	r0, r2
 801e856:	ec41 0b15 	vmov	d5, r0, r1
 801e85a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e85e:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e862:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e866:	eeb0 4bc7 	vabs.f64	d4, d7
 801e86a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e872:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e8f0 <pow+0x490>
 801e876:	d52a      	bpl.n	801e8ce <pow+0x46e>
 801e878:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e87c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e884:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e888:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e88c:	bf58      	it	pl
 801e88e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e892:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e896:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e89a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e89e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e8a2:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e8a6:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e8aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8b2:	d104      	bne.n	801e8be <pow+0x45e>
 801e8b4:	4632      	mov	r2, r6
 801e8b6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e8ba:	ec43 2b17 	vmov	d7, r2, r3
 801e8be:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e8c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e8c6:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e8ca:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e8ce:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e8d2:	b007      	add	sp, #28
 801e8d4:	ecbd 8b0a 	vpop	{d8-d12}
 801e8d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8dc:	f000 b92f 	b.w	801eb3e <__math_check_uflow>
 801e8e0:	ec43 2b10 	vmov	d0, r2, r3
 801e8e4:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e8e8:	e625      	b.n	801e536 <pow+0xd6>
 801e8ea:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e8f8 <pow+0x498>
 801e8ee:	e622      	b.n	801e536 <pow+0xd6>
 801e8f0:	00000000 	.word	0x00000000
 801e8f4:	00100000 	.word	0x00100000
	...

0801e900 <__ieee754_sqrt>:
 801e900:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e904:	4770      	bx	lr
	...

0801e908 <__ieee754_atan2>:
 801e908:	ee11 1a10 	vmov	r1, s2
 801e90c:	eeb0 7b40 	vmov.f64	d7, d0
 801e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e912:	ee11 5a90 	vmov	r5, s3
 801e916:	424b      	negs	r3, r1
 801e918:	4f59      	ldr	r7, [pc, #356]	@ (801ea80 <__ieee754_atan2+0x178>)
 801e91a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e91e:	430b      	orrs	r3, r1
 801e920:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e924:	42bb      	cmp	r3, r7
 801e926:	d80d      	bhi.n	801e944 <__ieee754_atan2+0x3c>
 801e928:	ee10 ca10 	vmov	ip, s0
 801e92c:	ee17 6a90 	vmov	r6, s15
 801e930:	f1cc 0000 	rsb	r0, ip, #0
 801e934:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e938:	ea40 000c 	orr.w	r0, r0, ip
 801e93c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e940:	42b8      	cmp	r0, r7
 801e942:	d904      	bls.n	801e94e <__ieee754_atan2+0x46>
 801e944:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e948:	eeb0 0b47 	vmov.f64	d0, d7
 801e94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e94e:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e952:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e956:	4308      	orrs	r0, r1
 801e958:	d103      	bne.n	801e962 <__ieee754_atan2+0x5a>
 801e95a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e95e:	f7ff bc47 	b.w	801e1f0 <atan>
 801e962:	17ac      	asrs	r4, r5, #30
 801e964:	f004 0402 	and.w	r4, r4, #2
 801e968:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e96c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e970:	d107      	bne.n	801e982 <__ieee754_atan2+0x7a>
 801e972:	2c02      	cmp	r4, #2
 801e974:	d05c      	beq.n	801ea30 <__ieee754_atan2+0x128>
 801e976:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801ea48 <__ieee754_atan2+0x140>
 801e97a:	2c03      	cmp	r4, #3
 801e97c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e980:	e7e2      	b.n	801e948 <__ieee754_atan2+0x40>
 801e982:	4311      	orrs	r1, r2
 801e984:	d107      	bne.n	801e996 <__ieee754_atan2+0x8e>
 801e986:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801ea50 <__ieee754_atan2+0x148>
 801e98a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801ea58 <__ieee754_atan2+0x150>
 801e98e:	2e00      	cmp	r6, #0
 801e990:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e994:	e7d8      	b.n	801e948 <__ieee754_atan2+0x40>
 801e996:	42ba      	cmp	r2, r7
 801e998:	d10f      	bne.n	801e9ba <__ieee754_atan2+0xb2>
 801e99a:	4293      	cmp	r3, r2
 801e99c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e9a0:	d107      	bne.n	801e9b2 <__ieee754_atan2+0xaa>
 801e9a2:	2c02      	cmp	r4, #2
 801e9a4:	d847      	bhi.n	801ea36 <__ieee754_atan2+0x12e>
 801e9a6:	4b37      	ldr	r3, [pc, #220]	@ (801ea84 <__ieee754_atan2+0x17c>)
 801e9a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e9ac:	ed93 7b00 	vldr	d7, [r3]
 801e9b0:	e7ca      	b.n	801e948 <__ieee754_atan2+0x40>
 801e9b2:	2c02      	cmp	r4, #2
 801e9b4:	d842      	bhi.n	801ea3c <__ieee754_atan2+0x134>
 801e9b6:	4b34      	ldr	r3, [pc, #208]	@ (801ea88 <__ieee754_atan2+0x180>)
 801e9b8:	e7f6      	b.n	801e9a8 <__ieee754_atan2+0xa0>
 801e9ba:	42bb      	cmp	r3, r7
 801e9bc:	d0e3      	beq.n	801e986 <__ieee754_atan2+0x7e>
 801e9be:	1a9b      	subs	r3, r3, r2
 801e9c0:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e9c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e9c8:	da1a      	bge.n	801ea00 <__ieee754_atan2+0xf8>
 801e9ca:	2d00      	cmp	r5, #0
 801e9cc:	da01      	bge.n	801e9d2 <__ieee754_atan2+0xca>
 801e9ce:	323c      	adds	r2, #60	@ 0x3c
 801e9d0:	db19      	blt.n	801ea06 <__ieee754_atan2+0xfe>
 801e9d2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e9d6:	f7ff fd05 	bl	801e3e4 <fabs>
 801e9da:	f7ff fc09 	bl	801e1f0 <atan>
 801e9de:	eeb0 7b40 	vmov.f64	d7, d0
 801e9e2:	2c01      	cmp	r4, #1
 801e9e4:	d012      	beq.n	801ea0c <__ieee754_atan2+0x104>
 801e9e6:	2c02      	cmp	r4, #2
 801e9e8:	d019      	beq.n	801ea1e <__ieee754_atan2+0x116>
 801e9ea:	2c00      	cmp	r4, #0
 801e9ec:	d0ac      	beq.n	801e948 <__ieee754_atan2+0x40>
 801e9ee:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801ea60 <__ieee754_atan2+0x158>
 801e9f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9f6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801ea68 <__ieee754_atan2+0x160>
 801e9fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9fe:	e7a3      	b.n	801e948 <__ieee754_atan2+0x40>
 801ea00:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801ea50 <__ieee754_atan2+0x148>
 801ea04:	e7ed      	b.n	801e9e2 <__ieee754_atan2+0xda>
 801ea06:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801ea70 <__ieee754_atan2+0x168>
 801ea0a:	e7ea      	b.n	801e9e2 <__ieee754_atan2+0xda>
 801ea0c:	ee17 1a90 	vmov	r1, s15
 801ea10:	ec53 2b17 	vmov	r2, r3, d7
 801ea14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ea18:	ec43 2b17 	vmov	d7, r2, r3
 801ea1c:	e794      	b.n	801e948 <__ieee754_atan2+0x40>
 801ea1e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801ea60 <__ieee754_atan2+0x158>
 801ea22:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ea26:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801ea68 <__ieee754_atan2+0x160>
 801ea2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ea2e:	e78b      	b.n	801e948 <__ieee754_atan2+0x40>
 801ea30:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801ea68 <__ieee754_atan2+0x160>
 801ea34:	e788      	b.n	801e948 <__ieee754_atan2+0x40>
 801ea36:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ea78 <__ieee754_atan2+0x170>
 801ea3a:	e785      	b.n	801e948 <__ieee754_atan2+0x40>
 801ea3c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801ea70 <__ieee754_atan2+0x168>
 801ea40:	e782      	b.n	801e948 <__ieee754_atan2+0x40>
 801ea42:	bf00      	nop
 801ea44:	f3af 8000 	nop.w
 801ea48:	54442d18 	.word	0x54442d18
 801ea4c:	c00921fb 	.word	0xc00921fb
 801ea50:	54442d18 	.word	0x54442d18
 801ea54:	3ff921fb 	.word	0x3ff921fb
 801ea58:	54442d18 	.word	0x54442d18
 801ea5c:	bff921fb 	.word	0xbff921fb
 801ea60:	33145c07 	.word	0x33145c07
 801ea64:	3ca1a626 	.word	0x3ca1a626
 801ea68:	54442d18 	.word	0x54442d18
 801ea6c:	400921fb 	.word	0x400921fb
	...
 801ea78:	54442d18 	.word	0x54442d18
 801ea7c:	3fe921fb 	.word	0x3fe921fb
 801ea80:	7ff00000 	.word	0x7ff00000
 801ea84:	08020130 	.word	0x08020130
 801ea88:	08020118 	.word	0x08020118

0801ea8c <with_errno>:
 801ea8c:	b510      	push	{r4, lr}
 801ea8e:	ed2d 8b02 	vpush	{d8}
 801ea92:	eeb0 8b40 	vmov.f64	d8, d0
 801ea96:	4604      	mov	r4, r0
 801ea98:	f7ff fb5c 	bl	801e154 <__errno>
 801ea9c:	eeb0 0b48 	vmov.f64	d0, d8
 801eaa0:	ecbd 8b02 	vpop	{d8}
 801eaa4:	6004      	str	r4, [r0, #0]
 801eaa6:	bd10      	pop	{r4, pc}

0801eaa8 <xflow>:
 801eaa8:	b082      	sub	sp, #8
 801eaaa:	b158      	cbz	r0, 801eac4 <xflow+0x1c>
 801eaac:	eeb1 7b40 	vneg.f64	d7, d0
 801eab0:	ed8d 7b00 	vstr	d7, [sp]
 801eab4:	ed9d 7b00 	vldr	d7, [sp]
 801eab8:	2022      	movs	r0, #34	@ 0x22
 801eaba:	ee20 0b07 	vmul.f64	d0, d0, d7
 801eabe:	b002      	add	sp, #8
 801eac0:	f7ff bfe4 	b.w	801ea8c <with_errno>
 801eac4:	eeb0 7b40 	vmov.f64	d7, d0
 801eac8:	e7f2      	b.n	801eab0 <xflow+0x8>
 801eaca:	0000      	movs	r0, r0
 801eacc:	0000      	movs	r0, r0
	...

0801ead0 <__math_uflow>:
 801ead0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ead8 <__math_uflow+0x8>
 801ead4:	f7ff bfe8 	b.w	801eaa8 <xflow>
 801ead8:	00000000 	.word	0x00000000
 801eadc:	10000000 	.word	0x10000000

0801eae0 <__math_oflow>:
 801eae0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801eae8 <__math_oflow+0x8>
 801eae4:	f7ff bfe0 	b.w	801eaa8 <xflow>
 801eae8:	00000000 	.word	0x00000000
 801eaec:	70000000 	.word	0x70000000

0801eaf0 <__math_divzero>:
 801eaf0:	b082      	sub	sp, #8
 801eaf2:	2800      	cmp	r0, #0
 801eaf4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801eaf8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801eafc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801eb00:	ed8d 7b00 	vstr	d7, [sp]
 801eb04:	ed9d 0b00 	vldr	d0, [sp]
 801eb08:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801eb18 <__math_divzero+0x28>
 801eb0c:	2022      	movs	r0, #34	@ 0x22
 801eb0e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801eb12:	b002      	add	sp, #8
 801eb14:	f7ff bfba 	b.w	801ea8c <with_errno>
	...

0801eb20 <__math_invalid>:
 801eb20:	eeb0 7b40 	vmov.f64	d7, d0
 801eb24:	eeb4 7b47 	vcmp.f64	d7, d7
 801eb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb2c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801eb30:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801eb34:	d602      	bvs.n	801eb3c <__math_invalid+0x1c>
 801eb36:	2021      	movs	r0, #33	@ 0x21
 801eb38:	f7ff bfa8 	b.w	801ea8c <with_errno>
 801eb3c:	4770      	bx	lr

0801eb3e <__math_check_uflow>:
 801eb3e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801eb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb46:	d102      	bne.n	801eb4e <__math_check_uflow+0x10>
 801eb48:	2022      	movs	r0, #34	@ 0x22
 801eb4a:	f7ff bf9f 	b.w	801ea8c <with_errno>
 801eb4e:	4770      	bx	lr

0801eb50 <__math_check_oflow>:
 801eb50:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801eb70 <__math_check_oflow+0x20>
 801eb54:	eeb0 7bc0 	vabs.f64	d7, d0
 801eb58:	eeb4 7b46 	vcmp.f64	d7, d6
 801eb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb60:	dd02      	ble.n	801eb68 <__math_check_oflow+0x18>
 801eb62:	2022      	movs	r0, #34	@ 0x22
 801eb64:	f7ff bf92 	b.w	801ea8c <with_errno>
 801eb68:	4770      	bx	lr
 801eb6a:	bf00      	nop
 801eb6c:	f3af 8000 	nop.w
 801eb70:	ffffffff 	.word	0xffffffff
 801eb74:	7fefffff 	.word	0x7fefffff

0801eb78 <_init>:
 801eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb7a:	bf00      	nop
 801eb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb7e:	bc08      	pop	{r3}
 801eb80:	469e      	mov	lr, r3
 801eb82:	4770      	bx	lr

0801eb84 <_fini>:
 801eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb86:	bf00      	nop
 801eb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb8a:	bc08      	pop	{r3}
 801eb8c:	469e      	mov	lr, r3
 801eb8e:	4770      	bx	lr
