
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e810  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801eae0  0801eae0  00024ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020908  08020908  00026908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020910  08020910  00026910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020914  08020914  00026914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020918  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020990  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020990  000278ac  2**0
                  ALLOC
  9 .IRAM         000041e6  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031ecd  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005efb  00000000  00000000  0007b60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002468  00000000  00000000  00081508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c33  00000000  00000000  00083970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  000855a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000387e4  00000000  00000000  000c1f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e175  00000000  00000000  000fa73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002688b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fc8  00000000  00000000  002688f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  002728bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801eac8 	.word	0x0801eac8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801eac8 	.word	0x0801eac8

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa3e 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fa08 	bl	800eb3c <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e f9e5 	bl	800eb3c <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f886 	bl	800e914 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f86e 	bl	800e914 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fa86 	bl	800ed70 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fa70 	bl	800ed70 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f935 	bl	800eb3c <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fbbb 	bl	80094fc <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fba5 	bl	80094fc <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fb57 	bl	801660c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb51 	bl	801660c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb4b 	bl	801660c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb45 	bl	801660c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fbdb 	bl	800e774 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 fa9b 	bl	80094fc <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fc85 	bl	800e914 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fc75 	bl	800e914 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fc65 	bl	800e914 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fd69 	bl	800eb3c <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 fa3e 	bl	80094fc <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fd44 	bl	800eb3c <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d feca 	bl	800ee84 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041d5 	.word	0x000041d5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 f9c3 	bl	80094fc <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f991 	bl	80094fc <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d fb78 	bl	800e914 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d fb5d 	bl	800e914 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d fb41 	bl	800e914 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d fb25 	bl	800e914 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d fb0c 	bl	800e914 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d faf4 	bl	800e914 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f008 f859 	bl	80094fc <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fdec 	bl	801e100 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c fdda 	bl	801e100 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fdc6 	bl	801e0f8 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fdba 	bl	801e0f8 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00d fa87 	bl	800eb3c <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d fb8c 	bl	800ee84 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	00000048 	.word	0x00000048
 8001780:	000041d4 	.word	0x000041d4

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	00000048 	.word	0x00000048

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00d f8fe 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00d f8e6 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00d f8ce 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00d f8b6 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00d f89e 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00d f886 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00d f86e 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00d f856 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00d f83e 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00d f826 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00d f80e 	bl	800eb3c <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c ff8a 	bl	800eb3c <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fe5c 	bl	800e914 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801eb54 	.word	0x0801eb54

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 fbc4 	bl	80094fc <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fe49 	bl	8014a2c <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f013 f821 	bl	8014e08 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c fcc4 	bl	800e774 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c fcb4 	bl	800e774 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c fc9d 	bl	800e774 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c fc8e 	bl	800e774 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c fc74 	bl	800e774 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c fc69 	bl	800e774 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c fc50 	bl	800e774 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c fc41 	bl	800e774 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c fc17 	bl	800e774 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c fc06 	bl	800e774 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c fb6c 	bl	800e774 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c fb62 	bl	800e774 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c fb52 	bl	800e774 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c fb48 	bl	800e774 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00c f93a 	bl	800e774 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00c f932 	bl	800e774 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00c f8d2 	bl	800e774 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00c f8cd 	bl	800e774 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 ff8e 	bl	80094fc <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 ff65 	bl	80094fc <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 ff59 	bl	80094fc <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <__NVIC_SystemReset+0x24>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <__NVIC_SystemReset+0x24>)
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_SystemReset+0x28>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800268a:	f3bf 8f4f 	dsb	sy
}
 800268e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <__NVIC_SystemReset+0x20>
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	05fa0004 	.word	0x05fa0004

0800269c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
 80026a6:	2300      	movs	r3, #0
 80026a8:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <interpretcommand+0x8c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e02e      	b.n	8002714 <interpretcommand+0x78>

		if(words[j] == ' '){
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <interpretcommand+0x90>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d102      	bne.n	80026c8 <interpretcommand+0x2c>
			vcount++;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	3301      	adds	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <interpretcommand+0x44>
			command[j] = words[j];
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	7819      	ldrb	r1, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <interpretcommand+0x94>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <interpretcommand+0x72>
			value1[J1] = words[j];
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	4910      	ldr	r1, [pc, #64]	@ (800272c <interpretcommand+0x90>)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	3318      	adds	r3, #24
 80026f2:	443b      	add	r3, r7
 80026f4:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80026f8:	7dba      	ldrb	r2, [r7, #22]
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
 80026fc:	3218      	adds	r2, #24
 80026fe:	443a      	add	r2, r7
 8002700:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <interpretcommand+0x98>)
 8002706:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	3301      	adds	r3, #1
 800270c:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b4f      	cmp	r3, #79	@ 0x4f
 8002718:	ddcd      	ble.n	80026b6 <interpretcommand+0x1a>
		}
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	000041be 	.word	0x000041be
 800272c:	000041b4 	.word	0x000041b4
 8002730:	000041b0 	.word	0x000041b0
 8002734:	000041a0 	.word	0x000041a0

08002738 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d14c      	bne.n	80027e4 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800274a:	4bd5      	ldr	r3, [pc, #852]	@ (8002aa0 <executecommand+0x368>)
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002aa4 <executecommand+0x36c>
 800275a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002aa8 <executecommand+0x370>
 8002762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002766:	4bce      	ldr	r3, [pc, #824]	@ (8002aa0 <executecommand+0x368>)
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002aa4 <executecommand+0x36c>
 8002776:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800277a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800277e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002786:	4bc6      	ldr	r3, [pc, #792]	@ (8002aa0 <executecommand+0x368>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002aa4 <executecommand+0x36c>
 8002796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa0 <executecommand+0x368>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002aa4 <executecommand+0x36c>
 80027ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027b2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	4bb8      	ldr	r3, [pc, #736]	@ (8002aa0 <executecommand+0x368>)
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002aa4 <executecommand+0x36c>
 80027ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027d2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002aa8 <executecommand+0x370>
 80027d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	4bb3      	ldr	r3, [pc, #716]	@ (8002aac <executecommand+0x374>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b49      	cmp	r3, #73	@ 0x49
 80027ea:	d14f      	bne.n	800288c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ec:	4bac      	ldr	r3, [pc, #688]	@ (8002aa0 <executecommand+0x368>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002aa4 <executecommand+0x36c>
 80027fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002800:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002aa8 <executecommand+0x370>
 8002804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002808:	4ba5      	ldr	r3, [pc, #660]	@ (8002aa0 <executecommand+0x368>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002aa4 <executecommand+0x36c>
 8002818:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa0 <executecommand+0x368>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002834:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002aa4 <executecommand+0x36c>
 8002838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b97      	ldr	r3, [pc, #604]	@ (8002aa0 <executecommand+0x368>)
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002aa4 <executecommand+0x36c>
 8002850:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002854:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002858:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <executecommand+0x368>)
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002aa4 <executecommand+0x36c>
 8002870:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002874:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002aa8 <executecommand+0x370>
 8002878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <executecommand+0x378>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002886:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab4 <executecommand+0x37c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b44      	cmp	r3, #68	@ 0x44
 8002892:	d14c      	bne.n	800292e <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002894:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <executecommand+0x368>)
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002aa4 <executecommand+0x36c>
 80028a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ab8 <executecommand+0x380>
 80028ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b0:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <executecommand+0x368>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028bc:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002aa4 <executecommand+0x36c>
 80028c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028c4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002aa8 <executecommand+0x370>
 80028c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <executecommand+0x368>)
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002aa4 <executecommand+0x36c>
 80028e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <executecommand+0x368>)
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002aa4 <executecommand+0x36c>
 8002900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <executecommand+0x368>)
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002aa4 <executecommand+0x36c>
 8002918:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800291c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <executecommand+0x384>)
 800292a:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b70      	cmp	r3, #112	@ 0x70
 8002934:	d14c      	bne.n	80029d0 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002936:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <executecommand+0x368>)
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002aa4 <executecommand+0x36c>
 8002946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002aa8 <executecommand+0x370>
 800294e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002952:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <executecommand+0x368>)
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002aa4 <executecommand+0x36c>
 8002962:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002966:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800296a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <executecommand+0x368>)
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002aa4 <executecommand+0x36c>
 8002982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <executecommand+0x368>)
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002aa4 <executecommand+0x36c>
 800299a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800299e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <executecommand+0x368>)
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002aa4 <executecommand+0x36c>
 80029ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029be:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002aa8 <executecommand+0x370>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <executecommand+0x388>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b69      	cmp	r3, #105	@ 0x69
 80029d6:	d14f      	bne.n	8002a78 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <executecommand+0x368>)
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002aa4 <executecommand+0x36c>
 80029e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002aa8 <executecommand+0x370>
 80029f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <executecommand+0x368>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002aa4 <executecommand+0x36c>
 8002a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a08:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <executecommand+0x368>)
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002aa4 <executecommand+0x36c>
 8002a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002aa4 <executecommand+0x36c>
 8002a3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a40:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <executecommand+0x368>)
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002aa4 <executecommand+0x36c>
 8002a5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a60:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002aa8 <executecommand+0x370>
 8002a64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <executecommand+0x38c>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <executecommand+0x390>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d164      	bne.n	8002b4a <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <executecommand+0x368>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002aa4 <executecommand+0x36c>
 8002a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a94:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ab8 <executecommand+0x380>
 8002a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9c:	e016      	b.n	8002acc <executecommand+0x394>
 8002a9e:	bf00      	nop
 8002aa0:	000041a0 	.word	0x000041a0
 8002aa4:	42400000 	.word	0x42400000
 8002aa8:	42c80000 	.word	0x42c80000
 8002aac:	000040cc 	.word	0x000040cc
 8002ab0:	000040d8 	.word	0x000040d8
 8002ab4:	0000409c 	.word	0x0000409c
 8002ab8:	447a0000 	.word	0x447a0000
 8002abc:	000040e4 	.word	0x000040e4
 8002ac0:	0000412c 	.word	0x0000412c
 8002ac4:	00004138 	.word	0x00004138
 8002ac8:	000040a8 	.word	0x000040a8
 8002acc:	4bd3      	ldr	r3, [pc, #844]	@ (8002e1c <executecommand+0x6e4>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e20 <executecommand+0x6e8>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e24 <executecommand+0x6ec>
 8002ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	4bcb      	ldr	r3, [pc, #812]	@ (8002e1c <executecommand+0x6e4>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e20 <executecommand+0x6e8>
 8002afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b00:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e1c <executecommand+0x6e4>)
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b18:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e20 <executecommand+0x6e8>
 8002b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bbd      	ldr	r3, [pc, #756]	@ (8002e1c <executecommand+0x6e4>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e20 <executecommand+0x6e8>
 8002b34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b38:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4bb8      	ldr	r3, [pc, #736]	@ (8002e28 <executecommand+0x6f0>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b46      	cmp	r3, #70	@ 0x46
 8002b50:	d150      	bne.n	8002bf4 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b52:	4bb2      	ldr	r3, [pc, #712]	@ (8002e1c <executecommand+0x6e4>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e20 <executecommand+0x6e8>
 8002b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b66:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e2c <executecommand+0x6f4>
 8002b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6e:	4bab      	ldr	r3, [pc, #684]	@ (8002e1c <executecommand+0x6e4>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e20 <executecommand+0x6e8>
 8002b7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b82:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e24 <executecommand+0x6ec>
 8002b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	@ (8002e1c <executecommand+0x6e4>)
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e20 <executecommand+0x6e8>
 8002b9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	4b9b      	ldr	r3, [pc, #620]	@ (8002e1c <executecommand+0x6e4>)
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e20 <executecommand+0x6e8>
 8002bbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b95      	ldr	r3, [pc, #596]	@ (8002e1c <executecommand+0x6e4>)
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e20 <executecommand+0x6e8>
 8002bd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bda:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <executecommand+0x6f8>)
 8002bf2:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b66      	cmp	r3, #102	@ 0x66
 8002bfa:	d150      	bne.n	8002c9e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <executecommand+0x6e4>)
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e20 <executecommand+0x6e8>
 8002c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c10:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e2c <executecommand+0x6f4>
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	4b80      	ldr	r3, [pc, #512]	@ (8002e1c <executecommand+0x6e4>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e20 <executecommand+0x6e8>
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e24 <executecommand+0x6ec>
 8002c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <executecommand+0x6e4>)
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c44:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e20 <executecommand+0x6e8>
 8002c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	4b70      	ldr	r3, [pc, #448]	@ (8002e1c <executecommand+0x6e4>)
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e20 <executecommand+0x6e8>
 8002c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <executecommand+0x6e4>)
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e20 <executecommand+0x6e8>
 8002c80:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c84:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c94:	ee17 3a90 	vmov	r3, s15
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <executecommand+0x6fc>)
 8002c9c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b61      	cmp	r3, #97	@ 0x61
 8002ca4:	d14c      	bne.n	8002d40 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <executecommand+0x6e4>)
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e20 <executecommand+0x6e8>
 8002cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e24 <executecommand+0x6ec>
 8002cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc2:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <executecommand+0x6e4>)
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e20 <executecommand+0x6e8>
 8002cd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <executecommand+0x6e4>)
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e20 <executecommand+0x6e8>
 8002cf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <executecommand+0x6e4>)
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e20 <executecommand+0x6e8>
 8002d0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d0e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <executecommand+0x6e4>)
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e20 <executecommand+0x6e8>
 8002d2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d2e:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e24 <executecommand+0x6ec>
 8002d32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <executecommand+0x700>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b62      	cmp	r3, #98	@ 0x62
 8002d46:	d14f      	bne.n	8002de8 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d48:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <executecommand+0x6e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d54:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e20 <executecommand+0x6e8>
 8002d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e24 <executecommand+0x6ec>
 8002d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d64:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <executecommand+0x6e4>)
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e20 <executecommand+0x6e8>
 8002d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <executecommand+0x6e4>)
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d90:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e20 <executecommand+0x6e8>
 8002d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <executecommand+0x6e4>)
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e20 <executecommand+0x6e8>
 8002dac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002db0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002db4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <executecommand+0x6e4>)
 8002dbe:	795b      	ldrb	r3, [r3, #5]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e20 <executecommand+0x6e8>
 8002dcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dd0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e24 <executecommand+0x6ec>
 8002dd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <executecommand+0x704>)
 8002dde:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <executecommand+0x708>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b63      	cmp	r3, #99	@ 0x63
 8002dee:	d166      	bne.n	8002ebe <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <executecommand+0x6e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e20 <executecommand+0x6e8>
 8002e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e2c <executecommand+0x6f4>
 8002e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <executecommand+0x6e4>)
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	e018      	b.n	8002e4c <executecommand+0x714>
 8002e1a:	bf00      	nop
 8002e1c:	000041a0 	.word	0x000041a0
 8002e20:	42400000 	.word	0x42400000
 8002e24:	42c80000 	.word	0x42c80000
 8002e28:	00004144 	.word	0x00004144
 8002e2c:	447a0000 	.word	0x447a0000
 8002e30:	00004074 	.word	0x00004074
 8002e34:	00004076 	.word	0x00004076
 8002e38:	000040d0 	.word	0x000040d0
 8002e3c:	000040dc 	.word	0x000040dc
 8002e40:	000040a0 	.word	0x000040a0
 8002e44:	42400000 	.word	0x42400000
 8002e48:	42c80000 	.word	0x42c80000
 8002e4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e44 <executecommand+0x70c>
 8002e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e54:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e48 <executecommand+0x710>
 8002e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	4bd5      	ldr	r3, [pc, #852]	@ (80031b8 <executecommand+0xa80>)
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031bc <executecommand+0xa84>
 8002e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e74:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	4bcd      	ldr	r3, [pc, #820]	@ (80031b8 <executecommand+0xa80>)
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031bc <executecommand+0xa84>
 8002e90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bc7      	ldr	r3, [pc, #796]	@ (80031b8 <executecommand+0xa80>)
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031bc <executecommand+0xa84>
 8002ea8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002eac:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002eb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4bc1      	ldr	r3, [pc, #772]	@ (80031c0 <executecommand+0xa88>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b65      	cmp	r3, #101	@ 0x65
 8002ec4:	d14c      	bne.n	8002f60 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80031b8 <executecommand+0xa80>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031bc <executecommand+0xa84>
 8002ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eda:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031c4 <executecommand+0xa8c>
 8002ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee2:	4bb5      	ldr	r3, [pc, #724]	@ (80031b8 <executecommand+0xa80>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031bc <executecommand+0xa84>
 8002ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002efa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f02:	4bad      	ldr	r3, [pc, #692]	@ (80031b8 <executecommand+0xa80>)
 8002f04:	78db      	ldrb	r3, [r3, #3]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031bc <executecommand+0xa84>
 8002f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80031b8 <executecommand+0xa80>)
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031bc <executecommand+0xa84>
 8002f2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f2e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80031b8 <executecommand+0xa80>)
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031bc <executecommand+0xa84>
 8002f4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f4e:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031c4 <executecommand+0xa8c>
 8002f52:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <executecommand+0xa90>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b67      	cmp	r3, #103	@ 0x67
 8002f66:	d14f      	bne.n	8003008 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f68:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <executecommand+0xa80>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031bc <executecommand+0xa84>
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031c4 <executecommand+0xa8c>
 8002f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <executecommand+0xa80>)
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031bc <executecommand+0xa84>
 8002f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f98:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <executecommand+0xa80>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031bc <executecommand+0xa84>
 8002fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <executecommand+0xa80>)
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031bc <executecommand+0xa84>
 8002fcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fd0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <executecommand+0xa80>)
 8002fde:	795b      	ldrb	r3, [r3, #5]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031bc <executecommand+0xa84>
 8002fec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ff0:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031c4 <executecommand+0xa8c>
 8002ff4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <executecommand+0xa94>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 8003002:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <executecommand+0xa98>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b68      	cmp	r3, #104	@ 0x68
 800300e:	d14c      	bne.n	80030aa <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003010:	4b69      	ldr	r3, [pc, #420]	@ (80031b8 <executecommand+0xa80>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031bc <executecommand+0xa84>
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031d4 <executecommand+0xa9c>
 8003028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <executecommand+0xa80>)
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003038:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031bc <executecommand+0xa84>
 800303c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003040:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031c4 <executecommand+0xa8c>
 8003044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <executecommand+0xa80>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031bc <executecommand+0xa84>
 800305c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <executecommand+0xa80>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031bc <executecommand+0xa84>
 800307c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <executecommand+0xa80>)
 8003086:	795b      	ldrb	r3, [r3, #5]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031bc <executecommand+0xa84>
 8003094:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003098:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800309c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <executecommand+0xaa0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b6a      	cmp	r3, #106	@ 0x6a
 80030b0:	d14c      	bne.n	800314c <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <executecommand+0xa80>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031bc <executecommand+0xa84>
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031c4 <executecommand+0xa8c>
 80030ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <executecommand+0xa80>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <executecommand+0xa84>
 80030de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <executecommand+0xa80>)
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031bc <executecommand+0xa84>
 80030fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <executecommand+0xa80>)
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031bc <executecommand+0xa84>
 8003116:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800311a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800311e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <executecommand+0xa80>)
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031bc <executecommand+0xa84>
 8003136:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800313a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031c4 <executecommand+0xa8c>
 800313e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <executecommand+0xaa4>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b6b      	cmp	r3, #107	@ 0x6b
 8003152:	d167      	bne.n	8003224 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <executecommand+0xa80>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031bc <executecommand+0xa84>
 8003164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003168:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031c4 <executecommand+0xa8c>
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <executecommand+0xa80>)
 8003172:	789b      	ldrb	r3, [r3, #2]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031bc <executecommand+0xa84>
 8003180:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003184:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <executecommand+0xa80>)
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031bc <executecommand+0xa84>
 80031a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <executecommand+0xa80>)
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	e016      	b.n	80031e4 <executecommand+0xaac>
 80031b6:	bf00      	nop
 80031b8:	000041a0 	.word	0x000041a0
 80031bc:	42400000 	.word	0x42400000
 80031c0:	000040e8 	.word	0x000040e8
 80031c4:	42c80000 	.word	0x42c80000
 80031c8:	00004130 	.word	0x00004130
 80031cc:	0000413c 	.word	0x0000413c
 80031d0:	000040ac 	.word	0x000040ac
 80031d4:	447a0000 	.word	0x447a0000
 80031d8:	00004148 	.word	0x00004148
 80031dc:	000040d4 	.word	0x000040d4
 80031e0:	42400000 	.word	0x42400000
 80031e4:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031e0 <executecommand+0xaa8>
 80031e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ec:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f8:	4bba      	ldr	r3, [pc, #744]	@ (80034e4 <executecommand+0xdac>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003204:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80034e8 <executecommand+0xdb0>
 8003208:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320c:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80034ec <executecommand+0xdb4>
 8003210:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	4bb5      	ldr	r3, [pc, #724]	@ (80034f0 <executecommand+0xdb8>)
 800321a:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800321e:	4bb5      	ldr	r3, [pc, #724]	@ (80034f4 <executecommand+0xdbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b6c      	cmp	r3, #108	@ 0x6c
 800322a:	d14c      	bne.n	80032c6 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800322c:	4bad      	ldr	r3, [pc, #692]	@ (80034e4 <executecommand+0xdac>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80034e8 <executecommand+0xdb0>
 800323c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003240:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80034f8 <executecommand+0xdc0>
 8003244:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003248:	4ba6      	ldr	r3, [pc, #664]	@ (80034e4 <executecommand+0xdac>)
 800324a:	789b      	ldrb	r3, [r3, #2]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003254:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80034e8 <executecommand+0xdb0>
 8003258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800325c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80034ec <executecommand+0xdb4>
 8003260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	4b9e      	ldr	r3, [pc, #632]	@ (80034e4 <executecommand+0xdac>)
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80034e8 <executecommand+0xdb0>
 8003278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800327c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <executecommand+0xdac>)
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80034e8 <executecommand+0xdb0>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b90      	ldr	r3, [pc, #576]	@ (80034e4 <executecommand+0xdac>)
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80034e8 <executecommand+0xdb0>
 80032b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032b4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	4b8e      	ldr	r3, [pc, #568]	@ (80034fc <executecommand+0xdc4>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b6d      	cmp	r3, #109	@ 0x6d
 80032cc:	d14c      	bne.n	8003368 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <executecommand+0xdac>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034e8 <executecommand+0xdb0>
 80032de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80034ec <executecommand+0xdb4>
 80032e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ea:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <executecommand+0xdac>)
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80034e8 <executecommand+0xdb0>
 80032fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <executecommand+0xdac>)
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80034e8 <executecommand+0xdb0>
 800331a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <executecommand+0xdac>)
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80034e8 <executecommand+0xdb0>
 8003332:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003336:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800333a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003342:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <executecommand+0xdac>)
 8003344:	795b      	ldrb	r3, [r3, #5]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80034e8 <executecommand+0xdb0>
 8003352:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003356:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80034ec <executecommand+0xdb4>
 800335a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <executecommand+0xdc8>)
 8003364:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b6e      	cmp	r3, #110	@ 0x6e
 800336e:	d14f      	bne.n	8003410 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003370:	4b5c      	ldr	r3, [pc, #368]	@ (80034e4 <executecommand+0xdac>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034e8 <executecommand+0xdb0>
 8003380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003384:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80034ec <executecommand+0xdb4>
 8003388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <executecommand+0xdac>)
 800338e:	789b      	ldrb	r3, [r3, #2]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003398:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80034e8 <executecommand+0xdb0>
 800339c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <executecommand+0xdac>)
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80034e8 <executecommand+0xdb0>
 80033bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <executecommand+0xdac>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80034e8 <executecommand+0xdb0>
 80033d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033d8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <executecommand+0xdac>)
 80033e6:	795b      	ldrb	r3, [r3, #5]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80034e8 <executecommand+0xdb0>
 80033f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f8:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80034ec <executecommand+0xdb4>
 80033fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <executecommand+0xdcc>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <executecommand+0xdd0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b6f      	cmp	r3, #111	@ 0x6f
 8003416:	d14c      	bne.n	80034b2 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <executecommand+0xdac>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80034e8 <executecommand+0xdb0>
 8003428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800342c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80034f8 <executecommand+0xdc0>
 8003430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <executecommand+0xdac>)
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80034e8 <executecommand+0xdb0>
 8003444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003448:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80034ec <executecommand+0xdb4>
 800344c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <executecommand+0xdac>)
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80034e8 <executecommand+0xdb0>
 8003464:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003468:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <executecommand+0xdac>)
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003480:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80034e8 <executecommand+0xdb0>
 8003484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <executecommand+0xdac>)
 800348e:	795b      	ldrb	r3, [r3, #5]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80034e8 <executecommand+0xdb0>
 800349c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	4b17      	ldr	r3, [pc, #92]	@ (800350c <executecommand+0xdd4>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b72      	cmp	r3, #114	@ 0x72
 80034b8:	d101      	bne.n	80034be <executecommand+0xd86>
		NVIC_SystemReset();
 80034ba:	f7ff f8d9 	bl	8002670 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e007      	b.n	80034d4 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <executecommand+0xdac>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	ddf4      	ble.n	80034c4 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	000041a0 	.word	0x000041a0
 80034e8:	42400000 	.word	0x42400000
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	000040e0 	.word	0x000040e0
 80034f4:	000040a4 	.word	0x000040a4
 80034f8:	447a0000 	.word	0x447a0000
 80034fc:	000040ec 	.word	0x000040ec
 8003500:	00004134 	.word	0x00004134
 8003504:	00004140 	.word	0x00004140
 8003508:	000040b0 	.word	0x000040b0
 800350c:	0000414c 	.word	0x0000414c

08003510 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f01a fdb9 	bl	801e094 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <MX_ADC2_Init+0xd0>)
 8003526:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003528:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800352a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800352e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003532:	2208      	movs	r2, #8
 8003534:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800353c:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800353e:	2204      	movs	r2, #4
 8003540:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003544:	2200      	movs	r2, #0
 8003546:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800354a:	2200      	movs	r2, #0
 800354c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003550:	2201      	movs	r2, #1
 8003552:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800355e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003564:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800356e:	2203      	movs	r2, #3
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003580:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800358a:	2201      	movs	r2, #1
 800358c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800358e:	4813      	ldr	r0, [pc, #76]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003590:	f006 fafe 	bl	8009b90 <HAL_ADC_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800359a:	f004 fc45 	bl	8007e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_ADC2_Init+0xd4>)
 80035a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a2:	2306      	movs	r3, #6
 80035a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035a6:	2307      	movs	r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035b0:	2304      	movs	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_ADC2_Init+0xcc>)
 80035c4:	f007 f82a 	bl	800a61c <HAL_ADC_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035ce:	f004 fc2b 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	@ 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	240000ac 	.word	0x240000ac
 80035e0:	40022100 	.word	0x40022100
 80035e4:	19200040 	.word	0x19200040

080035e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_ADC_MspInit+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d162      	bne.n	80036d0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800360c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800361c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	2303      	movs	r3, #3
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	4821      	ldr	r0, [pc, #132]	@ (80036e0 <HAL_ADC_MspInit+0xf8>)
 800365c:	f00a feca 	bl	800e3f4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003660:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_ADC_MspInit+0x100>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003668:	220a      	movs	r2, #10
 800366a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800368a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800368e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003690:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003696:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036a4:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a6:	f008 f853 	bl	800b750 <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036b0:	f004 fbba 	bl	8007e28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f007 ff96 	bl	800b5f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f007 ffad 	bl	800b62a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022100 	.word	0x40022100
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58021400 	.word	0x58021400
 80036e4:	2400011c 	.word	0x2400011c
 80036e8:	40020410 	.word	0x40020410

080036ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036f2:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003716:	4a10      	ldr	r2, [pc, #64]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	200b      	movs	r0, #11
 8003734:	f007 ff5f 	bl	800b5f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003738:	200b      	movs	r0, #11
 800373a:	f007 ff76 	bl	800b62a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2038      	movs	r0, #56	@ 0x38
 8003744:	f007 ff57 	bl	800b5f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003748:	2038      	movs	r0, #56	@ 0x38
 800374a:	f007 ff6e 	bl	800b62a <HAL_NVIC_EnableIRQ>

}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
 800375c:	00000000 	.word	0x00000000

08003760 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 800377c:	4b8c      	ldr	r3, [pc, #560]	@ (80039b0 <Thrust_filter+0x250>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b8c      	ldr	r3, [pc, #560]	@ (80039b4 <Thrust_filter+0x254>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x258>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <Thrust_filter+0x25c>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037a8:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	f003 fe70 	bl	800749c <WartoscBezwgledna>
 80037bc:	eef0 7a40 	vmov.f32	s15, s0
 80037c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c4:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f003 fe62 	bl	800749c <WartoscBezwgledna>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e0:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e4:	ed97 6b08 	vldr	d6, [r7, #32]
 80037e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f8:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80037fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003800:	f01a fcd2 	bl	801e1a8 <pow>
 8003804:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003808:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <Thrust_filter+0x260>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003812:	4293      	cmp	r3, r2
 8003814:	dd03      	ble.n	800381e <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <Thrust_filter+0x260>)
 8003818:	f642 1204 	movw	r2, #10500	@ 0x2904
 800381c:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 800381e:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <Thrust_filter+0x260>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <Thrust_filter+0x264>)
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003830:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	da13      	bge.n	8003860 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003838:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003844:	eeb0 0a67 	vmov.f32	s0, s15
 8003848:	f003 fe28 	bl	800749c <WartoscBezwgledna>
 800384c:	eef0 7a40 	vmov.f32	s15, s0
 8003850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003860:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003876:	eeb0 0b47 	vmov.f64	d0, d7
 800387a:	f01a fc41 	bl	801e100 <sqrt>
 800387e:	eeb0 7b40 	vmov.f64	d7, d0
 8003882:	eeb0 0b47 	vmov.f64	d0, d7
 8003886:	f01a fc3b 	bl	801e100 <sqrt>
 800388a:	eeb0 7b40 	vmov.f64	d7, d0
 800388e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80039a0 <Thrust_filter+0x240>
 8003892:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003896:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389a:	ed97 7b00 	vldr	d7, [r7]
 800389e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 80039a8 <Thrust_filter+0x248>
 80038a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80038aa:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 80038c2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038c6:	eeb1 7b47 	vneg.f64	d7, d7
 80038ca:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038ce:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d513      	bpl.n	8003908 <Thrust_filter+0x1a8>
 80038e0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	dd0a      	ble.n	8003908 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 80038f2:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <Thrust_filter+0x268>)
 80038f4:	ed93 6b00 	vldr	d6, [r3]
 80038f8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <Thrust_filter+0x268>)
 8003902:	ed83 7b00 	vstr	d7, [r3]
 8003906:	e010      	b.n	800392a <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003908:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <Thrust_filter+0x264>)
 800390a:	885b      	ldrh	r3, [r3, #2]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003914:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800391c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <Thrust_filter+0x264>)
 8003928:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <Thrust_filter+0x268>)
 800392c:	ed93 7b00 	vldr	d7, [r3]
 8003930:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003934:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	da09      	bge.n	8003952 <Thrust_filter+0x1f2>
 800393e:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <Thrust_filter+0x268>)
 8003940:	ed93 7b00 	vldr	d7, [r3]
 8003944:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d818      	bhi.n	8003984 <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <Thrust_filter+0x264>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <Thrust_filter+0x268>)
 8003960:	ed93 7b00 	vldr	d7, [r3]
 8003964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003968:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <Thrust_filter+0x264>)
 8003974:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003976:	4914      	ldr	r1, [pc, #80]	@ (80039c8 <Thrust_filter+0x268>)
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <Thrust_filter+0x264>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	f242 7210 	movw	r2, #10000	@ 0x2710
 800398c:	4293      	cmp	r3, r2
 800398e:	d903      	bls.n	8003998 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <Thrust_filter+0x264>)
 8003992:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003996:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003998:	bf00      	nop
 800399a:	3738      	adds	r7, #56	@ 0x38
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00000000 	.word	0x00000000
 80039a4:	409f4000 	.word	0x409f4000
 80039a8:	30553261 	.word	0x30553261
 80039ac:	3f33a92a 	.word	0x3f33a92a
 80039b0:	00004068 	.word	0x00004068
 80039b4:	00004078 	.word	0x00004078
 80039b8:	0000406c 	.word	0x0000406c
 80039bc:	0000407c 	.word	0x0000407c
 80039c0:	0000405c 	.word	0x0000405c
 80039c4:	00000178 	.word	0x00000178
 80039c8:	00004060 	.word	0x00004060

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 83ac 	bhi.w	800413c <PID_cal+0x770>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003b2b 	.word	0x08003b2b
 80039f4:	08003c79 	.word	0x08003c79
 80039f8:	08003d9f 	.word	0x08003d9f
 80039fc:	08003ef1 	.word	0x08003ef1
 8003a00:	08004017 	.word	0x08004017
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4b91      	ldr	r3, [pc, #580]	@ (8003c50 <PID_cal+0x284>)
 8003a0c:	edd3 6a00 	vldr	s13, [r3]
 8003a10:	4b90      	ldr	r3, [pc, #576]	@ (8003c54 <PID_cal+0x288>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	ed93 7a00 	vldr	s14, [r3]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	edd3 6a00 	vldr	s13, [r3]
 8003a32:	4b89      	ldr	r3, [pc, #548]	@ (8003c58 <PID_cal+0x28c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a42:	4b86      	ldr	r3, [pc, #536]	@ (8003c5c <PID_cal+0x290>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c50 <PID_cal+0x284>)
 8003a60:	edd3 6a00 	vldr	s13, [r3]
 8003a64:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <PID_cal+0x288>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c60 <PID_cal+0x294>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3310      	adds	r3, #16
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	4b75      	ldr	r3, [pc, #468]	@ (8003c64 <PID_cal+0x298>)
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	ee07 3a90 	vmov	s15, r3
 8003a94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a98:	4b70      	ldr	r3, [pc, #448]	@ (8003c5c <PID_cal+0x290>)
 8003a9a:	edd3 7a00 	vldr	s15, [r3]
 8003a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <PID_cal+0x298>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <PID_cal+0x290>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3314      	adds	r3, #20
 8003acc:	edd3 6a00 	vldr	s13, [r3]
 8003ad0:	4b64      	ldr	r3, [pc, #400]	@ (8003c64 <PID_cal+0x298>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003adc:	4b5f      	ldr	r3, [pc, #380]	@ (8003c5c <PID_cal+0x290>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ae6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003aea:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003aee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003af2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3310      	adds	r3, #16
 8003afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b02:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3310      	adds	r3, #16
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003b28:	e309      	b.n	800413e <PID_cal+0x772>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	ed93 7a00 	vldr	s14, [r3]
 8003b30:	4b4d      	ldr	r3, [pc, #308]	@ (8003c68 <PID_cal+0x29c>)
 8003b32:	edd3 6a00 	vldr	s13, [r3]
 8003b36:	4b4d      	ldr	r3, [pc, #308]	@ (8003c6c <PID_cal+0x2a0>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	ed93 7a00 	vldr	s14, [r3]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3304      	adds	r3, #4
 8003b54:	edd3 6a00 	vldr	s13, [r3]
 8003b58:	4b45      	ldr	r3, [pc, #276]	@ (8003c70 <PID_cal+0x2a4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b68:	4b3c      	ldr	r3, [pc, #240]	@ (8003c5c <PID_cal+0x290>)
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <PID_cal+0x29c>)
 8003b86:	edd3 6a00 	vldr	s13, [r3]
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <PID_cal+0x2a0>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b94:	4b37      	ldr	r3, [pc, #220]	@ (8003c74 <PID_cal+0x2a8>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	3310      	adds	r3, #16
 8003bae:	ed93 7a00 	vldr	s14, [r3]
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c64 <PID_cal+0x298>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bbe:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <PID_cal+0x290>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bcc:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <PID_cal+0x298>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd8:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <PID_cal+0x290>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	edd3 6a00 	vldr	s13, [r3]
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <PID_cal+0x298>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <PID_cal+0x290>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c0c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003c10:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003c14:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003c18:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3310      	adds	r3, #16
 8003c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c28:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	3310      	adds	r3, #16
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	68d2      	ldr	r2, [r2, #12]
 8003c34:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	ed93 7a00 	vldr	s14, [r3]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003c4e:	e276      	b.n	800413e <PID_cal+0x772>
 8003c50:	00004068 	.word	0x00004068
 8003c54:	00004078 	.word	0x00004078
 8003c58:	0000409c 	.word	0x0000409c
 8003c5c:	0801eb54 	.word	0x0801eb54
 8003c60:	00004084 	.word	0x00004084
 8003c64:	00004076 	.word	0x00004076
 8003c68:	0000406c 	.word	0x0000406c
 8003c6c:	0000407c 	.word	0x0000407c
 8003c70:	000040a0 	.word	0x000040a0
 8003c74:	00004088 	.word	0x00004088

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	ed93 7a00 	vldr	s14, [r3]
 8003c7e:	4b91      	ldr	r3, [pc, #580]	@ (8003ec4 <PID_cal+0x4f8>)
 8003c80:	edd3 6a00 	vldr	s13, [r3]
 8003c84:	4b90      	ldr	r3, [pc, #576]	@ (8003ec8 <PID_cal+0x4fc>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	ed93 7a00 	vldr	s14, [r3]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	edd3 6a00 	vldr	s13, [r3]
 8003ca6:	4b89      	ldr	r3, [pc, #548]	@ (8003ecc <PID_cal+0x500>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cb6:	4b86      	ldr	r3, [pc, #536]	@ (8003ed0 <PID_cal+0x504>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	ed93 7a00 	vldr	s14, [r3]
 8003cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec4 <PID_cal+0x4f8>)
 8003cd4:	edd3 6a00 	vldr	s13, [r3]
 8003cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ec8 <PID_cal+0x4fc>)
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed4 <PID_cal+0x508>)
 8003ce4:	edd3 7a00 	vldr	s15, [r3]
 8003ce8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	ed93 7a00 	vldr	s14, [r3]
 8003d00:	4b75      	ldr	r3, [pc, #468]	@ (8003ed8 <PID_cal+0x50c>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d0c:	4b70      	ldr	r3, [pc, #448]	@ (8003ed0 <PID_cal+0x504>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed8 <PID_cal+0x50c>)
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed0 <PID_cal+0x504>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	edd3 6a00 	vldr	s13, [r3]
 8003d44:	4b64      	ldr	r3, [pc, #400]	@ (8003ed8 <PID_cal+0x50c>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003d50:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed0 <PID_cal+0x504>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003d5e:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003d62:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003d66:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3310      	adds	r3, #16
 8003d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d76:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3310      	adds	r3, #16
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	ed93 7a00 	vldr	s14, [r3]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003d9c:	e1cf      	b.n	800413e <PID_cal+0x772>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	ed93 7a00 	vldr	s14, [r3]
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <PID_cal+0x510>)
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <PID_cal+0x514>)
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	ed93 7a00 	vldr	s14, [r3]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	edd3 6a00 	vldr	s13, [r3]
 8003dcc:	4b45      	ldr	r3, [pc, #276]	@ (8003ee4 <PID_cal+0x518>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <PID_cal+0x504>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3308      	adds	r3, #8
 8003df4:	ed93 7a00 	vldr	s14, [r3]
 8003df8:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <PID_cal+0x510>)
 8003dfa:	edd3 6a00 	vldr	s13, [r3]
 8003dfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <PID_cal+0x514>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e08:	4b37      	ldr	r3, [pc, #220]	@ (8003ee8 <PID_cal+0x51c>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	330c      	adds	r3, #12
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3310      	adds	r3, #16
 8003e22:	ed93 7a00 	vldr	s14, [r3]
 8003e26:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <PID_cal+0x520>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e32:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <PID_cal+0x504>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <PID_cal+0x520>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <PID_cal+0x504>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3314      	adds	r3, #20
 8003e66:	edd3 6a00 	vldr	s13, [r3]
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <PID_cal+0x520>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <PID_cal+0x504>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e80:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003e84:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003e88:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003e8c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3310      	adds	r3, #16
 8003e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e9c:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	ed93 7a00 	vldr	s14, [r3]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003ec2:	e13c      	b.n	800413e <PID_cal+0x772>
 8003ec4:	00004070 	.word	0x00004070
 8003ec8:	00004080 	.word	0x00004080
 8003ecc:	000040a4 	.word	0x000040a4
 8003ed0:	0801eb54 	.word	0x0801eb54
 8003ed4:	0000408c 	.word	0x0000408c
 8003ed8:	00004076 	.word	0x00004076
 8003edc:	000040b4 	.word	0x000040b4
 8003ee0:	0000000c 	.word	0x0000000c
 8003ee4:	000040a8 	.word	0x000040a8
 8003ee8:	00004090 	.word	0x00004090
 8003eec:	00004074 	.word	0x00004074

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	ed93 7a00 	vldr	s14, [r3]
 8003ef6:	4b95      	ldr	r3, [pc, #596]	@ (800414c <PID_cal+0x780>)
 8003ef8:	edd3 6a00 	vldr	s13, [r3]
 8003efc:	4b94      	ldr	r3, [pc, #592]	@ (8004150 <PID_cal+0x784>)
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	ed93 7a00 	vldr	s14, [r3]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	edd3 6a00 	vldr	s13, [r3]
 8003f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004154 <PID_cal+0x788>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8004158 <PID_cal+0x78c>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3308      	adds	r3, #8
 8003f46:	ed93 7a00 	vldr	s14, [r3]
 8003f4a:	4b80      	ldr	r3, [pc, #512]	@ (800414c <PID_cal+0x780>)
 8003f4c:	edd3 6a00 	vldr	s13, [r3]
 8003f50:	4b7f      	ldr	r3, [pc, #508]	@ (8004150 <PID_cal+0x784>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f5a:	4b80      	ldr	r3, [pc, #512]	@ (800415c <PID_cal+0x790>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	330c      	adds	r3, #12
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3310      	adds	r3, #16
 8003f74:	ed93 7a00 	vldr	s14, [r3]
 8003f78:	4b79      	ldr	r3, [pc, #484]	@ (8004160 <PID_cal+0x794>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f84:	4b74      	ldr	r3, [pc, #464]	@ (8004158 <PID_cal+0x78c>)
 8003f86:	edd3 7a00 	vldr	s15, [r3]
 8003f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f8e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f92:	4b73      	ldr	r3, [pc, #460]	@ (8004160 <PID_cal+0x794>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8004158 <PID_cal+0x78c>)
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	edd3 6a00 	vldr	s13, [r3]
 8003fbc:	4b68      	ldr	r3, [pc, #416]	@ (8004160 <PID_cal+0x794>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003fc8:	4b63      	ldr	r3, [pc, #396]	@ (8004158 <PID_cal+0x78c>)
 8003fca:	edd3 7a00 	vldr	s15, [r3]
 8003fce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fd2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003fd6:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003fda:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003fde:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3310      	adds	r3, #16
 8003fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fee:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3310      	adds	r3, #16
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	ed93 7a00 	vldr	s14, [r3]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	330c      	adds	r3, #12
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004014:	e093      	b.n	800413e <PID_cal+0x772>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	4b51      	ldr	r3, [pc, #324]	@ (8004164 <PID_cal+0x798>)
 800401e:	edd3 6a00 	vldr	s13, [r3]
 8004022:	4b51      	ldr	r3, [pc, #324]	@ (8004168 <PID_cal+0x79c>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800402c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	ed93 7a00 	vldr	s14, [r3]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3304      	adds	r3, #4
 8004040:	edd3 6a00 	vldr	s13, [r3]
 8004044:	4b49      	ldr	r3, [pc, #292]	@ (800416c <PID_cal+0x7a0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004050:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004054:	4b40      	ldr	r3, [pc, #256]	@ (8004158 <PID_cal+0x78c>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3308      	adds	r3, #8
 800406c:	ed93 7a00 	vldr	s14, [r3]
 8004070:	4b3c      	ldr	r3, [pc, #240]	@ (8004164 <PID_cal+0x798>)
 8004072:	edd3 6a00 	vldr	s13, [r3]
 8004076:	4b3c      	ldr	r3, [pc, #240]	@ (8004168 <PID_cal+0x79c>)
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004080:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <PID_cal+0x7a4>)
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	330c      	adds	r3, #12
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3310      	adds	r3, #16
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	4b30      	ldr	r3, [pc, #192]	@ (8004160 <PID_cal+0x794>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <PID_cal+0x78c>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80040b8:	4b29      	ldr	r3, [pc, #164]	@ (8004160 <PID_cal+0x794>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c4:	4b24      	ldr	r3, [pc, #144]	@ (8004158 <PID_cal+0x78c>)
 80040c6:	edd3 7a00 	vldr	s15, [r3]
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3314      	adds	r3, #20
 80040de:	edd3 6a00 	vldr	s13, [r3]
 80040e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <PID_cal+0x794>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80040ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004158 <PID_cal+0x78c>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040f8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80040fc:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004100:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004104:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3310      	adds	r3, #16
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004114:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3310      	adds	r3, #16
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	68d2      	ldr	r2, [r2, #12]
 8004120:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	ed93 7a00 	vldr	s14, [r3]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	330c      	adds	r3, #12
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	edc3 7a00 	vstr	s15, [r3]
			break;
 800413a:	e000      	b.n	800413e <PID_cal+0x772>
		default:
			break;
 800413c:	bf00      	nop
	}
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	000040bc 	.word	0x000040bc
 8004150:	00000010 	.word	0x00000010
 8004154:	000040ac 	.word	0x000040ac
 8004158:	0801eb54 	.word	0x0801eb54
 800415c:	00004094 	.word	0x00004094
 8004160:	00004074 	.word	0x00004074
 8004164:	000040b8 	.word	0x000040b8
 8004168:	00000014 	.word	0x00000014
 800416c:	000040b0 	.word	0x000040b0
 8004170:	00004098 	.word	0x00004098
 8004174:	00000000 	.word	0x00000000

08004178 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 800417c:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <Get_batteryvalue+0x78>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800418c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 80041e8 <Get_batteryvalue+0x70>
 8004190:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004198:	ee17 3a90 	vmov	r3, s15
 800419c:	b29a      	uxth	r2, r3
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041a0:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 80041a2:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	2b63      	cmp	r3, #99	@ 0x63
 80041a8:	d902      	bls.n	80041b0 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 80041aa:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041ac:	2264      	movs	r2, #100	@ 0x64
 80041ae:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 80041b0:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	2b18      	cmp	r3, #24
 80041b6:	d802      	bhi.n	80041be <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 80041b8:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041ba:	2207      	movs	r2, #7
 80041bc:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d802      	bhi.n	80041cc <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041c8:	2209      	movs	r2, #9
 80041ca:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	2b18      	cmp	r3, #24
 80041d2:	d902      	bls.n	80041da <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 80041d4:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041d6:	2208      	movs	r2, #8
 80041d8:	829a      	strh	r2, [r3, #20]
	}
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	f3af 8000 	nop.w
 80041e8:	7ae147ae 	.word	0x7ae147ae
 80041ec:	401dae14 	.word	0x401dae14
 80041f0:	24000eb0 	.word	0x24000eb0
 80041f4:	00000178 	.word	0x00000178

080041f8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80041fc:	2200      	movs	r2, #0
 80041fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004202:	4802      	ldr	r0, [pc, #8]	@ (800420c <SELECT+0x14>)
 8004204:	f00a fab6 	bl	800e774 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	58020c00 	.word	0x58020c00

08004210 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004214:	2201      	movs	r2, #1
 8004216:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800421a:	4802      	ldr	r0, [pc, #8]	@ (8004224 <DESELECT+0x14>)
 800421c:	f00a faaa 	bl	800e774 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	58020c00 	.word	0x58020c00

08004228 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004232:	bf00      	nop
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <SPI_TxByte+0x2c>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800423c:	2b20      	cmp	r3, #32
 800423e:	d1f9      	bne.n	8004234 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004240:	1df9      	adds	r1, r7, #7
 8004242:	2364      	movs	r3, #100	@ 0x64
 8004244:	2201      	movs	r2, #1
 8004246:	4804      	ldr	r0, [pc, #16]	@ (8004258 <SPI_TxByte+0x30>)
 8004248:	f010 fbf0 	bl	8014a2c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40020010 	.word	0x40020010
 8004258:	240001ec 	.word	0x240001ec

0800425c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004268:	bf00      	nop
 800426a:	4b08      	ldr	r3, [pc, #32]	@ (800428c <SPI_TxBuffer+0x30>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004272:	2b20      	cmp	r3, #32
 8004274:	d1f9      	bne.n	800426a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	461a      	mov	r2, r3
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4804      	ldr	r0, [pc, #16]	@ (8004290 <SPI_TxBuffer+0x34>)
 800427e:	f011 fb6f 	bl	8015960 <HAL_SPI_Transmit_DMA>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40020010 	.word	0x40020010
 8004290:	240001ec 	.word	0x240001ec

08004294 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800429a:	23ff      	movs	r3, #255	@ 0xff
 800429c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800429e:	bf00      	nop
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <SPI_RxByte+0x34>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d1f9      	bne.n	80042a0 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80042ac:	1dba      	adds	r2, r7, #6
 80042ae:	1df9      	adds	r1, r7, #7
 80042b0:	2364      	movs	r3, #100	@ 0x64
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2301      	movs	r3, #1
 80042b6:	4805      	ldr	r0, [pc, #20]	@ (80042cc <SPI_RxByte+0x38>)
 80042b8:	f011 f818 	bl	80152ec <HAL_SPI_TransmitReceive>

	return data;
 80042bc:	79bb      	ldrb	r3, [r7, #6]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40020010 	.word	0x40020010
 80042cc:	240001ec 	.word	0x240001ec

080042d0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80042d8:	f7ff ffdc 	bl	8004294 <SPI_RxByte>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	701a      	strb	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <SD_ReadyWait+0x30>)
 80042f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042f8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80042fa:	f7ff ffcb 	bl	8004294 <SPI_RxByte>
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2bff      	cmp	r3, #255	@ 0xff
 8004306:	d004      	beq.n	8004312 <SD_ReadyWait+0x26>
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <SD_ReadyWait+0x30>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f3      	bne.n	80042fa <SD_ReadyWait+0xe>

	return res;
 8004312:	79fb      	ldrb	r3, [r7, #7]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	2400037c 	.word	0x2400037c

08004320 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004326:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800432a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800432c:	f7ff ff70 	bl	8004210 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	e005      	b.n	8004342 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004336:	20ff      	movs	r0, #255	@ 0xff
 8004338:	f7ff ff76 	bl	8004228 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3301      	adds	r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b09      	cmp	r3, #9
 8004346:	ddf6      	ble.n	8004336 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004348:	f7ff ff56 	bl	80041f8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800434c:	2340      	movs	r3, #64	@ 0x40
 800434e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004360:	2395      	movs	r3, #149	@ 0x95
 8004362:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004364:	463b      	mov	r3, r7
 8004366:	2106      	movs	r1, #6
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff77 	bl	800425c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800436e:	e002      	b.n	8004376 <SD_PowerOn+0x56>
	{
		cnt--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004376:	f7ff ff8d 	bl	8004294 <SPI_RxByte>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d002      	beq.n	8004386 <SD_PowerOn+0x66>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f4      	bne.n	8004370 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004386:	f7ff ff43 	bl	8004210 <DESELECT>
	SPI_TxByte(0XFF);
 800438a:	20ff      	movs	r0, #255	@ 0xff
 800438c:	f7ff ff4c 	bl	8004228 <SPI_TxByte>

	PowerFlag = 1;
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <SD_PowerOn+0x80>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	24000195 	.word	0x24000195

080043a4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80043a8:	4b03      	ldr	r3, [pc, #12]	@ (80043b8 <SD_PowerOff+0x14>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	24000195 	.word	0x24000195

080043bc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
	return PowerFlag;
 80043c0:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <SD_CheckPower+0x14>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	24000195 	.word	0x24000195

080043d4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 80043de:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <SD_RxDataBlock+0x5c>)
 80043e0:	220a      	movs	r2, #10
 80043e2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80043e4:	f7ff ff56 	bl	8004294 <SPI_RxByte>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2bff      	cmp	r3, #255	@ 0xff
 80043f0:	d104      	bne.n	80043fc <SD_RxDataBlock+0x28>
 80043f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <SD_RxDataBlock+0x5c>)
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f3      	bne.n	80043e4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8004400:	d001      	beq.n	8004406 <SD_RxDataBlock+0x32>
 8004402:	2300      	movs	r3, #0
 8004404:	e00f      	b.n	8004426 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff5f 	bl	80042d0 <SPI_RxBytePtr>
	} while(len--);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	603a      	str	r2, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f4      	bne.n	8004406 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800441c:	f7ff ff3a 	bl	8004294 <SPI_RxByte>
	SPI_RxByte();
 8004420:	f7ff ff38 	bl	8004294 <SPI_RxByte>

	return TRUE;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	24000378 	.word	0x24000378

08004434 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004444:	f7ff ff52 	bl	80042ec <SD_ReadyWait>
 8004448:	4603      	mov	r3, r0
 800444a:	2bff      	cmp	r3, #255	@ 0xff
 800444c:	d001      	beq.n	8004452 <SD_TxDataBlock+0x1e>
 800444e:	2300      	movs	r3, #0
 8004450:	e02f      	b.n	80044b2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fee7 	bl	8004228 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	2bfd      	cmp	r3, #253	@ 0xfd
 800445e:	d020      	beq.n	80044a2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fef9 	bl	800425c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800446a:	f7ff ff13 	bl	8004294 <SPI_RxByte>
		SPI_RxByte();
 800446e:	f7ff ff11 	bl	8004294 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004472:	e00b      	b.n	800448c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004474:	f7ff ff0e 	bl	8004294 <SPI_RxByte>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2b05      	cmp	r3, #5
 8004484:	d006      	beq.n	8004494 <SD_TxDataBlock+0x60>
			i++;
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	3301      	adds	r3, #1
 800448a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800448c:	7bbb      	ldrb	r3, [r7, #14]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d9f0      	bls.n	8004474 <SD_TxDataBlock+0x40>
 8004492:	e000      	b.n	8004496 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004494:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004496:	bf00      	nop
 8004498:	f7ff fefc 	bl	8004294 <SPI_RxByte>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0fa      	beq.n	8004498 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	d101      	bne.n	80044b0 <SD_TxDataBlock+0x7c>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	6039      	str	r1, [r7, #0]
 80044c4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80044c6:	f7ff ff11 	bl	80042ec <SD_ReadyWait>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2bff      	cmp	r3, #255	@ 0xff
 80044ce:	d001      	beq.n	80044d4 <SD_SendCmd+0x1a>
 80044d0:	23ff      	movs	r3, #255	@ 0xff
 80044d2:	e042      	b.n	800455a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fea6 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	0e1b      	lsrs	r3, r3, #24
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fea0 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fe9a 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fe94 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fe8f 	bl	8004228 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d102      	bne.n	8004516 <SD_SendCmd+0x5c>
 8004510:	2395      	movs	r3, #149	@ 0x95
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e007      	b.n	8004526 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b48      	cmp	r3, #72	@ 0x48
 800451a:	d102      	bne.n	8004522 <SD_SendCmd+0x68>
 800451c:	2387      	movs	r3, #135	@ 0x87
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	e001      	b.n	8004526 <SD_SendCmd+0x6c>
	else crc = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fe7d 	bl	8004228 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b4c      	cmp	r3, #76	@ 0x4c
 8004532:	d101      	bne.n	8004538 <SD_SendCmd+0x7e>
 8004534:	f7ff feae 	bl	8004294 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004538:	230a      	movs	r3, #10
 800453a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800453c:	f7ff feaa 	bl	8004294 <SPI_RxByte>
 8004540:	4603      	mov	r3, r0
 8004542:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004544:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004548:	2b00      	cmp	r3, #0
 800454a:	da05      	bge.n	8004558 <SD_SendCmd+0x9e>
 800454c:	7bbb      	ldrb	r3, [r7, #14]
 800454e:	3b01      	subs	r3, #1
 8004550:	73bb      	strb	r3, [r7, #14]
 8004552:	7bbb      	ldrb	r3, [r7, #14]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f1      	bne.n	800453c <SD_SendCmd+0x82>

	return res;
 8004558:	7b7b      	ldrb	r3, [r7, #13]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <SD_disk_initialize+0x14>
 8004574:	2301      	movs	r3, #1
 8004576:	e0d6      	b.n	8004726 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004578:	4b6d      	ldr	r3, [pc, #436]	@ (8004730 <SD_disk_initialize+0x1cc>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <SD_disk_initialize+0x2a>
 8004586:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <SD_disk_initialize+0x1cc>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e0cb      	b.n	8004726 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800458e:	f7ff fec7 	bl	8004320 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004592:	f7ff fe31 	bl	80041f8 <SELECT>

	/* check disk type */
	type = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800459a:	2100      	movs	r1, #0
 800459c:	2040      	movs	r0, #64	@ 0x40
 800459e:	f7ff ff8c 	bl	80044ba <SD_SendCmd>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	f040 80a6 	bne.w	80046f6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80045aa:	4b62      	ldr	r3, [pc, #392]	@ (8004734 <SD_disk_initialize+0x1d0>)
 80045ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045b0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80045b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80045b6:	2048      	movs	r0, #72	@ 0x48
 80045b8:	f7ff ff7f 	bl	80044ba <SD_SendCmd>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d158      	bne.n	8004674 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e00c      	b.n	80045e2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80045c8:	7bfc      	ldrb	r4, [r7, #15]
 80045ca:	f7ff fe63 	bl	8004294 <SPI_RxByte>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	f104 0310 	add.w	r3, r4, #16
 80045d6:	443b      	add	r3, r7
 80045d8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	3301      	adds	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d9ef      	bls.n	80045c8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80045e8:	7abb      	ldrb	r3, [r7, #10]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f040 8083 	bne.w	80046f6 <SD_disk_initialize+0x192>
 80045f0:	7afb      	ldrb	r3, [r7, #11]
 80045f2:	2baa      	cmp	r3, #170	@ 0xaa
 80045f4:	d17f      	bne.n	80046f6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045f6:	2100      	movs	r1, #0
 80045f8:	2077      	movs	r0, #119	@ 0x77
 80045fa:	f7ff ff5e 	bl	80044ba <SD_SendCmd>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d807      	bhi.n	8004614 <SD_disk_initialize+0xb0>
 8004604:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004608:	2069      	movs	r0, #105	@ 0x69
 800460a:	f7ff ff56 	bl	80044ba <SD_SendCmd>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004614:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <SD_disk_initialize+0x1d0>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1eb      	bne.n	80045f6 <SD_disk_initialize+0x92>
 800461e:	e000      	b.n	8004622 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004620:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004622:	4b44      	ldr	r3, [pc, #272]	@ (8004734 <SD_disk_initialize+0x1d0>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d064      	beq.n	80046f6 <SD_disk_initialize+0x192>
 800462c:	2100      	movs	r1, #0
 800462e:	207a      	movs	r0, #122	@ 0x7a
 8004630:	f7ff ff43 	bl	80044ba <SD_SendCmd>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d15d      	bne.n	80046f6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e00c      	b.n	800465a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004640:	7bfc      	ldrb	r4, [r7, #15]
 8004642:	f7ff fe27 	bl	8004294 <SPI_RxByte>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	f104 0310 	add.w	r3, r4, #16
 800464e:	443b      	add	r3, r7
 8004650:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	3301      	adds	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d9ef      	bls.n	8004640 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004660:	7a3b      	ldrb	r3, [r7, #8]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <SD_disk_initialize+0x10a>
 800466a:	230c      	movs	r3, #12
 800466c:	e000      	b.n	8004670 <SD_disk_initialize+0x10c>
 800466e:	2304      	movs	r3, #4
 8004670:	73bb      	strb	r3, [r7, #14]
 8004672:	e040      	b.n	80046f6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004674:	2100      	movs	r1, #0
 8004676:	2077      	movs	r0, #119	@ 0x77
 8004678:	f7ff ff1f 	bl	80044ba <SD_SendCmd>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d808      	bhi.n	8004694 <SD_disk_initialize+0x130>
 8004682:	2100      	movs	r1, #0
 8004684:	2069      	movs	r0, #105	@ 0x69
 8004686:	f7ff ff18 	bl	80044ba <SD_SendCmd>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d801      	bhi.n	8004694 <SD_disk_initialize+0x130>
 8004690:	2302      	movs	r3, #2
 8004692:	e000      	b.n	8004696 <SD_disk_initialize+0x132>
 8004694:	2301      	movs	r3, #1
 8004696:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d10e      	bne.n	80046bc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800469e:	2100      	movs	r1, #0
 80046a0:	2077      	movs	r0, #119	@ 0x77
 80046a2:	f7ff ff0a 	bl	80044ba <SD_SendCmd>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d80e      	bhi.n	80046ca <SD_disk_initialize+0x166>
 80046ac:	2100      	movs	r1, #0
 80046ae:	2069      	movs	r0, #105	@ 0x69
 80046b0:	f7ff ff03 	bl	80044ba <SD_SendCmd>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <SD_disk_initialize+0x166>
 80046ba:	e00d      	b.n	80046d8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046bc:	2100      	movs	r1, #0
 80046be:	2041      	movs	r0, #65	@ 0x41
 80046c0:	f7ff fefb 	bl	80044ba <SD_SendCmd>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80046ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <SD_disk_initialize+0x1d0>)
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e1      	bne.n	8004698 <SD_disk_initialize+0x134>
 80046d4:	e000      	b.n	80046d8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80046d8:	4b16      	ldr	r3, [pc, #88]	@ (8004734 <SD_disk_initialize+0x1d0>)
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <SD_disk_initialize+0x18e>
 80046e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046e6:	2050      	movs	r0, #80	@ 0x50
 80046e8:	f7ff fee7 	bl	80044ba <SD_SendCmd>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <SD_disk_initialize+0x192>
 80046f2:	2300      	movs	r3, #0
 80046f4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80046f6:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <SD_disk_initialize+0x1d4>)
 80046f8:	7bbb      	ldrb	r3, [r7, #14]
 80046fa:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80046fc:	f7ff fd88 	bl	8004210 <DESELECT>
	SPI_RxByte();
 8004700:	f7ff fdc8 	bl	8004294 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <SD_disk_initialize+0x1cc>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <SD_disk_initialize+0x1cc>)
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e001      	b.n	8004720 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800471c:	f7ff fe42 	bl	80043a4 <SD_PowerOff>
	}

	return Stat;
 8004720:	4b03      	ldr	r3, [pc, #12]	@ (8004730 <SD_disk_initialize+0x1cc>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}
 800472e:	bf00      	nop
 8004730:	24000000 	.word	0x24000000
 8004734:	24000378 	.word	0x24000378
 8004738:	24000194 	.word	0x24000194

0800473c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <SD_disk_status+0x14>
 800474c:	2301      	movs	r3, #1
 800474e:	e002      	b.n	8004756 <SD_disk_status+0x1a>
	return Stat;
 8004750:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <SD_disk_status+0x28>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	24000000 	.word	0x24000000

08004768 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <SD_disk_read+0x1c>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <SD_disk_read+0x20>
 8004784:	2304      	movs	r3, #4
 8004786:	e051      	b.n	800482c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004788:	4b2a      	ldr	r3, [pc, #168]	@ (8004834 <SD_disk_read+0xcc>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <SD_disk_read+0x32>
 8004796:	2303      	movs	r3, #3
 8004798:	e048      	b.n	800482c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800479a:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <SD_disk_read+0xd0>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <SD_disk_read+0x44>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	607b      	str	r3, [r7, #4]

	SELECT();
 80047ac:	f7ff fd24 	bl	80041f8 <SELECT>

	if (count == 1)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d111      	bne.n	80047da <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	2051      	movs	r0, #81	@ 0x51
 80047ba:	f7ff fe7e 	bl	80044ba <SD_SendCmd>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d129      	bne.n	8004818 <SD_disk_read+0xb0>
 80047c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f7ff fe03 	bl	80043d4 <SD_RxDataBlock>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d021      	beq.n	8004818 <SD_disk_read+0xb0>
 80047d4:	2300      	movs	r3, #0
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	e01e      	b.n	8004818 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	2052      	movs	r0, #82	@ 0x52
 80047de:	f7ff fe6c 	bl	80044ba <SD_SendCmd>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d117      	bne.n	8004818 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80047e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff fdf1 	bl	80043d4 <SD_RxDataBlock>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <SD_disk_read+0xa6>
				buff += 512;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ed      	bne.n	80047e8 <SD_disk_read+0x80>
 800480c:	e000      	b.n	8004810 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800480e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004810:	2100      	movs	r1, #0
 8004812:	204c      	movs	r0, #76	@ 0x4c
 8004814:	f7ff fe51 	bl	80044ba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004818:	f7ff fcfa 	bl	8004210 <DESELECT>
	SPI_RxByte();
 800481c:	f7ff fd3a 	bl	8004294 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	24000000 	.word	0x24000000
 8004838:	24000194 	.word	0x24000194

0800483c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4603      	mov	r3, r0
 800484a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <SD_disk_write+0x1c>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <SD_disk_write+0x20>
 8004858:	2304      	movs	r3, #4
 800485a:	e06b      	b.n	8004934 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800485c:	4b37      	ldr	r3, [pc, #220]	@ (800493c <SD_disk_write+0x100>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SD_disk_write+0x32>
 800486a:	2303      	movs	r3, #3
 800486c:	e062      	b.n	8004934 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800486e:	4b33      	ldr	r3, [pc, #204]	@ (800493c <SD_disk_write+0x100>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <SD_disk_write+0x44>
 800487c:	2302      	movs	r3, #2
 800487e:	e059      	b.n	8004934 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004880:	4b2f      	ldr	r3, [pc, #188]	@ (8004940 <SD_disk_write+0x104>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <SD_disk_write+0x56>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	025b      	lsls	r3, r3, #9
 8004890:	607b      	str	r3, [r7, #4]

	SELECT();
 8004892:	f7ff fcb1 	bl	80041f8 <SELECT>

	if (count == 1)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d110      	bne.n	80048be <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	2058      	movs	r0, #88	@ 0x58
 80048a0:	f7ff fe0b 	bl	80044ba <SD_SendCmd>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d13a      	bne.n	8004920 <SD_disk_write+0xe4>
 80048aa:	21fe      	movs	r1, #254	@ 0xfe
 80048ac:	68b8      	ldr	r0, [r7, #8]
 80048ae:	f7ff fdc1 	bl	8004434 <SD_TxDataBlock>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d033      	beq.n	8004920 <SD_disk_write+0xe4>
			count = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	e030      	b.n	8004920 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <SD_disk_write+0x104>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80048ca:	2100      	movs	r1, #0
 80048cc:	2077      	movs	r0, #119	@ 0x77
 80048ce:	f7ff fdf4 	bl	80044ba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	2057      	movs	r0, #87	@ 0x57
 80048d6:	f7ff fdf0 	bl	80044ba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	2059      	movs	r0, #89	@ 0x59
 80048de:	f7ff fdec 	bl	80044ba <SD_SendCmd>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11b      	bne.n	8004920 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048e8:	21fc      	movs	r1, #252	@ 0xfc
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff fda2 	bl	8004434 <SD_TxDataBlock>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <SD_disk_write+0xd0>
				buff += 512;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ee      	bne.n	80048e8 <SD_disk_write+0xac>
 800490a:	e000      	b.n	800490e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800490c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800490e:	21fd      	movs	r1, #253	@ 0xfd
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd8f 	bl	8004434 <SD_TxDataBlock>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <SD_disk_write+0xe4>
			{
				count = 1;
 800491c:	2301      	movs	r3, #1
 800491e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004920:	f7ff fc76 	bl	8004210 <DESELECT>
	SPI_RxByte();
 8004924:	f7ff fcb6 	bl	8004294 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	24000000 	.word	0x24000000
 8004940:	24000194 	.word	0x24000194

08004944 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b08b      	sub	sp, #44	@ 0x2c
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	603a      	str	r2, [r7, #0]
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	460b      	mov	r3, r1
 8004952:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <SD_disk_ioctl+0x1e>
 800495e:	2304      	movs	r3, #4
 8004960:	e113      	b.n	8004b8a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004968:	79bb      	ldrb	r3, [r7, #6]
 800496a:	2b05      	cmp	r3, #5
 800496c:	d124      	bne.n	80049b8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d012      	beq.n	800499c <SD_disk_ioctl+0x58>
 8004976:	2b02      	cmp	r3, #2
 8004978:	dc1a      	bgt.n	80049b0 <SD_disk_ioctl+0x6c>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <SD_disk_ioctl+0x40>
 800497e:	2b01      	cmp	r3, #1
 8004980:	d006      	beq.n	8004990 <SD_disk_ioctl+0x4c>
 8004982:	e015      	b.n	80049b0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004984:	f7ff fd0e 	bl	80043a4 <SD_PowerOff>
			res = RES_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800498e:	e0fa      	b.n	8004b86 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004990:	f7ff fcc6 	bl	8004320 <SD_PowerOn>
			res = RES_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800499a:	e0f4      	b.n	8004b86 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	1c5c      	adds	r4, r3, #1
 80049a0:	f7ff fd0c 	bl	80043bc <SD_CheckPower>
 80049a4:	4603      	mov	r3, r0
 80049a6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049ae:	e0ea      	b.n	8004b86 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80049b0:	2304      	movs	r3, #4
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80049b6:	e0e6      	b.n	8004b86 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049b8:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <SD_disk_ioctl+0x250>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <SD_disk_ioctl+0x86>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0df      	b.n	8004b8a <SD_disk_ioctl+0x246>

		SELECT();
 80049ca:	f7ff fc15 	bl	80041f8 <SELECT>

		switch (ctrl)
 80049ce:	79bb      	ldrb	r3, [r7, #6]
 80049d0:	2b0d      	cmp	r3, #13
 80049d2:	f200 80c9 	bhi.w	8004b68 <SD_disk_ioctl+0x224>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <SD_disk_ioctl+0x98>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004ad3 	.word	0x08004ad3
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004ac3 	.word	0x08004ac3
 80049e8:	08004b69 	.word	0x08004b69
 80049ec:	08004b69 	.word	0x08004b69
 80049f0:	08004b69 	.word	0x08004b69
 80049f4:	08004b69 	.word	0x08004b69
 80049f8:	08004b69 	.word	0x08004b69
 80049fc:	08004b69 	.word	0x08004b69
 8004a00:	08004b69 	.word	0x08004b69
 8004a04:	08004b69 	.word	0x08004b69
 8004a08:	08004ae5 	.word	0x08004ae5
 8004a0c:	08004b09 	.word	0x08004b09
 8004a10:	08004b2d 	.word	0x08004b2d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004a14:	2100      	movs	r1, #0
 8004a16:	2049      	movs	r0, #73	@ 0x49
 8004a18:	f7ff fd4f 	bl	80044ba <SD_SendCmd>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 80a6 	bne.w	8004b70 <SD_disk_ioctl+0x22c>
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	2110      	movs	r1, #16
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fcd2 	bl	80043d4 <SD_RxDataBlock>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 809c 	beq.w	8004b70 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004a38:	7b3b      	ldrb	r3, [r7, #12]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d10d      	bne.n	8004a5e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a42:	7d7b      	ldrb	r3, [r7, #21]
 8004a44:	461a      	mov	r2, r3
 8004a46:	7d3b      	ldrb	r3, [r7, #20]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004a54:	8bfb      	ldrh	r3, [r7, #30]
 8004a56:	029a      	lsls	r2, r3, #10
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e02d      	b.n	8004aba <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a5e:	7c7b      	ldrb	r3, [r7, #17]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	7dbb      	ldrb	r3, [r7, #22]
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	7d7b      	ldrb	r3, [r7, #21]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	3302      	adds	r3, #2
 8004a82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a86:	7d3b      	ldrb	r3, [r7, #20]
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	7cbb      	ldrb	r3, [r7, #18]
 8004a9a:	029b      	lsls	r3, r3, #10
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004aac:	8bfa      	ldrh	r2, [r7, #30]
 8004aae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ab2:	3b09      	subs	r3, #9
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004ac0:	e056      	b.n	8004b70 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004ad0:	e055      	b.n	8004b7e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004ad2:	f7ff fc0b 	bl	80042ec <SD_ReadyWait>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2bff      	cmp	r3, #255	@ 0xff
 8004ada:	d14b      	bne.n	8004b74 <SD_disk_ioctl+0x230>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004ae2:	e047      	b.n	8004b74 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	2049      	movs	r0, #73	@ 0x49
 8004ae8:	f7ff fce7 	bl	80044ba <SD_SendCmd>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d142      	bne.n	8004b78 <SD_disk_ioctl+0x234>
 8004af2:	2110      	movs	r1, #16
 8004af4:	6a38      	ldr	r0, [r7, #32]
 8004af6:	f7ff fc6d 	bl	80043d4 <SD_RxDataBlock>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d03b      	beq.n	8004b78 <SD_disk_ioctl+0x234>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b06:	e037      	b.n	8004b78 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b08:	2100      	movs	r1, #0
 8004b0a:	204a      	movs	r0, #74	@ 0x4a
 8004b0c:	f7ff fcd5 	bl	80044ba <SD_SendCmd>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d132      	bne.n	8004b7c <SD_disk_ioctl+0x238>
 8004b16:	2110      	movs	r1, #16
 8004b18:	6a38      	ldr	r0, [r7, #32]
 8004b1a:	f7ff fc5b 	bl	80043d4 <SD_RxDataBlock>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02b      	beq.n	8004b7c <SD_disk_ioctl+0x238>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b2a:	e027      	b.n	8004b7c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	207a      	movs	r0, #122	@ 0x7a
 8004b30:	f7ff fcc3 	bl	80044ba <SD_SendCmd>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b40:	e00b      	b.n	8004b5a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004b42:	6a3c      	ldr	r4, [r7, #32]
 8004b44:	1c63      	adds	r3, r4, #1
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	f7ff fba4 	bl	8004294 <SPI_RxByte>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004b50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b54:	3301      	adds	r3, #1
 8004b56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d9ef      	bls.n	8004b42 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b6e:	e006      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b7c:	bf00      	nop
		}

		DESELECT();
 8004b7e:	f7ff fb47 	bl	8004210 <DESELECT>
		SPI_RxByte();
 8004b82:	f7ff fb87 	bl	8004294 <SPI_RxByte>
	}

	return res;
 8004b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	372c      	adds	r7, #44	@ 0x2c
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	24000000 	.word	0x24000000

08004b98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08e      	sub	sp, #56	@ 0x38
 8004b9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bae:	4b8b      	ldr	r3, [pc, #556]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb4:	4a89      	ldr	r2, [pc, #548]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bb6:	f043 0310 	orr.w	r3, r3, #16
 8004bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bbe:	4b87      	ldr	r3, [pc, #540]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bcc:	4b83      	ldr	r3, [pc, #524]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd2:	4a82      	ldr	r2, [pc, #520]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bea:	4b7c      	ldr	r3, [pc, #496]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf0:	4a7a      	ldr	r2, [pc, #488]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bfa:	4b78      	ldr	r3, [pc, #480]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c08:	4b74      	ldr	r3, [pc, #464]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c0e:	4a73      	ldr	r2, [pc, #460]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c10:	f043 0320 	orr.w	r3, r3, #32
 8004c14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c18:	4b70      	ldr	r3, [pc, #448]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c26:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c36:	4b69      	ldr	r3, [pc, #420]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c44:	4b65      	ldr	r3, [pc, #404]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c54:	4b61      	ldr	r3, [pc, #388]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c62:	4b5e      	ldr	r3, [pc, #376]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c68:	4a5c      	ldr	r2, [pc, #368]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c72:	4b5a      	ldr	r3, [pc, #360]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c80:	4b56      	ldr	r3, [pc, #344]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c86:	4a55      	ldr	r2, [pc, #340]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004ca4:	484e      	ldr	r0, [pc, #312]	@ (8004de0 <MX_GPIO_Init+0x248>)
 8004ca6:	f009 fd65 	bl	800e774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004caa:	2200      	movs	r2, #0
 8004cac:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004cb0:	484c      	ldr	r0, [pc, #304]	@ (8004de4 <MX_GPIO_Init+0x24c>)
 8004cb2:	f009 fd5f 	bl	800e774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004cbc:	484a      	ldr	r0, [pc, #296]	@ (8004de8 <MX_GPIO_Init+0x250>)
 8004cbe:	f009 fd59 	bl	800e774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cc8:	4848      	ldr	r0, [pc, #288]	@ (8004dec <MX_GPIO_Init+0x254>)
 8004cca:	f009 fd53 	bl	800e774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004cd4:	4846      	ldr	r0, [pc, #280]	@ (8004df0 <MX_GPIO_Init+0x258>)
 8004cd6:	f009 fd4d 	bl	800e774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004cda:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	483b      	ldr	r0, [pc, #236]	@ (8004de0 <MX_GPIO_Init+0x248>)
 8004cf4:	f009 fb7e 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004cf8:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d06:	2300      	movs	r3, #0
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4834      	ldr	r0, [pc, #208]	@ (8004de4 <MX_GPIO_Init+0x24c>)
 8004d12:	f009 fb6f 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d28:	4619      	mov	r1, r3
 8004d2a:	482e      	ldr	r0, [pc, #184]	@ (8004de4 <MX_GPIO_Init+0x24c>)
 8004d2c:	f009 fb62 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004d30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d36:	2301      	movs	r3, #1
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d46:	4619      	mov	r1, r3
 8004d48:	4827      	ldr	r0, [pc, #156]	@ (8004de8 <MX_GPIO_Init+0x250>)
 8004d4a:	f009 fb53 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d54:	2301      	movs	r3, #1
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d64:	4619      	mov	r1, r3
 8004d66:	4820      	ldr	r0, [pc, #128]	@ (8004de8 <MX_GPIO_Init+0x250>)
 8004d68:	f009 fb44 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d72:	2301      	movs	r3, #1
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d82:	4619      	mov	r1, r3
 8004d84:	4819      	ldr	r0, [pc, #100]	@ (8004dec <MX_GPIO_Init+0x254>)
 8004d86:	f009 fb35 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004d8a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d90:	2301      	movs	r3, #1
 8004d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da0:	4619      	mov	r1, r3
 8004da2:	4813      	ldr	r0, [pc, #76]	@ (8004df0 <MX_GPIO_Init+0x258>)
 8004da4:	f009 fb26 	bl	800e3f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	480b      	ldr	r0, [pc, #44]	@ (8004dec <MX_GPIO_Init+0x254>)
 8004dc0:	f009 fb18 	bl	800e3f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2028      	movs	r0, #40	@ 0x28
 8004dca:	f006 fc14 	bl	800b5f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004dce:	2028      	movs	r0, #40	@ 0x28
 8004dd0:	f006 fc2b 	bl	800b62a <HAL_NVIC_EnableIRQ>

}
 8004dd4:	bf00      	nop
 8004dd6:	3738      	adds	r7, #56	@ 0x38
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	58021000 	.word	0x58021000
 8004de4:	58020400 	.word	0x58020400
 8004de8:	58020c00 	.word	0x58020c00
 8004dec:	58021800 	.word	0x58021800
 8004df0:	58020000 	.word	0x58020000

08004df4 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <MX_I2C5_Init+0x80>)
 8004dfc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004e04:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e0a:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e10:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004e16:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e22:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004e2e:	4810      	ldr	r0, [pc, #64]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e30:	f009 fcd4 	bl	800e7dc <HAL_I2C_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004e3a:	f002 fff5 	bl	8007e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e3e:	2100      	movs	r1, #0
 8004e40:	480b      	ldr	r0, [pc, #44]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e42:	f00c f88d 	bl	8010f60 <HAL_I2CEx_ConfigAnalogFilter>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004e4c:	f002 ffec 	bl	8007e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004e50:	2100      	movs	r1, #0
 8004e52:	4807      	ldr	r0, [pc, #28]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e54:	f00c f8cf 	bl	8010ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004e5e:	f002 ffe3 	bl	8007e28 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004e62:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004e66:	f00c f913 	bl	8011090 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	24000198 	.word	0x24000198
 8004e74:	40006400 	.word	0x40006400

08004e78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0b8      	sub	sp, #224	@ 0xe0
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	22b8      	movs	r2, #184	@ 0xb8
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f019 f8fb 	bl	801e094 <memset>
  if(i2cHandle->Instance==I2C5)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f50 <HAL_I2C_MspInit+0xd8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d14f      	bne.n	8004f48 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004ea8:	f04f 0208 	mov.w	r2, #8
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004eb4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ebc:	f107 0310 	add.w	r3, r7, #16
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f00d f8a9 	bl	8012018 <HAL_RCCEx_PeriphCLKConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004ecc:	f002 ffac 	bl	8007e28 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ed0:	4b20      	ldr	r3, [pc, #128]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004eee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ef6:	2312      	movs	r3, #18
 8004ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f0e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004f12:	4619      	mov	r1, r3
 8004f14:	4810      	ldr	r0, [pc, #64]	@ (8004f58 <HAL_I2C_MspInit+0xe0>)
 8004f16:	f009 fa6d 	bl	800e3f4 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f20:	4a0c      	ldr	r2, [pc, #48]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	209d      	movs	r0, #157	@ 0x9d
 8004f3e:	f006 fb5a 	bl	800b5f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004f42:	209d      	movs	r0, #157	@ 0x9d
 8004f44:	f006 fb71 	bl	800b62a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004f48:	bf00      	nop
 8004f4a:	37e0      	adds	r7, #224	@ 0xe0
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40006400 	.word	0x40006400
 8004f54:	58024400 	.word	0x58024400
 8004f58:	58020800 	.word	0x58020800

08004f5c <__NVIC_SystemReset>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004f60:	f3bf 8f4f 	dsb	sy
}
 8004f64:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f66:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <__NVIC_SystemReset+0x24>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f6e:	4904      	ldr	r1, [pc, #16]	@ (8004f80 <__NVIC_SystemReset+0x24>)
 8004f70:	4b04      	ldr	r3, [pc, #16]	@ (8004f84 <__NVIC_SystemReset+0x28>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f76:	f3bf 8f4f 	dsb	sy
}
 8004f7a:	bf00      	nop
    __NOP();
 8004f7c:	bf00      	nop
 8004f7e:	e7fd      	b.n	8004f7c <__NVIC_SystemReset+0x20>
 8004f80:	e000ed00 	.word	0xe000ed00
 8004f84:	05fa0004 	.word	0x05fa0004

08004f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	@ 0x28
 8004f8c:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004f8e:	f002 ff1f 	bl	8007dd0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f92:	f004 fa21 	bl	80093d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f96:	f000 ff9f 	bl	8005ed8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004f9a:	f001 f80f 	bl	8005fbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f9e:	f7ff fdfb 	bl	8004b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8004fa2:	f7fe fba3 	bl	80036ec <MX_DMA_Init>
  MX_I2C5_Init();
 8004fa6:	f7ff ff25 	bl	8004df4 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004faa:	f002 ff99 	bl	8007ee0 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004fae:	f7fe faaf 	bl	8003510 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004fb2:	f002 ff3f 	bl	8007e34 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004fb6:	f004 f927 	bl	8009208 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004fba:	f003 fe45 	bl	8008c48 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004fbe:	f003 ffbb 	bl	8008f38 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004fc2:	f003 ff3d 	bl	8008e40 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004fc6:	f015 feb1 	bl	801ad2c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004fca:	f003 fee5 	bl	8008d98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fd4:	489a      	ldr	r0, [pc, #616]	@ (8005240 <main+0x2b8>)
 8004fd6:	f009 fbcd 	bl	800e774 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8004fda:	4b9a      	ldr	r3, [pc, #616]	@ (8005244 <main+0x2bc>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004fe0:	4b99      	ldr	r3, [pc, #612]	@ (8005248 <main+0x2c0>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004fe6:	4b99      	ldr	r3, [pc, #612]	@ (800524c <main+0x2c4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a99      	ldr	r2, [pc, #612]	@ (8005250 <main+0x2c8>)
 8004fec:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004fee:	4b99      	ldr	r3, [pc, #612]	@ (8005254 <main+0x2cc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a97      	ldr	r2, [pc, #604]	@ (8005250 <main+0x2c8>)
 8004ff4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004ff6:	4b98      	ldr	r3, [pc, #608]	@ (8005258 <main+0x2d0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a95      	ldr	r2, [pc, #596]	@ (8005250 <main+0x2c8>)
 8004ffc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004ffe:	4b94      	ldr	r3, [pc, #592]	@ (8005250 <main+0x2c8>)
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8005006:	4b95      	ldr	r3, [pc, #596]	@ (800525c <main+0x2d4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a95      	ldr	r2, [pc, #596]	@ (8005260 <main+0x2d8>)
 800500c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 800500e:	4b95      	ldr	r3, [pc, #596]	@ (8005264 <main+0x2dc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a93      	ldr	r2, [pc, #588]	@ (8005260 <main+0x2d8>)
 8005014:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8005016:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <main+0x2e0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a91      	ldr	r2, [pc, #580]	@ (8005260 <main+0x2d8>)
 800501c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 800501e:	4b90      	ldr	r3, [pc, #576]	@ (8005260 <main+0x2d8>)
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8005026:	4b91      	ldr	r3, [pc, #580]	@ (800526c <main+0x2e4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a91      	ldr	r2, [pc, #580]	@ (8005270 <main+0x2e8>)
 800502c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 800502e:	4b91      	ldr	r3, [pc, #580]	@ (8005274 <main+0x2ec>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a8f      	ldr	r2, [pc, #572]	@ (8005270 <main+0x2e8>)
 8005034:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8005036:	4b90      	ldr	r3, [pc, #576]	@ (8005278 <main+0x2f0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a8d      	ldr	r2, [pc, #564]	@ (8005270 <main+0x2e8>)
 800503c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 800503e:	4b8c      	ldr	r3, [pc, #560]	@ (8005270 <main+0x2e8>)
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8005046:	4b8d      	ldr	r3, [pc, #564]	@ (800527c <main+0x2f4>)
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	4b8c      	ldr	r3, [pc, #560]	@ (8005280 <main+0x2f8>)
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	4b8b      	ldr	r3, [pc, #556]	@ (8005284 <main+0x2fc>)
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	4b8a      	ldr	r3, [pc, #552]	@ (8005288 <main+0x300>)
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	4b89      	ldr	r3, [pc, #548]	@ (800528c <main+0x304>)
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4b88      	ldr	r3, [pc, #544]	@ (8005290 <main+0x308>)
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8005076:	4b87      	ldr	r3, [pc, #540]	@ (8005294 <main+0x30c>)
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 800507e:	4b86      	ldr	r3, [pc, #536]	@ (8005298 <main+0x310>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	4b85      	ldr	r3, [pc, #532]	@ (800529c <main+0x314>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 800508a:	4b85      	ldr	r3, [pc, #532]	@ (80052a0 <main+0x318>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8005090:	4b84      	ldr	r3, [pc, #528]	@ (80052a4 <main+0x31c>)
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4b83      	ldr	r3, [pc, #524]	@ (80052a8 <main+0x320>)
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	4b82      	ldr	r3, [pc, #520]	@ (80052ac <main+0x324>)
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	4b81      	ldr	r3, [pc, #516]	@ (80052b0 <main+0x328>)
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 80050b0:	4b80      	ldr	r3, [pc, #512]	@ (80052b4 <main+0x32c>)
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 80050b8:	4b7f      	ldr	r3, [pc, #508]	@ (80052b8 <main+0x330>)
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 80050c0:	4b7e      	ldr	r3, [pc, #504]	@ (80052bc <main+0x334>)
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 80050c8:	4b7d      	ldr	r3, [pc, #500]	@ (80052c0 <main+0x338>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 80050ce:	4b7d      	ldr	r3, [pc, #500]	@ (80052c4 <main+0x33c>)
 80050d0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050d4:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 10000;
 80050d6:	4b7c      	ldr	r3, [pc, #496]	@ (80052c8 <main+0x340>)
 80050d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050dc:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 10000;
 80050de:	4b7b      	ldr	r3, [pc, #492]	@ (80052cc <main+0x344>)
 80050e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050e4:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 80050e6:	4b7a      	ldr	r3, [pc, #488]	@ (80052d0 <main+0x348>)
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 80050ee:	4b79      	ldr	r3, [pc, #484]	@ (80052d4 <main+0x34c>)
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 80050f6:	4b78      	ldr	r3, [pc, #480]	@ (80052d8 <main+0x350>)
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 80050fe:	4b77      	ldr	r3, [pc, #476]	@ (80052dc <main+0x354>)
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8005106:	4b76      	ldr	r3, [pc, #472]	@ (80052e0 <main+0x358>)
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 800510e:	4b75      	ldr	r3, [pc, #468]	@ (80052e4 <main+0x35c>)
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 8005116:	4b74      	ldr	r3, [pc, #464]	@ (80052e8 <main+0x360>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 800511c:	4b73      	ldr	r3, [pc, #460]	@ (80052ec <main+0x364>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8005122:	4b73      	ldr	r3, [pc, #460]	@ (80052f0 <main+0x368>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8005128:	4b72      	ldr	r3, [pc, #456]	@ (80052f4 <main+0x36c>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 800512e:	4b72      	ldr	r3, [pc, #456]	@ (80052f8 <main+0x370>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005134:	4b71      	ldr	r3, [pc, #452]	@ (80052fc <main+0x374>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 800513a:	4b71      	ldr	r3, [pc, #452]	@ (8005300 <main+0x378>)
 800513c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005140:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8005142:	4b70      	ldr	r3, [pc, #448]	@ (8005304 <main+0x37c>)
 8005144:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005148:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 800514a:	4b6f      	ldr	r3, [pc, #444]	@ (8005308 <main+0x380>)
 800514c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005150:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8005152:	4b6e      	ldr	r3, [pc, #440]	@ (800530c <main+0x384>)
 8005154:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005158:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 800515a:	4b6d      	ldr	r3, [pc, #436]	@ (8005310 <main+0x388>)
 800515c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005160:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8005162:	4b6c      	ldr	r3, [pc, #432]	@ (8005314 <main+0x38c>)
 8005164:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005168:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 800516a:	4b6b      	ldr	r3, [pc, #428]	@ (8005318 <main+0x390>)
 800516c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005170:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8005172:	4b6a      	ldr	r3, [pc, #424]	@ (800531c <main+0x394>)
 8005174:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005178:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 800517a:	4b69      	ldr	r3, [pc, #420]	@ (8005320 <main+0x398>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8005180:	4b68      	ldr	r3, [pc, #416]	@ (8005324 <main+0x39c>)
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8005186:	4b68      	ldr	r3, [pc, #416]	@ (8005328 <main+0x3a0>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 800518c:	4b67      	ldr	r3, [pc, #412]	@ (800532c <main+0x3a4>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8005192:	4b67      	ldr	r3, [pc, #412]	@ (8005330 <main+0x3a8>)
 8005194:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005198:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 800519a:	4b66      	ldr	r3, [pc, #408]	@ (8005334 <main+0x3ac>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	4b65      	ldr	r3, [pc, #404]	@ (8005338 <main+0x3b0>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	4b65      	ldr	r3, [pc, #404]	@ (800533c <main+0x3b4>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 80051ac:	4b64      	ldr	r3, [pc, #400]	@ (8005340 <main+0x3b8>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	4b64      	ldr	r3, [pc, #400]	@ (8005344 <main+0x3bc>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 80051b8:	4963      	ldr	r1, [pc, #396]	@ (8005348 <main+0x3c0>)
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	e9c1 2300 	strd	r2, r3, [r1]

	  	p_angular_rate_pitchfactor = 14;
 80051c6:	4b61      	ldr	r3, [pc, #388]	@ (800534c <main+0x3c4>)
 80051c8:	4a61      	ldr	r2, [pc, #388]	@ (8005350 <main+0x3c8>)
 80051ca:	601a      	str	r2, [r3, #0]
		p_angular_rate_roolfactor = 12;
 80051cc:	4b61      	ldr	r3, [pc, #388]	@ (8005354 <main+0x3cc>)
 80051ce:	4a62      	ldr	r2, [pc, #392]	@ (8005358 <main+0x3d0>)
 80051d0:	601a      	str	r2, [r3, #0]
		p_angular_rate_yawfactor = 5;// -> 10
 80051d2:	4b62      	ldr	r3, [pc, #392]	@ (800535c <main+0x3d4>)
 80051d4:	4a62      	ldr	r2, [pc, #392]	@ (8005360 <main+0x3d8>)
 80051d6:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		i_angular_rate_pitchfactor = 10;
 80051d8:	4b62      	ldr	r3, [pc, #392]	@ (8005364 <main+0x3dc>)
 80051da:	4a63      	ldr	r2, [pc, #396]	@ (8005368 <main+0x3e0>)
 80051dc:	601a      	str	r2, [r3, #0]
		i_angular_rate_roolfactor = 10;
 80051de:	4b63      	ldr	r3, [pc, #396]	@ (800536c <main+0x3e4>)
 80051e0:	4a61      	ldr	r2, [pc, #388]	@ (8005368 <main+0x3e0>)
 80051e2:	601a      	str	r2, [r3, #0]
		i_angular_rate_yawfactor = 0;
 80051e4:	4b62      	ldr	r3, [pc, #392]	@ (8005370 <main+0x3e8>)
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		d_angular_rate_pitchfactor = 30;
 80051ec:	4b61      	ldr	r3, [pc, #388]	@ (8005374 <main+0x3ec>)
 80051ee:	4a62      	ldr	r2, [pc, #392]	@ (8005378 <main+0x3f0>)
 80051f0:	601a      	str	r2, [r3, #0]
		d_angular_rate_roolfactor = 20;
 80051f2:	4b62      	ldr	r3, [pc, #392]	@ (800537c <main+0x3f4>)
 80051f4:	4a62      	ldr	r2, [pc, #392]	@ (8005380 <main+0x3f8>)
 80051f6:	601a      	str	r2, [r3, #0]
		d_angular_rate_yawfactor = 5;
 80051f8:	4b62      	ldr	r3, [pc, #392]	@ (8005384 <main+0x3fc>)
 80051fa:	4a59      	ldr	r2, [pc, #356]	@ (8005360 <main+0x3d8>)
 80051fc:	601a      	str	r2, [r3, #0]

		p_pitchfactor = 5.5;
 80051fe:	4b13      	ldr	r3, [pc, #76]	@ (800524c <main+0x2c4>)
 8005200:	4a61      	ldr	r2, [pc, #388]	@ (8005388 <main+0x400>)
 8005202:	601a      	str	r2, [r3, #0]
		p_roolfactor = 6;//5
 8005204:	4b15      	ldr	r3, [pc, #84]	@ (800525c <main+0x2d4>)
 8005206:	4a61      	ldr	r2, [pc, #388]	@ (800538c <main+0x404>)
 8005208:	601a      	str	r2, [r3, #0]
		p_yawfactor = 5;
 800520a:	4b18      	ldr	r3, [pc, #96]	@ (800526c <main+0x2e4>)
 800520c:	4a54      	ldr	r2, [pc, #336]	@ (8005360 <main+0x3d8>)
 800520e:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		i_pitchfactor = 9;//8
 8005210:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <main+0x2cc>)
 8005212:	4a5f      	ldr	r2, [pc, #380]	@ (8005390 <main+0x408>)
 8005214:	601a      	str	r2, [r3, #0]
		i_roolfactor = 8;//10
 8005216:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <main+0x2dc>)
 8005218:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800521c:	601a      	str	r2, [r3, #0]
		i_yawfactor = 0;
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <main+0x2ec>)
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		d_pitchfactor = 30;//25
 8005226:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <main+0x2d0>)
 8005228:	4a53      	ldr	r2, [pc, #332]	@ (8005378 <main+0x3f0>)
 800522a:	601a      	str	r2, [r3, #0]
		d_roolfactor = 20;
 800522c:	4b0e      	ldr	r3, [pc, #56]	@ (8005268 <main+0x2e0>)
 800522e:	4a54      	ldr	r2, [pc, #336]	@ (8005380 <main+0x3f8>)
 8005230:	601a      	str	r2, [r3, #0]
		d_yawfactor = 0;
 8005232:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <main+0x2f0>)
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 800523a:	4b44      	ldr	r3, [pc, #272]	@ (800534c <main+0x3c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	e0a9      	b.n	8005394 <main+0x40c>
 8005240:	58021800 	.word	0x58021800
 8005244:	00000074 	.word	0x00000074
 8005248:	0000419c 	.word	0x0000419c
 800524c:	000040cc 	.word	0x000040cc
 8005250:	000040f0 	.word	0x000040f0
 8005254:	000040d8 	.word	0x000040d8
 8005258:	000040e4 	.word	0x000040e4
 800525c:	000040d0 	.word	0x000040d0
 8005260:	00004104 	.word	0x00004104
 8005264:	000040dc 	.word	0x000040dc
 8005268:	000040e8 	.word	0x000040e8
 800526c:	000040d4 	.word	0x000040d4
 8005270:	00004118 	.word	0x00004118
 8005274:	000040e0 	.word	0x000040e0
 8005278:	000040ec 	.word	0x000040ec
 800527c:	00000018 	.word	0x00000018
 8005280:	0000001c 	.word	0x0000001c
 8005284:	00000020 	.word	0x00000020
 8005288:	00000024 	.word	0x00000024
 800528c:	00000028 	.word	0x00000028
 8005290:	0000002c 	.word	0x0000002c
 8005294:	00000058 	.word	0x00000058
 8005298:	0000006c 	.word	0x0000006c
 800529c:	00000070 	.word	0x00000070
 80052a0:	00000078 	.word	0x00000078
 80052a4:	000000dc 	.word	0x000000dc
 80052a8:	000000e0 	.word	0x000000e0
 80052ac:	000000e4 	.word	0x000000e4
 80052b0:	000000e8 	.word	0x000000e8
 80052b4:	00004050 	.word	0x00004050
 80052b8:	00004054 	.word	0x00004054
 80052bc:	00004058 	.word	0x00004058
 80052c0:	0000405c 	.word	0x0000405c
 80052c4:	0000405e 	.word	0x0000405e
 80052c8:	00004074 	.word	0x00004074
 80052cc:	00004076 	.word	0x00004076
 80052d0:	00004084 	.word	0x00004084
 80052d4:	00004088 	.word	0x00004088
 80052d8:	0000408c 	.word	0x0000408c
 80052dc:	00004090 	.word	0x00004090
 80052e0:	00004094 	.word	0x00004094
 80052e4:	00004098 	.word	0x00004098
 80052e8:	0000409c 	.word	0x0000409c
 80052ec:	000040a0 	.word	0x000040a0
 80052f0:	000040a4 	.word	0x000040a4
 80052f4:	000040a8 	.word	0x000040a8
 80052f8:	000040ac 	.word	0x000040ac
 80052fc:	000040b0 	.word	0x000040b0
 8005300:	0000418c 	.word	0x0000418c
 8005304:	0000418e 	.word	0x0000418e
 8005308:	00004190 	.word	0x00004190
 800530c:	00004192 	.word	0x00004192
 8005310:	00004194 	.word	0x00004194
 8005314:	00004196 	.word	0x00004196
 8005318:	00004198 	.word	0x00004198
 800531c:	0000419a 	.word	0x0000419a
 8005320:	000041be 	.word	0x000041be
 8005324:	000041bf 	.word	0x000041bf
 8005328:	000041c4 	.word	0x000041c4
 800532c:	000041c8 	.word	0x000041c8
 8005330:	000041d0 	.word	0x000041d0
 8005334:	000041d4 	.word	0x000041d4
 8005338:	000041d5 	.word	0x000041d5
 800533c:	000041d6 	.word	0x000041d6
 8005340:	000041d8 	.word	0x000041d8
 8005344:	000041dc 	.word	0x000041dc
 8005348:	00004060 	.word	0x00004060
 800534c:	0000412c 	.word	0x0000412c
 8005350:	41600000 	.word	0x41600000
 8005354:	00004130 	.word	0x00004130
 8005358:	41400000 	.word	0x41400000
 800535c:	00004134 	.word	0x00004134
 8005360:	40a00000 	.word	0x40a00000
 8005364:	00004138 	.word	0x00004138
 8005368:	41200000 	.word	0x41200000
 800536c:	0000413c 	.word	0x0000413c
 8005370:	00004140 	.word	0x00004140
 8005374:	00004144 	.word	0x00004144
 8005378:	41f00000 	.word	0x41f00000
 800537c:	00004148 	.word	0x00004148
 8005380:	41a00000 	.word	0x41a00000
 8005384:	0000414c 	.word	0x0000414c
 8005388:	40b00000 	.word	0x40b00000
 800538c:	40c00000 	.word	0x40c00000
 8005390:	41100000 	.word	0x41100000
 8005394:	4aa8      	ldr	r2, [pc, #672]	@ (8005638 <main+0x6b0>)
 8005396:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005398:	4ba8      	ldr	r3, [pc, #672]	@ (800563c <main+0x6b4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aa6      	ldr	r2, [pc, #664]	@ (8005638 <main+0x6b0>)
 800539e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 80053a0:	4ba7      	ldr	r3, [pc, #668]	@ (8005640 <main+0x6b8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4aa4      	ldr	r2, [pc, #656]	@ (8005638 <main+0x6b0>)
 80053a6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 80053a8:	4ba6      	ldr	r3, [pc, #664]	@ (8005644 <main+0x6bc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4aa6      	ldr	r2, [pc, #664]	@ (8005648 <main+0x6c0>)
 80053ae:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 80053b0:	4ba6      	ldr	r3, [pc, #664]	@ (800564c <main+0x6c4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4aa4      	ldr	r2, [pc, #656]	@ (8005648 <main+0x6c0>)
 80053b6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 80053b8:	4ba5      	ldr	r3, [pc, #660]	@ (8005650 <main+0x6c8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4aa2      	ldr	r2, [pc, #648]	@ (8005648 <main+0x6c0>)
 80053be:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 80053c0:	4ba4      	ldr	r3, [pc, #656]	@ (8005654 <main+0x6cc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4aa4      	ldr	r2, [pc, #656]	@ (8005658 <main+0x6d0>)
 80053c6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80053c8:	4ba4      	ldr	r3, [pc, #656]	@ (800565c <main+0x6d4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4aa2      	ldr	r2, [pc, #648]	@ (8005658 <main+0x6d0>)
 80053ce:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80053d0:	4ba3      	ldr	r3, [pc, #652]	@ (8005660 <main+0x6d8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4aa0      	ldr	r2, [pc, #640]	@ (8005658 <main+0x6d0>)
 80053d6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80053d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005664 <main+0x6dc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4aa2      	ldr	r2, [pc, #648]	@ (8005668 <main+0x6e0>)
 80053de:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80053e0:	4ba2      	ldr	r3, [pc, #648]	@ (800566c <main+0x6e4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4aa0      	ldr	r2, [pc, #640]	@ (8005668 <main+0x6e0>)
 80053e6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80053e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005670 <main+0x6e8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a9e      	ldr	r2, [pc, #632]	@ (8005668 <main+0x6e0>)
 80053ee:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80053f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005674 <main+0x6ec>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4aa0      	ldr	r2, [pc, #640]	@ (8005678 <main+0x6f0>)
 80053f6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80053f8:	4ba0      	ldr	r3, [pc, #640]	@ (800567c <main+0x6f4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a9e      	ldr	r2, [pc, #632]	@ (8005678 <main+0x6f0>)
 80053fe:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 8005400:	4b9f      	ldr	r3, [pc, #636]	@ (8005680 <main+0x6f8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a9c      	ldr	r2, [pc, #624]	@ (8005678 <main+0x6f0>)
 8005406:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005408:	4b9e      	ldr	r3, [pc, #632]	@ (8005684 <main+0x6fc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a9e      	ldr	r2, [pc, #632]	@ (8005688 <main+0x700>)
 800540e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 8005410:	4b9e      	ldr	r3, [pc, #632]	@ (800568c <main+0x704>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a9c      	ldr	r2, [pc, #624]	@ (8005688 <main+0x700>)
 8005416:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005418:	4b9d      	ldr	r3, [pc, #628]	@ (8005690 <main+0x708>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a9a      	ldr	r2, [pc, #616]	@ (8005688 <main+0x700>)
 800541e:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 8005420:	4b9c      	ldr	r3, [pc, #624]	@ (8005694 <main+0x70c>)
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 8005426:	4b9c      	ldr	r3, [pc, #624]	@ (8005698 <main+0x710>)
 8005428:	2200      	movs	r2, #0
 800542a:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 800542c:	4b9b      	ldr	r3, [pc, #620]	@ (800569c <main+0x714>)
 800542e:	2200      	movs	r2, #0
 8005430:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005432:	4b9b      	ldr	r3, [pc, #620]	@ (80056a0 <main+0x718>)
 8005434:	2200      	movs	r2, #0
 8005436:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005438:	4b9a      	ldr	r3, [pc, #616]	@ (80056a4 <main+0x71c>)
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005440:	4b98      	ldr	r3, [pc, #608]	@ (80056a4 <main+0x71c>)
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005448:	4b96      	ldr	r3, [pc, #600]	@ (80056a4 <main+0x71c>)
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005450:	4b94      	ldr	r3, [pc, #592]	@ (80056a4 <main+0x71c>)
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005458:	4b92      	ldr	r3, [pc, #584]	@ (80056a4 <main+0x71c>)
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005460:	4b90      	ldr	r3, [pc, #576]	@ (80056a4 <main+0x71c>)
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 8005468:	4b8f      	ldr	r3, [pc, #572]	@ (80056a8 <main+0x720>)
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005470:	4b8e      	ldr	r3, [pc, #568]	@ (80056ac <main+0x724>)
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005478:	4b8d      	ldr	r3, [pc, #564]	@ (80056b0 <main+0x728>)
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005480:	4b8c      	ldr	r3, [pc, #560]	@ (80056b4 <main+0x72c>)
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005488:	4b8b      	ldr	r3, [pc, #556]	@ (80056b8 <main+0x730>)
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005490:	4b8a      	ldr	r3, [pc, #552]	@ (80056bc <main+0x734>)
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 8005498:	4b89      	ldr	r3, [pc, #548]	@ (80056c0 <main+0x738>)
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 80054a0:	4b87      	ldr	r3, [pc, #540]	@ (80056c0 <main+0x738>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 80054a8:	4b85      	ldr	r3, [pc, #532]	@ (80056c0 <main+0x738>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 80054b0:	4b84      	ldr	r3, [pc, #528]	@ (80056c4 <main+0x73c>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	4b83      	ldr	r3, [pc, #524]	@ (80056c8 <main+0x740>)
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	4b82      	ldr	r3, [pc, #520]	@ (80056cc <main+0x744>)
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	4b81      	ldr	r3, [pc, #516]	@ (80056d0 <main+0x748>)
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	4b80      	ldr	r3, [pc, #512]	@ (80056d4 <main+0x74c>)
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	4b7f      	ldr	r3, [pc, #508]	@ (80056d8 <main+0x750>)
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 80054e0:	4b7e      	ldr	r3, [pc, #504]	@ (80056dc <main+0x754>)
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	4b7d      	ldr	r3, [pc, #500]	@ (80056e0 <main+0x758>)
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	4b7c      	ldr	r3, [pc, #496]	@ (80056e4 <main+0x75c>)
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	4b7b      	ldr	r3, [pc, #492]	@ (80056e8 <main+0x760>)
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	4b7a      	ldr	r3, [pc, #488]	@ (80056ec <main+0x764>)
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	4b79      	ldr	r3, [pc, #484]	@ (80056f0 <main+0x768>)
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 8005510:	4b78      	ldr	r3, [pc, #480]	@ (80056f4 <main+0x76c>)
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	4b77      	ldr	r3, [pc, #476]	@ (80056f8 <main+0x770>)
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	4b76      	ldr	r3, [pc, #472]	@ (80056fc <main+0x774>)
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4b75      	ldr	r3, [pc, #468]	@ (8005700 <main+0x778>)
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	4b74      	ldr	r3, [pc, #464]	@ (8005704 <main+0x77c>)
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	4b73      	ldr	r3, [pc, #460]	@ (8005708 <main+0x780>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 8005540:	4b72      	ldr	r3, [pc, #456]	@ (800570c <main+0x784>)
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 8005546:	4b72      	ldr	r3, [pc, #456]	@ (8005710 <main+0x788>)
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 800554e:	4b71      	ldr	r3, [pc, #452]	@ (8005714 <main+0x78c>)
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 8005556:	4b70      	ldr	r3, [pc, #448]	@ (8005718 <main+0x790>)
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 800555e:	4b6f      	ldr	r3, [pc, #444]	@ (800571c <main+0x794>)
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005566:	4a6e      	ldr	r2, [pc, #440]	@ (8005720 <main+0x798>)
 8005568:	f107 0308 	add.w	r3, r7, #8
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	4611      	mov	r1, r2
 8005570:	8019      	strh	r1, [r3, #0]
 8005572:	3302      	adds	r3, #2
 8005574:	0c12      	lsrs	r2, r2, #16
 8005576:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8005578:	4a6a      	ldr	r2, [pc, #424]	@ (8005724 <main+0x79c>)
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	4611      	mov	r1, r2
 8005580:	8019      	strh	r1, [r3, #0]
 8005582:	3302      	adds	r3, #2
 8005584:	0c12      	lsrs	r2, r2, #16
 8005586:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8005588:	2201      	movs	r2, #1
 800558a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800558e:	4866      	ldr	r0, [pc, #408]	@ (8005728 <main+0x7a0>)
 8005590:	f009 f8f0 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005594:	2201      	movs	r2, #1
 8005596:	2108      	movs	r1, #8
 8005598:	4864      	ldr	r0, [pc, #400]	@ (800572c <main+0x7a4>)
 800559a:	f009 f8eb 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_7_1;
 800559e:	2201      	movs	r2, #1
 80055a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055a4:	4860      	ldr	r0, [pc, #384]	@ (8005728 <main+0x7a0>)
 80055a6:	f009 f8e5 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 80055aa:	2201      	movs	r2, #1
 80055ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055b0:	485f      	ldr	r0, [pc, #380]	@ (8005730 <main+0x7a8>)
 80055b2:	f009 f8df 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_G_1;
 80055b6:	2201      	movs	r2, #1
 80055b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055bc:	485b      	ldr	r0, [pc, #364]	@ (800572c <main+0x7a4>)
 80055be:	f009 f8d9 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_Y_1;
 80055c2:	2201      	movs	r2, #1
 80055c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055c8:	485a      	ldr	r0, [pc, #360]	@ (8005734 <main+0x7ac>)
 80055ca:	f009 f8d3 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_R_1;
 80055ce:	2201      	movs	r2, #1
 80055d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055d4:	4857      	ldr	r0, [pc, #348]	@ (8005734 <main+0x7ac>)
 80055d6:	f009 f8cd 	bl	800e774 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80055da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055de:	f003 ff8d 	bl	80094fc <HAL_Delay>
  	LED_G_0;
 80055e2:	2200      	movs	r2, #0
 80055e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055e8:	4850      	ldr	r0, [pc, #320]	@ (800572c <main+0x7a4>)
 80055ea:	f009 f8c3 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_Y_0;
 80055ee:	2200      	movs	r2, #0
 80055f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055f4:	484f      	ldr	r0, [pc, #316]	@ (8005734 <main+0x7ac>)
 80055f6:	f009 f8bd 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_R_0;
 80055fa:	2200      	movs	r2, #0
 80055fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005600:	484c      	ldr	r0, [pc, #304]	@ (8005734 <main+0x7ac>)
 8005602:	f009 f8b7 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005606:	2200      	movs	r2, #0
 8005608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800560c:	4846      	ldr	r0, [pc, #280]	@ (8005728 <main+0x7a0>)
 800560e:	f009 f8b1 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_6_0;
 8005612:	2200      	movs	r2, #0
 8005614:	2108      	movs	r1, #8
 8005616:	4845      	ldr	r0, [pc, #276]	@ (800572c <main+0x7a4>)
 8005618:	f009 f8ac 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_7_0;
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005622:	4841      	ldr	r0, [pc, #260]	@ (8005728 <main+0x7a0>)
 8005624:	f009 f8a6 	bl	800e774 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8005628:	2200      	movs	r2, #0
 800562a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800562e:	4840      	ldr	r0, [pc, #256]	@ (8005730 <main+0x7a8>)
 8005630:	f009 f8a0 	bl	800e774 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 8005634:	2300      	movs	r3, #0
 8005636:	e07f      	b.n	8005738 <main+0x7b0>
 8005638:	00004150 	.word	0x00004150
 800563c:	00004138 	.word	0x00004138
 8005640:	00004144 	.word	0x00004144
 8005644:	00004130 	.word	0x00004130
 8005648:	00004164 	.word	0x00004164
 800564c:	0000413c 	.word	0x0000413c
 8005650:	00004148 	.word	0x00004148
 8005654:	00004134 	.word	0x00004134
 8005658:	00004178 	.word	0x00004178
 800565c:	00004140 	.word	0x00004140
 8005660:	0000414c 	.word	0x0000414c
 8005664:	000040cc 	.word	0x000040cc
 8005668:	000040f0 	.word	0x000040f0
 800566c:	000040d8 	.word	0x000040d8
 8005670:	000040e4 	.word	0x000040e4
 8005674:	000040d0 	.word	0x000040d0
 8005678:	00004104 	.word	0x00004104
 800567c:	000040dc 	.word	0x000040dc
 8005680:	000040e8 	.word	0x000040e8
 8005684:	000040d4 	.word	0x000040d4
 8005688:	00004118 	.word	0x00004118
 800568c:	000040e0 	.word	0x000040e0
 8005690:	000040ec 	.word	0x000040ec
 8005694:	00004048 	.word	0x00004048
 8005698:	0000404a 	.word	0x0000404a
 800569c:	0000404c 	.word	0x0000404c
 80056a0:	0000404e 	.word	0x0000404e
 80056a4:	0000007c 	.word	0x0000007c
 80056a8:	000040b4 	.word	0x000040b4
 80056ac:	000040b8 	.word	0x000040b8
 80056b0:	000040bc 	.word	0x000040bc
 80056b4:	000040c0 	.word	0x000040c0
 80056b8:	000040c4 	.word	0x000040c4
 80056bc:	000040c8 	.word	0x000040c8
 80056c0:	00000178 	.word	0x00000178
 80056c4:	00000000 	.word	0x00000000
 80056c8:	00000004 	.word	0x00000004
 80056cc:	00000008 	.word	0x00000008
 80056d0:	0000000c 	.word	0x0000000c
 80056d4:	00000010 	.word	0x00000010
 80056d8:	00000014 	.word	0x00000014
 80056dc:	00000018 	.word	0x00000018
 80056e0:	0000001c 	.word	0x0000001c
 80056e4:	00000020 	.word	0x00000020
 80056e8:	00000024 	.word	0x00000024
 80056ec:	00000028 	.word	0x00000028
 80056f0:	0000002c 	.word	0x0000002c
 80056f4:	00000030 	.word	0x00000030
 80056f8:	00000034 	.word	0x00000034
 80056fc:	00000038 	.word	0x00000038
 8005700:	0000003c 	.word	0x0000003c
 8005704:	00000040 	.word	0x00000040
 8005708:	00000044 	.word	0x00000044
 800570c:	00000174 	.word	0x00000174
 8005710:	00004078 	.word	0x00004078
 8005714:	0000407c 	.word	0x0000407c
 8005718:	00004080 	.word	0x00004080
 800571c:	00004068 	.word	0x00004068
 8005720:	0801eafc 	.word	0x0801eafc
 8005724:	0801eb00 	.word	0x0801eb00
 8005728:	58020000 	.word	0x58020000
 800572c:	58021000 	.word	0x58021000
 8005730:	58020c00 	.word	0x58020c00
 8005734:	58020400 	.word	0x58020400
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	e009      	b.n	8005750 <main+0x7c8>
  		Old_Data_stack.olddata[i] = 0;
 800573c:	4a9b      	ldr	r2, [pc, #620]	@ (80059ac <main+0xa24>)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005756:	dbf1      	blt.n	800573c <main+0x7b4>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005758:	4b94      	ldr	r3, [pc, #592]	@ (80059ac <main+0xa24>)
 800575a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005764:	4b91      	ldr	r3, [pc, #580]	@ (80059ac <main+0xa24>)
 8005766:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800576a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800576e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005772:	4b8f      	ldr	r3, [pc, #572]	@ (80059b0 <main+0xa28>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005778:	488e      	ldr	r0, [pc, #568]	@ (80059b4 <main+0xa2c>)
 800577a:	f010 fdeb 	bl	8016354 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 800577e:	2201      	movs	r2, #1
 8005780:	498b      	ldr	r1, [pc, #556]	@ (80059b0 <main+0xa28>)
 8005782:	488d      	ldr	r0, [pc, #564]	@ (80059b8 <main+0xa30>)
 8005784:	f004 fc0c 	bl	8009fa0 <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005788:	2201      	movs	r2, #1
 800578a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800578e:	488b      	ldr	r0, [pc, #556]	@ (80059bc <main+0xa34>)
 8005790:	f008 fff0 	bl	800e774 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 8005794:	bf00      	nop
 8005796:	4b86      	ldr	r3, [pc, #536]	@ (80059b0 <main+0xa28>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0fb      	beq.n	8005796 <main+0x80e>

  	}
  	LED_R_0;
 800579e:	2200      	movs	r2, #0
 80057a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057a4:	4885      	ldr	r0, [pc, #532]	@ (80059bc <main+0xa34>)
 80057a6:	f008 ffe5 	bl	800e774 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 80057aa:	f7fe fce5 	bl	8004178 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 80057ae:	2104      	movs	r1, #4
 80057b0:	4883      	ldr	r0, [pc, #524]	@ (80059c0 <main+0xa38>)
 80057b2:	f010 ff2b 	bl	801660c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80057b6:	2108      	movs	r1, #8
 80057b8:	4881      	ldr	r0, [pc, #516]	@ (80059c0 <main+0xa38>)
 80057ba:	f010 ff27 	bl	801660c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80057be:	210c      	movs	r1, #12
 80057c0:	487f      	ldr	r0, [pc, #508]	@ (80059c0 <main+0xa38>)
 80057c2:	f010 ff23 	bl	801660c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 80057c6:	4b7f      	ldr	r3, [pc, #508]	@ (80059c4 <main+0xa3c>)
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 fe9f 	bl	8007510 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80057d2:	4b7c      	ldr	r3, [pc, #496]	@ (80059c4 <main+0xa3c>)
 80057d4:	8a9b      	ldrh	r3, [r3, #20]
 80057d6:	2b07      	cmp	r3, #7
 80057d8:	d107      	bne.n	80057ea <main+0x862>
  	{
  		LED_R_1;
 80057da:	2201      	movs	r2, #1
 80057dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057e0:	4876      	ldr	r0, [pc, #472]	@ (80059bc <main+0xa34>)
 80057e2:	f008 ffc7 	bl	800e774 <HAL_GPIO_WritePin>
  		while(1){
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <main+0x85e>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80057ea:	4b76      	ldr	r3, [pc, #472]	@ (80059c4 <main+0xa3c>)
 80057ec:	8a9b      	ldrh	r3, [r3, #20]
 80057ee:	2b09      	cmp	r3, #9
 80057f0:	d107      	bne.n	8005802 <main+0x87a>
  		LED_R_1;
 80057f2:	2201      	movs	r2, #1
 80057f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057f8:	4870      	ldr	r0, [pc, #448]	@ (80059bc <main+0xa34>)
 80057fa:	f008 ffbb 	bl	800e774 <HAL_GPIO_WritePin>
  		while(1){
 80057fe:	bf00      	nop
 8005800:	e7fd      	b.n	80057fe <main+0x876>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005806:	486d      	ldr	r0, [pc, #436]	@ (80059bc <main+0xa34>)
 8005808:	f008 ff9c 	bl	800e744 <HAL_GPIO_ReadPin>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	4b6d      	ldr	r3, [pc, #436]	@ (80059c8 <main+0xa40>)
 8005812:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005814:	4b6c      	ldr	r3, [pc, #432]	@ (80059c8 <main+0xa40>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d103      	bne.n	8005824 <main+0x89c>
		SD_enable_Flag = 0;
 800581c:	4b6a      	ldr	r3, [pc, #424]	@ (80059c8 <main+0xa40>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e002      	b.n	800582a <main+0x8a2>
	}
	else{
		SD_enable_Flag = 1;
 8005824:	4b68      	ldr	r3, [pc, #416]	@ (80059c8 <main+0xa40>)
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 800582a:	4b67      	ldr	r3, [pc, #412]	@ (80059c8 <main+0xa40>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d15f      	bne.n	80058f2 <main+0x96a>
		LED_uSD_1;
 8005832:	2201      	movs	r2, #1
 8005834:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005838:	4864      	ldr	r0, [pc, #400]	@ (80059cc <main+0xa44>)
 800583a:	f008 ff9b 	bl	800e774 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 800583e:	2201      	movs	r2, #1
 8005840:	4963      	ldr	r1, [pc, #396]	@ (80059d0 <main+0xa48>)
 8005842:	4864      	ldr	r0, [pc, #400]	@ (80059d4 <main+0xa4c>)
 8005844:	f017 fe0e 	bl	801d464 <f_mount>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	4b62      	ldr	r3, [pc, #392]	@ (80059d8 <main+0xa50>)
 800584e:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005850:	4862      	ldr	r0, [pc, #392]	@ (80059dc <main+0xa54>)
 8005852:	f018 fa51 	bl	801dcf8 <f_unlink>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	4b5f      	ldr	r3, [pc, #380]	@ (80059d8 <main+0xa50>)
 800585c:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 800585e:	2201      	movs	r2, #1
 8005860:	495b      	ldr	r1, [pc, #364]	@ (80059d0 <main+0xa48>)
 8005862:	485c      	ldr	r0, [pc, #368]	@ (80059d4 <main+0xa4c>)
 8005864:	f017 fdfe 	bl	801d464 <f_mount>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	4b5a      	ldr	r3, [pc, #360]	@ (80059d8 <main+0xa50>)
 800586e:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005870:	220a      	movs	r2, #10
 8005872:	495b      	ldr	r1, [pc, #364]	@ (80059e0 <main+0xa58>)
 8005874:	485b      	ldr	r0, [pc, #364]	@ (80059e4 <main+0xa5c>)
 8005876:	f017 fe3b 	bl	801d4f0 <f_open>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	4b56      	ldr	r3, [pc, #344]	@ (80059d8 <main+0xa50>)
 8005880:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005882:	2200      	movs	r2, #0
 8005884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005888:	4850      	ldr	r0, [pc, #320]	@ (80059cc <main+0xa44>)
 800588a:	f008 ff73 	bl	800e774 <HAL_GPIO_WritePin>

		LED_uSD_1;
 800588e:	2201      	movs	r2, #1
 8005890:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005894:	484d      	ldr	r0, [pc, #308]	@ (80059cc <main+0xa44>)
 8005896:	f008 ff6d 	bl	800e774 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e007      	b.n	80058b0 <main+0x928>
			DataToSendBuffer[i] = 49;
 80058a0:	4a51      	ldr	r2, [pc, #324]	@ (80059e8 <main+0xa60>)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	4413      	add	r3, r2
 80058a6:	2231      	movs	r2, #49	@ 0x31
 80058a8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4a4e      	ldr	r2, [pc, #312]	@ (80059ec <main+0xa64>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	ddf3      	ble.n	80058a0 <main+0x918>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 80058b8:	4b4d      	ldr	r3, [pc, #308]	@ (80059f0 <main+0xa68>)
 80058ba:	2281      	movs	r2, #129	@ 0x81
 80058bc:	494a      	ldr	r1, [pc, #296]	@ (80059e8 <main+0xa60>)
 80058be:	4849      	ldr	r0, [pc, #292]	@ (80059e4 <main+0xa5c>)
 80058c0:	f017 ffde 	bl	801d880 <f_write>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b43      	ldr	r3, [pc, #268]	@ (80059d8 <main+0xa50>)
 80058ca:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 80058cc:	4845      	ldr	r0, [pc, #276]	@ (80059e4 <main+0xa5c>)
 80058ce:	f018 f9e9 	bl	801dca4 <f_close>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	4b40      	ldr	r3, [pc, #256]	@ (80059d8 <main+0xa50>)
 80058d8:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80058da:	4b3f      	ldr	r3, [pc, #252]	@ (80059d8 <main+0xa50>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <main+0x95e>
			while(1){
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <main+0x95a>

			}
		}
		LED_uSD_0;
 80058e6:	2200      	movs	r2, #0
 80058e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058ec:	4837      	ldr	r0, [pc, #220]	@ (80059cc <main+0xa44>)
 80058ee:	f008 ff41 	bl	800e774 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80058f2:	2201      	movs	r2, #1
 80058f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058f8:	483e      	ldr	r0, [pc, #248]	@ (80059f4 <main+0xa6c>)
 80058fa:	f008 ff3b 	bl	800e774 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80058fe:	483e      	ldr	r0, [pc, #248]	@ (80059f8 <main+0xa70>)
 8005900:	f7fb fc50 	bl	80011a4 <MPU6050_INIT>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d107      	bne.n	800591a <main+0x992>
			LED_R_1;
 800590a:	2201      	movs	r2, #1
 800590c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005910:	482a      	ldr	r0, [pc, #168]	@ (80059bc <main+0xa34>)
 8005912:	f008 ff2f 	bl	800e774 <HAL_GPIO_WritePin>
			while(1){
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <main+0x98e>
			}
		}
		LED_Y_1;
 800591a:	2201      	movs	r2, #1
 800591c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005920:	4826      	ldr	r0, [pc, #152]	@ (80059bc <main+0xa34>)
 8005922:	f008 ff27 	bl	800e774 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 8005926:	eddf 7a35 	vldr	s15, [pc, #212]	@ 80059fc <main+0xa74>
 800592a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8005a00 <main+0xa78>
 800592e:	4b35      	ldr	r3, [pc, #212]	@ (8005a04 <main+0xa7c>)
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	4b35      	ldr	r3, [pc, #212]	@ (8005a08 <main+0xa80>)
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	eef0 0a47 	vmov.f32	s1, s14
 800593a:	eeb0 0a67 	vmov.f32	s0, s15
 800593e:	4b33      	ldr	r3, [pc, #204]	@ (8005a0c <main+0xa84>)
 8005940:	4a33      	ldr	r2, [pc, #204]	@ (8005a10 <main+0xa88>)
 8005942:	4934      	ldr	r1, [pc, #208]	@ (8005a14 <main+0xa8c>)
 8005944:	4834      	ldr	r0, [pc, #208]	@ (8005a18 <main+0xa90>)
 8005946:	f7fb fcf7 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 800594a:	2200      	movs	r2, #0
 800594c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005950:	481a      	ldr	r0, [pc, #104]	@ (80059bc <main+0xa34>)
 8005952:	f008 ff0f 	bl	800e774 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005956:	4828      	ldr	r0, [pc, #160]	@ (80059f8 <main+0xa70>)
 8005958:	f7fa feba 	bl	80006d0 <BMP180_init>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <main+0x9ea>
			LED_R_1;
 8005962:	2201      	movs	r2, #1
 8005964:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005968:	4814      	ldr	r0, [pc, #80]	@ (80059bc <main+0xa34>)
 800596a:	f008 ff03 	bl	800e774 <HAL_GPIO_WritePin>
			while(1){
 800596e:	bf00      	nop
 8005970:	e7fd      	b.n	800596e <main+0x9e6>
			}
		}
		LED_Y_1;
 8005972:	2201      	movs	r2, #1
 8005974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005978:	4810      	ldr	r0, [pc, #64]	@ (80059bc <main+0xa34>)
 800597a:	f008 fefb 	bl	800e774 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 800597e:	4827      	ldr	r0, [pc, #156]	@ (8005a1c <main+0xa94>)
 8005980:	f7fb f9f8 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800598a:	480c      	ldr	r0, [pc, #48]	@ (80059bc <main+0xa34>)
 800598c:	f008 fef2 	bl	800e774 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005990:	4819      	ldr	r0, [pc, #100]	@ (80059f8 <main+0xa70>)
 8005992:	f7fb fb21 	bl	8000fd8 <HMC5883L_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d141      	bne.n	8005a20 <main+0xa98>
			LED_R_1;
 800599c:	2201      	movs	r2, #1
 800599e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059a2:	4806      	ldr	r0, [pc, #24]	@ (80059bc <main+0xa34>)
 80059a4:	f008 fee6 	bl	800e774 <HAL_GPIO_WritePin>
			while(1){
 80059a8:	bf00      	nop
 80059aa:	e7fd      	b.n	80059a8 <main+0xa20>
 80059ac:	0000019c 	.word	0x0000019c
 80059b0:	24000eb0 	.word	0x24000eb0
 80059b4:	24000464 	.word	0x24000464
 80059b8:	240000ac 	.word	0x240000ac
 80059bc:	58020400 	.word	0x58020400
 80059c0:	24000380 	.word	0x24000380
 80059c4:	00000178 	.word	0x00000178
 80059c8:	000041cc 	.word	0x000041cc
 80059cc:	58020c00 	.word	0x58020c00
 80059d0:	0801eae0 	.word	0x0801eae0
 80059d4:	24000eb4 	.word	0x24000eb4
 80059d8:	24001eec 	.word	0x24001eec
 80059dc:	0801eae4 	.word	0x0801eae4
 80059e0:	0801eaf0 	.word	0x0801eaf0
 80059e4:	24001ef0 	.word	0x24001ef0
 80059e8:	24002f28 	.word	0x24002f28
 80059ec:	0001f7e7 	.word	0x0001f7e7
 80059f0:	24002f24 	.word	0x24002f24
 80059f4:	58020000 	.word	0x58020000
 80059f8:	24000198 	.word	0x24000198
 80059fc:	42830000 	.word	0x42830000
 8005a00:	46000000 	.word	0x46000000
 8005a04:	00000044 	.word	0x00000044
 8005a08:	00000040 	.word	0x00000040
 8005a0c:	0000003c 	.word	0x0000003c
 8005a10:	00000038 	.word	0x00000038
 8005a14:	00000034 	.word	0x00000034
 8005a18:	00000030 	.word	0x00000030
 8005a1c:	000000e4 	.word	0x000000e4
			}
		}
		LED_Y_1;
 8005a20:	2201      	movs	r2, #1
 8005a22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a26:	488c      	ldr	r0, [pc, #560]	@ (8005c58 <main+0xcd0>)
 8005a28:	f008 fea4 	bl	800e774 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005a2c:	f7fb fb84 	bl	8001138 <HMC5883L_Calibration>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	4b89      	ldr	r3, [pc, #548]	@ (8005c5c <main+0xcd4>)
 8005a36:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a3e:	4886      	ldr	r0, [pc, #536]	@ (8005c58 <main+0xcd0>)
 8005a40:	f008 fe98 	bl	800e774 <HAL_GPIO_WritePin>

		LED_5_0;
 8005a44:	2200      	movs	r2, #0
 8005a46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a4a:	4885      	ldr	r0, [pc, #532]	@ (8005c60 <main+0xcd8>)
 8005a4c:	f008 fe92 	bl	800e774 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005a50:	4b84      	ldr	r3, [pc, #528]	@ (8005c64 <main+0xcdc>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005a56:	4b83      	ldr	r3, [pc, #524]	@ (8005c64 <main+0xcdc>)
 8005a58:	220c      	movs	r2, #12
 8005a5a:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005a5c:	4b81      	ldr	r3, [pc, #516]	@ (8005c64 <main+0xcdc>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005a62:	4b80      	ldr	r3, [pc, #512]	@ (8005c64 <main+0xcdc>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005a68:	4b7e      	ldr	r3, [pc, #504]	@ (8005c64 <main+0xcdc>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c64 <main+0xcdc>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005a74:	2201      	movs	r2, #1
 8005a76:	2108      	movs	r1, #8
 8005a78:	487b      	ldr	r0, [pc, #492]	@ (8005c68 <main+0xce0>)
 8005a7a:	f008 fe7b 	bl	800e774 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005a7e:	487b      	ldr	r0, [pc, #492]	@ (8005c6c <main+0xce4>)
 8005a80:	f7fc fd9a 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	4619      	mov	r1, r3
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f7fc fc39 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fc fc6e 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005a98:	f7fc fde2 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005a9c:	f7fc fa5c 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e007      	b.n	8005ab6 <main+0xb2e>
			Txcode[i] = 0;
 8005aa6:	4a72      	ldr	r2, [pc, #456]	@ (8005c70 <main+0xce8>)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4413      	add	r3, r2
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b1f      	cmp	r3, #31
 8005aba:	ddf4      	ble.n	8005aa6 <main+0xb1e>
		}
		Txcode[22] = 'd';
 8005abc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c70 <main+0xce8>)
 8005abe:	2264      	movs	r2, #100	@ 0x64
 8005ac0:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8005c70 <main+0xce8>)
 8005ac4:	2272      	movs	r2, #114	@ 0x72
 8005ac6:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005ac8:	4b69      	ldr	r3, [pc, #420]	@ (8005c70 <main+0xce8>)
 8005aca:	226f      	movs	r2, #111	@ 0x6f
 8005acc:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005ace:	4b68      	ldr	r3, [pc, #416]	@ (8005c70 <main+0xce8>)
 8005ad0:	226e      	movs	r2, #110	@ 0x6e
 8005ad2:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005ad4:	4b66      	ldr	r3, [pc, #408]	@ (8005c70 <main+0xce8>)
 8005ad6:	2232      	movs	r2, #50	@ 0x32
 8005ad8:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005ada:	4b65      	ldr	r3, [pc, #404]	@ (8005c70 <main+0xce8>)
 8005adc:	2263      	movs	r2, #99	@ 0x63
 8005ade:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005ae0:	4b63      	ldr	r3, [pc, #396]	@ (8005c70 <main+0xce8>)
 8005ae2:	2231      	movs	r2, #49	@ 0x31
 8005ae4:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005ae6:	4b62      	ldr	r3, [pc, #392]	@ (8005c70 <main+0xce8>)
 8005ae8:	227a      	movs	r2, #122	@ 0x7a
 8005aea:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005aec:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <main+0xce8>)
 8005aee:	2261      	movs	r2, #97	@ 0x61
 8005af0:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005af2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c70 <main+0xce8>)
 8005af4:	2237      	movs	r2, #55	@ 0x37
 8005af6:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005af8:	485d      	ldr	r0, [pc, #372]	@ (8005c70 <main+0xce8>)
 8005afa:	f7fc fceb 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005afe:	f7fc fcf7 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005b02:	f7fc f9fd 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b0a:	e022      	b.n	8005b52 <main+0xbca>
			LED_G_1;
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b12:	4855      	ldr	r0, [pc, #340]	@ (8005c68 <main+0xce0>)
 8005b14:	f008 fe2e 	bl	800e774 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b1e:	484e      	ldr	r0, [pc, #312]	@ (8005c58 <main+0xcd0>)
 8005b20:	f008 fe28 	bl	800e774 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005b24:	2001      	movs	r0, #1
 8005b26:	f003 fce9 	bl	80094fc <HAL_Delay>
			LED_G_0;
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b30:	484d      	ldr	r0, [pc, #308]	@ (8005c68 <main+0xce0>)
 8005b32:	f008 fe1f 	bl	800e774 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005b36:	2200      	movs	r2, #0
 8005b38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b3c:	4846      	ldr	r0, [pc, #280]	@ (8005c58 <main+0xcd0>)
 8005b3e:	f008 fe19 	bl	800e774 <HAL_GPIO_WritePin>

			cunter++;
 8005b42:	7cfb      	ldrb	r3, [r7, #19]
 8005b44:	3301      	adds	r3, #1
 8005b46:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b64      	cmp	r3, #100	@ 0x64
 8005b4c:	d101      	bne.n	8005b52 <main+0xbca>
				NVIC_SystemReset();
 8005b4e:	f7ff fa05 	bl	8004f5c <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b52:	2000      	movs	r0, #0
 8005b54:	f7fc fd10 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d0d6      	beq.n	8005b0c <main+0xb84>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005b5e:	4845      	ldr	r0, [pc, #276]	@ (8005c74 <main+0xcec>)
 8005b60:	f7fc fcee 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005b64:	2200      	movs	r2, #0
 8005b66:	2108      	movs	r1, #8
 8005b68:	483f      	ldr	r0, [pc, #252]	@ (8005c68 <main+0xce0>)
 8005b6a:	f008 fe03 	bl	800e774 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005b6e:	230c      	movs	r3, #12
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e00b      	b.n	8005b8c <main+0xc04>
			Rxcode[i] = RxData[i];
 8005b74:	4a3f      	ldr	r2, [pc, #252]	@ (8005c74 <main+0xcec>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	7819      	ldrb	r1, [r3, #0]
 8005b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c78 <main+0xcf0>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	460a      	mov	r2, r1
 8005b84:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b15      	cmp	r3, #21
 8005b90:	ddf0      	ble.n	8005b74 <main+0xbec>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005b92:	483a      	ldr	r0, [pc, #232]	@ (8005c7c <main+0xcf4>)
 8005b94:	f7fb f9d6 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b9e:	4830      	ldr	r0, [pc, #192]	@ (8005c60 <main+0xcd8>)
 8005ba0:	f008 fde8 	bl	800e774 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4936      	ldr	r1, [pc, #216]	@ (8005c80 <main+0xcf8>)
 8005ba8:	4836      	ldr	r0, [pc, #216]	@ (8005c84 <main+0xcfc>)
 8005baa:	f012 faad 	bl	8018108 <HAL_UART_Receive_IT>
		LED_7_0;
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bb4:	482a      	ldr	r0, [pc, #168]	@ (8005c60 <main+0xcd8>)
 8005bb6:	f008 fddd 	bl	800e774 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005bba:	4833      	ldr	r0, [pc, #204]	@ (8005c88 <main+0xd00>)
 8005bbc:	f010 fc48 	bl	8016450 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005bc0:	4b28      	ldr	r3, [pc, #160]	@ (8005c64 <main+0xcdc>)
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fca2 	bl	8007510 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005bcc:	4b25      	ldr	r3, [pc, #148]	@ (8005c64 <main+0xcdc>)
 8005bce:	8a9b      	ldrh	r3, [r3, #20]
 8005bd0:	2b07      	cmp	r3, #7
 8005bd2:	d107      	bne.n	8005be4 <main+0xc5c>
	  	{
	  		LED_R_1;
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bda:	481f      	ldr	r0, [pc, #124]	@ (8005c58 <main+0xcd0>)
 8005bdc:	f008 fdca 	bl	800e774 <HAL_GPIO_WritePin>
	  		while(1){
 8005be0:	bf00      	nop
 8005be2:	e7fd      	b.n	8005be0 <main+0xc58>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005be4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c64 <main+0xcdc>)
 8005be6:	8a9b      	ldrh	r3, [r3, #20]
 8005be8:	2b09      	cmp	r3, #9
 8005bea:	d107      	bne.n	8005bfc <main+0xc74>
	  		LED_R_1;
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bf2:	4819      	ldr	r0, [pc, #100]	@ (8005c58 <main+0xcd0>)
 8005bf4:	f008 fdbe 	bl	800e774 <HAL_GPIO_WritePin>
	  		while(1){
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <main+0xc70>
	  		}
	  	}



		STARTUP = 0;
 8005bfc:	4b23      	ldr	r3, [pc, #140]	@ (8005c8c <main+0xd04>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005c02:	4b18      	ldr	r3, [pc, #96]	@ (8005c64 <main+0xcdc>)
 8005c04:	8a9b      	ldrh	r3, [r3, #20]
 8005c06:	2b07      	cmp	r3, #7
 8005c08:	d10a      	bne.n	8005c20 <main+0xc98>
	  			LED_R_1;
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c10:	4811      	ldr	r0, [pc, #68]	@ (8005c58 <main+0xcd0>)
 8005c12:	f008 fdaf 	bl	800e774 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005c16:	4b13      	ldr	r3, [pc, #76]	@ (8005c64 <main+0xcdc>)
 8005c18:	885b      	ldrh	r3, [r3, #2]
 8005c1a:	b21a      	sxth	r2, r3
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c90 <main+0xd08>)
 8005c1e:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005c20:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <main+0xcdc>)
 8005c22:	8a9b      	ldrh	r3, [r3, #20]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d103      	bne.n	8005c30 <main+0xca8>
	  			thrust_limit = 10000;
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <main+0xd08>)
 8005c2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c2e:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c30:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <main+0xcdc>)
 8005c32:	8a9b      	ldrh	r3, [r3, #20]
 8005c34:	2b09      	cmp	r3, #9
 8005c36:	d13a      	bne.n	8005cae <main+0xd26>
	  			ESC_POWER_1;
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c3e:	4815      	ldr	r0, [pc, #84]	@ (8005c94 <main+0xd0c>)
 8005c40:	f008 fd98 	bl	800e774 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005c44:	2201      	movs	r2, #1
 8005c46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c4a:	4803      	ldr	r0, [pc, #12]	@ (8005c58 <main+0xcd0>)
 8005c4c:	f008 fd92 	bl	800e774 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005c50:	4811      	ldr	r0, [pc, #68]	@ (8005c98 <main+0xd10>)
 8005c52:	f018 f827 	bl	801dca4 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c56:	e026      	b.n	8005ca6 <main+0xd1e>
 8005c58:	58020400 	.word	0x58020400
 8005c5c:	00000060 	.word	0x00000060
 8005c60:	58020000 	.word	0x58020000
 8005c64:	00000178 	.word	0x00000178
 8005c68:	58021000 	.word	0x58021000
 8005c6c:	24000274 	.word	0x24000274
 8005c70:	00000114 	.word	0x00000114
 8005c74:	000000f4 	.word	0x000000f4
 8005c78:	00000154 	.word	0x00000154
 8005c7c:	24000418 	.word	0x24000418
 8005c80:	000041c0 	.word	0x000041c0
 8005c84:	240004b0 	.word	0x240004b0
 8005c88:	240003cc 	.word	0x240003cc
 8005c8c:	00000074 	.word	0x00000074
 8005c90:	0000405e 	.word	0x0000405e
 8005c94:	58021800 	.word	0x58021800
 8005c98:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005c9c:	200a      	movs	r0, #10
 8005c9e:	f003 fc2d 	bl	80094fc <HAL_Delay>
	  				Get_batteryvalue();
 8005ca2:	f7fe fa69 	bl	8004178 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005ca6:	4b62      	ldr	r3, [pc, #392]	@ (8005e30 <main+0xea8>)
 8005ca8:	8a9b      	ldrh	r3, [r3, #20]
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	d0f6      	beq.n	8005c9c <main+0xd14>
	  			}
	  		}

	  		if(commandready == 1){
 8005cae:	4b61      	ldr	r3, [pc, #388]	@ (8005e34 <main+0xeac>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d159      	bne.n	8005d6a <main+0xde2>
	  			LED_7_1;
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cbc:	485e      	ldr	r0, [pc, #376]	@ (8005e38 <main+0xeb0>)
 8005cbe:	f008 fd59 	bl	800e774 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005cc2:	f7fc fceb 	bl	800269c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005cc6:	495d      	ldr	r1, [pc, #372]	@ (8005e3c <main+0xeb4>)
 8005cc8:	485d      	ldr	r0, [pc, #372]	@ (8005e40 <main+0xeb8>)
 8005cca:	f7fc fd35 	bl	8002738 <executecommand>
	  			LED_7_0;
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cd4:	4858      	ldr	r0, [pc, #352]	@ (8005e38 <main+0xeb0>)
 8005cd6:	f008 fd4d 	bl	800e774 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005cda:	4b5a      	ldr	r3, [pc, #360]	@ (8005e44 <main+0xebc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a5a      	ldr	r2, [pc, #360]	@ (8005e48 <main+0xec0>)
 8005ce0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8005e4c <main+0xec4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a58      	ldr	r2, [pc, #352]	@ (8005e48 <main+0xec0>)
 8005ce8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005cea:	4b59      	ldr	r3, [pc, #356]	@ (8005e50 <main+0xec8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a56      	ldr	r2, [pc, #344]	@ (8005e48 <main+0xec0>)
 8005cf0:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005cf2:	4b58      	ldr	r3, [pc, #352]	@ (8005e54 <main+0xecc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a58      	ldr	r2, [pc, #352]	@ (8005e58 <main+0xed0>)
 8005cf8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005cfa:	4b58      	ldr	r3, [pc, #352]	@ (8005e5c <main+0xed4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a56      	ldr	r2, [pc, #344]	@ (8005e58 <main+0xed0>)
 8005d00:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005d02:	4b57      	ldr	r3, [pc, #348]	@ (8005e60 <main+0xed8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a54      	ldr	r2, [pc, #336]	@ (8005e58 <main+0xed0>)
 8005d08:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005d0a:	4b56      	ldr	r3, [pc, #344]	@ (8005e64 <main+0xedc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a56      	ldr	r2, [pc, #344]	@ (8005e68 <main+0xee0>)
 8005d10:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005d12:	4b56      	ldr	r3, [pc, #344]	@ (8005e6c <main+0xee4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a54      	ldr	r2, [pc, #336]	@ (8005e68 <main+0xee0>)
 8005d18:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005d1a:	4b55      	ldr	r3, [pc, #340]	@ (8005e70 <main+0xee8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a52      	ldr	r2, [pc, #328]	@ (8005e68 <main+0xee0>)
 8005d20:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005d22:	4b54      	ldr	r3, [pc, #336]	@ (8005e74 <main+0xeec>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a54      	ldr	r2, [pc, #336]	@ (8005e78 <main+0xef0>)
 8005d28:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005d2a:	4b54      	ldr	r3, [pc, #336]	@ (8005e7c <main+0xef4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a52      	ldr	r2, [pc, #328]	@ (8005e78 <main+0xef0>)
 8005d30:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005d32:	4b53      	ldr	r3, [pc, #332]	@ (8005e80 <main+0xef8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a50      	ldr	r2, [pc, #320]	@ (8005e78 <main+0xef0>)
 8005d38:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005d3a:	4b52      	ldr	r3, [pc, #328]	@ (8005e84 <main+0xefc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a52      	ldr	r2, [pc, #328]	@ (8005e88 <main+0xf00>)
 8005d40:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005d42:	4b52      	ldr	r3, [pc, #328]	@ (8005e8c <main+0xf04>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a50      	ldr	r2, [pc, #320]	@ (8005e88 <main+0xf00>)
 8005d48:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005d4a:	4b51      	ldr	r3, [pc, #324]	@ (8005e90 <main+0xf08>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8005e88 <main+0xf00>)
 8005d50:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005d52:	4b50      	ldr	r3, [pc, #320]	@ (8005e94 <main+0xf0c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a50      	ldr	r2, [pc, #320]	@ (8005e98 <main+0xf10>)
 8005d58:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005d5a:	4b50      	ldr	r3, [pc, #320]	@ (8005e9c <main+0xf14>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8005e98 <main+0xf10>)
 8005d60:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005d62:	4b4f      	ldr	r3, [pc, #316]	@ (8005ea0 <main+0xf18>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4c      	ldr	r2, [pc, #304]	@ (8005e98 <main+0xf10>)
 8005d68:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ea4 <main+0xf1c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d14f      	bne.n	8005e12 <main+0xe8a>
 8005d72:	4b4d      	ldr	r3, [pc, #308]	@ (8005ea8 <main+0xf20>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d14b      	bne.n	8005e12 <main+0xe8a>
 8005d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8005eac <main+0xf24>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d147      	bne.n	8005e12 <main+0xe8a>
	  			TIM_inte_SD = 0;
 8005d82:	4b48      	ldr	r3, [pc, #288]	@ (8005ea4 <main+0xf1c>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005d88:	4b49      	ldr	r3, [pc, #292]	@ (8005eb0 <main+0xf28>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fd55 	bl	800783c <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005d92:	4b47      	ldr	r3, [pc, #284]	@ (8005eb0 <main+0xf28>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d12b      	bne.n	8005df6 <main+0xe6e>
	  				SD_In_Use = 1;
 8005d9e:	4b45      	ldr	r3, [pc, #276]	@ (8005eb4 <main+0xf2c>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005da4:	2201      	movs	r2, #1
 8005da6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005daa:	4843      	ldr	r0, [pc, #268]	@ (8005eb8 <main+0xf30>)
 8005dac:	f008 fce2 	bl	800e774 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005db0:	2232      	movs	r2, #50	@ 0x32
 8005db2:	4942      	ldr	r1, [pc, #264]	@ (8005ebc <main+0xf34>)
 8005db4:	4842      	ldr	r0, [pc, #264]	@ (8005ec0 <main+0xf38>)
 8005db6:	f017 fb9b 	bl	801d4f0 <f_open>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8005ea8 <main+0xf20>)
 8005dc0:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005dc2:	4b40      	ldr	r3, [pc, #256]	@ (8005ec4 <main+0xf3c>)
 8005dc4:	4a40      	ldr	r2, [pc, #256]	@ (8005ec8 <main+0xf40>)
 8005dc6:	4941      	ldr	r1, [pc, #260]	@ (8005ecc <main+0xf44>)
 8005dc8:	483d      	ldr	r0, [pc, #244]	@ (8005ec0 <main+0xf38>)
 8005dca:	f017 fd59 	bl	801d880 <f_write>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4b35      	ldr	r3, [pc, #212]	@ (8005ea8 <main+0xf20>)
 8005dd4:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005dd6:	483a      	ldr	r0, [pc, #232]	@ (8005ec0 <main+0xf38>)
 8005dd8:	f017 ff64 	bl	801dca4 <f_close>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	461a      	mov	r2, r3
 8005de0:	4b31      	ldr	r3, [pc, #196]	@ (8005ea8 <main+0xf20>)
 8005de2:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dea:	4833      	ldr	r0, [pc, #204]	@ (8005eb8 <main+0xf30>)
 8005dec:	f008 fcc2 	bl	800e774 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005df0:	4b30      	ldr	r3, [pc, #192]	@ (8005eb4 <main+0xf2c>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005df6:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb0 <main+0xf28>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dfe:	d205      	bcs.n	8005e0c <main+0xe84>
	  				Mainloop_Number++;
 8005e00:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb0 <main+0xf28>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb0 <main+0xf28>)
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e002      	b.n	8005e12 <main+0xe8a>
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005e0c:	4b28      	ldr	r3, [pc, #160]	@ (8005eb0 <main+0xf28>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005e12:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed0 <main+0xf48>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	f47f aef3 	bne.w	8005c02 <main+0xc7a>
	  			LED_R_0;
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e22:	482c      	ldr	r0, [pc, #176]	@ (8005ed4 <main+0xf4c>)
 8005e24:	f008 fca6 	bl	800e774 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005e28:	4b29      	ldr	r3, [pc, #164]	@ (8005ed0 <main+0xf48>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005e2e:	e6e8      	b.n	8005c02 <main+0xc7a>
 8005e30:	00000178 	.word	0x00000178
 8005e34:	000041be 	.word	0x000041be
 8005e38:	58020000 	.word	0x58020000
 8005e3c:	000041a0 	.word	0x000041a0
 8005e40:	000041b0 	.word	0x000041b0
 8005e44:	000040cc 	.word	0x000040cc
 8005e48:	000040f0 	.word	0x000040f0
 8005e4c:	000040d8 	.word	0x000040d8
 8005e50:	000040e4 	.word	0x000040e4
 8005e54:	0000412c 	.word	0x0000412c
 8005e58:	00004150 	.word	0x00004150
 8005e5c:	00004138 	.word	0x00004138
 8005e60:	00004144 	.word	0x00004144
 8005e64:	000040d0 	.word	0x000040d0
 8005e68:	00004104 	.word	0x00004104
 8005e6c:	000040dc 	.word	0x000040dc
 8005e70:	000040e8 	.word	0x000040e8
 8005e74:	00004130 	.word	0x00004130
 8005e78:	00004164 	.word	0x00004164
 8005e7c:	0000413c 	.word	0x0000413c
 8005e80:	00004148 	.word	0x00004148
 8005e84:	000040d4 	.word	0x000040d4
 8005e88:	00004118 	.word	0x00004118
 8005e8c:	000040e0 	.word	0x000040e0
 8005e90:	000040ec 	.word	0x000040ec
 8005e94:	00004134 	.word	0x00004134
 8005e98:	00004178 	.word	0x00004178
 8005e9c:	00004140 	.word	0x00004140
 8005ea0:	0000414c 	.word	0x0000414c
 8005ea4:	0000006c 	.word	0x0000006c
 8005ea8:	24001eec 	.word	0x24001eec
 8005eac:	000041cc 	.word	0x000041cc
 8005eb0:	000041c4 	.word	0x000041c4
 8005eb4:	000041c8 	.word	0x000041c8
 8005eb8:	58020c00 	.word	0x58020c00
 8005ebc:	0801eaf0 	.word	0x0801eaf0
 8005ec0:	24001ef0 	.word	0x24001ef0
 8005ec4:	24002f24 	.word	0x24002f24
 8005ec8:	0001f7e8 	.word	0x0001f7e8
 8005ecc:	24002f28 	.word	0x24002f28
 8005ed0:	00000070 	.word	0x00000070
 8005ed4:	58020400 	.word	0x58020400

08005ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b09c      	sub	sp, #112	@ 0x70
 8005edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ee2:	224c      	movs	r2, #76	@ 0x4c
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f018 f8d4 	bl	801e094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	2220      	movs	r2, #32
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f018 f8ce 	bl	801e094 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005ef8:	2002      	movs	r0, #2
 8005efa:	f00b f8ed 	bl	80110d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005efe:	2300      	movs	r3, #0
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <SystemClock_Config+0xe0>)
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb8 <SystemClock_Config+0xe0>)
 8005f08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f0c:	6193      	str	r3, [r2, #24]
 8005f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb8 <SystemClock_Config+0xe0>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005f1a:	bf00      	nop
 8005f1c:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <SystemClock_Config+0xe0>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f28:	d1f8      	bne.n	8005f1c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005f2a:	2311      	movs	r3, #17
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005f38:	2310      	movs	r3, #16
 8005f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f40:	2302      	movs	r3, #2
 8005f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005f44:	2303      	movs	r3, #3
 8005f46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005f48:	2344      	movs	r3, #68	@ 0x44
 8005f4a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005f50:	2302      	movs	r3, #2
 8005f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005f54:	2302      	movs	r3, #2
 8005f56:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005f58:	230c      	movs	r3, #12
 8005f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005f60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f00b f8ee 	bl	801114c <HAL_RCC_OscConfig>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005f76:	f001 ff57 	bl	8007e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f7a:	233f      	movs	r3, #63	@ 0x3f
 8005f7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005f86:	2308      	movs	r3, #8
 8005f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005f8a:	2340      	movs	r3, #64	@ 0x40
 8005f8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005f8e:	2340      	movs	r3, #64	@ 0x40
 8005f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005f98:	2340      	movs	r3, #64	@ 0x40
 8005f9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	2103      	movs	r1, #3
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f00b fcad 	bl	8011900 <HAL_RCC_ClockConfig>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005fac:	f001 ff3c 	bl	8007e28 <Error_Handler>
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3770      	adds	r7, #112	@ 0x70
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	58024800 	.word	0x58024800

08005fbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b0ae      	sub	sp, #184	@ 0xb8
 8005fc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	22b8      	movs	r2, #184	@ 0xb8
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f018 f863 	bl	801e094 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005fce:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005fda:	2316      	movs	r3, #22
 8005fdc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005fde:	23c0      	movs	r3, #192	@ 0xc0
 8005fe0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005fea:	2302      	movs	r3, #2
 8005fec:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006000:	2300      	movs	r3, #0
 8006002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006006:	463b      	mov	r3, r7
 8006008:	4618      	mov	r0, r3
 800600a:	f00c f805 	bl	8012018 <HAL_RCCEx_PeriphCLKConfig>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8006014:	f001 ff08 	bl	8007e28 <Error_Handler>
  }
}
 8006018:	bf00      	nop
 800601a:	37b8      	adds	r7, #184	@ 0xb8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a8a      	ldr	r2, [pc, #552]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800602c:	4293      	cmp	r3, r2
 800602e:	f040 810d 	bne.w	800624c <HAL_TIM_PeriodElapsedCallback+0x22c>
	{
		TIM_inte_SD = 1;
 8006032:	4b89      	ldr	r3, [pc, #548]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8006038:	4b88      	ldr	r3, [pc, #544]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 800603e:	4b88      	ldr	r3, [pc, #544]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	4a86      	ldr	r2, [pc, #536]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006046:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 8006048:	4b86      	ldr	r3, [pc, #536]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d113      	bne.n	8006078 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 8006050:	2201      	movs	r2, #1
 8006052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006056:	4884      	ldr	r0, [pc, #528]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006058:	f008 fb8c 	bl	800e774 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 800605c:	f7fa fc08 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006066:	4880      	ldr	r0, [pc, #512]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006068:	f008 fb84 	bl	800e774 <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 800606c:	4b7f      	ldr	r3, [pc, #508]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	4618      	mov	r0, r3
 8006074:	f001 fa4c 	bl	8007510 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 8006078:	4b7a      	ldr	r3, [pc, #488]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b0a      	cmp	r3, #10
 800607e:	d10d      	bne.n	800609c <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 8006080:	2201      	movs	r2, #1
 8006082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006086:	4878      	ldr	r0, [pc, #480]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006088:	f008 fb74 	bl	800e774 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 800608c:	f7fa fbda 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8006090:	2200      	movs	r2, #0
 8006092:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006096:	4874      	ldr	r0, [pc, #464]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006098:	f008 fb6c 	bl	800e774 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 800609c:	4b71      	ldr	r3, [pc, #452]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b24      	cmp	r3, #36	@ 0x24
 80060a2:	d10d      	bne.n	80060c0 <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 80060a4:	2201      	movs	r2, #1
 80060a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060aa:	486f      	ldr	r0, [pc, #444]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060ac:	f008 fb62 	bl	800e774 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 80060b0:	f7fb f810 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060ba:	486b      	ldr	r0, [pc, #428]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060bc:	f008 fb5a 	bl	800e774 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 80060c0:	4b68      	ldr	r3, [pc, #416]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b26      	cmp	r3, #38	@ 0x26
 80060c6:	d10e      	bne.n	80060e6 <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 80060c8:	2201      	movs	r2, #1
 80060ca:	2108      	movs	r1, #8
 80060cc:	4868      	ldr	r0, [pc, #416]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80060ce:	f008 fb51 	bl	800e774 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 80060d2:	f7fb ff41 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 80060d6:	4b67      	ldr	r3, [pc, #412]	@ (8006274 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 80060dc:	2200      	movs	r2, #0
 80060de:	2108      	movs	r1, #8
 80060e0:	4863      	ldr	r0, [pc, #396]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80060e2:	f008 fb47 	bl	800e774 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 80060e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b28      	cmp	r3, #40	@ 0x28
 80060ec:	d14c      	bne.n	8006188 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 80060ee:	4b62      	ldr	r3, [pc, #392]	@ (8006278 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80060f0:	ed93 7a00 	vldr	s14, [r3]
 80060f4:	4b61      	ldr	r3, [pc, #388]	@ (800627c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80060f6:	edd3 7a00 	vldr	s15, [r3]
 80060fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060fe:	4b60      	ldr	r3, [pc, #384]	@ (8006280 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006100:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8006104:	f7fa fe76 	bl	8000df4 <BMP180_GET_height>
 8006108:	eef0 7a40 	vmov.f32	s15, s0
 800610c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006110:	ee17 3a90 	vmov	r3, s15
 8006114:	b29b      	uxth	r3, r3
 8006116:	b21a      	sxth	r2, r3
 8006118:	4b54      	ldr	r3, [pc, #336]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800611a:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 800611c:	4b53      	ldr	r3, [pc, #332]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800611e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8006122:	2303      	movs	r3, #3
 8006124:	2200      	movs	r2, #0
 8006126:	4957      	ldr	r1, [pc, #348]	@ (8006284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006128:	f001 f919 	bl	800735e <convert_value_to_array>

			Get_batteryvalue();
 800612c:	f7fe f824 	bl	8004178 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8006130:	4b4e      	ldr	r3, [pc, #312]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b218      	sxth	r0, r3
 8006136:	2306      	movs	r3, #6
 8006138:	2203      	movs	r2, #3
 800613a:	4952      	ldr	r1, [pc, #328]	@ (8006284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800613c:	f001 f90f 	bl	800735e <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e00b      	b.n	800615e <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f103 0216 	add.w	r2, r3, #22
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3316      	adds	r3, #22
 8006150:	494d      	ldr	r1, [pc, #308]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006152:	5c89      	ldrb	r1, [r1, r2]
 8006154:	4a4b      	ldr	r2, [pc, #300]	@ (8006284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006156:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b09      	cmp	r3, #9
 8006162:	ddf0      	ble.n	8006146 <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 8006164:	2201      	movs	r2, #1
 8006166:	2108      	movs	r1, #8
 8006168:	4841      	ldr	r0, [pc, #260]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800616a:	f008 fb03 	bl	800e774 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 800616e:	4845      	ldr	r0, [pc, #276]	@ (8006284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006170:	f7fc f9b0 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8006174:	2201      	movs	r2, #1
 8006176:	2140      	movs	r1, #64	@ 0x40
 8006178:	4844      	ldr	r0, [pc, #272]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800617a:	f008 fafb 	bl	800e774 <HAL_GPIO_WritePin>
			LED_6_0;
 800617e:	2200      	movs	r2, #0
 8006180:	2108      	movs	r1, #8
 8006182:	483b      	ldr	r0, [pc, #236]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006184:	f008 faf6 	bl	800e774 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8006188:	4b36      	ldr	r3, [pc, #216]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b29      	cmp	r3, #41	@ 0x29
 800618e:	d104      	bne.n	800619a <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 8006190:	2200      	movs	r2, #0
 8006192:	2140      	movs	r1, #64	@ 0x40
 8006194:	483d      	ldr	r0, [pc, #244]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006196:	f008 faed 	bl	800e774 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 800619a:	4b32      	ldr	r3, [pc, #200]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b29      	cmp	r3, #41	@ 0x29
 80061a0:	dd16      	ble.n	80061d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 80061a2:	4b34      	ldr	r3, [pc, #208]	@ (8006274 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d012      	beq.n	80061d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 80061aa:	f7fb ff56 	bl	800205a <nRF24_ReadStatus>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 80061b8:	f7fb ff4f 	bl	800205a <nRF24_ReadStatus>
 80061bc:	4603      	mov	r3, r0
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 80061c6:	f7fb fe9b 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 80061ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006274 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 80061d0:	2201      	movs	r2, #1
 80061d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061d6:	4824      	ldr	r0, [pc, #144]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061d8:	f008 facc 	bl	800e774 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 80061dc:	f7fb fab8 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 80061e0:	2200      	movs	r2, #0
 80061e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061e6:	4820      	ldr	r0, [pc, #128]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061e8:	f008 fac4 	bl	800e774 <HAL_GPIO_WritePin>

		if(i == 100){
 80061ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b64      	cmp	r3, #100	@ 0x64
 80061f2:	d103      	bne.n	80061fc <HAL_TIM_PeriodElapsedCallback+0x1dc>
			i = 0;
 80061f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e004      	b.n	8006206 <HAL_TIM_PeriodElapsedCallback+0x1e6>
		}
		else{
			i++;
 80061fc:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a18      	ldr	r2, [pc, #96]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006204:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8006206:	4b16      	ldr	r3, [pc, #88]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800620e:	d308      	bcc.n	8006222 <HAL_TIM_PeriodElapsedCallback+0x202>
			LED_R_1;
 8006210:	2201      	movs	r2, #1
 8006212:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006216:	481d      	ldr	r0, [pc, #116]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006218:	f008 faac 	bl	800e774 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 800621c:	4b13      	ldr	r3, [pc, #76]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800621e:	2202      	movs	r2, #2
 8006220:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8006222:	4b12      	ldr	r3, [pc, #72]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006224:	8a5b      	ldrh	r3, [r3, #18]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d110      	bne.n	800624c <HAL_TIM_PeriodElapsedCallback+0x22c>
			wanted_rool = 0;
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8006232:	4b18      	ldr	r3, [pc, #96]	@ (8006294 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 800623a:	4b17      	ldr	r3, [pc, #92]	@ (8006298 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8006242:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006246:	b21a      	sxth	r2, r3
 8006248:	4b14      	ldr	r3, [pc, #80]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800624a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	240003cc 	.word	0x240003cc
 8006258:	0000006c 	.word	0x0000006c
 800625c:	00000070 	.word	0x00000070
 8006260:	00000078 	.word	0x00000078
 8006264:	000041d8 	.word	0x000041d8
 8006268:	58020000 	.word	0x58020000
 800626c:	00000178 	.word	0x00000178
 8006270:	58021000 	.word	0x58021000
 8006274:	00000174 	.word	0x00000174
 8006278:	000000e4 	.word	0x000000e4
 800627c:	000000e0 	.word	0x000000e0
 8006280:	000000e8 	.word	0x000000e8
 8006284:	00000134 	.word	0x00000134
 8006288:	00000114 	.word	0x00000114
 800628c:	58020400 	.word	0x58020400
 8006290:	0000406c 	.word	0x0000406c
 8006294:	00004068 	.word	0x00004068
 8006298:	00004070 	.word	0x00004070
 800629c:	0000405c 	.word	0x0000405c

080062a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b0:	f040 812c 	bne.w	800650c <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 80062b4:	4b97      	ldr	r3, [pc, #604]	@ (8006514 <HAL_GPIO_EXTI_Callback+0x274>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f040 8127 	bne.w	800650c <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 80062be:	2201      	movs	r2, #1
 80062c0:	2108      	movs	r1, #8
 80062c2:	4895      	ldr	r0, [pc, #596]	@ (8006518 <HAL_GPIO_EXTI_Callback+0x278>)
 80062c4:	f008 fa56 	bl	800e774 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 80062c8:	4894      	ldr	r0, [pc, #592]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 80062ca:	f7fc f939 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 80062ce:	2200      	movs	r2, #0
 80062d0:	2108      	movs	r1, #8
 80062d2:	4891      	ldr	r0, [pc, #580]	@ (8006518 <HAL_GPIO_EXTI_Callback+0x278>)
 80062d4:	f008 fa4e 	bl	800e774 <HAL_GPIO_WritePin>


			LED_Y_1;
 80062d8:	2201      	movs	r2, #1
 80062da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062de:	4890      	ldr	r0, [pc, #576]	@ (8006520 <HAL_GPIO_EXTI_Callback+0x280>)
 80062e0:	f008 fa48 	bl	800e774 <HAL_GPIO_WritePin>

			loopnum = 0;
 80062e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x284>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	e011      	b.n	8006314 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	330c      	adds	r3, #12
 80062f4:	4a89      	ldr	r2, [pc, #548]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 80062f6:	5cd2      	ldrb	r2, [r2, r3]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	330c      	adds	r3, #12
 80062fc:	498a      	ldr	r1, [pc, #552]	@ (8006528 <HAL_GPIO_EXTI_Callback+0x288>)
 80062fe:	5ccb      	ldrb	r3, [r1, r3]
 8006300:	429a      	cmp	r2, r3
 8006302:	d104      	bne.n	800630e <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8006304:	4b87      	ldr	r3, [pc, #540]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x284>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	4a86      	ldr	r2, [pc, #536]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x284>)
 800630c:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b09      	cmp	r3, #9
 8006318:	ddea      	ble.n	80062f0 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 800631a:	4b82      	ldr	r3, [pc, #520]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x284>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b0a      	cmp	r3, #10
 8006320:	f040 80e3 	bne.w	80064ea <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006324:	2302      	movs	r3, #2
 8006326:	2200      	movs	r2, #0
 8006328:	4980      	ldr	r1, [pc, #512]	@ (800652c <HAL_GPIO_EXTI_Callback+0x28c>)
 800632a:	487c      	ldr	r0, [pc, #496]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 800632c:	f000 ffc6 	bl	80072bc <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006330:	2305      	movs	r3, #5
 8006332:	2203      	movs	r2, #3
 8006334:	497e      	ldr	r1, [pc, #504]	@ (8006530 <HAL_GPIO_EXTI_Callback+0x290>)
 8006336:	4879      	ldr	r0, [pc, #484]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 8006338:	f000 ffc0 	bl	80072bc <convert_array_to_value>
				if(wobble_strenght == 1){
 800633c:	4b7d      	ldr	r3, [pc, #500]	@ (8006534 <HAL_GPIO_EXTI_Callback+0x294>)
 800633e:	edd3 7a00 	vldr	s15, [r3]
 8006342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006346:	eef4 7a47 	vcmp.f32	s15, s14
 800634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634e:	d105      	bne.n	800635c <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 8006350:	2308      	movs	r3, #8
 8006352:	2206      	movs	r2, #6
 8006354:	4978      	ldr	r1, [pc, #480]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 8006356:	4871      	ldr	r0, [pc, #452]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 8006358:	f000 ffb0 	bl	80072bc <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 800635c:	230b      	movs	r3, #11
 800635e:	2209      	movs	r2, #9
 8006360:	4976      	ldr	r1, [pc, #472]	@ (800653c <HAL_GPIO_EXTI_Callback+0x29c>)
 8006362:	486e      	ldr	r0, [pc, #440]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 8006364:	f000 ffaa 	bl	80072bc <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 8006368:	4b75      	ldr	r3, [pc, #468]	@ (8006540 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800636a:	2201      	movs	r2, #1
 800636c:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 800636e:	4b6b      	ldr	r3, [pc, #428]	@ (800651c <HAL_GPIO_EXTI_Callback+0x27c>)
 8006370:	7ddb      	ldrb	r3, [r3, #23]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d11b      	bne.n	80063ae <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 8006376:	2201      	movs	r2, #1
 8006378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800637c:	4871      	ldr	r0, [pc, #452]	@ (8006544 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800637e:	f008 f9f9 	bl	800e774 <HAL_GPIO_WritePin>
					LED_R_1;
 8006382:	2201      	movs	r2, #1
 8006384:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006388:	4865      	ldr	r0, [pc, #404]	@ (8006520 <HAL_GPIO_EXTI_Callback+0x280>)
 800638a:	f008 f9f3 	bl	800e774 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 800638e:	4b6e      	ldr	r3, [pc, #440]	@ (8006548 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d10b      	bne.n	80063ae <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 8006396:	486d      	ldr	r0, [pc, #436]	@ (800654c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006398:	f017 fc84 	bl	801dca4 <f_close>
						fresult = f_mount(NULL, "/", 1);
 800639c:	2201      	movs	r2, #1
 800639e:	496c      	ldr	r1, [pc, #432]	@ (8006550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80063a0:	2000      	movs	r0, #0
 80063a2:	f017 f85f 	bl	801d464 <f_mount>
 80063a6:	4603      	mov	r3, r0
 80063a8:	461a      	mov	r2, r3
 80063aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006554 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80063ac:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 80063ae:	4b62      	ldr	r3, [pc, #392]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d103      	bne.n	80063c4 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 80063bc:	4b60      	ldr	r3, [pc, #384]	@ (8006540 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80063be:	2210      	movs	r2, #16
 80063c0:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 80063c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	0092      	lsls	r2, r2, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b21a      	sxth	r2, r3
 80063d8:	4b57      	ldr	r3, [pc, #348]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063da:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 80063dc:	4b56      	ldr	r3, [pc, #344]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	4b5c      	ldr	r3, [pc, #368]	@ (8006558 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80063e6:	4413      	add	r3, r2
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	b21a      	sxth	r2, r3
 80063ec:	4b52      	ldr	r3, [pc, #328]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063ee:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 80063f0:	4b51      	ldr	r3, [pc, #324]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da02      	bge.n	8006400 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 80063fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x298>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 8006400:	4b4b      	ldr	r3, [pc, #300]	@ (8006530 <HAL_GPIO_EXTI_Callback+0x290>)
 8006402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006406:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006412:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800655c <HAL_GPIO_EXTI_Callback+0x2bc>
 8006416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800641a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800641e:	ee17 3a90 	vmov	r3, s15
 8006422:	b21a      	sxth	r2, r3
 8006424:	4b4e      	ldr	r3, [pc, #312]	@ (8006560 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006426:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006428:	4b40      	ldr	r3, [pc, #256]	@ (800652c <HAL_GPIO_EXTI_Callback+0x28c>)
 800642a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800642e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800643a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006564 <HAL_GPIO_EXTI_Callback+0x2c4>
 800643e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006446:	ee17 3a90 	vmov	r3, s15
 800644a:	b21a      	sxth	r2, r3
 800644c:	4b46      	ldr	r3, [pc, #280]	@ (8006568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800644e:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 8006450:	4b3a      	ldr	r3, [pc, #232]	@ (800653c <HAL_GPIO_EXTI_Callback+0x29c>)
 8006452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006456:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006462:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800656c <HAL_GPIO_EXTI_Callback+0x2cc>
 8006466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800646a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800646e:	ee17 3a90 	vmov	r3, s15
 8006472:	b21a      	sxth	r2, r3
 8006474:	4b3e      	ldr	r3, [pc, #248]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006476:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 8006478:	4b39      	ldr	r3, [pc, #228]	@ (8006560 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800647a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800647e:	2b1d      	cmp	r3, #29
 8006480:	dc09      	bgt.n	8006496 <HAL_GPIO_EXTI_Callback+0x1f6>
 8006482:	4b37      	ldr	r3, [pc, #220]	@ (8006560 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006488:	f06f 021d 	mvn.w	r2, #29
 800648c:	4293      	cmp	r3, r2
 800648e:	bfb8      	it	lt
 8006490:	4613      	movlt	r3, r2
 8006492:	b21b      	sxth	r3, r3
 8006494:	e000      	b.n	8006498 <HAL_GPIO_EXTI_Callback+0x1f8>
 8006496:	231e      	movs	r3, #30
 8006498:	4a31      	ldr	r2, [pc, #196]	@ (8006560 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800649a:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 800649c:	4b32      	ldr	r3, [pc, #200]	@ (8006568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800649e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064a2:	2b1d      	cmp	r3, #29
 80064a4:	dc09      	bgt.n	80064ba <HAL_GPIO_EXTI_Callback+0x21a>
 80064a6:	4b30      	ldr	r3, [pc, #192]	@ (8006568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ac:	f06f 021d 	mvn.w	r2, #29
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bfb8      	it	lt
 80064b4:	4613      	movlt	r3, r2
 80064b6:	b21b      	sxth	r3, r3
 80064b8:	e000      	b.n	80064bc <HAL_GPIO_EXTI_Callback+0x21c>
 80064ba:	231e      	movs	r3, #30
 80064bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064be:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 80064c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c6:	2b1d      	cmp	r3, #29
 80064c8:	dc09      	bgt.n	80064de <HAL_GPIO_EXTI_Callback+0x23e>
 80064ca:	4b29      	ldr	r3, [pc, #164]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d0:	f06f 021d 	mvn.w	r2, #29
 80064d4:	4293      	cmp	r3, r2
 80064d6:	bfb8      	it	lt
 80064d8:	4613      	movlt	r3, r2
 80064da:	b21b      	sxth	r3, r3
 80064dc:	e000      	b.n	80064e0 <HAL_GPIO_EXTI_Callback+0x240>
 80064de:	231e      	movs	r3, #30
 80064e0:	4a23      	ldr	r2, [pc, #140]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064e2:	8013      	strh	r3, [r2, #0]
//				if(wanted_yaw_rx <= -30){
//					wanted_yaw_rx = -30;
//				}


				NRF_TIM_Inte = 0;
 80064e4:	4b23      	ldr	r3, [pc, #140]	@ (8006574 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 80064ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x284>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dd06      	ble.n	8006500 <HAL_GPIO_EXTI_Callback+0x260>
 80064f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x284>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b09      	cmp	r3, #9
 80064f8:	dc02      	bgt.n	8006500 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 80064fa:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80064fc:	2203      	movs	r2, #3
 80064fe:	825a      	strh	r2, [r3, #18]
	  			}


	  			LED_Y_0;
 8006500:	2200      	movs	r2, #0
 8006502:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006506:	4806      	ldr	r0, [pc, #24]	@ (8006520 <HAL_GPIO_EXTI_Callback+0x280>)
 8006508:	f008 f934 	bl	800e774 <HAL_GPIO_WritePin>
		}
	}
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	00000074 	.word	0x00000074
 8006518:	58021000 	.word	0x58021000
 800651c:	000000f4 	.word	0x000000f4
 8006520:	58020400 	.word	0x58020400
 8006524:	000041dc 	.word	0x000041dc
 8006528:	00000154 	.word	0x00000154
 800652c:	000041e2 	.word	0x000041e2
 8006530:	000041e0 	.word	0x000041e0
 8006534:	000041d0 	.word	0x000041d0
 8006538:	0000405c 	.word	0x0000405c
 800653c:	000041e4 	.word	0x000041e4
 8006540:	00000178 	.word	0x00000178
 8006544:	58021800 	.word	0x58021800
 8006548:	000041cc 	.word	0x000041cc
 800654c:	24001ef0 	.word	0x24001ef0
 8006550:	0801eae0 	.word	0x0801eae0
 8006554:	24001eec 	.word	0x24001eec
 8006558:	ffffd8f0 	.word	0xffffd8f0
 800655c:	3f266666 	.word	0x3f266666
 8006560:	0000404a 	.word	0x0000404a
 8006564:	3f28f5c3 	.word	0x3f28f5c3
 8006568:	00004048 	.word	0x00004048
 800656c:	3f19999a 	.word	0x3f19999a
 8006570:	0000404c 	.word	0x0000404c
 8006574:	00000078 	.word	0x00000078

08006578 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8006580:	4b24      	ldr	r3, [pc, #144]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	4b24      	ldr	r3, [pc, #144]	@ (8006618 <HAL_UART_RxCpltCallback+0xa0>)
 8006588:	7819      	ldrb	r1, [r3, #0]
 800658a:	4b24      	ldr	r3, [pc, #144]	@ (800661c <HAL_UART_RxCpltCallback+0xa4>)
 800658c:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 800658e:	4b21      	ldr	r3, [pc, #132]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	4b21      	ldr	r3, [pc, #132]	@ (800661c <HAL_UART_RxCpltCallback+0xa4>)
 8006596:	5c9b      	ldrb	r3, [r3, r2]
 8006598:	2b0d      	cmp	r3, #13
 800659a:	d11a      	bne.n	80065d2 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 800659c:	230a      	movs	r3, #10
 800659e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80065a0:	f107 010f 	add.w	r1, r7, #15
 80065a4:	2364      	movs	r3, #100	@ 0x64
 80065a6:	2201      	movs	r2, #1
 80065a8:	481d      	ldr	r0, [pc, #116]	@ (8006620 <HAL_UART_RxCpltCallback+0xa8>)
 80065aa:	f011 fc8b 	bl	8017ec4 <HAL_UART_Transmit>
		Y = '\r';
 80065ae:	230d      	movs	r3, #13
 80065b0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80065b2:	f107 010f 	add.w	r1, r7, #15
 80065b6:	2364      	movs	r3, #100	@ 0x64
 80065b8:	2201      	movs	r2, #1
 80065ba:	4819      	ldr	r0, [pc, #100]	@ (8006620 <HAL_UART_RxCpltCallback+0xa8>)
 80065bc:	f011 fc82 	bl	8017ec4 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 80065c0:	4b14      	ldr	r3, [pc, #80]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b15      	ldr	r3, [pc, #84]	@ (800661c <HAL_UART_RxCpltCallback+0xa4>)
 80065c8:	2100      	movs	r1, #0
 80065ca:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 80065cc:	4b15      	ldr	r3, [pc, #84]	@ (8006624 <HAL_UART_RxCpltCallback+0xac>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b10      	ldr	r3, [pc, #64]	@ (800661c <HAL_UART_RxCpltCallback+0xa4>)
 80065da:	4413      	add	r3, r2
 80065dc:	2201      	movs	r2, #1
 80065de:	4619      	mov	r1, r3
 80065e0:	480f      	ldr	r0, [pc, #60]	@ (8006620 <HAL_UART_RxCpltCallback+0xa8>)
 80065e2:	f011 fcfd 	bl	8017fe0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 80065e6:	2201      	movs	r2, #1
 80065e8:	490b      	ldr	r1, [pc, #44]	@ (8006618 <HAL_UART_RxCpltCallback+0xa0>)
 80065ea:	480d      	ldr	r0, [pc, #52]	@ (8006620 <HAL_UART_RxCpltCallback+0xa8>)
 80065ec:	f011 fd8c 	bl	8018108 <HAL_UART_Receive_IT>
	command_ch_num++;
 80065f0:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 80065fa:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <HAL_UART_RxCpltCallback+0xac>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d102      	bne.n	800660a <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8006604:	4b03      	ldr	r3, [pc, #12]	@ (8006614 <HAL_UART_RxCpltCallback+0x9c>)
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
	}
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	000041bf 	.word	0x000041bf
 8006618:	000041c0 	.word	0x000041c0
 800661c:	000041b4 	.word	0x000041b4
 8006620:	240004b0 	.word	0x240004b0
 8006624:	000041be 	.word	0x000041be

08006628 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006630:	4bbc      	ldr	r3, [pc, #752]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	f040 8595 	bne.w	8007164 <HAL_I2C_MemRxCpltCallback+0xb3c>
			MPU6050_IRQ = 0;
 800663a:	4bba      	ldr	r3, [pc, #744]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006640:	2201      	movs	r2, #1
 8006642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006646:	48b8      	ldr	r0, [pc, #736]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x300>)
 8006648:	f008 f894 	bl	800e774 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 800664c:	4bb7      	ldr	r3, [pc, #732]	@ (800692c <HAL_I2C_MemRxCpltCallback+0x304>)
 800664e:	edd3 7a00 	vldr	s15, [r3]
 8006652:	4bb7      	ldr	r3, [pc, #732]	@ (8006930 <HAL_I2C_MemRxCpltCallback+0x308>)
 8006654:	ed93 7a00 	vldr	s14, [r3]
 8006658:	4bb6      	ldr	r3, [pc, #728]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x30c>)
 800665a:	edd3 6a00 	vldr	s13, [r3]
 800665e:	4bb6      	ldr	r3, [pc, #728]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006660:	ed93 6a00 	vldr	s12, [r3]
 8006664:	4bb5      	ldr	r3, [pc, #724]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x314>)
 8006666:	edd3 5a00 	vldr	s11, [r3]
 800666a:	4bb5      	ldr	r3, [pc, #724]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x318>)
 800666c:	ed93 5a00 	vldr	s10, [r3]
 8006670:	eddf 4ab4 	vldr	s9, [pc, #720]	@ 8006944 <HAL_I2C_MemRxCpltCallback+0x31c>
 8006674:	ed9f 4ab4 	vldr	s8, [pc, #720]	@ 8006948 <HAL_I2C_MemRxCpltCallback+0x320>
 8006678:	4bb4      	ldr	r3, [pc, #720]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x324>)
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	4bb4      	ldr	r3, [pc, #720]	@ (8006950 <HAL_I2C_MemRxCpltCallback+0x328>)
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	eef0 3a44 	vmov.f32	s7, s8
 8006684:	eeb0 3a64 	vmov.f32	s6, s9
 8006688:	eef0 2a45 	vmov.f32	s5, s10
 800668c:	eeb0 2a65 	vmov.f32	s4, s11
 8006690:	eef0 1a46 	vmov.f32	s3, s12
 8006694:	eeb0 1a66 	vmov.f32	s2, s13
 8006698:	eef0 0a47 	vmov.f32	s1, s14
 800669c:	eeb0 0a67 	vmov.f32	s0, s15
 80066a0:	4bac      	ldr	r3, [pc, #688]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x32c>)
 80066a2:	4aad      	ldr	r2, [pc, #692]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x330>)
 80066a4:	49ad      	ldr	r1, [pc, #692]	@ (800695c <HAL_I2C_MemRxCpltCallback+0x334>)
 80066a6:	48ae      	ldr	r0, [pc, #696]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x338>)
 80066a8:	f7fb f86c 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80066ac:	4bac      	ldr	r3, [pc, #688]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x338>)
 80066ae:	edd3 7a00 	vldr	s15, [r3]
 80066b2:	4baa      	ldr	r3, [pc, #680]	@ (800695c <HAL_I2C_MemRxCpltCallback+0x334>)
 80066b4:	ed93 7a00 	vldr	s14, [r3]
 80066b8:	4ba7      	ldr	r3, [pc, #668]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x330>)
 80066ba:	edd3 6a00 	vldr	s13, [r3]
 80066be:	49a9      	ldr	r1, [pc, #676]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80066c0:	48a9      	ldr	r0, [pc, #676]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x340>)
 80066c2:	eeb0 1a66 	vmov.f32	s2, s13
 80066c6:	eef0 0a47 	vmov.f32	s1, s14
 80066ca:	eeb0 0a67 	vmov.f32	s0, s15
 80066ce:	f7fa ff0b 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 80066d2:	4ba5      	ldr	r3, [pc, #660]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x340>)
 80066d4:	edd3 7a00 	vldr	s15, [r3]
 80066d8:	4ba2      	ldr	r3, [pc, #648]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80066da:	ed93 7a00 	vldr	s14, [r3]
 80066de:	4ba3      	ldr	r3, [pc, #652]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x344>)
 80066e0:	edd3 6a00 	vldr	s13, [r3]
 80066e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x32c>)
 80066e6:	ed93 6a00 	vldr	s12, [r3]
 80066ea:	4b99      	ldr	r3, [pc, #612]	@ (8006950 <HAL_I2C_MemRxCpltCallback+0x328>)
 80066ec:	edd3 5a00 	vldr	s11, [r3]
 80066f0:	4b96      	ldr	r3, [pc, #600]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x324>)
 80066f2:	ed93 5a00 	vldr	s10, [r3]
 80066f6:	eef0 2a45 	vmov.f32	s5, s10
 80066fa:	eeb0 2a65 	vmov.f32	s4, s11
 80066fe:	eef0 1a46 	vmov.f32	s3, s12
 8006702:	eeb0 1a66 	vmov.f32	s2, s13
 8006706:	eef0 0a47 	vmov.f32	s1, s14
 800670a:	eeb0 0a67 	vmov.f32	s0, s15
 800670e:	4898      	ldr	r0, [pc, #608]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006710:	f7fb f8e2 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 8006714:	4b96      	ldr	r3, [pc, #600]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a96      	ldr	r2, [pc, #600]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800671a:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 800671c:	4b94      	ldr	r3, [pc, #592]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x348>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a95      	ldr	r2, [pc, #596]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006722:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006724:	4b92      	ldr	r3, [pc, #584]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	4a94      	ldr	r2, [pc, #592]	@ (800697c <HAL_I2C_MemRxCpltCallback+0x354>)
 800672a:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 800672c:	4b94      	ldr	r3, [pc, #592]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0x358>)
 800672e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800673a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800673e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006742:	4b90      	ldr	r3, [pc, #576]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006744:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006748:	4b8f      	ldr	r3, [pc, #572]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0x360>)
 800674a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006756:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800675a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800675e:	4b8b      	ldr	r3, [pc, #556]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x364>)
 8006760:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 8006764:	4b8a      	ldr	r3, [pc, #552]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 800676c:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006770:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006774:	4b83      	ldr	r3, [pc, #524]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006776:	edd3 7a00 	vldr	s15, [r3]
 800677a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800677e:	eddf 7a85 	vldr	s15, [pc, #532]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006786:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800678a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006796:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800679a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800679e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80067a6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80067aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x370>)
 80067ac:	edd3 7a00 	vldr	s15, [r3]
 80067b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b8:	4b72      	ldr	r3, [pc, #456]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067ba:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 80067be:	eddf 7a75 	vldr	s15, [pc, #468]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 80067c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067c6:	4b71      	ldr	r3, [pc, #452]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x364>)
 80067c8:	edd3 7a00 	vldr	s15, [r3]
 80067cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80067d0:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 80067d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e4:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 80067e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80067f8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80067fc:	4b67      	ldr	r3, [pc, #412]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x374>)
 80067fe:	edd3 7a00 	vldr	s15, [r3]
 8006802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800680a:	4b60      	ldr	r3, [pc, #384]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x364>)
 800680c:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006810:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006814:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006818:	4b5d      	ldr	r3, [pc, #372]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x368>)
 800681a:	edd3 7a00 	vldr	s15, [r3]
 800681e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006822:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006826:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800682a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800682e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	eddf 7a57 	vldr	s15, [pc, #348]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x36c>
 800683a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800684a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800684e:	4b54      	ldr	r3, [pc, #336]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006850:	edd3 7a00 	vldr	s15, [r3]
 8006854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800685c:	4b4c      	ldr	r3, [pc, #304]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x368>)
 800685e:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 8006862:	4b48      	ldr	r3, [pc, #288]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a4c      	ldr	r2, [pc, #304]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006868:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 800686a:	4b48      	ldr	r3, [pc, #288]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x364>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4b      	ldr	r2, [pc, #300]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x374>)
 8006870:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 8006872:	4b47      	ldr	r3, [pc, #284]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a4a      	ldr	r2, [pc, #296]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006878:	6013      	str	r3, [r2, #0]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (wanted_pitch - now_pitch);
 800687a:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 800687c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006880:	2b00      	cmp	r3, #0
 8006882:	d008      	beq.n	8006896 <HAL_I2C_MemRxCpltCallback+0x26e>
 8006884:	4b48      	ldr	r3, [pc, #288]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006894:	e011      	b.n	80068ba <HAL_I2C_MemRxCpltCallback+0x292>
 8006896:	4b44      	ldr	r3, [pc, #272]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068a2:	4b3a      	ldr	r3, [pc, #232]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x364>)
 80068a4:	edd3 6a00 	vldr	s13, [r3]
 80068a8:	4b32      	ldr	r3, [pc, #200]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x34c>)
 80068aa:	edd3 7a00 	vldr	s15, [r3]
 80068ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068ba:	4b3b      	ldr	r3, [pc, #236]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x380>)
 80068bc:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (wanted_rool - now_rool);
 80068c0:	4b38      	ldr	r3, [pc, #224]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80068c2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <HAL_I2C_MemRxCpltCallback+0x2b4>
 80068ca:	4b38      	ldr	r3, [pc, #224]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x384>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068da:	e011      	b.n	8006900 <HAL_I2C_MemRxCpltCallback+0x2d8>
 80068dc:	4b33      	ldr	r3, [pc, #204]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x384>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	ee07 3a90 	vmov	s15, r3
 80068e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068e8:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068ea:	edd3 6a00 	vldr	s13, [r3]
 80068ee:	4b22      	ldr	r3, [pc, #136]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x350>)
 80068f0:	edd3 7a00 	vldr	s15, [r3]
 80068f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006900:	4b2a      	ldr	r3, [pc, #168]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x384>)
 8006902:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (wanted_yaw - now_yaw);
 8006906:	4b27      	ldr	r3, [pc, #156]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006908:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800690c:	2b00      	cmp	r3, #0
 800690e:	d051      	beq.n	80069b4 <HAL_I2C_MemRxCpltCallback+0x38c>
 8006910:	4b27      	ldr	r3, [pc, #156]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x388>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	ee07 3a90 	vmov	s15, r3
 8006918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800691c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006920:	e05a      	b.n	80069d8 <HAL_I2C_MemRxCpltCallback+0x3b0>
 8006922:	bf00      	nop
 8006924:	000041d4 	.word	0x000041d4
 8006928:	58021000 	.word	0x58021000
 800692c:	00000030 	.word	0x00000030
 8006930:	00000034 	.word	0x00000034
 8006934:	00000038 	.word	0x00000038
 8006938:	0000003c 	.word	0x0000003c
 800693c:	00000040 	.word	0x00000040
 8006940:	00000044 	.word	0x00000044
 8006944:	42830000 	.word	0x42830000
 8006948:	46000000 	.word	0x46000000
 800694c:	00000014 	.word	0x00000014
 8006950:	00000010 	.word	0x00000010
 8006954:	0000000c 	.word	0x0000000c
 8006958:	00000008 	.word	0x00000008
 800695c:	00000004 	.word	0x00000004
 8006960:	00000000 	.word	0x00000000
 8006964:	0000001c 	.word	0x0000001c
 8006968:	00000018 	.word	0x00000018
 800696c:	00000058 	.word	0x00000058
 8006970:	0000007c 	.word	0x0000007c
 8006974:	00004078 	.word	0x00004078
 8006978:	0000407c 	.word	0x0000407c
 800697c:	00004080 	.word	0x00004080
 8006980:	0000404a 	.word	0x0000404a
 8006984:	0000406c 	.word	0x0000406c
 8006988:	00004048 	.word	0x00004048
 800698c:	00004068 	.word	0x00004068
 8006990:	00004070 	.word	0x00004070
 8006994:	3a83126f 	.word	0x3a83126f
 8006998:	00004054 	.word	0x00004054
 800699c:	00004050 	.word	0x00004050
 80069a0:	00004058 	.word	0x00004058
 80069a4:	00000178 	.word	0x00000178
 80069a8:	0000409c 	.word	0x0000409c
 80069ac:	000040a0 	.word	0x000040a0
 80069b0:	000040a4 	.word	0x000040a4
 80069b4:	4ba1      	ldr	r3, [pc, #644]	@ (8006c3c <HAL_I2C_MemRxCpltCallback+0x614>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c0:	4b9f      	ldr	r3, [pc, #636]	@ (8006c40 <HAL_I2C_MemRxCpltCallback+0x618>)
 80069c2:	edd3 6a00 	vldr	s13, [r3]
 80069c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006c44 <HAL_I2C_MemRxCpltCallback+0x61c>)
 80069c8:	edd3 7a00 	vldr	s15, [r3]
 80069cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069d8:	4b98      	ldr	r3, [pc, #608]	@ (8006c3c <HAL_I2C_MemRxCpltCallback+0x614>)
 80069da:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pid_pitch - gx);
 80069de:	4b9a      	ldr	r3, [pc, #616]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x620>)
 80069e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_I2C_MemRxCpltCallback+0x3d2>
 80069e8:	4b98      	ldr	r3, [pc, #608]	@ (8006c4c <HAL_I2C_MemRxCpltCallback+0x624>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f8:	e011      	b.n	8006a1e <HAL_I2C_MemRxCpltCallback+0x3f6>
 80069fa:	4b94      	ldr	r3, [pc, #592]	@ (8006c4c <HAL_I2C_MemRxCpltCallback+0x624>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a06:	4b92      	ldr	r3, [pc, #584]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006a08:	edd3 6a00 	vldr	s13, [r3]
 8006a0c:	4b91      	ldr	r3, [pc, #580]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x62c>)
 8006a0e:	edd3 7a00 	vldr	s15, [r3]
 8006a12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c4c <HAL_I2C_MemRxCpltCallback+0x624>)
 8006a20:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (pid_rool - gy);
 8006a24:	4b88      	ldr	r3, [pc, #544]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006a26:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <HAL_I2C_MemRxCpltCallback+0x418>
 8006a2e:	4b8a      	ldr	r3, [pc, #552]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a3e:	e011      	b.n	8006a64 <HAL_I2C_MemRxCpltCallback+0x43c>
 8006a40:	4b85      	ldr	r3, [pc, #532]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a4c:	4b83      	ldr	r3, [pc, #524]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a4e:	edd3 6a00 	vldr	s13, [r3]
 8006a52:	4b83      	ldr	r3, [pc, #524]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a54:	edd3 7a00 	vldr	s15, [r3]
 8006a58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a64:	4b7c      	ldr	r3, [pc, #496]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006a66:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (pid_yaw - gz);
 8006a6a:	4b77      	ldr	r3, [pc, #476]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006a6c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_I2C_MemRxCpltCallback+0x45e>
 8006a74:	4b7b      	ldr	r3, [pc, #492]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a84:	e011      	b.n	8006aaa <HAL_I2C_MemRxCpltCallback+0x482>
 8006a86:	4b77      	ldr	r3, [pc, #476]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a92:	4b75      	ldr	r3, [pc, #468]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a94:	edd3 6a00 	vldr	s13, [r3]
 8006a98:	4b74      	ldr	r3, [pc, #464]	@ (8006c6c <HAL_I2C_MemRxCpltCallback+0x644>)
 8006a9a:	edd3 7a00 	vldr	s15, [r3]
 8006a9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006aac:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	496f      	ldr	r1, [pc, #444]	@ (8006c70 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006ab4:	4866      	ldr	r0, [pc, #408]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006ab6:	f7fc ff89 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006aba:	2202      	movs	r2, #2
 8006abc:	496d      	ldr	r1, [pc, #436]	@ (8006c74 <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006abe:	4867      	ldr	r0, [pc, #412]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x634>)
 8006ac0:	f7fc ff84 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	496c      	ldr	r1, [pc, #432]	@ (8006c78 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006ac8:	4867      	ldr	r0, [pc, #412]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006aca:	f7fc ff7f 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006ace:	2204      	movs	r2, #4
 8006ad0:	496a      	ldr	r1, [pc, #424]	@ (8006c7c <HAL_I2C_MemRxCpltCallback+0x654>)
 8006ad2:	486b      	ldr	r0, [pc, #428]	@ (8006c80 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006ad4:	f7fc ff7a 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006ad8:	2205      	movs	r2, #5
 8006ada:	496a      	ldr	r1, [pc, #424]	@ (8006c84 <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006adc:	486a      	ldr	r0, [pc, #424]	@ (8006c88 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006ade:	f7fc ff75 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006ae2:	2206      	movs	r2, #6
 8006ae4:	4969      	ldr	r1, [pc, #420]	@ (8006c8c <HAL_I2C_MemRxCpltCallback+0x664>)
 8006ae6:	486a      	ldr	r0, [pc, #424]	@ (8006c90 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006ae8:	f7fc ff70 	bl	80039cc <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 8006aec:	4b69      	ldr	r3, [pc, #420]	@ (8006c94 <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006aee:	ed93 7a00 	vldr	s14, [r3]
 8006af2:	4b69      	ldr	r3, [pc, #420]	@ (8006c98 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006af4:	edd3 7a00 	vldr	s15, [r3]
 8006af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006afc:	4b67      	ldr	r3, [pc, #412]	@ (8006c9c <HAL_I2C_MemRxCpltCallback+0x674>)
 8006afe:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 8006b02:	4b67      	ldr	r3, [pc, #412]	@ (8006ca0 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006b04:	ed93 7a00 	vldr	s14, [r3]
 8006b08:	4b66      	ldr	r3, [pc, #408]	@ (8006ca4 <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006b0a:	edd3 7a00 	vldr	s15, [r3]
 8006b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b12:	4b65      	ldr	r3, [pc, #404]	@ (8006ca8 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006b14:	edc3 7a00 	vstr	s15, [r3]
			old_error_yaw = wanted_yaw - now_yaw;
 8006b18:	4b49      	ldr	r3, [pc, #292]	@ (8006c40 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006b1a:	ed93 7a00 	vldr	s14, [r3]
 8006b1e:	4b49      	ldr	r3, [pc, #292]	@ (8006c44 <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006b20:	edd3 7a00 	vldr	s15, [r3]
 8006b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b28:	4b60      	ldr	r3, [pc, #384]	@ (8006cac <HAL_I2C_MemRxCpltCallback+0x684>)
 8006b2a:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 8006b2e:	4b48      	ldr	r3, [pc, #288]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006b30:	ed93 7a00 	vldr	s14, [r3]
 8006b34:	4b47      	ldr	r3, [pc, #284]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x62c>)
 8006b36:	edd3 7a00 	vldr	s15, [r3]
 8006b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8006cb0 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006b40:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 8006b44:	4b45      	ldr	r3, [pc, #276]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x634>)
 8006b46:	ed93 7a00 	vldr	s14, [r3]
 8006b4a:	4b45      	ldr	r3, [pc, #276]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006b4c:	edd3 7a00 	vldr	s15, [r3]
 8006b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b54:	4b57      	ldr	r3, [pc, #348]	@ (8006cb4 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006b56:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006b5a:	4b39      	ldr	r3, [pc, #228]	@ (8006c40 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006b5c:	ed93 7a00 	vldr	s14, [r3]
 8006b60:	4b42      	ldr	r3, [pc, #264]	@ (8006c6c <HAL_I2C_MemRxCpltCallback+0x644>)
 8006b62:	edd3 7a00 	vldr	s15, [r3]
 8006b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b6a:	4b53      	ldr	r3, [pc, #332]	@ (8006cb8 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006b6c:	edc3 7a00 	vstr	s15, [r3]


			//MYDRON.ROOL 	= ((pid_angular_rate_rool > -5000) && (pid_angular_rate_rool < 5000)) ? pid_angular_rate_rool: (pid_angular_rate_rool > 0) ? 5000: -5000;
			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006b70:	4b45      	ldr	r3, [pc, #276]	@ (8006c88 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b72:	edd3 7a00 	vldr	s15, [r3]
 8006b76:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8006cbc <HAL_I2C_MemRxCpltCallback+0x694>
 8006b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b82:	dd04      	ble.n	8006b8e <HAL_I2C_MemRxCpltCallback+0x566>
 8006b84:	f001 f87c 	bl	8007c80 <ROOL_MAX_VAL>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	e012      	b.n	8006bb4 <HAL_I2C_MemRxCpltCallback+0x58c>
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c88 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b90:	edd3 7a00 	vldr	s15, [r3]
 8006b94:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006cc0 <HAL_I2C_MemRxCpltCallback+0x698>
 8006b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba0:	d504      	bpl.n	8006bac <HAL_I2C_MemRxCpltCallback+0x584>
 8006ba2:	f001 f87d 	bl	8007ca0 <ROOL_MIN_VAL>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	e003      	b.n	8006bb4 <HAL_I2C_MemRxCpltCallback+0x58c>
 8006bac:	f001 f8c8 	bl	8007d40 <ROOL_GOOD_VAL>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	4b24      	ldr	r3, [pc, #144]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006bb6:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006bb8:	4b31      	ldr	r3, [pc, #196]	@ (8006c80 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006bba:	edd3 7a00 	vldr	s15, [r3]
 8006bbe:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006cbc <HAL_I2C_MemRxCpltCallback+0x694>
 8006bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	dd04      	ble.n	8006bd6 <HAL_I2C_MemRxCpltCallback+0x5ae>
 8006bcc:	f001 f878 	bl	8007cc0 <PITCH_MAX_VAL>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	e012      	b.n	8006bfc <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c80 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006bd8:	edd3 7a00 	vldr	s15, [r3]
 8006bdc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006cc0 <HAL_I2C_MemRxCpltCallback+0x698>
 8006be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be8:	d504      	bpl.n	8006bf4 <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006bea:	f001 f879 	bl	8007ce0 <PITCH_MIN_VAL>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	e003      	b.n	8006bfc <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006bf4:	f001 f8bc 	bl	8007d70 <PITCH_GOOD_VAL>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006bfe:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006c00:	4b23      	ldr	r3, [pc, #140]	@ (8006c90 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006c02:	edd3 7a00 	vldr	s15, [r3]
 8006c06:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006cbc <HAL_I2C_MemRxCpltCallback+0x694>
 8006c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c12:	dd04      	ble.n	8006c1e <HAL_I2C_MemRxCpltCallback+0x5f6>
 8006c14:	f001 f874 	bl	8007d00 <YAW_MAX_VAL>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	e056      	b.n	8006ccc <HAL_I2C_MemRxCpltCallback+0x6a4>
 8006c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c90 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006c20:	edd3 7a00 	vldr	s15, [r3]
 8006c24:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006cc0 <HAL_I2C_MemRxCpltCallback+0x698>
 8006c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c30:	d548      	bpl.n	8006cc4 <HAL_I2C_MemRxCpltCallback+0x69c>
 8006c32:	f001 f875 	bl	8007d20 <YAW_MIN_VAL>
 8006c36:	4603      	mov	r3, r0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	e047      	b.n	8006ccc <HAL_I2C_MemRxCpltCallback+0x6a4>
 8006c3c:	000040a4 	.word	0x000040a4
 8006c40:	00004070 	.word	0x00004070
 8006c44:	00004080 	.word	0x00004080
 8006c48:	00000178 	.word	0x00000178
 8006c4c:	000040a8 	.word	0x000040a8
 8006c50:	000040b4 	.word	0x000040b4
 8006c54:	0000000c 	.word	0x0000000c
 8006c58:	000040ac 	.word	0x000040ac
 8006c5c:	000040bc 	.word	0x000040bc
 8006c60:	00000010 	.word	0x00000010
 8006c64:	000040b0 	.word	0x000040b0
 8006c68:	000040b8 	.word	0x000040b8
 8006c6c:	00000014 	.word	0x00000014
 8006c70:	000040f0 	.word	0x000040f0
 8006c74:	00004104 	.word	0x00004104
 8006c78:	00004118 	.word	0x00004118
 8006c7c:	00004150 	.word	0x00004150
 8006c80:	000040c0 	.word	0x000040c0
 8006c84:	00004164 	.word	0x00004164
 8006c88:	000040c8 	.word	0x000040c8
 8006c8c:	00004178 	.word	0x00004178
 8006c90:	000040c4 	.word	0x000040c4
 8006c94:	00004068 	.word	0x00004068
 8006c98:	00004078 	.word	0x00004078
 8006c9c:	00004084 	.word	0x00004084
 8006ca0:	0000406c 	.word	0x0000406c
 8006ca4:	0000407c 	.word	0x0000407c
 8006ca8:	00004088 	.word	0x00004088
 8006cac:	0000408c 	.word	0x0000408c
 8006cb0:	00004090 	.word	0x00004090
 8006cb4:	00004094 	.word	0x00004094
 8006cb8:	00004098 	.word	0x00004098
 8006cbc:	459c4000 	.word	0x459c4000
 8006cc0:	c59c4000 	.word	0xc59c4000
 8006cc4:	f001 f86c 	bl	8007da0 <YAW_GOOD_VAL>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4bc4      	ldr	r3, [pc, #784]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cce:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006cd0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006cd4:	f7fc fd44 	bl	8003760 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006cd8:	4bc1      	ldr	r3, [pc, #772]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cda:	885b      	ldrh	r3, [r3, #2]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4bc1      	ldr	r3, [pc, #772]	@ (8006fe4 <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	dd05      	ble.n	8006cf4 <HAL_I2C_MemRxCpltCallback+0x6cc>
				MYDRON.THRUST = thrust_limit;
 8006ce8:	4bbe      	ldr	r3, [pc, #760]	@ (8006fe4 <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	4bbb      	ldr	r3, [pc, #748]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cf2:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006cf4:	4bbc      	ldr	r3, [pc, #752]	@ (8006fe8 <HAL_I2C_MemRxCpltCallback+0x9c0>)
 8006cf6:	edd3 7a04 	vldr	s15, [r3, #16]
 8006cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006cfe:	f000 fbcd 	bl	800749c <WartoscBezwgledna>
 8006d02:	eef0 7a40 	vmov.f32	s15, s0
 8006d06:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0a:	f000 ff6d 	bl	8007be8 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006d0e:	4bb7      	ldr	r3, [pc, #732]	@ (8006fec <HAL_I2C_MemRxCpltCallback+0x9c4>)
 8006d10:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d14:	eeb0 0a67 	vmov.f32	s0, s15
 8006d18:	f000 fbc0 	bl	800749c <WartoscBezwgledna>
 8006d1c:	eef0 7a40 	vmov.f32	s15, s0
 8006d20:	eeb0 0a67 	vmov.f32	s0, s15
 8006d24:	f000 ff60 	bl	8007be8 <Stack_Push>
			Stack_Push(now_pitch);
 8006d28:	4bb1      	ldr	r3, [pc, #708]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9c8>)
 8006d2a:	edd3 7a00 	vldr	s15, [r3]
 8006d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d32:	f000 ff59 	bl	8007be8 <Stack_Push>
			Stack_Push(now_rool);
 8006d36:	4baf      	ldr	r3, [pc, #700]	@ (8006ff4 <HAL_I2C_MemRxCpltCallback+0x9cc>)
 8006d38:	edd3 7a00 	vldr	s15, [r3]
 8006d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d40:	f000 ff52 	bl	8007be8 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006d44:	4ba6      	ldr	r3, [pc, #664]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d46:	885b      	ldrh	r3, [r3, #2]
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d50:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8006fc8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006d54:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d58:	4ba1      	ldr	r3, [pc, #644]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d6a:	4b9d      	ldr	r3, [pc, #628]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d7c:	4b98      	ldr	r3, [pc, #608]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d8e:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006fd0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006d92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d96:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006d9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006da2:	ee17 2a90 	vmov	r2, s15
 8006da6:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d832      	bhi.n	8006e14 <HAL_I2C_MemRxCpltCallback+0x7ec>
 8006dae:	4b8c      	ldr	r3, [pc, #560]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dba:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8006fc8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006dbe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dc2:	4b87      	ldr	r3, [pc, #540]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006dc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006dd4:	4b82      	ldr	r3, [pc, #520]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006dd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006de6:	4b7e      	ldr	r3, [pc, #504]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006de8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006dec:	ee07 3a90 	vmov	s15, r3
 8006df0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006df4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006df8:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006fd0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006dfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e00:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e0c:	ee17 3a90 	vmov	r3, s15
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	e001      	b.n	8006e18 <HAL_I2C_MemRxCpltCallback+0x7f0>
 8006e14:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006e18:	4a77      	ldr	r2, [pc, #476]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0x9d0>)
 8006e1a:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006e1c:	4b70      	ldr	r3, [pc, #448]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e1e:	885b      	ldrh	r3, [r3, #2]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e28:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8006fc8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006e2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e30:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e42:	4b67      	ldr	r3, [pc, #412]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e54:	4b62      	ldr	r3, [pc, #392]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e66:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006fd0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006e6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e6e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006e72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e7a:	ee17 2a90 	vmov	r2, s15
 8006e7e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d832      	bhi.n	8006eec <HAL_I2C_MemRxCpltCallback+0x8c4>
 8006e86:	4b56      	ldr	r3, [pc, #344]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e92:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8006fc8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006e96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e9a:	4b51      	ldr	r3, [pc, #324]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ea8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006eac:	4b4c      	ldr	r3, [pc, #304]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006eae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eba:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ebe:	4b48      	ldr	r3, [pc, #288]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ec0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ecc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ed0:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006fd0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006ed4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ed8:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006edc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ee0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ee4:	ee17 3a90 	vmov	r3, s15
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	e001      	b.n	8006ef0 <HAL_I2C_MemRxCpltCallback+0x8c8>
 8006eec:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006ef0:	4a42      	ldr	r2, [pc, #264]	@ (8006ffc <HAL_I2C_MemRxCpltCallback+0x9d4>)
 8006ef2:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ef6:	885b      	ldrh	r3, [r3, #2]
 8006ef8:	ee07 3a90 	vmov	s15, r3
 8006efc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f00:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006fc8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006f04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f08:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f1a:	4b31      	ldr	r3, [pc, #196]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f3e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006fd0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006f42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f46:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006f4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f52:	ee17 2a90 	vmov	r2, s15
 8006f56:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d850      	bhi.n	8007000 <HAL_I2C_MemRxCpltCallback+0x9d8>
 8006f5e:	4b20      	ldr	r3, [pc, #128]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f6a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006fc8 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006f6e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f72:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f80:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f84:	4b16      	ldr	r3, [pc, #88]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f96:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fa4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fa8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006fd0 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006fac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fb0:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006fb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fb8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fbc:	ee17 3a90 	vmov	r3, s15
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	e01f      	b.n	8007004 <HAL_I2C_MemRxCpltCallback+0x9dc>
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	66666666 	.word	0x66666666
 8006fcc:	3fe66666 	.word	0x3fe66666
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	40c48200 	.word	0x40c48200
 8006fd8:	00000000 	.word	0x00000000
 8006fdc:	407f4000 	.word	0x407f4000
 8006fe0:	00000178 	.word	0x00000178
 8006fe4:	0000405e 	.word	0x0000405e
 8006fe8:	000040f0 	.word	0x000040f0
 8006fec:	00004104 	.word	0x00004104
 8006ff0:	00004078 	.word	0x00004078
 8006ff4:	0000407c 	.word	0x0000407c
 8006ff8:	0000418c 	.word	0x0000418c
 8006ffc:	0000418e 	.word	0x0000418e
 8007000:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8007004:	4a9a      	ldr	r2, [pc, #616]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8007006:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8007008:	4b9a      	ldr	r3, [pc, #616]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800700a:	885b      	ldrh	r3, [r3, #2]
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007014:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8007240 <HAL_I2C_MemRxCpltCallback+0xc18>
 8007018:	ee27 6b06 	vmul.f64	d6, d7, d6
 800701c:	4b95      	ldr	r3, [pc, #596]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800701e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800702a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800702e:	4b91      	ldr	r3, [pc, #580]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007030:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007034:	ee07 3a90 	vmov	s15, r3
 8007038:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800703c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007040:	4b8c      	ldr	r3, [pc, #560]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800704e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007052:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8007248 <HAL_I2C_MemRxCpltCallback+0xc20>
 8007056:	ee37 7b06 	vadd.f64	d7, d7, d6
 800705a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8007250 <HAL_I2C_MemRxCpltCallback+0xc28>
 800705e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007062:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007066:	ee17 2a90 	vmov	r2, s15
 800706a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800706e:	429a      	cmp	r2, r3
 8007070:	d832      	bhi.n	80070d8 <HAL_I2C_MemRxCpltCallback+0xab0>
 8007072:	4b80      	ldr	r3, [pc, #512]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800707e:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8007240 <HAL_I2C_MemRxCpltCallback+0xc18>
 8007082:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007086:	4b7b      	ldr	r3, [pc, #492]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007088:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007094:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007098:	4b76      	ldr	r3, [pc, #472]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800709a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070aa:	4b72      	ldr	r3, [pc, #456]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070bc:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8007248 <HAL_I2C_MemRxCpltCallback+0xc20>
 80070c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070c4:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8007250 <HAL_I2C_MemRxCpltCallback+0xc28>
 80070c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070d0:	ee17 3a90 	vmov	r3, s15
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	e001      	b.n	80070dc <HAL_I2C_MemRxCpltCallback+0xab4>
 80070d8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80070dc:	4a66      	ldr	r2, [pc, #408]	@ (8007278 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80070de:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 80070e0:	4b66      	ldr	r3, [pc, #408]	@ (800727c <HAL_I2C_MemRxCpltCallback+0xc54>)
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	4b66      	ldr	r3, [pc, #408]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc58>)
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d004      	beq.n	80070f6 <HAL_I2C_MemRxCpltCallback+0xace>
				ESC_1_SPEED(SPEED1);
 80070ec:	4b63      	ldr	r3, [pc, #396]	@ (800727c <HAL_I2C_MemRxCpltCallback+0xc54>)
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7f9 fe9f 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 80070f6:	4b63      	ldr	r3, [pc, #396]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80070f8:	881a      	ldrh	r2, [r3, #0]
 80070fa:	4b63      	ldr	r3, [pc, #396]	@ (8007288 <HAL_I2C_MemRxCpltCallback+0xc60>)
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d004      	beq.n	800710c <HAL_I2C_MemRxCpltCallback+0xae4>
				ESC_2_SPEED(SPEED2);
 8007102:	4b60      	ldr	r3, [pc, #384]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f7f9 feb6 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 800710c:	4b58      	ldr	r3, [pc, #352]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc48>)
 800710e:	881a      	ldrh	r2, [r3, #0]
 8007110:	4b5e      	ldr	r3, [pc, #376]	@ (800728c <HAL_I2C_MemRxCpltCallback+0xc64>)
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d004      	beq.n	8007122 <HAL_I2C_MemRxCpltCallback+0xafa>
				ESC_3_SPEED(SPEED3);
 8007118:	4b55      	ldr	r3, [pc, #340]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc48>)
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f7f9 fecd 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8007122:	4b55      	ldr	r3, [pc, #340]	@ (8007278 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8007124:	881a      	ldrh	r2, [r3, #0]
 8007126:	4b5a      	ldr	r3, [pc, #360]	@ (8007290 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d004      	beq.n	8007138 <HAL_I2C_MemRxCpltCallback+0xb10>
				ESC_4_SPEED(SPEED4);
 800712e:	4b52      	ldr	r3, [pc, #328]	@ (8007278 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f7f9 fee4 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8007138:	4b50      	ldr	r3, [pc, #320]	@ (800727c <HAL_I2C_MemRxCpltCallback+0xc54>)
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	4b50      	ldr	r3, [pc, #320]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc58>)
 800713e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8007140:	4b50      	ldr	r3, [pc, #320]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8007142:	881a      	ldrh	r2, [r3, #0]
 8007144:	4b50      	ldr	r3, [pc, #320]	@ (8007288 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8007146:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8007148:	4b49      	ldr	r3, [pc, #292]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc48>)
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	4b4f      	ldr	r3, [pc, #316]	@ (800728c <HAL_I2C_MemRxCpltCallback+0xc64>)
 800714e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8007150:	4b49      	ldr	r3, [pc, #292]	@ (8007278 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	4b4e      	ldr	r3, [pc, #312]	@ (8007290 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007156:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8007158:	2200      	movs	r2, #0
 800715a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800715e:	484d      	ldr	r0, [pc, #308]	@ (8007294 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007160:	f007 fb08 	bl	800e774 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8007164:	4b4c      	ldr	r3, [pc, #304]	@ (8007298 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d132      	bne.n	80071d2 <HAL_I2C_MemRxCpltCallback+0xbaa>
		HMC583L_IRQ = 0;
 800716c:	4b4a      	ldr	r3, [pc, #296]	@ (8007298 <HAL_I2C_MemRxCpltCallback+0xc70>)
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8007172:	f7f9 ffc9 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8007176:	4603      	mov	r3, r0
 8007178:	461a      	mov	r2, r3
 800717a:	4b48      	ldr	r3, [pc, #288]	@ (800729c <HAL_I2C_MemRxCpltCallback+0xc74>)
 800717c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718a:	4b45      	ldr	r3, [pc, #276]	@ (80072a0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800718c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8007190:	4b43      	ldr	r3, [pc, #268]	@ (80072a0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8007192:	edd3 7a00 	vldr	s15, [r3]
 8007196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800719a:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8007258 <HAL_I2C_MemRxCpltCallback+0xc30>
 800719e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071a2:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8007260 <HAL_I2C_MemRxCpltCallback+0xc38>
 80071a6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80071aa:	4b3e      	ldr	r3, [pc, #248]	@ (80072a4 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80071ac:	edd3 7a00 	vldr	s15, [r3]
 80071b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071b4:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8007268 <HAL_I2C_MemRxCpltCallback+0xc40>
 80071b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80071c4:	4b36      	ldr	r3, [pc, #216]	@ (80072a0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 80071c6:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 80071ca:	4b35      	ldr	r3, [pc, #212]	@ (80072a0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a35      	ldr	r2, [pc, #212]	@ (80072a4 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80071d0:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 80071d2:	4b35      	ldr	r3, [pc, #212]	@ (80072a8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d113      	bne.n	8007202 <HAL_I2C_MemRxCpltCallback+0xbda>
		temperature = BMP180_GET_temp_IT();
 80071da:	f7f9 fad9 	bl	8000790 <BMP180_GET_temp_IT>
 80071de:	4603      	mov	r3, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b32      	ldr	r3, [pc, #200]	@ (80072ac <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071e4:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 80071e6:	4b31      	ldr	r3, [pc, #196]	@ (80072ac <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 fbf3 	bl	80009d8 <BMP180_GET_temp>
 80071f2:	eef0 7a40 	vmov.f32	s15, s0
 80071f6:	4b2e      	ldr	r3, [pc, #184]	@ (80072b0 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80071f8:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80071fc:	4b2a      	ldr	r3, [pc, #168]	@ (80072a8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8007202:	4b29      	ldr	r3, [pc, #164]	@ (80072a8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d113      	bne.n	8007232 <HAL_I2C_MemRxCpltCallback+0xc0a>
		pressure = BMP180_GET_pres_IT();
 800720a:	f7f9 fad7 	bl	80007bc <BMP180_GET_pres_IT>
 800720e:	4603      	mov	r3, r0
 8007210:	461a      	mov	r2, r3
 8007212:	4b28      	ldr	r3, [pc, #160]	@ (80072b4 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8007214:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8007216:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	4618      	mov	r0, r3
 800721e:	f7f9 fc37 	bl	8000a90 <BMP180_GET_pres>
 8007222:	eef0 7a40 	vmov.f32	s15, s0
 8007226:	4b24      	ldr	r3, [pc, #144]	@ (80072b8 <HAL_I2C_MemRxCpltCallback+0xc90>)
 8007228:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800722c:	4b1e      	ldr	r3, [pc, #120]	@ (80072a8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
	}
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w
 8007240:	66666666 	.word	0x66666666
 8007244:	3fe66666 	.word	0x3fe66666
 8007248:	00000000 	.word	0x00000000
 800724c:	40c48200 	.word	0x40c48200
 8007250:	00000000 	.word	0x00000000
 8007254:	407f4000 	.word	0x407f4000
 8007258:	9999999a 	.word	0x9999999a
 800725c:	3fc99999 	.word	0x3fc99999
 8007260:	33333333 	.word	0x33333333
 8007264:	3ff33333 	.word	0x3ff33333
 8007268:	aaaaaaab 	.word	0xaaaaaaab
 800726c:	3feaaaaa 	.word	0x3feaaaaa
 8007270:	00004190 	.word	0x00004190
 8007274:	00000178 	.word	0x00000178
 8007278:	00004192 	.word	0x00004192
 800727c:	0000418c 	.word	0x0000418c
 8007280:	00004194 	.word	0x00004194
 8007284:	0000418e 	.word	0x0000418e
 8007288:	00004196 	.word	0x00004196
 800728c:	00004198 	.word	0x00004198
 8007290:	0000419a 	.word	0x0000419a
 8007294:	58021000 	.word	0x58021000
 8007298:	000041d5 	.word	0x000041d5
 800729c:	00000060 	.word	0x00000060
 80072a0:	00000058 	.word	0x00000058
 80072a4:	0000005c 	.word	0x0000005c
 80072a8:	000041d6 	.word	0x000041d6
 80072ac:	000000b8 	.word	0x000000b8
 80072b0:	000000dc 	.word	0x000000dc
 80072b4:	000000bc 	.word	0x000000bc
 80072b8:	000000e0 	.word	0x000000e0

080072bc <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 80072bc:	b580      	push	{r7, lr}
 80072be:	ed2d 8b04 	vpush	{d8-d9}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4611      	mov	r1, r2
 80072cc:	461a      	mov	r2, r3
 80072ce:	460b      	mov	r3, r1
 80072d0:	71fb      	strb	r3, [r7, #7]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 80072dc:	79ba      	ldrb	r2, [r7, #6]
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e02e      	b.n	8007348 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	461a      	mov	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800731c:	eeb0 1b47 	vmov.f64	d1, d7
 8007320:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007324:	f016 ff40 	bl	801e1a8 <pow>
 8007328:	eeb0 7b40 	vmov.f64	d7, d0
 800732c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007330:	ee38 7b07 	vadd.f64	d7, d8, d7
 8007334:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007338:	ee17 3a90 	vmov	r3, s15
 800733c:	b21a      	sxth	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3301      	adds	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	429a      	cmp	r2, r3
 800734e:	dacc      	bge.n	80072ea <convert_array_to_value+0x2e>
	}

}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	ecbd 8b04 	vpop	{d8-d9}
 800735c:	bd80      	pop	{r7, pc}

0800735e <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 800735e:	b590      	push	{r4, r7, lr}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	4611      	mov	r1, r2
 8007368:	461a      	mov	r2, r3
 800736a:	4603      	mov	r3, r0
 800736c:	80fb      	strh	r3, [r7, #6]
 800736e:	460b      	mov	r3, r1
 8007370:	717b      	strb	r3, [r7, #5]
 8007372:	4613      	mov	r3, r2
 8007374:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 800737e:	793a      	ldrb	r2, [r7, #4]
 8007380:	797b      	ldrb	r3, [r7, #5]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e03e      	b.n	800740a <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 800738c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d028      	beq.n	80073e6 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	4619      	mov	r1, r3
 800739c:	200a      	movs	r0, #10
 800739e:	f000 f83d 	bl	800741c <potenga>
 80073a2:	4603      	mov	r3, r0
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	80fb      	strh	r3, [r7, #6]
			x++;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	3301      	adds	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 80073b4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073c6:	eeb0 1b47 	vmov.f64	d1, d7
 80073ca:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80073ce:	f016 feeb 	bl	801e1a8 <pow>
 80073d2:	eeb0 7b40 	vmov.f64	d7, d0
 80073d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80073da:	ee17 3a90 	vmov	r3, s15
 80073de:	b29b      	uxth	r3, r3
 80073e0:	429c      	cmp	r4, r3
 80073e2:	dad3      	bge.n	800738c <convert_value_to_array+0x2e>
 80073e4:	e000      	b.n	80073e8 <convert_value_to_array+0x8a>
				break;
 80073e6:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 80073e8:	797a      	ldrb	r2, [r7, #5]
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	461a      	mov	r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	4413      	add	r3, r2
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3301      	adds	r3, #1
 80073fe:	613b      	str	r3, [r7, #16]
		x = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	429a      	cmp	r2, r3
 8007410:	dad0      	bge.n	80073b4 <convert_value_to_array+0x56>
	}
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	bd90      	pop	{r4, r7, pc}

0800741c <potenga>:
uint32_t potenga(int a, int b){
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <potenga+0x18>
		return 1;
 8007430:	2301      	movs	r3, #1
 8007432:	e02d      	b.n	8007490 <potenga+0x74>
	}
	if(b == 1){
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <potenga+0x22>
		return a;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	e028      	b.n	8007490 <potenga+0x74>
	}
	if(b > 1){
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	dd10      	ble.n	8007466 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	e007      	b.n	800745a <potenga+0x3e>
			a = a*c;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3301      	adds	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	dbf3      	blt.n	800744a <potenga+0x2e>
		}
		return a;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	e014      	b.n	8007490 <potenga+0x74>
	}
	if(b < 0){
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	da10      	bge.n	800748e <potenga+0x72>
		for(int i = 0; i < b; i++){
 800746c:	2300      	movs	r3, #0
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	e007      	b.n	8007482 <potenga+0x66>
			a = a/c;
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	fb92 f3f3 	sdiv	r3, r2, r3
 800747a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3301      	adds	r3, #1
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	dbf3      	blt.n	8007472 <potenga+0x56>
		}
		return a;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	e000      	b.n	8007490 <potenga+0x74>
	}
	return a;
 800748e:	687b      	ldr	r3, [r7, #4]
}
 8007490:	4618      	mov	r0, r3
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 80074a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80074aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	d504      	bpl.n	80074be <WartoscBezwgledna+0x22>
		return a*(-1);
 80074b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80074b8:	eef1 7a67 	vneg.f32	s15, s15
 80074bc:	e001      	b.n	80074c2 <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 80074be:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 80074c2:	eeb0 0a67 	vmov.f32	s0, s15
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	71fb      	strb	r3, [r7, #7]
 80074da:	460b      	mov	r3, r1
 80074dc:	71bb      	strb	r3, [r7, #6]
 80074de:	4613      	mov	r3, r2
 80074e0:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <RGB_LED_Set_color+0x38>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	797a      	ldrb	r2, [r7, #5]
 80074e8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <RGB_LED_Set_color+0x38>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	79fa      	ldrb	r2, [r7, #7]
 80074f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 80074f2:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <RGB_LED_Set_color+0x38>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	79ba      	ldrb	r2, [r7, #6]
 80074f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	24000380 	.word	0x24000380
 800750c:	00000000 	.word	0x00000000

08007510 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007524:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007528:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007578 <RGB_LED_For_BAT+0x68>
 800752c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007530:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007580 <RGB_LED_For_BAT+0x70>
 8007534:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007538:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800753c:	edc7 7a00 	vstr	s15, [r7]
 8007540:	783b      	ldrb	r3, [r7, #0]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	ee07 2a90 	vmov	s15, r2
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007552:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007578 <RGB_LED_For_BAT+0x68>
 8007556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800755a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800755e:	edc7 7a00 	vstr	s15, [r7]
 8007562:	783a      	ldrb	r2, [r7, #0]
 8007564:	b2d1      	uxtb	r1, r2
 8007566:	2200      	movs	r2, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff ffb1 	bl	80074d0 <RGB_LED_Set_color>
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	66666666 	.word	0x66666666
 800757c:	40046666 	.word	0x40046666
 8007580:	00000000 	.word	0x00000000
 8007584:	406fe000 	.word	0x406fe000

08007588 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6039      	str	r1, [r7, #0]
 8007590:	4611      	mov	r1, r2
 8007592:	461a      	mov	r2, r3
 8007594:	4603      	mov	r3, r0
 8007596:	80fb      	strh	r3, [r7, #6]
 8007598:	460b      	mov	r3, r1
 800759a:	717b      	strb	r3, [r7, #5]
 800759c:	4613      	mov	r3, r2
 800759e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80075a8:	793a      	ldrb	r2, [r7, #4]
 80075aa:	797b      	ldrb	r3, [r7, #5]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 80075b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da04      	bge.n	80075c2 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 80075b8:	797b      	ldrb	r3, [r7, #5]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	4413      	add	r3, r2
 80075be:	222d      	movs	r2, #45	@ 0x2d
 80075c0:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 80075c2:	2301      	movs	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	e035      	b.n	8007634 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 80075c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01d      	beq.n	800760c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	200a      	movs	r0, #10
 80075da:	f7ff ff1f 	bl	800741c <potenga>
 80075de:	4603      	mov	r3, r0
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	80fb      	strh	r3, [r7, #6]
			x++;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	3301      	adds	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 80075f0:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	4619      	mov	r1, r3
 80075fc:	200a      	movs	r0, #10
 80075fe:	f7ff ff0d 	bl	800741c <potenga>
 8007602:	4603      	mov	r3, r0
 8007604:	b29b      	uxth	r3, r3
 8007606:	429c      	cmp	r4, r3
 8007608:	dade      	bge.n	80075c8 <convert_value_to_array2+0x40>
 800760a:	e000      	b.n	800760e <convert_value_to_array2+0x86>
				break;
 800760c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	7979      	ldrb	r1, [r7, #5]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	440b      	add	r3, r1
 8007618:	4619      	mov	r1, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	440b      	add	r3, r1
 800761e:	3230      	adds	r2, #48	@ 0x30
 8007620:	b2d2      	uxtb	r2, r2
 8007622:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3301      	adds	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
		x = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	429a      	cmp	r2, r3
 800763a:	dad9      	bge.n	80075f0 <convert_value_to_array2+0x68>
	}
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd90      	pop	{r4, r7, pc}

08007646 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007646:	b580      	push	{r7, lr}
 8007648:	ed2d 8b02 	vpush	{d8}
 800764c:	b08c      	sub	sp, #48	@ 0x30
 800764e:	af00      	add	r7, sp, #0
 8007650:	ed87 0a03 	vstr	s0, [r7, #12]
 8007654:	60b8      	str	r0, [r7, #8]
 8007656:	460b      	mov	r3, r1
 8007658:	71fb      	strb	r3, [r7, #7]
 800765a:	4613      	mov	r3, r2
 800765c:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8007666:	79ba      	ldrb	r2, [r7, #6]
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8007672:	edd7 7a03 	vldr	s15, [r7, #12]
 8007676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767e:	d50a      	bpl.n	8007696 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	222d      	movs	r2, #45	@ 0x2d
 8007688:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 800768a:	edd7 7a03 	vldr	s15, [r7, #12]
 800768e:	eef1 7a67 	vneg.f32	s15, s15
 8007692:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007696:	2301      	movs	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e021      	b.n	80076e0 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80076aa:	eeb0 1b47 	vmov.f64	d1, d7
 80076ae:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80076b2:	f016 fd79 	bl	801e1a8 <pow>
 80076b6:	eeb0 7b40 	vmov.f64	d7, d0
 80076ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80076be:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 80076c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80076c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80076ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d2:	da0b      	bge.n	80076ec <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	3301      	adds	r3, #1
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3301      	adds	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	dbd8      	blt.n	800769c <convert_value_to_array3+0x56>
 80076ea:	e000      	b.n	80076ee <convert_value_to_array3+0xa8>
			break;
 80076ec:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dc07      	bgt.n	800770e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	3301      	adds	r3, #1
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	222e      	movs	r2, #46	@ 0x2e
 8007708:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800770a:	2301      	movs	r3, #1
 800770c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	dd0a      	ble.n	800772a <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8007714:	79fa      	ldrb	r2, [r7, #7]
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	4413      	add	r3, r2
 800771a:	3301      	adds	r3, #1
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	4413      	add	r3, r2
 8007720:	222e      	movs	r2, #46	@ 0x2e
 8007722:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	3301      	adds	r3, #1
 8007728:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 800772a:	edd7 7a03 	vldr	s15, [r7, #12]
 800772e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	1e5a      	subs	r2, r3, #1
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007742:	eeb0 1b47 	vmov.f64	d1, d7
 8007746:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800774a:	f016 fd2d 	bl	801e1a8 <pow>
 800774e:	eeb0 7b40 	vmov.f64	d7, d0
 8007752:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007756:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800775a:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800775e:	2300      	movs	r3, #0
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	e05f      	b.n	8007824 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 8007764:	edd7 7a03 	vldr	s15, [r7, #12]
 8007768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	d93d      	bls.n	80077ee <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 8007772:	edd7 7a03 	vldr	s15, [r7, #12]
 8007776:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	1e5a      	subs	r2, r3, #1
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800778a:	eeb0 1b47 	vmov.f64	d1, d7
 800778e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007792:	f016 fd09 	bl	801e1a8 <pow>
 8007796:	eeb0 7b40 	vmov.f64	d7, d0
 800779a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800779e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80077a2:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	3301      	adds	r3, #1
 80077aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	1e5a      	subs	r2, r3, #1
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077bc:	eeb0 1b47 	vmov.f64	d1, d7
 80077c0:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077c4:	f016 fcf0 	bl	801e1a8 <pow>
 80077c8:	eeb0 7b40 	vmov.f64	d7, d0
 80077cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80077d0:	ee17 3a90 	vmov	r3, s15
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077de:	ed97 7a03 	vldr	s14, [r7, #12]
 80077e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ea:	dabb      	bge.n	8007764 <convert_value_to_array3+0x11e>
 80077ec:	e000      	b.n	80077f0 <convert_value_to_array3+0x1aa>
				break;
 80077ee:	bf00      	nop
		}

        if(loopnum == kropka){
 80077f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d102      	bne.n	80077fe <convert_value_to_array3+0x1b8>
            loopnum++;
 80077f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fa:	3301      	adds	r3, #1
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	b2da      	uxtb	r2, r3
 8007802:	79f9      	ldrb	r1, [r7, #7]
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	440b      	add	r3, r1
 8007808:	4619      	mov	r1, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	440b      	add	r3, r1
 800780e:	3230      	adds	r2, #48	@ 0x30
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	3301      	adds	r3, #1
 8007818:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	3301      	adds	r3, #1
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	3b02      	subs	r3, #2
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	429a      	cmp	r2, r3
 800782c:	dbbe      	blt.n	80077ac <convert_value_to_array3+0x166>
	}
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	3730      	adds	r7, #48	@ 0x30
 8007834:	46bd      	mov	sp, r7
 8007836:	ecbd 8b02 	vpop	{d8}
 800783a:	bd80      	pop	{r7, pc}

0800783c <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007844:	4ba6      	ldr	r3, [pc, #664]	@ (8007ae0 <uSD_Card_SendData_To_Buffer+0x2a4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	b218      	sxth	r0, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	b2da      	uxtb	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	01db      	lsls	r3, r3, #7
 8007858:	b2db      	uxtb	r3, r3
 800785a:	3308      	adds	r3, #8
 800785c:	b2db      	uxtb	r3, r3
 800785e:	49a1      	ldr	r1, [pc, #644]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007860:	f7ff fe92 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	3308      	adds	r3, #8
 800786a:	4a9e      	ldr	r2, [pc, #632]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800786c:	2120      	movs	r1, #32
 800786e:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007870:	4b9d      	ldr	r3, [pc, #628]	@ (8007ae8 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b218      	sxth	r0, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	01db      	lsls	r3, r3, #7
 800787c:	b2db      	uxtb	r3, r3
 800787e:	3309      	adds	r3, #9
 8007880:	b2da      	uxtb	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	01db      	lsls	r3, r3, #7
 8007888:	b2db      	uxtb	r3, r3
 800788a:	330f      	adds	r3, #15
 800788c:	b2db      	uxtb	r3, r3
 800788e:	4995      	ldr	r1, [pc, #596]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007890:	f7ff fe7a 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	01db      	lsls	r3, r3, #7
 8007898:	330f      	adds	r3, #15
 800789a:	4a92      	ldr	r2, [pc, #584]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800789c:	2120      	movs	r1, #32
 800789e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 80078a0:	4b92      	ldr	r3, [pc, #584]	@ (8007aec <uSD_Card_SendData_To_Buffer+0x2b0>)
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b218      	sxth	r0, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	01db      	lsls	r3, r3, #7
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	3310      	adds	r3, #16
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	01db      	lsls	r3, r3, #7
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	3316      	adds	r3, #22
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	4989      	ldr	r1, [pc, #548]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078c0:	f7ff fe62 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	01db      	lsls	r3, r3, #7
 80078c8:	3316      	adds	r3, #22
 80078ca:	4a86      	ldr	r2, [pc, #536]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078cc:	2120      	movs	r1, #32
 80078ce:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 80078d0:	4b87      	ldr	r3, [pc, #540]	@ (8007af0 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b218      	sxth	r0, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	01db      	lsls	r3, r3, #7
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	3317      	adds	r3, #23
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	01db      	lsls	r3, r3, #7
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	331d      	adds	r3, #29
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	497d      	ldr	r1, [pc, #500]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078f0:	f7ff fe4a 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	01db      	lsls	r3, r3, #7
 80078f8:	331d      	adds	r3, #29
 80078fa:	4a7a      	ldr	r2, [pc, #488]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078fc:	2120      	movs	r1, #32
 80078fe:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007900:	4b7c      	ldr	r3, [pc, #496]	@ (8007af4 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b218      	sxth	r0, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	01db      	lsls	r3, r3, #7
 800790c:	b2db      	uxtb	r3, r3
 800790e:	331e      	adds	r3, #30
 8007910:	b2da      	uxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	b2db      	uxtb	r3, r3
 800791a:	3324      	adds	r3, #36	@ 0x24
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4971      	ldr	r1, [pc, #452]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007920:	f7ff fe32 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	3324      	adds	r3, #36	@ 0x24
 800792a:	4a6e      	ldr	r2, [pc, #440]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800792c:	2120      	movs	r1, #32
 800792e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007930:	4b71      	ldr	r3, [pc, #452]	@ (8007af8 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007932:	edd3 7a00 	vldr	s15, [r3]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	01db      	lsls	r3, r3, #7
 800793c:	b2db      	uxtb	r3, r3
 800793e:	3325      	adds	r3, #37	@ 0x25
 8007940:	b2d9      	uxtb	r1, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	01db      	lsls	r3, r3, #7
 8007948:	b2db      	uxtb	r3, r3
 800794a:	332d      	adds	r3, #45	@ 0x2d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	4864      	ldr	r0, [pc, #400]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007952:	eeb0 0a67 	vmov.f32	s0, s15
 8007956:	f7ff fe76 	bl	8007646 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	01db      	lsls	r3, r3, #7
 800795e:	332d      	adds	r3, #45	@ 0x2d
 8007960:	4a60      	ldr	r2, [pc, #384]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007962:	2120      	movs	r1, #32
 8007964:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007966:	4b65      	ldr	r3, [pc, #404]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007968:	edd3 7a00 	vldr	s15, [r3]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	01db      	lsls	r3, r3, #7
 8007972:	b2db      	uxtb	r3, r3
 8007974:	332e      	adds	r3, #46	@ 0x2e
 8007976:	b2d9      	uxtb	r1, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	01db      	lsls	r3, r3, #7
 800797e:	b2db      	uxtb	r3, r3
 8007980:	3336      	adds	r3, #54	@ 0x36
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	4857      	ldr	r0, [pc, #348]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007988:	eeb0 0a67 	vmov.f32	s0, s15
 800798c:	f7ff fe5b 	bl	8007646 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	01db      	lsls	r3, r3, #7
 8007994:	3336      	adds	r3, #54	@ 0x36
 8007996:	4a53      	ldr	r2, [pc, #332]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007998:	2120      	movs	r1, #32
 800799a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800799c:	4b58      	ldr	r3, [pc, #352]	@ (8007b00 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800799e:	edd3 7a00 	vldr	s15, [r3]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	01db      	lsls	r3, r3, #7
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	3337      	adds	r3, #55	@ 0x37
 80079ac:	b2d9      	uxtb	r1, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	01db      	lsls	r3, r3, #7
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	333f      	adds	r3, #63	@ 0x3f
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	4849      	ldr	r0, [pc, #292]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079be:	eeb0 0a67 	vmov.f32	s0, s15
 80079c2:	f7ff fe40 	bl	8007646 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	01db      	lsls	r3, r3, #7
 80079ca:	333f      	adds	r3, #63	@ 0x3f
 80079cc:	4a45      	ldr	r2, [pc, #276]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079ce:	2120      	movs	r1, #32
 80079d0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 80079d2:	4b4c      	ldr	r3, [pc, #304]	@ (8007b04 <uSD_Card_SendData_To_Buffer+0x2c8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	b218      	sxth	r0, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	3340      	adds	r3, #64	@ 0x40
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	01db      	lsls	r3, r3, #7
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	3348      	adds	r3, #72	@ 0x48
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	493c      	ldr	r1, [pc, #240]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079f2:	f7ff fdc9 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	01db      	lsls	r3, r3, #7
 80079fa:	3348      	adds	r3, #72	@ 0x48
 80079fc:	4a39      	ldr	r2, [pc, #228]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079fe:	2120      	movs	r1, #32
 8007a00:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007a02:	4b41      	ldr	r3, [pc, #260]	@ (8007b08 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	b218      	sxth	r0, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	01db      	lsls	r3, r3, #7
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	3349      	adds	r3, #73	@ 0x49
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	01db      	lsls	r3, r3, #7
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	3351      	adds	r3, #81	@ 0x51
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4930      	ldr	r1, [pc, #192]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a22:	f7ff fdb1 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	01db      	lsls	r3, r3, #7
 8007a2a:	3351      	adds	r3, #81	@ 0x51
 8007a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a2e:	2120      	movs	r1, #32
 8007a30:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007a32:	4b36      	ldr	r3, [pc, #216]	@ (8007b0c <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	b218      	sxth	r0, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	01db      	lsls	r3, r3, #7
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	3352      	adds	r3, #82	@ 0x52
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	01db      	lsls	r3, r3, #7
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	335a      	adds	r3, #90	@ 0x5a
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4924      	ldr	r1, [pc, #144]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a52:	f7ff fd99 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	01db      	lsls	r3, r3, #7
 8007a5a:	335a      	adds	r3, #90	@ 0x5a
 8007a5c:	4a21      	ldr	r2, [pc, #132]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a5e:	2120      	movs	r1, #32
 8007a60:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007a62:	4b2b      	ldr	r3, [pc, #172]	@ (8007b10 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007a64:	edd3 7a00 	vldr	s15, [r3]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	01db      	lsls	r3, r3, #7
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	335b      	adds	r3, #91	@ 0x5b
 8007a72:	b2d9      	uxtb	r1, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	01db      	lsls	r3, r3, #7
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	3362      	adds	r3, #98	@ 0x62
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	4818      	ldr	r0, [pc, #96]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a84:	eeb0 0a67 	vmov.f32	s0, s15
 8007a88:	f7ff fddd 	bl	8007646 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	01db      	lsls	r3, r3, #7
 8007a90:	3362      	adds	r3, #98	@ 0x62
 8007a92:	4a14      	ldr	r2, [pc, #80]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a94:	2120      	movs	r1, #32
 8007a96:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007a98:	4b1d      	ldr	r3, [pc, #116]	@ (8007b10 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	01db      	lsls	r3, r3, #7
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	3363      	adds	r3, #99	@ 0x63
 8007aa8:	b2d9      	uxtb	r1, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	01db      	lsls	r3, r3, #7
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	336a      	adds	r3, #106	@ 0x6a
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	480a      	ldr	r0, [pc, #40]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aba:	eeb0 0a67 	vmov.f32	s0, s15
 8007abe:	f7ff fdc2 	bl	8007646 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	01db      	lsls	r3, r3, #7
 8007ac6:	336a      	adds	r3, #106	@ 0x6a
 8007ac8:	4a06      	ldr	r2, [pc, #24]	@ (8007ae4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aca:	2120      	movs	r1, #32
 8007acc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007ace:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007ad0:	edd3 7a02 	vldr	s15, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	01db      	lsls	r3, r3, #7
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	336b      	adds	r3, #107	@ 0x6b
 8007ade:	e019      	b.n	8007b14 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007ae0:	000041c4 	.word	0x000041c4
 8007ae4:	24002f28 	.word	0x24002f28
 8007ae8:	0000418c 	.word	0x0000418c
 8007aec:	0000418e 	.word	0x0000418e
 8007af0:	00004190 	.word	0x00004190
 8007af4:	00004192 	.word	0x00004192
 8007af8:	0000406c 	.word	0x0000406c
 8007afc:	00004068 	.word	0x00004068
 8007b00:	00004070 	.word	0x00004070
 8007b04:	0000409c 	.word	0x0000409c
 8007b08:	000040a0 	.word	0x000040a0
 8007b0c:	000040a4 	.word	0x000040a4
 8007b10:	0000007c 	.word	0x0000007c
 8007b14:	b2d9      	uxtb	r1, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	01db      	lsls	r3, r3, #7
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	3372      	adds	r3, #114	@ 0x72
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	482d      	ldr	r0, [pc, #180]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b26:	eeb0 0a67 	vmov.f32	s0, s15
 8007b2a:	f7ff fd8c 	bl	8007646 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	01db      	lsls	r3, r3, #7
 8007b32:	3372      	adds	r3, #114	@ 0x72
 8007b34:	4a29      	ldr	r2, [pc, #164]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b36:	2120      	movs	r1, #32
 8007b38:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007b3a:	4b29      	ldr	r3, [pc, #164]	@ (8007be0 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b218      	sxth	r0, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	01db      	lsls	r3, r3, #7
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	3373      	adds	r3, #115	@ 0x73
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	01db      	lsls	r3, r3, #7
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	3377      	adds	r3, #119	@ 0x77
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	4920      	ldr	r1, [pc, #128]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b5a:	f7ff fd15 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	01db      	lsls	r3, r3, #7
 8007b62:	3377      	adds	r3, #119	@ 0x77
 8007b64:	4a1d      	ldr	r2, [pc, #116]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b66:	2120      	movs	r1, #32
 8007b68:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007be0 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007b6c:	8a5b      	ldrh	r3, [r3, #18]
 8007b6e:	b218      	sxth	r0, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	01db      	lsls	r3, r3, #7
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	3378      	adds	r3, #120	@ 0x78
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	01db      	lsls	r3, r3, #7
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	337a      	adds	r3, #122	@ 0x7a
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	4914      	ldr	r1, [pc, #80]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b8a:	f7ff fcfd 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	01db      	lsls	r3, r3, #7
 8007b92:	337a      	adds	r3, #122	@ 0x7a
 8007b94:	4a11      	ldr	r2, [pc, #68]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b96:	2120      	movs	r1, #32
 8007b98:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007b9a:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007b9c:	edd3 7a00 	vldr	s15, [r3]
 8007ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba4:	ee17 3a90 	vmov	r3, s15
 8007ba8:	b218      	sxth	r0, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	01db      	lsls	r3, r3, #7
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	337b      	adds	r3, #123	@ 0x7b
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	01db      	lsls	r3, r3, #7
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	337f      	adds	r3, #127	@ 0x7f
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	4906      	ldr	r1, [pc, #24]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bc4:	f7ff fce0 	bl	8007588 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	01db      	lsls	r3, r3, #7
 8007bce:	4a03      	ldr	r2, [pc, #12]	@ (8007bdc <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bd0:	210a      	movs	r1, #10
 8007bd2:	54d1      	strb	r1, [r2, r3]
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	24002f28 	.word	0x24002f28
 8007be0:	00000178 	.word	0x00000178
 8007be4:	00000058 	.word	0x00000058

08007be8 <Stack_Push>:

void Stack_Push(float data){
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007bf2:	4b22      	ldr	r3, [pc, #136]	@ (8007c7c <Stack_Push+0x94>)
 8007bf4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007bf8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	4b1e      	ldr	r3, [pc, #120]	@ (8007c7c <Stack_Push+0x94>)
 8007c02:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c06:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007c7c <Stack_Push+0x94>)
 8007c0c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c10:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c14:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007c18:	d105      	bne.n	8007c26 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007c1a:	4b18      	ldr	r3, [pc, #96]	@ (8007c7c <Stack_Push+0x94>)
 8007c1c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007c26:	4b15      	ldr	r3, [pc, #84]	@ (8007c7c <Stack_Push+0x94>)
 8007c28:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c2c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c30:	4a12      	ldr	r2, [pc, #72]	@ (8007c7c <Stack_Push+0x94>)
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007c3a:	4b10      	ldr	r3, [pc, #64]	@ (8007c7c <Stack_Push+0x94>)
 8007c3c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c40:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007c44:	3301      	adds	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	4b0c      	ldr	r3, [pc, #48]	@ (8007c7c <Stack_Push+0x94>)
 8007c4a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c4e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007c52:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <Stack_Push+0x94>)
 8007c54:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c58:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c5c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007c60:	d105      	bne.n	8007c6e <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007c62:	4b06      	ldr	r3, [pc, #24]	@ (8007c7c <Stack_Push+0x94>)
 8007c64:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	0000019c 	.word	0x0000019c

08007c80 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <ROOL_MAX_VAL+0x1c>)
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007c8c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	00000178 	.word	0x00000178

08007ca0 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007ca4:	4b04      	ldr	r3, [pc, #16]	@ (8007cb8 <ROOL_MIN_VAL+0x18>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007cac:	4b03      	ldr	r3, [pc, #12]	@ (8007cbc <ROOL_MIN_VAL+0x1c>)
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	00000178 	.word	0x00000178
 8007cbc:	ffffec78 	.word	0xffffec78

08007cc0 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007cc4:	4b05      	ldr	r3, [pc, #20]	@ (8007cdc <PITCH_MAX_VAL+0x1c>)
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007ccc:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	00000178 	.word	0x00000178

08007ce0 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007ce4:	4b04      	ldr	r3, [pc, #16]	@ (8007cf8 <PITCH_MIN_VAL+0x18>)
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007cec:	4b03      	ldr	r3, [pc, #12]	@ (8007cfc <PITCH_MIN_VAL+0x1c>)
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	00000178 	.word	0x00000178
 8007cfc:	ffffec78 	.word	0xffffec78

08007d00 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <YAW_MAX_VAL+0x1c>)
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007d0c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	00000178 	.word	0x00000178

08007d20 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007d24:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <YAW_MIN_VAL+0x18>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007d2c:	4b03      	ldr	r3, [pc, #12]	@ (8007d3c <YAW_MIN_VAL+0x1c>)
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	00000178 	.word	0x00000178
 8007d3c:	ffffec78 	.word	0xffffec78

08007d40 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007d44:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <ROOL_GOOD_VAL+0x28>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007d4c:	4b07      	ldr	r3, [pc, #28]	@ (8007d6c <ROOL_GOOD_VAL+0x2c>)
 8007d4e:	edd3 7a00 	vldr	s15, [r3]
 8007d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d56:	ee17 3a90 	vmov	r3, s15
 8007d5a:	b21b      	sxth	r3, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	00000178 	.word	0x00000178
 8007d6c:	000040c8 	.word	0x000040c8

08007d70 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007d74:	4b08      	ldr	r3, [pc, #32]	@ (8007d98 <PITCH_GOOD_VAL+0x28>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007d7c:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <PITCH_GOOD_VAL+0x2c>)
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d86:	ee17 3a90 	vmov	r3, s15
 8007d8a:	b21b      	sxth	r3, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	00000178 	.word	0x00000178
 8007d9c:	000040c0 	.word	0x000040c0

08007da0 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007da4:	4b08      	ldr	r3, [pc, #32]	@ (8007dc8 <YAW_GOOD_VAL+0x28>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <YAW_GOOD_VAL+0x2c>)
 8007dae:	edd3 7a00 	vldr	s15, [r3]
 8007db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db6:	ee17 3a90 	vmov	r3, s15
 8007dba:	b21b      	sxth	r3, r3
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	00000178 	.word	0x00000178
 8007dcc:	000040c4 	.word	0x000040c4

08007dd0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	605a      	str	r2, [r3, #4]
 8007dde:	609a      	str	r2, [r3, #8]
 8007de0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007de2:	f003 fc3d 	bl	800b660 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007de6:	2301      	movs	r3, #1
 8007de8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007df2:	231f      	movs	r3, #31
 8007df4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007df6:	2387      	movs	r3, #135	@ 0x87
 8007df8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e12:	463b      	mov	r3, r7
 8007e14:	4618      	mov	r0, r3
 8007e16:	f003 fc5b 	bl	800b6d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007e1a:	2004      	movs	r0, #4
 8007e1c:	f003 fc38 	bl	800b690 <HAL_MPU_Enable>

}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007e2c:	b672      	cpsid	i
}
 8007e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <Error_Handler+0x8>

08007e34 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007e38:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e3a:	4a28      	ldr	r2, [pc, #160]	@ (8007edc <MX_SPI2_Init+0xa8>)
 8007e3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007e3e:	4b26      	ldr	r3, [pc, #152]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007e44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007e46:	4b24      	ldr	r3, [pc, #144]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e4c:	4b22      	ldr	r3, [pc, #136]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e4e:	2207      	movs	r2, #7
 8007e50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e52:	4b21      	ldr	r3, [pc, #132]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e58:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e66:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e72:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e78:	4b17      	ldr	r3, [pc, #92]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007e7e:	4b16      	ldr	r3, [pc, #88]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e84:	4b14      	ldr	r3, [pc, #80]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007e8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007e8c:	4b12      	ldr	r3, [pc, #72]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007e92:	4b11      	ldr	r3, [pc, #68]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007e98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007eb0:	4b09      	ldr	r3, [pc, #36]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007eb6:	4b08      	ldr	r3, [pc, #32]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007ec2:	4805      	ldr	r0, [pc, #20]	@ (8007ed8 <MX_SPI2_Init+0xa4>)
 8007ec4:	f00c fc8e 	bl	80147e4 <HAL_SPI_Init>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007ece:	f7ff ffab 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	240001ec 	.word	0x240001ec
 8007edc:	40003800 	.word	0x40003800

08007ee0 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007ee4:	4b27      	ldr	r3, [pc, #156]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007ee6:	4a28      	ldr	r2, [pc, #160]	@ (8007f88 <MX_SPI6_Init+0xa8>)
 8007ee8:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007eea:	4b26      	ldr	r3, [pc, #152]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007eec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ef0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007ef2:	4b24      	ldr	r3, [pc, #144]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ef8:	4b22      	ldr	r3, [pc, #136]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007efa:	2207      	movs	r2, #7
 8007efc:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007efe:	4b21      	ldr	r3, [pc, #132]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f04:	4b1f      	ldr	r3, [pc, #124]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007f10:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f12:	4b1c      	ldr	r3, [pc, #112]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f18:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f1e:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f24:	4b17      	ldr	r3, [pc, #92]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007f2a:	4b16      	ldr	r3, [pc, #88]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f30:	4b14      	ldr	r3, [pc, #80]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f36:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f38:	4b12      	ldr	r3, [pc, #72]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f3e:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f44:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f50:	4b0c      	ldr	r3, [pc, #48]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f56:	4b0b      	ldr	r3, [pc, #44]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f5c:	4b09      	ldr	r3, [pc, #36]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f62:	4b08      	ldr	r3, [pc, #32]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f68:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007f6e:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <MX_SPI6_Init+0xa4>)
 8007f70:	f00c fc38 	bl	80147e4 <HAL_SPI_Init>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007f7a:	f7ff ff55 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007f7e:	bf00      	nop
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	24000274 	.word	0x24000274
 8007f88:	58001400 	.word	0x58001400

08007f8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b0ba      	sub	sp, #232	@ 0xe8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	609a      	str	r2, [r3, #8]
 8007fa0:	60da      	str	r2, [r3, #12]
 8007fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007fa4:	f107 0318 	add.w	r3, r7, #24
 8007fa8:	22b8      	movs	r2, #184	@ 0xb8
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f016 f871 	bl	801e094 <memset>
  if(spiHandle->Instance==SPI2)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a77      	ldr	r2, [pc, #476]	@ (8008194 <HAL_SPI_MspInit+0x208>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	f040 8089 	bne.w	80080d0 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007fbe:	4b76      	ldr	r3, [pc, #472]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8007fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fc4:	4a74      	ldr	r2, [pc, #464]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8007fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007fce:	4b72      	ldr	r3, [pc, #456]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8007fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fdc:	4b6e      	ldr	r3, [pc, #440]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8007fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fe2:	4a6d      	ldr	r2, [pc, #436]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8007fe4:	f043 0302 	orr.w	r3, r3, #2
 8007fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fec:	4b6a      	ldr	r3, [pc, #424]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8007fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007ffa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008002:	2302      	movs	r3, #2
 8008004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800800e:	2301      	movs	r3, #1
 8008010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008014:	2305      	movs	r3, #5
 8008016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800801a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800801e:	4619      	mov	r1, r3
 8008020:	485e      	ldr	r0, [pc, #376]	@ (800819c <HAL_SPI_MspInit+0x210>)
 8008022:	f006 f9e7 	bl	800e3f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008026:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800802a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800802e:	2302      	movs	r3, #2
 8008030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008034:	2301      	movs	r3, #1
 8008036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800803a:	2301      	movs	r3, #1
 800803c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008040:	2305      	movs	r3, #5
 8008042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008046:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800804a:	4619      	mov	r1, r3
 800804c:	4853      	ldr	r0, [pc, #332]	@ (800819c <HAL_SPI_MspInit+0x210>)
 800804e:	f006 f9d1 	bl	800e3f4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8008052:	4b53      	ldr	r3, [pc, #332]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008054:	4a53      	ldr	r2, [pc, #332]	@ (80081a4 <HAL_SPI_MspInit+0x218>)
 8008056:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8008058:	4b51      	ldr	r3, [pc, #324]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 800805a:	2228      	movs	r2, #40	@ 0x28
 800805c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800805e:	4b50      	ldr	r3, [pc, #320]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008060:	2240      	movs	r2, #64	@ 0x40
 8008062:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008064:	4b4e      	ldr	r3, [pc, #312]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008066:	2200      	movs	r2, #0
 8008068:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800806a:	4b4d      	ldr	r3, [pc, #308]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 800806c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008070:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008072:	4b4b      	ldr	r3, [pc, #300]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008074:	2200      	movs	r2, #0
 8008076:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008078:	4b49      	ldr	r3, [pc, #292]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 800807a:	2200      	movs	r2, #0
 800807c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800807e:	4b48      	ldr	r3, [pc, #288]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008080:	2200      	movs	r2, #0
 8008082:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008084:	4b46      	ldr	r3, [pc, #280]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008086:	2200      	movs	r2, #0
 8008088:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800808a:	4b45      	ldr	r3, [pc, #276]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 800808c:	2204      	movs	r2, #4
 800808e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008090:	4b43      	ldr	r3, [pc, #268]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008092:	2203      	movs	r2, #3
 8008094:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008096:	4b42      	ldr	r3, [pc, #264]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 8008098:	2200      	movs	r2, #0
 800809a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800809c:	4b40      	ldr	r3, [pc, #256]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 800809e:	2200      	movs	r2, #0
 80080a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80080a2:	483f      	ldr	r0, [pc, #252]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 80080a4:	f003 fb54 	bl	800b750 <HAL_DMA_Init>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80080ae:	f7ff febb 	bl	8007e28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a3a      	ldr	r2, [pc, #232]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 80080b6:	679a      	str	r2, [r3, #120]	@ 0x78
 80080b8:	4a39      	ldr	r2, [pc, #228]	@ (80081a0 <HAL_SPI_MspInit+0x214>)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80080be:	2200      	movs	r2, #0
 80080c0:	2100      	movs	r1, #0
 80080c2:	2024      	movs	r0, #36	@ 0x24
 80080c4:	f003 fa97 	bl	800b5f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80080c8:	2024      	movs	r0, #36	@ 0x24
 80080ca:	f003 faae 	bl	800b62a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80080ce:	e05c      	b.n	800818a <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a34      	ldr	r2, [pc, #208]	@ (80081a8 <HAL_SPI_MspInit+0x21c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d157      	bne.n	800818a <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80080da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80080e6:	2318      	movs	r3, #24
 80080e8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 80080ea:	23c8      	movs	r3, #200	@ 0xc8
 80080ec:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80080f2:	230a      	movs	r3, #10
 80080f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80080f6:	2302      	movs	r3, #2
 80080f8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80080fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008102:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8008108:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800810c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008110:	f107 0318 	add.w	r3, r7, #24
 8008114:	4618      	mov	r0, r3
 8008116:	f009 ff7f 	bl	8012018 <HAL_RCCEx_PeriphCLKConfig>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8008120:	f7ff fe82 	bl	8007e28 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8008124:	4b1c      	ldr	r3, [pc, #112]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8008126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800812a:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 800812c:	f043 0320 	orr.w	r3, r3, #32
 8008130:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008134:	4b18      	ldr	r3, [pc, #96]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8008136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008142:	4b15      	ldr	r3, [pc, #84]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8008144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008148:	4a13      	ldr	r2, [pc, #76]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 800814a:	f043 0302 	orr.w	r3, r3, #2
 800814e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008152:	4b11      	ldr	r3, [pc, #68]	@ (8008198 <HAL_SPI_MspInit+0x20c>)
 8008154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	60bb      	str	r3, [r7, #8]
 800815e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008160:	2338      	movs	r3, #56	@ 0x38
 8008162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008166:	2302      	movs	r3, #2
 8008168:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816c:	2300      	movs	r3, #0
 800816e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008172:	2300      	movs	r3, #0
 8008174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008178:	2308      	movs	r3, #8
 800817a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800817e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008182:	4619      	mov	r1, r3
 8008184:	4805      	ldr	r0, [pc, #20]	@ (800819c <HAL_SPI_MspInit+0x210>)
 8008186:	f006 f935 	bl	800e3f4 <HAL_GPIO_Init>
}
 800818a:	bf00      	nop
 800818c:	37e8      	adds	r7, #232	@ 0xe8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40003800 	.word	0x40003800
 8008198:	58024400 	.word	0x58024400
 800819c:	58020400 	.word	0x58020400
 80081a0:	240002fc 	.word	0x240002fc
 80081a4:	40020010 	.word	0x40020010
 80081a8:	58001400 	.word	0x58001400

080081ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081b2:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <HAL_MspInit+0x30>)
 80081b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081b8:	4a08      	ldr	r2, [pc, #32]	@ (80081dc <HAL_MspInit+0x30>)
 80081ba:	f043 0302 	orr.w	r3, r3, #2
 80081be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80081c2:	4b06      	ldr	r3, [pc, #24]	@ (80081dc <HAL_MspInit+0x30>)
 80081c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	607b      	str	r3, [r7, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	58024400 	.word	0x58024400

080081e0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80081e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008214 <SDTimer_Handler+0x34>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <SDTimer_Handler+0x16>
    Timer1--;
 80081ec:	4b09      	ldr	r3, [pc, #36]	@ (8008214 <SDTimer_Handler+0x34>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4a08      	ldr	r2, [pc, #32]	@ (8008214 <SDTimer_Handler+0x34>)
 80081f4:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 80081f6:	4b08      	ldr	r3, [pc, #32]	@ (8008218 <SDTimer_Handler+0x38>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <SDTimer_Handler+0x28>
    Timer2--;
 80081fe:	4b06      	ldr	r3, [pc, #24]	@ (8008218 <SDTimer_Handler+0x38>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3b01      	subs	r3, #1
 8008204:	4a04      	ldr	r2, [pc, #16]	@ (8008218 <SDTimer_Handler+0x38>)
 8008206:	6013      	str	r3, [r2, #0]
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	24000378 	.word	0x24000378
 8008218:	2400037c 	.word	0x2400037c
 800821c:	00000000 	.word	0x00000000

08008220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8008226:	2200      	movs	r2, #0
 8008228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800822c:	48bc      	ldr	r0, [pc, #752]	@ (8008520 <NMI_Handler+0x300>)
 800822e:	f006 faa1 	bl	800e774 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008232:	2200      	movs	r2, #0
 8008234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008238:	48ba      	ldr	r0, [pc, #744]	@ (8008524 <NMI_Handler+0x304>)
 800823a:	f006 fa9b 	bl	800e774 <HAL_GPIO_WritePin>
	LED_R_1;
 800823e:	2201      	movs	r2, #1
 8008240:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008244:	48b7      	ldr	r0, [pc, #732]	@ (8008524 <NMI_Handler+0x304>)
 8008246:	f006 fa95 	bl	800e774 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 800824a:	48b7      	ldr	r0, [pc, #732]	@ (8008528 <NMI_Handler+0x308>)
 800824c:	f015 fd2a 	bl	801dca4 <f_close>

	wanted_rool = 0;
 8008250:	4bb6      	ldr	r3, [pc, #728]	@ (800852c <NMI_Handler+0x30c>)
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008258:	4bb5      	ldr	r3, [pc, #724]	@ (8008530 <NMI_Handler+0x310>)
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008260:	4bb4      	ldr	r3, [pc, #720]	@ (8008534 <NMI_Handler+0x314>)
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008268:	4bb3      	ldr	r3, [pc, #716]	@ (8008538 <NMI_Handler+0x318>)
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b21a      	sxth	r2, r3
 800826e:	4bb3      	ldr	r3, [pc, #716]	@ (800853c <NMI_Handler+0x31c>)
 8008270:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8008272:	2001      	movs	r0, #1
 8008274:	f001 f942 	bl	80094fc <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008278:	4bb1      	ldr	r3, [pc, #708]	@ (8008540 <NMI_Handler+0x320>)
 800827a:	edd3 7a00 	vldr	s15, [r3]
 800827e:	4bb1      	ldr	r3, [pc, #708]	@ (8008544 <NMI_Handler+0x324>)
 8008280:	ed93 7a00 	vldr	s14, [r3]
 8008284:	4bb0      	ldr	r3, [pc, #704]	@ (8008548 <NMI_Handler+0x328>)
 8008286:	edd3 6a00 	vldr	s13, [r3]
 800828a:	4bb0      	ldr	r3, [pc, #704]	@ (800854c <NMI_Handler+0x32c>)
 800828c:	ed93 6a00 	vldr	s12, [r3]
 8008290:	4baf      	ldr	r3, [pc, #700]	@ (8008550 <NMI_Handler+0x330>)
 8008292:	edd3 5a00 	vldr	s11, [r3]
 8008296:	4baf      	ldr	r3, [pc, #700]	@ (8008554 <NMI_Handler+0x334>)
 8008298:	ed93 5a00 	vldr	s10, [r3]
 800829c:	4bae      	ldr	r3, [pc, #696]	@ (8008558 <NMI_Handler+0x338>)
 800829e:	edd3 4a00 	vldr	s9, [r3]
 80082a2:	4bae      	ldr	r3, [pc, #696]	@ (800855c <NMI_Handler+0x33c>)
 80082a4:	ed93 4a00 	vldr	s8, [r3]
 80082a8:	4bad      	ldr	r3, [pc, #692]	@ (8008560 <NMI_Handler+0x340>)
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	4bad      	ldr	r3, [pc, #692]	@ (8008564 <NMI_Handler+0x344>)
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	eef0 3a44 	vmov.f32	s7, s8
 80082b4:	eeb0 3a64 	vmov.f32	s6, s9
 80082b8:	eef0 2a45 	vmov.f32	s5, s10
 80082bc:	eeb0 2a65 	vmov.f32	s4, s11
 80082c0:	eef0 1a46 	vmov.f32	s3, s12
 80082c4:	eeb0 1a66 	vmov.f32	s2, s13
 80082c8:	eef0 0a47 	vmov.f32	s1, s14
 80082cc:	eeb0 0a67 	vmov.f32	s0, s15
 80082d0:	4ba5      	ldr	r3, [pc, #660]	@ (8008568 <NMI_Handler+0x348>)
 80082d2:	4aa6      	ldr	r2, [pc, #664]	@ (800856c <NMI_Handler+0x34c>)
 80082d4:	49a6      	ldr	r1, [pc, #664]	@ (8008570 <NMI_Handler+0x350>)
 80082d6:	48a7      	ldr	r0, [pc, #668]	@ (8008574 <NMI_Handler+0x354>)
 80082d8:	f7f9 f984 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80082dc:	4ba5      	ldr	r3, [pc, #660]	@ (8008574 <NMI_Handler+0x354>)
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	4ba3      	ldr	r3, [pc, #652]	@ (8008570 <NMI_Handler+0x350>)
 80082e4:	ed93 7a00 	vldr	s14, [r3]
 80082e8:	4ba0      	ldr	r3, [pc, #640]	@ (800856c <NMI_Handler+0x34c>)
 80082ea:	edd3 6a00 	vldr	s13, [r3]
 80082ee:	49a2      	ldr	r1, [pc, #648]	@ (8008578 <NMI_Handler+0x358>)
 80082f0:	48a2      	ldr	r0, [pc, #648]	@ (800857c <NMI_Handler+0x35c>)
 80082f2:	eeb0 1a66 	vmov.f32	s2, s13
 80082f6:	eef0 0a47 	vmov.f32	s1, s14
 80082fa:	eeb0 0a67 	vmov.f32	s0, s15
 80082fe:	f7f9 f8f3 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8008302:	4b9e      	ldr	r3, [pc, #632]	@ (800857c <NMI_Handler+0x35c>)
 8008304:	edd3 7a00 	vldr	s15, [r3]
 8008308:	4b9b      	ldr	r3, [pc, #620]	@ (8008578 <NMI_Handler+0x358>)
 800830a:	ed93 7a00 	vldr	s14, [r3]
 800830e:	4b9c      	ldr	r3, [pc, #624]	@ (8008580 <NMI_Handler+0x360>)
 8008310:	edd3 6a00 	vldr	s13, [r3]
 8008314:	4b94      	ldr	r3, [pc, #592]	@ (8008568 <NMI_Handler+0x348>)
 8008316:	ed93 6a00 	vldr	s12, [r3]
 800831a:	4b92      	ldr	r3, [pc, #584]	@ (8008564 <NMI_Handler+0x344>)
 800831c:	edd3 5a00 	vldr	s11, [r3]
 8008320:	4b8f      	ldr	r3, [pc, #572]	@ (8008560 <NMI_Handler+0x340>)
 8008322:	ed93 5a00 	vldr	s10, [r3]
 8008326:	eef0 2a45 	vmov.f32	s5, s10
 800832a:	eeb0 2a65 	vmov.f32	s4, s11
 800832e:	eef0 1a46 	vmov.f32	s3, s12
 8008332:	eeb0 1a66 	vmov.f32	s2, s13
 8008336:	eef0 0a47 	vmov.f32	s1, s14
 800833a:	eeb0 0a67 	vmov.f32	s0, s15
 800833e:	4891      	ldr	r0, [pc, #580]	@ (8008584 <NMI_Handler+0x364>)
 8008340:	f7f9 faca 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8008344:	4b8f      	ldr	r3, [pc, #572]	@ (8008584 <NMI_Handler+0x364>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a8f      	ldr	r2, [pc, #572]	@ (8008588 <NMI_Handler+0x368>)
 800834a:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 800834c:	4b8d      	ldr	r3, [pc, #564]	@ (8008584 <NMI_Handler+0x364>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a8e      	ldr	r2, [pc, #568]	@ (800858c <NMI_Handler+0x36c>)
 8008352:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8008354:	4b8b      	ldr	r3, [pc, #556]	@ (8008584 <NMI_Handler+0x364>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4a8d      	ldr	r2, [pc, #564]	@ (8008590 <NMI_Handler+0x370>)
 800835a:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 800835c:	4b73      	ldr	r3, [pc, #460]	@ (800852c <NMI_Handler+0x30c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a8c      	ldr	r2, [pc, #560]	@ (8008594 <NMI_Handler+0x374>)
 8008362:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8008364:	4b72      	ldr	r3, [pc, #456]	@ (8008530 <NMI_Handler+0x310>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a8b      	ldr	r2, [pc, #556]	@ (8008598 <NMI_Handler+0x378>)
 800836a:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 800836c:	4b71      	ldr	r3, [pc, #452]	@ (8008534 <NMI_Handler+0x314>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a8a      	ldr	r2, [pc, #552]	@ (800859c <NMI_Handler+0x37c>)
 8008372:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8008374:	4b8a      	ldr	r3, [pc, #552]	@ (80085a0 <NMI_Handler+0x380>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	ee07 3a90 	vmov	s15, r3
 800837c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008380:	4b6b      	ldr	r3, [pc, #428]	@ (8008530 <NMI_Handler+0x310>)
 8008382:	edd3 6a00 	vldr	s13, [r3]
 8008386:	4b80      	ldr	r3, [pc, #512]	@ (8008588 <NMI_Handler+0x368>)
 8008388:	edd3 7a00 	vldr	s15, [r3]
 800838c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008398:	ee17 2a90 	vmov	r2, s15
 800839c:	4b80      	ldr	r3, [pc, #512]	@ (80085a0 <NMI_Handler+0x380>)
 800839e:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 80083a0:	4b80      	ldr	r3, [pc, #512]	@ (80085a4 <NMI_Handler+0x384>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	ee07 3a90 	vmov	s15, r3
 80083a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083ac:	4b5f      	ldr	r3, [pc, #380]	@ (800852c <NMI_Handler+0x30c>)
 80083ae:	edd3 6a00 	vldr	s13, [r3]
 80083b2:	4b76      	ldr	r3, [pc, #472]	@ (800858c <NMI_Handler+0x36c>)
 80083b4:	edd3 7a00 	vldr	s15, [r3]
 80083b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083c4:	ee17 2a90 	vmov	r2, s15
 80083c8:	4b76      	ldr	r3, [pc, #472]	@ (80085a4 <NMI_Handler+0x384>)
 80083ca:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 80083cc:	4b76      	ldr	r3, [pc, #472]	@ (80085a8 <NMI_Handler+0x388>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083d8:	4b56      	ldr	r3, [pc, #344]	@ (8008534 <NMI_Handler+0x314>)
 80083da:	edd3 6a00 	vldr	s13, [r3]
 80083de:	4b6c      	ldr	r3, [pc, #432]	@ (8008590 <NMI_Handler+0x370>)
 80083e0:	edd3 7a00 	vldr	s15, [r3]
 80083e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f0:	ee17 2a90 	vmov	r2, s15
 80083f4:	4b6c      	ldr	r3, [pc, #432]	@ (80085a8 <NMI_Handler+0x388>)
 80083f6:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 80083f8:	4b6c      	ldr	r3, [pc, #432]	@ (80085ac <NMI_Handler+0x38c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	ee07 3a90 	vmov	s15, r3
 8008400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008404:	4b6a      	ldr	r3, [pc, #424]	@ (80085b0 <NMI_Handler+0x390>)
 8008406:	edd3 6a00 	vldr	s13, [r3]
 800840a:	4b57      	ldr	r3, [pc, #348]	@ (8008568 <NMI_Handler+0x348>)
 800840c:	edd3 7a00 	vldr	s15, [r3]
 8008410:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800841c:	ee17 2a90 	vmov	r2, s15
 8008420:	4b62      	ldr	r3, [pc, #392]	@ (80085ac <NMI_Handler+0x38c>)
 8008422:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 8008424:	4b63      	ldr	r3, [pc, #396]	@ (80085b4 <NMI_Handler+0x394>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	ee07 3a90 	vmov	s15, r3
 800842c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008430:	4b61      	ldr	r3, [pc, #388]	@ (80085b8 <NMI_Handler+0x398>)
 8008432:	edd3 6a00 	vldr	s13, [r3]
 8008436:	4b4b      	ldr	r3, [pc, #300]	@ (8008564 <NMI_Handler+0x344>)
 8008438:	edd3 7a00 	vldr	s15, [r3]
 800843c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008448:	ee17 2a90 	vmov	r2, s15
 800844c:	4b59      	ldr	r3, [pc, #356]	@ (80085b4 <NMI_Handler+0x394>)
 800844e:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8008450:	4b5a      	ldr	r3, [pc, #360]	@ (80085bc <NMI_Handler+0x39c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800845c:	4b58      	ldr	r3, [pc, #352]	@ (80085c0 <NMI_Handler+0x3a0>)
 800845e:	edd3 6a00 	vldr	s13, [r3]
 8008462:	4b3f      	ldr	r3, [pc, #252]	@ (8008560 <NMI_Handler+0x340>)
 8008464:	edd3 7a00 	vldr	s15, [r3]
 8008468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800846c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	4b50      	ldr	r3, [pc, #320]	@ (80085bc <NMI_Handler+0x39c>)
 800847a:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 800847c:	2201      	movs	r2, #1
 800847e:	4951      	ldr	r1, [pc, #324]	@ (80085c4 <NMI_Handler+0x3a4>)
 8008480:	484b      	ldr	r0, [pc, #300]	@ (80085b0 <NMI_Handler+0x390>)
 8008482:	f7fb faa3 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8008486:	2202      	movs	r2, #2
 8008488:	494f      	ldr	r1, [pc, #316]	@ (80085c8 <NMI_Handler+0x3a8>)
 800848a:	484b      	ldr	r0, [pc, #300]	@ (80085b8 <NMI_Handler+0x398>)
 800848c:	f7fb fa9e 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008490:	2204      	movs	r2, #4
 8008492:	494e      	ldr	r1, [pc, #312]	@ (80085cc <NMI_Handler+0x3ac>)
 8008494:	484e      	ldr	r0, [pc, #312]	@ (80085d0 <NMI_Handler+0x3b0>)
 8008496:	f7fb fa99 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 800849a:	2205      	movs	r2, #5
 800849c:	494d      	ldr	r1, [pc, #308]	@ (80085d4 <NMI_Handler+0x3b4>)
 800849e:	484e      	ldr	r0, [pc, #312]	@ (80085d8 <NMI_Handler+0x3b8>)
 80084a0:	f7fb fa94 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80084a4:	2206      	movs	r2, #6
 80084a6:	494d      	ldr	r1, [pc, #308]	@ (80085dc <NMI_Handler+0x3bc>)
 80084a8:	484d      	ldr	r0, [pc, #308]	@ (80085e0 <NMI_Handler+0x3c0>)
 80084aa:	f7fb fa8f 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 80084ae:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <NMI_Handler+0x310>)
 80084b0:	ed93 7a00 	vldr	s14, [r3]
 80084b4:	4b34      	ldr	r3, [pc, #208]	@ (8008588 <NMI_Handler+0x368>)
 80084b6:	edd3 7a00 	vldr	s15, [r3]
 80084ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084be:	4b49      	ldr	r3, [pc, #292]	@ (80085e4 <NMI_Handler+0x3c4>)
 80084c0:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 80084c4:	4b19      	ldr	r3, [pc, #100]	@ (800852c <NMI_Handler+0x30c>)
 80084c6:	ed93 7a00 	vldr	s14, [r3]
 80084ca:	4b30      	ldr	r3, [pc, #192]	@ (800858c <NMI_Handler+0x36c>)
 80084cc:	edd3 7a00 	vldr	s15, [r3]
 80084d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d4:	4b44      	ldr	r3, [pc, #272]	@ (80085e8 <NMI_Handler+0x3c8>)
 80084d6:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 80084da:	4b35      	ldr	r3, [pc, #212]	@ (80085b0 <NMI_Handler+0x390>)
 80084dc:	ed93 7a00 	vldr	s14, [r3]
 80084e0:	4b21      	ldr	r3, [pc, #132]	@ (8008568 <NMI_Handler+0x348>)
 80084e2:	edd3 7a00 	vldr	s15, [r3]
 80084e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ea:	4b40      	ldr	r3, [pc, #256]	@ (80085ec <NMI_Handler+0x3cc>)
 80084ec:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 80084f0:	4b31      	ldr	r3, [pc, #196]	@ (80085b8 <NMI_Handler+0x398>)
 80084f2:	ed93 7a00 	vldr	s14, [r3]
 80084f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008564 <NMI_Handler+0x344>)
 80084f8:	edd3 7a00 	vldr	s15, [r3]
 80084fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008500:	4b3b      	ldr	r3, [pc, #236]	@ (80085f0 <NMI_Handler+0x3d0>)
 8008502:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 8008506:	4b0b      	ldr	r3, [pc, #44]	@ (8008534 <NMI_Handler+0x314>)
 8008508:	ed93 7a00 	vldr	s14, [r3]
 800850c:	4b14      	ldr	r3, [pc, #80]	@ (8008560 <NMI_Handler+0x340>)
 800850e:	edd3 7a00 	vldr	s15, [r3]
 8008512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008516:	4b37      	ldr	r3, [pc, #220]	@ (80085f4 <NMI_Handler+0x3d4>)
 8008518:	edc3 7a00 	vstr	s15, [r3]
 800851c:	e06c      	b.n	80085f8 <NMI_Handler+0x3d8>
 800851e:	bf00      	nop
 8008520:	58021000 	.word	0x58021000
 8008524:	58020400 	.word	0x58020400
 8008528:	24001ef0 	.word	0x24001ef0
 800852c:	0000406c 	.word	0x0000406c
 8008530:	00004068 	.word	0x00004068
 8008534:	00004070 	.word	0x00004070
 8008538:	0801eb58 	.word	0x0801eb58
 800853c:	0000405c 	.word	0x0000405c
 8008540:	00000030 	.word	0x00000030
 8008544:	00000034 	.word	0x00000034
 8008548:	00000038 	.word	0x00000038
 800854c:	0000003c 	.word	0x0000003c
 8008550:	00000040 	.word	0x00000040
 8008554:	00000044 	.word	0x00000044
 8008558:	0801eb4c 	.word	0x0801eb4c
 800855c:	0801eb50 	.word	0x0801eb50
 8008560:	00000014 	.word	0x00000014
 8008564:	00000010 	.word	0x00000010
 8008568:	0000000c 	.word	0x0000000c
 800856c:	00000008 	.word	0x00000008
 8008570:	00000004 	.word	0x00000004
 8008574:	00000000 	.word	0x00000000
 8008578:	0000001c 	.word	0x0000001c
 800857c:	00000018 	.word	0x00000018
 8008580:	00000058 	.word	0x00000058
 8008584:	0000007c 	.word	0x0000007c
 8008588:	00004078 	.word	0x00004078
 800858c:	0000407c 	.word	0x0000407c
 8008590:	00004080 	.word	0x00004080
 8008594:	00004054 	.word	0x00004054
 8008598:	00004050 	.word	0x00004050
 800859c:	00004058 	.word	0x00004058
 80085a0:	0000409c 	.word	0x0000409c
 80085a4:	000040a0 	.word	0x000040a0
 80085a8:	000040a4 	.word	0x000040a4
 80085ac:	000040a8 	.word	0x000040a8
 80085b0:	000040b4 	.word	0x000040b4
 80085b4:	000040ac 	.word	0x000040ac
 80085b8:	000040bc 	.word	0x000040bc
 80085bc:	000040b0 	.word	0x000040b0
 80085c0:	000040b8 	.word	0x000040b8
 80085c4:	000040f0 	.word	0x000040f0
 80085c8:	00004104 	.word	0x00004104
 80085cc:	00004150 	.word	0x00004150
 80085d0:	000040c0 	.word	0x000040c0
 80085d4:	00004164 	.word	0x00004164
 80085d8:	000040c8 	.word	0x000040c8
 80085dc:	00004178 	.word	0x00004178
 80085e0:	000040c4 	.word	0x000040c4
 80085e4:	00004084 	.word	0x00004084
 80085e8:	00004088 	.word	0x00004088
 80085ec:	00004090 	.word	0x00004090
 80085f0:	00004094 	.word	0x00004094
 80085f4:	00004098 	.word	0x00004098


		MYDRON.ROOL = pid_angular_rate_rool;
 80085f8:	4b99      	ldr	r3, [pc, #612]	@ (8008860 <NMI_Handler+0x640>)
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008602:	ee17 3a90 	vmov	r3, s15
 8008606:	b21a      	sxth	r2, r3
 8008608:	4b96      	ldr	r3, [pc, #600]	@ (8008864 <NMI_Handler+0x644>)
 800860a:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 800860c:	4b96      	ldr	r3, [pc, #600]	@ (8008868 <NMI_Handler+0x648>)
 800860e:	edd3 7a00 	vldr	s15, [r3]
 8008612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008616:	ee17 3a90 	vmov	r3, s15
 800861a:	b21a      	sxth	r2, r3
 800861c:	4b91      	ldr	r3, [pc, #580]	@ (8008864 <NMI_Handler+0x644>)
 800861e:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008620:	4b92      	ldr	r3, [pc, #584]	@ (800886c <NMI_Handler+0x64c>)
 8008622:	edd3 7a00 	vldr	s15, [r3]
 8008626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862a:	ee17 3a90 	vmov	r3, s15
 800862e:	b21a      	sxth	r2, r3
 8008630:	4b8c      	ldr	r3, [pc, #560]	@ (8008864 <NMI_Handler+0x644>)
 8008632:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 8008634:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008638:	f7fb f892 	bl	8003760 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 800863c:	4b89      	ldr	r3, [pc, #548]	@ (8008864 <NMI_Handler+0x644>)
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	461a      	mov	r2, r3
 8008642:	4b8b      	ldr	r3, [pc, #556]	@ (8008870 <NMI_Handler+0x650>)
 8008644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008648:	429a      	cmp	r2, r3
 800864a:	dd05      	ble.n	8008658 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 800864c:	4b88      	ldr	r3, [pc, #544]	@ (8008870 <NMI_Handler+0x650>)
 800864e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008652:	b29a      	uxth	r2, r3
 8008654:	4b83      	ldr	r3, [pc, #524]	@ (8008864 <NMI_Handler+0x644>)
 8008656:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008658:	4b82      	ldr	r3, [pc, #520]	@ (8008864 <NMI_Handler+0x644>)
 800865a:	885b      	ldrh	r3, [r3, #2]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008664:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008848 <NMI_Handler+0x628>
 8008668:	ee27 6b06 	vmul.f64	d6, d7, d6
 800866c:	4b7d      	ldr	r3, [pc, #500]	@ (8008864 <NMI_Handler+0x644>)
 800866e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800867a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800867e:	4b79      	ldr	r3, [pc, #484]	@ (8008864 <NMI_Handler+0x644>)
 8008680:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800868c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008690:	4b74      	ldr	r3, [pc, #464]	@ (8008864 <NMI_Handler+0x644>)
 8008692:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800869e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80086a2:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008850 <NMI_Handler+0x630>
 80086a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80086aa:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008858 <NMI_Handler+0x638>
 80086ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80086b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80086b6:	ee17 3a90 	vmov	r3, s15
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	4b6d      	ldr	r3, [pc, #436]	@ (8008874 <NMI_Handler+0x654>)
 80086be:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80086c0:	4b68      	ldr	r3, [pc, #416]	@ (8008864 <NMI_Handler+0x644>)
 80086c2:	885b      	ldrh	r3, [r3, #2]
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086cc:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008848 <NMI_Handler+0x628>
 80086d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086d4:	4b63      	ldr	r3, [pc, #396]	@ (8008864 <NMI_Handler+0x644>)
 80086d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086e6:	4b5f      	ldr	r3, [pc, #380]	@ (8008864 <NMI_Handler+0x644>)
 80086e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008864 <NMI_Handler+0x644>)
 80086fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008706:	ee36 7b47 	vsub.f64	d7, d6, d7
 800870a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008850 <NMI_Handler+0x630>
 800870e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008712:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008858 <NMI_Handler+0x638>
 8008716:	ee37 7b06 	vadd.f64	d7, d7, d6
 800871a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800871e:	ee17 3a90 	vmov	r3, s15
 8008722:	b29a      	uxth	r2, r3
 8008724:	4b54      	ldr	r3, [pc, #336]	@ (8008878 <NMI_Handler+0x658>)
 8008726:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008728:	4b4e      	ldr	r3, [pc, #312]	@ (8008864 <NMI_Handler+0x644>)
 800872a:	885b      	ldrh	r3, [r3, #2]
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008734:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008848 <NMI_Handler+0x628>
 8008738:	ee27 6b06 	vmul.f64	d6, d7, d6
 800873c:	4b49      	ldr	r3, [pc, #292]	@ (8008864 <NMI_Handler+0x644>)
 800873e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800874a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800874e:	4b45      	ldr	r3, [pc, #276]	@ (8008864 <NMI_Handler+0x644>)
 8008750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800875c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008760:	4b40      	ldr	r3, [pc, #256]	@ (8008864 <NMI_Handler+0x644>)
 8008762:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800876e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008772:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008850 <NMI_Handler+0x630>
 8008776:	ee37 7b06 	vadd.f64	d7, d7, d6
 800877a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008858 <NMI_Handler+0x638>
 800877e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008782:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008786:	ee17 3a90 	vmov	r3, s15
 800878a:	b29a      	uxth	r2, r3
 800878c:	4b3b      	ldr	r3, [pc, #236]	@ (800887c <NMI_Handler+0x65c>)
 800878e:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008790:	4b34      	ldr	r3, [pc, #208]	@ (8008864 <NMI_Handler+0x644>)
 8008792:	885b      	ldrh	r3, [r3, #2]
 8008794:	ee07 3a90 	vmov	s15, r3
 8008798:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800879c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008848 <NMI_Handler+0x628>
 80087a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008864 <NMI_Handler+0x644>)
 80087a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80087b6:	4b2b      	ldr	r3, [pc, #172]	@ (8008864 <NMI_Handler+0x644>)
 80087b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087bc:	ee07 3a90 	vmov	s15, r3
 80087c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087c8:	4b26      	ldr	r3, [pc, #152]	@ (8008864 <NMI_Handler+0x644>)
 80087ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087da:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008850 <NMI_Handler+0x630>
 80087de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087e2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008858 <NMI_Handler+0x638>
 80087e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087ee:	ee17 3a90 	vmov	r3, s15
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	4b22      	ldr	r3, [pc, #136]	@ (8008880 <NMI_Handler+0x660>)
 80087f6:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 80087f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008874 <NMI_Handler+0x654>)
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f8 fb19 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 8008802:	4b1d      	ldr	r3, [pc, #116]	@ (8008878 <NMI_Handler+0x658>)
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f7f8 fb36 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 800880c:	4b1b      	ldr	r3, [pc, #108]	@ (800887c <NMI_Handler+0x65c>)
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f7f8 fb53 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 8008816:	4b1a      	ldr	r3, [pc, #104]	@ (8008880 <NMI_Handler+0x660>)
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f7f8 fb70 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008820:	4b14      	ldr	r3, [pc, #80]	@ (8008874 <NMI_Handler+0x654>)
 8008822:	881a      	ldrh	r2, [r3, #0]
 8008824:	4b17      	ldr	r3, [pc, #92]	@ (8008884 <NMI_Handler+0x664>)
 8008826:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008828:	4b13      	ldr	r3, [pc, #76]	@ (8008878 <NMI_Handler+0x658>)
 800882a:	881a      	ldrh	r2, [r3, #0]
 800882c:	4b16      	ldr	r3, [pc, #88]	@ (8008888 <NMI_Handler+0x668>)
 800882e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008830:	4b12      	ldr	r3, [pc, #72]	@ (800887c <NMI_Handler+0x65c>)
 8008832:	881a      	ldrh	r2, [r3, #0]
 8008834:	4b15      	ldr	r3, [pc, #84]	@ (800888c <NMI_Handler+0x66c>)
 8008836:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008838:	4b11      	ldr	r3, [pc, #68]	@ (8008880 <NMI_Handler+0x660>)
 800883a:	881a      	ldrh	r2, [r3, #0]
 800883c:	4b14      	ldr	r3, [pc, #80]	@ (8008890 <NMI_Handler+0x670>)
 800883e:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008840:	e517      	b.n	8008272 <NMI_Handler+0x52>
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	66666666 	.word	0x66666666
 800884c:	3fe66666 	.word	0x3fe66666
 8008850:	00000000 	.word	0x00000000
 8008854:	40c48200 	.word	0x40c48200
 8008858:	00000000 	.word	0x00000000
 800885c:	407f4000 	.word	0x407f4000
 8008860:	000040c8 	.word	0x000040c8
 8008864:	00000178 	.word	0x00000178
 8008868:	000040c0 	.word	0x000040c0
 800886c:	000040c4 	.word	0x000040c4
 8008870:	0000405e 	.word	0x0000405e
 8008874:	0000418c 	.word	0x0000418c
 8008878:	0000418e 	.word	0x0000418e
 800887c:	00004190 	.word	0x00004190
 8008880:	00004192 	.word	0x00004192
 8008884:	00004194 	.word	0x00004194
 8008888:	00004196 	.word	0x00004196
 800888c:	00004198 	.word	0x00004198
 8008890:	0000419a 	.word	0x0000419a

08008894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008898:	2201      	movs	r2, #1
 800889a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800889e:	4812      	ldr	r0, [pc, #72]	@ (80088e8 <HardFault_Handler+0x54>)
 80088a0:	f005 ff68 	bl	800e774 <HAL_GPIO_WritePin>
	LED_Y_0;
 80088a4:	2200      	movs	r2, #0
 80088a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80088aa:	4810      	ldr	r0, [pc, #64]	@ (80088ec <HardFault_Handler+0x58>)
 80088ac:	f005 ff62 	bl	800e774 <HAL_GPIO_WritePin>
	LED_R_1;
 80088b0:	2201      	movs	r2, #1
 80088b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80088b6:	480d      	ldr	r0, [pc, #52]	@ (80088ec <HardFault_Handler+0x58>)
 80088b8:	f005 ff5c 	bl	800e774 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80088bc:	480c      	ldr	r0, [pc, #48]	@ (80088f0 <HardFault_Handler+0x5c>)
 80088be:	f015 f9f1 	bl	801dca4 <f_close>
	wanted_rool = 0;
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <HardFault_Handler+0x60>)
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80088ca:	4b0b      	ldr	r3, [pc, #44]	@ (80088f8 <HardFault_Handler+0x64>)
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80088d2:	4b0a      	ldr	r3, [pc, #40]	@ (80088fc <HardFault_Handler+0x68>)
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80088da:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <HardFault_Handler+0x6c>)
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b21a      	sxth	r2, r3
 80088e0:	4b08      	ldr	r3, [pc, #32]	@ (8008904 <HardFault_Handler+0x70>)
 80088e2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <HardFault_Handler+0x50>
 80088e8:	58021000 	.word	0x58021000
 80088ec:	58020400 	.word	0x58020400
 80088f0:	24001ef0 	.word	0x24001ef0
 80088f4:	0000406c 	.word	0x0000406c
 80088f8:	00004068 	.word	0x00004068
 80088fc:	00004070 	.word	0x00004070
 8008900:	0801eb58 	.word	0x0801eb58
 8008904:	0000405c 	.word	0x0000405c

08008908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 800890c:	2200      	movs	r2, #0
 800890e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008912:	4812      	ldr	r0, [pc, #72]	@ (800895c <MemManage_Handler+0x54>)
 8008914:	f005 ff2e 	bl	800e774 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008918:	2200      	movs	r2, #0
 800891a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800891e:	4810      	ldr	r0, [pc, #64]	@ (8008960 <MemManage_Handler+0x58>)
 8008920:	f005 ff28 	bl	800e774 <HAL_GPIO_WritePin>
	LED_R_1;
 8008924:	2201      	movs	r2, #1
 8008926:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800892a:	480d      	ldr	r0, [pc, #52]	@ (8008960 <MemManage_Handler+0x58>)
 800892c:	f005 ff22 	bl	800e774 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008930:	480c      	ldr	r0, [pc, #48]	@ (8008964 <MemManage_Handler+0x5c>)
 8008932:	f015 f9b7 	bl	801dca4 <f_close>
	wanted_rool = 0;
 8008936:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <MemManage_Handler+0x60>)
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800893e:	4b0b      	ldr	r3, [pc, #44]	@ (800896c <MemManage_Handler+0x64>)
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008946:	4b0a      	ldr	r3, [pc, #40]	@ (8008970 <MemManage_Handler+0x68>)
 8008948:	f04f 0200 	mov.w	r2, #0
 800894c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800894e:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <MemManage_Handler+0x6c>)
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b21a      	sxth	r2, r3
 8008954:	4b08      	ldr	r3, [pc, #32]	@ (8008978 <MemManage_Handler+0x70>)
 8008956:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <MemManage_Handler+0x50>
 800895c:	58021000 	.word	0x58021000
 8008960:	58020400 	.word	0x58020400
 8008964:	24001ef0 	.word	0x24001ef0
 8008968:	0000406c 	.word	0x0000406c
 800896c:	00004068 	.word	0x00004068
 8008970:	00004070 	.word	0x00004070
 8008974:	0801eb58 	.word	0x0801eb58
 8008978:	0000405c 	.word	0x0000405c

0800897c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008980:	2201      	movs	r2, #1
 8008982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008986:	4812      	ldr	r0, [pc, #72]	@ (80089d0 <BusFault_Handler+0x54>)
 8008988:	f005 fef4 	bl	800e774 <HAL_GPIO_WritePin>
	LED_Y_1;
 800898c:	2201      	movs	r2, #1
 800898e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008992:	4810      	ldr	r0, [pc, #64]	@ (80089d4 <BusFault_Handler+0x58>)
 8008994:	f005 feee 	bl	800e774 <HAL_GPIO_WritePin>
	LED_R_1;
 8008998:	2201      	movs	r2, #1
 800899a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800899e:	480d      	ldr	r0, [pc, #52]	@ (80089d4 <BusFault_Handler+0x58>)
 80089a0:	f005 fee8 	bl	800e774 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089a4:	480c      	ldr	r0, [pc, #48]	@ (80089d8 <BusFault_Handler+0x5c>)
 80089a6:	f015 f97d 	bl	801dca4 <f_close>
	wanted_rool = 0;
 80089aa:	4b0c      	ldr	r3, [pc, #48]	@ (80089dc <BusFault_Handler+0x60>)
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <BusFault_Handler+0x64>)
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089ba:	4b0a      	ldr	r3, [pc, #40]	@ (80089e4 <BusFault_Handler+0x68>)
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80089c2:	4b09      	ldr	r3, [pc, #36]	@ (80089e8 <BusFault_Handler+0x6c>)
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b21a      	sxth	r2, r3
 80089c8:	4b08      	ldr	r3, [pc, #32]	@ (80089ec <BusFault_Handler+0x70>)
 80089ca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <BusFault_Handler+0x50>
 80089d0:	58021000 	.word	0x58021000
 80089d4:	58020400 	.word	0x58020400
 80089d8:	24001ef0 	.word	0x24001ef0
 80089dc:	0000406c 	.word	0x0000406c
 80089e0:	00004068 	.word	0x00004068
 80089e4:	00004070 	.word	0x00004070
 80089e8:	0801eb58 	.word	0x0801eb58
 80089ec:	0000405c 	.word	0x0000405c

080089f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 80089f4:	2200      	movs	r2, #0
 80089f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089fa:	4812      	ldr	r0, [pc, #72]	@ (8008a44 <UsageFault_Handler+0x54>)
 80089fc:	f005 feba 	bl	800e774 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a00:	2201      	movs	r2, #1
 8008a02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a06:	4810      	ldr	r0, [pc, #64]	@ (8008a48 <UsageFault_Handler+0x58>)
 8008a08:	f005 feb4 	bl	800e774 <HAL_GPIO_WritePin>
	LED_R_1;
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a12:	480d      	ldr	r0, [pc, #52]	@ (8008a48 <UsageFault_Handler+0x58>)
 8008a14:	f005 feae 	bl	800e774 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a18:	480c      	ldr	r0, [pc, #48]	@ (8008a4c <UsageFault_Handler+0x5c>)
 8008a1a:	f015 f943 	bl	801dca4 <f_close>
	wanted_rool = 0;
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a50 <UsageFault_Handler+0x60>)
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008a26:	4b0b      	ldr	r3, [pc, #44]	@ (8008a54 <UsageFault_Handler+0x64>)
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <UsageFault_Handler+0x68>)
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a36:	4b09      	ldr	r3, [pc, #36]	@ (8008a5c <UsageFault_Handler+0x6c>)
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b21a      	sxth	r2, r3
 8008a3c:	4b08      	ldr	r3, [pc, #32]	@ (8008a60 <UsageFault_Handler+0x70>)
 8008a3e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <UsageFault_Handler+0x50>
 8008a44:	58021000 	.word	0x58021000
 8008a48:	58020400 	.word	0x58020400
 8008a4c:	24001ef0 	.word	0x24001ef0
 8008a50:	0000406c 	.word	0x0000406c
 8008a54:	00004068 	.word	0x00004068
 8008a58:	00004070 	.word	0x00004070
 8008a5c:	0801eb58 	.word	0x0801eb58
 8008a60:	0000405c 	.word	0x0000405c

08008a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a68:	bf00      	nop
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a72:	b480      	push	{r7}
 8008a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a76:	bf00      	nop
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a84:	bf00      	nop
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
	...

08008a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008a94:	4b08      	ldr	r3, [pc, #32]	@ (8008ab8 <SysTick_Handler+0x28>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a07      	ldr	r2, [pc, #28]	@ (8008ab8 <SysTick_Handler+0x28>)
 8008a9c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008a9e:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <SysTick_Handler+0x28>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d904      	bls.n	8008ab0 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008aa6:	4b04      	ldr	r3, [pc, #16]	@ (8008ab8 <SysTick_Handler+0x28>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008aac:	f7ff fb98 	bl	80081e0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ab0:	f000 fd04 	bl	80094bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ab4:	bf00      	nop
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	24000374 	.word	0x24000374

08008abc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008ac0:	4802      	ldr	r0, [pc, #8]	@ (8008acc <DMA1_Stream0_IRQHandler+0x10>)
 8008ac2:	f004 f96b 	bl	800cd9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008ac6:	bf00      	nop
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	240002fc 	.word	0x240002fc

08008ad0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008ad4:	4802      	ldr	r0, [pc, #8]	@ (8008ae0 <ADC_IRQHandler+0x10>)
 8008ad6:	f001 fb3f 	bl	800a158 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008ada:	bf00      	nop
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	240000ac 	.word	0x240000ac

08008ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008ae8:	4802      	ldr	r0, [pc, #8]	@ (8008af4 <TIM2_IRQHandler+0x10>)
 8008aea:	f00d ff02 	bl	80168f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008aee:	bf00      	nop
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	240003cc 	.word	0x240003cc

08008af8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008afc:	4802      	ldr	r0, [pc, #8]	@ (8008b08 <SPI2_IRQHandler+0x10>)
 8008afe:	f00d f871 	bl	8015be4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	240001ec 	.word	0x240001ec

08008b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b10:	4802      	ldr	r0, [pc, #8]	@ (8008b1c <USART1_IRQHandler+0x10>)
 8008b12:	f00f fb45 	bl	80181a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	240004b0 	.word	0x240004b0

08008b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008b24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008b28:	f005 fe3d 	bl	800e7a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008b2c:	bf00      	nop
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008b34:	4802      	ldr	r0, [pc, #8]	@ (8008b40 <DMA2_Stream0_IRQHandler+0x10>)
 8008b36:	f004 f931 	bl	800cd9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008b3a:	bf00      	nop
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	2400011c 	.word	0x2400011c

08008b44 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008b48:	4802      	ldr	r0, [pc, #8]	@ (8008b54 <I2C5_EV_IRQHandler+0x10>)
 8008b4a:	f006 fa21 	bl	800ef90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008b4e:	bf00      	nop
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	24000198 	.word	0x24000198

08008b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b5c:	4b32      	ldr	r3, [pc, #200]	@ (8008c28 <SystemInit+0xd0>)
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b62:	4a31      	ldr	r2, [pc, #196]	@ (8008c28 <SystemInit+0xd0>)
 8008b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008c2c <SystemInit+0xd4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	2b06      	cmp	r3, #6
 8008b76:	d807      	bhi.n	8008b88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b78:	4b2c      	ldr	r3, [pc, #176]	@ (8008c2c <SystemInit+0xd4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f023 030f 	bic.w	r3, r3, #15
 8008b80:	4a2a      	ldr	r2, [pc, #168]	@ (8008c2c <SystemInit+0xd4>)
 8008b82:	f043 0307 	orr.w	r3, r3, #7
 8008b86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008b88:	4b29      	ldr	r3, [pc, #164]	@ (8008c30 <SystemInit+0xd8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a28      	ldr	r2, [pc, #160]	@ (8008c30 <SystemInit+0xd8>)
 8008b8e:	f043 0301 	orr.w	r3, r3, #1
 8008b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b94:	4b26      	ldr	r3, [pc, #152]	@ (8008c30 <SystemInit+0xd8>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b9a:	4b25      	ldr	r3, [pc, #148]	@ (8008c30 <SystemInit+0xd8>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4924      	ldr	r1, [pc, #144]	@ (8008c30 <SystemInit+0xd8>)
 8008ba0:	4b24      	ldr	r3, [pc, #144]	@ (8008c34 <SystemInit+0xdc>)
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ba6:	4b21      	ldr	r3, [pc, #132]	@ (8008c2c <SystemInit+0xd4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8008c2c <SystemInit+0xd4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f023 030f 	bic.w	r3, r3, #15
 8008bba:	4a1c      	ldr	r2, [pc, #112]	@ (8008c2c <SystemInit+0xd4>)
 8008bbc:	f043 0307 	orr.w	r3, r3, #7
 8008bc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c30 <SystemInit+0xd8>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008bc8:	4b19      	ldr	r3, [pc, #100]	@ (8008c30 <SystemInit+0xd8>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008bce:	4b18      	ldr	r3, [pc, #96]	@ (8008c30 <SystemInit+0xd8>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008bd4:	4b16      	ldr	r3, [pc, #88]	@ (8008c30 <SystemInit+0xd8>)
 8008bd6:	4a18      	ldr	r2, [pc, #96]	@ (8008c38 <SystemInit+0xe0>)
 8008bd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008bda:	4b15      	ldr	r3, [pc, #84]	@ (8008c30 <SystemInit+0xd8>)
 8008bdc:	4a17      	ldr	r2, [pc, #92]	@ (8008c3c <SystemInit+0xe4>)
 8008bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008be0:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <SystemInit+0xd8>)
 8008be2:	4a17      	ldr	r2, [pc, #92]	@ (8008c40 <SystemInit+0xe8>)
 8008be4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008be6:	4b12      	ldr	r3, [pc, #72]	@ (8008c30 <SystemInit+0xd8>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008bec:	4b10      	ldr	r3, [pc, #64]	@ (8008c30 <SystemInit+0xd8>)
 8008bee:	4a14      	ldr	r2, [pc, #80]	@ (8008c40 <SystemInit+0xe8>)
 8008bf0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c30 <SystemInit+0xd8>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c30 <SystemInit+0xd8>)
 8008bfa:	4a11      	ldr	r2, [pc, #68]	@ (8008c40 <SystemInit+0xe8>)
 8008bfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <SystemInit+0xd8>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c04:	4b0a      	ldr	r3, [pc, #40]	@ (8008c30 <SystemInit+0xd8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a09      	ldr	r2, [pc, #36]	@ (8008c30 <SystemInit+0xd8>)
 8008c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <SystemInit+0xd8>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008c16:	4b0b      	ldr	r3, [pc, #44]	@ (8008c44 <SystemInit+0xec>)
 8008c18:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008c1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008c1e:	bf00      	nop
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	e000ed00 	.word	0xe000ed00
 8008c2c:	52002000 	.word	0x52002000
 8008c30:	58024400 	.word	0x58024400
 8008c34:	eaf6ed7f 	.word	0xeaf6ed7f
 8008c38:	02020200 	.word	0x02020200
 8008c3c:	01ff0000 	.word	0x01ff0000
 8008c40:	01010280 	.word	0x01010280
 8008c44:	52004000 	.word	0x52004000

08008c48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b098      	sub	sp, #96	@ 0x60
 8008c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	605a      	str	r2, [r3, #4]
 8008c64:	609a      	str	r2, [r3, #8]
 8008c66:	60da      	str	r2, [r3, #12]
 8008c68:	611a      	str	r2, [r3, #16]
 8008c6a:	615a      	str	r2, [r3, #20]
 8008c6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c6e:	1d3b      	adds	r3, r7, #4
 8008c70:	2234      	movs	r2, #52	@ 0x34
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f015 fa0d 	bl	801e094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c7a:	4b45      	ldr	r3, [pc, #276]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008c7c:	4a45      	ldr	r2, [pc, #276]	@ (8008d94 <MX_TIM1_Init+0x14c>)
 8008c7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008c80:	4b43      	ldr	r3, [pc, #268]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008c82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008c86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c88:	4b41      	ldr	r3, [pc, #260]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008c8e:	4b40      	ldr	r3, [pc, #256]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c96:	4b3e      	ldr	r3, [pc, #248]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008ca4:	2280      	movs	r2, #128	@ 0x80
 8008ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008ca8:	4839      	ldr	r0, [pc, #228]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008caa:	f00d fc57 	bl	801655c <HAL_TIM_PWM_Init>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008cb4:	f7ff f8b8 	bl	8007e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008cc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4831      	ldr	r0, [pc, #196]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008ccc:	f00e ff64 	bl	8017b98 <HAL_TIMEx_MasterConfigSynchronization>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008cd6:	f7ff f8a7 	bl	8007e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008cda:	2360      	movs	r3, #96	@ 0x60
 8008cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008cf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4824      	ldr	r0, [pc, #144]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008d00:	f00d ff9a 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008d0a:	f7ff f88d 	bl	8007e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008d0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d12:	2208      	movs	r2, #8
 8008d14:	4619      	mov	r1, r3
 8008d16:	481e      	ldr	r0, [pc, #120]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008d18:	f00d ff8e 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008d22:	f7ff f881 	bl	8007e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008d26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d2a:	220c      	movs	r2, #12
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4818      	ldr	r0, [pc, #96]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008d30:	f00d ff82 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008d3a:	f7ff f875 	bl	8007e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008d60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4807      	ldr	r0, [pc, #28]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008d74:	f00e ffac 	bl	8017cd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008d7e:	f7ff f853 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008d82:	4803      	ldr	r0, [pc, #12]	@ (8008d90 <MX_TIM1_Init+0x148>)
 8008d84:	f000 f9da 	bl	800913c <HAL_TIM_MspPostInit>

}
 8008d88:	bf00      	nop
 8008d8a:	3760      	adds	r7, #96	@ 0x60
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	24000380 	.word	0x24000380
 8008d94:	40010000 	.word	0x40010000

08008d98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d9e:	f107 0314 	add.w	r3, r7, #20
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	605a      	str	r2, [r3, #4]
 8008da8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008daa:	1d3b      	adds	r3, r7, #4
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	609a      	str	r2, [r3, #8]
 8008db4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008db6:	4b21      	ldr	r3, [pc, #132]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008dc0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dd4:	4b19      	ldr	r3, [pc, #100]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008dda:	4b18      	ldr	r3, [pc, #96]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008ddc:	2280      	movs	r2, #128	@ 0x80
 8008dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008de0:	4816      	ldr	r0, [pc, #88]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008de2:	f00d fd2f 	bl	8016844 <HAL_TIM_IC_Init>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008dec:	f7ff f81c 	bl	8007e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	480f      	ldr	r0, [pc, #60]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008e00:	f00e feca 	bl	8017b98 <HAL_TIMEx_MasterConfigSynchronization>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008e0a:	f7ff f80d 	bl	8007e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008e12:	2301      	movs	r3, #1
 8008e14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008e1e:	1d3b      	adds	r3, r7, #4
 8008e20:	2200      	movs	r2, #0
 8008e22:	4619      	mov	r1, r3
 8008e24:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <MX_TIM2_Init+0xa4>)
 8008e26:	f00d fe6b 	bl	8016b00 <HAL_TIM_IC_ConfigChannel>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008e30:	f7fe fffa 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008e34:	bf00      	nop
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	240003cc 	.word	0x240003cc

08008e40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	@ 0x28
 8008e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e46:	f107 031c 	add.w	r3, r7, #28
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	605a      	str	r2, [r3, #4]
 8008e50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e52:	463b      	mov	r3, r7
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	605a      	str	r2, [r3, #4]
 8008e5a:	609a      	str	r2, [r3, #8]
 8008e5c:	60da      	str	r2, [r3, #12]
 8008e5e:	611a      	str	r2, [r3, #16]
 8008e60:	615a      	str	r2, [r3, #20]
 8008e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008e64:	4b32      	ldr	r3, [pc, #200]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e66:	4a33      	ldr	r2, [pc, #204]	@ (8008f34 <MX_TIM3_Init+0xf4>)
 8008e68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008e6a:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e6c:	221c      	movs	r2, #28
 8008e6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e70:	4b2f      	ldr	r3, [pc, #188]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008e76:	4b2e      	ldr	r3, [pc, #184]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e78:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008e7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e84:	4b2a      	ldr	r3, [pc, #168]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008e8a:	4829      	ldr	r0, [pc, #164]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008e8c:	f00d fb66 	bl	801655c <HAL_TIM_PWM_Init>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008e96:	f7fe ffc7 	bl	8007e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008ea2:	f107 031c 	add.w	r3, r7, #28
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4821      	ldr	r0, [pc, #132]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008eaa:	f00e fe75 	bl	8017b98 <HAL_TIMEx_MasterConfigSynchronization>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008eb4:	f7fe ffb8 	bl	8007e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008eb8:	2360      	movs	r3, #96	@ 0x60
 8008eba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ec8:	463b      	mov	r3, r7
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4818      	ldr	r0, [pc, #96]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008ed0:	f00d feb2 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008eda:	f7fe ffa5 	bl	8007e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008ede:	463b      	mov	r3, r7
 8008ee0:	2204      	movs	r2, #4
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4812      	ldr	r0, [pc, #72]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008ee6:	f00d fea7 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008ef0:	f7fe ff9a 	bl	8007e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	4619      	mov	r1, r3
 8008efa:	480d      	ldr	r0, [pc, #52]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008efc:	f00d fe9c 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008f06:	f7fe ff8f 	bl	8007e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	220c      	movs	r2, #12
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4807      	ldr	r0, [pc, #28]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008f12:	f00d fe91 	bl	8016c38 <HAL_TIM_PWM_ConfigChannel>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008f1c:	f7fe ff84 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008f20:	4803      	ldr	r0, [pc, #12]	@ (8008f30 <MX_TIM3_Init+0xf0>)
 8008f22:	f000 f90b 	bl	800913c <HAL_TIM_MspPostInit>

}
 8008f26:	bf00      	nop
 8008f28:	3728      	adds	r7, #40	@ 0x28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	24000418 	.word	0x24000418
 8008f34:	40000400 	.word	0x40000400

08008f38 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f3e:	f107 0310 	add.w	r3, r7, #16
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	605a      	str	r2, [r3, #4]
 8008f48:	609a      	str	r2, [r3, #8]
 8008f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f4c:	1d3b      	adds	r3, r7, #4
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	605a      	str	r2, [r3, #4]
 8008f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008f56:	4b21      	ldr	r3, [pc, #132]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f58:	4a21      	ldr	r2, [pc, #132]	@ (8008fe0 <MX_TIM8_Init+0xa8>)
 8008f5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f5e:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008f62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f64:	4b1d      	ldr	r3, [pc, #116]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f6c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008f70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f72:	4b1a      	ldr	r3, [pc, #104]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008f78:	4b18      	ldr	r3, [pc, #96]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f7e:	4b17      	ldr	r3, [pc, #92]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008f84:	4815      	ldr	r0, [pc, #84]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008f86:	f00d f98e 	bl	80162a6 <HAL_TIM_Base_Init>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008f90:	f7fe ff4a 	bl	8007e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008f9a:	f107 0310 	add.w	r3, r7, #16
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	480e      	ldr	r0, [pc, #56]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008fa2:	f00d ff5d 	bl	8016e60 <HAL_TIM_ConfigClockSource>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008fac:	f7fe ff3c 	bl	8007e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008fb0:	2320      	movs	r3, #32
 8008fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008fb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008fb8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4806      	ldr	r0, [pc, #24]	@ (8008fdc <MX_TIM8_Init+0xa4>)
 8008fc4:	f00e fde8 	bl	8017b98 <HAL_TIMEx_MasterConfigSynchronization>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008fce:	f7fe ff2b 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008fd2:	bf00      	nop
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	24000464 	.word	0x24000464
 8008fe0:	40010400 	.word	0x40010400

08008fe4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a16      	ldr	r2, [pc, #88]	@ (800904c <HAL_TIM_PWM_MspInit+0x68>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d10f      	bne.n	8009016 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008ff6:	4b16      	ldr	r3, [pc, #88]	@ (8009050 <HAL_TIM_PWM_MspInit+0x6c>)
 8008ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffc:	4a14      	ldr	r2, [pc, #80]	@ (8009050 <HAL_TIM_PWM_MspInit+0x6c>)
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009006:	4b12      	ldr	r3, [pc, #72]	@ (8009050 <HAL_TIM_PWM_MspInit+0x6c>)
 8009008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009014:	e013      	b.n	800903e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a0e      	ldr	r2, [pc, #56]	@ (8009054 <HAL_TIM_PWM_MspInit+0x70>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d10e      	bne.n	800903e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009020:	4b0b      	ldr	r3, [pc, #44]	@ (8009050 <HAL_TIM_PWM_MspInit+0x6c>)
 8009022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009026:	4a0a      	ldr	r2, [pc, #40]	@ (8009050 <HAL_TIM_PWM_MspInit+0x6c>)
 8009028:	f043 0302 	orr.w	r3, r3, #2
 800902c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <HAL_TIM_PWM_MspInit+0x6c>)
 8009032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	60bb      	str	r3, [r7, #8]
 800903c:	68bb      	ldr	r3, [r7, #8]
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	40010000 	.word	0x40010000
 8009050:	58024400 	.word	0x58024400
 8009054:	40000400 	.word	0x40000400

08009058 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08a      	sub	sp, #40	@ 0x28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009060:	f107 0314 	add.w	r3, r7, #20
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	609a      	str	r2, [r3, #8]
 800906c:	60da      	str	r2, [r3, #12]
 800906e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009078:	d135      	bne.n	80090e6 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800907a:	4b1d      	ldr	r3, [pc, #116]	@ (80090f0 <HAL_TIM_IC_MspInit+0x98>)
 800907c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009080:	4a1b      	ldr	r2, [pc, #108]	@ (80090f0 <HAL_TIM_IC_MspInit+0x98>)
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800908a:	4b19      	ldr	r3, [pc, #100]	@ (80090f0 <HAL_TIM_IC_MspInit+0x98>)
 800908c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009098:	4b15      	ldr	r3, [pc, #84]	@ (80090f0 <HAL_TIM_IC_MspInit+0x98>)
 800909a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800909e:	4a14      	ldr	r2, [pc, #80]	@ (80090f0 <HAL_TIM_IC_MspInit+0x98>)
 80090a0:	f043 0301 	orr.w	r3, r3, #1
 80090a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80090a8:	4b11      	ldr	r3, [pc, #68]	@ (80090f0 <HAL_TIM_IC_MspInit+0x98>)
 80090aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80090b6:	2301      	movs	r3, #1
 80090b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090ba:	2302      	movs	r3, #2
 80090bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090c2:	2300      	movs	r3, #0
 80090c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80090c6:	2301      	movs	r3, #1
 80090c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090ca:	f107 0314 	add.w	r3, r7, #20
 80090ce:	4619      	mov	r1, r3
 80090d0:	4808      	ldr	r0, [pc, #32]	@ (80090f4 <HAL_TIM_IC_MspInit+0x9c>)
 80090d2:	f005 f98f 	bl	800e3f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80090d6:	2200      	movs	r2, #0
 80090d8:	2101      	movs	r1, #1
 80090da:	201c      	movs	r0, #28
 80090dc:	f002 fa8b 	bl	800b5f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80090e0:	201c      	movs	r0, #28
 80090e2:	f002 faa2 	bl	800b62a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80090e6:	bf00      	nop
 80090e8:	3728      	adds	r7, #40	@ 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	58024400 	.word	0x58024400
 80090f4:	58020000 	.word	0x58020000

080090f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a0b      	ldr	r2, [pc, #44]	@ (8009134 <HAL_TIM_Base_MspInit+0x3c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d10e      	bne.n	8009128 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800910a:	4b0b      	ldr	r3, [pc, #44]	@ (8009138 <HAL_TIM_Base_MspInit+0x40>)
 800910c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009110:	4a09      	ldr	r2, [pc, #36]	@ (8009138 <HAL_TIM_Base_MspInit+0x40>)
 8009112:	f043 0302 	orr.w	r3, r3, #2
 8009116:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800911a:	4b07      	ldr	r3, [pc, #28]	@ (8009138 <HAL_TIM_Base_MspInit+0x40>)
 800911c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	40010400 	.word	0x40010400
 8009138:	58024400 	.word	0x58024400

0800913c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009144:	f107 0314 	add.w	r3, r7, #20
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	609a      	str	r2, [r3, #8]
 8009150:	60da      	str	r2, [r3, #12]
 8009152:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a26      	ldr	r2, [pc, #152]	@ (80091f4 <HAL_TIM_MspPostInit+0xb8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d120      	bne.n	80091a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800915e:	4b26      	ldr	r3, [pc, #152]	@ (80091f8 <HAL_TIM_MspPostInit+0xbc>)
 8009160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009164:	4a24      	ldr	r2, [pc, #144]	@ (80091f8 <HAL_TIM_MspPostInit+0xbc>)
 8009166:	f043 0310 	orr.w	r3, r3, #16
 800916a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800916e:	4b22      	ldr	r3, [pc, #136]	@ (80091f8 <HAL_TIM_MspPostInit+0xbc>)
 8009170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	613b      	str	r3, [r7, #16]
 800917a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800917c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009182:	2302      	movs	r3, #2
 8009184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009186:	2300      	movs	r3, #0
 8009188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800918a:	2300      	movs	r3, #0
 800918c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800918e:	2301      	movs	r3, #1
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	4619      	mov	r1, r3
 8009198:	4818      	ldr	r0, [pc, #96]	@ (80091fc <HAL_TIM_MspPostInit+0xc0>)
 800919a:	f005 f92b 	bl	800e3f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800919e:	e024      	b.n	80091ea <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a16      	ldr	r2, [pc, #88]	@ (8009200 <HAL_TIM_MspPostInit+0xc4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d11f      	bne.n	80091ea <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80091aa:	4b13      	ldr	r3, [pc, #76]	@ (80091f8 <HAL_TIM_MspPostInit+0xbc>)
 80091ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091b0:	4a11      	ldr	r2, [pc, #68]	@ (80091f8 <HAL_TIM_MspPostInit+0xbc>)
 80091b2:	f043 0304 	orr.w	r3, r3, #4
 80091b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80091ba:	4b0f      	ldr	r3, [pc, #60]	@ (80091f8 <HAL_TIM_MspPostInit+0xbc>)
 80091bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80091c8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80091cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ce:	2302      	movs	r3, #2
 80091d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091d6:	2300      	movs	r3, #0
 80091d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80091da:	2302      	movs	r3, #2
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091de:	f107 0314 	add.w	r3, r7, #20
 80091e2:	4619      	mov	r1, r3
 80091e4:	4807      	ldr	r0, [pc, #28]	@ (8009204 <HAL_TIM_MspPostInit+0xc8>)
 80091e6:	f005 f905 	bl	800e3f4 <HAL_GPIO_Init>
}
 80091ea:	bf00      	nop
 80091ec:	3728      	adds	r7, #40	@ 0x28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40010000 	.word	0x40010000
 80091f8:	58024400 	.word	0x58024400
 80091fc:	58021000 	.word	0x58021000
 8009200:	40000400 	.word	0x40000400
 8009204:	58020800 	.word	0x58020800

08009208 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800920c:	4b22      	ldr	r3, [pc, #136]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 800920e:	4a23      	ldr	r2, [pc, #140]	@ (800929c <MX_USART1_UART_Init+0x94>)
 8009210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009212:	4b21      	ldr	r3, [pc, #132]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800921a:	4b1f      	ldr	r3, [pc, #124]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 800921c:	2200      	movs	r2, #0
 800921e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009220:	4b1d      	ldr	r3, [pc, #116]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009222:	2200      	movs	r2, #0
 8009224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009226:	4b1c      	ldr	r3, [pc, #112]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009228:	2200      	movs	r2, #0
 800922a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800922c:	4b1a      	ldr	r3, [pc, #104]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 800922e:	220c      	movs	r2, #12
 8009230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009232:	4b19      	ldr	r3, [pc, #100]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009234:	2200      	movs	r2, #0
 8009236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009238:	4b17      	ldr	r3, [pc, #92]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 800923a:	2200      	movs	r2, #0
 800923c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800923e:	4b16      	ldr	r3, [pc, #88]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009240:	2200      	movs	r2, #0
 8009242:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009244:	4b14      	ldr	r3, [pc, #80]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009246:	2200      	movs	r2, #0
 8009248:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800924a:	4b13      	ldr	r3, [pc, #76]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 800924c:	2200      	movs	r2, #0
 800924e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009250:	4811      	ldr	r0, [pc, #68]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009252:	f00e fde7 	bl	8017e24 <HAL_UART_Init>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800925c:	f7fe fde4 	bl	8007e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009260:	2100      	movs	r1, #0
 8009262:	480d      	ldr	r0, [pc, #52]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009264:	f011 fc97 	bl	801ab96 <HAL_UARTEx_SetTxFifoThreshold>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800926e:	f7fe fddb 	bl	8007e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009272:	2100      	movs	r1, #0
 8009274:	4808      	ldr	r0, [pc, #32]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009276:	f011 fccc 	bl	801ac12 <HAL_UARTEx_SetRxFifoThreshold>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009280:	f7fe fdd2 	bl	8007e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009284:	4804      	ldr	r0, [pc, #16]	@ (8009298 <MX_USART1_UART_Init+0x90>)
 8009286:	f011 fc4d 	bl	801ab24 <HAL_UARTEx_DisableFifoMode>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009290:	f7fe fdca 	bl	8007e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009294:	bf00      	nop
 8009296:	bd80      	pop	{r7, pc}
 8009298:	240004b0 	.word	0x240004b0
 800929c:	40011000 	.word	0x40011000

080092a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b0b8      	sub	sp, #224	@ 0xe0
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	605a      	str	r2, [r3, #4]
 80092b2:	609a      	str	r2, [r3, #8]
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80092b8:	f107 0310 	add.w	r3, r7, #16
 80092bc:	22b8      	movs	r2, #184	@ 0xb8
 80092be:	2100      	movs	r1, #0
 80092c0:	4618      	mov	r0, r3
 80092c2:	f014 fee7 	bl	801e094 <memset>
  if(uartHandle->Instance==USART1)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009378 <HAL_UART_MspInit+0xd8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d14e      	bne.n	800936e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80092d0:	f04f 0201 	mov.w	r2, #1
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80092dc:	2300      	movs	r3, #0
 80092de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80092e2:	f107 0310 	add.w	r3, r7, #16
 80092e6:	4618      	mov	r0, r3
 80092e8:	f008 fe96 	bl	8012018 <HAL_RCCEx_PeriphCLKConfig>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80092f2:	f7fe fd99 	bl	8007e28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80092f6:	4b21      	ldr	r3, [pc, #132]	@ (800937c <HAL_UART_MspInit+0xdc>)
 80092f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092fc:	4a1f      	ldr	r2, [pc, #124]	@ (800937c <HAL_UART_MspInit+0xdc>)
 80092fe:	f043 0310 	orr.w	r3, r3, #16
 8009302:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009306:	4b1d      	ldr	r3, [pc, #116]	@ (800937c <HAL_UART_MspInit+0xdc>)
 8009308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009314:	4b19      	ldr	r3, [pc, #100]	@ (800937c <HAL_UART_MspInit+0xdc>)
 8009316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800931a:	4a18      	ldr	r2, [pc, #96]	@ (800937c <HAL_UART_MspInit+0xdc>)
 800931c:	f043 0301 	orr.w	r3, r3, #1
 8009320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009324:	4b15      	ldr	r3, [pc, #84]	@ (800937c <HAL_UART_MspInit+0xdc>)
 8009326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009332:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009336:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933a:	2302      	movs	r3, #2
 800933c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009340:	2300      	movs	r3, #0
 8009342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009346:	2300      	movs	r3, #0
 8009348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800934c:	2307      	movs	r3, #7
 800934e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009352:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009356:	4619      	mov	r1, r3
 8009358:	4809      	ldr	r0, [pc, #36]	@ (8009380 <HAL_UART_MspInit+0xe0>)
 800935a:	f005 f84b 	bl	800e3f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	2025      	movs	r0, #37	@ 0x25
 8009364:	f002 f947 	bl	800b5f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009368:	2025      	movs	r0, #37	@ 0x25
 800936a:	f002 f95e 	bl	800b62a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800936e:	bf00      	nop
 8009370:	37e0      	adds	r7, #224	@ 0xe0
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	40011000 	.word	0x40011000
 800937c:	58024400 	.word	0x58024400
 8009380:	58020000 	.word	0x58020000

08009384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80093bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009388:	f7ff fbe6 	bl	8008b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800938c:	480c      	ldr	r0, [pc, #48]	@ (80093c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800938e:	490d      	ldr	r1, [pc, #52]	@ (80093c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009390:	4a0d      	ldr	r2, [pc, #52]	@ (80093c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009394:	e002      	b.n	800939c <LoopCopyDataInit>

08009396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800939a:	3304      	adds	r3, #4

0800939c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800939c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800939e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80093a0:	d3f9      	bcc.n	8009396 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80093a2:	4a0a      	ldr	r2, [pc, #40]	@ (80093cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80093a4:	4c0a      	ldr	r4, [pc, #40]	@ (80093d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80093a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80093a8:	e001      	b.n	80093ae <LoopFillZerobss>

080093aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80093aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80093ac:	3204      	adds	r2, #4

080093ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80093ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80093b0:	d3fb      	bcc.n	80093aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80093b2:	f014 fe7d 	bl	801e0b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80093b6:	f7fb fde7 	bl	8004f88 <main>
  bx  lr
 80093ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80093bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80093c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80093c4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80093c8:	08020918 	.word	0x08020918
  ldr r2, =_sbss
 80093cc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80093d0:	240008ac 	.word	0x240008ac

080093d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093d4:	e7fe      	b.n	80093d4 <ADC3_IRQHandler>
	...

080093d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093de:	2003      	movs	r0, #3
 80093e0:	f002 f8fe 	bl	800b5e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093e4:	f008 fc42 	bl	8011c6c <HAL_RCC_GetSysClockFreq>
 80093e8:	4602      	mov	r2, r0
 80093ea:	4b15      	ldr	r3, [pc, #84]	@ (8009440 <HAL_Init+0x68>)
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	f003 030f 	and.w	r3, r3, #15
 80093f4:	4913      	ldr	r1, [pc, #76]	@ (8009444 <HAL_Init+0x6c>)
 80093f6:	5ccb      	ldrb	r3, [r1, r3]
 80093f8:	f003 031f 	and.w	r3, r3, #31
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009402:	4b0f      	ldr	r3, [pc, #60]	@ (8009440 <HAL_Init+0x68>)
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	4a0e      	ldr	r2, [pc, #56]	@ (8009444 <HAL_Init+0x6c>)
 800940c:	5cd3      	ldrb	r3, [r2, r3]
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	4a0b      	ldr	r2, [pc, #44]	@ (8009448 <HAL_Init+0x70>)
 800941a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800941c:	4a0b      	ldr	r2, [pc, #44]	@ (800944c <HAL_Init+0x74>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009422:	200f      	movs	r0, #15
 8009424:	f000 f814 	bl	8009450 <HAL_InitTick>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e002      	b.n	8009438 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009432:	f7fe febb 	bl	80081ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	58024400 	.word	0x58024400
 8009444:	0801eb5c 	.word	0x0801eb5c
 8009448:	24000008 	.word	0x24000008
 800944c:	24000004 	.word	0x24000004

08009450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009458:	4b15      	ldr	r3, [pc, #84]	@ (80094b0 <HAL_InitTick+0x60>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e021      	b.n	80094a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009464:	4b13      	ldr	r3, [pc, #76]	@ (80094b4 <HAL_InitTick+0x64>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	4b11      	ldr	r3, [pc, #68]	@ (80094b0 <HAL_InitTick+0x60>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	4619      	mov	r1, r3
 800946e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009472:	fbb3 f3f1 	udiv	r3, r3, r1
 8009476:	fbb2 f3f3 	udiv	r3, r2, r3
 800947a:	4618      	mov	r0, r3
 800947c:	f002 f8e3 	bl	800b646 <HAL_SYSTICK_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e00e      	b.n	80094a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b0f      	cmp	r3, #15
 800948e:	d80a      	bhi.n	80094a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009490:	2200      	movs	r2, #0
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	f002 f8ad 	bl	800b5f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800949c:	4a06      	ldr	r2, [pc, #24]	@ (80094b8 <HAL_InitTick+0x68>)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e000      	b.n	80094a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	24000010 	.word	0x24000010
 80094b4:	24000004 	.word	0x24000004
 80094b8:	2400000c 	.word	0x2400000c

080094bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80094c0:	4b06      	ldr	r3, [pc, #24]	@ (80094dc <HAL_IncTick+0x20>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <HAL_IncTick+0x24>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4413      	add	r3, r2
 80094cc:	4a04      	ldr	r2, [pc, #16]	@ (80094e0 <HAL_IncTick+0x24>)
 80094ce:	6013      	str	r3, [r2, #0]
}
 80094d0:	bf00      	nop
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	24000010 	.word	0x24000010
 80094e0:	24000544 	.word	0x24000544

080094e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return uwTick;
 80094e8:	4b03      	ldr	r3, [pc, #12]	@ (80094f8 <HAL_GetTick+0x14>)
 80094ea:	681b      	ldr	r3, [r3, #0]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	24000544 	.word	0x24000544

080094fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009504:	f7ff ffee 	bl	80094e4 <HAL_GetTick>
 8009508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009514:	d005      	beq.n	8009522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009516:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <HAL_Delay+0x44>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009522:	bf00      	nop
 8009524:	f7ff ffde 	bl	80094e4 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	429a      	cmp	r2, r3
 8009532:	d8f7      	bhi.n	8009524 <HAL_Delay+0x28>
  {
  }
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	24000010 	.word	0x24000010

08009544 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	609a      	str	r2, [r3, #8]
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	609a      	str	r2, [r3, #8]
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a18      	ldr	r2, [pc, #96]	@ (800961c <LL_ADC_SetChannelPreselection+0x70>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d027      	beq.n	800960e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d107      	bne.n	80095d8 <LL_ADC_SetChannelPreselection+0x2c>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	0e9b      	lsrs	r3, r3, #26
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2201      	movs	r2, #1
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	e015      	b.n	8009604 <LL_ADC_SetChannelPreselection+0x58>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	fa93 f3a3 	rbit	r3, r3
 80095e2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80095ee:	2320      	movs	r3, #32
 80095f0:	e003      	b.n	80095fa <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	fab3 f383 	clz	r3, r3
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 031f 	and.w	r3, r3, #31
 80095fe:	2201      	movs	r2, #1
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	69d2      	ldr	r2, [r2, #28]
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	58026000 	.word	0x58026000

08009620 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3360      	adds	r3, #96	@ 0x60
 8009632:	461a      	mov	r2, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4a10      	ldr	r2, [pc, #64]	@ (8009680 <LL_ADC_SetOffset+0x60>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d10b      	bne.n	800965c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	4313      	orrs	r3, r2
 8009652:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800965a:	e00b      	b.n	8009674 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	430b      	orrs	r3, r1
 800966e:	431a      	orrs	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	601a      	str	r2, [r3, #0]
}
 8009674:	bf00      	nop
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	58026000 	.word	0x58026000

08009684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3360      	adds	r3, #96	@ 0x60
 8009692:	461a      	mov	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f003 031f 	and.w	r3, r3, #31
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	fa01 f303 	lsl.w	r3, r1, r3
 80096d0:	431a      	orrs	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	611a      	str	r2, [r3, #16]
}
 80096d6:	bf00      	nop
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
	...

080096e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009724 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d00e      	beq.n	8009716 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3360      	adds	r3, #96	@ 0x60
 80096fc:	461a      	mov	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	431a      	orrs	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	601a      	str	r2, [r3, #0]
  }
}
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	58026000 	.word	0x58026000

08009728 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4a0c      	ldr	r2, [pc, #48]	@ (8009768 <LL_ADC_SetOffsetSaturation+0x40>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d10e      	bne.n	800975a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3360      	adds	r3, #96	@ 0x60
 8009740:	461a      	mov	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	431a      	orrs	r2, r3
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	58026000 	.word	0x58026000

0800976c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4a0c      	ldr	r2, [pc, #48]	@ (80097ac <LL_ADC_SetOffsetSign+0x40>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10e      	bne.n	800979e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3360      	adds	r3, #96	@ 0x60
 8009784:	461a      	mov	r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	431a      	orrs	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800979e:	bf00      	nop
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	58026000 	.word	0x58026000

080097b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3360      	adds	r3, #96	@ 0x60
 80097c0:	461a      	mov	r2, r3
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <LL_ADC_SetOffsetState+0x50>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d108      	bne.n	80097e4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	431a      	orrs	r2, r3
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80097e2:	e007      	b.n	80097f4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	431a      	orrs	r2, r3
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	601a      	str	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	371c      	adds	r7, #28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	58026000 	.word	0x58026000

08009804 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800982a:	b480      	push	{r7}
 800982c:	b087      	sub	sp, #28
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	60b9      	str	r1, [r7, #8]
 8009834:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3330      	adds	r3, #48	@ 0x30
 800983a:	461a      	mov	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	f003 030c 	and.w	r3, r3, #12
 8009846:	4413      	add	r3, r2
 8009848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	211f      	movs	r1, #31
 8009856:	fa01 f303 	lsl.w	r3, r1, r3
 800985a:	43db      	mvns	r3, r3
 800985c:	401a      	ands	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	0e9b      	lsrs	r3, r3, #26
 8009862:	f003 011f 	and.w	r1, r3, #31
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f003 031f 	and.w	r3, r3, #31
 800986c:	fa01 f303 	lsl.w	r3, r1, r3
 8009870:	431a      	orrs	r2, r3
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009876:	bf00      	nop
 8009878:	371c      	adds	r7, #28
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f023 0203 	bic.w	r2, r3, #3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f043 0201 	orr.w	r2, r3, #1
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	60da      	str	r2, [r3, #12]
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a08      	ldr	r2, [pc, #32]	@ (80098f8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d107      	bne.n	80098ea <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f023 0203 	bic.w	r2, r3, #3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60da      	str	r2, [r3, #12]
  }
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	58026000 	.word	0x58026000

080098fc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009908:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009910:	2301      	movs	r3, #1
 8009912:	e000      	b.n	8009916 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009922:	b480      	push	{r7}
 8009924:	b087      	sub	sp, #28
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3314      	adds	r3, #20
 8009932:	461a      	mov	r2, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	0e5b      	lsrs	r3, r3, #25
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	4413      	add	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	0d1b      	lsrs	r3, r3, #20
 800994a:	f003 031f 	and.w	r3, r3, #31
 800994e:	2107      	movs	r1, #7
 8009950:	fa01 f303 	lsl.w	r3, r1, r3
 8009954:	43db      	mvns	r3, r3
 8009956:	401a      	ands	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	0d1b      	lsrs	r3, r3, #20
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	431a      	orrs	r2, r3
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4a1a      	ldr	r2, [pc, #104]	@ (80099f0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d115      	bne.n	80099b8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009998:	43db      	mvns	r3, r3
 800999a:	401a      	ands	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f003 0318 	and.w	r3, r3, #24
 80099a2:	4914      	ldr	r1, [pc, #80]	@ (80099f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80099a4:	40d9      	lsrs	r1, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	400b      	ands	r3, r1
 80099aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099ae:	431a      	orrs	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80099b6:	e014      	b.n	80099e2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c4:	43db      	mvns	r3, r3
 80099c6:	401a      	ands	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f003 0318 	and.w	r3, r3, #24
 80099ce:	4909      	ldr	r1, [pc, #36]	@ (80099f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80099d0:	40d9      	lsrs	r1, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	400b      	ands	r3, r1
 80099d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099da:	431a      	orrs	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80099e2:	bf00      	nop
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	58026000 	.word	0x58026000
 80099f4:	000fffff 	.word	0x000fffff

080099f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 031f 	and.w	r3, r3, #31
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	4b04      	ldr	r3, [pc, #16]	@ (8009a50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009a3e:	4013      	ands	r3, r2
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	6093      	str	r3, [r2, #8]
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	5fffffc0 	.word	0x5fffffc0

08009a54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a68:	d101      	bne.n	8009a6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	4b05      	ldr	r3, [pc, #20]	@ (8009aa0 <LL_ADC_EnableInternalRegulator+0x24>)
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	6fffffc0 	.word	0x6fffffc0

08009aa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ab8:	d101      	bne.n	8009abe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	4b05      	ldr	r3, [pc, #20]	@ (8009af0 <LL_ADC_Enable+0x24>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	f043 0201 	orr.w	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	7fffffc0 	.word	0x7fffffc0

08009af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d101      	bne.n	8009b0c <LL_ADC_IsEnabled+0x18>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e000      	b.n	8009b0e <LL_ADC_IsEnabled+0x1a>
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
	...

08009b1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	4b05      	ldr	r3, [pc, #20]	@ (8009b40 <LL_ADC_REG_StartConversion+0x24>)
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	f043 0204 	orr.w	r2, r3, #4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	7fffffc0 	.word	0x7fffffc0

08009b44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d101      	bne.n	8009b5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e000      	b.n	8009b5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b08      	cmp	r3, #8
 8009b7c:	d101      	bne.n	8009b82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e000      	b.n	8009b84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009b90:	b590      	push	{r4, r7, lr}
 8009b92:	b089      	sub	sp, #36	@ 0x24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e1ee      	b.n	8009f88 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7f9 fd15 	bl	80035e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff ff3f 	bl	8009a54 <LL_ADC_IsDeepPowerDownEnabled>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d004      	beq.n	8009be6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff ff25 	bl	8009a30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff ff5a 	bl	8009aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d114      	bne.n	8009c20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7ff ff3e 	bl	8009a7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c00:	4b8e      	ldr	r3, [pc, #568]	@ (8009e3c <HAL_ADC_Init+0x2ac>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	099b      	lsrs	r3, r3, #6
 8009c06:	4a8e      	ldr	r2, [pc, #568]	@ (8009e40 <HAL_ADC_Init+0x2b0>)
 8009c08:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0c:	099b      	lsrs	r3, r3, #6
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c12:	e002      	b.n	8009c1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	3b01      	subs	r3, #1
 8009c18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1f9      	bne.n	8009c14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff ff3d 	bl	8009aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10d      	bne.n	8009c4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c34:	f043 0210 	orr.w	r2, r3, #16
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c40:	f043 0201 	orr.w	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff ff77 	bl	8009b44 <LL_ADC_REG_IsConversionOngoing>
 8009c56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f040 8188 	bne.w	8009f76 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f040 8184 	bne.w	8009f76 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c72:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009c76:	f043 0202 	orr.w	r2, r3, #2
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff ff36 	bl	8009af4 <LL_ADC_IsEnabled>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d136      	bne.n	8009cfc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a6c      	ldr	r2, [pc, #432]	@ (8009e44 <HAL_ADC_Init+0x2b4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d004      	beq.n	8009ca2 <HAL_ADC_Init+0x112>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8009e48 <HAL_ADC_Init+0x2b8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d10e      	bne.n	8009cc0 <HAL_ADC_Init+0x130>
 8009ca2:	4868      	ldr	r0, [pc, #416]	@ (8009e44 <HAL_ADC_Init+0x2b4>)
 8009ca4:	f7ff ff26 	bl	8009af4 <LL_ADC_IsEnabled>
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4867      	ldr	r0, [pc, #412]	@ (8009e48 <HAL_ADC_Init+0x2b8>)
 8009cac:	f7ff ff22 	bl	8009af4 <LL_ADC_IsEnabled>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4323      	orrs	r3, r4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	e008      	b.n	8009cd2 <HAL_ADC_Init+0x142>
 8009cc0:	4862      	ldr	r0, [pc, #392]	@ (8009e4c <HAL_ADC_Init+0x2bc>)
 8009cc2:	f7ff ff17 	bl	8009af4 <LL_ADC_IsEnabled>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bf0c      	ite	eq
 8009ccc:	2301      	moveq	r3, #1
 8009cce:	2300      	movne	r3, #0
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d012      	beq.n	8009cfc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a5a      	ldr	r2, [pc, #360]	@ (8009e44 <HAL_ADC_Init+0x2b4>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d004      	beq.n	8009cea <HAL_ADC_Init+0x15a>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a58      	ldr	r2, [pc, #352]	@ (8009e48 <HAL_ADC_Init+0x2b8>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d101      	bne.n	8009cee <HAL_ADC_Init+0x15e>
 8009cea:	4a59      	ldr	r2, [pc, #356]	@ (8009e50 <HAL_ADC_Init+0x2c0>)
 8009cec:	e000      	b.n	8009cf0 <HAL_ADC_Init+0x160>
 8009cee:	4a59      	ldr	r2, [pc, #356]	@ (8009e54 <HAL_ADC_Init+0x2c4>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7ff fc24 	bl	8009544 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a52      	ldr	r2, [pc, #328]	@ (8009e4c <HAL_ADC_Init+0x2bc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d129      	bne.n	8009d5a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	7e5b      	ldrb	r3, [r3, #25]
 8009d0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d10:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009d16:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d013      	beq.n	8009d48 <HAL_ADC_Init+0x1b8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d00d      	beq.n	8009d44 <HAL_ADC_Init+0x1b4>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b1c      	cmp	r3, #28
 8009d2e:	d007      	beq.n	8009d40 <HAL_ADC_Init+0x1b0>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b18      	cmp	r3, #24
 8009d36:	d101      	bne.n	8009d3c <HAL_ADC_Init+0x1ac>
 8009d38:	2318      	movs	r3, #24
 8009d3a:	e006      	b.n	8009d4a <HAL_ADC_Init+0x1ba>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e004      	b.n	8009d4a <HAL_ADC_Init+0x1ba>
 8009d40:	2310      	movs	r3, #16
 8009d42:	e002      	b.n	8009d4a <HAL_ADC_Init+0x1ba>
 8009d44:	2308      	movs	r3, #8
 8009d46:	e000      	b.n	8009d4a <HAL_ADC_Init+0x1ba>
 8009d48:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009d4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d54:	4313      	orrs	r3, r2
 8009d56:	61bb      	str	r3, [r7, #24]
 8009d58:	e00e      	b.n	8009d78 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	7e5b      	ldrb	r3, [r3, #25]
 8009d5e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d64:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009d6a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d74:	4313      	orrs	r3, r2
 8009d76:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d106      	bne.n	8009d90 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d86:	3b01      	subs	r3, #1
 8009d88:	045b      	lsls	r3, r3, #17
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d009      	beq.n	8009dac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a26      	ldr	r2, [pc, #152]	@ (8009e4c <HAL_ADC_Init+0x2bc>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d115      	bne.n	8009de2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	4b26      	ldr	r3, [pc, #152]	@ (8009e58 <HAL_ADC_Init+0x2c8>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6812      	ldr	r2, [r2, #0]
 8009dc4:	69b9      	ldr	r1, [r7, #24]
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	611a      	str	r2, [r3, #16]
 8009de0:	e009      	b.n	8009df6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68da      	ldr	r2, [r3, #12]
 8009de8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e5c <HAL_ADC_Init+0x2cc>)
 8009dea:	4013      	ands	r3, r2
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	69b9      	ldr	r1, [r7, #24]
 8009df2:	430b      	orrs	r3, r1
 8009df4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fea2 	bl	8009b44 <LL_ADC_REG_IsConversionOngoing>
 8009e00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff feaf 	bl	8009b6a <LL_ADC_INJ_IsConversionOngoing>
 8009e0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f040 808e 	bne.w	8009f32 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f040 808a 	bne.w	8009f32 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a0a      	ldr	r2, [pc, #40]	@ (8009e4c <HAL_ADC_Init+0x2bc>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d11b      	bne.n	8009e60 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7e1b      	ldrb	r3, [r3, #24]
 8009e2c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e34:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009e36:	4313      	orrs	r3, r2
 8009e38:	61bb      	str	r3, [r7, #24]
 8009e3a:	e018      	b.n	8009e6e <HAL_ADC_Init+0x2de>
 8009e3c:	24000004 	.word	0x24000004
 8009e40:	053e2d63 	.word	0x053e2d63
 8009e44:	40022000 	.word	0x40022000
 8009e48:	40022100 	.word	0x40022100
 8009e4c:	58026000 	.word	0x58026000
 8009e50:	40022300 	.word	0x40022300
 8009e54:	58026300 	.word	0x58026300
 8009e58:	fff04007 	.word	0xfff04007
 8009e5c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7e1b      	ldrb	r3, [r3, #24]
 8009e64:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	4b46      	ldr	r3, [pc, #280]	@ (8009f90 <HAL_ADC_Init+0x400>)
 8009e76:	4013      	ands	r3, r2
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	69b9      	ldr	r1, [r7, #24]
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d137      	bne.n	8009efc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e90:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a3f      	ldr	r2, [pc, #252]	@ (8009f94 <HAL_ADC_Init+0x404>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d116      	bne.n	8009eca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8009f98 <HAL_ADC_Init+0x408>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009eae:	4311      	orrs	r1, r2
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009eb4:	4311      	orrs	r1, r2
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0201 	orr.w	r2, r2, #1
 8009ec6:	611a      	str	r2, [r3, #16]
 8009ec8:	e020      	b.n	8009f0c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691a      	ldr	r2, [r3, #16]
 8009ed0:	4b32      	ldr	r3, [pc, #200]	@ (8009f9c <HAL_ADC_Init+0x40c>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ed8:	3a01      	subs	r2, #1
 8009eda:	0411      	lsls	r1, r2, #16
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009ee0:	4311      	orrs	r1, r2
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ee6:	4311      	orrs	r1, r2
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009eec:	430a      	orrs	r2, r1
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f042 0201 	orr.w	r2, r2, #1
 8009ef8:	611a      	str	r2, [r3, #16]
 8009efa:	e007      	b.n	8009f0c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0201 	bic.w	r2, r2, #1
 8009f0a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1b      	ldr	r2, [pc, #108]	@ (8009f94 <HAL_ADC_Init+0x404>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d002      	beq.n	8009f32 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f967 	bl	800b200 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d10c      	bne.n	8009f54 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f40:	f023 010f 	bic.w	r1, r3, #15
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f52:	e007      	b.n	8009f64 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 020f 	bic.w	r2, r2, #15
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f68:	f023 0303 	bic.w	r3, r3, #3
 8009f6c:	f043 0201 	orr.w	r2, r3, #1
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	661a      	str	r2, [r3, #96]	@ 0x60
 8009f74:	e007      	b.n	8009f86 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f7a:	f043 0210 	orr.w	r2, r3, #16
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3724      	adds	r7, #36	@ 0x24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd90      	pop	{r4, r7, pc}
 8009f90:	ffffbffc 	.word	0xffffbffc
 8009f94:	58026000 	.word	0x58026000
 8009f98:	fc00f81f 	.word	0xfc00f81f
 8009f9c:	fc00f81e 	.word	0xfc00f81e

08009fa0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a60      	ldr	r2, [pc, #384]	@ (800a134 <HAL_ADC_Start_DMA+0x194>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <HAL_ADC_Start_DMA+0x20>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a5f      	ldr	r2, [pc, #380]	@ (800a138 <HAL_ADC_Start_DMA+0x198>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d101      	bne.n	8009fc4 <HAL_ADC_Start_DMA+0x24>
 8009fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800a13c <HAL_ADC_Start_DMA+0x19c>)
 8009fc2:	e000      	b.n	8009fc6 <HAL_ADC_Start_DMA+0x26>
 8009fc4:	4b5e      	ldr	r3, [pc, #376]	@ (800a140 <HAL_ADC_Start_DMA+0x1a0>)
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fd16 	bl	80099f8 <LL_ADC_GetMultimode>
 8009fcc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff fdb6 	bl	8009b44 <LL_ADC_REG_IsConversionOngoing>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 80a2 	bne.w	800a124 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_ADC_Start_DMA+0x4e>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e09d      	b.n	800a12a <HAL_ADC_Start_DMA+0x18a>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d006      	beq.n	800a00a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	d003      	beq.n	800a00a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b09      	cmp	r3, #9
 800a006:	f040 8086 	bne.w	800a116 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 ffda 	bl	800afc4 <ADC_Enable>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d178      	bne.n	800a10c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a01e:	4b49      	ldr	r3, [pc, #292]	@ (800a144 <HAL_ADC_Start_DMA+0x1a4>)
 800a020:	4013      	ands	r3, r2
 800a022:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a42      	ldr	r2, [pc, #264]	@ (800a138 <HAL_ADC_Start_DMA+0x198>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d002      	beq.n	800a03a <HAL_ADC_Start_DMA+0x9a>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	e000      	b.n	800a03c <HAL_ADC_Start_DMA+0x9c>
 800a03a:	4b3e      	ldr	r3, [pc, #248]	@ (800a134 <HAL_ADC_Start_DMA+0x194>)
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	6812      	ldr	r2, [r2, #0]
 800a040:	4293      	cmp	r3, r2
 800a042:	d002      	beq.n	800a04a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a04e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a05a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d006      	beq.n	800a070 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a066:	f023 0206 	bic.w	r2, r3, #6
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	665a      	str	r2, [r3, #100]	@ 0x64
 800a06e:	e002      	b.n	800a076 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a07a:	4a33      	ldr	r2, [pc, #204]	@ (800a148 <HAL_ADC_Start_DMA+0x1a8>)
 800a07c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a082:	4a32      	ldr	r2, [pc, #200]	@ (800a14c <HAL_ADC_Start_DMA+0x1ac>)
 800a084:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a08a:	4a31      	ldr	r2, [pc, #196]	@ (800a150 <HAL_ADC_Start_DMA+0x1b0>)
 800a08c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	221c      	movs	r2, #28
 800a094:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f042 0210 	orr.w	r2, r2, #16
 800a0ac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a28      	ldr	r2, [pc, #160]	@ (800a154 <HAL_ADC_Start_DMA+0x1b4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d10f      	bne.n	800a0d8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	f7ff fbfe 	bl	80098c8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff fbe9 	bl	80098a8 <LL_ADC_EnableDMAReq>
 800a0d6:	e007      	b.n	800a0e8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f7ff fbcd 	bl	8009882 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3340      	adds	r3, #64	@ 0x40
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f001 fe82 	bl	800be00 <HAL_DMA_Start_IT>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff fd09 	bl	8009b1c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a10a:	e00d      	b.n	800a128 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a114:	e008      	b.n	800a128 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a122:	e001      	b.n	800a128 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a124:	2302      	movs	r3, #2
 800a126:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	40022000 	.word	0x40022000
 800a138:	40022100 	.word	0x40022100
 800a13c:	40022300 	.word	0x40022300
 800a140:	58026300 	.word	0x58026300
 800a144:	fffff0fe 	.word	0xfffff0fe
 800a148:	0800b0d9 	.word	0x0800b0d9
 800a14c:	0800b1b1 	.word	0x0800b1b1
 800a150:	0800b1cd 	.word	0x0800b1cd
 800a154:	58026000 	.word	0x58026000

0800a158 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08a      	sub	sp, #40	@ 0x28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a160:	2300      	movs	r3, #0
 800a162:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a87      	ldr	r2, [pc, #540]	@ (800a398 <HAL_ADC_IRQHandler+0x240>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d004      	beq.n	800a188 <HAL_ADC_IRQHandler+0x30>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a86      	ldr	r2, [pc, #536]	@ (800a39c <HAL_ADC_IRQHandler+0x244>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d101      	bne.n	800a18c <HAL_ADC_IRQHandler+0x34>
 800a188:	4b85      	ldr	r3, [pc, #532]	@ (800a3a0 <HAL_ADC_IRQHandler+0x248>)
 800a18a:	e000      	b.n	800a18e <HAL_ADC_IRQHandler+0x36>
 800a18c:	4b85      	ldr	r3, [pc, #532]	@ (800a3a4 <HAL_ADC_IRQHandler+0x24c>)
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff fc32 	bl	80099f8 <LL_ADC_GetMultimode>
 800a194:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d017      	beq.n	800a1d0 <HAL_ADC_IRQHandler+0x78>
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d012      	beq.n	800a1d0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ae:	f003 0310 	and.w	r3, r3, #16
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 f932 	bl	800b42c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <HAL_ADC_IRQHandler+0x8c>
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10a      	bne.n	800a1fa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 8083 	beq.w	800a2f6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d07d      	beq.n	800a2f6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1fe:	f003 0310 	and.w	r3, r3, #16
 800a202:	2b00      	cmp	r3, #0
 800a204:	d105      	bne.n	800a212 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a20a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff faf4 	bl	8009804 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d062      	beq.n	800a2e8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a5d      	ldr	r2, [pc, #372]	@ (800a39c <HAL_ADC_IRQHandler+0x244>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d002      	beq.n	800a232 <HAL_ADC_IRQHandler+0xda>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	e000      	b.n	800a234 <HAL_ADC_IRQHandler+0xdc>
 800a232:	4b59      	ldr	r3, [pc, #356]	@ (800a398 <HAL_ADC_IRQHandler+0x240>)
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	4293      	cmp	r3, r2
 800a23a:	d008      	beq.n	800a24e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b05      	cmp	r3, #5
 800a246:	d002      	beq.n	800a24e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b09      	cmp	r3, #9
 800a24c:	d104      	bne.n	800a258 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	623b      	str	r3, [r7, #32]
 800a256:	e00c      	b.n	800a272 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a4f      	ldr	r2, [pc, #316]	@ (800a39c <HAL_ADC_IRQHandler+0x244>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d002      	beq.n	800a268 <HAL_ADC_IRQHandler+0x110>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	e000      	b.n	800a26a <HAL_ADC_IRQHandler+0x112>
 800a268:	4b4b      	ldr	r3, [pc, #300]	@ (800a398 <HAL_ADC_IRQHandler+0x240>)
 800a26a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d135      	bne.n	800a2e8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b08      	cmp	r3, #8
 800a288:	d12e      	bne.n	800a2e8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fc58 	bl	8009b44 <LL_ADC_REG_IsConversionOngoing>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d11a      	bne.n	800a2d0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 020c 	bic.w	r2, r2, #12
 800a2a8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d112      	bne.n	800a2e8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c6:	f043 0201 	orr.w	r2, r3, #1
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2ce:	e00b      	b.n	800a2e8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2d4:	f043 0210 	orr.w	r2, r3, #16
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e0:	f043 0201 	orr.w	r2, r3, #1
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f96f 	bl	800a5cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	220c      	movs	r2, #12
 800a2f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <HAL_ADC_IRQHandler+0x1b2>
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80a0 	beq.w	800a456 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 809a 	beq.w	800a456 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a326:	f003 0310 	and.w	r3, r3, #16
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d105      	bne.n	800a33a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a332:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fadc 	bl	80098fc <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a344:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fa5a 	bl	8009804 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a350:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a11      	ldr	r2, [pc, #68]	@ (800a39c <HAL_ADC_IRQHandler+0x244>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d002      	beq.n	800a362 <HAL_ADC_IRQHandler+0x20a>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	e000      	b.n	800a364 <HAL_ADC_IRQHandler+0x20c>
 800a362:	4b0d      	ldr	r3, [pc, #52]	@ (800a398 <HAL_ADC_IRQHandler+0x240>)
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	6812      	ldr	r2, [r2, #0]
 800a368:	4293      	cmp	r3, r2
 800a36a:	d008      	beq.n	800a37e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d005      	beq.n	800a37e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b06      	cmp	r3, #6
 800a376:	d002      	beq.n	800a37e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2b07      	cmp	r3, #7
 800a37c:	d104      	bne.n	800a388 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	623b      	str	r3, [r7, #32]
 800a386:	e014      	b.n	800a3b2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a03      	ldr	r2, [pc, #12]	@ (800a39c <HAL_ADC_IRQHandler+0x244>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d00a      	beq.n	800a3a8 <HAL_ADC_IRQHandler+0x250>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	e008      	b.n	800a3aa <HAL_ADC_IRQHandler+0x252>
 800a398:	40022000 	.word	0x40022000
 800a39c:	40022100 	.word	0x40022100
 800a3a0:	40022300 	.word	0x40022300
 800a3a4:	58026300 	.word	0x58026300
 800a3a8:	4b84      	ldr	r3, [pc, #528]	@ (800a5bc <HAL_ADC_IRQHandler+0x464>)
 800a3aa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d047      	beq.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d007      	beq.n	800a3d2 <HAL_ADC_IRQHandler+0x27a>
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d03f      	beq.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d13a      	bne.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3dc:	2b40      	cmp	r3, #64	@ 0x40
 800a3de:	d133      	bne.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d12e      	bne.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fbbb 	bl	8009b6a <LL_ADC_INJ_IsConversionOngoing>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d11a      	bne.n	800a430 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a408:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a40e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a41a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d112      	bne.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a426:	f043 0201 	orr.w	r2, r3, #1
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a42e:	e00b      	b.n	800a448 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a434:	f043 0210 	orr.w	r2, r3, #16
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a440:	f043 0201 	orr.w	r2, r3, #1
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 ffc7 	bl	800b3dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2260      	movs	r2, #96	@ 0x60
 800a454:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d011      	beq.n	800a484 <HAL_ADC_IRQHandler+0x32c>
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00c      	beq.n	800a484 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a46e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f8bc 	bl	800a5f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2280      	movs	r2, #128	@ 0x80
 800a482:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d012      	beq.n	800a4b4 <HAL_ADC_IRQHandler+0x35c>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00d      	beq.n	800a4b4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a49c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 ffad 	bl	800b404 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d012      	beq.n	800a4e4 <HAL_ADC_IRQHandler+0x38c>
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00d      	beq.n	800a4e4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 ff9f 	bl	800b418 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f003 0310 	and.w	r3, r3, #16
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d043      	beq.n	800a576 <HAL_ADC_IRQHandler+0x41e>
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	f003 0310 	and.w	r3, r3, #16
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d03e      	beq.n	800a576 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a500:	2301      	movs	r3, #1
 800a502:	627b      	str	r3, [r7, #36]	@ 0x24
 800a504:	e021      	b.n	800a54a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d015      	beq.n	800a538 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a2a      	ldr	r2, [pc, #168]	@ (800a5bc <HAL_ADC_IRQHandler+0x464>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <HAL_ADC_IRQHandler+0x3c8>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a29      	ldr	r2, [pc, #164]	@ (800a5c0 <HAL_ADC_IRQHandler+0x468>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d101      	bne.n	800a524 <HAL_ADC_IRQHandler+0x3cc>
 800a520:	4b28      	ldr	r3, [pc, #160]	@ (800a5c4 <HAL_ADC_IRQHandler+0x46c>)
 800a522:	e000      	b.n	800a526 <HAL_ADC_IRQHandler+0x3ce>
 800a524:	4b28      	ldr	r3, [pc, #160]	@ (800a5c8 <HAL_ADC_IRQHandler+0x470>)
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff fa74 	bl	8009a14 <LL_ADC_GetMultiDMATransfer>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00b      	beq.n	800a54a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a532:	2301      	movs	r3, #1
 800a534:	627b      	str	r3, [r7, #36]	@ 0x24
 800a536:	e008      	b.n	800a54a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a546:	2301      	movs	r3, #1
 800a548:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d10e      	bne.n	800a56e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a554:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a560:	f043 0202 	orr.w	r2, r3, #2
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f84d 	bl	800a608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2210      	movs	r2, #16
 800a574:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d018      	beq.n	800a5b2 <HAL_ADC_IRQHandler+0x45a>
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a586:	2b00      	cmp	r3, #0
 800a588:	d013      	beq.n	800a5b2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a58e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a59a:	f043 0208 	orr.w	r2, r3, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a5aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 ff1f 	bl	800b3f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a5b2:	bf00      	nop
 800a5b4:	3728      	adds	r7, #40	@ 0x28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	40022000 	.word	0x40022000
 800a5c0:	40022100 	.word	0x40022100
 800a5c4:	40022300 	.word	0x40022300
 800a5c8:	58026300 	.word	0x58026300

0800a5cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b0a5      	sub	sp, #148	@ 0x94
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a636:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	4aa4      	ldr	r2, [pc, #656]	@ (800a8d0 <HAL_ADC_ConfigChannel+0x2b4>)
 800a63e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d102      	bne.n	800a650 <HAL_ADC_ConfigChannel+0x34>
 800a64a:	2302      	movs	r3, #2
 800a64c:	f000 bca2 	b.w	800af94 <HAL_ADC_ConfigChannel+0x978>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fa71 	bl	8009b44 <LL_ADC_REG_IsConversionOngoing>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	f040 8486 	bne.w	800af76 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	db31      	blt.n	800a6d6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a97      	ldr	r2, [pc, #604]	@ (800a8d4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d02c      	beq.n	800a6d6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a684:	2b00      	cmp	r3, #0
 800a686:	d108      	bne.n	800a69a <HAL_ADC_ConfigChannel+0x7e>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	0e9b      	lsrs	r3, r3, #26
 800a68e:	f003 031f 	and.w	r3, r3, #31
 800a692:	2201      	movs	r2, #1
 800a694:	fa02 f303 	lsl.w	r3, r2, r3
 800a698:	e016      	b.n	800a6c8 <HAL_ADC_ConfigChannel+0xac>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6a2:	fa93 f3a3 	rbit	r3, r3
 800a6a6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a6a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6aa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a6ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a6b2:	2320      	movs	r3, #32
 800a6b4:	e003      	b.n	800a6be <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a6b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6b8:	fab3 f383 	clz	r3, r3
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6812      	ldr	r2, [r2, #0]
 800a6cc:	69d1      	ldr	r1, [r2, #28]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	6812      	ldr	r2, [r2, #0]
 800a6d2:	430b      	orrs	r3, r1
 800a6d4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f7ff f8a1 	bl	800982a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fa29 	bl	8009b44 <LL_ADC_REG_IsConversionOngoing>
 800a6f2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fa35 	bl	8009b6a <LL_ADC_INJ_IsConversionOngoing>
 800a700:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a704:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f040 824a 	bne.w	800aba2 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a70e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a712:	2b00      	cmp	r3, #0
 800a714:	f040 8245 	bne.w	800aba2 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	461a      	mov	r2, r3
 800a726:	f7ff f8fc 	bl	8009922 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a69      	ldr	r2, [pc, #420]	@ (800a8d4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d10d      	bne.n	800a750 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	695a      	ldr	r2, [r3, #20]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	08db      	lsrs	r3, r3, #3
 800a740:	f003 0303 	and.w	r3, r3, #3
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	fa02 f303 	lsl.w	r3, r2, r3
 800a74a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a74e:	e032      	b.n	800a7b6 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a750:	4b61      	ldr	r3, [pc, #388]	@ (800a8d8 <HAL_ADC_ConfigChannel+0x2bc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a75c:	d10b      	bne.n	800a776 <HAL_ADC_ConfigChannel+0x15a>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	695a      	ldr	r2, [r3, #20]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	089b      	lsrs	r3, r3, #2
 800a76a:	f003 0307 	and.w	r3, r3, #7
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	fa02 f303 	lsl.w	r3, r2, r3
 800a774:	e01d      	b.n	800a7b2 <HAL_ADC_ConfigChannel+0x196>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0310 	and.w	r3, r3, #16
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10b      	bne.n	800a79c <HAL_ADC_ConfigChannel+0x180>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	695a      	ldr	r2, [r3, #20]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	089b      	lsrs	r3, r3, #2
 800a790:	f003 0307 	and.w	r3, r3, #7
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	fa02 f303 	lsl.w	r3, r2, r3
 800a79a:	e00a      	b.n	800a7b2 <HAL_ADC_ConfigChannel+0x196>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	695a      	ldr	r2, [r3, #20]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	089b      	lsrs	r3, r3, #2
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d048      	beq.n	800a850 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6919      	ldr	r1, [r3, #16]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7ce:	f7fe ff27 	bl	8009620 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a3f      	ldr	r2, [pc, #252]	@ (800a8d4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d119      	bne.n	800a810 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	6919      	ldr	r1, [r3, #16]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	f7fe ffbf 	bl	800976c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6919      	ldr	r1, [r3, #16]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d102      	bne.n	800a806 <HAL_ADC_ConfigChannel+0x1ea>
 800a800:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a804:	e000      	b.n	800a808 <HAL_ADC_ConfigChannel+0x1ec>
 800a806:	2300      	movs	r3, #0
 800a808:	461a      	mov	r2, r3
 800a80a:	f7fe ff8d 	bl	8009728 <LL_ADC_SetOffsetSaturation>
 800a80e:	e1c8      	b.n	800aba2 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	6919      	ldr	r1, [r3, #16]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d102      	bne.n	800a828 <HAL_ADC_ConfigChannel+0x20c>
 800a822:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a826:	e000      	b.n	800a82a <HAL_ADC_ConfigChannel+0x20e>
 800a828:	2300      	movs	r3, #0
 800a82a:	461a      	mov	r2, r3
 800a82c:	f7fe ff5a 	bl	80096e4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	6919      	ldr	r1, [r3, #16]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	7e1b      	ldrb	r3, [r3, #24]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d102      	bne.n	800a846 <HAL_ADC_ConfigChannel+0x22a>
 800a840:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a844:	e000      	b.n	800a848 <HAL_ADC_ConfigChannel+0x22c>
 800a846:	2300      	movs	r3, #0
 800a848:	461a      	mov	r2, r3
 800a84a:	f7fe ff31 	bl	80096b0 <LL_ADC_SetDataRightShift>
 800a84e:	e1a8      	b.n	800aba2 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a856:	4293      	cmp	r3, r2
 800a858:	f040 815b 	bne.w	800ab12 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe ff0e 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a868:	4603      	mov	r3, r0
 800a86a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <HAL_ADC_ConfigChannel+0x26c>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2100      	movs	r1, #0
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe ff03 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a87e:	4603      	mov	r3, r0
 800a880:	0e9b      	lsrs	r3, r3, #26
 800a882:	f003 021f 	and.w	r2, r3, #31
 800a886:	e017      	b.n	800a8b8 <HAL_ADC_ConfigChannel+0x29c>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2100      	movs	r1, #0
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fef8 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a894:	4603      	mov	r3, r0
 800a896:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a89a:	fa93 f3a3 	rbit	r3, r3
 800a89e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a8a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a8a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a8aa:	2320      	movs	r3, #32
 800a8ac:	e003      	b.n	800a8b6 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a8ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8b0:	fab3 f383 	clz	r3, r3
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <HAL_ADC_ConfigChannel+0x2c0>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	0e9b      	lsrs	r3, r3, #26
 800a8ca:	f003 031f 	and.w	r3, r3, #31
 800a8ce:	e017      	b.n	800a900 <HAL_ADC_ConfigChannel+0x2e4>
 800a8d0:	47ff0000 	.word	0x47ff0000
 800a8d4:	58026000 	.word	0x58026000
 800a8d8:	5c001000 	.word	0x5c001000
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e4:	fa93 f3a3 	rbit	r3, r3
 800a8e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a8ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a8ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	e003      	b.n	800a900 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a8f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8fa:	fab3 f383 	clz	r3, r3
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	429a      	cmp	r2, r3
 800a902:	d106      	bne.n	800a912 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2200      	movs	r2, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe ff4f 	bl	80097b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2101      	movs	r1, #1
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fe feb3 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a91e:	4603      	mov	r3, r0
 800a920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <HAL_ADC_ConfigChannel+0x322>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2101      	movs	r1, #1
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe fea8 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a934:	4603      	mov	r3, r0
 800a936:	0e9b      	lsrs	r3, r3, #26
 800a938:	f003 021f 	and.w	r2, r3, #31
 800a93c:	e017      	b.n	800a96e <HAL_ADC_ConfigChannel+0x352>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2101      	movs	r1, #1
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fe9d 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a94a:	4603      	mov	r3, r0
 800a94c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a94e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a950:	fa93 f3a3 	rbit	r3, r3
 800a954:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a958:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a95a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a960:	2320      	movs	r3, #32
 800a962:	e003      	b.n	800a96c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a966:	fab3 f383 	clz	r3, r3
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <HAL_ADC_ConfigChannel+0x36a>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	0e9b      	lsrs	r3, r3, #26
 800a980:	f003 031f 	and.w	r3, r3, #31
 800a984:	e011      	b.n	800a9aa <HAL_ADC_ConfigChannel+0x38e>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98e:	fa93 f3a3 	rbit	r3, r3
 800a992:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a996:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800a99e:	2320      	movs	r3, #32
 800a9a0:	e003      	b.n	800a9aa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800a9a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9a4:	fab3 f383 	clz	r3, r3
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d106      	bne.n	800a9bc <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fefa 	bl	80097b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2102      	movs	r1, #2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fe5e 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <HAL_ADC_ConfigChannel+0x3cc>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2102      	movs	r1, #2
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe fe53 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	0e9b      	lsrs	r3, r3, #26
 800a9e2:	f003 021f 	and.w	r2, r3, #31
 800a9e6:	e017      	b.n	800aa18 <HAL_ADC_ConfigChannel+0x3fc>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2102      	movs	r1, #2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fe48 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	fa93 f3a3 	rbit	r3, r3
 800a9fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aa04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	e003      	b.n	800aa16 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa10:	fab3 f383 	clz	r3, r3
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	461a      	mov	r2, r3
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d105      	bne.n	800aa30 <HAL_ADC_ConfigChannel+0x414>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	0e9b      	lsrs	r3, r3, #26
 800aa2a:	f003 031f 	and.w	r3, r3, #31
 800aa2e:	e011      	b.n	800aa54 <HAL_ADC_ConfigChannel+0x438>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	fa93 f3a3 	rbit	r3, r3
 800aa3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa40:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aa48:	2320      	movs	r3, #32
 800aa4a:	e003      	b.n	800aa54 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	fab3 f383 	clz	r3, r3
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d106      	bne.n	800aa66 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2102      	movs	r1, #2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fea5 	bl	80097b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2103      	movs	r1, #3
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe fe09 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <HAL_ADC_ConfigChannel+0x476>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2103      	movs	r1, #3
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fdfe 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	0e9b      	lsrs	r3, r3, #26
 800aa8c:	f003 021f 	and.w	r2, r3, #31
 800aa90:	e017      	b.n	800aac2 <HAL_ADC_ConfigChannel+0x4a6>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2103      	movs	r1, #3
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fdf3 	bl	8009684 <LL_ADC_GetOffsetChannel>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	fa93 f3a3 	rbit	r3, r3
 800aaa8:	61fb      	str	r3, [r7, #28]
  return result;
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800aab4:	2320      	movs	r3, #32
 800aab6:	e003      	b.n	800aac0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	fab3 f383 	clz	r3, r3
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	461a      	mov	r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d105      	bne.n	800aada <HAL_ADC_ConfigChannel+0x4be>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	0e9b      	lsrs	r3, r3, #26
 800aad4:	f003 031f 	and.w	r3, r3, #31
 800aad8:	e011      	b.n	800aafe <HAL_ADC_ConfigChannel+0x4e2>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	fa93 f3a3 	rbit	r3, r3
 800aae6:	613b      	str	r3, [r7, #16]
  return result;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800aaf2:	2320      	movs	r3, #32
 800aaf4:	e003      	b.n	800aafe <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	fab3 f383 	clz	r3, r3
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d14f      	bne.n	800aba2 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2200      	movs	r2, #0
 800ab08:	2103      	movs	r1, #3
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fe50 	bl	80097b0 <LL_ADC_SetOffsetState>
 800ab10:	e047      	b.n	800aba2 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	069b      	lsls	r3, r3, #26
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d107      	bne.n	800ab36 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab34:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	069b      	lsls	r3, r3, #26
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d107      	bne.n	800ab5a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab58:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	069b      	lsls	r3, r3, #26
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d107      	bne.n	800ab7e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab7c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	069b      	lsls	r3, r3, #26
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d107      	bne.n	800aba2 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800aba0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe ffa4 	bl	8009af4 <LL_ADC_IsEnabled>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f040 81ea 	bne.w	800af88 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	6819      	ldr	r1, [r3, #0]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	461a      	mov	r2, r3
 800abc2:	f7fe fed9 	bl	8009978 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	4a7a      	ldr	r2, [pc, #488]	@ (800adb4 <HAL_ADC_ConfigChannel+0x798>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	f040 80e0 	bne.w	800ad92 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4977      	ldr	r1, [pc, #476]	@ (800adb8 <HAL_ADC_ConfigChannel+0x79c>)
 800abdc:	428b      	cmp	r3, r1
 800abde:	d147      	bne.n	800ac70 <HAL_ADC_ConfigChannel+0x654>
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4975      	ldr	r1, [pc, #468]	@ (800adbc <HAL_ADC_ConfigChannel+0x7a0>)
 800abe6:	428b      	cmp	r3, r1
 800abe8:	d040      	beq.n	800ac6c <HAL_ADC_ConfigChannel+0x650>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4974      	ldr	r1, [pc, #464]	@ (800adc0 <HAL_ADC_ConfigChannel+0x7a4>)
 800abf0:	428b      	cmp	r3, r1
 800abf2:	d039      	beq.n	800ac68 <HAL_ADC_ConfigChannel+0x64c>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4972      	ldr	r1, [pc, #456]	@ (800adc4 <HAL_ADC_ConfigChannel+0x7a8>)
 800abfa:	428b      	cmp	r3, r1
 800abfc:	d032      	beq.n	800ac64 <HAL_ADC_ConfigChannel+0x648>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4971      	ldr	r1, [pc, #452]	@ (800adc8 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac04:	428b      	cmp	r3, r1
 800ac06:	d02b      	beq.n	800ac60 <HAL_ADC_ConfigChannel+0x644>
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	496f      	ldr	r1, [pc, #444]	@ (800adcc <HAL_ADC_ConfigChannel+0x7b0>)
 800ac0e:	428b      	cmp	r3, r1
 800ac10:	d024      	beq.n	800ac5c <HAL_ADC_ConfigChannel+0x640>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	496e      	ldr	r1, [pc, #440]	@ (800add0 <HAL_ADC_ConfigChannel+0x7b4>)
 800ac18:	428b      	cmp	r3, r1
 800ac1a:	d01d      	beq.n	800ac58 <HAL_ADC_ConfigChannel+0x63c>
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	496c      	ldr	r1, [pc, #432]	@ (800add4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ac22:	428b      	cmp	r3, r1
 800ac24:	d016      	beq.n	800ac54 <HAL_ADC_ConfigChannel+0x638>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	496b      	ldr	r1, [pc, #428]	@ (800add8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ac2c:	428b      	cmp	r3, r1
 800ac2e:	d00f      	beq.n	800ac50 <HAL_ADC_ConfigChannel+0x634>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4969      	ldr	r1, [pc, #420]	@ (800addc <HAL_ADC_ConfigChannel+0x7c0>)
 800ac36:	428b      	cmp	r3, r1
 800ac38:	d008      	beq.n	800ac4c <HAL_ADC_ConfigChannel+0x630>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4968      	ldr	r1, [pc, #416]	@ (800ade0 <HAL_ADC_ConfigChannel+0x7c4>)
 800ac40:	428b      	cmp	r3, r1
 800ac42:	d101      	bne.n	800ac48 <HAL_ADC_ConfigChannel+0x62c>
 800ac44:	4b67      	ldr	r3, [pc, #412]	@ (800ade4 <HAL_ADC_ConfigChannel+0x7c8>)
 800ac46:	e0a0      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	e09e      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac4c:	4b66      	ldr	r3, [pc, #408]	@ (800ade8 <HAL_ADC_ConfigChannel+0x7cc>)
 800ac4e:	e09c      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac50:	4b66      	ldr	r3, [pc, #408]	@ (800adec <HAL_ADC_ConfigChannel+0x7d0>)
 800ac52:	e09a      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac54:	4b60      	ldr	r3, [pc, #384]	@ (800add8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ac56:	e098      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac58:	4b5e      	ldr	r3, [pc, #376]	@ (800add4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ac5a:	e096      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac5c:	4b64      	ldr	r3, [pc, #400]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ac5e:	e094      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac60:	4b64      	ldr	r3, [pc, #400]	@ (800adf4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ac62:	e092      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac64:	4b64      	ldr	r3, [pc, #400]	@ (800adf8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ac66:	e090      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac68:	4b64      	ldr	r3, [pc, #400]	@ (800adfc <HAL_ADC_ConfigChannel+0x7e0>)
 800ac6a:	e08e      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e08c      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4962      	ldr	r1, [pc, #392]	@ (800ae00 <HAL_ADC_ConfigChannel+0x7e4>)
 800ac76:	428b      	cmp	r3, r1
 800ac78:	d140      	bne.n	800acfc <HAL_ADC_ConfigChannel+0x6e0>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	494f      	ldr	r1, [pc, #316]	@ (800adbc <HAL_ADC_ConfigChannel+0x7a0>)
 800ac80:	428b      	cmp	r3, r1
 800ac82:	d039      	beq.n	800acf8 <HAL_ADC_ConfigChannel+0x6dc>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	494d      	ldr	r1, [pc, #308]	@ (800adc0 <HAL_ADC_ConfigChannel+0x7a4>)
 800ac8a:	428b      	cmp	r3, r1
 800ac8c:	d032      	beq.n	800acf4 <HAL_ADC_ConfigChannel+0x6d8>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	494c      	ldr	r1, [pc, #304]	@ (800adc4 <HAL_ADC_ConfigChannel+0x7a8>)
 800ac94:	428b      	cmp	r3, r1
 800ac96:	d02b      	beq.n	800acf0 <HAL_ADC_ConfigChannel+0x6d4>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	494a      	ldr	r1, [pc, #296]	@ (800adc8 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac9e:	428b      	cmp	r3, r1
 800aca0:	d024      	beq.n	800acec <HAL_ADC_ConfigChannel+0x6d0>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4949      	ldr	r1, [pc, #292]	@ (800adcc <HAL_ADC_ConfigChannel+0x7b0>)
 800aca8:	428b      	cmp	r3, r1
 800acaa:	d01d      	beq.n	800ace8 <HAL_ADC_ConfigChannel+0x6cc>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4947      	ldr	r1, [pc, #284]	@ (800add0 <HAL_ADC_ConfigChannel+0x7b4>)
 800acb2:	428b      	cmp	r3, r1
 800acb4:	d016      	beq.n	800ace4 <HAL_ADC_ConfigChannel+0x6c8>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4946      	ldr	r1, [pc, #280]	@ (800add4 <HAL_ADC_ConfigChannel+0x7b8>)
 800acbc:	428b      	cmp	r3, r1
 800acbe:	d00f      	beq.n	800ace0 <HAL_ADC_ConfigChannel+0x6c4>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4944      	ldr	r1, [pc, #272]	@ (800add8 <HAL_ADC_ConfigChannel+0x7bc>)
 800acc6:	428b      	cmp	r3, r1
 800acc8:	d008      	beq.n	800acdc <HAL_ADC_ConfigChannel+0x6c0>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4944      	ldr	r1, [pc, #272]	@ (800ade0 <HAL_ADC_ConfigChannel+0x7c4>)
 800acd0:	428b      	cmp	r3, r1
 800acd2:	d101      	bne.n	800acd8 <HAL_ADC_ConfigChannel+0x6bc>
 800acd4:	4b43      	ldr	r3, [pc, #268]	@ (800ade4 <HAL_ADC_ConfigChannel+0x7c8>)
 800acd6:	e058      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acd8:	2300      	movs	r3, #0
 800acda:	e056      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acdc:	4b43      	ldr	r3, [pc, #268]	@ (800adec <HAL_ADC_ConfigChannel+0x7d0>)
 800acde:	e054      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ace0:	4b3d      	ldr	r3, [pc, #244]	@ (800add8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ace2:	e052      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ace4:	4b3b      	ldr	r3, [pc, #236]	@ (800add4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ace6:	e050      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ace8:	4b41      	ldr	r3, [pc, #260]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7d4>)
 800acea:	e04e      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acec:	4b41      	ldr	r3, [pc, #260]	@ (800adf4 <HAL_ADC_ConfigChannel+0x7d8>)
 800acee:	e04c      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acf0:	4b41      	ldr	r3, [pc, #260]	@ (800adf8 <HAL_ADC_ConfigChannel+0x7dc>)
 800acf2:	e04a      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acf4:	4b41      	ldr	r3, [pc, #260]	@ (800adfc <HAL_ADC_ConfigChannel+0x7e0>)
 800acf6:	e048      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acf8:	2301      	movs	r3, #1
 800acfa:	e046      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4940      	ldr	r1, [pc, #256]	@ (800ae04 <HAL_ADC_ConfigChannel+0x7e8>)
 800ad02:	428b      	cmp	r3, r1
 800ad04:	d140      	bne.n	800ad88 <HAL_ADC_ConfigChannel+0x76c>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	492c      	ldr	r1, [pc, #176]	@ (800adbc <HAL_ADC_ConfigChannel+0x7a0>)
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	d039      	beq.n	800ad84 <HAL_ADC_ConfigChannel+0x768>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	492a      	ldr	r1, [pc, #168]	@ (800adc0 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad16:	428b      	cmp	r3, r1
 800ad18:	d032      	beq.n	800ad80 <HAL_ADC_ConfigChannel+0x764>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4929      	ldr	r1, [pc, #164]	@ (800adc4 <HAL_ADC_ConfigChannel+0x7a8>)
 800ad20:	428b      	cmp	r3, r1
 800ad22:	d02b      	beq.n	800ad7c <HAL_ADC_ConfigChannel+0x760>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4927      	ldr	r1, [pc, #156]	@ (800adc8 <HAL_ADC_ConfigChannel+0x7ac>)
 800ad2a:	428b      	cmp	r3, r1
 800ad2c:	d024      	beq.n	800ad78 <HAL_ADC_ConfigChannel+0x75c>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4926      	ldr	r1, [pc, #152]	@ (800adcc <HAL_ADC_ConfigChannel+0x7b0>)
 800ad34:	428b      	cmp	r3, r1
 800ad36:	d01d      	beq.n	800ad74 <HAL_ADC_ConfigChannel+0x758>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4924      	ldr	r1, [pc, #144]	@ (800add0 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad3e:	428b      	cmp	r3, r1
 800ad40:	d016      	beq.n	800ad70 <HAL_ADC_ConfigChannel+0x754>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4923      	ldr	r1, [pc, #140]	@ (800add4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad48:	428b      	cmp	r3, r1
 800ad4a:	d00f      	beq.n	800ad6c <HAL_ADC_ConfigChannel+0x750>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4926      	ldr	r1, [pc, #152]	@ (800adec <HAL_ADC_ConfigChannel+0x7d0>)
 800ad52:	428b      	cmp	r3, r1
 800ad54:	d008      	beq.n	800ad68 <HAL_ADC_ConfigChannel+0x74c>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	492b      	ldr	r1, [pc, #172]	@ (800ae08 <HAL_ADC_ConfigChannel+0x7ec>)
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	d101      	bne.n	800ad64 <HAL_ADC_ConfigChannel+0x748>
 800ad60:	4b2a      	ldr	r3, [pc, #168]	@ (800ae0c <HAL_ADC_ConfigChannel+0x7f0>)
 800ad62:	e012      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad64:	2300      	movs	r3, #0
 800ad66:	e010      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad68:	4b27      	ldr	r3, [pc, #156]	@ (800ae08 <HAL_ADC_ConfigChannel+0x7ec>)
 800ad6a:	e00e      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad6c:	4b1a      	ldr	r3, [pc, #104]	@ (800add8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad6e:	e00c      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad70:	4b18      	ldr	r3, [pc, #96]	@ (800add4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad72:	e00a      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad74:	4b1e      	ldr	r3, [pc, #120]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad76:	e008      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad78:	4b1e      	ldr	r3, [pc, #120]	@ (800adf4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ad7a:	e006      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad7c:	4b1e      	ldr	r3, [pc, #120]	@ (800adf8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad7e:	e004      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad80:	4b1e      	ldr	r3, [pc, #120]	@ (800adfc <HAL_ADC_ConfigChannel+0x7e0>)
 800ad82:	e002      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <HAL_ADC_ConfigChannel+0x76e>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	f7fe fc0d 	bl	80095ac <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f280 80f6 	bge.w	800af88 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a05      	ldr	r2, [pc, #20]	@ (800adb8 <HAL_ADC_ConfigChannel+0x79c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d004      	beq.n	800adb0 <HAL_ADC_ConfigChannel+0x794>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a15      	ldr	r2, [pc, #84]	@ (800ae00 <HAL_ADC_ConfigChannel+0x7e4>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d131      	bne.n	800ae14 <HAL_ADC_ConfigChannel+0x7f8>
 800adb0:	4b17      	ldr	r3, [pc, #92]	@ (800ae10 <HAL_ADC_ConfigChannel+0x7f4>)
 800adb2:	e030      	b.n	800ae16 <HAL_ADC_ConfigChannel+0x7fa>
 800adb4:	47ff0000 	.word	0x47ff0000
 800adb8:	40022000 	.word	0x40022000
 800adbc:	04300002 	.word	0x04300002
 800adc0:	08600004 	.word	0x08600004
 800adc4:	0c900008 	.word	0x0c900008
 800adc8:	10c00010 	.word	0x10c00010
 800adcc:	14f00020 	.word	0x14f00020
 800add0:	2a000400 	.word	0x2a000400
 800add4:	2e300800 	.word	0x2e300800
 800add8:	32601000 	.word	0x32601000
 800addc:	43210000 	.word	0x43210000
 800ade0:	4b840000 	.word	0x4b840000
 800ade4:	4fb80000 	.word	0x4fb80000
 800ade8:	47520000 	.word	0x47520000
 800adec:	36902000 	.word	0x36902000
 800adf0:	25b00200 	.word	0x25b00200
 800adf4:	21800100 	.word	0x21800100
 800adf8:	1d500080 	.word	0x1d500080
 800adfc:	19200040 	.word	0x19200040
 800ae00:	40022100 	.word	0x40022100
 800ae04:	58026000 	.word	0x58026000
 800ae08:	3ac04000 	.word	0x3ac04000
 800ae0c:	3ef08000 	.word	0x3ef08000
 800ae10:	40022300 	.word	0x40022300
 800ae14:	4b61      	ldr	r3, [pc, #388]	@ (800af9c <HAL_ADC_ConfigChannel+0x980>)
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fbba 	bl	8009590 <LL_ADC_GetCommonPathInternalCh>
 800ae1c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a5f      	ldr	r2, [pc, #380]	@ (800afa0 <HAL_ADC_ConfigChannel+0x984>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d004      	beq.n	800ae32 <HAL_ADC_ConfigChannel+0x816>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a5d      	ldr	r2, [pc, #372]	@ (800afa4 <HAL_ADC_ConfigChannel+0x988>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d10e      	bne.n	800ae50 <HAL_ADC_ConfigChannel+0x834>
 800ae32:	485b      	ldr	r0, [pc, #364]	@ (800afa0 <HAL_ADC_ConfigChannel+0x984>)
 800ae34:	f7fe fe5e 	bl	8009af4 <LL_ADC_IsEnabled>
 800ae38:	4604      	mov	r4, r0
 800ae3a:	485a      	ldr	r0, [pc, #360]	@ (800afa4 <HAL_ADC_ConfigChannel+0x988>)
 800ae3c:	f7fe fe5a 	bl	8009af4 <LL_ADC_IsEnabled>
 800ae40:	4603      	mov	r3, r0
 800ae42:	4323      	orrs	r3, r4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bf0c      	ite	eq
 800ae48:	2301      	moveq	r3, #1
 800ae4a:	2300      	movne	r3, #0
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	e008      	b.n	800ae62 <HAL_ADC_ConfigChannel+0x846>
 800ae50:	4855      	ldr	r0, [pc, #340]	@ (800afa8 <HAL_ADC_ConfigChannel+0x98c>)
 800ae52:	f7fe fe4f 	bl	8009af4 <LL_ADC_IsEnabled>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bf0c      	ite	eq
 800ae5c:	2301      	moveq	r3, #1
 800ae5e:	2300      	movne	r3, #0
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d07d      	beq.n	800af62 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a50      	ldr	r2, [pc, #320]	@ (800afac <HAL_ADC_ConfigChannel+0x990>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d130      	bne.n	800aed2 <HAL_ADC_ConfigChannel+0x8b6>
 800ae70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d12b      	bne.n	800aed2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a4a      	ldr	r2, [pc, #296]	@ (800afa8 <HAL_ADC_ConfigChannel+0x98c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	f040 8081 	bne.w	800af88 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a45      	ldr	r2, [pc, #276]	@ (800afa0 <HAL_ADC_ConfigChannel+0x984>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d004      	beq.n	800ae9a <HAL_ADC_ConfigChannel+0x87e>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a43      	ldr	r2, [pc, #268]	@ (800afa4 <HAL_ADC_ConfigChannel+0x988>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d101      	bne.n	800ae9e <HAL_ADC_ConfigChannel+0x882>
 800ae9a:	4a45      	ldr	r2, [pc, #276]	@ (800afb0 <HAL_ADC_ConfigChannel+0x994>)
 800ae9c:	e000      	b.n	800aea0 <HAL_ADC_ConfigChannel+0x884>
 800ae9e:	4a3f      	ldr	r2, [pc, #252]	@ (800af9c <HAL_ADC_ConfigChannel+0x980>)
 800aea0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aea2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f7fe fb5e 	bl	800956a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aeae:	4b41      	ldr	r3, [pc, #260]	@ (800afb4 <HAL_ADC_ConfigChannel+0x998>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	099b      	lsrs	r3, r3, #6
 800aeb4:	4a40      	ldr	r2, [pc, #256]	@ (800afb8 <HAL_ADC_ConfigChannel+0x99c>)
 800aeb6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeba:	099b      	lsrs	r3, r3, #6
 800aebc:	3301      	adds	r3, #1
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aec2:	e002      	b.n	800aeca <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1f9      	bne.n	800aec4 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aed0:	e05a      	b.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a39      	ldr	r2, [pc, #228]	@ (800afbc <HAL_ADC_ConfigChannel+0x9a0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d11e      	bne.n	800af1a <HAL_ADC_ConfigChannel+0x8fe>
 800aedc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d119      	bne.n	800af1a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a2f      	ldr	r2, [pc, #188]	@ (800afa8 <HAL_ADC_ConfigChannel+0x98c>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d14b      	bne.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a2a      	ldr	r2, [pc, #168]	@ (800afa0 <HAL_ADC_ConfigChannel+0x984>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d004      	beq.n	800af04 <HAL_ADC_ConfigChannel+0x8e8>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a29      	ldr	r2, [pc, #164]	@ (800afa4 <HAL_ADC_ConfigChannel+0x988>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d101      	bne.n	800af08 <HAL_ADC_ConfigChannel+0x8ec>
 800af04:	4a2a      	ldr	r2, [pc, #168]	@ (800afb0 <HAL_ADC_ConfigChannel+0x994>)
 800af06:	e000      	b.n	800af0a <HAL_ADC_ConfigChannel+0x8ee>
 800af08:	4a24      	ldr	r2, [pc, #144]	@ (800af9c <HAL_ADC_ConfigChannel+0x980>)
 800af0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7fe fb29 	bl	800956a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af18:	e036      	b.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a28      	ldr	r2, [pc, #160]	@ (800afc0 <HAL_ADC_ConfigChannel+0x9a4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d131      	bne.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
 800af24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d12c      	bne.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1d      	ldr	r2, [pc, #116]	@ (800afa8 <HAL_ADC_ConfigChannel+0x98c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d127      	bne.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a18      	ldr	r2, [pc, #96]	@ (800afa0 <HAL_ADC_ConfigChannel+0x984>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d004      	beq.n	800af4c <HAL_ADC_ConfigChannel+0x930>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a17      	ldr	r2, [pc, #92]	@ (800afa4 <HAL_ADC_ConfigChannel+0x988>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d101      	bne.n	800af50 <HAL_ADC_ConfigChannel+0x934>
 800af4c:	4a18      	ldr	r2, [pc, #96]	@ (800afb0 <HAL_ADC_ConfigChannel+0x994>)
 800af4e:	e000      	b.n	800af52 <HAL_ADC_ConfigChannel+0x936>
 800af50:	4a12      	ldr	r2, [pc, #72]	@ (800af9c <HAL_ADC_ConfigChannel+0x980>)
 800af52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f7fe fb05 	bl	800956a <LL_ADC_SetCommonPathInternalCh>
 800af60:	e012      	b.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af66:	f043 0220 	orr.w	r2, r3, #32
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800af74:	e008      	b.n	800af88 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af7a:	f043 0220 	orr.w	r2, r3, #32
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800af90:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800af94:	4618      	mov	r0, r3
 800af96:	3794      	adds	r7, #148	@ 0x94
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd90      	pop	{r4, r7, pc}
 800af9c:	58026300 	.word	0x58026300
 800afa0:	40022000 	.word	0x40022000
 800afa4:	40022100 	.word	0x40022100
 800afa8:	58026000 	.word	0x58026000
 800afac:	c7520000 	.word	0xc7520000
 800afb0:	40022300 	.word	0x40022300
 800afb4:	24000004 	.word	0x24000004
 800afb8:	053e2d63 	.word	0x053e2d63
 800afbc:	c3210000 	.word	0xc3210000
 800afc0:	cb840000 	.word	0xcb840000

0800afc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fe fd8f 	bl	8009af4 <LL_ADC_IsEnabled>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d16e      	bne.n	800b0ba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	4b38      	ldr	r3, [pc, #224]	@ (800b0c4 <ADC_Enable+0x100>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afee:	f043 0210 	orr.w	r2, r3, #16
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800affa:	f043 0201 	orr.w	r2, r3, #1
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e05a      	b.n	800b0bc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fd5e 	bl	8009acc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b010:	f7fe fa68 	bl	80094e4 <HAL_GetTick>
 800b014:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a2b      	ldr	r2, [pc, #172]	@ (800b0c8 <ADC_Enable+0x104>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d004      	beq.n	800b02a <ADC_Enable+0x66>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a29      	ldr	r2, [pc, #164]	@ (800b0cc <ADC_Enable+0x108>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d101      	bne.n	800b02e <ADC_Enable+0x6a>
 800b02a:	4b29      	ldr	r3, [pc, #164]	@ (800b0d0 <ADC_Enable+0x10c>)
 800b02c:	e000      	b.n	800b030 <ADC_Enable+0x6c>
 800b02e:	4b29      	ldr	r3, [pc, #164]	@ (800b0d4 <ADC_Enable+0x110>)
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fce1 	bl	80099f8 <LL_ADC_GetMultimode>
 800b036:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a23      	ldr	r2, [pc, #140]	@ (800b0cc <ADC_Enable+0x108>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d002      	beq.n	800b048 <ADC_Enable+0x84>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	e000      	b.n	800b04a <ADC_Enable+0x86>
 800b048:	4b1f      	ldr	r3, [pc, #124]	@ (800b0c8 <ADC_Enable+0x104>)
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	4293      	cmp	r3, r2
 800b050:	d02c      	beq.n	800b0ac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d130      	bne.n	800b0ba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b058:	e028      	b.n	800b0ac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fe fd48 	bl	8009af4 <LL_ADC_IsEnabled>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d104      	bne.n	800b074 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fd2c 	bl	8009acc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b074:	f7fe fa36 	bl	80094e4 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d914      	bls.n	800b0ac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d00d      	beq.n	800b0ac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b094:	f043 0210 	orr.w	r2, r3, #16
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0a0:	f043 0201 	orr.w	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e007      	b.n	800b0bc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d1cf      	bne.n	800b05a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	8000003f 	.word	0x8000003f
 800b0c8:	40022000 	.word	0x40022000
 800b0cc:	40022100 	.word	0x40022100
 800b0d0:	40022300 	.word	0x40022300
 800b0d4:	58026300 	.word	0x58026300

0800b0d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0ea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d14b      	bne.n	800b18a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0308 	and.w	r3, r3, #8
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d021      	beq.n	800b150 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fb77 	bl	8009804 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d032      	beq.n	800b182 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d12b      	bne.n	800b182 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b13a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d11f      	bne.n	800b182 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b146:	f043 0201 	orr.w	r2, r3, #1
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b14e:	e018      	b.n	800b182 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d111      	bne.n	800b182 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b162:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b16e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d105      	bne.n	800b182 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b17a:	f043 0201 	orr.w	r2, r3, #1
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff fa22 	bl	800a5cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b188:	e00e      	b.n	800b1a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f7ff fa36 	bl	800a608 <HAL_ADC_ErrorCallback>
}
 800b19c:	e004      	b.n	800b1a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	4798      	blx	r3
}
 800b1a8:	bf00      	nop
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f7ff fa0e 	bl	800a5e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b1c4:	bf00      	nop
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ea:	f043 0204 	orr.w	r2, r3, #4
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff fa08 	bl	800a608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b1f8:	bf00      	nop
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a6c      	ldr	r2, [pc, #432]	@ (800b3c0 <ADC_ConfigureBoostMode+0x1c0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d004      	beq.n	800b21c <ADC_ConfigureBoostMode+0x1c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a6b      	ldr	r2, [pc, #428]	@ (800b3c4 <ADC_ConfigureBoostMode+0x1c4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d109      	bne.n	800b230 <ADC_ConfigureBoostMode+0x30>
 800b21c:	4b6a      	ldr	r3, [pc, #424]	@ (800b3c8 <ADC_ConfigureBoostMode+0x1c8>)
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b224:	2b00      	cmp	r3, #0
 800b226:	bf14      	ite	ne
 800b228:	2301      	movne	r3, #1
 800b22a:	2300      	moveq	r3, #0
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	e008      	b.n	800b242 <ADC_ConfigureBoostMode+0x42>
 800b230:	4b66      	ldr	r3, [pc, #408]	@ (800b3cc <ADC_ConfigureBoostMode+0x1cc>)
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bf14      	ite	ne
 800b23c:	2301      	movne	r3, #1
 800b23e:	2300      	moveq	r3, #0
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d01c      	beq.n	800b280 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b246:	f006 fe8b 	bl	8011f60 <HAL_RCC_GetHCLKFreq>
 800b24a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b254:	d010      	beq.n	800b278 <ADC_ConfigureBoostMode+0x78>
 800b256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b25a:	d873      	bhi.n	800b344 <ADC_ConfigureBoostMode+0x144>
 800b25c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b260:	d002      	beq.n	800b268 <ADC_ConfigureBoostMode+0x68>
 800b262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b266:	d16d      	bne.n	800b344 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	0c1b      	lsrs	r3, r3, #16
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	fbb2 f3f3 	udiv	r3, r2, r3
 800b274:	60fb      	str	r3, [r7, #12]
        break;
 800b276:	e068      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	089b      	lsrs	r3, r3, #2
 800b27c:	60fb      	str	r3, [r7, #12]
        break;
 800b27e:	e064      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b280:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b284:	f04f 0100 	mov.w	r1, #0
 800b288:	f008 f866 	bl	8013358 <HAL_RCCEx_GetPeriphCLKFreq>
 800b28c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b296:	d051      	beq.n	800b33c <ADC_ConfigureBoostMode+0x13c>
 800b298:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b29c:	d854      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b29e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b2a2:	d047      	beq.n	800b334 <ADC_ConfigureBoostMode+0x134>
 800b2a4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b2a8:	d84e      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2aa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b2ae:	d03d      	beq.n	800b32c <ADC_ConfigureBoostMode+0x12c>
 800b2b0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b2b4:	d848      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2ba:	d033      	beq.n	800b324 <ADC_ConfigureBoostMode+0x124>
 800b2bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2c0:	d842      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2c2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b2c6:	d029      	beq.n	800b31c <ADC_ConfigureBoostMode+0x11c>
 800b2c8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b2cc:	d83c      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2ce:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b2d2:	d01a      	beq.n	800b30a <ADC_ConfigureBoostMode+0x10a>
 800b2d4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b2d8:	d836      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2da:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b2de:	d014      	beq.n	800b30a <ADC_ConfigureBoostMode+0x10a>
 800b2e0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b2e4:	d830      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2ea:	d00e      	beq.n	800b30a <ADC_ConfigureBoostMode+0x10a>
 800b2ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2f0:	d82a      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b2f6:	d008      	beq.n	800b30a <ADC_ConfigureBoostMode+0x10a>
 800b2f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b2fc:	d824      	bhi.n	800b348 <ADC_ConfigureBoostMode+0x148>
 800b2fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b302:	d002      	beq.n	800b30a <ADC_ConfigureBoostMode+0x10a>
 800b304:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b308:	d11e      	bne.n	800b348 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	0c9b      	lsrs	r3, r3, #18
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	fbb2 f3f3 	udiv	r3, r2, r3
 800b318:	60fb      	str	r3, [r7, #12]
        break;
 800b31a:	e016      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	091b      	lsrs	r3, r3, #4
 800b320:	60fb      	str	r3, [r7, #12]
        break;
 800b322:	e012      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	095b      	lsrs	r3, r3, #5
 800b328:	60fb      	str	r3, [r7, #12]
        break;
 800b32a:	e00e      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	099b      	lsrs	r3, r3, #6
 800b330:	60fb      	str	r3, [r7, #12]
        break;
 800b332:	e00a      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	09db      	lsrs	r3, r3, #7
 800b338:	60fb      	str	r3, [r7, #12]
        break;
 800b33a:	e006      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	0a1b      	lsrs	r3, r3, #8
 800b340:	60fb      	str	r3, [r7, #12]
        break;
 800b342:	e002      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
        break;
 800b344:	bf00      	nop
 800b346:	e000      	b.n	800b34a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b348:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	085b      	lsrs	r3, r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4a1f      	ldr	r2, [pc, #124]	@ (800b3d0 <ADC_ConfigureBoostMode+0x1d0>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d808      	bhi.n	800b36a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b366:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b368:	e025      	b.n	800b3b6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4a19      	ldr	r2, [pc, #100]	@ (800b3d4 <ADC_ConfigureBoostMode+0x1d4>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d80a      	bhi.n	800b388 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b384:	609a      	str	r2, [r3, #8]
}
 800b386:	e016      	b.n	800b3b6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4a13      	ldr	r2, [pc, #76]	@ (800b3d8 <ADC_ConfigureBoostMode+0x1d8>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d80a      	bhi.n	800b3a6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3a2:	609a      	str	r2, [r3, #8]
}
 800b3a4:	e007      	b.n	800b3b6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	689a      	ldr	r2, [r3, #8]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b3b4:	609a      	str	r2, [r3, #8]
}
 800b3b6:	bf00      	nop
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	40022000 	.word	0x40022000
 800b3c4:	40022100 	.word	0x40022100
 800b3c8:	40022300 	.word	0x40022300
 800b3cc:	58026300 	.word	0x58026300
 800b3d0:	005f5e10 	.word	0x005f5e10
 800b3d4:	00bebc20 	.word	0x00bebc20
 800b3d8:	017d7840 	.word	0x017d7840

0800b3dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <__NVIC_SetPriorityGrouping>:
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b450:	4b0b      	ldr	r3, [pc, #44]	@ (800b480 <__NVIC_SetPriorityGrouping+0x40>)
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b45c:	4013      	ands	r3, r2
 800b45e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b468:	4b06      	ldr	r3, [pc, #24]	@ (800b484 <__NVIC_SetPriorityGrouping+0x44>)
 800b46a:	4313      	orrs	r3, r2
 800b46c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b46e:	4a04      	ldr	r2, [pc, #16]	@ (800b480 <__NVIC_SetPriorityGrouping+0x40>)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	60d3      	str	r3, [r2, #12]
}
 800b474:	bf00      	nop
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	e000ed00 	.word	0xe000ed00
 800b484:	05fa0000 	.word	0x05fa0000

0800b488 <__NVIC_GetPriorityGrouping>:
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b48c:	4b04      	ldr	r3, [pc, #16]	@ (800b4a0 <__NVIC_GetPriorityGrouping+0x18>)
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	0a1b      	lsrs	r3, r3, #8
 800b492:	f003 0307 	and.w	r3, r3, #7
}
 800b496:	4618      	mov	r0, r3
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	e000ed00 	.word	0xe000ed00

0800b4a4 <__NVIC_EnableIRQ>:
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b4ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	db0b      	blt.n	800b4ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	f003 021f 	and.w	r2, r3, #31
 800b4bc:	4907      	ldr	r1, [pc, #28]	@ (800b4dc <__NVIC_EnableIRQ+0x38>)
 800b4be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4c2:	095b      	lsrs	r3, r3, #5
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	fa00 f202 	lsl.w	r2, r0, r2
 800b4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b4ce:	bf00      	nop
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	e000e100 	.word	0xe000e100

0800b4e0 <__NVIC_SetPriority>:
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	6039      	str	r1, [r7, #0]
 800b4ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b4ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	db0a      	blt.n	800b50a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	490c      	ldr	r1, [pc, #48]	@ (800b52c <__NVIC_SetPriority+0x4c>)
 800b4fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4fe:	0112      	lsls	r2, r2, #4
 800b500:	b2d2      	uxtb	r2, r2
 800b502:	440b      	add	r3, r1
 800b504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b508:	e00a      	b.n	800b520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	4908      	ldr	r1, [pc, #32]	@ (800b530 <__NVIC_SetPriority+0x50>)
 800b510:	88fb      	ldrh	r3, [r7, #6]
 800b512:	f003 030f 	and.w	r3, r3, #15
 800b516:	3b04      	subs	r3, #4
 800b518:	0112      	lsls	r2, r2, #4
 800b51a:	b2d2      	uxtb	r2, r2
 800b51c:	440b      	add	r3, r1
 800b51e:	761a      	strb	r2, [r3, #24]
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	e000e100 	.word	0xe000e100
 800b530:	e000ed00 	.word	0xe000ed00

0800b534 <NVIC_EncodePriority>:
{
 800b534:	b480      	push	{r7}
 800b536:	b089      	sub	sp, #36	@ 0x24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	f1c3 0307 	rsb	r3, r3, #7
 800b54e:	2b04      	cmp	r3, #4
 800b550:	bf28      	it	cs
 800b552:	2304      	movcs	r3, #4
 800b554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	3304      	adds	r3, #4
 800b55a:	2b06      	cmp	r3, #6
 800b55c:	d902      	bls.n	800b564 <NVIC_EncodePriority+0x30>
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	3b03      	subs	r3, #3
 800b562:	e000      	b.n	800b566 <NVIC_EncodePriority+0x32>
 800b564:	2300      	movs	r3, #0
 800b566:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b568:	f04f 32ff 	mov.w	r2, #4294967295
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	fa02 f303 	lsl.w	r3, r2, r3
 800b572:	43da      	mvns	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	401a      	ands	r2, r3
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b57c:	f04f 31ff 	mov.w	r1, #4294967295
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	fa01 f303 	lsl.w	r3, r1, r3
 800b586:	43d9      	mvns	r1, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b58c:	4313      	orrs	r3, r2
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3724      	adds	r7, #36	@ 0x24
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
	...

0800b59c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ac:	d301      	bcc.n	800b5b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e00f      	b.n	800b5d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b5b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b5dc <SysTick_Config+0x40>)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b5ba:	210f      	movs	r1, #15
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	f7ff ff8e 	bl	800b4e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b5c4:	4b05      	ldr	r3, [pc, #20]	@ (800b5dc <SysTick_Config+0x40>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b5ca:	4b04      	ldr	r3, [pc, #16]	@ (800b5dc <SysTick_Config+0x40>)
 800b5cc:	2207      	movs	r2, #7
 800b5ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	e000e010 	.word	0xe000e010

0800b5e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ff29 	bl	800b440 <__NVIC_SetPriorityGrouping>
}
 800b5ee:	bf00      	nop
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b086      	sub	sp, #24
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b604:	f7ff ff40 	bl	800b488 <__NVIC_GetPriorityGrouping>
 800b608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	68b9      	ldr	r1, [r7, #8]
 800b60e:	6978      	ldr	r0, [r7, #20]
 800b610:	f7ff ff90 	bl	800b534 <NVIC_EncodePriority>
 800b614:	4602      	mov	r2, r0
 800b616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b61a:	4611      	mov	r1, r2
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff ff5f 	bl	800b4e0 <__NVIC_SetPriority>
}
 800b622:	bf00      	nop
 800b624:	3718      	adds	r7, #24
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b082      	sub	sp, #8
 800b62e:	af00      	add	r7, sp, #0
 800b630:	4603      	mov	r3, r0
 800b632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7ff ff33 	bl	800b4a4 <__NVIC_EnableIRQ>
}
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff ffa4 	bl	800b59c <SysTick_Config>
 800b654:	4603      	mov	r3, r0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b660:	b480      	push	{r7}
 800b662:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b664:	f3bf 8f5f 	dmb	sy
}
 800b668:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b66a:	4b07      	ldr	r3, [pc, #28]	@ (800b688 <HAL_MPU_Disable+0x28>)
 800b66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66e:	4a06      	ldr	r2, [pc, #24]	@ (800b688 <HAL_MPU_Disable+0x28>)
 800b670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b674:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b676:	4b05      	ldr	r3, [pc, #20]	@ (800b68c <HAL_MPU_Disable+0x2c>)
 800b678:	2200      	movs	r2, #0
 800b67a:	605a      	str	r2, [r3, #4]
}
 800b67c:	bf00      	nop
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	e000ed00 	.word	0xe000ed00
 800b68c:	e000ed90 	.word	0xe000ed90

0800b690 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b698:	4a0b      	ldr	r2, [pc, #44]	@ (800b6c8 <HAL_MPU_Enable+0x38>)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f043 0301 	orr.w	r3, r3, #1
 800b6a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <HAL_MPU_Enable+0x3c>)
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a6:	4a09      	ldr	r2, [pc, #36]	@ (800b6cc <HAL_MPU_Enable+0x3c>)
 800b6a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b6ae:	f3bf 8f4f 	dsb	sy
}
 800b6b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b6b4:	f3bf 8f6f 	isb	sy
}
 800b6b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b6ba:	bf00      	nop
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	e000ed90 	.word	0xe000ed90
 800b6cc:	e000ed00 	.word	0xe000ed00

0800b6d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	785a      	ldrb	r2, [r3, #1]
 800b6dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b74c <HAL_MPU_ConfigRegion+0x7c>)
 800b6de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800b74c <HAL_MPU_ConfigRegion+0x7c>)
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	4a19      	ldr	r2, [pc, #100]	@ (800b74c <HAL_MPU_ConfigRegion+0x7c>)
 800b6e6:	f023 0301 	bic.w	r3, r3, #1
 800b6ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b6ec:	4a17      	ldr	r2, [pc, #92]	@ (800b74c <HAL_MPU_ConfigRegion+0x7c>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7b1b      	ldrb	r3, [r3, #12]
 800b6f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7adb      	ldrb	r3, [r3, #11]
 800b6fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7a9b      	ldrb	r3, [r3, #10]
 800b706:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7b5b      	ldrb	r3, [r3, #13]
 800b70e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7b9b      	ldrb	r3, [r3, #14]
 800b716:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	7bdb      	ldrb	r3, [r3, #15]
 800b71e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	7a5b      	ldrb	r3, [r3, #9]
 800b726:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7a1b      	ldrb	r3, [r3, #8]
 800b72e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b730:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	7812      	ldrb	r2, [r2, #0]
 800b736:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b738:	4a04      	ldr	r2, [pc, #16]	@ (800b74c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b73a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b73c:	6113      	str	r3, [r2, #16]
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	e000ed90 	.word	0xe000ed90

0800b750 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b758:	f7fd fec4 	bl	80094e4 <HAL_GetTick>
 800b75c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e312      	b.n	800bd8e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a66      	ldr	r2, [pc, #408]	@ (800b908 <HAL_DMA_Init+0x1b8>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d04a      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a65      	ldr	r2, [pc, #404]	@ (800b90c <HAL_DMA_Init+0x1bc>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d045      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a63      	ldr	r2, [pc, #396]	@ (800b910 <HAL_DMA_Init+0x1c0>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d040      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a62      	ldr	r2, [pc, #392]	@ (800b914 <HAL_DMA_Init+0x1c4>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d03b      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a60      	ldr	r2, [pc, #384]	@ (800b918 <HAL_DMA_Init+0x1c8>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d036      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a5f      	ldr	r2, [pc, #380]	@ (800b91c <HAL_DMA_Init+0x1cc>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d031      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a5d      	ldr	r2, [pc, #372]	@ (800b920 <HAL_DMA_Init+0x1d0>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d02c      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a5c      	ldr	r2, [pc, #368]	@ (800b924 <HAL_DMA_Init+0x1d4>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d027      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a5a      	ldr	r2, [pc, #360]	@ (800b928 <HAL_DMA_Init+0x1d8>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d022      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a59      	ldr	r2, [pc, #356]	@ (800b92c <HAL_DMA_Init+0x1dc>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d01d      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a57      	ldr	r2, [pc, #348]	@ (800b930 <HAL_DMA_Init+0x1e0>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d018      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a56      	ldr	r2, [pc, #344]	@ (800b934 <HAL_DMA_Init+0x1e4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d013      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a54      	ldr	r2, [pc, #336]	@ (800b938 <HAL_DMA_Init+0x1e8>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00e      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a53      	ldr	r2, [pc, #332]	@ (800b93c <HAL_DMA_Init+0x1ec>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d009      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a51      	ldr	r2, [pc, #324]	@ (800b940 <HAL_DMA_Init+0x1f0>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d004      	beq.n	800b808 <HAL_DMA_Init+0xb8>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a50      	ldr	r2, [pc, #320]	@ (800b944 <HAL_DMA_Init+0x1f4>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d101      	bne.n	800b80c <HAL_DMA_Init+0xbc>
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <HAL_DMA_Init+0xbe>
 800b80c:	2300      	movs	r3, #0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 813c 	beq.w	800ba8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a37      	ldr	r2, [pc, #220]	@ (800b908 <HAL_DMA_Init+0x1b8>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d04a      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a36      	ldr	r2, [pc, #216]	@ (800b90c <HAL_DMA_Init+0x1bc>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d045      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a34      	ldr	r2, [pc, #208]	@ (800b910 <HAL_DMA_Init+0x1c0>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d040      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a33      	ldr	r2, [pc, #204]	@ (800b914 <HAL_DMA_Init+0x1c4>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d03b      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a31      	ldr	r2, [pc, #196]	@ (800b918 <HAL_DMA_Init+0x1c8>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d036      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a30      	ldr	r2, [pc, #192]	@ (800b91c <HAL_DMA_Init+0x1cc>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d031      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a2e      	ldr	r2, [pc, #184]	@ (800b920 <HAL_DMA_Init+0x1d0>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d02c      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a2d      	ldr	r2, [pc, #180]	@ (800b924 <HAL_DMA_Init+0x1d4>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d027      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a2b      	ldr	r2, [pc, #172]	@ (800b928 <HAL_DMA_Init+0x1d8>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d022      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a2a      	ldr	r2, [pc, #168]	@ (800b92c <HAL_DMA_Init+0x1dc>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d01d      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a28      	ldr	r2, [pc, #160]	@ (800b930 <HAL_DMA_Init+0x1e0>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d018      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a27      	ldr	r2, [pc, #156]	@ (800b934 <HAL_DMA_Init+0x1e4>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d013      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a25      	ldr	r2, [pc, #148]	@ (800b938 <HAL_DMA_Init+0x1e8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d00e      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a24      	ldr	r2, [pc, #144]	@ (800b93c <HAL_DMA_Init+0x1ec>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d009      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a22      	ldr	r2, [pc, #136]	@ (800b940 <HAL_DMA_Init+0x1f0>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d004      	beq.n	800b8c4 <HAL_DMA_Init+0x174>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a21      	ldr	r2, [pc, #132]	@ (800b944 <HAL_DMA_Init+0x1f4>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d108      	bne.n	800b8d6 <HAL_DMA_Init+0x186>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 0201 	bic.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	e007      	b.n	800b8e6 <HAL_DMA_Init+0x196>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0201 	bic.w	r2, r2, #1
 800b8e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b8e6:	e02f      	b.n	800b948 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b8e8:	f7fd fdfc 	bl	80094e4 <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	d928      	bls.n	800b948 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2203      	movs	r2, #3
 800b900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e242      	b.n	800bd8e <HAL_DMA_Init+0x63e>
 800b908:	40020010 	.word	0x40020010
 800b90c:	40020028 	.word	0x40020028
 800b910:	40020040 	.word	0x40020040
 800b914:	40020058 	.word	0x40020058
 800b918:	40020070 	.word	0x40020070
 800b91c:	40020088 	.word	0x40020088
 800b920:	400200a0 	.word	0x400200a0
 800b924:	400200b8 	.word	0x400200b8
 800b928:	40020410 	.word	0x40020410
 800b92c:	40020428 	.word	0x40020428
 800b930:	40020440 	.word	0x40020440
 800b934:	40020458 	.word	0x40020458
 800b938:	40020470 	.word	0x40020470
 800b93c:	40020488 	.word	0x40020488
 800b940:	400204a0 	.word	0x400204a0
 800b944:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1c8      	bne.n	800b8e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	4b83      	ldr	r3, [pc, #524]	@ (800bb70 <HAL_DMA_Init+0x420>)
 800b962:	4013      	ands	r3, r2
 800b964:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b96e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b97a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b986:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d107      	bne.n	800b9ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	2b28      	cmp	r3, #40	@ 0x28
 800b9b2:	d903      	bls.n	800b9bc <HAL_DMA_Init+0x26c>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ba:	d91f      	bls.n	800b9fc <HAL_DMA_Init+0x2ac>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9c2:	d903      	bls.n	800b9cc <HAL_DMA_Init+0x27c>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2b42      	cmp	r3, #66	@ 0x42
 800b9ca:	d917      	bls.n	800b9fc <HAL_DMA_Init+0x2ac>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	2b46      	cmp	r3, #70	@ 0x46
 800b9d2:	d903      	bls.n	800b9dc <HAL_DMA_Init+0x28c>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	2b48      	cmp	r3, #72	@ 0x48
 800b9da:	d90f      	bls.n	800b9fc <HAL_DMA_Init+0x2ac>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	2b4e      	cmp	r3, #78	@ 0x4e
 800b9e2:	d903      	bls.n	800b9ec <HAL_DMA_Init+0x29c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	2b52      	cmp	r3, #82	@ 0x52
 800b9ea:	d907      	bls.n	800b9fc <HAL_DMA_Init+0x2ac>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	2b73      	cmp	r3, #115	@ 0x73
 800b9f2:	d905      	bls.n	800ba00 <HAL_DMA_Init+0x2b0>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	2b77      	cmp	r3, #119	@ 0x77
 800b9fa:	d801      	bhi.n	800ba00 <HAL_DMA_Init+0x2b0>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e000      	b.n	800ba02 <HAL_DMA_Init+0x2b2>
 800ba00:	2300      	movs	r3, #0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f023 0307 	bic.w	r3, r3, #7
 800ba24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba34:	2b04      	cmp	r3, #4
 800ba36:	d117      	bne.n	800ba68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00e      	beq.n	800ba68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f002 fb48 	bl	800e0e0 <DMA_CheckFifoParam>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d008      	beq.n	800ba68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2240      	movs	r2, #64	@ 0x40
 800ba5a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e192      	b.n	800bd8e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f002 fa83 	bl	800df7c <DMA_CalcBaseAndBitshift>
 800ba76:	4603      	mov	r3, r0
 800ba78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba7e:	f003 031f 	and.w	r3, r3, #31
 800ba82:	223f      	movs	r2, #63	@ 0x3f
 800ba84:	409a      	lsls	r2, r3
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	609a      	str	r2, [r3, #8]
 800ba8a:	e0c8      	b.n	800bc1e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a38      	ldr	r2, [pc, #224]	@ (800bb74 <HAL_DMA_Init+0x424>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d022      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a37      	ldr	r2, [pc, #220]	@ (800bb78 <HAL_DMA_Init+0x428>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d01d      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a35      	ldr	r2, [pc, #212]	@ (800bb7c <HAL_DMA_Init+0x42c>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d018      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a34      	ldr	r2, [pc, #208]	@ (800bb80 <HAL_DMA_Init+0x430>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d013      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a32      	ldr	r2, [pc, #200]	@ (800bb84 <HAL_DMA_Init+0x434>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d00e      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a31      	ldr	r2, [pc, #196]	@ (800bb88 <HAL_DMA_Init+0x438>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d009      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a2f      	ldr	r2, [pc, #188]	@ (800bb8c <HAL_DMA_Init+0x43c>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d004      	beq.n	800badc <HAL_DMA_Init+0x38c>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a2e      	ldr	r2, [pc, #184]	@ (800bb90 <HAL_DMA_Init+0x440>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d101      	bne.n	800bae0 <HAL_DMA_Init+0x390>
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <HAL_DMA_Init+0x392>
 800bae0:	2300      	movs	r3, #0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 8092 	beq.w	800bc0c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a21      	ldr	r2, [pc, #132]	@ (800bb74 <HAL_DMA_Init+0x424>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d021      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a20      	ldr	r2, [pc, #128]	@ (800bb78 <HAL_DMA_Init+0x428>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d01c      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a1e      	ldr	r2, [pc, #120]	@ (800bb7c <HAL_DMA_Init+0x42c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d017      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a1d      	ldr	r2, [pc, #116]	@ (800bb80 <HAL_DMA_Init+0x430>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d012      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1b      	ldr	r2, [pc, #108]	@ (800bb84 <HAL_DMA_Init+0x434>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00d      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a1a      	ldr	r2, [pc, #104]	@ (800bb88 <HAL_DMA_Init+0x438>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d008      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a18      	ldr	r2, [pc, #96]	@ (800bb8c <HAL_DMA_Init+0x43c>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d003      	beq.n	800bb36 <HAL_DMA_Init+0x3e6>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a17      	ldr	r2, [pc, #92]	@ (800bb90 <HAL_DMA_Init+0x440>)
 800bb34:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2202      	movs	r2, #2
 800bb3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	4b10      	ldr	r3, [pc, #64]	@ (800bb94 <HAL_DMA_Init+0x444>)
 800bb52:	4013      	ands	r3, r2
 800bb54:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	2b40      	cmp	r3, #64	@ 0x40
 800bb5c:	d01c      	beq.n	800bb98 <HAL_DMA_Init+0x448>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	2b80      	cmp	r3, #128	@ 0x80
 800bb64:	d102      	bne.n	800bb6c <HAL_DMA_Init+0x41c>
 800bb66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb6a:	e016      	b.n	800bb9a <HAL_DMA_Init+0x44a>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e014      	b.n	800bb9a <HAL_DMA_Init+0x44a>
 800bb70:	fe10803f 	.word	0xfe10803f
 800bb74:	58025408 	.word	0x58025408
 800bb78:	5802541c 	.word	0x5802541c
 800bb7c:	58025430 	.word	0x58025430
 800bb80:	58025444 	.word	0x58025444
 800bb84:	58025458 	.word	0x58025458
 800bb88:	5802546c 	.word	0x5802546c
 800bb8c:	58025480 	.word	0x58025480
 800bb90:	58025494 	.word	0x58025494
 800bb94:	fffe000f 	.word	0xfffe000f
 800bb98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	68d2      	ldr	r2, [r2, #12]
 800bb9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bbb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bbb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bbc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bbc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	4b6e      	ldr	r3, [pc, #440]	@ (800bd98 <HAL_DMA_Init+0x648>)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	4a6e      	ldr	r2, [pc, #440]	@ (800bd9c <HAL_DMA_Init+0x64c>)
 800bbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe8:	091b      	lsrs	r3, r3, #4
 800bbea:	009a      	lsls	r2, r3, #2
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f002 f9c3 	bl	800df7c <DMA_CalcBaseAndBitshift>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbfe:	f003 031f 	and.w	r3, r3, #31
 800bc02:	2201      	movs	r2, #1
 800bc04:	409a      	lsls	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	e008      	b.n	800bc1e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2240      	movs	r2, #64	@ 0x40
 800bc10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2203      	movs	r2, #3
 800bc16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e0b7      	b.n	800bd8e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a5f      	ldr	r2, [pc, #380]	@ (800bda0 <HAL_DMA_Init+0x650>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d072      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a5d      	ldr	r2, [pc, #372]	@ (800bda4 <HAL_DMA_Init+0x654>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d06d      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a5c      	ldr	r2, [pc, #368]	@ (800bda8 <HAL_DMA_Init+0x658>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d068      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a5a      	ldr	r2, [pc, #360]	@ (800bdac <HAL_DMA_Init+0x65c>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d063      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a59      	ldr	r2, [pc, #356]	@ (800bdb0 <HAL_DMA_Init+0x660>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d05e      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a57      	ldr	r2, [pc, #348]	@ (800bdb4 <HAL_DMA_Init+0x664>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d059      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a56      	ldr	r2, [pc, #344]	@ (800bdb8 <HAL_DMA_Init+0x668>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d054      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a54      	ldr	r2, [pc, #336]	@ (800bdbc <HAL_DMA_Init+0x66c>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d04f      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a53      	ldr	r2, [pc, #332]	@ (800bdc0 <HAL_DMA_Init+0x670>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d04a      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a51      	ldr	r2, [pc, #324]	@ (800bdc4 <HAL_DMA_Init+0x674>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d045      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a50      	ldr	r2, [pc, #320]	@ (800bdc8 <HAL_DMA_Init+0x678>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d040      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a4e      	ldr	r2, [pc, #312]	@ (800bdcc <HAL_DMA_Init+0x67c>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d03b      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a4d      	ldr	r2, [pc, #308]	@ (800bdd0 <HAL_DMA_Init+0x680>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d036      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a4b      	ldr	r2, [pc, #300]	@ (800bdd4 <HAL_DMA_Init+0x684>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d031      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a4a      	ldr	r2, [pc, #296]	@ (800bdd8 <HAL_DMA_Init+0x688>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d02c      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a48      	ldr	r2, [pc, #288]	@ (800bddc <HAL_DMA_Init+0x68c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d027      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a47      	ldr	r2, [pc, #284]	@ (800bde0 <HAL_DMA_Init+0x690>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d022      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a45      	ldr	r2, [pc, #276]	@ (800bde4 <HAL_DMA_Init+0x694>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d01d      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a44      	ldr	r2, [pc, #272]	@ (800bde8 <HAL_DMA_Init+0x698>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d018      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a42      	ldr	r2, [pc, #264]	@ (800bdec <HAL_DMA_Init+0x69c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d013      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a41      	ldr	r2, [pc, #260]	@ (800bdf0 <HAL_DMA_Init+0x6a0>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00e      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a3f      	ldr	r2, [pc, #252]	@ (800bdf4 <HAL_DMA_Init+0x6a4>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d009      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a3e      	ldr	r2, [pc, #248]	@ (800bdf8 <HAL_DMA_Init+0x6a8>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d004      	beq.n	800bd0e <HAL_DMA_Init+0x5be>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a3c      	ldr	r2, [pc, #240]	@ (800bdfc <HAL_DMA_Init+0x6ac>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d101      	bne.n	800bd12 <HAL_DMA_Init+0x5c2>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e000      	b.n	800bd14 <HAL_DMA_Init+0x5c4>
 800bd12:	2300      	movs	r3, #0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d032      	beq.n	800bd7e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f002 fa5d 	bl	800e1d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	2b80      	cmp	r3, #128	@ 0x80
 800bd24:	d102      	bne.n	800bd2c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bd40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d010      	beq.n	800bd6c <HAL_DMA_Init+0x61c>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b08      	cmp	r3, #8
 800bd50:	d80c      	bhi.n	800bd6c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f002 fada 	bl	800e30c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bd68:	605a      	str	r2, [r3, #4]
 800bd6a:	e008      	b.n	800bd7e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	a7fdabf8 	.word	0xa7fdabf8
 800bd9c:	cccccccd 	.word	0xcccccccd
 800bda0:	40020010 	.word	0x40020010
 800bda4:	40020028 	.word	0x40020028
 800bda8:	40020040 	.word	0x40020040
 800bdac:	40020058 	.word	0x40020058
 800bdb0:	40020070 	.word	0x40020070
 800bdb4:	40020088 	.word	0x40020088
 800bdb8:	400200a0 	.word	0x400200a0
 800bdbc:	400200b8 	.word	0x400200b8
 800bdc0:	40020410 	.word	0x40020410
 800bdc4:	40020428 	.word	0x40020428
 800bdc8:	40020440 	.word	0x40020440
 800bdcc:	40020458 	.word	0x40020458
 800bdd0:	40020470 	.word	0x40020470
 800bdd4:	40020488 	.word	0x40020488
 800bdd8:	400204a0 	.word	0x400204a0
 800bddc:	400204b8 	.word	0x400204b8
 800bde0:	58025408 	.word	0x58025408
 800bde4:	5802541c 	.word	0x5802541c
 800bde8:	58025430 	.word	0x58025430
 800bdec:	58025444 	.word	0x58025444
 800bdf0:	58025458 	.word	0x58025458
 800bdf4:	5802546c 	.word	0x5802546c
 800bdf8:	58025480 	.word	0x58025480
 800bdfc:	58025494 	.word	0x58025494

0800be00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e226      	b.n	800c26a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800be22:	2b01      	cmp	r3, #1
 800be24:	d101      	bne.n	800be2a <HAL_DMA_Start_IT+0x2a>
 800be26:	2302      	movs	r3, #2
 800be28:	e21f      	b.n	800c26a <HAL_DMA_Start_IT+0x46a>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	f040 820a 	bne.w	800c254 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a68      	ldr	r2, [pc, #416]	@ (800bff4 <HAL_DMA_Start_IT+0x1f4>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d04a      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a66      	ldr	r2, [pc, #408]	@ (800bff8 <HAL_DMA_Start_IT+0x1f8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d045      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a65      	ldr	r2, [pc, #404]	@ (800bffc <HAL_DMA_Start_IT+0x1fc>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d040      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a63      	ldr	r2, [pc, #396]	@ (800c000 <HAL_DMA_Start_IT+0x200>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d03b      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a62      	ldr	r2, [pc, #392]	@ (800c004 <HAL_DMA_Start_IT+0x204>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d036      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a60      	ldr	r2, [pc, #384]	@ (800c008 <HAL_DMA_Start_IT+0x208>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d031      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a5f      	ldr	r2, [pc, #380]	@ (800c00c <HAL_DMA_Start_IT+0x20c>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d02c      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a5d      	ldr	r2, [pc, #372]	@ (800c010 <HAL_DMA_Start_IT+0x210>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d027      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a5c      	ldr	r2, [pc, #368]	@ (800c014 <HAL_DMA_Start_IT+0x214>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d022      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a5a      	ldr	r2, [pc, #360]	@ (800c018 <HAL_DMA_Start_IT+0x218>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d01d      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a59      	ldr	r2, [pc, #356]	@ (800c01c <HAL_DMA_Start_IT+0x21c>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d018      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a57      	ldr	r2, [pc, #348]	@ (800c020 <HAL_DMA_Start_IT+0x220>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d013      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a56      	ldr	r2, [pc, #344]	@ (800c024 <HAL_DMA_Start_IT+0x224>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d00e      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a54      	ldr	r2, [pc, #336]	@ (800c028 <HAL_DMA_Start_IT+0x228>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d009      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a53      	ldr	r2, [pc, #332]	@ (800c02c <HAL_DMA_Start_IT+0x22c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d004      	beq.n	800beee <HAL_DMA_Start_IT+0xee>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a51      	ldr	r2, [pc, #324]	@ (800c030 <HAL_DMA_Start_IT+0x230>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d108      	bne.n	800bf00 <HAL_DMA_Start_IT+0x100>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f022 0201 	bic.w	r2, r2, #1
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	e007      	b.n	800bf10 <HAL_DMA_Start_IT+0x110>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0201 	bic.w	r2, r2, #1
 800bf0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f001 fe84 	bl	800dc24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a34      	ldr	r2, [pc, #208]	@ (800bff4 <HAL_DMA_Start_IT+0x1f4>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d04a      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a33      	ldr	r2, [pc, #204]	@ (800bff8 <HAL_DMA_Start_IT+0x1f8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d045      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a31      	ldr	r2, [pc, #196]	@ (800bffc <HAL_DMA_Start_IT+0x1fc>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d040      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a30      	ldr	r2, [pc, #192]	@ (800c000 <HAL_DMA_Start_IT+0x200>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d03b      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a2e      	ldr	r2, [pc, #184]	@ (800c004 <HAL_DMA_Start_IT+0x204>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d036      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a2d      	ldr	r2, [pc, #180]	@ (800c008 <HAL_DMA_Start_IT+0x208>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d031      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a2b      	ldr	r2, [pc, #172]	@ (800c00c <HAL_DMA_Start_IT+0x20c>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d02c      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a2a      	ldr	r2, [pc, #168]	@ (800c010 <HAL_DMA_Start_IT+0x210>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d027      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a28      	ldr	r2, [pc, #160]	@ (800c014 <HAL_DMA_Start_IT+0x214>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d022      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a27      	ldr	r2, [pc, #156]	@ (800c018 <HAL_DMA_Start_IT+0x218>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d01d      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a25      	ldr	r2, [pc, #148]	@ (800c01c <HAL_DMA_Start_IT+0x21c>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d018      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a24      	ldr	r2, [pc, #144]	@ (800c020 <HAL_DMA_Start_IT+0x220>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d013      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a22      	ldr	r2, [pc, #136]	@ (800c024 <HAL_DMA_Start_IT+0x224>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d00e      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a21      	ldr	r2, [pc, #132]	@ (800c028 <HAL_DMA_Start_IT+0x228>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d009      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a1f      	ldr	r2, [pc, #124]	@ (800c02c <HAL_DMA_Start_IT+0x22c>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d004      	beq.n	800bfbc <HAL_DMA_Start_IT+0x1bc>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1e      	ldr	r2, [pc, #120]	@ (800c030 <HAL_DMA_Start_IT+0x230>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d101      	bne.n	800bfc0 <HAL_DMA_Start_IT+0x1c0>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e000      	b.n	800bfc2 <HAL_DMA_Start_IT+0x1c2>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d036      	beq.n	800c034 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f023 021e 	bic.w	r2, r3, #30
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f042 0216 	orr.w	r2, r2, #22
 800bfd8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d03e      	beq.n	800c060 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f042 0208 	orr.w	r2, r2, #8
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	e035      	b.n	800c060 <HAL_DMA_Start_IT+0x260>
 800bff4:	40020010 	.word	0x40020010
 800bff8:	40020028 	.word	0x40020028
 800bffc:	40020040 	.word	0x40020040
 800c000:	40020058 	.word	0x40020058
 800c004:	40020070 	.word	0x40020070
 800c008:	40020088 	.word	0x40020088
 800c00c:	400200a0 	.word	0x400200a0
 800c010:	400200b8 	.word	0x400200b8
 800c014:	40020410 	.word	0x40020410
 800c018:	40020428 	.word	0x40020428
 800c01c:	40020440 	.word	0x40020440
 800c020:	40020458 	.word	0x40020458
 800c024:	40020470 	.word	0x40020470
 800c028:	40020488 	.word	0x40020488
 800c02c:	400204a0 	.word	0x400204a0
 800c030:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f023 020e 	bic.w	r2, r3, #14
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f042 020a 	orr.w	r2, r2, #10
 800c046:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 0204 	orr.w	r2, r2, #4
 800c05e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a83      	ldr	r2, [pc, #524]	@ (800c274 <HAL_DMA_Start_IT+0x474>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d072      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a82      	ldr	r2, [pc, #520]	@ (800c278 <HAL_DMA_Start_IT+0x478>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d06d      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a80      	ldr	r2, [pc, #512]	@ (800c27c <HAL_DMA_Start_IT+0x47c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d068      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a7f      	ldr	r2, [pc, #508]	@ (800c280 <HAL_DMA_Start_IT+0x480>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d063      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a7d      	ldr	r2, [pc, #500]	@ (800c284 <HAL_DMA_Start_IT+0x484>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d05e      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a7c      	ldr	r2, [pc, #496]	@ (800c288 <HAL_DMA_Start_IT+0x488>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d059      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a7a      	ldr	r2, [pc, #488]	@ (800c28c <HAL_DMA_Start_IT+0x48c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d054      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a79      	ldr	r2, [pc, #484]	@ (800c290 <HAL_DMA_Start_IT+0x490>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d04f      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a77      	ldr	r2, [pc, #476]	@ (800c294 <HAL_DMA_Start_IT+0x494>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d04a      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a76      	ldr	r2, [pc, #472]	@ (800c298 <HAL_DMA_Start_IT+0x498>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d045      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a74      	ldr	r2, [pc, #464]	@ (800c29c <HAL_DMA_Start_IT+0x49c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d040      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a73      	ldr	r2, [pc, #460]	@ (800c2a0 <HAL_DMA_Start_IT+0x4a0>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d03b      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a71      	ldr	r2, [pc, #452]	@ (800c2a4 <HAL_DMA_Start_IT+0x4a4>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d036      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a70      	ldr	r2, [pc, #448]	@ (800c2a8 <HAL_DMA_Start_IT+0x4a8>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d031      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a6e      	ldr	r2, [pc, #440]	@ (800c2ac <HAL_DMA_Start_IT+0x4ac>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d02c      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a6d      	ldr	r2, [pc, #436]	@ (800c2b0 <HAL_DMA_Start_IT+0x4b0>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d027      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a6b      	ldr	r2, [pc, #428]	@ (800c2b4 <HAL_DMA_Start_IT+0x4b4>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d022      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a6a      	ldr	r2, [pc, #424]	@ (800c2b8 <HAL_DMA_Start_IT+0x4b8>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d01d      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a68      	ldr	r2, [pc, #416]	@ (800c2bc <HAL_DMA_Start_IT+0x4bc>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d018      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a67      	ldr	r2, [pc, #412]	@ (800c2c0 <HAL_DMA_Start_IT+0x4c0>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d013      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a65      	ldr	r2, [pc, #404]	@ (800c2c4 <HAL_DMA_Start_IT+0x4c4>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d00e      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a64      	ldr	r2, [pc, #400]	@ (800c2c8 <HAL_DMA_Start_IT+0x4c8>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d009      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a62      	ldr	r2, [pc, #392]	@ (800c2cc <HAL_DMA_Start_IT+0x4cc>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d004      	beq.n	800c150 <HAL_DMA_Start_IT+0x350>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a61      	ldr	r2, [pc, #388]	@ (800c2d0 <HAL_DMA_Start_IT+0x4d0>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d101      	bne.n	800c154 <HAL_DMA_Start_IT+0x354>
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <HAL_DMA_Start_IT+0x356>
 800c154:	2300      	movs	r3, #0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01a      	beq.n	800c190 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c176:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c18a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c18e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a37      	ldr	r2, [pc, #220]	@ (800c274 <HAL_DMA_Start_IT+0x474>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d04a      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a36      	ldr	r2, [pc, #216]	@ (800c278 <HAL_DMA_Start_IT+0x478>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d045      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a34      	ldr	r2, [pc, #208]	@ (800c27c <HAL_DMA_Start_IT+0x47c>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d040      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a33      	ldr	r2, [pc, #204]	@ (800c280 <HAL_DMA_Start_IT+0x480>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d03b      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a31      	ldr	r2, [pc, #196]	@ (800c284 <HAL_DMA_Start_IT+0x484>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d036      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a30      	ldr	r2, [pc, #192]	@ (800c288 <HAL_DMA_Start_IT+0x488>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d031      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a2e      	ldr	r2, [pc, #184]	@ (800c28c <HAL_DMA_Start_IT+0x48c>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d02c      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a2d      	ldr	r2, [pc, #180]	@ (800c290 <HAL_DMA_Start_IT+0x490>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d027      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c294 <HAL_DMA_Start_IT+0x494>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d022      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c298 <HAL_DMA_Start_IT+0x498>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d01d      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a28      	ldr	r2, [pc, #160]	@ (800c29c <HAL_DMA_Start_IT+0x49c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d018      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a27      	ldr	r2, [pc, #156]	@ (800c2a0 <HAL_DMA_Start_IT+0x4a0>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d013      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a25      	ldr	r2, [pc, #148]	@ (800c2a4 <HAL_DMA_Start_IT+0x4a4>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d00e      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a24      	ldr	r2, [pc, #144]	@ (800c2a8 <HAL_DMA_Start_IT+0x4a8>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d009      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a22      	ldr	r2, [pc, #136]	@ (800c2ac <HAL_DMA_Start_IT+0x4ac>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d004      	beq.n	800c230 <HAL_DMA_Start_IT+0x430>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a21      	ldr	r2, [pc, #132]	@ (800c2b0 <HAL_DMA_Start_IT+0x4b0>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d108      	bne.n	800c242 <HAL_DMA_Start_IT+0x442>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f042 0201 	orr.w	r2, r2, #1
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	e012      	b.n	800c268 <HAL_DMA_Start_IT+0x468>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f042 0201 	orr.w	r2, r2, #1
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e009      	b.n	800c268 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c25a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c268:	7dfb      	ldrb	r3, [r7, #23]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	40020010 	.word	0x40020010
 800c278:	40020028 	.word	0x40020028
 800c27c:	40020040 	.word	0x40020040
 800c280:	40020058 	.word	0x40020058
 800c284:	40020070 	.word	0x40020070
 800c288:	40020088 	.word	0x40020088
 800c28c:	400200a0 	.word	0x400200a0
 800c290:	400200b8 	.word	0x400200b8
 800c294:	40020410 	.word	0x40020410
 800c298:	40020428 	.word	0x40020428
 800c29c:	40020440 	.word	0x40020440
 800c2a0:	40020458 	.word	0x40020458
 800c2a4:	40020470 	.word	0x40020470
 800c2a8:	40020488 	.word	0x40020488
 800c2ac:	400204a0 	.word	0x400204a0
 800c2b0:	400204b8 	.word	0x400204b8
 800c2b4:	58025408 	.word	0x58025408
 800c2b8:	5802541c 	.word	0x5802541c
 800c2bc:	58025430 	.word	0x58025430
 800c2c0:	58025444 	.word	0x58025444
 800c2c4:	58025458 	.word	0x58025458
 800c2c8:	5802546c 	.word	0x5802546c
 800c2cc:	58025480 	.word	0x58025480
 800c2d0:	58025494 	.word	0x58025494

0800c2d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c2dc:	f7fd f902 	bl	80094e4 <HAL_GetTick>
 800c2e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e2dc      	b.n	800c8a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d008      	beq.n	800c30a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2280      	movs	r2, #128	@ 0x80
 800c2fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e2cd      	b.n	800c8a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a76      	ldr	r2, [pc, #472]	@ (800c4e8 <HAL_DMA_Abort+0x214>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d04a      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a74      	ldr	r2, [pc, #464]	@ (800c4ec <HAL_DMA_Abort+0x218>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d045      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a73      	ldr	r2, [pc, #460]	@ (800c4f0 <HAL_DMA_Abort+0x21c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d040      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a71      	ldr	r2, [pc, #452]	@ (800c4f4 <HAL_DMA_Abort+0x220>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d03b      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a70      	ldr	r2, [pc, #448]	@ (800c4f8 <HAL_DMA_Abort+0x224>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d036      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a6e      	ldr	r2, [pc, #440]	@ (800c4fc <HAL_DMA_Abort+0x228>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d031      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a6d      	ldr	r2, [pc, #436]	@ (800c500 <HAL_DMA_Abort+0x22c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d02c      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a6b      	ldr	r2, [pc, #428]	@ (800c504 <HAL_DMA_Abort+0x230>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d027      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a6a      	ldr	r2, [pc, #424]	@ (800c508 <HAL_DMA_Abort+0x234>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d022      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a68      	ldr	r2, [pc, #416]	@ (800c50c <HAL_DMA_Abort+0x238>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d01d      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a67      	ldr	r2, [pc, #412]	@ (800c510 <HAL_DMA_Abort+0x23c>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d018      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a65      	ldr	r2, [pc, #404]	@ (800c514 <HAL_DMA_Abort+0x240>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d013      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a64      	ldr	r2, [pc, #400]	@ (800c518 <HAL_DMA_Abort+0x244>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d00e      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a62      	ldr	r2, [pc, #392]	@ (800c51c <HAL_DMA_Abort+0x248>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d009      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a61      	ldr	r2, [pc, #388]	@ (800c520 <HAL_DMA_Abort+0x24c>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d004      	beq.n	800c3aa <HAL_DMA_Abort+0xd6>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a5f      	ldr	r2, [pc, #380]	@ (800c524 <HAL_DMA_Abort+0x250>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d101      	bne.n	800c3ae <HAL_DMA_Abort+0xda>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e000      	b.n	800c3b0 <HAL_DMA_Abort+0xdc>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d013      	beq.n	800c3dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f022 021e 	bic.w	r2, r2, #30
 800c3c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	695a      	ldr	r2, [r3, #20]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	e00a      	b.n	800c3f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f022 020e 	bic.w	r2, r2, #14
 800c3ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a3c      	ldr	r2, [pc, #240]	@ (800c4e8 <HAL_DMA_Abort+0x214>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d072      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a3a      	ldr	r2, [pc, #232]	@ (800c4ec <HAL_DMA_Abort+0x218>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d06d      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a39      	ldr	r2, [pc, #228]	@ (800c4f0 <HAL_DMA_Abort+0x21c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d068      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a37      	ldr	r2, [pc, #220]	@ (800c4f4 <HAL_DMA_Abort+0x220>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d063      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a36      	ldr	r2, [pc, #216]	@ (800c4f8 <HAL_DMA_Abort+0x224>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d05e      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a34      	ldr	r2, [pc, #208]	@ (800c4fc <HAL_DMA_Abort+0x228>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d059      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a33      	ldr	r2, [pc, #204]	@ (800c500 <HAL_DMA_Abort+0x22c>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d054      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a31      	ldr	r2, [pc, #196]	@ (800c504 <HAL_DMA_Abort+0x230>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d04f      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a30      	ldr	r2, [pc, #192]	@ (800c508 <HAL_DMA_Abort+0x234>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d04a      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a2e      	ldr	r2, [pc, #184]	@ (800c50c <HAL_DMA_Abort+0x238>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d045      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a2d      	ldr	r2, [pc, #180]	@ (800c510 <HAL_DMA_Abort+0x23c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d040      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a2b      	ldr	r2, [pc, #172]	@ (800c514 <HAL_DMA_Abort+0x240>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d03b      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a2a      	ldr	r2, [pc, #168]	@ (800c518 <HAL_DMA_Abort+0x244>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d036      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a28      	ldr	r2, [pc, #160]	@ (800c51c <HAL_DMA_Abort+0x248>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d031      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a27      	ldr	r2, [pc, #156]	@ (800c520 <HAL_DMA_Abort+0x24c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d02c      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a25      	ldr	r2, [pc, #148]	@ (800c524 <HAL_DMA_Abort+0x250>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d027      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a24      	ldr	r2, [pc, #144]	@ (800c528 <HAL_DMA_Abort+0x254>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d022      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a22      	ldr	r2, [pc, #136]	@ (800c52c <HAL_DMA_Abort+0x258>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d01d      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a21      	ldr	r2, [pc, #132]	@ (800c530 <HAL_DMA_Abort+0x25c>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d018      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a1f      	ldr	r2, [pc, #124]	@ (800c534 <HAL_DMA_Abort+0x260>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d013      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a1e      	ldr	r2, [pc, #120]	@ (800c538 <HAL_DMA_Abort+0x264>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d00e      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a1c      	ldr	r2, [pc, #112]	@ (800c53c <HAL_DMA_Abort+0x268>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d009      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a1b      	ldr	r2, [pc, #108]	@ (800c540 <HAL_DMA_Abort+0x26c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d004      	beq.n	800c4e2 <HAL_DMA_Abort+0x20e>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a19      	ldr	r2, [pc, #100]	@ (800c544 <HAL_DMA_Abort+0x270>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d132      	bne.n	800c548 <HAL_DMA_Abort+0x274>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e031      	b.n	800c54a <HAL_DMA_Abort+0x276>
 800c4e6:	bf00      	nop
 800c4e8:	40020010 	.word	0x40020010
 800c4ec:	40020028 	.word	0x40020028
 800c4f0:	40020040 	.word	0x40020040
 800c4f4:	40020058 	.word	0x40020058
 800c4f8:	40020070 	.word	0x40020070
 800c4fc:	40020088 	.word	0x40020088
 800c500:	400200a0 	.word	0x400200a0
 800c504:	400200b8 	.word	0x400200b8
 800c508:	40020410 	.word	0x40020410
 800c50c:	40020428 	.word	0x40020428
 800c510:	40020440 	.word	0x40020440
 800c514:	40020458 	.word	0x40020458
 800c518:	40020470 	.word	0x40020470
 800c51c:	40020488 	.word	0x40020488
 800c520:	400204a0 	.word	0x400204a0
 800c524:	400204b8 	.word	0x400204b8
 800c528:	58025408 	.word	0x58025408
 800c52c:	5802541c 	.word	0x5802541c
 800c530:	58025430 	.word	0x58025430
 800c534:	58025444 	.word	0x58025444
 800c538:	58025458 	.word	0x58025458
 800c53c:	5802546c 	.word	0x5802546c
 800c540:	58025480 	.word	0x58025480
 800c544:	58025494 	.word	0x58025494
 800c548:	2300      	movs	r3, #0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c55c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a6d      	ldr	r2, [pc, #436]	@ (800c718 <HAL_DMA_Abort+0x444>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d04a      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a6b      	ldr	r2, [pc, #428]	@ (800c71c <HAL_DMA_Abort+0x448>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d045      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a6a      	ldr	r2, [pc, #424]	@ (800c720 <HAL_DMA_Abort+0x44c>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d040      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a68      	ldr	r2, [pc, #416]	@ (800c724 <HAL_DMA_Abort+0x450>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d03b      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a67      	ldr	r2, [pc, #412]	@ (800c728 <HAL_DMA_Abort+0x454>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d036      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a65      	ldr	r2, [pc, #404]	@ (800c72c <HAL_DMA_Abort+0x458>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d031      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a64      	ldr	r2, [pc, #400]	@ (800c730 <HAL_DMA_Abort+0x45c>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d02c      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a62      	ldr	r2, [pc, #392]	@ (800c734 <HAL_DMA_Abort+0x460>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d027      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a61      	ldr	r2, [pc, #388]	@ (800c738 <HAL_DMA_Abort+0x464>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d022      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a5f      	ldr	r2, [pc, #380]	@ (800c73c <HAL_DMA_Abort+0x468>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d01d      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a5e      	ldr	r2, [pc, #376]	@ (800c740 <HAL_DMA_Abort+0x46c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d018      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a5c      	ldr	r2, [pc, #368]	@ (800c744 <HAL_DMA_Abort+0x470>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d013      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a5b      	ldr	r2, [pc, #364]	@ (800c748 <HAL_DMA_Abort+0x474>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d00e      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a59      	ldr	r2, [pc, #356]	@ (800c74c <HAL_DMA_Abort+0x478>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d009      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a58      	ldr	r2, [pc, #352]	@ (800c750 <HAL_DMA_Abort+0x47c>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d004      	beq.n	800c5fe <HAL_DMA_Abort+0x32a>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a56      	ldr	r2, [pc, #344]	@ (800c754 <HAL_DMA_Abort+0x480>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d108      	bne.n	800c610 <HAL_DMA_Abort+0x33c>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f022 0201 	bic.w	r2, r2, #1
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	e007      	b.n	800c620 <HAL_DMA_Abort+0x34c>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f022 0201 	bic.w	r2, r2, #1
 800c61e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c620:	e013      	b.n	800c64a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c622:	f7fc ff5f 	bl	80094e4 <HAL_GetTick>
 800c626:	4602      	mov	r2, r0
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	2b05      	cmp	r3, #5
 800c62e:	d90c      	bls.n	800c64a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2220      	movs	r2, #32
 800c634:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2203      	movs	r2, #3
 800c63a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e12d      	b.n	800c8a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e5      	bne.n	800c622 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a2f      	ldr	r2, [pc, #188]	@ (800c718 <HAL_DMA_Abort+0x444>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d04a      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a2d      	ldr	r2, [pc, #180]	@ (800c71c <HAL_DMA_Abort+0x448>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d045      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a2c      	ldr	r2, [pc, #176]	@ (800c720 <HAL_DMA_Abort+0x44c>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d040      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a2a      	ldr	r2, [pc, #168]	@ (800c724 <HAL_DMA_Abort+0x450>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d03b      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a29      	ldr	r2, [pc, #164]	@ (800c728 <HAL_DMA_Abort+0x454>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d036      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a27      	ldr	r2, [pc, #156]	@ (800c72c <HAL_DMA_Abort+0x458>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d031      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a26      	ldr	r2, [pc, #152]	@ (800c730 <HAL_DMA_Abort+0x45c>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d02c      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a24      	ldr	r2, [pc, #144]	@ (800c734 <HAL_DMA_Abort+0x460>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d027      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a23      	ldr	r2, [pc, #140]	@ (800c738 <HAL_DMA_Abort+0x464>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d022      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a21      	ldr	r2, [pc, #132]	@ (800c73c <HAL_DMA_Abort+0x468>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d01d      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a20      	ldr	r2, [pc, #128]	@ (800c740 <HAL_DMA_Abort+0x46c>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d018      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a1e      	ldr	r2, [pc, #120]	@ (800c744 <HAL_DMA_Abort+0x470>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d013      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a1d      	ldr	r2, [pc, #116]	@ (800c748 <HAL_DMA_Abort+0x474>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d00e      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c74c <HAL_DMA_Abort+0x478>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d009      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a1a      	ldr	r2, [pc, #104]	@ (800c750 <HAL_DMA_Abort+0x47c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d004      	beq.n	800c6f6 <HAL_DMA_Abort+0x422>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a18      	ldr	r2, [pc, #96]	@ (800c754 <HAL_DMA_Abort+0x480>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d101      	bne.n	800c6fa <HAL_DMA_Abort+0x426>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e000      	b.n	800c6fc <HAL_DMA_Abort+0x428>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d02b      	beq.n	800c758 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c704:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c70a:	f003 031f 	and.w	r3, r3, #31
 800c70e:	223f      	movs	r2, #63	@ 0x3f
 800c710:	409a      	lsls	r2, r3
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	609a      	str	r2, [r3, #8]
 800c716:	e02a      	b.n	800c76e <HAL_DMA_Abort+0x49a>
 800c718:	40020010 	.word	0x40020010
 800c71c:	40020028 	.word	0x40020028
 800c720:	40020040 	.word	0x40020040
 800c724:	40020058 	.word	0x40020058
 800c728:	40020070 	.word	0x40020070
 800c72c:	40020088 	.word	0x40020088
 800c730:	400200a0 	.word	0x400200a0
 800c734:	400200b8 	.word	0x400200b8
 800c738:	40020410 	.word	0x40020410
 800c73c:	40020428 	.word	0x40020428
 800c740:	40020440 	.word	0x40020440
 800c744:	40020458 	.word	0x40020458
 800c748:	40020470 	.word	0x40020470
 800c74c:	40020488 	.word	0x40020488
 800c750:	400204a0 	.word	0x400204a0
 800c754:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c75c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c762:	f003 031f 	and.w	r3, r3, #31
 800c766:	2201      	movs	r2, #1
 800c768:	409a      	lsls	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a4f      	ldr	r2, [pc, #316]	@ (800c8b0 <HAL_DMA_Abort+0x5dc>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d072      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a4d      	ldr	r2, [pc, #308]	@ (800c8b4 <HAL_DMA_Abort+0x5e0>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d06d      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a4c      	ldr	r2, [pc, #304]	@ (800c8b8 <HAL_DMA_Abort+0x5e4>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d068      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a4a      	ldr	r2, [pc, #296]	@ (800c8bc <HAL_DMA_Abort+0x5e8>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d063      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a49      	ldr	r2, [pc, #292]	@ (800c8c0 <HAL_DMA_Abort+0x5ec>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d05e      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a47      	ldr	r2, [pc, #284]	@ (800c8c4 <HAL_DMA_Abort+0x5f0>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d059      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a46      	ldr	r2, [pc, #280]	@ (800c8c8 <HAL_DMA_Abort+0x5f4>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d054      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a44      	ldr	r2, [pc, #272]	@ (800c8cc <HAL_DMA_Abort+0x5f8>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d04f      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a43      	ldr	r2, [pc, #268]	@ (800c8d0 <HAL_DMA_Abort+0x5fc>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d04a      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a41      	ldr	r2, [pc, #260]	@ (800c8d4 <HAL_DMA_Abort+0x600>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d045      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a40      	ldr	r2, [pc, #256]	@ (800c8d8 <HAL_DMA_Abort+0x604>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d040      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a3e      	ldr	r2, [pc, #248]	@ (800c8dc <HAL_DMA_Abort+0x608>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d03b      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a3d      	ldr	r2, [pc, #244]	@ (800c8e0 <HAL_DMA_Abort+0x60c>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d036      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a3b      	ldr	r2, [pc, #236]	@ (800c8e4 <HAL_DMA_Abort+0x610>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d031      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a3a      	ldr	r2, [pc, #232]	@ (800c8e8 <HAL_DMA_Abort+0x614>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d02c      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a38      	ldr	r2, [pc, #224]	@ (800c8ec <HAL_DMA_Abort+0x618>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d027      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a37      	ldr	r2, [pc, #220]	@ (800c8f0 <HAL_DMA_Abort+0x61c>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d022      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a35      	ldr	r2, [pc, #212]	@ (800c8f4 <HAL_DMA_Abort+0x620>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d01d      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a34      	ldr	r2, [pc, #208]	@ (800c8f8 <HAL_DMA_Abort+0x624>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d018      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a32      	ldr	r2, [pc, #200]	@ (800c8fc <HAL_DMA_Abort+0x628>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d013      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a31      	ldr	r2, [pc, #196]	@ (800c900 <HAL_DMA_Abort+0x62c>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d00e      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a2f      	ldr	r2, [pc, #188]	@ (800c904 <HAL_DMA_Abort+0x630>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d009      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a2e      	ldr	r2, [pc, #184]	@ (800c908 <HAL_DMA_Abort+0x634>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d004      	beq.n	800c85e <HAL_DMA_Abort+0x58a>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a2c      	ldr	r2, [pc, #176]	@ (800c90c <HAL_DMA_Abort+0x638>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d101      	bne.n	800c862 <HAL_DMA_Abort+0x58e>
 800c85e:	2301      	movs	r3, #1
 800c860:	e000      	b.n	800c864 <HAL_DMA_Abort+0x590>
 800c862:	2300      	movs	r3, #0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d015      	beq.n	800c894 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c870:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00c      	beq.n	800c894 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c888:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c892:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	40020010 	.word	0x40020010
 800c8b4:	40020028 	.word	0x40020028
 800c8b8:	40020040 	.word	0x40020040
 800c8bc:	40020058 	.word	0x40020058
 800c8c0:	40020070 	.word	0x40020070
 800c8c4:	40020088 	.word	0x40020088
 800c8c8:	400200a0 	.word	0x400200a0
 800c8cc:	400200b8 	.word	0x400200b8
 800c8d0:	40020410 	.word	0x40020410
 800c8d4:	40020428 	.word	0x40020428
 800c8d8:	40020440 	.word	0x40020440
 800c8dc:	40020458 	.word	0x40020458
 800c8e0:	40020470 	.word	0x40020470
 800c8e4:	40020488 	.word	0x40020488
 800c8e8:	400204a0 	.word	0x400204a0
 800c8ec:	400204b8 	.word	0x400204b8
 800c8f0:	58025408 	.word	0x58025408
 800c8f4:	5802541c 	.word	0x5802541c
 800c8f8:	58025430 	.word	0x58025430
 800c8fc:	58025444 	.word	0x58025444
 800c900:	58025458 	.word	0x58025458
 800c904:	5802546c 	.word	0x5802546c
 800c908:	58025480 	.word	0x58025480
 800c90c:	58025494 	.word	0x58025494

0800c910 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e237      	b.n	800cd92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d004      	beq.n	800c938 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2280      	movs	r2, #128	@ 0x80
 800c932:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	e22c      	b.n	800cd92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a5c      	ldr	r2, [pc, #368]	@ (800cab0 <HAL_DMA_Abort_IT+0x1a0>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d04a      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a5b      	ldr	r2, [pc, #364]	@ (800cab4 <HAL_DMA_Abort_IT+0x1a4>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d045      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a59      	ldr	r2, [pc, #356]	@ (800cab8 <HAL_DMA_Abort_IT+0x1a8>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d040      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a58      	ldr	r2, [pc, #352]	@ (800cabc <HAL_DMA_Abort_IT+0x1ac>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d03b      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a56      	ldr	r2, [pc, #344]	@ (800cac0 <HAL_DMA_Abort_IT+0x1b0>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d036      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a55      	ldr	r2, [pc, #340]	@ (800cac4 <HAL_DMA_Abort_IT+0x1b4>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d031      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a53      	ldr	r2, [pc, #332]	@ (800cac8 <HAL_DMA_Abort_IT+0x1b8>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d02c      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a52      	ldr	r2, [pc, #328]	@ (800cacc <HAL_DMA_Abort_IT+0x1bc>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d027      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a50      	ldr	r2, [pc, #320]	@ (800cad0 <HAL_DMA_Abort_IT+0x1c0>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d022      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a4f      	ldr	r2, [pc, #316]	@ (800cad4 <HAL_DMA_Abort_IT+0x1c4>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d01d      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a4d      	ldr	r2, [pc, #308]	@ (800cad8 <HAL_DMA_Abort_IT+0x1c8>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d018      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a4c      	ldr	r2, [pc, #304]	@ (800cadc <HAL_DMA_Abort_IT+0x1cc>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d013      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a4a      	ldr	r2, [pc, #296]	@ (800cae0 <HAL_DMA_Abort_IT+0x1d0>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d00e      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a49      	ldr	r2, [pc, #292]	@ (800cae4 <HAL_DMA_Abort_IT+0x1d4>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d009      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a47      	ldr	r2, [pc, #284]	@ (800cae8 <HAL_DMA_Abort_IT+0x1d8>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d004      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0xc8>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a46      	ldr	r2, [pc, #280]	@ (800caec <HAL_DMA_Abort_IT+0x1dc>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d101      	bne.n	800c9dc <HAL_DMA_Abort_IT+0xcc>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e000      	b.n	800c9de <HAL_DMA_Abort_IT+0xce>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 8086 	beq.w	800caf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2204      	movs	r2, #4
 800c9e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a2f      	ldr	r2, [pc, #188]	@ (800cab0 <HAL_DMA_Abort_IT+0x1a0>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d04a      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a2e      	ldr	r2, [pc, #184]	@ (800cab4 <HAL_DMA_Abort_IT+0x1a4>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d045      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a2c      	ldr	r2, [pc, #176]	@ (800cab8 <HAL_DMA_Abort_IT+0x1a8>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d040      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a2b      	ldr	r2, [pc, #172]	@ (800cabc <HAL_DMA_Abort_IT+0x1ac>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d03b      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a29      	ldr	r2, [pc, #164]	@ (800cac0 <HAL_DMA_Abort_IT+0x1b0>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d036      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a28      	ldr	r2, [pc, #160]	@ (800cac4 <HAL_DMA_Abort_IT+0x1b4>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d031      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a26      	ldr	r2, [pc, #152]	@ (800cac8 <HAL_DMA_Abort_IT+0x1b8>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d02c      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a25      	ldr	r2, [pc, #148]	@ (800cacc <HAL_DMA_Abort_IT+0x1bc>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d027      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a23      	ldr	r2, [pc, #140]	@ (800cad0 <HAL_DMA_Abort_IT+0x1c0>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d022      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a22      	ldr	r2, [pc, #136]	@ (800cad4 <HAL_DMA_Abort_IT+0x1c4>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d01d      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a20      	ldr	r2, [pc, #128]	@ (800cad8 <HAL_DMA_Abort_IT+0x1c8>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d018      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a1f      	ldr	r2, [pc, #124]	@ (800cadc <HAL_DMA_Abort_IT+0x1cc>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d013      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a1d      	ldr	r2, [pc, #116]	@ (800cae0 <HAL_DMA_Abort_IT+0x1d0>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d00e      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a1c      	ldr	r2, [pc, #112]	@ (800cae4 <HAL_DMA_Abort_IT+0x1d4>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d009      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a1a      	ldr	r2, [pc, #104]	@ (800cae8 <HAL_DMA_Abort_IT+0x1d8>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d004      	beq.n	800ca8c <HAL_DMA_Abort_IT+0x17c>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a19      	ldr	r2, [pc, #100]	@ (800caec <HAL_DMA_Abort_IT+0x1dc>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d108      	bne.n	800ca9e <HAL_DMA_Abort_IT+0x18e>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f022 0201 	bic.w	r2, r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	e178      	b.n	800cd90 <HAL_DMA_Abort_IT+0x480>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f022 0201 	bic.w	r2, r2, #1
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	e16f      	b.n	800cd90 <HAL_DMA_Abort_IT+0x480>
 800cab0:	40020010 	.word	0x40020010
 800cab4:	40020028 	.word	0x40020028
 800cab8:	40020040 	.word	0x40020040
 800cabc:	40020058 	.word	0x40020058
 800cac0:	40020070 	.word	0x40020070
 800cac4:	40020088 	.word	0x40020088
 800cac8:	400200a0 	.word	0x400200a0
 800cacc:	400200b8 	.word	0x400200b8
 800cad0:	40020410 	.word	0x40020410
 800cad4:	40020428 	.word	0x40020428
 800cad8:	40020440 	.word	0x40020440
 800cadc:	40020458 	.word	0x40020458
 800cae0:	40020470 	.word	0x40020470
 800cae4:	40020488 	.word	0x40020488
 800cae8:	400204a0 	.word	0x400204a0
 800caec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 020e 	bic.w	r2, r2, #14
 800cafe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a6c      	ldr	r2, [pc, #432]	@ (800ccb8 <HAL_DMA_Abort_IT+0x3a8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d04a      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a6b      	ldr	r2, [pc, #428]	@ (800ccbc <HAL_DMA_Abort_IT+0x3ac>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d045      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a69      	ldr	r2, [pc, #420]	@ (800ccc0 <HAL_DMA_Abort_IT+0x3b0>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d040      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a68      	ldr	r2, [pc, #416]	@ (800ccc4 <HAL_DMA_Abort_IT+0x3b4>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d03b      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a66      	ldr	r2, [pc, #408]	@ (800ccc8 <HAL_DMA_Abort_IT+0x3b8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d036      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a65      	ldr	r2, [pc, #404]	@ (800cccc <HAL_DMA_Abort_IT+0x3bc>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d031      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a63      	ldr	r2, [pc, #396]	@ (800ccd0 <HAL_DMA_Abort_IT+0x3c0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d02c      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a62      	ldr	r2, [pc, #392]	@ (800ccd4 <HAL_DMA_Abort_IT+0x3c4>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d027      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a60      	ldr	r2, [pc, #384]	@ (800ccd8 <HAL_DMA_Abort_IT+0x3c8>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d022      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a5f      	ldr	r2, [pc, #380]	@ (800ccdc <HAL_DMA_Abort_IT+0x3cc>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d01d      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a5d      	ldr	r2, [pc, #372]	@ (800cce0 <HAL_DMA_Abort_IT+0x3d0>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d018      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a5c      	ldr	r2, [pc, #368]	@ (800cce4 <HAL_DMA_Abort_IT+0x3d4>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d013      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a5a      	ldr	r2, [pc, #360]	@ (800cce8 <HAL_DMA_Abort_IT+0x3d8>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d00e      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a59      	ldr	r2, [pc, #356]	@ (800ccec <HAL_DMA_Abort_IT+0x3dc>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d009      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a57      	ldr	r2, [pc, #348]	@ (800ccf0 <HAL_DMA_Abort_IT+0x3e0>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d004      	beq.n	800cba0 <HAL_DMA_Abort_IT+0x290>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a56      	ldr	r2, [pc, #344]	@ (800ccf4 <HAL_DMA_Abort_IT+0x3e4>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d108      	bne.n	800cbb2 <HAL_DMA_Abort_IT+0x2a2>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f022 0201 	bic.w	r2, r2, #1
 800cbae:	601a      	str	r2, [r3, #0]
 800cbb0:	e007      	b.n	800cbc2 <HAL_DMA_Abort_IT+0x2b2>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0201 	bic.w	r2, r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a3c      	ldr	r2, [pc, #240]	@ (800ccb8 <HAL_DMA_Abort_IT+0x3a8>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d072      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a3a      	ldr	r2, [pc, #232]	@ (800ccbc <HAL_DMA_Abort_IT+0x3ac>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d06d      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a39      	ldr	r2, [pc, #228]	@ (800ccc0 <HAL_DMA_Abort_IT+0x3b0>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d068      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a37      	ldr	r2, [pc, #220]	@ (800ccc4 <HAL_DMA_Abort_IT+0x3b4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d063      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a36      	ldr	r2, [pc, #216]	@ (800ccc8 <HAL_DMA_Abort_IT+0x3b8>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d05e      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a34      	ldr	r2, [pc, #208]	@ (800cccc <HAL_DMA_Abort_IT+0x3bc>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d059      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a33      	ldr	r2, [pc, #204]	@ (800ccd0 <HAL_DMA_Abort_IT+0x3c0>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d054      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a31      	ldr	r2, [pc, #196]	@ (800ccd4 <HAL_DMA_Abort_IT+0x3c4>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d04f      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a30      	ldr	r2, [pc, #192]	@ (800ccd8 <HAL_DMA_Abort_IT+0x3c8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d04a      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a2e      	ldr	r2, [pc, #184]	@ (800ccdc <HAL_DMA_Abort_IT+0x3cc>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d045      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a2d      	ldr	r2, [pc, #180]	@ (800cce0 <HAL_DMA_Abort_IT+0x3d0>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d040      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a2b      	ldr	r2, [pc, #172]	@ (800cce4 <HAL_DMA_Abort_IT+0x3d4>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d03b      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	@ (800cce8 <HAL_DMA_Abort_IT+0x3d8>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d036      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a28      	ldr	r2, [pc, #160]	@ (800ccec <HAL_DMA_Abort_IT+0x3dc>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d031      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a27      	ldr	r2, [pc, #156]	@ (800ccf0 <HAL_DMA_Abort_IT+0x3e0>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d02c      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a25      	ldr	r2, [pc, #148]	@ (800ccf4 <HAL_DMA_Abort_IT+0x3e4>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d027      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a24      	ldr	r2, [pc, #144]	@ (800ccf8 <HAL_DMA_Abort_IT+0x3e8>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d022      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a22      	ldr	r2, [pc, #136]	@ (800ccfc <HAL_DMA_Abort_IT+0x3ec>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d01d      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a21      	ldr	r2, [pc, #132]	@ (800cd00 <HAL_DMA_Abort_IT+0x3f0>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d018      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a1f      	ldr	r2, [pc, #124]	@ (800cd04 <HAL_DMA_Abort_IT+0x3f4>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d013      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a1e      	ldr	r2, [pc, #120]	@ (800cd08 <HAL_DMA_Abort_IT+0x3f8>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d00e      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a1c      	ldr	r2, [pc, #112]	@ (800cd0c <HAL_DMA_Abort_IT+0x3fc>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d009      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a1b      	ldr	r2, [pc, #108]	@ (800cd10 <HAL_DMA_Abort_IT+0x400>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d004      	beq.n	800ccb2 <HAL_DMA_Abort_IT+0x3a2>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a19      	ldr	r2, [pc, #100]	@ (800cd14 <HAL_DMA_Abort_IT+0x404>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d132      	bne.n	800cd18 <HAL_DMA_Abort_IT+0x408>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e031      	b.n	800cd1a <HAL_DMA_Abort_IT+0x40a>
 800ccb6:	bf00      	nop
 800ccb8:	40020010 	.word	0x40020010
 800ccbc:	40020028 	.word	0x40020028
 800ccc0:	40020040 	.word	0x40020040
 800ccc4:	40020058 	.word	0x40020058
 800ccc8:	40020070 	.word	0x40020070
 800cccc:	40020088 	.word	0x40020088
 800ccd0:	400200a0 	.word	0x400200a0
 800ccd4:	400200b8 	.word	0x400200b8
 800ccd8:	40020410 	.word	0x40020410
 800ccdc:	40020428 	.word	0x40020428
 800cce0:	40020440 	.word	0x40020440
 800cce4:	40020458 	.word	0x40020458
 800cce8:	40020470 	.word	0x40020470
 800ccec:	40020488 	.word	0x40020488
 800ccf0:	400204a0 	.word	0x400204a0
 800ccf4:	400204b8 	.word	0x400204b8
 800ccf8:	58025408 	.word	0x58025408
 800ccfc:	5802541c 	.word	0x5802541c
 800cd00:	58025430 	.word	0x58025430
 800cd04:	58025444 	.word	0x58025444
 800cd08:	58025458 	.word	0x58025458
 800cd0c:	5802546c 	.word	0x5802546c
 800cd10:	58025480 	.word	0x58025480
 800cd14:	58025494 	.word	0x58025494
 800cd18:	2300      	movs	r3, #0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d028      	beq.n	800cd70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd38:	f003 031f 	and.w	r3, r3, #31
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	409a      	lsls	r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cd4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00c      	beq.n	800cd70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cd6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop

0800cd9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b08a      	sub	sp, #40	@ 0x28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800cda4:	2300      	movs	r3, #0
 800cda6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cda8:	4b67      	ldr	r3, [pc, #412]	@ (800cf48 <HAL_DMA_IRQHandler+0x1ac>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a67      	ldr	r2, [pc, #412]	@ (800cf4c <HAL_DMA_IRQHandler+0x1b0>)
 800cdae:	fba2 2303 	umull	r2, r3, r2, r3
 800cdb2:	0a9b      	lsrs	r3, r3, #10
 800cdb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a5f      	ldr	r2, [pc, #380]	@ (800cf50 <HAL_DMA_IRQHandler+0x1b4>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d04a      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a5d      	ldr	r2, [pc, #372]	@ (800cf54 <HAL_DMA_IRQHandler+0x1b8>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d045      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a5c      	ldr	r2, [pc, #368]	@ (800cf58 <HAL_DMA_IRQHandler+0x1bc>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d040      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a5a      	ldr	r2, [pc, #360]	@ (800cf5c <HAL_DMA_IRQHandler+0x1c0>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d03b      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a59      	ldr	r2, [pc, #356]	@ (800cf60 <HAL_DMA_IRQHandler+0x1c4>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d036      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a57      	ldr	r2, [pc, #348]	@ (800cf64 <HAL_DMA_IRQHandler+0x1c8>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d031      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a56      	ldr	r2, [pc, #344]	@ (800cf68 <HAL_DMA_IRQHandler+0x1cc>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d02c      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a54      	ldr	r2, [pc, #336]	@ (800cf6c <HAL_DMA_IRQHandler+0x1d0>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d027      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a53      	ldr	r2, [pc, #332]	@ (800cf70 <HAL_DMA_IRQHandler+0x1d4>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d022      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a51      	ldr	r2, [pc, #324]	@ (800cf74 <HAL_DMA_IRQHandler+0x1d8>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d01d      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a50      	ldr	r2, [pc, #320]	@ (800cf78 <HAL_DMA_IRQHandler+0x1dc>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d018      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a4e      	ldr	r2, [pc, #312]	@ (800cf7c <HAL_DMA_IRQHandler+0x1e0>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d013      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a4d      	ldr	r2, [pc, #308]	@ (800cf80 <HAL_DMA_IRQHandler+0x1e4>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d00e      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a4b      	ldr	r2, [pc, #300]	@ (800cf84 <HAL_DMA_IRQHandler+0x1e8>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d009      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a4a      	ldr	r2, [pc, #296]	@ (800cf88 <HAL_DMA_IRQHandler+0x1ec>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d004      	beq.n	800ce6e <HAL_DMA_IRQHandler+0xd2>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a48      	ldr	r2, [pc, #288]	@ (800cf8c <HAL_DMA_IRQHandler+0x1f0>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d101      	bne.n	800ce72 <HAL_DMA_IRQHandler+0xd6>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <HAL_DMA_IRQHandler+0xd8>
 800ce72:	2300      	movs	r3, #0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 842b 	beq.w	800d6d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce7e:	f003 031f 	and.w	r3, r3, #31
 800ce82:	2208      	movs	r2, #8
 800ce84:	409a      	lsls	r2, r3
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	4013      	ands	r3, r2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f000 80a2 	beq.w	800cfd4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a2e      	ldr	r2, [pc, #184]	@ (800cf50 <HAL_DMA_IRQHandler+0x1b4>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d04a      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a2d      	ldr	r2, [pc, #180]	@ (800cf54 <HAL_DMA_IRQHandler+0x1b8>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d045      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a2b      	ldr	r2, [pc, #172]	@ (800cf58 <HAL_DMA_IRQHandler+0x1bc>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d040      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a2a      	ldr	r2, [pc, #168]	@ (800cf5c <HAL_DMA_IRQHandler+0x1c0>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d03b      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a28      	ldr	r2, [pc, #160]	@ (800cf60 <HAL_DMA_IRQHandler+0x1c4>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d036      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a27      	ldr	r2, [pc, #156]	@ (800cf64 <HAL_DMA_IRQHandler+0x1c8>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d031      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a25      	ldr	r2, [pc, #148]	@ (800cf68 <HAL_DMA_IRQHandler+0x1cc>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d02c      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a24      	ldr	r2, [pc, #144]	@ (800cf6c <HAL_DMA_IRQHandler+0x1d0>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d027      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a22      	ldr	r2, [pc, #136]	@ (800cf70 <HAL_DMA_IRQHandler+0x1d4>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d022      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a21      	ldr	r2, [pc, #132]	@ (800cf74 <HAL_DMA_IRQHandler+0x1d8>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d01d      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a1f      	ldr	r2, [pc, #124]	@ (800cf78 <HAL_DMA_IRQHandler+0x1dc>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d018      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a1e      	ldr	r2, [pc, #120]	@ (800cf7c <HAL_DMA_IRQHandler+0x1e0>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d013      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a1c      	ldr	r2, [pc, #112]	@ (800cf80 <HAL_DMA_IRQHandler+0x1e4>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d00e      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a1b      	ldr	r2, [pc, #108]	@ (800cf84 <HAL_DMA_IRQHandler+0x1e8>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d009      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a19      	ldr	r2, [pc, #100]	@ (800cf88 <HAL_DMA_IRQHandler+0x1ec>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d004      	beq.n	800cf30 <HAL_DMA_IRQHandler+0x194>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a18      	ldr	r2, [pc, #96]	@ (800cf8c <HAL_DMA_IRQHandler+0x1f0>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d12f      	bne.n	800cf90 <HAL_DMA_IRQHandler+0x1f4>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f003 0304 	and.w	r3, r3, #4
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	bf14      	ite	ne
 800cf3e:	2301      	movne	r3, #1
 800cf40:	2300      	moveq	r3, #0
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	e02e      	b.n	800cfa4 <HAL_DMA_IRQHandler+0x208>
 800cf46:	bf00      	nop
 800cf48:	24000004 	.word	0x24000004
 800cf4c:	1b4e81b5 	.word	0x1b4e81b5
 800cf50:	40020010 	.word	0x40020010
 800cf54:	40020028 	.word	0x40020028
 800cf58:	40020040 	.word	0x40020040
 800cf5c:	40020058 	.word	0x40020058
 800cf60:	40020070 	.word	0x40020070
 800cf64:	40020088 	.word	0x40020088
 800cf68:	400200a0 	.word	0x400200a0
 800cf6c:	400200b8 	.word	0x400200b8
 800cf70:	40020410 	.word	0x40020410
 800cf74:	40020428 	.word	0x40020428
 800cf78:	40020440 	.word	0x40020440
 800cf7c:	40020458 	.word	0x40020458
 800cf80:	40020470 	.word	0x40020470
 800cf84:	40020488 	.word	0x40020488
 800cf88:	400204a0 	.word	0x400204a0
 800cf8c:	400204b8 	.word	0x400204b8
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0308 	and.w	r3, r3, #8
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	bf14      	ite	ne
 800cf9e:	2301      	movne	r3, #1
 800cfa0:	2300      	moveq	r3, #0
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d015      	beq.n	800cfd4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f022 0204 	bic.w	r2, r2, #4
 800cfb6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfbc:	f003 031f 	and.w	r3, r3, #31
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	409a      	lsls	r2, r3
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfcc:	f043 0201 	orr.w	r2, r3, #1
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	69ba      	ldr	r2, [r7, #24]
 800cfde:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d06e      	beq.n	800d0c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a69      	ldr	r2, [pc, #420]	@ (800d194 <HAL_DMA_IRQHandler+0x3f8>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d04a      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a67      	ldr	r2, [pc, #412]	@ (800d198 <HAL_DMA_IRQHandler+0x3fc>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d045      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a66      	ldr	r2, [pc, #408]	@ (800d19c <HAL_DMA_IRQHandler+0x400>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d040      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a64      	ldr	r2, [pc, #400]	@ (800d1a0 <HAL_DMA_IRQHandler+0x404>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d03b      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a63      	ldr	r2, [pc, #396]	@ (800d1a4 <HAL_DMA_IRQHandler+0x408>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d036      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a61      	ldr	r2, [pc, #388]	@ (800d1a8 <HAL_DMA_IRQHandler+0x40c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d031      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a60      	ldr	r2, [pc, #384]	@ (800d1ac <HAL_DMA_IRQHandler+0x410>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d02c      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a5e      	ldr	r2, [pc, #376]	@ (800d1b0 <HAL_DMA_IRQHandler+0x414>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d027      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a5d      	ldr	r2, [pc, #372]	@ (800d1b4 <HAL_DMA_IRQHandler+0x418>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d022      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a5b      	ldr	r2, [pc, #364]	@ (800d1b8 <HAL_DMA_IRQHandler+0x41c>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d01d      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a5a      	ldr	r2, [pc, #360]	@ (800d1bc <HAL_DMA_IRQHandler+0x420>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d018      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a58      	ldr	r2, [pc, #352]	@ (800d1c0 <HAL_DMA_IRQHandler+0x424>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d013      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a57      	ldr	r2, [pc, #348]	@ (800d1c4 <HAL_DMA_IRQHandler+0x428>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d00e      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a55      	ldr	r2, [pc, #340]	@ (800d1c8 <HAL_DMA_IRQHandler+0x42c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d009      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a54      	ldr	r2, [pc, #336]	@ (800d1cc <HAL_DMA_IRQHandler+0x430>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d004      	beq.n	800d08a <HAL_DMA_IRQHandler+0x2ee>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a52      	ldr	r2, [pc, #328]	@ (800d1d0 <HAL_DMA_IRQHandler+0x434>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d10a      	bne.n	800d0a0 <HAL_DMA_IRQHandler+0x304>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	695b      	ldr	r3, [r3, #20]
 800d090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d094:	2b00      	cmp	r3, #0
 800d096:	bf14      	ite	ne
 800d098:	2301      	movne	r3, #1
 800d09a:	2300      	moveq	r3, #0
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	e003      	b.n	800d0a8 <HAL_DMA_IRQHandler+0x30c>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00d      	beq.n	800d0c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0b0:	f003 031f 	and.w	r3, r3, #31
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	409a      	lsls	r2, r3
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0c0:	f043 0202 	orr.w	r2, r3, #2
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0cc:	f003 031f 	and.w	r3, r3, #31
 800d0d0:	2204      	movs	r2, #4
 800d0d2:	409a      	lsls	r2, r3
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f000 808f 	beq.w	800d1fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a2c      	ldr	r2, [pc, #176]	@ (800d194 <HAL_DMA_IRQHandler+0x3f8>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d04a      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a2a      	ldr	r2, [pc, #168]	@ (800d198 <HAL_DMA_IRQHandler+0x3fc>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d045      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a29      	ldr	r2, [pc, #164]	@ (800d19c <HAL_DMA_IRQHandler+0x400>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d040      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a27      	ldr	r2, [pc, #156]	@ (800d1a0 <HAL_DMA_IRQHandler+0x404>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d03b      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a26      	ldr	r2, [pc, #152]	@ (800d1a4 <HAL_DMA_IRQHandler+0x408>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d036      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a24      	ldr	r2, [pc, #144]	@ (800d1a8 <HAL_DMA_IRQHandler+0x40c>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d031      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a23      	ldr	r2, [pc, #140]	@ (800d1ac <HAL_DMA_IRQHandler+0x410>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d02c      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a21      	ldr	r2, [pc, #132]	@ (800d1b0 <HAL_DMA_IRQHandler+0x414>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d027      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a20      	ldr	r2, [pc, #128]	@ (800d1b4 <HAL_DMA_IRQHandler+0x418>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d022      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a1e      	ldr	r2, [pc, #120]	@ (800d1b8 <HAL_DMA_IRQHandler+0x41c>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d01d      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a1d      	ldr	r2, [pc, #116]	@ (800d1bc <HAL_DMA_IRQHandler+0x420>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d018      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a1b      	ldr	r2, [pc, #108]	@ (800d1c0 <HAL_DMA_IRQHandler+0x424>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d013      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a1a      	ldr	r2, [pc, #104]	@ (800d1c4 <HAL_DMA_IRQHandler+0x428>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d00e      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a18      	ldr	r2, [pc, #96]	@ (800d1c8 <HAL_DMA_IRQHandler+0x42c>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d009      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a17      	ldr	r2, [pc, #92]	@ (800d1cc <HAL_DMA_IRQHandler+0x430>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d004      	beq.n	800d17e <HAL_DMA_IRQHandler+0x3e2>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a15      	ldr	r2, [pc, #84]	@ (800d1d0 <HAL_DMA_IRQHandler+0x434>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d12a      	bne.n	800d1d4 <HAL_DMA_IRQHandler+0x438>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0302 	and.w	r3, r3, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bf14      	ite	ne
 800d18c:	2301      	movne	r3, #1
 800d18e:	2300      	moveq	r3, #0
 800d190:	b2db      	uxtb	r3, r3
 800d192:	e023      	b.n	800d1dc <HAL_DMA_IRQHandler+0x440>
 800d194:	40020010 	.word	0x40020010
 800d198:	40020028 	.word	0x40020028
 800d19c:	40020040 	.word	0x40020040
 800d1a0:	40020058 	.word	0x40020058
 800d1a4:	40020070 	.word	0x40020070
 800d1a8:	40020088 	.word	0x40020088
 800d1ac:	400200a0 	.word	0x400200a0
 800d1b0:	400200b8 	.word	0x400200b8
 800d1b4:	40020410 	.word	0x40020410
 800d1b8:	40020428 	.word	0x40020428
 800d1bc:	40020440 	.word	0x40020440
 800d1c0:	40020458 	.word	0x40020458
 800d1c4:	40020470 	.word	0x40020470
 800d1c8:	40020488 	.word	0x40020488
 800d1cc:	400204a0 	.word	0x400204a0
 800d1d0:	400204b8 	.word	0x400204b8
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00d      	beq.n	800d1fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1e4:	f003 031f 	and.w	r3, r3, #31
 800d1e8:	2204      	movs	r2, #4
 800d1ea:	409a      	lsls	r2, r3
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1f4:	f043 0204 	orr.w	r2, r3, #4
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d200:	f003 031f 	and.w	r3, r3, #31
 800d204:	2210      	movs	r2, #16
 800d206:	409a      	lsls	r2, r3
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	4013      	ands	r3, r2
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 80a6 	beq.w	800d35e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a85      	ldr	r2, [pc, #532]	@ (800d42c <HAL_DMA_IRQHandler+0x690>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d04a      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a83      	ldr	r2, [pc, #524]	@ (800d430 <HAL_DMA_IRQHandler+0x694>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d045      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a82      	ldr	r2, [pc, #520]	@ (800d434 <HAL_DMA_IRQHandler+0x698>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d040      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a80      	ldr	r2, [pc, #512]	@ (800d438 <HAL_DMA_IRQHandler+0x69c>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d03b      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a7f      	ldr	r2, [pc, #508]	@ (800d43c <HAL_DMA_IRQHandler+0x6a0>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d036      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a7d      	ldr	r2, [pc, #500]	@ (800d440 <HAL_DMA_IRQHandler+0x6a4>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d031      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a7c      	ldr	r2, [pc, #496]	@ (800d444 <HAL_DMA_IRQHandler+0x6a8>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d02c      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a7a      	ldr	r2, [pc, #488]	@ (800d448 <HAL_DMA_IRQHandler+0x6ac>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d027      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a79      	ldr	r2, [pc, #484]	@ (800d44c <HAL_DMA_IRQHandler+0x6b0>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d022      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a77      	ldr	r2, [pc, #476]	@ (800d450 <HAL_DMA_IRQHandler+0x6b4>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d01d      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a76      	ldr	r2, [pc, #472]	@ (800d454 <HAL_DMA_IRQHandler+0x6b8>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d018      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a74      	ldr	r2, [pc, #464]	@ (800d458 <HAL_DMA_IRQHandler+0x6bc>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d013      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a73      	ldr	r2, [pc, #460]	@ (800d45c <HAL_DMA_IRQHandler+0x6c0>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d00e      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a71      	ldr	r2, [pc, #452]	@ (800d460 <HAL_DMA_IRQHandler+0x6c4>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d009      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a70      	ldr	r2, [pc, #448]	@ (800d464 <HAL_DMA_IRQHandler+0x6c8>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d004      	beq.n	800d2b2 <HAL_DMA_IRQHandler+0x516>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a6e      	ldr	r2, [pc, #440]	@ (800d468 <HAL_DMA_IRQHandler+0x6cc>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d10a      	bne.n	800d2c8 <HAL_DMA_IRQHandler+0x52c>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 0308 	and.w	r3, r3, #8
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	bf14      	ite	ne
 800d2c0:	2301      	movne	r3, #1
 800d2c2:	2300      	moveq	r3, #0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	e009      	b.n	800d2dc <HAL_DMA_IRQHandler+0x540>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 0304 	and.w	r3, r3, #4
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bf14      	ite	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	2300      	moveq	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d03e      	beq.n	800d35e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2e4:	f003 031f 	and.w	r3, r3, #31
 800d2e8:	2210      	movs	r2, #16
 800d2ea:	409a      	lsls	r2, r3
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d018      	beq.n	800d330 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d108      	bne.n	800d31e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d310:	2b00      	cmp	r3, #0
 800d312:	d024      	beq.n	800d35e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	4798      	blx	r3
 800d31c:	e01f      	b.n	800d35e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d322:	2b00      	cmp	r3, #0
 800d324:	d01b      	beq.n	800d35e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	4798      	blx	r3
 800d32e:	e016      	b.n	800d35e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d107      	bne.n	800d34e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f022 0208 	bic.w	r2, r2, #8
 800d34c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d362:	f003 031f 	and.w	r3, r3, #31
 800d366:	2220      	movs	r2, #32
 800d368:	409a      	lsls	r2, r3
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	4013      	ands	r3, r2
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 8110 	beq.w	800d594 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a2c      	ldr	r2, [pc, #176]	@ (800d42c <HAL_DMA_IRQHandler+0x690>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d04a      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a2b      	ldr	r2, [pc, #172]	@ (800d430 <HAL_DMA_IRQHandler+0x694>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d045      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a29      	ldr	r2, [pc, #164]	@ (800d434 <HAL_DMA_IRQHandler+0x698>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d040      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a28      	ldr	r2, [pc, #160]	@ (800d438 <HAL_DMA_IRQHandler+0x69c>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d03b      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a26      	ldr	r2, [pc, #152]	@ (800d43c <HAL_DMA_IRQHandler+0x6a0>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d036      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a25      	ldr	r2, [pc, #148]	@ (800d440 <HAL_DMA_IRQHandler+0x6a4>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d031      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a23      	ldr	r2, [pc, #140]	@ (800d444 <HAL_DMA_IRQHandler+0x6a8>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d02c      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a22      	ldr	r2, [pc, #136]	@ (800d448 <HAL_DMA_IRQHandler+0x6ac>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d027      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a20      	ldr	r2, [pc, #128]	@ (800d44c <HAL_DMA_IRQHandler+0x6b0>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d022      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a1f      	ldr	r2, [pc, #124]	@ (800d450 <HAL_DMA_IRQHandler+0x6b4>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d01d      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a1d      	ldr	r2, [pc, #116]	@ (800d454 <HAL_DMA_IRQHandler+0x6b8>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d018      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a1c      	ldr	r2, [pc, #112]	@ (800d458 <HAL_DMA_IRQHandler+0x6bc>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d013      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a1a      	ldr	r2, [pc, #104]	@ (800d45c <HAL_DMA_IRQHandler+0x6c0>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d00e      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a19      	ldr	r2, [pc, #100]	@ (800d460 <HAL_DMA_IRQHandler+0x6c4>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d009      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a17      	ldr	r2, [pc, #92]	@ (800d464 <HAL_DMA_IRQHandler+0x6c8>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d004      	beq.n	800d414 <HAL_DMA_IRQHandler+0x678>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a16      	ldr	r2, [pc, #88]	@ (800d468 <HAL_DMA_IRQHandler+0x6cc>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d12b      	bne.n	800d46c <HAL_DMA_IRQHandler+0x6d0>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0310 	and.w	r3, r3, #16
 800d41e:	2b00      	cmp	r3, #0
 800d420:	bf14      	ite	ne
 800d422:	2301      	movne	r3, #1
 800d424:	2300      	moveq	r3, #0
 800d426:	b2db      	uxtb	r3, r3
 800d428:	e02a      	b.n	800d480 <HAL_DMA_IRQHandler+0x6e4>
 800d42a:	bf00      	nop
 800d42c:	40020010 	.word	0x40020010
 800d430:	40020028 	.word	0x40020028
 800d434:	40020040 	.word	0x40020040
 800d438:	40020058 	.word	0x40020058
 800d43c:	40020070 	.word	0x40020070
 800d440:	40020088 	.word	0x40020088
 800d444:	400200a0 	.word	0x400200a0
 800d448:	400200b8 	.word	0x400200b8
 800d44c:	40020410 	.word	0x40020410
 800d450:	40020428 	.word	0x40020428
 800d454:	40020440 	.word	0x40020440
 800d458:	40020458 	.word	0x40020458
 800d45c:	40020470 	.word	0x40020470
 800d460:	40020488 	.word	0x40020488
 800d464:	400204a0 	.word	0x400204a0
 800d468:	400204b8 	.word	0x400204b8
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 0302 	and.w	r3, r3, #2
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	2300      	moveq	r3, #0
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 8087 	beq.w	800d594 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d48a:	f003 031f 	and.w	r3, r3, #31
 800d48e:	2220      	movs	r2, #32
 800d490:	409a      	lsls	r2, r3
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d139      	bne.n	800d516 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f022 0216 	bic.w	r2, r2, #22
 800d4b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	695a      	ldr	r2, [r3, #20]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d103      	bne.n	800d4d2 <HAL_DMA_IRQHandler+0x736>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d007      	beq.n	800d4e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f022 0208 	bic.w	r2, r2, #8
 800d4e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4e6:	f003 031f 	and.w	r3, r3, #31
 800d4ea:	223f      	movs	r2, #63	@ 0x3f
 800d4ec:	409a      	lsls	r2, r3
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 834a 	beq.w	800dba0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	4798      	blx	r3
          }
          return;
 800d514:	e344      	b.n	800dba0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d018      	beq.n	800d556 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d108      	bne.n	800d544 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d536:	2b00      	cmp	r3, #0
 800d538:	d02c      	beq.n	800d594 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	4798      	blx	r3
 800d542:	e027      	b.n	800d594 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d023      	beq.n	800d594 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	4798      	blx	r3
 800d554:	e01e      	b.n	800d594 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10f      	bne.n	800d584 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0210 	bic.w	r2, r2, #16
 800d572:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d003      	beq.n	800d594 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 8306 	beq.w	800dbaa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 8088 	beq.w	800d6bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2204      	movs	r2, #4
 800d5b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a7a      	ldr	r2, [pc, #488]	@ (800d7a4 <HAL_DMA_IRQHandler+0xa08>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d04a      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a79      	ldr	r2, [pc, #484]	@ (800d7a8 <HAL_DMA_IRQHandler+0xa0c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d045      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a77      	ldr	r2, [pc, #476]	@ (800d7ac <HAL_DMA_IRQHandler+0xa10>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d040      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a76      	ldr	r2, [pc, #472]	@ (800d7b0 <HAL_DMA_IRQHandler+0xa14>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d03b      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a74      	ldr	r2, [pc, #464]	@ (800d7b4 <HAL_DMA_IRQHandler+0xa18>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d036      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a73      	ldr	r2, [pc, #460]	@ (800d7b8 <HAL_DMA_IRQHandler+0xa1c>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d031      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a71      	ldr	r2, [pc, #452]	@ (800d7bc <HAL_DMA_IRQHandler+0xa20>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d02c      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a70      	ldr	r2, [pc, #448]	@ (800d7c0 <HAL_DMA_IRQHandler+0xa24>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d027      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a6e      	ldr	r2, [pc, #440]	@ (800d7c4 <HAL_DMA_IRQHandler+0xa28>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d022      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a6d      	ldr	r2, [pc, #436]	@ (800d7c8 <HAL_DMA_IRQHandler+0xa2c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d01d      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a6b      	ldr	r2, [pc, #428]	@ (800d7cc <HAL_DMA_IRQHandler+0xa30>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d018      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a6a      	ldr	r2, [pc, #424]	@ (800d7d0 <HAL_DMA_IRQHandler+0xa34>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d013      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a68      	ldr	r2, [pc, #416]	@ (800d7d4 <HAL_DMA_IRQHandler+0xa38>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00e      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a67      	ldr	r2, [pc, #412]	@ (800d7d8 <HAL_DMA_IRQHandler+0xa3c>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d009      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a65      	ldr	r2, [pc, #404]	@ (800d7dc <HAL_DMA_IRQHandler+0xa40>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d004      	beq.n	800d654 <HAL_DMA_IRQHandler+0x8b8>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a64      	ldr	r2, [pc, #400]	@ (800d7e0 <HAL_DMA_IRQHandler+0xa44>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d108      	bne.n	800d666 <HAL_DMA_IRQHandler+0x8ca>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f022 0201 	bic.w	r2, r2, #1
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	e007      	b.n	800d676 <HAL_DMA_IRQHandler+0x8da>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f022 0201 	bic.w	r2, r2, #1
 800d674:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3301      	adds	r3, #1
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d67e:	429a      	cmp	r2, r3
 800d680:	d307      	bcc.n	800d692 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1f2      	bne.n	800d676 <HAL_DMA_IRQHandler+0x8da>
 800d690:	e000      	b.n	800d694 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d692:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d004      	beq.n	800d6ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2203      	movs	r2, #3
 800d6a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d6aa:	e003      	b.n	800d6b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 8272 	beq.w	800dbaa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	4798      	blx	r3
 800d6ce:	e26c      	b.n	800dbaa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a43      	ldr	r2, [pc, #268]	@ (800d7e4 <HAL_DMA_IRQHandler+0xa48>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d022      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a42      	ldr	r2, [pc, #264]	@ (800d7e8 <HAL_DMA_IRQHandler+0xa4c>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d01d      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a40      	ldr	r2, [pc, #256]	@ (800d7ec <HAL_DMA_IRQHandler+0xa50>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d018      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a3f      	ldr	r2, [pc, #252]	@ (800d7f0 <HAL_DMA_IRQHandler+0xa54>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d013      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a3d      	ldr	r2, [pc, #244]	@ (800d7f4 <HAL_DMA_IRQHandler+0xa58>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d00e      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a3c      	ldr	r2, [pc, #240]	@ (800d7f8 <HAL_DMA_IRQHandler+0xa5c>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d009      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a3a      	ldr	r2, [pc, #232]	@ (800d7fc <HAL_DMA_IRQHandler+0xa60>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d004      	beq.n	800d720 <HAL_DMA_IRQHandler+0x984>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a39      	ldr	r2, [pc, #228]	@ (800d800 <HAL_DMA_IRQHandler+0xa64>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d101      	bne.n	800d724 <HAL_DMA_IRQHandler+0x988>
 800d720:	2301      	movs	r3, #1
 800d722:	e000      	b.n	800d726 <HAL_DMA_IRQHandler+0x98a>
 800d724:	2300      	movs	r3, #0
 800d726:	2b00      	cmp	r3, #0
 800d728:	f000 823f 	beq.w	800dbaa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d738:	f003 031f 	and.w	r3, r3, #31
 800d73c:	2204      	movs	r2, #4
 800d73e:	409a      	lsls	r2, r3
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	4013      	ands	r3, r2
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 80cd 	beq.w	800d8e4 <HAL_DMA_IRQHandler+0xb48>
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	f003 0304 	and.w	r3, r3, #4
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 80c7 	beq.w	800d8e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d75a:	f003 031f 	and.w	r3, r3, #31
 800d75e:	2204      	movs	r2, #4
 800d760:	409a      	lsls	r2, r3
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d049      	beq.n	800d804 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d109      	bne.n	800d78e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 8210 	beq.w	800dba4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d78c:	e20a      	b.n	800dba4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 8206 	beq.w	800dba4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7a0:	e200      	b.n	800dba4 <HAL_DMA_IRQHandler+0xe08>
 800d7a2:	bf00      	nop
 800d7a4:	40020010 	.word	0x40020010
 800d7a8:	40020028 	.word	0x40020028
 800d7ac:	40020040 	.word	0x40020040
 800d7b0:	40020058 	.word	0x40020058
 800d7b4:	40020070 	.word	0x40020070
 800d7b8:	40020088 	.word	0x40020088
 800d7bc:	400200a0 	.word	0x400200a0
 800d7c0:	400200b8 	.word	0x400200b8
 800d7c4:	40020410 	.word	0x40020410
 800d7c8:	40020428 	.word	0x40020428
 800d7cc:	40020440 	.word	0x40020440
 800d7d0:	40020458 	.word	0x40020458
 800d7d4:	40020470 	.word	0x40020470
 800d7d8:	40020488 	.word	0x40020488
 800d7dc:	400204a0 	.word	0x400204a0
 800d7e0:	400204b8 	.word	0x400204b8
 800d7e4:	58025408 	.word	0x58025408
 800d7e8:	5802541c 	.word	0x5802541c
 800d7ec:	58025430 	.word	0x58025430
 800d7f0:	58025444 	.word	0x58025444
 800d7f4:	58025458 	.word	0x58025458
 800d7f8:	5802546c 	.word	0x5802546c
 800d7fc:	58025480 	.word	0x58025480
 800d800:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f003 0320 	and.w	r3, r3, #32
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d160      	bne.n	800d8d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a7f      	ldr	r2, [pc, #508]	@ (800da10 <HAL_DMA_IRQHandler+0xc74>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d04a      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a7d      	ldr	r2, [pc, #500]	@ (800da14 <HAL_DMA_IRQHandler+0xc78>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d045      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a7c      	ldr	r2, [pc, #496]	@ (800da18 <HAL_DMA_IRQHandler+0xc7c>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d040      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a7a      	ldr	r2, [pc, #488]	@ (800da1c <HAL_DMA_IRQHandler+0xc80>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d03b      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a79      	ldr	r2, [pc, #484]	@ (800da20 <HAL_DMA_IRQHandler+0xc84>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d036      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a77      	ldr	r2, [pc, #476]	@ (800da24 <HAL_DMA_IRQHandler+0xc88>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d031      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a76      	ldr	r2, [pc, #472]	@ (800da28 <HAL_DMA_IRQHandler+0xc8c>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d02c      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a74      	ldr	r2, [pc, #464]	@ (800da2c <HAL_DMA_IRQHandler+0xc90>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d027      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a73      	ldr	r2, [pc, #460]	@ (800da30 <HAL_DMA_IRQHandler+0xc94>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d022      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a71      	ldr	r2, [pc, #452]	@ (800da34 <HAL_DMA_IRQHandler+0xc98>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d01d      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a70      	ldr	r2, [pc, #448]	@ (800da38 <HAL_DMA_IRQHandler+0xc9c>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d018      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a6e      	ldr	r2, [pc, #440]	@ (800da3c <HAL_DMA_IRQHandler+0xca0>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d013      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a6d      	ldr	r2, [pc, #436]	@ (800da40 <HAL_DMA_IRQHandler+0xca4>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d00e      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a6b      	ldr	r2, [pc, #428]	@ (800da44 <HAL_DMA_IRQHandler+0xca8>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d009      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a6a      	ldr	r2, [pc, #424]	@ (800da48 <HAL_DMA_IRQHandler+0xcac>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d004      	beq.n	800d8ae <HAL_DMA_IRQHandler+0xb12>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a68      	ldr	r2, [pc, #416]	@ (800da4c <HAL_DMA_IRQHandler+0xcb0>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d108      	bne.n	800d8c0 <HAL_DMA_IRQHandler+0xb24>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f022 0208 	bic.w	r2, r2, #8
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	e007      	b.n	800d8d0 <HAL_DMA_IRQHandler+0xb34>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f022 0204 	bic.w	r2, r2, #4
 800d8ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f000 8165 	beq.w	800dba4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d8e2:	e15f      	b.n	800dba4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8e8:	f003 031f 	and.w	r3, r3, #31
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	409a      	lsls	r2, r3
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80c5 	beq.w	800da84 <HAL_DMA_IRQHandler+0xce8>
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	f003 0302 	and.w	r3, r3, #2
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 80bf 	beq.w	800da84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d90a:	f003 031f 	and.w	r3, r3, #31
 800d90e:	2202      	movs	r2, #2
 800d910:	409a      	lsls	r2, r3
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d018      	beq.n	800d952 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d109      	bne.n	800d93e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 813a 	beq.w	800dba8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d93c:	e134      	b.n	800dba8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d942:	2b00      	cmp	r3, #0
 800d944:	f000 8130 	beq.w	800dba8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d950:	e12a      	b.n	800dba8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f003 0320 	and.w	r3, r3, #32
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f040 8089 	bne.w	800da70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a2b      	ldr	r2, [pc, #172]	@ (800da10 <HAL_DMA_IRQHandler+0xc74>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d04a      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a29      	ldr	r2, [pc, #164]	@ (800da14 <HAL_DMA_IRQHandler+0xc78>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d045      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a28      	ldr	r2, [pc, #160]	@ (800da18 <HAL_DMA_IRQHandler+0xc7c>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d040      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a26      	ldr	r2, [pc, #152]	@ (800da1c <HAL_DMA_IRQHandler+0xc80>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d03b      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a25      	ldr	r2, [pc, #148]	@ (800da20 <HAL_DMA_IRQHandler+0xc84>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d036      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a23      	ldr	r2, [pc, #140]	@ (800da24 <HAL_DMA_IRQHandler+0xc88>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d031      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a22      	ldr	r2, [pc, #136]	@ (800da28 <HAL_DMA_IRQHandler+0xc8c>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d02c      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a20      	ldr	r2, [pc, #128]	@ (800da2c <HAL_DMA_IRQHandler+0xc90>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d027      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a1f      	ldr	r2, [pc, #124]	@ (800da30 <HAL_DMA_IRQHandler+0xc94>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d022      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800da34 <HAL_DMA_IRQHandler+0xc98>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d01d      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a1c      	ldr	r2, [pc, #112]	@ (800da38 <HAL_DMA_IRQHandler+0xc9c>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d018      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a1a      	ldr	r2, [pc, #104]	@ (800da3c <HAL_DMA_IRQHandler+0xca0>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d013      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a19      	ldr	r2, [pc, #100]	@ (800da40 <HAL_DMA_IRQHandler+0xca4>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d00e      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a17      	ldr	r2, [pc, #92]	@ (800da44 <HAL_DMA_IRQHandler+0xca8>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d009      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a16      	ldr	r2, [pc, #88]	@ (800da48 <HAL_DMA_IRQHandler+0xcac>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d004      	beq.n	800d9fe <HAL_DMA_IRQHandler+0xc62>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a14      	ldr	r2, [pc, #80]	@ (800da4c <HAL_DMA_IRQHandler+0xcb0>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d128      	bne.n	800da50 <HAL_DMA_IRQHandler+0xcb4>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f022 0214 	bic.w	r2, r2, #20
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	e027      	b.n	800da60 <HAL_DMA_IRQHandler+0xcc4>
 800da10:	40020010 	.word	0x40020010
 800da14:	40020028 	.word	0x40020028
 800da18:	40020040 	.word	0x40020040
 800da1c:	40020058 	.word	0x40020058
 800da20:	40020070 	.word	0x40020070
 800da24:	40020088 	.word	0x40020088
 800da28:	400200a0 	.word	0x400200a0
 800da2c:	400200b8 	.word	0x400200b8
 800da30:	40020410 	.word	0x40020410
 800da34:	40020428 	.word	0x40020428
 800da38:	40020440 	.word	0x40020440
 800da3c:	40020458 	.word	0x40020458
 800da40:	40020470 	.word	0x40020470
 800da44:	40020488 	.word	0x40020488
 800da48:	400204a0 	.word	0x400204a0
 800da4c:	400204b8 	.word	0x400204b8
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f022 020a 	bic.w	r2, r2, #10
 800da5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2201      	movs	r2, #1
 800da64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 8097 	beq.w	800dba8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da82:	e091      	b.n	800dba8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da88:	f003 031f 	and.w	r3, r3, #31
 800da8c:	2208      	movs	r2, #8
 800da8e:	409a      	lsls	r2, r3
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	4013      	ands	r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 8088 	beq.w	800dbaa <HAL_DMA_IRQHandler+0xe0e>
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	f003 0308 	and.w	r3, r3, #8
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 8082 	beq.w	800dbaa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a41      	ldr	r2, [pc, #260]	@ (800dbb0 <HAL_DMA_IRQHandler+0xe14>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d04a      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a3f      	ldr	r2, [pc, #252]	@ (800dbb4 <HAL_DMA_IRQHandler+0xe18>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d045      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a3e      	ldr	r2, [pc, #248]	@ (800dbb8 <HAL_DMA_IRQHandler+0xe1c>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d040      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a3c      	ldr	r2, [pc, #240]	@ (800dbbc <HAL_DMA_IRQHandler+0xe20>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d03b      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a3b      	ldr	r2, [pc, #236]	@ (800dbc0 <HAL_DMA_IRQHandler+0xe24>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d036      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a39      	ldr	r2, [pc, #228]	@ (800dbc4 <HAL_DMA_IRQHandler+0xe28>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d031      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a38      	ldr	r2, [pc, #224]	@ (800dbc8 <HAL_DMA_IRQHandler+0xe2c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d02c      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a36      	ldr	r2, [pc, #216]	@ (800dbcc <HAL_DMA_IRQHandler+0xe30>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d027      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a35      	ldr	r2, [pc, #212]	@ (800dbd0 <HAL_DMA_IRQHandler+0xe34>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d022      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a33      	ldr	r2, [pc, #204]	@ (800dbd4 <HAL_DMA_IRQHandler+0xe38>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d01d      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4a32      	ldr	r2, [pc, #200]	@ (800dbd8 <HAL_DMA_IRQHandler+0xe3c>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d018      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a30      	ldr	r2, [pc, #192]	@ (800dbdc <HAL_DMA_IRQHandler+0xe40>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d013      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a2f      	ldr	r2, [pc, #188]	@ (800dbe0 <HAL_DMA_IRQHandler+0xe44>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00e      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a2d      	ldr	r2, [pc, #180]	@ (800dbe4 <HAL_DMA_IRQHandler+0xe48>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d009      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a2c      	ldr	r2, [pc, #176]	@ (800dbe8 <HAL_DMA_IRQHandler+0xe4c>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d004      	beq.n	800db46 <HAL_DMA_IRQHandler+0xdaa>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a2a      	ldr	r2, [pc, #168]	@ (800dbec <HAL_DMA_IRQHandler+0xe50>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d108      	bne.n	800db58 <HAL_DMA_IRQHandler+0xdbc>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f022 021c 	bic.w	r2, r2, #28
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	e007      	b.n	800db68 <HAL_DMA_IRQHandler+0xdcc>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 020e 	bic.w	r2, r2, #14
 800db66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db6c:	f003 031f 	and.w	r3, r3, #31
 800db70:	2201      	movs	r2, #1
 800db72:	409a      	lsls	r2, r3
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db92:	2b00      	cmp	r3, #0
 800db94:	d009      	beq.n	800dbaa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	4798      	blx	r3
 800db9e:	e004      	b.n	800dbaa <HAL_DMA_IRQHandler+0xe0e>
          return;
 800dba0:	bf00      	nop
 800dba2:	e002      	b.n	800dbaa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dba4:	bf00      	nop
 800dba6:	e000      	b.n	800dbaa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dba8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dbaa:	3728      	adds	r7, #40	@ 0x28
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	40020010 	.word	0x40020010
 800dbb4:	40020028 	.word	0x40020028
 800dbb8:	40020040 	.word	0x40020040
 800dbbc:	40020058 	.word	0x40020058
 800dbc0:	40020070 	.word	0x40020070
 800dbc4:	40020088 	.word	0x40020088
 800dbc8:	400200a0 	.word	0x400200a0
 800dbcc:	400200b8 	.word	0x400200b8
 800dbd0:	40020410 	.word	0x40020410
 800dbd4:	40020428 	.word	0x40020428
 800dbd8:	40020440 	.word	0x40020440
 800dbdc:	40020458 	.word	0x40020458
 800dbe0:	40020470 	.word	0x40020470
 800dbe4:	40020488 	.word	0x40020488
 800dbe8:	400204a0 	.word	0x400204a0
 800dbec:	400204b8 	.word	0x400204b8

0800dbf0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbfe:	b2db      	uxtb	r3, r3
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a7f      	ldr	r2, [pc, #508]	@ (800de40 <DMA_SetConfig+0x21c>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d072      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a7d      	ldr	r2, [pc, #500]	@ (800de44 <DMA_SetConfig+0x220>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d06d      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a7c      	ldr	r2, [pc, #496]	@ (800de48 <DMA_SetConfig+0x224>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d068      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a7a      	ldr	r2, [pc, #488]	@ (800de4c <DMA_SetConfig+0x228>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d063      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a79      	ldr	r2, [pc, #484]	@ (800de50 <DMA_SetConfig+0x22c>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d05e      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a77      	ldr	r2, [pc, #476]	@ (800de54 <DMA_SetConfig+0x230>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d059      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4a76      	ldr	r2, [pc, #472]	@ (800de58 <DMA_SetConfig+0x234>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d054      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a74      	ldr	r2, [pc, #464]	@ (800de5c <DMA_SetConfig+0x238>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d04f      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4a73      	ldr	r2, [pc, #460]	@ (800de60 <DMA_SetConfig+0x23c>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d04a      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a71      	ldr	r2, [pc, #452]	@ (800de64 <DMA_SetConfig+0x240>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d045      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a70      	ldr	r2, [pc, #448]	@ (800de68 <DMA_SetConfig+0x244>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d040      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a6e      	ldr	r2, [pc, #440]	@ (800de6c <DMA_SetConfig+0x248>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d03b      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a6d      	ldr	r2, [pc, #436]	@ (800de70 <DMA_SetConfig+0x24c>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d036      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a6b      	ldr	r2, [pc, #428]	@ (800de74 <DMA_SetConfig+0x250>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d031      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a6a      	ldr	r2, [pc, #424]	@ (800de78 <DMA_SetConfig+0x254>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d02c      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a68      	ldr	r2, [pc, #416]	@ (800de7c <DMA_SetConfig+0x258>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d027      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a67      	ldr	r2, [pc, #412]	@ (800de80 <DMA_SetConfig+0x25c>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d022      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a65      	ldr	r2, [pc, #404]	@ (800de84 <DMA_SetConfig+0x260>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d01d      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a64      	ldr	r2, [pc, #400]	@ (800de88 <DMA_SetConfig+0x264>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d018      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a62      	ldr	r2, [pc, #392]	@ (800de8c <DMA_SetConfig+0x268>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d013      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a61      	ldr	r2, [pc, #388]	@ (800de90 <DMA_SetConfig+0x26c>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d00e      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a5f      	ldr	r2, [pc, #380]	@ (800de94 <DMA_SetConfig+0x270>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d009      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a5e      	ldr	r2, [pc, #376]	@ (800de98 <DMA_SetConfig+0x274>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d004      	beq.n	800dd2e <DMA_SetConfig+0x10a>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a5c      	ldr	r2, [pc, #368]	@ (800de9c <DMA_SetConfig+0x278>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d101      	bne.n	800dd32 <DMA_SetConfig+0x10e>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e000      	b.n	800dd34 <DMA_SetConfig+0x110>
 800dd32:	2300      	movs	r3, #0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00d      	beq.n	800dd54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800dd40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d004      	beq.n	800dd54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800dd52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a39      	ldr	r2, [pc, #228]	@ (800de40 <DMA_SetConfig+0x21c>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d04a      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a38      	ldr	r2, [pc, #224]	@ (800de44 <DMA_SetConfig+0x220>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d045      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a36      	ldr	r2, [pc, #216]	@ (800de48 <DMA_SetConfig+0x224>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d040      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a35      	ldr	r2, [pc, #212]	@ (800de4c <DMA_SetConfig+0x228>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d03b      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a33      	ldr	r2, [pc, #204]	@ (800de50 <DMA_SetConfig+0x22c>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d036      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a32      	ldr	r2, [pc, #200]	@ (800de54 <DMA_SetConfig+0x230>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d031      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a30      	ldr	r2, [pc, #192]	@ (800de58 <DMA_SetConfig+0x234>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d02c      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a2f      	ldr	r2, [pc, #188]	@ (800de5c <DMA_SetConfig+0x238>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d027      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a2d      	ldr	r2, [pc, #180]	@ (800de60 <DMA_SetConfig+0x23c>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d022      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a2c      	ldr	r2, [pc, #176]	@ (800de64 <DMA_SetConfig+0x240>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d01d      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a2a      	ldr	r2, [pc, #168]	@ (800de68 <DMA_SetConfig+0x244>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d018      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a29      	ldr	r2, [pc, #164]	@ (800de6c <DMA_SetConfig+0x248>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d013      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a27      	ldr	r2, [pc, #156]	@ (800de70 <DMA_SetConfig+0x24c>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d00e      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a26      	ldr	r2, [pc, #152]	@ (800de74 <DMA_SetConfig+0x250>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d009      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a24      	ldr	r2, [pc, #144]	@ (800de78 <DMA_SetConfig+0x254>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d004      	beq.n	800ddf4 <DMA_SetConfig+0x1d0>
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a23      	ldr	r2, [pc, #140]	@ (800de7c <DMA_SetConfig+0x258>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d101      	bne.n	800ddf8 <DMA_SetConfig+0x1d4>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e000      	b.n	800ddfa <DMA_SetConfig+0x1d6>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d059      	beq.n	800deb2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de02:	f003 031f 	and.w	r3, r3, #31
 800de06:	223f      	movs	r2, #63	@ 0x3f
 800de08:	409a      	lsls	r2, r3
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800de1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	2b40      	cmp	r3, #64	@ 0x40
 800de2c:	d138      	bne.n	800dea0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800de3e:	e086      	b.n	800df4e <DMA_SetConfig+0x32a>
 800de40:	40020010 	.word	0x40020010
 800de44:	40020028 	.word	0x40020028
 800de48:	40020040 	.word	0x40020040
 800de4c:	40020058 	.word	0x40020058
 800de50:	40020070 	.word	0x40020070
 800de54:	40020088 	.word	0x40020088
 800de58:	400200a0 	.word	0x400200a0
 800de5c:	400200b8 	.word	0x400200b8
 800de60:	40020410 	.word	0x40020410
 800de64:	40020428 	.word	0x40020428
 800de68:	40020440 	.word	0x40020440
 800de6c:	40020458 	.word	0x40020458
 800de70:	40020470 	.word	0x40020470
 800de74:	40020488 	.word	0x40020488
 800de78:	400204a0 	.word	0x400204a0
 800de7c:	400204b8 	.word	0x400204b8
 800de80:	58025408 	.word	0x58025408
 800de84:	5802541c 	.word	0x5802541c
 800de88:	58025430 	.word	0x58025430
 800de8c:	58025444 	.word	0x58025444
 800de90:	58025458 	.word	0x58025458
 800de94:	5802546c 	.word	0x5802546c
 800de98:	58025480 	.word	0x58025480
 800de9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	60da      	str	r2, [r3, #12]
}
 800deb0:	e04d      	b.n	800df4e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a29      	ldr	r2, [pc, #164]	@ (800df5c <DMA_SetConfig+0x338>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d022      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a27      	ldr	r2, [pc, #156]	@ (800df60 <DMA_SetConfig+0x33c>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d01d      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a26      	ldr	r2, [pc, #152]	@ (800df64 <DMA_SetConfig+0x340>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d018      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a24      	ldr	r2, [pc, #144]	@ (800df68 <DMA_SetConfig+0x344>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d013      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a23      	ldr	r2, [pc, #140]	@ (800df6c <DMA_SetConfig+0x348>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d00e      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a21      	ldr	r2, [pc, #132]	@ (800df70 <DMA_SetConfig+0x34c>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d009      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a20      	ldr	r2, [pc, #128]	@ (800df74 <DMA_SetConfig+0x350>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d004      	beq.n	800df02 <DMA_SetConfig+0x2de>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a1e      	ldr	r2, [pc, #120]	@ (800df78 <DMA_SetConfig+0x354>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d101      	bne.n	800df06 <DMA_SetConfig+0x2e2>
 800df02:	2301      	movs	r3, #1
 800df04:	e000      	b.n	800df08 <DMA_SetConfig+0x2e4>
 800df06:	2300      	movs	r3, #0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d020      	beq.n	800df4e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df10:	f003 031f 	and.w	r3, r3, #31
 800df14:	2201      	movs	r2, #1
 800df16:	409a      	lsls	r2, r3
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	2b40      	cmp	r3, #64	@ 0x40
 800df2a:	d108      	bne.n	800df3e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	60da      	str	r2, [r3, #12]
}
 800df3c:	e007      	b.n	800df4e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	60da      	str	r2, [r3, #12]
}
 800df4e:	bf00      	nop
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	58025408 	.word	0x58025408
 800df60:	5802541c 	.word	0x5802541c
 800df64:	58025430 	.word	0x58025430
 800df68:	58025444 	.word	0x58025444
 800df6c:	58025458 	.word	0x58025458
 800df70:	5802546c 	.word	0x5802546c
 800df74:	58025480 	.word	0x58025480
 800df78:	58025494 	.word	0x58025494

0800df7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a42      	ldr	r2, [pc, #264]	@ (800e094 <DMA_CalcBaseAndBitshift+0x118>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d04a      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a41      	ldr	r2, [pc, #260]	@ (800e098 <DMA_CalcBaseAndBitshift+0x11c>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d045      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a3f      	ldr	r2, [pc, #252]	@ (800e09c <DMA_CalcBaseAndBitshift+0x120>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d040      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a3e      	ldr	r2, [pc, #248]	@ (800e0a0 <DMA_CalcBaseAndBitshift+0x124>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d03b      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a3c      	ldr	r2, [pc, #240]	@ (800e0a4 <DMA_CalcBaseAndBitshift+0x128>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d036      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a3b      	ldr	r2, [pc, #236]	@ (800e0a8 <DMA_CalcBaseAndBitshift+0x12c>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d031      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a39      	ldr	r2, [pc, #228]	@ (800e0ac <DMA_CalcBaseAndBitshift+0x130>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d02c      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a38      	ldr	r2, [pc, #224]	@ (800e0b0 <DMA_CalcBaseAndBitshift+0x134>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d027      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a36      	ldr	r2, [pc, #216]	@ (800e0b4 <DMA_CalcBaseAndBitshift+0x138>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d022      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a35      	ldr	r2, [pc, #212]	@ (800e0b8 <DMA_CalcBaseAndBitshift+0x13c>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d01d      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a33      	ldr	r2, [pc, #204]	@ (800e0bc <DMA_CalcBaseAndBitshift+0x140>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d018      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a32      	ldr	r2, [pc, #200]	@ (800e0c0 <DMA_CalcBaseAndBitshift+0x144>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d013      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a30      	ldr	r2, [pc, #192]	@ (800e0c4 <DMA_CalcBaseAndBitshift+0x148>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d00e      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a2f      	ldr	r2, [pc, #188]	@ (800e0c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d009      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a2d      	ldr	r2, [pc, #180]	@ (800e0cc <DMA_CalcBaseAndBitshift+0x150>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d004      	beq.n	800e024 <DMA_CalcBaseAndBitshift+0xa8>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a2c      	ldr	r2, [pc, #176]	@ (800e0d0 <DMA_CalcBaseAndBitshift+0x154>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d101      	bne.n	800e028 <DMA_CalcBaseAndBitshift+0xac>
 800e024:	2301      	movs	r3, #1
 800e026:	e000      	b.n	800e02a <DMA_CalcBaseAndBitshift+0xae>
 800e028:	2300      	movs	r3, #0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d024      	beq.n	800e078 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	b2db      	uxtb	r3, r3
 800e034:	3b10      	subs	r3, #16
 800e036:	4a27      	ldr	r2, [pc, #156]	@ (800e0d4 <DMA_CalcBaseAndBitshift+0x158>)
 800e038:	fba2 2303 	umull	r2, r3, r2, r3
 800e03c:	091b      	lsrs	r3, r3, #4
 800e03e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f003 0307 	and.w	r3, r3, #7
 800e046:	4a24      	ldr	r2, [pc, #144]	@ (800e0d8 <DMA_CalcBaseAndBitshift+0x15c>)
 800e048:	5cd3      	ldrb	r3, [r2, r3]
 800e04a:	461a      	mov	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b03      	cmp	r3, #3
 800e054:	d908      	bls.n	800e068 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	461a      	mov	r2, r3
 800e05c:	4b1f      	ldr	r3, [pc, #124]	@ (800e0dc <DMA_CalcBaseAndBitshift+0x160>)
 800e05e:	4013      	ands	r3, r2
 800e060:	1d1a      	adds	r2, r3, #4
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	659a      	str	r2, [r3, #88]	@ 0x58
 800e066:	e00d      	b.n	800e084 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	461a      	mov	r2, r3
 800e06e:	4b1b      	ldr	r3, [pc, #108]	@ (800e0dc <DMA_CalcBaseAndBitshift+0x160>)
 800e070:	4013      	ands	r3, r2
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	6593      	str	r3, [r2, #88]	@ 0x58
 800e076:	e005      	b.n	800e084 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	40020010 	.word	0x40020010
 800e098:	40020028 	.word	0x40020028
 800e09c:	40020040 	.word	0x40020040
 800e0a0:	40020058 	.word	0x40020058
 800e0a4:	40020070 	.word	0x40020070
 800e0a8:	40020088 	.word	0x40020088
 800e0ac:	400200a0 	.word	0x400200a0
 800e0b0:	400200b8 	.word	0x400200b8
 800e0b4:	40020410 	.word	0x40020410
 800e0b8:	40020428 	.word	0x40020428
 800e0bc:	40020440 	.word	0x40020440
 800e0c0:	40020458 	.word	0x40020458
 800e0c4:	40020470 	.word	0x40020470
 800e0c8:	40020488 	.word	0x40020488
 800e0cc:	400204a0 	.word	0x400204a0
 800e0d0:	400204b8 	.word	0x400204b8
 800e0d4:	aaaaaaab 	.word	0xaaaaaaab
 800e0d8:	0801eb6c 	.word	0x0801eb6c
 800e0dc:	fffffc00 	.word	0xfffffc00

0800e0e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	699b      	ldr	r3, [r3, #24]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d120      	bne.n	800e136 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	d858      	bhi.n	800e1ae <DMA_CheckFifoParam+0xce>
 800e0fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e104 <DMA_CheckFifoParam+0x24>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e115 	.word	0x0800e115
 800e108:	0800e127 	.word	0x0800e127
 800e10c:	0800e115 	.word	0x0800e115
 800e110:	0800e1af 	.word	0x0800e1af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d048      	beq.n	800e1b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e124:	e045      	b.n	800e1b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e12e:	d142      	bne.n	800e1b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e134:	e03f      	b.n	800e1b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	699b      	ldr	r3, [r3, #24]
 800e13a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e13e:	d123      	bne.n	800e188 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e144:	2b03      	cmp	r3, #3
 800e146:	d838      	bhi.n	800e1ba <DMA_CheckFifoParam+0xda>
 800e148:	a201      	add	r2, pc, #4	@ (adr r2, 800e150 <DMA_CheckFifoParam+0x70>)
 800e14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e14e:	bf00      	nop
 800e150:	0800e161 	.word	0x0800e161
 800e154:	0800e167 	.word	0x0800e167
 800e158:	0800e161 	.word	0x0800e161
 800e15c:	0800e179 	.word	0x0800e179
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e160:	2301      	movs	r3, #1
 800e162:	73fb      	strb	r3, [r7, #15]
        break;
 800e164:	e030      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d025      	beq.n	800e1be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e176:	e022      	b.n	800e1be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e17c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e180:	d11f      	bne.n	800e1c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e186:	e01c      	b.n	800e1c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d902      	bls.n	800e196 <DMA_CheckFifoParam+0xb6>
 800e190:	2b03      	cmp	r3, #3
 800e192:	d003      	beq.n	800e19c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e194:	e018      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e196:	2301      	movs	r3, #1
 800e198:	73fb      	strb	r3, [r7, #15]
        break;
 800e19a:	e015      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00e      	beq.n	800e1c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ac:	e00b      	b.n	800e1c6 <DMA_CheckFifoParam+0xe6>
        break;
 800e1ae:	bf00      	nop
 800e1b0:	e00a      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        break;
 800e1b2:	bf00      	nop
 800e1b4:	e008      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        break;
 800e1b6:	bf00      	nop
 800e1b8:	e006      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        break;
 800e1ba:	bf00      	nop
 800e1bc:	e004      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        break;
 800e1be:	bf00      	nop
 800e1c0:	e002      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
        break;
 800e1c2:	bf00      	nop
 800e1c4:	e000      	b.n	800e1c8 <DMA_CheckFifoParam+0xe8>
    break;
 800e1c6:	bf00      	nop
    }
  }

  return status;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop

0800e1d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a38      	ldr	r2, [pc, #224]	@ (800e2cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d022      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a36      	ldr	r2, [pc, #216]	@ (800e2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d01d      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a35      	ldr	r2, [pc, #212]	@ (800e2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d018      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a33      	ldr	r2, [pc, #204]	@ (800e2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d013      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a32      	ldr	r2, [pc, #200]	@ (800e2dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d00e      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a30      	ldr	r2, [pc, #192]	@ (800e2e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d009      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a2f      	ldr	r2, [pc, #188]	@ (800e2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d004      	beq.n	800e236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a2d      	ldr	r2, [pc, #180]	@ (800e2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d101      	bne.n	800e23a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e236:	2301      	movs	r3, #1
 800e238:	e000      	b.n	800e23c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e23a:	2300      	movs	r3, #0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d01a      	beq.n	800e276 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	b2db      	uxtb	r3, r3
 800e246:	3b08      	subs	r3, #8
 800e248:	4a28      	ldr	r2, [pc, #160]	@ (800e2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e24a:	fba2 2303 	umull	r2, r3, r2, r3
 800e24e:	091b      	lsrs	r3, r3, #4
 800e250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	4b26      	ldr	r3, [pc, #152]	@ (800e2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e256:	4413      	add	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	461a      	mov	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a24      	ldr	r2, [pc, #144]	@ (800e2f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e264:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f003 031f 	and.w	r3, r3, #31
 800e26c:	2201      	movs	r2, #1
 800e26e:	409a      	lsls	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e274:	e024      	b.n	800e2c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	3b10      	subs	r3, #16
 800e27e:	4a1e      	ldr	r2, [pc, #120]	@ (800e2f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e280:	fba2 2303 	umull	r2, r3, r2, r3
 800e284:	091b      	lsrs	r3, r3, #4
 800e286:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	4a1c      	ldr	r2, [pc, #112]	@ (800e2fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d806      	bhi.n	800e29e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	4a1b      	ldr	r2, [pc, #108]	@ (800e300 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d902      	bls.n	800e29e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	3308      	adds	r3, #8
 800e29c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	4b18      	ldr	r3, [pc, #96]	@ (800e304 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a16      	ldr	r2, [pc, #88]	@ (800e308 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e2b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f003 031f 	and.w	r3, r3, #31
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	409a      	lsls	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e2c0:	bf00      	nop
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	58025408 	.word	0x58025408
 800e2d0:	5802541c 	.word	0x5802541c
 800e2d4:	58025430 	.word	0x58025430
 800e2d8:	58025444 	.word	0x58025444
 800e2dc:	58025458 	.word	0x58025458
 800e2e0:	5802546c 	.word	0x5802546c
 800e2e4:	58025480 	.word	0x58025480
 800e2e8:	58025494 	.word	0x58025494
 800e2ec:	cccccccd 	.word	0xcccccccd
 800e2f0:	16009600 	.word	0x16009600
 800e2f4:	58025880 	.word	0x58025880
 800e2f8:	aaaaaaab 	.word	0xaaaaaaab
 800e2fc:	400204b8 	.word	0x400204b8
 800e300:	4002040f 	.word	0x4002040f
 800e304:	10008200 	.word	0x10008200
 800e308:	40020880 	.word	0x40020880

0800e30c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d04a      	beq.n	800e3b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b08      	cmp	r3, #8
 800e326:	d847      	bhi.n	800e3b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a25      	ldr	r2, [pc, #148]	@ (800e3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d022      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a24      	ldr	r2, [pc, #144]	@ (800e3c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d01d      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a22      	ldr	r2, [pc, #136]	@ (800e3cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d018      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a21      	ldr	r2, [pc, #132]	@ (800e3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d013      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a1f      	ldr	r2, [pc, #124]	@ (800e3d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d00e      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a1e      	ldr	r2, [pc, #120]	@ (800e3d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d009      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a1c      	ldr	r2, [pc, #112]	@ (800e3dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d004      	beq.n	800e378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a1b      	ldr	r2, [pc, #108]	@ (800e3e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d101      	bne.n	800e37c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e378:	2301      	movs	r3, #1
 800e37a:	e000      	b.n	800e37e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e37c:	2300      	movs	r3, #0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00a      	beq.n	800e398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	4b17      	ldr	r3, [pc, #92]	@ (800e3e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e386:	4413      	add	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	461a      	mov	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a15      	ldr	r2, [pc, #84]	@ (800e3e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e394:	671a      	str	r2, [r3, #112]	@ 0x70
 800e396:	e009      	b.n	800e3ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	4b14      	ldr	r3, [pc, #80]	@ (800e3ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e39c:	4413      	add	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a11      	ldr	r2, [pc, #68]	@ (800e3f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e3aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	409a      	lsls	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e3b8:	bf00      	nop
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	58025408 	.word	0x58025408
 800e3c8:	5802541c 	.word	0x5802541c
 800e3cc:	58025430 	.word	0x58025430
 800e3d0:	58025444 	.word	0x58025444
 800e3d4:	58025458 	.word	0x58025458
 800e3d8:	5802546c 	.word	0x5802546c
 800e3dc:	58025480 	.word	0x58025480
 800e3e0:	58025494 	.word	0x58025494
 800e3e4:	1600963f 	.word	0x1600963f
 800e3e8:	58025940 	.word	0x58025940
 800e3ec:	1000823f 	.word	0x1000823f
 800e3f0:	40020940 	.word	0x40020940

0800e3f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b089      	sub	sp, #36	@ 0x24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e3fe:	2300      	movs	r3, #0
 800e400:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e402:	4b86      	ldr	r3, [pc, #536]	@ (800e61c <HAL_GPIO_Init+0x228>)
 800e404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e406:	e18c      	b.n	800e722 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	2101      	movs	r1, #1
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	fa01 f303 	lsl.w	r3, r1, r3
 800e414:	4013      	ands	r3, r2
 800e416:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 817e 	beq.w	800e71c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	f003 0303 	and.w	r3, r3, #3
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d005      	beq.n	800e438 <HAL_GPIO_Init+0x44>
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	f003 0303 	and.w	r3, r3, #3
 800e434:	2b02      	cmp	r3, #2
 800e436:	d130      	bne.n	800e49a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	005b      	lsls	r3, r3, #1
 800e442:	2203      	movs	r2, #3
 800e444:	fa02 f303 	lsl.w	r3, r2, r3
 800e448:	43db      	mvns	r3, r3
 800e44a:	69ba      	ldr	r2, [r7, #24]
 800e44c:	4013      	ands	r3, r2
 800e44e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	68da      	ldr	r2, [r3, #12]
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	fa02 f303 	lsl.w	r3, r2, r3
 800e45c:	69ba      	ldr	r2, [r7, #24]
 800e45e:	4313      	orrs	r3, r2
 800e460:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	69ba      	ldr	r2, [r7, #24]
 800e466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e46e:	2201      	movs	r2, #1
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	fa02 f303 	lsl.w	r3, r2, r3
 800e476:	43db      	mvns	r3, r3
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	4013      	ands	r3, r2
 800e47c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	091b      	lsrs	r3, r3, #4
 800e484:	f003 0201 	and.w	r2, r3, #1
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	fa02 f303 	lsl.w	r3, r2, r3
 800e48e:	69ba      	ldr	r2, [r7, #24]
 800e490:	4313      	orrs	r3, r2
 800e492:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	69ba      	ldr	r2, [r7, #24]
 800e498:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f003 0303 	and.w	r3, r3, #3
 800e4a2:	2b03      	cmp	r3, #3
 800e4a4:	d017      	beq.n	800e4d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	005b      	lsls	r3, r3, #1
 800e4b0:	2203      	movs	r2, #3
 800e4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b6:	43db      	mvns	r3, r3
 800e4b8:	69ba      	ldr	r2, [r7, #24]
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	689a      	ldr	r2, [r3, #8]
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	005b      	lsls	r3, r3, #1
 800e4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ca:	69ba      	ldr	r2, [r7, #24]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	69ba      	ldr	r2, [r7, #24]
 800e4d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	f003 0303 	and.w	r3, r3, #3
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d123      	bne.n	800e52a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	08da      	lsrs	r2, r3, #3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3208      	adds	r2, #8
 800e4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	f003 0307 	and.w	r3, r3, #7
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	220f      	movs	r2, #15
 800e4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e4fe:	43db      	mvns	r3, r3
 800e500:	69ba      	ldr	r2, [r7, #24]
 800e502:	4013      	ands	r3, r2
 800e504:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	691a      	ldr	r2, [r3, #16]
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	f003 0307 	and.w	r3, r3, #7
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	fa02 f303 	lsl.w	r3, r2, r3
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	4313      	orrs	r3, r2
 800e51a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	08da      	lsrs	r2, r3, #3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3208      	adds	r2, #8
 800e524:	69b9      	ldr	r1, [r7, #24]
 800e526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	2203      	movs	r2, #3
 800e536:	fa02 f303 	lsl.w	r3, r2, r3
 800e53a:	43db      	mvns	r3, r3
 800e53c:	69ba      	ldr	r2, [r7, #24]
 800e53e:	4013      	ands	r3, r2
 800e540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f003 0203 	and.w	r2, r3, #3
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	fa02 f303 	lsl.w	r3, r2, r3
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	4313      	orrs	r3, r2
 800e556:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	69ba      	ldr	r2, [r7, #24]
 800e55c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 80d8 	beq.w	800e71c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e56c:	4b2c      	ldr	r3, [pc, #176]	@ (800e620 <HAL_GPIO_Init+0x22c>)
 800e56e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e572:	4a2b      	ldr	r2, [pc, #172]	@ (800e620 <HAL_GPIO_Init+0x22c>)
 800e574:	f043 0302 	orr.w	r3, r3, #2
 800e578:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e57c:	4b28      	ldr	r3, [pc, #160]	@ (800e620 <HAL_GPIO_Init+0x22c>)
 800e57e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e582:	f003 0302 	and.w	r3, r3, #2
 800e586:	60fb      	str	r3, [r7, #12]
 800e588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e58a:	4a26      	ldr	r2, [pc, #152]	@ (800e624 <HAL_GPIO_Init+0x230>)
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	089b      	lsrs	r3, r3, #2
 800e590:	3302      	adds	r3, #2
 800e592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	f003 0303 	and.w	r3, r3, #3
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	220f      	movs	r2, #15
 800e5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a6:	43db      	mvns	r3, r3
 800e5a8:	69ba      	ldr	r2, [r7, #24]
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e628 <HAL_GPIO_Init+0x234>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d04a      	beq.n	800e64c <HAL_GPIO_Init+0x258>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a1c      	ldr	r2, [pc, #112]	@ (800e62c <HAL_GPIO_Init+0x238>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d02b      	beq.n	800e616 <HAL_GPIO_Init+0x222>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e630 <HAL_GPIO_Init+0x23c>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d025      	beq.n	800e612 <HAL_GPIO_Init+0x21e>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a1a      	ldr	r2, [pc, #104]	@ (800e634 <HAL_GPIO_Init+0x240>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d01f      	beq.n	800e60e <HAL_GPIO_Init+0x21a>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a19      	ldr	r2, [pc, #100]	@ (800e638 <HAL_GPIO_Init+0x244>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d019      	beq.n	800e60a <HAL_GPIO_Init+0x216>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a18      	ldr	r2, [pc, #96]	@ (800e63c <HAL_GPIO_Init+0x248>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d013      	beq.n	800e606 <HAL_GPIO_Init+0x212>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4a17      	ldr	r2, [pc, #92]	@ (800e640 <HAL_GPIO_Init+0x24c>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d00d      	beq.n	800e602 <HAL_GPIO_Init+0x20e>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4a16      	ldr	r2, [pc, #88]	@ (800e644 <HAL_GPIO_Init+0x250>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d007      	beq.n	800e5fe <HAL_GPIO_Init+0x20a>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4a15      	ldr	r2, [pc, #84]	@ (800e648 <HAL_GPIO_Init+0x254>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d101      	bne.n	800e5fa <HAL_GPIO_Init+0x206>
 800e5f6:	2309      	movs	r3, #9
 800e5f8:	e029      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e5fa:	230a      	movs	r3, #10
 800e5fc:	e027      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e5fe:	2307      	movs	r3, #7
 800e600:	e025      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e602:	2306      	movs	r3, #6
 800e604:	e023      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e606:	2305      	movs	r3, #5
 800e608:	e021      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e60a:	2304      	movs	r3, #4
 800e60c:	e01f      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e60e:	2303      	movs	r3, #3
 800e610:	e01d      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e612:	2302      	movs	r3, #2
 800e614:	e01b      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e616:	2301      	movs	r3, #1
 800e618:	e019      	b.n	800e64e <HAL_GPIO_Init+0x25a>
 800e61a:	bf00      	nop
 800e61c:	58000080 	.word	0x58000080
 800e620:	58024400 	.word	0x58024400
 800e624:	58000400 	.word	0x58000400
 800e628:	58020000 	.word	0x58020000
 800e62c:	58020400 	.word	0x58020400
 800e630:	58020800 	.word	0x58020800
 800e634:	58020c00 	.word	0x58020c00
 800e638:	58021000 	.word	0x58021000
 800e63c:	58021400 	.word	0x58021400
 800e640:	58021800 	.word	0x58021800
 800e644:	58021c00 	.word	0x58021c00
 800e648:	58022400 	.word	0x58022400
 800e64c:	2300      	movs	r3, #0
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	f002 0203 	and.w	r2, r2, #3
 800e654:	0092      	lsls	r2, r2, #2
 800e656:	4093      	lsls	r3, r2
 800e658:	69ba      	ldr	r2, [r7, #24]
 800e65a:	4313      	orrs	r3, r2
 800e65c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e65e:	4938      	ldr	r1, [pc, #224]	@ (800e740 <HAL_GPIO_Init+0x34c>)
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	089b      	lsrs	r3, r3, #2
 800e664:	3302      	adds	r3, #2
 800e666:	69ba      	ldr	r2, [r7, #24]
 800e668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e66c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	43db      	mvns	r3, r3
 800e678:	69ba      	ldr	r2, [r7, #24]
 800e67a:	4013      	ands	r3, r2
 800e67c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e68a:	69ba      	ldr	r2, [r7, #24]
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	4313      	orrs	r3, r2
 800e690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e692:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e69a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	43db      	mvns	r3, r3
 800e6a6:	69ba      	ldr	r2, [r7, #24]
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e6b8:	69ba      	ldr	r2, [r7, #24]
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e6c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	43db      	mvns	r3, r3
 800e6d2:	69ba      	ldr	r2, [r7, #24]
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d003      	beq.n	800e6ec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e6e4:	69ba      	ldr	r2, [r7, #24]
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	69ba      	ldr	r2, [r7, #24]
 800e6f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	43db      	mvns	r3, r3
 800e6fc:	69ba      	ldr	r2, [r7, #24]
 800e6fe:	4013      	ands	r3, r2
 800e700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d003      	beq.n	800e716 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e70e:	69ba      	ldr	r2, [r7, #24]
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	4313      	orrs	r3, r2
 800e714:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	3301      	adds	r3, #1
 800e720:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	fa22 f303 	lsr.w	r3, r2, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f47f ae6b 	bne.w	800e408 <HAL_GPIO_Init+0x14>
  }
}
 800e732:	bf00      	nop
 800e734:	bf00      	nop
 800e736:	3724      	adds	r7, #36	@ 0x24
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	58000400 	.word	0x58000400

0800e744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	691a      	ldr	r2, [r3, #16]
 800e754:	887b      	ldrh	r3, [r7, #2]
 800e756:	4013      	ands	r3, r2
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e75c:	2301      	movs	r3, #1
 800e75e:	73fb      	strb	r3, [r7, #15]
 800e760:	e001      	b.n	800e766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e762:	2300      	movs	r3, #0
 800e764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e766:	7bfb      	ldrb	r3, [r7, #15]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3714      	adds	r7, #20
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	807b      	strh	r3, [r7, #2]
 800e780:	4613      	mov	r3, r2
 800e782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e784:	787b      	ldrb	r3, [r7, #1]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e78a:	887a      	ldrh	r2, [r7, #2]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e790:	e003      	b.n	800e79a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e792:	887b      	ldrh	r3, [r7, #2]
 800e794:	041a      	lsls	r2, r3, #16
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	619a      	str	r2, [r3, #24]
}
 800e79a:	bf00      	nop
 800e79c:	370c      	adds	r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e7b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e7b8:	88fb      	ldrh	r3, [r7, #6]
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d008      	beq.n	800e7d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e7c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e7c4:	88fb      	ldrh	r3, [r7, #6]
 800e7c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e7ca:	88fb      	ldrh	r3, [r7, #6]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7f7 fd67 	bl	80062a0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e7d2:	bf00      	nop
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
	...

0800e7dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d101      	bne.n	800e7ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e08b      	b.n	800e906 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d106      	bne.n	800e808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7f6 fb38 	bl	8004e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2224      	movs	r2, #36	@ 0x24
 800e80c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f022 0201 	bic.w	r2, r2, #1
 800e81e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e82c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	689a      	ldr	r2, [r3, #8]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e83c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d107      	bne.n	800e856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	689a      	ldr	r2, [r3, #8]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e852:	609a      	str	r2, [r3, #8]
 800e854:	e006      	b.n	800e864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d108      	bne.n	800e87e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e87a:	605a      	str	r2, [r3, #4]
 800e87c:	e007      	b.n	800e88e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e88c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	6859      	ldr	r1, [r3, #4]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	4b1d      	ldr	r3, [pc, #116]	@ (800e910 <HAL_I2C_Init+0x134>)
 800e89a:	430b      	orrs	r3, r1
 800e89c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68da      	ldr	r2, [r3, #12]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e8ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	691a      	ldr	r2, [r3, #16]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	695b      	ldr	r3, [r3, #20]
 800e8b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	699b      	ldr	r3, [r3, #24]
 800e8be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	430a      	orrs	r2, r1
 800e8c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	69d9      	ldr	r1, [r3, #28]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a1a      	ldr	r2, [r3, #32]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	430a      	orrs	r2, r1
 800e8d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f042 0201 	orr.w	r2, r2, #1
 800e8e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2220      	movs	r2, #32
 800e8f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	02008000 	.word	0x02008000

0800e914 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af02      	add	r7, sp, #8
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	4608      	mov	r0, r1
 800e91e:	4611      	mov	r1, r2
 800e920:	461a      	mov	r2, r3
 800e922:	4603      	mov	r3, r0
 800e924:	817b      	strh	r3, [r7, #10]
 800e926:	460b      	mov	r3, r1
 800e928:	813b      	strh	r3, [r7, #8]
 800e92a:	4613      	mov	r3, r2
 800e92c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b20      	cmp	r3, #32
 800e938:	f040 80f9 	bne.w	800eb2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <HAL_I2C_Mem_Write+0x34>
 800e942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e944:	2b00      	cmp	r3, #0
 800e946:	d105      	bne.n	800e954 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e94e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e0ed      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d101      	bne.n	800e962 <HAL_I2C_Mem_Write+0x4e>
 800e95e:	2302      	movs	r3, #2
 800e960:	e0e6      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e96a:	f7fa fdbb 	bl	80094e4 <HAL_GetTick>
 800e96e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	2319      	movs	r3, #25
 800e976:	2201      	movs	r2, #1
 800e978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f002 f818 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	e0d1      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2221      	movs	r2, #33	@ 0x21
 800e990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2240      	movs	r2, #64	@ 0x40
 800e998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6a3a      	ldr	r2, [r7, #32]
 800e9a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e9ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e9b4:	88f8      	ldrh	r0, [r7, #6]
 800e9b6:	893a      	ldrh	r2, [r7, #8]
 800e9b8:	8979      	ldrh	r1, [r7, #10]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	9301      	str	r3, [sp, #4]
 800e9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f001 f965 	bl	800fc94 <I2C_RequestMemoryWrite>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d005      	beq.n	800e9dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e0a9      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	2bff      	cmp	r3, #255	@ 0xff
 800e9e4:	d90e      	bls.n	800ea04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	22ff      	movs	r2, #255	@ 0xff
 800e9ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	8979      	ldrh	r1, [r7, #10]
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f002 f99b 	bl	8010d38 <I2C_TransferConfig>
 800ea02:	e00f      	b.n	800ea24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	8979      	ldrh	r1, [r7, #10]
 800ea16:	2300      	movs	r3, #0
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f002 f98a 	bl	8010d38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f002 f81b 	bl	8010a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e07b      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea3c:	781a      	ldrb	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	3b01      	subs	r3, #1
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea60:	3b01      	subs	r3, #1
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d034      	beq.n	800eadc <HAL_I2C_Mem_Write+0x1c8>
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d130      	bne.n	800eadc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea80:	2200      	movs	r2, #0
 800ea82:	2180      	movs	r1, #128	@ 0x80
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f001 ff94 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	e04d      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	2bff      	cmp	r3, #255	@ 0xff
 800ea9c:	d90e      	bls.n	800eabc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	22ff      	movs	r2, #255	@ 0xff
 800eaa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	8979      	ldrh	r1, [r7, #10]
 800eaac:	2300      	movs	r3, #0
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f002 f93f 	bl	8010d38 <I2C_TransferConfig>
 800eaba:	e00f      	b.n	800eadc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaca:	b2da      	uxtb	r2, r3
 800eacc:	8979      	ldrh	r1, [r7, #10]
 800eace:	2300      	movs	r3, #0
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f002 f92e 	bl	8010d38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d19e      	bne.n	800ea24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eae6:	697a      	ldr	r2, [r7, #20]
 800eae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f002 f801 	bl	8010af2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d001      	beq.n	800eafa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e01a      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2220      	movs	r2, #32
 800eb00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6859      	ldr	r1, [r3, #4]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb38 <HAL_I2C_Mem_Write+0x224>)
 800eb0e:	400b      	ands	r3, r1
 800eb10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2220      	movs	r2, #32
 800eb16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e000      	b.n	800eb30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800eb2e:	2302      	movs	r3, #2
  }
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	fe00e800 	.word	0xfe00e800

0800eb3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b088      	sub	sp, #32
 800eb40:	af02      	add	r7, sp, #8
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	4608      	mov	r0, r1
 800eb46:	4611      	mov	r1, r2
 800eb48:	461a      	mov	r2, r3
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	817b      	strh	r3, [r7, #10]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	813b      	strh	r3, [r7, #8]
 800eb52:	4613      	mov	r3, r2
 800eb54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	2b20      	cmp	r3, #32
 800eb60:	f040 80fd 	bne.w	800ed5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb64:	6a3b      	ldr	r3, [r7, #32]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <HAL_I2C_Mem_Read+0x34>
 800eb6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d105      	bne.n	800eb7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e0f1      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d101      	bne.n	800eb8a <HAL_I2C_Mem_Read+0x4e>
 800eb86:	2302      	movs	r3, #2
 800eb88:	e0ea      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eb92:	f7fa fca7 	bl	80094e4 <HAL_GetTick>
 800eb96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	2319      	movs	r3, #25
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f001 ff04 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e0d5      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2222      	movs	r2, #34	@ 0x22
 800ebb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2240      	movs	r2, #64	@ 0x40
 800ebc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6a3a      	ldr	r2, [r7, #32]
 800ebce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ebd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ebdc:	88f8      	ldrh	r0, [r7, #6]
 800ebde:	893a      	ldrh	r2, [r7, #8]
 800ebe0:	8979      	ldrh	r1, [r7, #10]
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	9301      	str	r3, [sp, #4]
 800ebe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	4603      	mov	r3, r0
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f001 f8a5 	bl	800fd3c <I2C_RequestMemoryRead>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d005      	beq.n	800ec04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ec00:	2301      	movs	r3, #1
 800ec02:	e0ad      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	2bff      	cmp	r3, #255	@ 0xff
 800ec0c:	d90e      	bls.n	800ec2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	22ff      	movs	r2, #255	@ 0xff
 800ec12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	8979      	ldrh	r1, [r7, #10]
 800ec1c:	4b52      	ldr	r3, [pc, #328]	@ (800ed68 <HAL_I2C_Mem_Read+0x22c>)
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f002 f887 	bl	8010d38 <I2C_TransferConfig>
 800ec2a:	e00f      	b.n	800ec4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec3a:	b2da      	uxtb	r2, r3
 800ec3c:	8979      	ldrh	r1, [r7, #10]
 800ec3e:	4b4a      	ldr	r3, [pc, #296]	@ (800ed68 <HAL_I2C_Mem_Read+0x22c>)
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f002 f876 	bl	8010d38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec52:	2200      	movs	r2, #0
 800ec54:	2104      	movs	r1, #4
 800ec56:	68f8      	ldr	r0, [r7, #12]
 800ec58:	f001 feab 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d001      	beq.n	800ec66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ec62:	2301      	movs	r3, #1
 800ec64:	e07c      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec70:	b2d2      	uxtb	r2, r2
 800ec72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec82:	3b01      	subs	r3, #1
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	3b01      	subs	r3, #1
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d034      	beq.n	800ed0c <HAL_I2C_Mem_Read+0x1d0>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d130      	bne.n	800ed0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	2180      	movs	r1, #128	@ 0x80
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f001 fe7c 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e04d      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	2bff      	cmp	r3, #255	@ 0xff
 800eccc:	d90e      	bls.n	800ecec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	22ff      	movs	r2, #255	@ 0xff
 800ecd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	8979      	ldrh	r1, [r7, #10]
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f002 f827 	bl	8010d38 <I2C_TransferConfig>
 800ecea:	e00f      	b.n	800ed0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	8979      	ldrh	r1, [r7, #10]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f002 f816 	bl	8010d38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d19a      	bne.n	800ec4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f001 fee9 	bl	8010af2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e01a      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2220      	movs	r2, #32
 800ed30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6859      	ldr	r1, [r3, #4]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ed6c <HAL_I2C_Mem_Read+0x230>)
 800ed3e:	400b      	ands	r3, r1
 800ed40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2220      	movs	r2, #32
 800ed46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	e000      	b.n	800ed60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ed5e:	2302      	movs	r3, #2
  }
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	80002400 	.word	0x80002400
 800ed6c:	fe00e800 	.word	0xfe00e800

0800ed70 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	4608      	mov	r0, r1
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	4603      	mov	r3, r0
 800ed80:	817b      	strh	r3, [r7, #10]
 800ed82:	460b      	mov	r3, r1
 800ed84:	813b      	strh	r3, [r7, #8]
 800ed86:	4613      	mov	r3, r2
 800ed88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	2b20      	cmp	r3, #32
 800ed94:	d16a      	bne.n	800ee6c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <HAL_I2C_Mem_Write_IT+0x32>
 800ed9c:	8bbb      	ldrh	r3, [r7, #28]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d105      	bne.n	800edae <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eda8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e05f      	b.n	800ee6e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800edb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edbc:	d101      	bne.n	800edc2 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800edbe:	2302      	movs	r3, #2
 800edc0:	e055      	b.n	800ee6e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d101      	bne.n	800edd0 <HAL_I2C_Mem_Write_IT+0x60>
 800edcc:	2302      	movs	r3, #2
 800edce:	e04e      	b.n	800ee6e <HAL_I2C_Mem_Write_IT+0xfe>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2221      	movs	r2, #33	@ 0x21
 800eddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2240      	movs	r2, #64	@ 0x40
 800ede4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2200      	movs	r2, #0
 800edf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	69ba      	ldr	r2, [r7, #24]
 800edf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	8bba      	ldrh	r2, [r7, #28]
 800edfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	4a1d      	ldr	r2, [pc, #116]	@ (800ee78 <HAL_I2C_Mem_Write_IT+0x108>)
 800ee04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	4a1c      	ldr	r2, [pc, #112]	@ (800ee7c <HAL_I2C_Mem_Write_IT+0x10c>)
 800ee0a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ee0c:	897a      	ldrh	r2, [r7, #10]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d109      	bne.n	800ee2c <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee18:	893b      	ldrh	r3, [r7, #8]
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f04f 32ff 	mov.w	r2, #4294967295
 800ee28:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee2a:	e00b      	b.n	800ee44 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ee2c:	893b      	ldrh	r3, [r7, #8]
 800ee2e:	0a1b      	lsrs	r3, r3, #8
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ee3a:	893b      	ldrh	r3, [r7, #8]
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	461a      	mov	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ee44:	88fb      	ldrh	r3, [r7, #6]
 800ee46:	b2da      	uxtb	r2, r3
 800ee48:	8979      	ldrh	r1, [r7, #10]
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee80 <HAL_I2C_Mem_Write_IT+0x110>)
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f001 ff70 	bl	8010d38 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ee60:	2101      	movs	r1, #1
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f001 ff9a 	bl	8010d9c <I2C_Enable_IRQ>

    return HAL_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	e000      	b.n	800ee6e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ee6c:	2302      	movs	r3, #2
  }
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	ffff0000 	.word	0xffff0000
 800ee7c:	0800f081 	.word	0x0800f081
 800ee80:	80002000 	.word	0x80002000

0800ee84 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	4611      	mov	r1, r2
 800ee90:	461a      	mov	r2, r3
 800ee92:	4603      	mov	r3, r0
 800ee94:	817b      	strh	r3, [r7, #10]
 800ee96:	460b      	mov	r3, r1
 800ee98:	813b      	strh	r3, [r7, #8]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b20      	cmp	r3, #32
 800eea8:	d166      	bne.n	800ef78 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d002      	beq.n	800eeb6 <HAL_I2C_Mem_Read_IT+0x32>
 800eeb0:	8bbb      	ldrh	r3, [r7, #28]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d105      	bne.n	800eec2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eebc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eebe:	2301      	movs	r3, #1
 800eec0:	e05b      	b.n	800ef7a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eed0:	d101      	bne.n	800eed6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800eed2:	2302      	movs	r3, #2
 800eed4:	e051      	b.n	800ef7a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d101      	bne.n	800eee4 <HAL_I2C_Mem_Read_IT+0x60>
 800eee0:	2302      	movs	r3, #2
 800eee2:	e04a      	b.n	800ef7a <HAL_I2C_Mem_Read_IT+0xf6>
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2222      	movs	r2, #34	@ 0x22
 800eef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2240      	movs	r2, #64	@ 0x40
 800eef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2200      	movs	r2, #0
 800ef00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	69ba      	ldr	r2, [r7, #24]
 800ef06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	8bba      	ldrh	r2, [r7, #28]
 800ef0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	4a1c      	ldr	r2, [pc, #112]	@ (800ef84 <HAL_I2C_Mem_Read_IT+0x100>)
 800ef12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	4a1c      	ldr	r2, [pc, #112]	@ (800ef88 <HAL_I2C_Mem_Read_IT+0x104>)
 800ef18:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ef1a:	897a      	ldrh	r2, [r7, #10]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef20:	88fb      	ldrh	r3, [r7, #6]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d109      	bne.n	800ef3a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef26:	893b      	ldrh	r3, [r7, #8]
 800ef28:	b2da      	uxtb	r2, r3
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f04f 32ff 	mov.w	r2, #4294967295
 800ef36:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef38:	e00b      	b.n	800ef52 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ef3a:	893b      	ldrh	r3, [r7, #8]
 800ef3c:	0a1b      	lsrs	r3, r3, #8
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ef48:	893b      	ldrh	r3, [r7, #8]
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ef52:	88fb      	ldrh	r3, [r7, #6]
 800ef54:	b2da      	uxtb	r2, r3
 800ef56:	8979      	ldrh	r1, [r7, #10]
 800ef58:	4b0c      	ldr	r3, [pc, #48]	@ (800ef8c <HAL_I2C_Mem_Read_IT+0x108>)
 800ef5a:	9300      	str	r3, [sp, #0]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f001 feea 	bl	8010d38 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f001 ff14 	bl	8010d9c <I2C_Enable_IRQ>

    return HAL_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	e000      	b.n	800ef7a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800ef78:	2302      	movs	r3, #2
  }
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	ffff0000 	.word	0xffff0000
 800ef88:	0800f081 	.word	0x0800f081
 800ef8c:	80002000 	.word	0x80002000

0800ef90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efac:	2b00      	cmp	r3, #0
 800efae:	d005      	beq.n	800efbc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	68f9      	ldr	r1, [r7, #12]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	4798      	blx	r3
  }
}
 800efbc:	bf00      	nop
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800efcc:	bf00      	nop
 800efce:	370c      	adds	r7, #12
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800efe0:	bf00      	nop
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800eff4:	bf00      	nop
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	460b      	mov	r3, r1
 800f01e:	70fb      	strb	r3, [r7, #3]
 800f020:	4613      	mov	r3, r2
 800f022:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af02      	add	r7, sp, #8
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f08c:	4b8d      	ldr	r3, [pc, #564]	@ (800f2c4 <I2C_Mem_ISR_IT+0x244>)
 800f08e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d101      	bne.n	800f0a2 <I2C_Mem_ISR_IT+0x22>
 800f09e:	2302      	movs	r3, #2
 800f0a0:	e10c      	b.n	800f2bc <I2C_Mem_ISR_IT+0x23c>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	f003 0310 	and.w	r3, r3, #16
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d012      	beq.n	800f0da <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00d      	beq.n	800f0da <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2210      	movs	r2, #16
 800f0c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ca:	f043 0204 	orr.w	r2, r3, #4
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f001 fc2b 	bl	801092e <I2C_Flush_TXDR>
 800f0d8:	e0dd      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	f003 0304 	and.w	r3, r3, #4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d022      	beq.n	800f12a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d01d      	beq.n	800f12a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f023 0304 	bic.w	r3, r3, #4
 800f0f4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f100:	b2d2      	uxtb	r2, r2
 800f102:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f112:	3b01      	subs	r3, #1
 800f114:	b29a      	uxth	r2, r3
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f11e:	b29b      	uxth	r3, r3
 800f120:	3b01      	subs	r3, #1
 800f122:	b29a      	uxth	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f128:	e0b5      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	2b00      	cmp	r3, #0
 800f132:	d02c      	beq.n	800f18e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d027      	beq.n	800f18e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f146:	d118      	bne.n	800f17a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14c:	781a      	ldrb	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f162:	3b01      	subs	r3, #1
 800f164:	b29a      	uxth	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f16e:	b29b      	uxth	r3, r3
 800f170:	3b01      	subs	r3, #1
 800f172:	b29a      	uxth	r2, r3
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f178:	e08d      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f182:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f04f 32ff 	mov.w	r2, #4294967295
 800f18a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f18c:	e083      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f194:	2b00      	cmp	r3, #0
 800f196:	d03c      	beq.n	800f212 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d037      	beq.n	800f212 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d02c      	beq.n	800f206 <I2C_Mem_ISR_IT+0x186>
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d128      	bne.n	800f206 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	2bff      	cmp	r3, #255	@ 0xff
 800f1bc:	d910      	bls.n	800f1e0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	22ff      	movs	r2, #255	@ 0xff
 800f1c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1c8:	b299      	uxth	r1, r3
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f001 fdad 	bl	8010d38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1de:	e017      	b.n	800f210 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1ee:	b299      	uxth	r1, r3
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f001 fd9a 	bl	8010d38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f204:	e004      	b.n	800f210 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f206:	2140      	movs	r1, #64	@ 0x40
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f001 fa79 	bl	8010700 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f20e:	e042      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
 800f210:	e041      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d03c      	beq.n	800f296 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f222:	2b00      	cmp	r3, #0
 800f224:	d037      	beq.n	800f296 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f226:	2101      	movs	r1, #1
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f001 fe3b 	bl	8010ea4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f22e:	2102      	movs	r1, #2
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f001 fdb3 	bl	8010d9c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b22      	cmp	r3, #34	@ 0x22
 800f240:	d101      	bne.n	800f246 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f242:	4b21      	ldr	r3, [pc, #132]	@ (800f2c8 <I2C_Mem_ISR_IT+0x248>)
 800f244:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	2bff      	cmp	r3, #255	@ 0xff
 800f24e:	d910      	bls.n	800f272 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	22ff      	movs	r2, #255	@ 0xff
 800f254:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f25a:	b299      	uxth	r1, r3
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f260:	b2da      	uxtb	r2, r3
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f001 fd64 	bl	8010d38 <I2C_TransferConfig>
 800f270:	e011      	b.n	800f296 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f276:	b29a      	uxth	r2, r3
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f280:	b299      	uxth	r1, r3
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f286:	b2da      	uxtb	r2, r3
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f001 fd51 	bl	8010d38 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	f003 0320 	and.w	r3, r3, #32
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d008      	beq.n	800f2b2 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d003      	beq.n	800f2b2 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f2aa:	6939      	ldr	r1, [r7, #16]
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f000 feb7 	bl	8010020 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3718      	adds	r7, #24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	80002000 	.word	0x80002000
 800f2c8:	80002400 	.word	0x80002400

0800f2cc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d101      	bne.n	800f2f0 <I2C_Slave_ISR_IT+0x24>
 800f2ec:	2302      	movs	r3, #2
 800f2ee:	e0e2      	b.n	800f4b6 <I2C_Slave_ISR_IT+0x1ea>
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d009      	beq.n	800f316 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f30c:	6939      	ldr	r1, [r7, #16]
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 ff4e 	bl	80101b0 <I2C_ITSlaveCplt>
 800f314:	e0ca      	b.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	f003 0310 	and.w	r3, r3, #16
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d04b      	beq.n	800f3b8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f326:	2b00      	cmp	r3, #0
 800f328:	d046      	beq.n	800f3b8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f32e:	b29b      	uxth	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d128      	bne.n	800f386 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	2b28      	cmp	r3, #40	@ 0x28
 800f33e:	d108      	bne.n	800f352 <I2C_Slave_ISR_IT+0x86>
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f346:	d104      	bne.n	800f352 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f348:	6939      	ldr	r1, [r7, #16]
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	f001 f984 	bl	8010658 <I2C_ITListenCplt>
 800f350:	e031      	b.n	800f3b6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b29      	cmp	r3, #41	@ 0x29
 800f35c:	d10e      	bne.n	800f37c <I2C_Slave_ISR_IT+0xb0>
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f364:	d00a      	beq.n	800f37c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2210      	movs	r2, #16
 800f36c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f001 fadd 	bl	801092e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f000 fdf6 	bl	800ff66 <I2C_ITSlaveSeqCplt>
 800f37a:	e01c      	b.n	800f3b6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2210      	movs	r2, #16
 800f382:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f384:	e08f      	b.n	800f4a6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2210      	movs	r2, #16
 800f38c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f392:	f043 0204 	orr.w	r2, r3, #4
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d003      	beq.n	800f3a8 <I2C_Slave_ISR_IT+0xdc>
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f3a6:	d17e      	bne.n	800f4a6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f001 f9a6 	bl	8010700 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f3b4:	e077      	b.n	800f4a6 <I2C_Slave_ISR_IT+0x1da>
 800f3b6:	e076      	b.n	800f4a6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	f003 0304 	and.w	r3, r3, #4
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d02f      	beq.n	800f422 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d02a      	beq.n	800f422 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d018      	beq.n	800f408 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	3b01      	subs	r3, #1
 800f402:	b29a      	uxth	r2, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d14b      	bne.n	800f4aa <I2C_Slave_ISR_IT+0x1de>
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f418:	d047      	beq.n	800f4aa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f000 fda3 	bl	800ff66 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f420:	e043      	b.n	800f4aa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	f003 0308 	and.w	r3, r3, #8
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d009      	beq.n	800f440 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f432:	2b00      	cmp	r3, #0
 800f434:	d004      	beq.n	800f440 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f436:	6939      	ldr	r1, [r7, #16]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f000 fcd3 	bl	800fde4 <I2C_ITAddrCplt>
 800f43e:	e035      	b.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	f003 0302 	and.w	r3, r3, #2
 800f446:	2b00      	cmp	r3, #0
 800f448:	d030      	beq.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f450:	2b00      	cmp	r3, #0
 800f452:	d02b      	beq.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f458:	b29b      	uxth	r3, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d018      	beq.n	800f490 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f486:	3b01      	subs	r3, #1
 800f488:	b29a      	uxth	r2, r3
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f48e:	e00d      	b.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f496:	d002      	beq.n	800f49e <I2C_Slave_ISR_IT+0x1d2>
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 fd61 	bl	800ff66 <I2C_ITSlaveSeqCplt>
 800f4a4:	e002      	b.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f4a6:	bf00      	nop
 800f4a8:	e000      	b.n	800f4ac <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f4aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f4b4:	2300      	movs	r3, #0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b088      	sub	sp, #32
 800f4c2:	af02      	add	r7, sp, #8
 800f4c4:	60f8      	str	r0, [r7, #12]
 800f4c6:	60b9      	str	r1, [r7, #8]
 800f4c8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d101      	bne.n	800f4d8 <I2C_Master_ISR_DMA+0x1a>
 800f4d4:	2302      	movs	r3, #2
 800f4d6:	e0d9      	b.n	800f68c <I2C_Master_ISR_DMA+0x1ce>
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	f003 0310 	and.w	r3, r3, #16
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d016      	beq.n	800f518 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d011      	beq.n	800f518 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2210      	movs	r2, #16
 800f4fa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f500:	f043 0204 	orr.w	r2, r3, #4
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f508:	2120      	movs	r1, #32
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f001 fc46 	bl	8010d9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f001 fa0c 	bl	801092e <I2C_Flush_TXDR>
 800f516:	e0b4      	b.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d071      	beq.n	800f606 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d06c      	beq.n	800f606 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f53a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f540:	b29b      	uxth	r3, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d04e      	beq.n	800f5e4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f552:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f558:	b29b      	uxth	r3, r3
 800f55a:	2bff      	cmp	r3, #255	@ 0xff
 800f55c:	d906      	bls.n	800f56c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	22ff      	movs	r2, #255	@ 0xff
 800f562:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e010      	b.n	800f58e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f570:	b29a      	uxth	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f57a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f57e:	d003      	beq.n	800f588 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f584:	617b      	str	r3, [r7, #20]
 800f586:	e002      	b.n	800f58e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f588:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f58c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f592:	b2da      	uxtb	r2, r3
 800f594:	8a79      	ldrh	r1, [r7, #18]
 800f596:	2300      	movs	r3, #0
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f001 fbcb 	bl	8010d38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	2b22      	cmp	r3, #34	@ 0x22
 800f5be:	d108      	bne.n	800f5d2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f5ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5d0:	e057      	b.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f5e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5e2:	e04e      	b.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5f2:	d003      	beq.n	800f5fc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f000 fc79 	bl	800feec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f5fa:	e042      	b.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f5fc:	2140      	movs	r1, #64	@ 0x40
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f001 f87e 	bl	8010700 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f604:	e03d      	b.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d028      	beq.n	800f662 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f616:	2b00      	cmp	r3, #0
 800f618:	d023      	beq.n	800f662 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f61e:	b29b      	uxth	r3, r3
 800f620:	2b00      	cmp	r3, #0
 800f622:	d119      	bne.n	800f658 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f62e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f632:	d025      	beq.n	800f680 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f638:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f63c:	d108      	bne.n	800f650 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	685a      	ldr	r2, [r3, #4]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f64c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f64e:	e017      	b.n	800f680 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f000 fc4b 	bl	800feec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f656:	e013      	b.n	800f680 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f658:	2140      	movs	r1, #64	@ 0x40
 800f65a:	68f8      	ldr	r0, [r7, #12]
 800f65c:	f001 f850 	bl	8010700 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f660:	e00e      	b.n	800f680 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	f003 0320 	and.w	r3, r3, #32
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00a      	beq.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f672:	2b00      	cmp	r3, #0
 800f674:	d005      	beq.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f676:	68b9      	ldr	r1, [r7, #8]
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f000 fcd1 	bl	8010020 <I2C_ITMasterCplt>
 800f67e:	e000      	b.n	800f682 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f680:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3718      	adds	r7, #24
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b088      	sub	sp, #32
 800f698:	af02      	add	r7, sp, #8
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f6a0:	4b8d      	ldr	r3, [pc, #564]	@ (800f8d8 <I2C_Mem_ISR_DMA+0x244>)
 800f6a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d101      	bne.n	800f6b2 <I2C_Mem_ISR_DMA+0x1e>
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	e10e      	b.n	800f8d0 <I2C_Mem_ISR_DMA+0x23c>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	f003 0310 	and.w	r3, r3, #16
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d016      	beq.n	800f6f2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d011      	beq.n	800f6f2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2210      	movs	r2, #16
 800f6d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6da:	f043 0204 	orr.w	r2, r3, #4
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f6e2:	2120      	movs	r1, #32
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f001 fb59 	bl	8010d9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f001 f91f 	bl	801092e <I2C_Flush_TXDR>
 800f6f0:	e0e9      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	f003 0302 	and.w	r3, r3, #2
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00e      	beq.n	800f71a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f702:	2b00      	cmp	r3, #0
 800f704:	d009      	beq.n	800f71a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f70e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f04f 32ff 	mov.w	r2, #4294967295
 800f716:	651a      	str	r2, [r3, #80]	@ 0x50
 800f718:	e0d5      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f720:	2b00      	cmp	r3, #0
 800f722:	d05f      	beq.n	800f7e4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d05a      	beq.n	800f7e4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f72e:	2101      	movs	r1, #1
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f001 fbb7 	bl	8010ea4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f736:	2110      	movs	r1, #16
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f001 fb2f 	bl	8010d9c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f742:	b29b      	uxth	r3, r3
 800f744:	2b00      	cmp	r3, #0
 800f746:	d048      	beq.n	800f7da <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	2bff      	cmp	r3, #255	@ 0xff
 800f750:	d910      	bls.n	800f774 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	22ff      	movs	r2, #255	@ 0xff
 800f756:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f75c:	b299      	uxth	r1, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f762:	b2da      	uxtb	r2, r3
 800f764:	2300      	movs	r3, #0
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f001 fae3 	bl	8010d38 <I2C_TransferConfig>
 800f772:	e011      	b.n	800f798 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f778:	b29a      	uxth	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f782:	b299      	uxth	r1, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	2300      	movs	r3, #0
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f001 fad0 	bl	8010d38 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	2b22      	cmp	r3, #34	@ 0x22
 800f7b4:	d108      	bne.n	800f7c8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f7c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f7c6:	e07e      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f7d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f7d8:	e075      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f7da:	2140      	movs	r1, #64	@ 0x40
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	f000 ff8f 	bl	8010700 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f7e2:	e070      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d05d      	beq.n	800f8aa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d058      	beq.n	800f8aa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f7f8:	2101      	movs	r1, #1
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f001 fb52 	bl	8010ea4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f800:	2110      	movs	r1, #16
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f001 faca 	bl	8010d9c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	2b22      	cmp	r3, #34	@ 0x22
 800f812:	d101      	bne.n	800f818 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f814:	4b31      	ldr	r3, [pc, #196]	@ (800f8dc <I2C_Mem_ISR_DMA+0x248>)
 800f816:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	2bff      	cmp	r3, #255	@ 0xff
 800f820:	d910      	bls.n	800f844 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	22ff      	movs	r2, #255	@ 0xff
 800f826:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f82c:	b299      	uxth	r1, r3
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f832:	b2da      	uxtb	r2, r3
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f001 fa7b 	bl	8010d38 <I2C_TransferConfig>
 800f842:	e011      	b.n	800f868 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f848:	b29a      	uxth	r2, r3
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f852:	b299      	uxth	r1, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f001 fa68 	bl	8010d38 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f86c:	b29a      	uxth	r2, r3
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	b29a      	uxth	r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b22      	cmp	r3, #34	@ 0x22
 800f884:	d108      	bne.n	800f898 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f894:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f896:	e016      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f8a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8a8:	e00d      	b.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	f003 0320 	and.w	r3, r3, #32
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d008      	beq.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d003      	beq.n	800f8c6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f8be:	68b9      	ldr	r1, [r7, #8]
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f000 fbad 	bl	8010020 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3718      	adds	r7, #24
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	80002000 	.word	0x80002000
 800f8dc:	80002400 	.word	0x80002400

0800f8e0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b088      	sub	sp, #32
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8f0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	d101      	bne.n	800f904 <I2C_Slave_ISR_DMA+0x24>
 800f900:	2302      	movs	r3, #2
 800f902:	e1c2      	b.n	800fc8a <I2C_Slave_ISR_DMA+0x3aa>
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	f003 0320 	and.w	r3, r3, #32
 800f912:	2b00      	cmp	r3, #0
 800f914:	d009      	beq.n	800f92a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d004      	beq.n	800f92a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f920:	68b9      	ldr	r1, [r7, #8]
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f000 fc44 	bl	80101b0 <I2C_ITSlaveCplt>
 800f928:	e1aa      	b.n	800fc80 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	f003 0310 	and.w	r3, r3, #16
 800f930:	2b00      	cmp	r3, #0
 800f932:	f000 8197 	beq.w	800fc64 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 8191 	beq.w	800fc64 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d105      	bne.n	800f958 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f952:	2b00      	cmp	r3, #0
 800f954:	f000 817f 	beq.w	800fc56 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d07b      	beq.n	800fa58 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f966:	2b00      	cmp	r3, #0
 800f968:	d076      	beq.n	800fa58 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a74      	ldr	r2, [pc, #464]	@ (800fb44 <I2C_Slave_ISR_DMA+0x264>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d059      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a72      	ldr	r2, [pc, #456]	@ (800fb48 <I2C_Slave_ISR_DMA+0x268>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d053      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a70      	ldr	r2, [pc, #448]	@ (800fb4c <I2C_Slave_ISR_DMA+0x26c>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d04d      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a6e      	ldr	r2, [pc, #440]	@ (800fb50 <I2C_Slave_ISR_DMA+0x270>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d047      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a6c      	ldr	r2, [pc, #432]	@ (800fb54 <I2C_Slave_ISR_DMA+0x274>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d041      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a6a      	ldr	r2, [pc, #424]	@ (800fb58 <I2C_Slave_ISR_DMA+0x278>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d03b      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a68      	ldr	r2, [pc, #416]	@ (800fb5c <I2C_Slave_ISR_DMA+0x27c>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d035      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a66      	ldr	r2, [pc, #408]	@ (800fb60 <I2C_Slave_ISR_DMA+0x280>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d02f      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a64      	ldr	r2, [pc, #400]	@ (800fb64 <I2C_Slave_ISR_DMA+0x284>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d029      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a62      	ldr	r2, [pc, #392]	@ (800fb68 <I2C_Slave_ISR_DMA+0x288>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d023      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a60      	ldr	r2, [pc, #384]	@ (800fb6c <I2C_Slave_ISR_DMA+0x28c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d01d      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a5e      	ldr	r2, [pc, #376]	@ (800fb70 <I2C_Slave_ISR_DMA+0x290>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d017      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a5c      	ldr	r2, [pc, #368]	@ (800fb74 <I2C_Slave_ISR_DMA+0x294>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d011      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a5a      	ldr	r2, [pc, #360]	@ (800fb78 <I2C_Slave_ISR_DMA+0x298>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d00b      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a58      	ldr	r2, [pc, #352]	@ (800fb7c <I2C_Slave_ISR_DMA+0x29c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d005      	beq.n	800fa2a <I2C_Slave_ISR_DMA+0x14a>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a56      	ldr	r2, [pc, #344]	@ (800fb80 <I2C_Slave_ISR_DMA+0x2a0>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d109      	bne.n	800fa3e <I2C_Slave_ISR_DMA+0x15e>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	bf0c      	ite	eq
 800fa36:	2301      	moveq	r3, #1
 800fa38:	2300      	movne	r3, #0
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	e008      	b.n	800fa50 <I2C_Slave_ISR_DMA+0x170>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	bf0c      	ite	eq
 800fa4a:	2301      	moveq	r3, #1
 800fa4c:	2300      	movne	r3, #0
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d001      	beq.n	800fa58 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fa54:	2301      	movs	r3, #1
 800fa56:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 809e 	beq.w	800fb9e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 8098 	beq.w	800fb9e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a33      	ldr	r2, [pc, #204]	@ (800fb44 <I2C_Slave_ISR_DMA+0x264>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d059      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a31      	ldr	r2, [pc, #196]	@ (800fb48 <I2C_Slave_ISR_DMA+0x268>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d053      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a2f      	ldr	r2, [pc, #188]	@ (800fb4c <I2C_Slave_ISR_DMA+0x26c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d04d      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a2d      	ldr	r2, [pc, #180]	@ (800fb50 <I2C_Slave_ISR_DMA+0x270>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d047      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a2b      	ldr	r2, [pc, #172]	@ (800fb54 <I2C_Slave_ISR_DMA+0x274>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d041      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a29      	ldr	r2, [pc, #164]	@ (800fb58 <I2C_Slave_ISR_DMA+0x278>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d03b      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a27      	ldr	r2, [pc, #156]	@ (800fb5c <I2C_Slave_ISR_DMA+0x27c>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d035      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a25      	ldr	r2, [pc, #148]	@ (800fb60 <I2C_Slave_ISR_DMA+0x280>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d02f      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a23      	ldr	r2, [pc, #140]	@ (800fb64 <I2C_Slave_ISR_DMA+0x284>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d029      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a21      	ldr	r2, [pc, #132]	@ (800fb68 <I2C_Slave_ISR_DMA+0x288>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d023      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a1f      	ldr	r2, [pc, #124]	@ (800fb6c <I2C_Slave_ISR_DMA+0x28c>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d01d      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a1d      	ldr	r2, [pc, #116]	@ (800fb70 <I2C_Slave_ISR_DMA+0x290>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d017      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a1b      	ldr	r2, [pc, #108]	@ (800fb74 <I2C_Slave_ISR_DMA+0x294>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d011      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a19      	ldr	r2, [pc, #100]	@ (800fb78 <I2C_Slave_ISR_DMA+0x298>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d00b      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a17      	ldr	r2, [pc, #92]	@ (800fb7c <I2C_Slave_ISR_DMA+0x29c>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d005      	beq.n	800fb2e <I2C_Slave_ISR_DMA+0x24e>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4a15      	ldr	r2, [pc, #84]	@ (800fb80 <I2C_Slave_ISR_DMA+0x2a0>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d12a      	bne.n	800fb84 <I2C_Slave_ISR_DMA+0x2a4>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	bf0c      	ite	eq
 800fb3a:	2301      	moveq	r3, #1
 800fb3c:	2300      	movne	r3, #0
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	e029      	b.n	800fb96 <I2C_Slave_ISR_DMA+0x2b6>
 800fb42:	bf00      	nop
 800fb44:	40020010 	.word	0x40020010
 800fb48:	40020028 	.word	0x40020028
 800fb4c:	40020040 	.word	0x40020040
 800fb50:	40020058 	.word	0x40020058
 800fb54:	40020070 	.word	0x40020070
 800fb58:	40020088 	.word	0x40020088
 800fb5c:	400200a0 	.word	0x400200a0
 800fb60:	400200b8 	.word	0x400200b8
 800fb64:	40020410 	.word	0x40020410
 800fb68:	40020428 	.word	0x40020428
 800fb6c:	40020440 	.word	0x40020440
 800fb70:	40020458 	.word	0x40020458
 800fb74:	40020470 	.word	0x40020470
 800fb78:	40020488 	.word	0x40020488
 800fb7c:	400204a0 	.word	0x400204a0
 800fb80:	400204b8 	.word	0x400204b8
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	bf0c      	ite	eq
 800fb90:	2301      	moveq	r3, #1
 800fb92:	2300      	movne	r3, #0
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d128      	bne.n	800fbf6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b28      	cmp	r3, #40	@ 0x28
 800fbae:	d108      	bne.n	800fbc2 <I2C_Slave_ISR_DMA+0x2e2>
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fbb6:	d104      	bne.n	800fbc2 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fbb8:	68b9      	ldr	r1, [r7, #8]
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f000 fd4c 	bl	8010658 <I2C_ITListenCplt>
 800fbc0:	e048      	b.n	800fc54 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	2b29      	cmp	r3, #41	@ 0x29
 800fbcc:	d10e      	bne.n	800fbec <I2C_Slave_ISR_DMA+0x30c>
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fbd4:	d00a      	beq.n	800fbec <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2210      	movs	r2, #16
 800fbdc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f000 fea5 	bl	801092e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f000 f9be 	bl	800ff66 <I2C_ITSlaveSeqCplt>
 800fbea:	e033      	b.n	800fc54 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2210      	movs	r2, #16
 800fbf2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fbf4:	e034      	b.n	800fc60 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2210      	movs	r2, #16
 800fbfc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc02:	f043 0204 	orr.w	r2, r3, #4
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc10:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d003      	beq.n	800fc20 <I2C_Slave_ISR_DMA+0x340>
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc1e:	d11f      	bne.n	800fc60 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
 800fc22:	2b21      	cmp	r3, #33	@ 0x21
 800fc24:	d002      	beq.n	800fc2c <I2C_Slave_ISR_DMA+0x34c>
 800fc26:	7dfb      	ldrb	r3, [r7, #23]
 800fc28:	2b29      	cmp	r3, #41	@ 0x29
 800fc2a:	d103      	bne.n	800fc34 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2221      	movs	r2, #33	@ 0x21
 800fc30:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc32:	e008      	b.n	800fc46 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
 800fc36:	2b22      	cmp	r3, #34	@ 0x22
 800fc38:	d002      	beq.n	800fc40 <I2C_Slave_ISR_DMA+0x360>
 800fc3a:	7dfb      	ldrb	r3, [r7, #23]
 800fc3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc3e:	d102      	bne.n	800fc46 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2222      	movs	r2, #34	@ 0x22
 800fc44:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 fd57 	bl	8010700 <I2C_ITError>
      if (treatdmanack == 1U)
 800fc52:	e005      	b.n	800fc60 <I2C_Slave_ISR_DMA+0x380>
 800fc54:	e004      	b.n	800fc60 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2210      	movs	r2, #16
 800fc5c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fc5e:	e00f      	b.n	800fc80 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fc60:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fc62:	e00d      	b.n	800fc80 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	f003 0308 	and.w	r3, r3, #8
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d008      	beq.n	800fc80 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d003      	beq.n	800fc80 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fc78:	68b9      	ldr	r1, [r7, #8]
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f000 f8b2 	bl	800fde4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc88:	2300      	movs	r3, #0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3720      	adds	r7, #32
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop

0800fc94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af02      	add	r7, sp, #8
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	4611      	mov	r1, r2
 800fca0:	461a      	mov	r2, r3
 800fca2:	4603      	mov	r3, r0
 800fca4:	817b      	strh	r3, [r7, #10]
 800fca6:	460b      	mov	r3, r1
 800fca8:	813b      	strh	r3, [r7, #8]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fcae:	88fb      	ldrh	r3, [r7, #6]
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	8979      	ldrh	r1, [r7, #10]
 800fcb4:	4b20      	ldr	r3, [pc, #128]	@ (800fd38 <I2C_RequestMemoryWrite+0xa4>)
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f001 f83b 	bl	8010d38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcc2:	69fa      	ldr	r2, [r7, #28]
 800fcc4:	69b9      	ldr	r1, [r7, #24]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f000 fecc 	bl	8010a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e02c      	b.n	800fd30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fcd6:	88fb      	ldrh	r3, [r7, #6]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d105      	bne.n	800fce8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fcdc:	893b      	ldrh	r3, [r7, #8]
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	629a      	str	r2, [r3, #40]	@ 0x28
 800fce6:	e015      	b.n	800fd14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fce8:	893b      	ldrh	r3, [r7, #8]
 800fcea:	0a1b      	lsrs	r3, r3, #8
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcf6:	69fa      	ldr	r2, [r7, #28]
 800fcf8:	69b9      	ldr	r1, [r7, #24]
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f000 feb2 	bl	8010a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d001      	beq.n	800fd0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	e012      	b.n	800fd30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd0a:	893b      	ldrh	r3, [r7, #8]
 800fd0c:	b2da      	uxtb	r2, r3
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2180      	movs	r1, #128	@ 0x80
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f000 fe47 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d001      	beq.n	800fd2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	e000      	b.n	800fd30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	80002000 	.word	0x80002000

0800fd3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af02      	add	r7, sp, #8
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	4608      	mov	r0, r1
 800fd46:	4611      	mov	r1, r2
 800fd48:	461a      	mov	r2, r3
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	817b      	strh	r3, [r7, #10]
 800fd4e:	460b      	mov	r3, r1
 800fd50:	813b      	strh	r3, [r7, #8]
 800fd52:	4613      	mov	r3, r2
 800fd54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fd56:	88fb      	ldrh	r3, [r7, #6]
 800fd58:	b2da      	uxtb	r2, r3
 800fd5a:	8979      	ldrh	r1, [r7, #10]
 800fd5c:	4b20      	ldr	r3, [pc, #128]	@ (800fde0 <I2C_RequestMemoryRead+0xa4>)
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	2300      	movs	r3, #0
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f000 ffe8 	bl	8010d38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd68:	69fa      	ldr	r2, [r7, #28]
 800fd6a:	69b9      	ldr	r1, [r7, #24]
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 fe79 	bl	8010a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e02c      	b.n	800fdd6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd7c:	88fb      	ldrh	r3, [r7, #6]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d105      	bne.n	800fd8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd82:	893b      	ldrh	r3, [r7, #8]
 800fd84:	b2da      	uxtb	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd8c:	e015      	b.n	800fdba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd8e:	893b      	ldrh	r3, [r7, #8]
 800fd90:	0a1b      	lsrs	r3, r3, #8
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd9c:	69fa      	ldr	r2, [r7, #28]
 800fd9e:	69b9      	ldr	r1, [r7, #24]
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f000 fe5f 	bl	8010a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fdac:	2301      	movs	r3, #1
 800fdae:	e012      	b.n	800fdd6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fdb0:	893b      	ldrh	r3, [r7, #8]
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2140      	movs	r1, #64	@ 0x40
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	f000 fdf4 	bl	80109b2 <I2C_WaitOnFlagUntilTimeout>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e000      	b.n	800fdd6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	80002000 	.word	0x80002000

0800fde4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fdfa:	2b28      	cmp	r3, #40	@ 0x28
 800fdfc:	d16a      	bne.n	800fed4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	0c1b      	lsrs	r3, r3, #16
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	0c1b      	lsrs	r3, r3, #16
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fe1c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe2a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fe38:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d138      	bne.n	800feb4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fe42:	897b      	ldrh	r3, [r7, #10]
 800fe44:	09db      	lsrs	r3, r3, #7
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	89bb      	ldrh	r3, [r7, #12]
 800fe4a:	4053      	eors	r3, r2
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	f003 0306 	and.w	r3, r3, #6
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d11c      	bne.n	800fe90 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fe56:	897b      	ldrh	r3, [r7, #10]
 800fe58:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d13b      	bne.n	800fee4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2208      	movs	r2, #8
 800fe78:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe82:	89ba      	ldrh	r2, [r7, #12]
 800fe84:	7bfb      	ldrb	r3, [r7, #15]
 800fe86:	4619      	mov	r1, r3
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff f8c3 	bl	800f014 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fe8e:	e029      	b.n	800fee4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fe90:	893b      	ldrh	r3, [r7, #8]
 800fe92:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fe94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f001 f803 	bl	8010ea4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fea6:	89ba      	ldrh	r2, [r7, #12]
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
 800feaa:	4619      	mov	r1, r3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7ff f8b1 	bl	800f014 <HAL_I2C_AddrCallback>
}
 800feb2:	e017      	b.n	800fee4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800feb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 fff3 	bl	8010ea4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fec6:	89ba      	ldrh	r2, [r7, #12]
 800fec8:	7bfb      	ldrb	r3, [r7, #15]
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff f8a1 	bl	800f014 <HAL_I2C_AddrCallback>
}
 800fed2:	e007      	b.n	800fee4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2208      	movs	r2, #8
 800feda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	2b21      	cmp	r3, #33	@ 0x21
 800ff06:	d115      	bne.n	800ff34 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2211      	movs	r2, #17
 800ff14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 ffc0 	bl	8010ea4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff f849 	bl	800efc4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ff32:	e014      	b.n	800ff5e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2220      	movs	r2, #32
 800ff38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2212      	movs	r2, #18
 800ff40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ff48:	2102      	movs	r1, #2
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 ffaa 	bl	8010ea4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff f83d 	bl	800efd8 <HAL_I2C_MasterRxCpltCallback>
}
 800ff5e:	bf00      	nop
 800ff60:	3708      	adds	r7, #8
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b084      	sub	sp, #16
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d008      	beq.n	800ff9a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ff96:	601a      	str	r2, [r3, #0]
 800ff98:	e00c      	b.n	800ffb4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d007      	beq.n	800ffb4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ffb2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b29      	cmp	r3, #41	@ 0x29
 800ffbe:	d112      	bne.n	800ffe6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2228      	movs	r2, #40	@ 0x28
 800ffc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2221      	movs	r2, #33	@ 0x21
 800ffcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffce:	2101      	movs	r1, #1
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 ff67 	bl	8010ea4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7ff f804 	bl	800efec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ffe4:	e017      	b.n	8010016 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b2a      	cmp	r3, #42	@ 0x2a
 800fff0:	d111      	bne.n	8010016 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2228      	movs	r2, #40	@ 0x28
 800fff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2222      	movs	r2, #34	@ 0x22
 800fffe:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010000:	2102      	movs	r1, #2
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 ff4e 	bl	8010ea4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f7fe fff5 	bl	800f000 <HAL_I2C_SlaveRxCpltCallback>
}
 8010016:	bf00      	nop
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
	...

08010020 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2220      	movs	r2, #32
 8010034:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801003c:	b2db      	uxtb	r3, r3
 801003e:	2b21      	cmp	r3, #33	@ 0x21
 8010040:	d107      	bne.n	8010052 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010042:	2101      	movs	r1, #1
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 ff2d 	bl	8010ea4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2211      	movs	r2, #17
 801004e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010050:	e00c      	b.n	801006c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b22      	cmp	r3, #34	@ 0x22
 801005c:	d106      	bne.n	801006c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801005e:	2102      	movs	r1, #2
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 ff1f 	bl	8010ea4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2212      	movs	r2, #18
 801006a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	6859      	ldr	r1, [r3, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	4b4c      	ldr	r3, [pc, #304]	@ (80101a8 <I2C_ITMasterCplt+0x188>)
 8010078:	400b      	ands	r3, r1
 801007a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a49      	ldr	r2, [pc, #292]	@ (80101ac <I2C_ITMasterCplt+0x18c>)
 8010086:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	f003 0310 	and.w	r3, r3, #16
 801008e:	2b00      	cmp	r3, #0
 8010090:	d009      	beq.n	80100a6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2210      	movs	r2, #16
 8010098:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801009e:	f043 0204 	orr.w	r2, r3, #4
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	2b60      	cmp	r3, #96	@ 0x60
 80100b0:	d10a      	bne.n	80100c8 <I2C_ITMasterCplt+0xa8>
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f003 0304 	and.w	r3, r3, #4
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d005      	beq.n	80100c8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80100c6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fc30 	bl	801092e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100d2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b60      	cmp	r3, #96	@ 0x60
 80100de:	d002      	beq.n	80100e6 <I2C_ITMasterCplt+0xc6>
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d006      	beq.n	80100f4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ea:	4619      	mov	r1, r3
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 fb07 	bl	8010700 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80100f2:	e054      	b.n	801019e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	2b21      	cmp	r3, #33	@ 0x21
 80100fe:	d124      	bne.n	801014a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2220      	movs	r2, #32
 8010104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b40      	cmp	r3, #64	@ 0x40
 8010118:	d10b      	bne.n	8010132 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2200      	movs	r2, #0
 8010126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7fe ff8a 	bl	800f044 <HAL_I2C_MemTxCpltCallback>
}
 8010130:	e035      	b.n	801019e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fe ff3e 	bl	800efc4 <HAL_I2C_MasterTxCpltCallback>
}
 8010148:	e029      	b.n	801019e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010150:	b2db      	uxtb	r3, r3
 8010152:	2b22      	cmp	r3, #34	@ 0x22
 8010154:	d123      	bne.n	801019e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2220      	movs	r2, #32
 801015a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b40      	cmp	r3, #64	@ 0x40
 801016e:	d10b      	bne.n	8010188 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7f6 fa51 	bl	8006628 <HAL_I2C_MemRxCpltCallback>
}
 8010186:	e00a      	b.n	801019e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7fe ff1d 	bl	800efd8 <HAL_I2C_MasterRxCpltCallback>
}
 801019e:	bf00      	nop
 80101a0:	3718      	adds	r7, #24
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	fe00e800 	.word	0xfe00e800
 80101ac:	ffff0000 	.word	0xffff0000

080101b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101d2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2220      	movs	r2, #32
 80101da:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80101dc:	7afb      	ldrb	r3, [r7, #11]
 80101de:	2b21      	cmp	r3, #33	@ 0x21
 80101e0:	d002      	beq.n	80101e8 <I2C_ITSlaveCplt+0x38>
 80101e2:	7afb      	ldrb	r3, [r7, #11]
 80101e4:	2b29      	cmp	r3, #41	@ 0x29
 80101e6:	d108      	bne.n	80101fa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80101e8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 fe59 	bl	8010ea4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2221      	movs	r2, #33	@ 0x21
 80101f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80101f8:	e019      	b.n	801022e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80101fa:	7afb      	ldrb	r3, [r7, #11]
 80101fc:	2b22      	cmp	r3, #34	@ 0x22
 80101fe:	d002      	beq.n	8010206 <I2C_ITSlaveCplt+0x56>
 8010200:	7afb      	ldrb	r3, [r7, #11]
 8010202:	2b2a      	cmp	r3, #42	@ 0x2a
 8010204:	d108      	bne.n	8010218 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010206:	f248 0102 	movw	r1, #32770	@ 0x8002
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 fe4a 	bl	8010ea4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2222      	movs	r2, #34	@ 0x22
 8010214:	631a      	str	r2, [r3, #48]	@ 0x30
 8010216:	e00a      	b.n	801022e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8010218:	7afb      	ldrb	r3, [r7, #11]
 801021a:	2b28      	cmp	r3, #40	@ 0x28
 801021c:	d107      	bne.n	801022e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 801021e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 fe3e 	bl	8010ea4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801023c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	6859      	ldr	r1, [r3, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	4b7f      	ldr	r3, [pc, #508]	@ (8010448 <I2C_ITSlaveCplt+0x298>)
 801024a:	400b      	ands	r3, r1
 801024c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fb6d 	bl	801092e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801025a:	2b00      	cmp	r3, #0
 801025c:	d07a      	beq.n	8010354 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801026c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010272:	2b00      	cmp	r3, #0
 8010274:	f000 8111 	beq.w	801049a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4a73      	ldr	r2, [pc, #460]	@ (801044c <I2C_ITSlaveCplt+0x29c>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d059      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a71      	ldr	r2, [pc, #452]	@ (8010450 <I2C_ITSlaveCplt+0x2a0>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d053      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a6f      	ldr	r2, [pc, #444]	@ (8010454 <I2C_ITSlaveCplt+0x2a4>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d04d      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a6d      	ldr	r2, [pc, #436]	@ (8010458 <I2C_ITSlaveCplt+0x2a8>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d047      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a6b      	ldr	r2, [pc, #428]	@ (801045c <I2C_ITSlaveCplt+0x2ac>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d041      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a69      	ldr	r2, [pc, #420]	@ (8010460 <I2C_ITSlaveCplt+0x2b0>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d03b      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a67      	ldr	r2, [pc, #412]	@ (8010464 <I2C_ITSlaveCplt+0x2b4>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d035      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a65      	ldr	r2, [pc, #404]	@ (8010468 <I2C_ITSlaveCplt+0x2b8>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d02f      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4a63      	ldr	r2, [pc, #396]	@ (801046c <I2C_ITSlaveCplt+0x2bc>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d029      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a61      	ldr	r2, [pc, #388]	@ (8010470 <I2C_ITSlaveCplt+0x2c0>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d023      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a5f      	ldr	r2, [pc, #380]	@ (8010474 <I2C_ITSlaveCplt+0x2c4>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d01d      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4a5d      	ldr	r2, [pc, #372]	@ (8010478 <I2C_ITSlaveCplt+0x2c8>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d017      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a5b      	ldr	r2, [pc, #364]	@ (801047c <I2C_ITSlaveCplt+0x2cc>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d011      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a59      	ldr	r2, [pc, #356]	@ (8010480 <I2C_ITSlaveCplt+0x2d0>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d00b      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a57      	ldr	r2, [pc, #348]	@ (8010484 <I2C_ITSlaveCplt+0x2d4>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d005      	beq.n	8010338 <I2C_ITSlaveCplt+0x188>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a55      	ldr	r2, [pc, #340]	@ (8010488 <I2C_ITSlaveCplt+0x2d8>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d105      	bne.n	8010344 <I2C_ITSlaveCplt+0x194>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	b29b      	uxth	r3, r3
 8010342:	e004      	b.n	801034e <I2C_ITSlaveCplt+0x19e>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	b29b      	uxth	r3, r3
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8010352:	e0a2      	b.n	801049a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801035a:	2b00      	cmp	r3, #0
 801035c:	f000 809d 	beq.w	801049a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801036e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010374:	2b00      	cmp	r3, #0
 8010376:	f000 8090 	beq.w	801049a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a32      	ldr	r2, [pc, #200]	@ (801044c <I2C_ITSlaveCplt+0x29c>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d059      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a30      	ldr	r2, [pc, #192]	@ (8010450 <I2C_ITSlaveCplt+0x2a0>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d053      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a2e      	ldr	r2, [pc, #184]	@ (8010454 <I2C_ITSlaveCplt+0x2a4>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d04d      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a2c      	ldr	r2, [pc, #176]	@ (8010458 <I2C_ITSlaveCplt+0x2a8>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d047      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a2a      	ldr	r2, [pc, #168]	@ (801045c <I2C_ITSlaveCplt+0x2ac>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d041      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4a28      	ldr	r2, [pc, #160]	@ (8010460 <I2C_ITSlaveCplt+0x2b0>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d03b      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a26      	ldr	r2, [pc, #152]	@ (8010464 <I2C_ITSlaveCplt+0x2b4>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d035      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a24      	ldr	r2, [pc, #144]	@ (8010468 <I2C_ITSlaveCplt+0x2b8>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d02f      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a22      	ldr	r2, [pc, #136]	@ (801046c <I2C_ITSlaveCplt+0x2bc>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d029      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a20      	ldr	r2, [pc, #128]	@ (8010470 <I2C_ITSlaveCplt+0x2c0>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d023      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a1e      	ldr	r2, [pc, #120]	@ (8010474 <I2C_ITSlaveCplt+0x2c4>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d01d      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4a1c      	ldr	r2, [pc, #112]	@ (8010478 <I2C_ITSlaveCplt+0x2c8>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d017      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a1a      	ldr	r2, [pc, #104]	@ (801047c <I2C_ITSlaveCplt+0x2cc>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d011      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a18      	ldr	r2, [pc, #96]	@ (8010480 <I2C_ITSlaveCplt+0x2d0>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d00b      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a16      	ldr	r2, [pc, #88]	@ (8010484 <I2C_ITSlaveCplt+0x2d4>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d005      	beq.n	801043a <I2C_ITSlaveCplt+0x28a>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a14      	ldr	r2, [pc, #80]	@ (8010488 <I2C_ITSlaveCplt+0x2d8>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d128      	bne.n	801048c <I2C_ITSlaveCplt+0x2dc>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	b29b      	uxth	r3, r3
 8010444:	e027      	b.n	8010496 <I2C_ITSlaveCplt+0x2e6>
 8010446:	bf00      	nop
 8010448:	fe00e800 	.word	0xfe00e800
 801044c:	40020010 	.word	0x40020010
 8010450:	40020028 	.word	0x40020028
 8010454:	40020040 	.word	0x40020040
 8010458:	40020058 	.word	0x40020058
 801045c:	40020070 	.word	0x40020070
 8010460:	40020088 	.word	0x40020088
 8010464:	400200a0 	.word	0x400200a0
 8010468:	400200b8 	.word	0x400200b8
 801046c:	40020410 	.word	0x40020410
 8010470:	40020428 	.word	0x40020428
 8010474:	40020440 	.word	0x40020440
 8010478:	40020458 	.word	0x40020458
 801047c:	40020470 	.word	0x40020470
 8010480:	40020488 	.word	0x40020488
 8010484:	400204a0 	.word	0x400204a0
 8010488:	400204b8 	.word	0x400204b8
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	b29b      	uxth	r3, r3
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	f003 0304 	and.w	r3, r3, #4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d020      	beq.n	80104e6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	f023 0304 	bic.w	r3, r3, #4
 80104aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104b6:	b2d2      	uxtb	r2, r2
 80104b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00c      	beq.n	80104e6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104d0:	3b01      	subs	r3, #1
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104dc:	b29b      	uxth	r3, r3
 80104de:	3b01      	subs	r3, #1
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d005      	beq.n	80104fc <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f4:	f043 0204 	orr.w	r2, r3, #4
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f003 0310 	and.w	r3, r3, #16
 8010502:	2b00      	cmp	r3, #0
 8010504:	d049      	beq.n	801059a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801050c:	2b00      	cmp	r3, #0
 801050e:	d044      	beq.n	801059a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010514:	b29b      	uxth	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	d128      	bne.n	801056c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010520:	b2db      	uxtb	r3, r3
 8010522:	2b28      	cmp	r3, #40	@ 0x28
 8010524:	d108      	bne.n	8010538 <I2C_ITSlaveCplt+0x388>
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801052c:	d104      	bne.n	8010538 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801052e:	6979      	ldr	r1, [r7, #20]
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 f891 	bl	8010658 <I2C_ITListenCplt>
 8010536:	e030      	b.n	801059a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801053e:	b2db      	uxtb	r3, r3
 8010540:	2b29      	cmp	r3, #41	@ 0x29
 8010542:	d10e      	bne.n	8010562 <I2C_ITSlaveCplt+0x3b2>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801054a:	d00a      	beq.n	8010562 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2210      	movs	r2, #16
 8010552:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 f9ea 	bl	801092e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7ff fd03 	bl	800ff66 <I2C_ITSlaveSeqCplt>
 8010560:	e01b      	b.n	801059a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2210      	movs	r2, #16
 8010568:	61da      	str	r2, [r3, #28]
 801056a:	e016      	b.n	801059a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2210      	movs	r2, #16
 8010572:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010578:	f043 0204 	orr.w	r2, r3, #4
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d003      	beq.n	801058e <I2C_ITSlaveCplt+0x3de>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801058c:	d105      	bne.n	801059a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010592:	4619      	mov	r1, r3
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 f8b3 	bl	8010700 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d010      	beq.n	80105d2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 f8a2 	bl	8010700 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b28      	cmp	r3, #40	@ 0x28
 80105c6:	d141      	bne.n	801064c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80105c8:	6979      	ldr	r1, [r7, #20]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f844 	bl	8010658 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80105d0:	e03c      	b.n	801064c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105da:	d014      	beq.n	8010606 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff fcc2 	bl	800ff66 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4a1b      	ldr	r2, [pc, #108]	@ (8010654 <I2C_ITSlaveCplt+0x4a4>)
 80105e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2220      	movs	r2, #32
 80105ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f7fe fd16 	bl	800f030 <HAL_I2C_ListenCpltCallback>
}
 8010604:	e022      	b.n	801064c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b22      	cmp	r3, #34	@ 0x22
 8010610:	d10e      	bne.n	8010630 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2220      	movs	r2, #32
 8010616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7fe fce9 	bl	800f000 <HAL_I2C_SlaveRxCpltCallback>
}
 801062e:	e00d      	b.n	801064c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2220      	movs	r2, #32
 8010634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7fe fcd0 	bl	800efec <HAL_I2C_SlaveTxCpltCallback>
}
 801064c:	bf00      	nop
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	ffff0000 	.word	0xffff0000

08010658 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a25      	ldr	r2, [pc, #148]	@ (80106fc <I2C_ITListenCplt+0xa4>)
 8010666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2220      	movs	r2, #32
 8010672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	f003 0304 	and.w	r3, r3, #4
 801068a:	2b00      	cmp	r3, #0
 801068c:	d022      	beq.n	80106d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010698:	b2d2      	uxtb	r2, r2
 801069a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106a0:	1c5a      	adds	r2, r3, #1
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d012      	beq.n	80106d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106b2:	3b01      	subs	r3, #1
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106be:	b29b      	uxth	r3, r3
 80106c0:	3b01      	subs	r3, #1
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106cc:	f043 0204 	orr.w	r2, r3, #4
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80106d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 fbe3 	bl	8010ea4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2210      	movs	r2, #16
 80106e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7fe fc9e 	bl	800f030 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80106f4:	bf00      	nop
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	ffff0000 	.word	0xffff0000

08010700 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010710:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	4a6d      	ldr	r2, [pc, #436]	@ (80108d4 <I2C_ITError+0x1d4>)
 801071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	431a      	orrs	r2, r3
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010732:	7bfb      	ldrb	r3, [r7, #15]
 8010734:	2b28      	cmp	r3, #40	@ 0x28
 8010736:	d005      	beq.n	8010744 <I2C_ITError+0x44>
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	2b29      	cmp	r3, #41	@ 0x29
 801073c:	d002      	beq.n	8010744 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	2b2a      	cmp	r3, #42	@ 0x2a
 8010742:	d10b      	bne.n	801075c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010744:	2103      	movs	r1, #3
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 fbac 	bl	8010ea4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2228      	movs	r2, #40	@ 0x28
 8010750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4a60      	ldr	r2, [pc, #384]	@ (80108d8 <I2C_ITError+0x1d8>)
 8010758:	635a      	str	r2, [r3, #52]	@ 0x34
 801075a:	e030      	b.n	80107be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801075c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 fb9f 	bl	8010ea4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f8e1 	bl	801092e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010772:	b2db      	uxtb	r3, r3
 8010774:	2b60      	cmp	r3, #96	@ 0x60
 8010776:	d01f      	beq.n	80107b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2220      	movs	r2, #32
 801077c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	699b      	ldr	r3, [r3, #24]
 8010786:	f003 0320 	and.w	r3, r3, #32
 801078a:	2b20      	cmp	r3, #32
 801078c:	d114      	bne.n	80107b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	699b      	ldr	r3, [r3, #24]
 8010794:	f003 0310 	and.w	r3, r3, #16
 8010798:	2b10      	cmp	r3, #16
 801079a:	d109      	bne.n	80107b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2210      	movs	r2, #16
 80107a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107a8:	f043 0204 	orr.w	r2, r3, #4
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2220      	movs	r2, #32
 80107b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d039      	beq.n	8010840 <I2C_ITError+0x140>
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b11      	cmp	r3, #17
 80107d0:	d002      	beq.n	80107d8 <I2C_ITError+0xd8>
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b21      	cmp	r3, #33	@ 0x21
 80107d6:	d133      	bne.n	8010840 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80107e6:	d107      	bne.n	80107f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80107f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fd f9f7 	bl	800dbf0 <HAL_DMA_GetState>
 8010802:	4603      	mov	r3, r0
 8010804:	2b01      	cmp	r3, #1
 8010806:	d017      	beq.n	8010838 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801080c:	4a33      	ldr	r2, [pc, #204]	@ (80108dc <I2C_ITError+0x1dc>)
 801080e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801081c:	4618      	mov	r0, r3
 801081e:	f7fc f877 	bl	800c910 <HAL_DMA_Abort_IT>
 8010822:	4603      	mov	r3, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d04d      	beq.n	80108c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801082c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010832:	4610      	mov	r0, r2
 8010834:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010836:	e045      	b.n	80108c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f000 f851 	bl	80108e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801083e:	e041      	b.n	80108c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d039      	beq.n	80108bc <I2C_ITError+0x1bc>
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	2b12      	cmp	r3, #18
 801084c:	d002      	beq.n	8010854 <I2C_ITError+0x154>
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	2b22      	cmp	r3, #34	@ 0x22
 8010852:	d133      	bne.n	80108bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801085e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010862:	d107      	bne.n	8010874 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010872:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010878:	4618      	mov	r0, r3
 801087a:	f7fd f9b9 	bl	800dbf0 <HAL_DMA_GetState>
 801087e:	4603      	mov	r3, r0
 8010880:	2b01      	cmp	r3, #1
 8010882:	d017      	beq.n	80108b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010888:	4a14      	ldr	r2, [pc, #80]	@ (80108dc <I2C_ITError+0x1dc>)
 801088a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010898:	4618      	mov	r0, r3
 801089a:	f7fc f839 	bl	800c910 <HAL_DMA_Abort_IT>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d011      	beq.n	80108c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80108ae:	4610      	mov	r0, r2
 80108b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108b2:	e009      	b.n	80108c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f000 f813 	bl	80108e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108ba:	e005      	b.n	80108c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 f80f 	bl	80108e0 <I2C_TreatErrorCallback>
  }
}
 80108c2:	e002      	b.n	80108ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108c4:	bf00      	nop
 80108c6:	e000      	b.n	80108ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108c8:	bf00      	nop
}
 80108ca:	bf00      	nop
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	ffff0000 	.word	0xffff0000
 80108d8:	0800f2cd 	.word	0x0800f2cd
 80108dc:	08010977 	.word	0x08010977

080108e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b60      	cmp	r3, #96	@ 0x60
 80108f2:	d10e      	bne.n	8010912 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2220      	movs	r2, #32
 80108f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f7fe fbae 	bl	800f06c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010910:	e009      	b.n	8010926 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7fe fb99 	bl	800f058 <HAL_I2C_ErrorCallback>
}
 8010926:	bf00      	nop
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801092e:	b480      	push	{r7}
 8010930:	b083      	sub	sp, #12
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	699b      	ldr	r3, [r3, #24]
 801093c:	f003 0302 	and.w	r3, r3, #2
 8010940:	2b02      	cmp	r3, #2
 8010942:	d103      	bne.n	801094c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2200      	movs	r2, #0
 801094a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	f003 0301 	and.w	r3, r3, #1
 8010956:	2b01      	cmp	r3, #1
 8010958:	d007      	beq.n	801096a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	699a      	ldr	r2, [r3, #24]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f042 0201 	orr.w	r2, r2, #1
 8010968:	619a      	str	r2, [r3, #24]
  }
}
 801096a:	bf00      	nop
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b084      	sub	sp, #16
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010982:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010988:	2b00      	cmp	r3, #0
 801098a:	d003      	beq.n	8010994 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010990:	2200      	movs	r2, #0
 8010992:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109a0:	2200      	movs	r2, #0
 80109a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	f7ff ff9b 	bl	80108e0 <I2C_TreatErrorCallback>
}
 80109aa:	bf00      	nop
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b084      	sub	sp, #16
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	60f8      	str	r0, [r7, #12]
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	603b      	str	r3, [r7, #0]
 80109be:	4613      	mov	r3, r2
 80109c0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80109c2:	e03b      	b.n	8010a3c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80109c4:	69ba      	ldr	r2, [r7, #24]
 80109c6:	6839      	ldr	r1, [r7, #0]
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f000 f8d5 	bl	8010b78 <I2C_IsErrorOccurred>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80109d4:	2301      	movs	r3, #1
 80109d6:	e041      	b.n	8010a5c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109de:	d02d      	beq.n	8010a3c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109e0:	f7f8 fd80 	bl	80094e4 <HAL_GetTick>
 80109e4:	4602      	mov	r2, r0
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d302      	bcc.n	80109f6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d122      	bne.n	8010a3c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	699a      	ldr	r2, [r3, #24]
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	4013      	ands	r3, r2
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	bf0c      	ite	eq
 8010a06:	2301      	moveq	r3, #1
 8010a08:	2300      	movne	r3, #0
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	79fb      	ldrb	r3, [r7, #7]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d113      	bne.n	8010a3c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a18:	f043 0220 	orr.w	r2, r3, #32
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2220      	movs	r2, #32
 8010a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e00f      	b.n	8010a5c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	699a      	ldr	r2, [r3, #24]
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	4013      	ands	r3, r2
 8010a46:	68ba      	ldr	r2, [r7, #8]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	bf0c      	ite	eq
 8010a4c:	2301      	moveq	r3, #1
 8010a4e:	2300      	movne	r3, #0
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	461a      	mov	r2, r3
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d0b4      	beq.n	80109c4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3710      	adds	r7, #16
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010a70:	e033      	b.n	8010ada <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	68b9      	ldr	r1, [r7, #8]
 8010a76:	68f8      	ldr	r0, [r7, #12]
 8010a78:	f000 f87e 	bl	8010b78 <I2C_IsErrorOccurred>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d001      	beq.n	8010a86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e031      	b.n	8010aea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a8c:	d025      	beq.n	8010ada <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a8e:	f7f8 fd29 	bl	80094e4 <HAL_GetTick>
 8010a92:	4602      	mov	r2, r0
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	68ba      	ldr	r2, [r7, #8]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d302      	bcc.n	8010aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d11a      	bne.n	8010ada <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	f003 0302 	and.w	r3, r3, #2
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d013      	beq.n	8010ada <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ab6:	f043 0220 	orr.w	r2, r3, #32
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2220      	movs	r2, #32
 8010ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e007      	b.n	8010aea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	f003 0302 	and.w	r3, r3, #2
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d1c4      	bne.n	8010a72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b084      	sub	sp, #16
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	60f8      	str	r0, [r7, #12]
 8010afa:	60b9      	str	r1, [r7, #8]
 8010afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010afe:	e02f      	b.n	8010b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f000 f837 	bl	8010b78 <I2C_IsErrorOccurred>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d001      	beq.n	8010b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b10:	2301      	movs	r3, #1
 8010b12:	e02d      	b.n	8010b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b14:	f7f8 fce6 	bl	80094e4 <HAL_GetTick>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d302      	bcc.n	8010b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d11a      	bne.n	8010b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	f003 0320 	and.w	r3, r3, #32
 8010b34:	2b20      	cmp	r3, #32
 8010b36:	d013      	beq.n	8010b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b3c:	f043 0220 	orr.w	r2, r3, #32
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2220      	movs	r2, #32
 8010b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e007      	b.n	8010b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	699b      	ldr	r3, [r3, #24]
 8010b66:	f003 0320 	and.w	r3, r3, #32
 8010b6a:	2b20      	cmp	r3, #32
 8010b6c:	d1c8      	bne.n	8010b00 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b08a      	sub	sp, #40	@ 0x28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010b84:	2300      	movs	r3, #0
 8010b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	699b      	ldr	r3, [r3, #24]
 8010b90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	f003 0310 	and.w	r3, r3, #16
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d068      	beq.n	8010c76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2210      	movs	r2, #16
 8010baa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010bac:	e049      	b.n	8010c42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb4:	d045      	beq.n	8010c42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010bb6:	f7f8 fc95 	bl	80094e4 <HAL_GetTick>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d302      	bcc.n	8010bcc <I2C_IsErrorOccurred+0x54>
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d13a      	bne.n	8010c42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010bd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010bde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010bee:	d121      	bne.n	8010c34 <I2C_IsErrorOccurred+0xbc>
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010bf6:	d01d      	beq.n	8010c34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010bf8:	7cfb      	ldrb	r3, [r7, #19]
 8010bfa:	2b20      	cmp	r3, #32
 8010bfc:	d01a      	beq.n	8010c34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	685a      	ldr	r2, [r3, #4]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010c0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010c0e:	f7f8 fc69 	bl	80094e4 <HAL_GetTick>
 8010c12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c14:	e00e      	b.n	8010c34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010c16:	f7f8 fc65 	bl	80094e4 <HAL_GetTick>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	2b19      	cmp	r3, #25
 8010c22:	d907      	bls.n	8010c34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010c24:	6a3b      	ldr	r3, [r7, #32]
 8010c26:	f043 0320 	orr.w	r3, r3, #32
 8010c2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010c32:	e006      	b.n	8010c42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	699b      	ldr	r3, [r3, #24]
 8010c3a:	f003 0320 	and.w	r3, r3, #32
 8010c3e:	2b20      	cmp	r3, #32
 8010c40:	d1e9      	bne.n	8010c16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	699b      	ldr	r3, [r3, #24]
 8010c48:	f003 0320 	and.w	r3, r3, #32
 8010c4c:	2b20      	cmp	r3, #32
 8010c4e:	d003      	beq.n	8010c58 <I2C_IsErrorOccurred+0xe0>
 8010c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d0aa      	beq.n	8010bae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d103      	bne.n	8010c68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2220      	movs	r2, #32
 8010c66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010c68:	6a3b      	ldr	r3, [r7, #32]
 8010c6a:	f043 0304 	orr.w	r3, r3, #4
 8010c6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010c70:	2301      	movs	r3, #1
 8010c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	699b      	ldr	r3, [r3, #24]
 8010c7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00b      	beq.n	8010ca0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010c88:	6a3b      	ldr	r3, [r7, #32]
 8010c8a:	f043 0301 	orr.w	r3, r3, #1
 8010c8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010c98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d00b      	beq.n	8010cc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	f043 0308 	orr.w	r3, r3, #8
 8010cb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00b      	beq.n	8010ce4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	f043 0302 	orr.w	r3, r3, #2
 8010cd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d01c      	beq.n	8010d26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	f7ff fe1e 	bl	801092e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	6859      	ldr	r1, [r3, #4]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010d34 <I2C_IsErrorOccurred+0x1bc>)
 8010cfe:	400b      	ands	r3, r1
 8010d00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	431a      	orrs	r2, r3
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2220      	movs	r2, #32
 8010d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2200      	movs	r2, #0
 8010d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3728      	adds	r7, #40	@ 0x28
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	fe00e800 	.word	0xfe00e800

08010d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b087      	sub	sp, #28
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	607b      	str	r3, [r7, #4]
 8010d42:	460b      	mov	r3, r1
 8010d44:	817b      	strh	r3, [r7, #10]
 8010d46:	4613      	mov	r3, r2
 8010d48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d4a:	897b      	ldrh	r3, [r7, #10]
 8010d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010d50:	7a7b      	ldrb	r3, [r7, #9]
 8010d52:	041b      	lsls	r3, r3, #16
 8010d54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d58:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d5e:	6a3b      	ldr	r3, [r7, #32]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d66:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	685a      	ldr	r2, [r3, #4]
 8010d6e:	6a3b      	ldr	r3, [r7, #32]
 8010d70:	0d5b      	lsrs	r3, r3, #21
 8010d72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010d76:	4b08      	ldr	r3, [pc, #32]	@ (8010d98 <I2C_TransferConfig+0x60>)
 8010d78:	430b      	orrs	r3, r1
 8010d7a:	43db      	mvns	r3, r3
 8010d7c:	ea02 0103 	and.w	r1, r2, r3
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	430a      	orrs	r2, r1
 8010d88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010d8a:	bf00      	nop
 8010d8c:	371c      	adds	r7, #28
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	03ff63ff 	.word	0x03ff63ff

08010d9c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b085      	sub	sp, #20
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010da8:	2300      	movs	r3, #0
 8010daa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db0:	4a39      	ldr	r2, [pc, #228]	@ (8010e98 <I2C_Enable_IRQ+0xfc>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d032      	beq.n	8010e1c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010dba:	4a38      	ldr	r2, [pc, #224]	@ (8010e9c <I2C_Enable_IRQ+0x100>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d02d      	beq.n	8010e1c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010dc4:	4a36      	ldr	r2, [pc, #216]	@ (8010ea0 <I2C_Enable_IRQ+0x104>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d028      	beq.n	8010e1c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010dca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	da03      	bge.n	8010dda <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010dd8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010dda:	887b      	ldrh	r3, [r7, #2]
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d003      	beq.n	8010dec <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010dea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010dec:	887b      	ldrh	r3, [r7, #2]
 8010dee:	f003 0302 	and.w	r3, r3, #2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d003      	beq.n	8010dfe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010dfc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010dfe:	887b      	ldrh	r3, [r7, #2]
 8010e00:	2b10      	cmp	r3, #16
 8010e02:	d103      	bne.n	8010e0c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e0c:	887b      	ldrh	r3, [r7, #2]
 8010e0e:	2b20      	cmp	r3, #32
 8010e10:	d133      	bne.n	8010e7a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f043 0320 	orr.w	r3, r3, #32
 8010e18:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e1a:	e02e      	b.n	8010e7a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	da03      	bge.n	8010e2c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010e2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e2c:	887b      	ldrh	r3, [r7, #2]
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d003      	beq.n	8010e3e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e3e:	887b      	ldrh	r3, [r7, #2]
 8010e40:	f003 0302 	and.w	r3, r3, #2
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d003      	beq.n	8010e50 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e50:	887b      	ldrh	r3, [r7, #2]
 8010e52:	2b10      	cmp	r3, #16
 8010e54:	d103      	bne.n	8010e5e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e5e:	887b      	ldrh	r3, [r7, #2]
 8010e60:	2b20      	cmp	r3, #32
 8010e62:	d103      	bne.n	8010e6c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010e6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010e6c:	887b      	ldrh	r3, [r7, #2]
 8010e6e:	2b40      	cmp	r3, #64	@ 0x40
 8010e70:	d103      	bne.n	8010e7a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e78:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	6819      	ldr	r1, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	430a      	orrs	r2, r1
 8010e88:	601a      	str	r2, [r3, #0]
}
 8010e8a:	bf00      	nop
 8010e8c:	3714      	adds	r7, #20
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	0800f4bf 	.word	0x0800f4bf
 8010e9c:	0800f8e1 	.word	0x0800f8e1
 8010ea0:	0800f695 	.word	0x0800f695

08010ea4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b085      	sub	sp, #20
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	460b      	mov	r3, r1
 8010eae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010eb4:	887b      	ldrh	r3, [r7, #2]
 8010eb6:	f003 0301 	and.w	r3, r3, #1
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00f      	beq.n	8010ede <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010ec4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010ed2:	2b28      	cmp	r3, #40	@ 0x28
 8010ed4:	d003      	beq.n	8010ede <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010edc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010ede:	887b      	ldrh	r3, [r7, #2]
 8010ee0:	f003 0302 	and.w	r3, r3, #2
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d00f      	beq.n	8010f08 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010eee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010efc:	2b28      	cmp	r3, #40	@ 0x28
 8010efe:	d003      	beq.n	8010f08 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010f08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	da03      	bge.n	8010f18 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010f16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010f18:	887b      	ldrh	r3, [r7, #2]
 8010f1a:	2b10      	cmp	r3, #16
 8010f1c:	d103      	bne.n	8010f26 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010f24:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010f26:	887b      	ldrh	r3, [r7, #2]
 8010f28:	2b20      	cmp	r3, #32
 8010f2a:	d103      	bne.n	8010f34 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f043 0320 	orr.w	r3, r3, #32
 8010f32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010f34:	887b      	ldrh	r3, [r7, #2]
 8010f36:	2b40      	cmp	r3, #64	@ 0x40
 8010f38:	d103      	bne.n	8010f42 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f40:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	6819      	ldr	r1, [r3, #0]
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	43da      	mvns	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	400a      	ands	r2, r1
 8010f52:	601a      	str	r2, [r3, #0]
}
 8010f54:	bf00      	nop
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	2b20      	cmp	r3, #32
 8010f74:	d138      	bne.n	8010fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d101      	bne.n	8010f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010f80:	2302      	movs	r3, #2
 8010f82:	e032      	b.n	8010fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2201      	movs	r2, #1
 8010f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2224      	movs	r2, #36	@ 0x24
 8010f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f022 0201 	bic.w	r2, r2, #1
 8010fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	6819      	ldr	r1, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	430a      	orrs	r2, r1
 8010fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f042 0201 	orr.w	r2, r2, #1
 8010fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2220      	movs	r2, #32
 8010fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	e000      	b.n	8010fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010fe8:	2302      	movs	r3, #2
  }
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010ff6:	b480      	push	{r7}
 8010ff8:	b085      	sub	sp, #20
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
 8010ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011006:	b2db      	uxtb	r3, r3
 8011008:	2b20      	cmp	r3, #32
 801100a:	d139      	bne.n	8011080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011012:	2b01      	cmp	r3, #1
 8011014:	d101      	bne.n	801101a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011016:	2302      	movs	r3, #2
 8011018:	e033      	b.n	8011082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2201      	movs	r2, #1
 801101e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2224      	movs	r2, #36	@ 0x24
 8011026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f022 0201 	bic.w	r2, r2, #1
 8011038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8011048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	021b      	lsls	r3, r3, #8
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	4313      	orrs	r3, r2
 8011052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f042 0201 	orr.w	r2, r2, #1
 801106a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2220      	movs	r2, #32
 8011070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	e000      	b.n	8011082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011080:	2302      	movs	r3, #2
  }
}
 8011082:	4618      	mov	r0, r3
 8011084:	3714      	adds	r7, #20
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
	...

08011090 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011098:	4b0d      	ldr	r3, [pc, #52]	@ (80110d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801109a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801109e:	4a0c      	ldr	r2, [pc, #48]	@ (80110d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80110a0:	f043 0302 	orr.w	r3, r3, #2
 80110a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80110a8:	4b09      	ldr	r3, [pc, #36]	@ (80110d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80110aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110ae:	f003 0302 	and.w	r3, r3, #2
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80110b6:	4b07      	ldr	r3, [pc, #28]	@ (80110d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80110b8:	685a      	ldr	r2, [r3, #4]
 80110ba:	4906      	ldr	r1, [pc, #24]	@ (80110d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	4313      	orrs	r3, r2
 80110c0:	604b      	str	r3, [r1, #4]
}
 80110c2:	bf00      	nop
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	58024400 	.word	0x58024400
 80110d4:	58000400 	.word	0x58000400

080110d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80110e0:	4b19      	ldr	r3, [pc, #100]	@ (8011148 <HAL_PWREx_ConfigSupply+0x70>)
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	f003 0304 	and.w	r3, r3, #4
 80110e8:	2b04      	cmp	r3, #4
 80110ea:	d00a      	beq.n	8011102 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80110ec:	4b16      	ldr	r3, [pc, #88]	@ (8011148 <HAL_PWREx_ConfigSupply+0x70>)
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	f003 0307 	and.w	r3, r3, #7
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d001      	beq.n	80110fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80110fa:	2301      	movs	r3, #1
 80110fc:	e01f      	b.n	801113e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80110fe:	2300      	movs	r3, #0
 8011100:	e01d      	b.n	801113e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011102:	4b11      	ldr	r3, [pc, #68]	@ (8011148 <HAL_PWREx_ConfigSupply+0x70>)
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	f023 0207 	bic.w	r2, r3, #7
 801110a:	490f      	ldr	r1, [pc, #60]	@ (8011148 <HAL_PWREx_ConfigSupply+0x70>)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4313      	orrs	r3, r2
 8011110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011112:	f7f8 f9e7 	bl	80094e4 <HAL_GetTick>
 8011116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011118:	e009      	b.n	801112e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801111a:	f7f8 f9e3 	bl	80094e4 <HAL_GetTick>
 801111e:	4602      	mov	r2, r0
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011128:	d901      	bls.n	801112e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801112a:	2301      	movs	r3, #1
 801112c:	e007      	b.n	801113e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801112e:	4b06      	ldr	r3, [pc, #24]	@ (8011148 <HAL_PWREx_ConfigSupply+0x70>)
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801113a:	d1ee      	bne.n	801111a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	58024800 	.word	0x58024800

0801114c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b08c      	sub	sp, #48	@ 0x30
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d101      	bne.n	801115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801115a:	2301      	movs	r3, #1
 801115c:	e3c8      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	2b00      	cmp	r3, #0
 8011168:	f000 8087 	beq.w	801127a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801116c:	4b88      	ldr	r3, [pc, #544]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801116e:	691b      	ldr	r3, [r3, #16]
 8011170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011176:	4b86      	ldr	r3, [pc, #536]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801117a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117e:	2b10      	cmp	r3, #16
 8011180:	d007      	beq.n	8011192 <HAL_RCC_OscConfig+0x46>
 8011182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011184:	2b18      	cmp	r3, #24
 8011186:	d110      	bne.n	80111aa <HAL_RCC_OscConfig+0x5e>
 8011188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	2b02      	cmp	r3, #2
 8011190:	d10b      	bne.n	80111aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011192:	4b7f      	ldr	r3, [pc, #508]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801119a:	2b00      	cmp	r3, #0
 801119c:	d06c      	beq.n	8011278 <HAL_RCC_OscConfig+0x12c>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d168      	bne.n	8011278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e3a2      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111b2:	d106      	bne.n	80111c2 <HAL_RCC_OscConfig+0x76>
 80111b4:	4b76      	ldr	r3, [pc, #472]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4a75      	ldr	r2, [pc, #468]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80111be:	6013      	str	r3, [r2, #0]
 80111c0:	e02e      	b.n	8011220 <HAL_RCC_OscConfig+0xd4>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d10c      	bne.n	80111e4 <HAL_RCC_OscConfig+0x98>
 80111ca:	4b71      	ldr	r3, [pc, #452]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	4a70      	ldr	r2, [pc, #448]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80111d4:	6013      	str	r3, [r2, #0]
 80111d6:	4b6e      	ldr	r3, [pc, #440]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a6d      	ldr	r2, [pc, #436]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80111e0:	6013      	str	r3, [r2, #0]
 80111e2:	e01d      	b.n	8011220 <HAL_RCC_OscConfig+0xd4>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80111ec:	d10c      	bne.n	8011208 <HAL_RCC_OscConfig+0xbc>
 80111ee:	4b68      	ldr	r3, [pc, #416]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	4a67      	ldr	r2, [pc, #412]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80111f8:	6013      	str	r3, [r2, #0]
 80111fa:	4b65      	ldr	r3, [pc, #404]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a64      	ldr	r2, [pc, #400]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011204:	6013      	str	r3, [r2, #0]
 8011206:	e00b      	b.n	8011220 <HAL_RCC_OscConfig+0xd4>
 8011208:	4b61      	ldr	r3, [pc, #388]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4a60      	ldr	r2, [pc, #384]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801120e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011212:	6013      	str	r3, [r2, #0]
 8011214:	4b5e      	ldr	r3, [pc, #376]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4a5d      	ldr	r2, [pc, #372]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801121a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d013      	beq.n	8011250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011228:	f7f8 f95c 	bl	80094e4 <HAL_GetTick>
 801122c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801122e:	e008      	b.n	8011242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011230:	f7f8 f958 	bl	80094e4 <HAL_GetTick>
 8011234:	4602      	mov	r2, r0
 8011236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	2b64      	cmp	r3, #100	@ 0x64
 801123c:	d901      	bls.n	8011242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801123e:	2303      	movs	r3, #3
 8011240:	e356      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011242:	4b53      	ldr	r3, [pc, #332]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801124a:	2b00      	cmp	r3, #0
 801124c:	d0f0      	beq.n	8011230 <HAL_RCC_OscConfig+0xe4>
 801124e:	e014      	b.n	801127a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011250:	f7f8 f948 	bl	80094e4 <HAL_GetTick>
 8011254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011256:	e008      	b.n	801126a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011258:	f7f8 f944 	bl	80094e4 <HAL_GetTick>
 801125c:	4602      	mov	r2, r0
 801125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	2b64      	cmp	r3, #100	@ 0x64
 8011264:	d901      	bls.n	801126a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8011266:	2303      	movs	r3, #3
 8011268:	e342      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801126a:	4b49      	ldr	r3, [pc, #292]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1f0      	bne.n	8011258 <HAL_RCC_OscConfig+0x10c>
 8011276:	e000      	b.n	801127a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f003 0302 	and.w	r3, r3, #2
 8011282:	2b00      	cmp	r3, #0
 8011284:	f000 808c 	beq.w	80113a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011288:	4b41      	ldr	r3, [pc, #260]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011290:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011292:	4b3f      	ldr	r3, [pc, #252]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011296:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011298:	6a3b      	ldr	r3, [r7, #32]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d007      	beq.n	80112ae <HAL_RCC_OscConfig+0x162>
 801129e:	6a3b      	ldr	r3, [r7, #32]
 80112a0:	2b18      	cmp	r3, #24
 80112a2:	d137      	bne.n	8011314 <HAL_RCC_OscConfig+0x1c8>
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	f003 0303 	and.w	r3, r3, #3
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d132      	bne.n	8011314 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80112ae:	4b38      	ldr	r3, [pc, #224]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	f003 0304 	and.w	r3, r3, #4
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d005      	beq.n	80112c6 <HAL_RCC_OscConfig+0x17a>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80112c2:	2301      	movs	r3, #1
 80112c4:	e314      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80112c6:	4b32      	ldr	r3, [pc, #200]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f023 0219 	bic.w	r2, r3, #25
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	68db      	ldr	r3, [r3, #12]
 80112d2:	492f      	ldr	r1, [pc, #188]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80112d4:	4313      	orrs	r3, r2
 80112d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112d8:	f7f8 f904 	bl	80094e4 <HAL_GetTick>
 80112dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80112de:	e008      	b.n	80112f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80112e0:	f7f8 f900 	bl	80094e4 <HAL_GetTick>
 80112e4:	4602      	mov	r2, r0
 80112e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e8:	1ad3      	subs	r3, r2, r3
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d901      	bls.n	80112f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80112ee:	2303      	movs	r3, #3
 80112f0:	e2fe      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80112f2:	4b27      	ldr	r3, [pc, #156]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f003 0304 	and.w	r3, r3, #4
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0f0      	beq.n	80112e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112fe:	4b24      	ldr	r3, [pc, #144]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	061b      	lsls	r3, r3, #24
 801130c:	4920      	ldr	r1, [pc, #128]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801130e:	4313      	orrs	r3, r2
 8011310:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011312:	e045      	b.n	80113a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d026      	beq.n	801136a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801131c:	4b1c      	ldr	r3, [pc, #112]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f023 0219 	bic.w	r2, r3, #25
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	4919      	ldr	r1, [pc, #100]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801132a:	4313      	orrs	r3, r2
 801132c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801132e:	f7f8 f8d9 	bl	80094e4 <HAL_GetTick>
 8011332:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011334:	e008      	b.n	8011348 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011336:	f7f8 f8d5 	bl	80094e4 <HAL_GetTick>
 801133a:	4602      	mov	r2, r0
 801133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	2b02      	cmp	r3, #2
 8011342:	d901      	bls.n	8011348 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8011344:	2303      	movs	r3, #3
 8011346:	e2d3      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011348:	4b11      	ldr	r3, [pc, #68]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f003 0304 	and.w	r3, r3, #4
 8011350:	2b00      	cmp	r3, #0
 8011352:	d0f0      	beq.n	8011336 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011354:	4b0e      	ldr	r3, [pc, #56]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	061b      	lsls	r3, r3, #24
 8011362:	490b      	ldr	r1, [pc, #44]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011364:	4313      	orrs	r3, r2
 8011366:	604b      	str	r3, [r1, #4]
 8011368:	e01a      	b.n	80113a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801136a:	4b09      	ldr	r3, [pc, #36]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	4a08      	ldr	r2, [pc, #32]	@ (8011390 <HAL_RCC_OscConfig+0x244>)
 8011370:	f023 0301 	bic.w	r3, r3, #1
 8011374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011376:	f7f8 f8b5 	bl	80094e4 <HAL_GetTick>
 801137a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801137c:	e00a      	b.n	8011394 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801137e:	f7f8 f8b1 	bl	80094e4 <HAL_GetTick>
 8011382:	4602      	mov	r2, r0
 8011384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	2b02      	cmp	r3, #2
 801138a:	d903      	bls.n	8011394 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801138c:	2303      	movs	r3, #3
 801138e:	e2af      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
 8011390:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011394:	4b96      	ldr	r3, [pc, #600]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f003 0304 	and.w	r3, r3, #4
 801139c:	2b00      	cmp	r3, #0
 801139e:	d1ee      	bne.n	801137e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f003 0310 	and.w	r3, r3, #16
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d06a      	beq.n	8011482 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80113ac:	4b90      	ldr	r3, [pc, #576]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80113ae:	691b      	ldr	r3, [r3, #16]
 80113b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80113b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80113b6:	4b8e      	ldr	r3, [pc, #568]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80113b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	2b08      	cmp	r3, #8
 80113c0:	d007      	beq.n	80113d2 <HAL_RCC_OscConfig+0x286>
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	2b18      	cmp	r3, #24
 80113c6:	d11b      	bne.n	8011400 <HAL_RCC_OscConfig+0x2b4>
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	f003 0303 	and.w	r3, r3, #3
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d116      	bne.n	8011400 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80113d2:	4b87      	ldr	r3, [pc, #540]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d005      	beq.n	80113ea <HAL_RCC_OscConfig+0x29e>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	69db      	ldr	r3, [r3, #28]
 80113e2:	2b80      	cmp	r3, #128	@ 0x80
 80113e4:	d001      	beq.n	80113ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e282      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80113ea:	4b81      	ldr	r3, [pc, #516]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6a1b      	ldr	r3, [r3, #32]
 80113f6:	061b      	lsls	r3, r3, #24
 80113f8:	497d      	ldr	r1, [pc, #500]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80113fa:	4313      	orrs	r3, r2
 80113fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80113fe:	e040      	b.n	8011482 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	69db      	ldr	r3, [r3, #28]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d023      	beq.n	8011450 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011408:	4b79      	ldr	r3, [pc, #484]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4a78      	ldr	r2, [pc, #480]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801140e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011414:	f7f8 f866 	bl	80094e4 <HAL_GetTick>
 8011418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801141a:	e008      	b.n	801142e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801141c:	f7f8 f862 	bl	80094e4 <HAL_GetTick>
 8011420:	4602      	mov	r2, r0
 8011422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	2b02      	cmp	r3, #2
 8011428:	d901      	bls.n	801142e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801142a:	2303      	movs	r3, #3
 801142c:	e260      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801142e:	4b70      	ldr	r3, [pc, #448]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0f0      	beq.n	801141c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801143a:	4b6d      	ldr	r3, [pc, #436]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6a1b      	ldr	r3, [r3, #32]
 8011446:	061b      	lsls	r3, r3, #24
 8011448:	4969      	ldr	r1, [pc, #420]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801144a:	4313      	orrs	r3, r2
 801144c:	60cb      	str	r3, [r1, #12]
 801144e:	e018      	b.n	8011482 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011450:	4b67      	ldr	r3, [pc, #412]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a66      	ldr	r2, [pc, #408]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801145a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801145c:	f7f8 f842 	bl	80094e4 <HAL_GetTick>
 8011460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011462:	e008      	b.n	8011476 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011464:	f7f8 f83e 	bl	80094e4 <HAL_GetTick>
 8011468:	4602      	mov	r2, r0
 801146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146c:	1ad3      	subs	r3, r2, r3
 801146e:	2b02      	cmp	r3, #2
 8011470:	d901      	bls.n	8011476 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8011472:	2303      	movs	r3, #3
 8011474:	e23c      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011476:	4b5e      	ldr	r3, [pc, #376]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1f0      	bne.n	8011464 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f003 0308 	and.w	r3, r3, #8
 801148a:	2b00      	cmp	r3, #0
 801148c:	d036      	beq.n	80114fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d019      	beq.n	80114ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011496:	4b56      	ldr	r3, [pc, #344]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801149a:	4a55      	ldr	r2, [pc, #340]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801149c:	f043 0301 	orr.w	r3, r3, #1
 80114a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114a2:	f7f8 f81f 	bl	80094e4 <HAL_GetTick>
 80114a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80114a8:	e008      	b.n	80114bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80114aa:	f7f8 f81b 	bl	80094e4 <HAL_GetTick>
 80114ae:	4602      	mov	r2, r0
 80114b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	2b02      	cmp	r3, #2
 80114b6:	d901      	bls.n	80114bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80114b8:	2303      	movs	r3, #3
 80114ba:	e219      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80114bc:	4b4c      	ldr	r3, [pc, #304]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80114be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114c0:	f003 0302 	and.w	r3, r3, #2
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d0f0      	beq.n	80114aa <HAL_RCC_OscConfig+0x35e>
 80114c8:	e018      	b.n	80114fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80114ca:	4b49      	ldr	r3, [pc, #292]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80114cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114ce:	4a48      	ldr	r2, [pc, #288]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80114d0:	f023 0301 	bic.w	r3, r3, #1
 80114d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114d6:	f7f8 f805 	bl	80094e4 <HAL_GetTick>
 80114da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80114dc:	e008      	b.n	80114f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80114de:	f7f8 f801 	bl	80094e4 <HAL_GetTick>
 80114e2:	4602      	mov	r2, r0
 80114e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d901      	bls.n	80114f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80114ec:	2303      	movs	r3, #3
 80114ee:	e1ff      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80114f0:	4b3f      	ldr	r3, [pc, #252]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80114f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114f4:	f003 0302 	and.w	r3, r3, #2
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d1f0      	bne.n	80114de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f003 0320 	and.w	r3, r3, #32
 8011504:	2b00      	cmp	r3, #0
 8011506:	d036      	beq.n	8011576 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	699b      	ldr	r3, [r3, #24]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d019      	beq.n	8011544 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011510:	4b37      	ldr	r3, [pc, #220]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4a36      	ldr	r2, [pc, #216]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801151a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801151c:	f7f7 ffe2 	bl	80094e4 <HAL_GetTick>
 8011520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011522:	e008      	b.n	8011536 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011524:	f7f7 ffde 	bl	80094e4 <HAL_GetTick>
 8011528:	4602      	mov	r2, r0
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	2b02      	cmp	r3, #2
 8011530:	d901      	bls.n	8011536 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8011532:	2303      	movs	r3, #3
 8011534:	e1dc      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011536:	4b2e      	ldr	r3, [pc, #184]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801153e:	2b00      	cmp	r3, #0
 8011540:	d0f0      	beq.n	8011524 <HAL_RCC_OscConfig+0x3d8>
 8011542:	e018      	b.n	8011576 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011544:	4b2a      	ldr	r3, [pc, #168]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4a29      	ldr	r2, [pc, #164]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801154a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801154e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011550:	f7f7 ffc8 	bl	80094e4 <HAL_GetTick>
 8011554:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011556:	e008      	b.n	801156a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011558:	f7f7 ffc4 	bl	80094e4 <HAL_GetTick>
 801155c:	4602      	mov	r2, r0
 801155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	2b02      	cmp	r3, #2
 8011564:	d901      	bls.n	801156a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8011566:	2303      	movs	r3, #3
 8011568:	e1c2      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801156a:	4b21      	ldr	r3, [pc, #132]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011572:	2b00      	cmp	r3, #0
 8011574:	d1f0      	bne.n	8011558 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f003 0304 	and.w	r3, r3, #4
 801157e:	2b00      	cmp	r3, #0
 8011580:	f000 8086 	beq.w	8011690 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011584:	4b1b      	ldr	r3, [pc, #108]	@ (80115f4 <HAL_RCC_OscConfig+0x4a8>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a1a      	ldr	r2, [pc, #104]	@ (80115f4 <HAL_RCC_OscConfig+0x4a8>)
 801158a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801158e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011590:	f7f7 ffa8 	bl	80094e4 <HAL_GetTick>
 8011594:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011596:	e008      	b.n	80115aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011598:	f7f7 ffa4 	bl	80094e4 <HAL_GetTick>
 801159c:	4602      	mov	r2, r0
 801159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	2b64      	cmp	r3, #100	@ 0x64
 80115a4:	d901      	bls.n	80115aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80115a6:	2303      	movs	r3, #3
 80115a8:	e1a2      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80115aa:	4b12      	ldr	r3, [pc, #72]	@ (80115f4 <HAL_RCC_OscConfig+0x4a8>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0f0      	beq.n	8011598 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d106      	bne.n	80115cc <HAL_RCC_OscConfig+0x480>
 80115be:	4b0c      	ldr	r3, [pc, #48]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80115c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115c2:	4a0b      	ldr	r2, [pc, #44]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80115c4:	f043 0301 	orr.w	r3, r3, #1
 80115c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80115ca:	e032      	b.n	8011632 <HAL_RCC_OscConfig+0x4e6>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	689b      	ldr	r3, [r3, #8]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d111      	bne.n	80115f8 <HAL_RCC_OscConfig+0x4ac>
 80115d4:	4b06      	ldr	r3, [pc, #24]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80115d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115d8:	4a05      	ldr	r2, [pc, #20]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80115da:	f023 0301 	bic.w	r3, r3, #1
 80115de:	6713      	str	r3, [r2, #112]	@ 0x70
 80115e0:	4b03      	ldr	r3, [pc, #12]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80115e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115e4:	4a02      	ldr	r2, [pc, #8]	@ (80115f0 <HAL_RCC_OscConfig+0x4a4>)
 80115e6:	f023 0304 	bic.w	r3, r3, #4
 80115ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80115ec:	e021      	b.n	8011632 <HAL_RCC_OscConfig+0x4e6>
 80115ee:	bf00      	nop
 80115f0:	58024400 	.word	0x58024400
 80115f4:	58024800 	.word	0x58024800
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	689b      	ldr	r3, [r3, #8]
 80115fc:	2b05      	cmp	r3, #5
 80115fe:	d10c      	bne.n	801161a <HAL_RCC_OscConfig+0x4ce>
 8011600:	4b83      	ldr	r3, [pc, #524]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011604:	4a82      	ldr	r2, [pc, #520]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011606:	f043 0304 	orr.w	r3, r3, #4
 801160a:	6713      	str	r3, [r2, #112]	@ 0x70
 801160c:	4b80      	ldr	r3, [pc, #512]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801160e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011610:	4a7f      	ldr	r2, [pc, #508]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011612:	f043 0301 	orr.w	r3, r3, #1
 8011616:	6713      	str	r3, [r2, #112]	@ 0x70
 8011618:	e00b      	b.n	8011632 <HAL_RCC_OscConfig+0x4e6>
 801161a:	4b7d      	ldr	r3, [pc, #500]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801161e:	4a7c      	ldr	r2, [pc, #496]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011620:	f023 0301 	bic.w	r3, r3, #1
 8011624:	6713      	str	r3, [r2, #112]	@ 0x70
 8011626:	4b7a      	ldr	r3, [pc, #488]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801162a:	4a79      	ldr	r2, [pc, #484]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801162c:	f023 0304 	bic.w	r3, r3, #4
 8011630:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	689b      	ldr	r3, [r3, #8]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d015      	beq.n	8011666 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801163a:	f7f7 ff53 	bl	80094e4 <HAL_GetTick>
 801163e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011640:	e00a      	b.n	8011658 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011642:	f7f7 ff4f 	bl	80094e4 <HAL_GetTick>
 8011646:	4602      	mov	r2, r0
 8011648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011650:	4293      	cmp	r3, r2
 8011652:	d901      	bls.n	8011658 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8011654:	2303      	movs	r3, #3
 8011656:	e14b      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011658:	4b6d      	ldr	r3, [pc, #436]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801165c:	f003 0302 	and.w	r3, r3, #2
 8011660:	2b00      	cmp	r3, #0
 8011662:	d0ee      	beq.n	8011642 <HAL_RCC_OscConfig+0x4f6>
 8011664:	e014      	b.n	8011690 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011666:	f7f7 ff3d 	bl	80094e4 <HAL_GetTick>
 801166a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801166c:	e00a      	b.n	8011684 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801166e:	f7f7 ff39 	bl	80094e4 <HAL_GetTick>
 8011672:	4602      	mov	r2, r0
 8011674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011676:	1ad3      	subs	r3, r2, r3
 8011678:	f241 3288 	movw	r2, #5000	@ 0x1388
 801167c:	4293      	cmp	r3, r2
 801167e:	d901      	bls.n	8011684 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011680:	2303      	movs	r3, #3
 8011682:	e135      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011684:	4b62      	ldr	r3, [pc, #392]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011688:	f003 0302 	and.w	r3, r3, #2
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1ee      	bne.n	801166e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 812a 	beq.w	80118ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801169a:	4b5d      	ldr	r3, [pc, #372]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801169c:	691b      	ldr	r3, [r3, #16]
 801169e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80116a2:	2b18      	cmp	r3, #24
 80116a4:	f000 80ba 	beq.w	801181c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ac:	2b02      	cmp	r3, #2
 80116ae:	f040 8095 	bne.w	80117dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80116b2:	4b57      	ldr	r3, [pc, #348]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4a56      	ldr	r2, [pc, #344]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80116b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80116bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116be:	f7f7 ff11 	bl	80094e4 <HAL_GetTick>
 80116c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80116c4:	e008      	b.n	80116d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80116c6:	f7f7 ff0d 	bl	80094e4 <HAL_GetTick>
 80116ca:	4602      	mov	r2, r0
 80116cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	2b02      	cmp	r3, #2
 80116d2:	d901      	bls.n	80116d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80116d4:	2303      	movs	r3, #3
 80116d6:	e10b      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80116d8:	4b4d      	ldr	r3, [pc, #308]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1f0      	bne.n	80116c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80116e4:	4b4a      	ldr	r3, [pc, #296]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80116e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80116e8:	4b4a      	ldr	r3, [pc, #296]	@ (8011814 <HAL_RCC_OscConfig+0x6c8>)
 80116ea:	4013      	ands	r3, r2
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80116f4:	0112      	lsls	r2, r2, #4
 80116f6:	430a      	orrs	r2, r1
 80116f8:	4945      	ldr	r1, [pc, #276]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80116fa:	4313      	orrs	r3, r2
 80116fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011702:	3b01      	subs	r3, #1
 8011704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801170c:	3b01      	subs	r3, #1
 801170e:	025b      	lsls	r3, r3, #9
 8011710:	b29b      	uxth	r3, r3
 8011712:	431a      	orrs	r2, r3
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011718:	3b01      	subs	r3, #1
 801171a:	041b      	lsls	r3, r3, #16
 801171c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011720:	431a      	orrs	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011726:	3b01      	subs	r3, #1
 8011728:	061b      	lsls	r3, r3, #24
 801172a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801172e:	4938      	ldr	r1, [pc, #224]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011730:	4313      	orrs	r3, r2
 8011732:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011734:	4b36      	ldr	r3, [pc, #216]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011738:	4a35      	ldr	r2, [pc, #212]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801173a:	f023 0301 	bic.w	r3, r3, #1
 801173e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011740:	4b33      	ldr	r3, [pc, #204]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011744:	4b34      	ldr	r3, [pc, #208]	@ (8011818 <HAL_RCC_OscConfig+0x6cc>)
 8011746:	4013      	ands	r3, r2
 8011748:	687a      	ldr	r2, [r7, #4]
 801174a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801174c:	00d2      	lsls	r2, r2, #3
 801174e:	4930      	ldr	r1, [pc, #192]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011750:	4313      	orrs	r3, r2
 8011752:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011754:	4b2e      	ldr	r3, [pc, #184]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011758:	f023 020c 	bic.w	r2, r3, #12
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011760:	492b      	ldr	r1, [pc, #172]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011762:	4313      	orrs	r3, r2
 8011764:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011766:	4b2a      	ldr	r3, [pc, #168]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801176a:	f023 0202 	bic.w	r2, r3, #2
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011772:	4927      	ldr	r1, [pc, #156]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011774:	4313      	orrs	r3, r2
 8011776:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011778:	4b25      	ldr	r3, [pc, #148]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801177c:	4a24      	ldr	r2, [pc, #144]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801177e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011784:	4b22      	ldr	r3, [pc, #136]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011788:	4a21      	ldr	r2, [pc, #132]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801178a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801178e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011790:	4b1f      	ldr	r3, [pc, #124]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011794:	4a1e      	ldr	r2, [pc, #120]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011796:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801179a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801179c:	4b1c      	ldr	r3, [pc, #112]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 801179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117a0:	4a1b      	ldr	r2, [pc, #108]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80117a2:	f043 0301 	orr.w	r3, r3, #1
 80117a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80117a8:	4b19      	ldr	r3, [pc, #100]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a18      	ldr	r2, [pc, #96]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80117ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80117b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117b4:	f7f7 fe96 	bl	80094e4 <HAL_GetTick>
 80117b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80117ba:	e008      	b.n	80117ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80117bc:	f7f7 fe92 	bl	80094e4 <HAL_GetTick>
 80117c0:	4602      	mov	r2, r0
 80117c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	2b02      	cmp	r3, #2
 80117c8:	d901      	bls.n	80117ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80117ca:	2303      	movs	r3, #3
 80117cc:	e090      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80117ce:	4b10      	ldr	r3, [pc, #64]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d0f0      	beq.n	80117bc <HAL_RCC_OscConfig+0x670>
 80117da:	e088      	b.n	80118ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80117dc:	4b0c      	ldr	r3, [pc, #48]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	4a0b      	ldr	r2, [pc, #44]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 80117e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80117e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117e8:	f7f7 fe7c 	bl	80094e4 <HAL_GetTick>
 80117ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80117ee:	e008      	b.n	8011802 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80117f0:	f7f7 fe78 	bl	80094e4 <HAL_GetTick>
 80117f4:	4602      	mov	r2, r0
 80117f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	2b02      	cmp	r3, #2
 80117fc:	d901      	bls.n	8011802 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80117fe:	2303      	movs	r3, #3
 8011800:	e076      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011802:	4b03      	ldr	r3, [pc, #12]	@ (8011810 <HAL_RCC_OscConfig+0x6c4>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1f0      	bne.n	80117f0 <HAL_RCC_OscConfig+0x6a4>
 801180e:	e06e      	b.n	80118ee <HAL_RCC_OscConfig+0x7a2>
 8011810:	58024400 	.word	0x58024400
 8011814:	fffffc0c 	.word	0xfffffc0c
 8011818:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801181c:	4b36      	ldr	r3, [pc, #216]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 801181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011820:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011822:	4b35      	ldr	r3, [pc, #212]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 8011824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011826:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801182c:	2b01      	cmp	r3, #1
 801182e:	d031      	beq.n	8011894 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	f003 0203 	and.w	r2, r3, #3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801183a:	429a      	cmp	r2, r3
 801183c:	d12a      	bne.n	8011894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	091b      	lsrs	r3, r3, #4
 8011842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801184a:	429a      	cmp	r2, r3
 801184c:	d122      	bne.n	8011894 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011858:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801185a:	429a      	cmp	r2, r3
 801185c:	d11a      	bne.n	8011894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	0a5b      	lsrs	r3, r3, #9
 8011862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801186a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801186c:	429a      	cmp	r2, r3
 801186e:	d111      	bne.n	8011894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	0c1b      	lsrs	r3, r3, #16
 8011874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801187c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801187e:	429a      	cmp	r2, r3
 8011880:	d108      	bne.n	8011894 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	0e1b      	lsrs	r3, r3, #24
 8011886:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801188e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011890:	429a      	cmp	r2, r3
 8011892:	d001      	beq.n	8011898 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011894:	2301      	movs	r3, #1
 8011896:	e02b      	b.n	80118f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011898:	4b17      	ldr	r3, [pc, #92]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 801189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801189c:	08db      	lsrs	r3, r3, #3
 801189e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80118a8:	693a      	ldr	r2, [r7, #16]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d01f      	beq.n	80118ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80118ae:	4b12      	ldr	r3, [pc, #72]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 80118b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118b2:	4a11      	ldr	r2, [pc, #68]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 80118b4:	f023 0301 	bic.w	r3, r3, #1
 80118b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80118ba:	f7f7 fe13 	bl	80094e4 <HAL_GetTick>
 80118be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80118c0:	bf00      	nop
 80118c2:	f7f7 fe0f 	bl	80094e4 <HAL_GetTick>
 80118c6:	4602      	mov	r2, r0
 80118c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d0f9      	beq.n	80118c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80118ce:	4b0a      	ldr	r3, [pc, #40]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 80118d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80118d2:	4b0a      	ldr	r3, [pc, #40]	@ (80118fc <HAL_RCC_OscConfig+0x7b0>)
 80118d4:	4013      	ands	r3, r2
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80118da:	00d2      	lsls	r2, r2, #3
 80118dc:	4906      	ldr	r1, [pc, #24]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 80118de:	4313      	orrs	r3, r2
 80118e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80118e2:	4b05      	ldr	r3, [pc, #20]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 80118e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e6:	4a04      	ldr	r2, [pc, #16]	@ (80118f8 <HAL_RCC_OscConfig+0x7ac>)
 80118e8:	f043 0301 	orr.w	r3, r3, #1
 80118ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3730      	adds	r7, #48	@ 0x30
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	58024400 	.word	0x58024400
 80118fc:	ffff0007 	.word	0xffff0007

08011900 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b086      	sub	sp, #24
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d101      	bne.n	8011914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011910:	2301      	movs	r3, #1
 8011912:	e19c      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011914:	4b8a      	ldr	r3, [pc, #552]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 030f 	and.w	r3, r3, #15
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d910      	bls.n	8011944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011922:	4b87      	ldr	r3, [pc, #540]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f023 020f 	bic.w	r2, r3, #15
 801192a:	4985      	ldr	r1, [pc, #532]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	4313      	orrs	r3, r2
 8011930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011932:	4b83      	ldr	r3, [pc, #524]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f003 030f 	and.w	r3, r3, #15
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	d001      	beq.n	8011944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011940:	2301      	movs	r3, #1
 8011942:	e184      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d010      	beq.n	8011972 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	691a      	ldr	r2, [r3, #16]
 8011954:	4b7b      	ldr	r3, [pc, #492]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011956:	699b      	ldr	r3, [r3, #24]
 8011958:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801195c:	429a      	cmp	r2, r3
 801195e:	d908      	bls.n	8011972 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011960:	4b78      	ldr	r3, [pc, #480]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011962:	699b      	ldr	r3, [r3, #24]
 8011964:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	691b      	ldr	r3, [r3, #16]
 801196c:	4975      	ldr	r1, [pc, #468]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 801196e:	4313      	orrs	r3, r2
 8011970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f003 0308 	and.w	r3, r3, #8
 801197a:	2b00      	cmp	r3, #0
 801197c:	d010      	beq.n	80119a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	695a      	ldr	r2, [r3, #20]
 8011982:	4b70      	ldr	r3, [pc, #448]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011984:	69db      	ldr	r3, [r3, #28]
 8011986:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801198a:	429a      	cmp	r2, r3
 801198c:	d908      	bls.n	80119a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801198e:	4b6d      	ldr	r3, [pc, #436]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011990:	69db      	ldr	r3, [r3, #28]
 8011992:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	695b      	ldr	r3, [r3, #20]
 801199a:	496a      	ldr	r1, [pc, #424]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 801199c:	4313      	orrs	r3, r2
 801199e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f003 0310 	and.w	r3, r3, #16
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d010      	beq.n	80119ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	699a      	ldr	r2, [r3, #24]
 80119b0:	4b64      	ldr	r3, [pc, #400]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d908      	bls.n	80119ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80119bc:	4b61      	ldr	r3, [pc, #388]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 80119be:	69db      	ldr	r3, [r3, #28]
 80119c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	699b      	ldr	r3, [r3, #24]
 80119c8:	495e      	ldr	r1, [pc, #376]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 80119ca:	4313      	orrs	r3, r2
 80119cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f003 0320 	and.w	r3, r3, #32
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d010      	beq.n	80119fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	69da      	ldr	r2, [r3, #28]
 80119de:	4b59      	ldr	r3, [pc, #356]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 80119e0:	6a1b      	ldr	r3, [r3, #32]
 80119e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d908      	bls.n	80119fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80119ea:	4b56      	ldr	r3, [pc, #344]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 80119ec:	6a1b      	ldr	r3, [r3, #32]
 80119ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	69db      	ldr	r3, [r3, #28]
 80119f6:	4953      	ldr	r1, [pc, #332]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 80119f8:	4313      	orrs	r3, r2
 80119fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f003 0302 	and.w	r3, r3, #2
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d010      	beq.n	8011a2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	68da      	ldr	r2, [r3, #12]
 8011a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	f003 030f 	and.w	r3, r3, #15
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d908      	bls.n	8011a2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011a18:	4b4a      	ldr	r3, [pc, #296]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a1a:	699b      	ldr	r3, [r3, #24]
 8011a1c:	f023 020f 	bic.w	r2, r3, #15
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	4947      	ldr	r1, [pc, #284]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a26:	4313      	orrs	r3, r2
 8011a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f003 0301 	and.w	r3, r3, #1
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d055      	beq.n	8011ae2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011a36:	4b43      	ldr	r3, [pc, #268]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a38:	699b      	ldr	r3, [r3, #24]
 8011a3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	689b      	ldr	r3, [r3, #8]
 8011a42:	4940      	ldr	r1, [pc, #256]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a44:	4313      	orrs	r3, r2
 8011a46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	d107      	bne.n	8011a60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011a50:	4b3c      	ldr	r3, [pc, #240]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d121      	bne.n	8011aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e0f6      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	2b03      	cmp	r3, #3
 8011a66:	d107      	bne.n	8011a78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011a68:	4b36      	ldr	r3, [pc, #216]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d115      	bne.n	8011aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a74:	2301      	movs	r3, #1
 8011a76:	e0ea      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	d107      	bne.n	8011a90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011a80:	4b30      	ldr	r3, [pc, #192]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d109      	bne.n	8011aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e0de      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011a90:	4b2c      	ldr	r3, [pc, #176]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f003 0304 	and.w	r3, r3, #4
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d101      	bne.n	8011aa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e0d6      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011aa0:	4b28      	ldr	r3, [pc, #160]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	f023 0207 	bic.w	r2, r3, #7
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	4925      	ldr	r1, [pc, #148]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ab2:	f7f7 fd17 	bl	80094e4 <HAL_GetTick>
 8011ab6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ab8:	e00a      	b.n	8011ad0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011aba:	f7f7 fd13 	bl	80094e4 <HAL_GetTick>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	1ad3      	subs	r3, r2, r3
 8011ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d901      	bls.n	8011ad0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011acc:	2303      	movs	r3, #3
 8011ace:	e0be      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	00db      	lsls	r3, r3, #3
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d1eb      	bne.n	8011aba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f003 0302 	and.w	r3, r3, #2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d010      	beq.n	8011b10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68da      	ldr	r2, [r3, #12]
 8011af2:	4b14      	ldr	r3, [pc, #80]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011af4:	699b      	ldr	r3, [r3, #24]
 8011af6:	f003 030f 	and.w	r3, r3, #15
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d208      	bcs.n	8011b10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011afe:	4b11      	ldr	r3, [pc, #68]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011b00:	699b      	ldr	r3, [r3, #24]
 8011b02:	f023 020f 	bic.w	r2, r3, #15
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	490e      	ldr	r1, [pc, #56]	@ (8011b44 <HAL_RCC_ClockConfig+0x244>)
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011b10:	4b0b      	ldr	r3, [pc, #44]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f003 030f 	and.w	r3, r3, #15
 8011b18:	683a      	ldr	r2, [r7, #0]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d214      	bcs.n	8011b48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b1e:	4b08      	ldr	r3, [pc, #32]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f023 020f 	bic.w	r2, r3, #15
 8011b26:	4906      	ldr	r1, [pc, #24]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011b2e:	4b04      	ldr	r3, [pc, #16]	@ (8011b40 <HAL_RCC_ClockConfig+0x240>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f003 030f 	and.w	r3, r3, #15
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d005      	beq.n	8011b48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	e086      	b.n	8011c4e <HAL_RCC_ClockConfig+0x34e>
 8011b40:	52002000 	.word	0x52002000
 8011b44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f003 0304 	and.w	r3, r3, #4
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d010      	beq.n	8011b76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	691a      	ldr	r2, [r3, #16]
 8011b58:	4b3f      	ldr	r3, [pc, #252]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011b5a:	699b      	ldr	r3, [r3, #24]
 8011b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d208      	bcs.n	8011b76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011b64:	4b3c      	ldr	r3, [pc, #240]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011b66:	699b      	ldr	r3, [r3, #24]
 8011b68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	4939      	ldr	r1, [pc, #228]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011b72:	4313      	orrs	r3, r2
 8011b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f003 0308 	and.w	r3, r3, #8
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d010      	beq.n	8011ba4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	695a      	ldr	r2, [r3, #20]
 8011b86:	4b34      	ldr	r3, [pc, #208]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011b88:	69db      	ldr	r3, [r3, #28]
 8011b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d208      	bcs.n	8011ba4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011b92:	4b31      	ldr	r3, [pc, #196]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011b94:	69db      	ldr	r3, [r3, #28]
 8011b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	695b      	ldr	r3, [r3, #20]
 8011b9e:	492e      	ldr	r1, [pc, #184]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f003 0310 	and.w	r3, r3, #16
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d010      	beq.n	8011bd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	699a      	ldr	r2, [r3, #24]
 8011bb4:	4b28      	ldr	r3, [pc, #160]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011bb6:	69db      	ldr	r3, [r3, #28]
 8011bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d208      	bcs.n	8011bd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011bc0:	4b25      	ldr	r3, [pc, #148]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011bc2:	69db      	ldr	r3, [r3, #28]
 8011bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	4922      	ldr	r1, [pc, #136]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f003 0320 	and.w	r3, r3, #32
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d010      	beq.n	8011c00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	69da      	ldr	r2, [r3, #28]
 8011be2:	4b1d      	ldr	r3, [pc, #116]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011be4:	6a1b      	ldr	r3, [r3, #32]
 8011be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d208      	bcs.n	8011c00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011bee:	4b1a      	ldr	r3, [pc, #104]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011bf0:	6a1b      	ldr	r3, [r3, #32]
 8011bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	69db      	ldr	r3, [r3, #28]
 8011bfa:	4917      	ldr	r1, [pc, #92]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011c00:	f000 f834 	bl	8011c6c <HAL_RCC_GetSysClockFreq>
 8011c04:	4602      	mov	r2, r0
 8011c06:	4b14      	ldr	r3, [pc, #80]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	0a1b      	lsrs	r3, r3, #8
 8011c0c:	f003 030f 	and.w	r3, r3, #15
 8011c10:	4912      	ldr	r1, [pc, #72]	@ (8011c5c <HAL_RCC_ClockConfig+0x35c>)
 8011c12:	5ccb      	ldrb	r3, [r1, r3]
 8011c14:	f003 031f 	and.w	r3, r3, #31
 8011c18:	fa22 f303 	lsr.w	r3, r2, r3
 8011c1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8011c58 <HAL_RCC_ClockConfig+0x358>)
 8011c20:	699b      	ldr	r3, [r3, #24]
 8011c22:	f003 030f 	and.w	r3, r3, #15
 8011c26:	4a0d      	ldr	r2, [pc, #52]	@ (8011c5c <HAL_RCC_ClockConfig+0x35c>)
 8011c28:	5cd3      	ldrb	r3, [r2, r3]
 8011c2a:	f003 031f 	and.w	r3, r3, #31
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	fa22 f303 	lsr.w	r3, r2, r3
 8011c34:	4a0a      	ldr	r2, [pc, #40]	@ (8011c60 <HAL_RCC_ClockConfig+0x360>)
 8011c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011c38:	4a0a      	ldr	r2, [pc, #40]	@ (8011c64 <HAL_RCC_ClockConfig+0x364>)
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8011c68 <HAL_RCC_ClockConfig+0x368>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7f7 fc04 	bl	8009450 <HAL_InitTick>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3718      	adds	r7, #24
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	58024400 	.word	0x58024400
 8011c5c:	0801eb5c 	.word	0x0801eb5c
 8011c60:	24000008 	.word	0x24000008
 8011c64:	24000004 	.word	0x24000004
 8011c68:	2400000c 	.word	0x2400000c

08011c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b089      	sub	sp, #36	@ 0x24
 8011c70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011c72:	4bb3      	ldr	r3, [pc, #716]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c74:	691b      	ldr	r3, [r3, #16]
 8011c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c7a:	2b18      	cmp	r3, #24
 8011c7c:	f200 8155 	bhi.w	8011f2a <HAL_RCC_GetSysClockFreq+0x2be>
 8011c80:	a201      	add	r2, pc, #4	@ (adr r2, 8011c88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c86:	bf00      	nop
 8011c88:	08011ced 	.word	0x08011ced
 8011c8c:	08011f2b 	.word	0x08011f2b
 8011c90:	08011f2b 	.word	0x08011f2b
 8011c94:	08011f2b 	.word	0x08011f2b
 8011c98:	08011f2b 	.word	0x08011f2b
 8011c9c:	08011f2b 	.word	0x08011f2b
 8011ca0:	08011f2b 	.word	0x08011f2b
 8011ca4:	08011f2b 	.word	0x08011f2b
 8011ca8:	08011d13 	.word	0x08011d13
 8011cac:	08011f2b 	.word	0x08011f2b
 8011cb0:	08011f2b 	.word	0x08011f2b
 8011cb4:	08011f2b 	.word	0x08011f2b
 8011cb8:	08011f2b 	.word	0x08011f2b
 8011cbc:	08011f2b 	.word	0x08011f2b
 8011cc0:	08011f2b 	.word	0x08011f2b
 8011cc4:	08011f2b 	.word	0x08011f2b
 8011cc8:	08011d19 	.word	0x08011d19
 8011ccc:	08011f2b 	.word	0x08011f2b
 8011cd0:	08011f2b 	.word	0x08011f2b
 8011cd4:	08011f2b 	.word	0x08011f2b
 8011cd8:	08011f2b 	.word	0x08011f2b
 8011cdc:	08011f2b 	.word	0x08011f2b
 8011ce0:	08011f2b 	.word	0x08011f2b
 8011ce4:	08011f2b 	.word	0x08011f2b
 8011ce8:	08011d1f 	.word	0x08011d1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011cec:	4b94      	ldr	r3, [pc, #592]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f003 0320 	and.w	r3, r3, #32
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d009      	beq.n	8011d0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011cf8:	4b91      	ldr	r3, [pc, #580]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	08db      	lsrs	r3, r3, #3
 8011cfe:	f003 0303 	and.w	r3, r3, #3
 8011d02:	4a90      	ldr	r2, [pc, #576]	@ (8011f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d04:	fa22 f303 	lsr.w	r3, r2, r3
 8011d08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011d0a:	e111      	b.n	8011f30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8011f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d0e:	61bb      	str	r3, [r7, #24]
      break;
 8011d10:	e10e      	b.n	8011f30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011d12:	4b8d      	ldr	r3, [pc, #564]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011d14:	61bb      	str	r3, [r7, #24]
      break;
 8011d16:	e10b      	b.n	8011f30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011d18:	4b8c      	ldr	r3, [pc, #560]	@ (8011f4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011d1a:	61bb      	str	r3, [r7, #24]
      break;
 8011d1c:	e108      	b.n	8011f30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011d1e:	4b88      	ldr	r3, [pc, #544]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d22:	f003 0303 	and.w	r3, r3, #3
 8011d26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011d28:	4b85      	ldr	r3, [pc, #532]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d2c:	091b      	lsrs	r3, r3, #4
 8011d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011d34:	4b82      	ldr	r3, [pc, #520]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d38:	f003 0301 	and.w	r3, r3, #1
 8011d3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011d3e:	4b80      	ldr	r3, [pc, #512]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d42:	08db      	lsrs	r3, r3, #3
 8011d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	fb02 f303 	mul.w	r3, r2, r3
 8011d4e:	ee07 3a90 	vmov	s15, r3
 8011d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	f000 80e1 	beq.w	8011f24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	f000 8083 	beq.w	8011e70 <HAL_RCC_GetSysClockFreq+0x204>
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	f200 80a1 	bhi.w	8011eb4 <HAL_RCC_GetSysClockFreq+0x248>
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d003      	beq.n	8011d80 <HAL_RCC_GetSysClockFreq+0x114>
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d056      	beq.n	8011e2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8011d7e:	e099      	b.n	8011eb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d80:	4b6f      	ldr	r3, [pc, #444]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f003 0320 	and.w	r3, r3, #32
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d02d      	beq.n	8011de8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	08db      	lsrs	r3, r3, #3
 8011d92:	f003 0303 	and.w	r3, r3, #3
 8011d96:	4a6b      	ldr	r2, [pc, #428]	@ (8011f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d98:	fa22 f303 	lsr.w	r3, r2, r3
 8011d9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	ee07 3a90 	vmov	s15, r3
 8011da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	ee07 3a90 	vmov	s15, r3
 8011dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011db6:	4b62      	ldr	r3, [pc, #392]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dbe:	ee07 3a90 	vmov	s15, r3
 8011dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011dca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011de2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011de6:	e087      	b.n	8011ef8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	ee07 3a90 	vmov	s15, r3
 8011dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011df2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011f54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011dfa:	4b51      	ldr	r3, [pc, #324]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e02:	ee07 3a90 	vmov	s15, r3
 8011e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011e2a:	e065      	b.n	8011ef8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	ee07 3a90 	vmov	s15, r3
 8011e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011f58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e3e:	4b40      	ldr	r3, [pc, #256]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e46:	ee07 3a90 	vmov	s15, r3
 8011e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011e6e:	e043      	b.n	8011ef8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	ee07 3a90 	vmov	s15, r3
 8011e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011f5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8011e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e82:	4b2f      	ldr	r3, [pc, #188]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e8a:	ee07 3a90 	vmov	s15, r3
 8011e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011eb2:	e021      	b.n	8011ef8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	ee07 3a90 	vmov	s15, r3
 8011eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ebe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011f58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ece:	ee07 3a90 	vmov	s15, r3
 8011ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011eda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011ef6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011ef8:	4b11      	ldr	r3, [pc, #68]	@ (8011f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011efc:	0a5b      	lsrs	r3, r3, #9
 8011efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f02:	3301      	adds	r3, #1
 8011f04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	ee07 3a90 	vmov	s15, r3
 8011f0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8011f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011f1c:	ee17 3a90 	vmov	r3, s15
 8011f20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011f22:	e005      	b.n	8011f30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011f24:	2300      	movs	r3, #0
 8011f26:	61bb      	str	r3, [r7, #24]
      break;
 8011f28:	e002      	b.n	8011f30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011f2a:	4b07      	ldr	r3, [pc, #28]	@ (8011f48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011f2c:	61bb      	str	r3, [r7, #24]
      break;
 8011f2e:	bf00      	nop
  }

  return sysclockfreq;
 8011f30:	69bb      	ldr	r3, [r7, #24]
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3724      	adds	r7, #36	@ 0x24
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop
 8011f40:	58024400 	.word	0x58024400
 8011f44:	03d09000 	.word	0x03d09000
 8011f48:	003d0900 	.word	0x003d0900
 8011f4c:	016e3600 	.word	0x016e3600
 8011f50:	46000000 	.word	0x46000000
 8011f54:	4c742400 	.word	0x4c742400
 8011f58:	4a742400 	.word	0x4a742400
 8011f5c:	4bb71b00 	.word	0x4bb71b00

08011f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011f66:	f7ff fe81 	bl	8011c6c <HAL_RCC_GetSysClockFreq>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	4b10      	ldr	r3, [pc, #64]	@ (8011fb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8011f6e:	699b      	ldr	r3, [r3, #24]
 8011f70:	0a1b      	lsrs	r3, r3, #8
 8011f72:	f003 030f 	and.w	r3, r3, #15
 8011f76:	490f      	ldr	r1, [pc, #60]	@ (8011fb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8011f78:	5ccb      	ldrb	r3, [r1, r3]
 8011f7a:	f003 031f 	and.w	r3, r3, #31
 8011f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8011f82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011f84:	4b0a      	ldr	r3, [pc, #40]	@ (8011fb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8011f86:	699b      	ldr	r3, [r3, #24]
 8011f88:	f003 030f 	and.w	r3, r3, #15
 8011f8c:	4a09      	ldr	r2, [pc, #36]	@ (8011fb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8011f8e:	5cd3      	ldrb	r3, [r2, r3]
 8011f90:	f003 031f 	and.w	r3, r3, #31
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	fa22 f303 	lsr.w	r3, r2, r3
 8011f9a:	4a07      	ldr	r2, [pc, #28]	@ (8011fb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8011f9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011f9e:	4a07      	ldr	r2, [pc, #28]	@ (8011fbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011fa4:	4b04      	ldr	r3, [pc, #16]	@ (8011fb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	58024400 	.word	0x58024400
 8011fb4:	0801eb5c 	.word	0x0801eb5c
 8011fb8:	24000008 	.word	0x24000008
 8011fbc:	24000004 	.word	0x24000004

08011fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011fc4:	f7ff ffcc 	bl	8011f60 <HAL_RCC_GetHCLKFreq>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	4b06      	ldr	r3, [pc, #24]	@ (8011fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011fcc:	69db      	ldr	r3, [r3, #28]
 8011fce:	091b      	lsrs	r3, r3, #4
 8011fd0:	f003 0307 	and.w	r3, r3, #7
 8011fd4:	4904      	ldr	r1, [pc, #16]	@ (8011fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011fd6:	5ccb      	ldrb	r3, [r1, r3]
 8011fd8:	f003 031f 	and.w	r3, r3, #31
 8011fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	58024400 	.word	0x58024400
 8011fe8:	0801eb5c 	.word	0x0801eb5c

08011fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011ff0:	f7ff ffb6 	bl	8011f60 <HAL_RCC_GetHCLKFreq>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	4b06      	ldr	r3, [pc, #24]	@ (8012010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011ff8:	69db      	ldr	r3, [r3, #28]
 8011ffa:	0a1b      	lsrs	r3, r3, #8
 8011ffc:	f003 0307 	and.w	r3, r3, #7
 8012000:	4904      	ldr	r1, [pc, #16]	@ (8012014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012002:	5ccb      	ldrb	r3, [r1, r3]
 8012004:	f003 031f 	and.w	r3, r3, #31
 8012008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801200c:	4618      	mov	r0, r3
 801200e:	bd80      	pop	{r7, pc}
 8012010:	58024400 	.word	0x58024400
 8012014:	0801eb5c 	.word	0x0801eb5c

08012018 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801201c:	b0c6      	sub	sp, #280	@ 0x118
 801201e:	af00      	add	r7, sp, #0
 8012020:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012024:	2300      	movs	r3, #0
 8012026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801202a:	2300      	movs	r3, #0
 801202c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012038:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801203c:	2500      	movs	r5, #0
 801203e:	ea54 0305 	orrs.w	r3, r4, r5
 8012042:	d049      	beq.n	80120d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8012044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801204a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801204e:	d02f      	beq.n	80120b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012050:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012054:	d828      	bhi.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801205a:	d01a      	beq.n	8012092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801205c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012060:	d822      	bhi.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012062:	2b00      	cmp	r3, #0
 8012064:	d003      	beq.n	801206e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801206a:	d007      	beq.n	801207c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801206c:	e01c      	b.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801206e:	4bab      	ldr	r3, [pc, #684]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012072:	4aaa      	ldr	r2, [pc, #680]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801207a:	e01a      	b.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801207c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012080:	3308      	adds	r3, #8
 8012082:	2102      	movs	r1, #2
 8012084:	4618      	mov	r0, r3
 8012086:	f002 fa49 	bl	801451c <RCCEx_PLL2_Config>
 801208a:	4603      	mov	r3, r0
 801208c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012090:	e00f      	b.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012096:	3328      	adds	r3, #40	@ 0x28
 8012098:	2102      	movs	r1, #2
 801209a:	4618      	mov	r0, r3
 801209c:	f002 faf0 	bl	8014680 <RCCEx_PLL3_Config>
 80120a0:	4603      	mov	r3, r0
 80120a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80120a6:	e004      	b.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80120a8:	2301      	movs	r3, #1
 80120aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80120ae:	e000      	b.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80120b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d10a      	bne.n	80120d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80120ba:	4b98      	ldr	r3, [pc, #608]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80120c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120c8:	4a94      	ldr	r2, [pc, #592]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120ca:	430b      	orrs	r3, r1
 80120cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80120ce:	e003      	b.n	80120d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80120d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80120e4:	f04f 0900 	mov.w	r9, #0
 80120e8:	ea58 0309 	orrs.w	r3, r8, r9
 80120ec:	d047      	beq.n	801217e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80120ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120f4:	2b04      	cmp	r3, #4
 80120f6:	d82a      	bhi.n	801214e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80120f8:	a201      	add	r2, pc, #4	@ (adr r2, 8012100 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80120fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fe:	bf00      	nop
 8012100:	08012115 	.word	0x08012115
 8012104:	08012123 	.word	0x08012123
 8012108:	08012139 	.word	0x08012139
 801210c:	08012157 	.word	0x08012157
 8012110:	08012157 	.word	0x08012157
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012114:	4b81      	ldr	r3, [pc, #516]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012118:	4a80      	ldr	r2, [pc, #512]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801211a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801211e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012120:	e01a      	b.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012126:	3308      	adds	r3, #8
 8012128:	2100      	movs	r1, #0
 801212a:	4618      	mov	r0, r3
 801212c:	f002 f9f6 	bl	801451c <RCCEx_PLL2_Config>
 8012130:	4603      	mov	r3, r0
 8012132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012136:	e00f      	b.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801213c:	3328      	adds	r3, #40	@ 0x28
 801213e:	2100      	movs	r1, #0
 8012140:	4618      	mov	r0, r3
 8012142:	f002 fa9d 	bl	8014680 <RCCEx_PLL3_Config>
 8012146:	4603      	mov	r3, r0
 8012148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801214c:	e004      	b.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801214e:	2301      	movs	r3, #1
 8012150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012154:	e000      	b.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8012156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801215c:	2b00      	cmp	r3, #0
 801215e:	d10a      	bne.n	8012176 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012160:	4b6e      	ldr	r3, [pc, #440]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012164:	f023 0107 	bic.w	r1, r3, #7
 8012168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801216e:	4a6b      	ldr	r2, [pc, #428]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012170:	430b      	orrs	r3, r1
 8012172:	6513      	str	r3, [r2, #80]	@ 0x50
 8012174:	e003      	b.n	801217e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801217a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801217e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012186:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801218a:	f04f 0b00 	mov.w	fp, #0
 801218e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012192:	d05b      	beq.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801219c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80121a0:	d03b      	beq.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80121a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80121a6:	d834      	bhi.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80121ac:	d037      	beq.n	801221e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80121ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80121b2:	d82e      	bhi.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80121b8:	d033      	beq.n	8012222 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80121ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80121be:	d828      	bhi.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80121c4:	d01a      	beq.n	80121fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80121c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80121ca:	d822      	bhi.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d003      	beq.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80121d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80121d4:	d007      	beq.n	80121e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80121d6:	e01c      	b.n	8012212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121d8:	4b50      	ldr	r3, [pc, #320]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121dc:	4a4f      	ldr	r2, [pc, #316]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121e4:	e01e      	b.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121ea:	3308      	adds	r3, #8
 80121ec:	2100      	movs	r1, #0
 80121ee:	4618      	mov	r0, r3
 80121f0:	f002 f994 	bl	801451c <RCCEx_PLL2_Config>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80121fa:	e013      	b.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80121fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012200:	3328      	adds	r3, #40	@ 0x28
 8012202:	2100      	movs	r1, #0
 8012204:	4618      	mov	r0, r3
 8012206:	f002 fa3b 	bl	8014680 <RCCEx_PLL3_Config>
 801220a:	4603      	mov	r3, r0
 801220c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012210:	e008      	b.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8012212:	2301      	movs	r3, #1
 8012214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012218:	e004      	b.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801221a:	bf00      	nop
 801221c:	e002      	b.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801221e:	bf00      	nop
 8012220:	e000      	b.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8012222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10b      	bne.n	8012244 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801222c:	4b3b      	ldr	r3, [pc, #236]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801222e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012230:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8012234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012238:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801223c:	4a37      	ldr	r2, [pc, #220]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801223e:	430b      	orrs	r3, r1
 8012240:	6593      	str	r3, [r2, #88]	@ 0x58
 8012242:	e003      	b.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012248:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801224c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012254:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8012258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801225c:	2300      	movs	r3, #0
 801225e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012262:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8012266:	460b      	mov	r3, r1
 8012268:	4313      	orrs	r3, r2
 801226a:	d05d      	beq.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801226c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012274:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012278:	d03b      	beq.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801227a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801227e:	d834      	bhi.n	80122ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012284:	d037      	beq.n	80122f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801228a:	d82e      	bhi.n	80122ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801228c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012290:	d033      	beq.n	80122fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8012292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012296:	d828      	bhi.n	80122ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801229c:	d01a      	beq.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801229e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80122a2:	d822      	bhi.n	80122ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d003      	beq.n	80122b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80122a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122ac:	d007      	beq.n	80122be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80122ae:	e01c      	b.n	80122ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80122b0:	4b1a      	ldr	r3, [pc, #104]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122b4:	4a19      	ldr	r2, [pc, #100]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122bc:	e01e      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80122be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c2:	3308      	adds	r3, #8
 80122c4:	2100      	movs	r1, #0
 80122c6:	4618      	mov	r0, r3
 80122c8:	f002 f928 	bl	801451c <RCCEx_PLL2_Config>
 80122cc:	4603      	mov	r3, r0
 80122ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80122d2:	e013      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80122d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d8:	3328      	adds	r3, #40	@ 0x28
 80122da:	2100      	movs	r1, #0
 80122dc:	4618      	mov	r0, r3
 80122de:	f002 f9cf 	bl	8014680 <RCCEx_PLL3_Config>
 80122e2:	4603      	mov	r3, r0
 80122e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122e8:	e008      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80122ea:	2301      	movs	r3, #1
 80122ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122f0:	e004      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80122f2:	bf00      	nop
 80122f4:	e002      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80122f6:	bf00      	nop
 80122f8:	e000      	b.n	80122fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80122fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012300:	2b00      	cmp	r3, #0
 8012302:	d10d      	bne.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012304:	4b05      	ldr	r3, [pc, #20]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012308:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801230c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012310:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012314:	4a01      	ldr	r2, [pc, #4]	@ (801231c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012316:	430b      	orrs	r3, r1
 8012318:	6593      	str	r3, [r2, #88]	@ 0x58
 801231a:	e005      	b.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801231c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8012328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012330:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8012334:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012338:	2300      	movs	r3, #0
 801233a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801233e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8012342:	460b      	mov	r3, r1
 8012344:	4313      	orrs	r3, r2
 8012346:	d03a      	beq.n	80123be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801234e:	2b30      	cmp	r3, #48	@ 0x30
 8012350:	d01f      	beq.n	8012392 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8012352:	2b30      	cmp	r3, #48	@ 0x30
 8012354:	d819      	bhi.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8012356:	2b20      	cmp	r3, #32
 8012358:	d00c      	beq.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801235a:	2b20      	cmp	r3, #32
 801235c:	d815      	bhi.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x372>
 801235e:	2b00      	cmp	r3, #0
 8012360:	d019      	beq.n	8012396 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8012362:	2b10      	cmp	r3, #16
 8012364:	d111      	bne.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012366:	4baa      	ldr	r3, [pc, #680]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801236a:	4aa9      	ldr	r2, [pc, #676]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012370:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012372:	e011      	b.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012378:	3308      	adds	r3, #8
 801237a:	2102      	movs	r1, #2
 801237c:	4618      	mov	r0, r3
 801237e:	f002 f8cd 	bl	801451c <RCCEx_PLL2_Config>
 8012382:	4603      	mov	r3, r0
 8012384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012388:	e006      	b.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801238a:	2301      	movs	r3, #1
 801238c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012390:	e002      	b.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012392:	bf00      	nop
 8012394:	e000      	b.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801239c:	2b00      	cmp	r3, #0
 801239e:	d10a      	bne.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80123a0:	4b9b      	ldr	r3, [pc, #620]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80123a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123ae:	4a98      	ldr	r2, [pc, #608]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123b0:	430b      	orrs	r3, r1
 80123b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80123b4:	e003      	b.n	80123be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80123be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80123ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80123ce:	2300      	movs	r3, #0
 80123d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80123d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80123d8:	460b      	mov	r3, r1
 80123da:	4313      	orrs	r3, r2
 80123dc:	d051      	beq.n	8012482 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80123de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123e8:	d035      	beq.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80123ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123ee:	d82e      	bhi.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80123f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80123f4:	d031      	beq.n	801245a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80123f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80123fa:	d828      	bhi.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80123fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012400:	d01a      	beq.n	8012438 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8012402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012406:	d822      	bhi.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012408:	2b00      	cmp	r3, #0
 801240a:	d003      	beq.n	8012414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801240c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012410:	d007      	beq.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8012412:	e01c      	b.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012414:	4b7e      	ldr	r3, [pc, #504]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012418:	4a7d      	ldr	r2, [pc, #500]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801241a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801241e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012420:	e01c      	b.n	801245c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012426:	3308      	adds	r3, #8
 8012428:	2100      	movs	r1, #0
 801242a:	4618      	mov	r0, r3
 801242c:	f002 f876 	bl	801451c <RCCEx_PLL2_Config>
 8012430:	4603      	mov	r3, r0
 8012432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012436:	e011      	b.n	801245c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801243c:	3328      	adds	r3, #40	@ 0x28
 801243e:	2100      	movs	r1, #0
 8012440:	4618      	mov	r0, r3
 8012442:	f002 f91d 	bl	8014680 <RCCEx_PLL3_Config>
 8012446:	4603      	mov	r3, r0
 8012448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801244c:	e006      	b.n	801245c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801244e:	2301      	movs	r3, #1
 8012450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012454:	e002      	b.n	801245c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012456:	bf00      	nop
 8012458:	e000      	b.n	801245c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801245a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801245c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012460:	2b00      	cmp	r3, #0
 8012462:	d10a      	bne.n	801247a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012464:	4b6a      	ldr	r3, [pc, #424]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012468:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801246c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012472:	4a67      	ldr	r2, [pc, #412]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012474:	430b      	orrs	r3, r1
 8012476:	6513      	str	r3, [r2, #80]	@ 0x50
 8012478:	e003      	b.n	8012482 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801247a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801247e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801248e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012492:	2300      	movs	r3, #0
 8012494:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012498:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801249c:	460b      	mov	r3, r1
 801249e:	4313      	orrs	r3, r2
 80124a0:	d053      	beq.n	801254a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80124a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80124a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80124ac:	d033      	beq.n	8012516 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80124ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80124b2:	d82c      	bhi.n	801250e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80124b8:	d02f      	beq.n	801251a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80124ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80124be:	d826      	bhi.n	801250e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80124c4:	d02b      	beq.n	801251e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80124c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80124ca:	d820      	bhi.n	801250e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124d0:	d012      	beq.n	80124f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80124d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124d6:	d81a      	bhi.n	801250e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d022      	beq.n	8012522 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80124dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124e0:	d115      	bne.n	801250e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80124e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124e6:	3308      	adds	r3, #8
 80124e8:	2101      	movs	r1, #1
 80124ea:	4618      	mov	r0, r3
 80124ec:	f002 f816 	bl	801451c <RCCEx_PLL2_Config>
 80124f0:	4603      	mov	r3, r0
 80124f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80124f6:	e015      	b.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80124f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124fc:	3328      	adds	r3, #40	@ 0x28
 80124fe:	2101      	movs	r1, #1
 8012500:	4618      	mov	r0, r3
 8012502:	f002 f8bd 	bl	8014680 <RCCEx_PLL3_Config>
 8012506:	4603      	mov	r3, r0
 8012508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801250c:	e00a      	b.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801250e:	2301      	movs	r3, #1
 8012510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012514:	e006      	b.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012516:	bf00      	nop
 8012518:	e004      	b.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801251a:	bf00      	nop
 801251c:	e002      	b.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801251e:	bf00      	nop
 8012520:	e000      	b.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012528:	2b00      	cmp	r3, #0
 801252a:	d10a      	bne.n	8012542 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801252c:	4b38      	ldr	r3, [pc, #224]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801252e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012530:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8012534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801253a:	4a35      	ldr	r2, [pc, #212]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801253c:	430b      	orrs	r3, r1
 801253e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012540:	e003      	b.n	801254a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012546:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801254a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012556:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801255a:	2300      	movs	r3, #0
 801255c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012560:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012564:	460b      	mov	r3, r1
 8012566:	4313      	orrs	r3, r2
 8012568:	d058      	beq.n	801261c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801256a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801256e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012576:	d033      	beq.n	80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801257c:	d82c      	bhi.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801257e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012582:	d02f      	beq.n	80125e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012588:	d826      	bhi.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801258a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801258e:	d02b      	beq.n	80125e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012590:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012594:	d820      	bhi.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801259a:	d012      	beq.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801259c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125a0:	d81a      	bhi.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d022      	beq.n	80125ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80125a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125aa:	d115      	bne.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80125ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125b0:	3308      	adds	r3, #8
 80125b2:	2101      	movs	r1, #1
 80125b4:	4618      	mov	r0, r3
 80125b6:	f001 ffb1 	bl	801451c <RCCEx_PLL2_Config>
 80125ba:	4603      	mov	r3, r0
 80125bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80125c0:	e015      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80125c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125c6:	3328      	adds	r3, #40	@ 0x28
 80125c8:	2101      	movs	r1, #1
 80125ca:	4618      	mov	r0, r3
 80125cc:	f002 f858 	bl	8014680 <RCCEx_PLL3_Config>
 80125d0:	4603      	mov	r3, r0
 80125d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80125d6:	e00a      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80125d8:	2301      	movs	r3, #1
 80125da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125de:	e006      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125e0:	bf00      	nop
 80125e2:	e004      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125e4:	bf00      	nop
 80125e6:	e002      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125e8:	bf00      	nop
 80125ea:	e000      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d10e      	bne.n	8012614 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80125f6:	4b06      	ldr	r3, [pc, #24]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80125fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012606:	4a02      	ldr	r2, [pc, #8]	@ (8012610 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012608:	430b      	orrs	r3, r1
 801260a:	6593      	str	r3, [r2, #88]	@ 0x58
 801260c:	e006      	b.n	801261c <HAL_RCCEx_PeriphCLKConfig+0x604>
 801260e:	bf00      	nop
 8012610:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012618:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801261c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012624:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801262c:	2300      	movs	r3, #0
 801262e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012632:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012636:	460b      	mov	r3, r1
 8012638:	4313      	orrs	r3, r2
 801263a:	d037      	beq.n	80126ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801263c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012646:	d00e      	beq.n	8012666 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801264c:	d816      	bhi.n	801267c <HAL_RCCEx_PeriphCLKConfig+0x664>
 801264e:	2b00      	cmp	r3, #0
 8012650:	d018      	beq.n	8012684 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8012652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012656:	d111      	bne.n	801267c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012658:	4bc4      	ldr	r3, [pc, #784]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801265c:	4ac3      	ldr	r2, [pc, #780]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801265e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012664:	e00f      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801266a:	3308      	adds	r3, #8
 801266c:	2101      	movs	r1, #1
 801266e:	4618      	mov	r0, r3
 8012670:	f001 ff54 	bl	801451c <RCCEx_PLL2_Config>
 8012674:	4603      	mov	r3, r0
 8012676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801267a:	e004      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801267c:	2301      	movs	r3, #1
 801267e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012682:	e000      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10a      	bne.n	80126a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801268e:	4bb7      	ldr	r3, [pc, #732]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012692:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801269a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801269c:	4ab3      	ldr	r2, [pc, #716]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801269e:	430b      	orrs	r3, r1
 80126a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80126a2:	e003      	b.n	80126ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80126ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80126b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80126bc:	2300      	movs	r3, #0
 80126be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80126c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80126c6:	460b      	mov	r3, r1
 80126c8:	4313      	orrs	r3, r2
 80126ca:	d039      	beq.n	8012740 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80126cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80126d2:	2b03      	cmp	r3, #3
 80126d4:	d81c      	bhi.n	8012710 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80126d6:	a201      	add	r2, pc, #4	@ (adr r2, 80126dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80126d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126dc:	08012719 	.word	0x08012719
 80126e0:	080126ed 	.word	0x080126ed
 80126e4:	080126fb 	.word	0x080126fb
 80126e8:	08012719 	.word	0x08012719
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126ec:	4b9f      	ldr	r3, [pc, #636]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126f0:	4a9e      	ldr	r2, [pc, #632]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80126f8:	e00f      	b.n	801271a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80126fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fe:	3308      	adds	r3, #8
 8012700:	2102      	movs	r1, #2
 8012702:	4618      	mov	r0, r3
 8012704:	f001 ff0a 	bl	801451c <RCCEx_PLL2_Config>
 8012708:	4603      	mov	r3, r0
 801270a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801270e:	e004      	b.n	801271a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012710:	2301      	movs	r3, #1
 8012712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012716:	e000      	b.n	801271a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012718:	bf00      	nop
    }

    if (ret == HAL_OK)
 801271a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801271e:	2b00      	cmp	r3, #0
 8012720:	d10a      	bne.n	8012738 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012722:	4b92      	ldr	r3, [pc, #584]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012726:	f023 0103 	bic.w	r1, r3, #3
 801272a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801272e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012730:	4a8e      	ldr	r2, [pc, #568]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012732:	430b      	orrs	r3, r1
 8012734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012736:	e003      	b.n	8012740 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801273c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012748:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801274c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012750:	2300      	movs	r3, #0
 8012752:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012756:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801275a:	460b      	mov	r3, r1
 801275c:	4313      	orrs	r3, r2
 801275e:	f000 8099 	beq.w	8012894 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012762:	4b83      	ldr	r3, [pc, #524]	@ (8012970 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	4a82      	ldr	r2, [pc, #520]	@ (8012970 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801276c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801276e:	f7f6 feb9 	bl	80094e4 <HAL_GetTick>
 8012772:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012776:	e00b      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012778:	f7f6 feb4 	bl	80094e4 <HAL_GetTick>
 801277c:	4602      	mov	r2, r0
 801277e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	2b64      	cmp	r3, #100	@ 0x64
 8012786:	d903      	bls.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012788:	2303      	movs	r3, #3
 801278a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801278e:	e005      	b.n	801279c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012790:	4b77      	ldr	r3, [pc, #476]	@ (8012970 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012798:	2b00      	cmp	r3, #0
 801279a:	d0ed      	beq.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801279c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d173      	bne.n	801288c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80127a4:	4b71      	ldr	r3, [pc, #452]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80127a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80127b0:	4053      	eors	r3, r2
 80127b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d015      	beq.n	80127e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80127ba:	4b6c      	ldr	r3, [pc, #432]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80127c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80127c6:	4b69      	ldr	r3, [pc, #420]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ca:	4a68      	ldr	r2, [pc, #416]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80127d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80127d2:	4b66      	ldr	r3, [pc, #408]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127d6:	4a65      	ldr	r2, [pc, #404]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80127dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80127de:	4a63      	ldr	r2, [pc, #396]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80127e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80127e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80127ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127f2:	d118      	bne.n	8012826 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127f4:	f7f6 fe76 	bl	80094e4 <HAL_GetTick>
 80127f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80127fc:	e00d      	b.n	801281a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80127fe:	f7f6 fe71 	bl	80094e4 <HAL_GetTick>
 8012802:	4602      	mov	r2, r0
 8012804:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012808:	1ad2      	subs	r2, r2, r3
 801280a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801280e:	429a      	cmp	r2, r3
 8012810:	d903      	bls.n	801281a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012812:	2303      	movs	r3, #3
 8012814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8012818:	e005      	b.n	8012826 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801281a:	4b54      	ldr	r3, [pc, #336]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801281e:	f003 0302 	and.w	r3, r3, #2
 8012822:	2b00      	cmp	r3, #0
 8012824:	d0eb      	beq.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801282a:	2b00      	cmp	r3, #0
 801282c:	d129      	bne.n	8012882 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801282e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801283a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801283e:	d10e      	bne.n	801285e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012840:	4b4a      	ldr	r3, [pc, #296]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801284c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012850:	091a      	lsrs	r2, r3, #4
 8012852:	4b48      	ldr	r3, [pc, #288]	@ (8012974 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012854:	4013      	ands	r3, r2
 8012856:	4a45      	ldr	r2, [pc, #276]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012858:	430b      	orrs	r3, r1
 801285a:	6113      	str	r3, [r2, #16]
 801285c:	e005      	b.n	801286a <HAL_RCCEx_PeriphCLKConfig+0x852>
 801285e:	4b43      	ldr	r3, [pc, #268]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012860:	691b      	ldr	r3, [r3, #16]
 8012862:	4a42      	ldr	r2, [pc, #264]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012864:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012868:	6113      	str	r3, [r2, #16]
 801286a:	4b40      	ldr	r3, [pc, #256]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801286c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801286e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801287a:	4a3c      	ldr	r2, [pc, #240]	@ (801296c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801287c:	430b      	orrs	r3, r1
 801287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8012880:	e008      	b.n	8012894 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801288a:	e003      	b.n	8012894 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801288c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012890:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289c:	f002 0301 	and.w	r3, r2, #1
 80128a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80128a4:	2300      	movs	r3, #0
 80128a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80128aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80128ae:	460b      	mov	r3, r1
 80128b0:	4313      	orrs	r3, r2
 80128b2:	f000 808f 	beq.w	80129d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80128b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80128bc:	2b28      	cmp	r3, #40	@ 0x28
 80128be:	d871      	bhi.n	80129a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80128c0:	a201      	add	r2, pc, #4	@ (adr r2, 80128c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80128c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128c6:	bf00      	nop
 80128c8:	080129ad 	.word	0x080129ad
 80128cc:	080129a5 	.word	0x080129a5
 80128d0:	080129a5 	.word	0x080129a5
 80128d4:	080129a5 	.word	0x080129a5
 80128d8:	080129a5 	.word	0x080129a5
 80128dc:	080129a5 	.word	0x080129a5
 80128e0:	080129a5 	.word	0x080129a5
 80128e4:	080129a5 	.word	0x080129a5
 80128e8:	08012979 	.word	0x08012979
 80128ec:	080129a5 	.word	0x080129a5
 80128f0:	080129a5 	.word	0x080129a5
 80128f4:	080129a5 	.word	0x080129a5
 80128f8:	080129a5 	.word	0x080129a5
 80128fc:	080129a5 	.word	0x080129a5
 8012900:	080129a5 	.word	0x080129a5
 8012904:	080129a5 	.word	0x080129a5
 8012908:	0801298f 	.word	0x0801298f
 801290c:	080129a5 	.word	0x080129a5
 8012910:	080129a5 	.word	0x080129a5
 8012914:	080129a5 	.word	0x080129a5
 8012918:	080129a5 	.word	0x080129a5
 801291c:	080129a5 	.word	0x080129a5
 8012920:	080129a5 	.word	0x080129a5
 8012924:	080129a5 	.word	0x080129a5
 8012928:	080129ad 	.word	0x080129ad
 801292c:	080129a5 	.word	0x080129a5
 8012930:	080129a5 	.word	0x080129a5
 8012934:	080129a5 	.word	0x080129a5
 8012938:	080129a5 	.word	0x080129a5
 801293c:	080129a5 	.word	0x080129a5
 8012940:	080129a5 	.word	0x080129a5
 8012944:	080129a5 	.word	0x080129a5
 8012948:	080129ad 	.word	0x080129ad
 801294c:	080129a5 	.word	0x080129a5
 8012950:	080129a5 	.word	0x080129a5
 8012954:	080129a5 	.word	0x080129a5
 8012958:	080129a5 	.word	0x080129a5
 801295c:	080129a5 	.word	0x080129a5
 8012960:	080129a5 	.word	0x080129a5
 8012964:	080129a5 	.word	0x080129a5
 8012968:	080129ad 	.word	0x080129ad
 801296c:	58024400 	.word	0x58024400
 8012970:	58024800 	.word	0x58024800
 8012974:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801297c:	3308      	adds	r3, #8
 801297e:	2101      	movs	r1, #1
 8012980:	4618      	mov	r0, r3
 8012982:	f001 fdcb 	bl	801451c <RCCEx_PLL2_Config>
 8012986:	4603      	mov	r3, r0
 8012988:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801298c:	e00f      	b.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801298e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012992:	3328      	adds	r3, #40	@ 0x28
 8012994:	2101      	movs	r1, #1
 8012996:	4618      	mov	r0, r3
 8012998:	f001 fe72 	bl	8014680 <RCCEx_PLL3_Config>
 801299c:	4603      	mov	r3, r0
 801299e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80129a2:	e004      	b.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80129a4:	2301      	movs	r3, #1
 80129a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80129aa:	e000      	b.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80129ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d10a      	bne.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80129b6:	4bbf      	ldr	r3, [pc, #764]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80129b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80129be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129c4:	4abb      	ldr	r2, [pc, #748]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80129c6:	430b      	orrs	r3, r1
 80129c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80129ca:	e003      	b.n	80129d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80129d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	f002 0302 	and.w	r3, r2, #2
 80129e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80129e4:	2300      	movs	r3, #0
 80129e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80129ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80129ee:	460b      	mov	r3, r1
 80129f0:	4313      	orrs	r3, r2
 80129f2:	d041      	beq.n	8012a78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80129f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129fa:	2b05      	cmp	r3, #5
 80129fc:	d824      	bhi.n	8012a48 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80129fe:	a201      	add	r2, pc, #4	@ (adr r2, 8012a04 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a04:	08012a51 	.word	0x08012a51
 8012a08:	08012a1d 	.word	0x08012a1d
 8012a0c:	08012a33 	.word	0x08012a33
 8012a10:	08012a51 	.word	0x08012a51
 8012a14:	08012a51 	.word	0x08012a51
 8012a18:	08012a51 	.word	0x08012a51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a20:	3308      	adds	r3, #8
 8012a22:	2101      	movs	r1, #1
 8012a24:	4618      	mov	r0, r3
 8012a26:	f001 fd79 	bl	801451c <RCCEx_PLL2_Config>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012a30:	e00f      	b.n	8012a52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a36:	3328      	adds	r3, #40	@ 0x28
 8012a38:	2101      	movs	r1, #1
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f001 fe20 	bl	8014680 <RCCEx_PLL3_Config>
 8012a40:	4603      	mov	r3, r0
 8012a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012a46:	e004      	b.n	8012a52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a48:	2301      	movs	r3, #1
 8012a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a4e:	e000      	b.n	8012a52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d10a      	bne.n	8012a70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012a5a:	4b96      	ldr	r3, [pc, #600]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a5e:	f023 0107 	bic.w	r1, r3, #7
 8012a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a68:	4a92      	ldr	r2, [pc, #584]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a6a:	430b      	orrs	r3, r1
 8012a6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a6e:	e003      	b.n	8012a78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a80:	f002 0304 	and.w	r3, r2, #4
 8012a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012a88:	2300      	movs	r3, #0
 8012a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012a8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012a92:	460b      	mov	r3, r1
 8012a94:	4313      	orrs	r3, r2
 8012a96:	d044      	beq.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aa0:	2b05      	cmp	r3, #5
 8012aa2:	d825      	bhi.n	8012af0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8012aac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aaa:	bf00      	nop
 8012aac:	08012af9 	.word	0x08012af9
 8012ab0:	08012ac5 	.word	0x08012ac5
 8012ab4:	08012adb 	.word	0x08012adb
 8012ab8:	08012af9 	.word	0x08012af9
 8012abc:	08012af9 	.word	0x08012af9
 8012ac0:	08012af9 	.word	0x08012af9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ac8:	3308      	adds	r3, #8
 8012aca:	2101      	movs	r1, #1
 8012acc:	4618      	mov	r0, r3
 8012ace:	f001 fd25 	bl	801451c <RCCEx_PLL2_Config>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012ad8:	e00f      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ade:	3328      	adds	r3, #40	@ 0x28
 8012ae0:	2101      	movs	r1, #1
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f001 fdcc 	bl	8014680 <RCCEx_PLL3_Config>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012aee:	e004      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012af0:	2301      	movs	r3, #1
 8012af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012af6:	e000      	b.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d10b      	bne.n	8012b1a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012b02:	4b6c      	ldr	r3, [pc, #432]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b06:	f023 0107 	bic.w	r1, r3, #7
 8012b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b12:	4a68      	ldr	r2, [pc, #416]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b14:	430b      	orrs	r3, r1
 8012b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b18:	e003      	b.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f002 0320 	and.w	r3, r2, #32
 8012b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012b32:	2300      	movs	r3, #0
 8012b34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012b38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	d055      	beq.n	8012bee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012b4e:	d033      	beq.n	8012bb8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012b54:	d82c      	bhi.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b5a:	d02f      	beq.n	8012bbc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b60:	d826      	bhi.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012b66:	d02b      	beq.n	8012bc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012b68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012b6c:	d820      	bhi.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b72:	d012      	beq.n	8012b9a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b78:	d81a      	bhi.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d022      	beq.n	8012bc4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b82:	d115      	bne.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b88:	3308      	adds	r3, #8
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f001 fcc5 	bl	801451c <RCCEx_PLL2_Config>
 8012b92:	4603      	mov	r3, r0
 8012b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012b98:	e015      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b9e:	3328      	adds	r3, #40	@ 0x28
 8012ba0:	2102      	movs	r1, #2
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f001 fd6c 	bl	8014680 <RCCEx_PLL3_Config>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012bae:	e00a      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012bb6:	e006      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bb8:	bf00      	nop
 8012bba:	e004      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bbc:	bf00      	nop
 8012bbe:	e002      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bc0:	bf00      	nop
 8012bc2:	e000      	b.n	8012bc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10b      	bne.n	8012be6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012bce:	4b39      	ldr	r3, [pc, #228]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012bd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bde:	4a35      	ldr	r2, [pc, #212]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012be0:	430b      	orrs	r3, r1
 8012be2:	6553      	str	r3, [r2, #84]	@ 0x54
 8012be4:	e003      	b.n	8012bee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012bfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012bfe:	2300      	movs	r3, #0
 8012c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012c04:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012c08:	460b      	mov	r3, r1
 8012c0a:	4313      	orrs	r3, r2
 8012c0c:	d058      	beq.n	8012cc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012c1a:	d033      	beq.n	8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012c1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012c20:	d82c      	bhi.n	8012c7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c26:	d02f      	beq.n	8012c88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c2c:	d826      	bhi.n	8012c7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012c32:	d02b      	beq.n	8012c8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012c34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012c38:	d820      	bhi.n	8012c7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c3e:	d012      	beq.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c44:	d81a      	bhi.n	8012c7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d022      	beq.n	8012c90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012c4e:	d115      	bne.n	8012c7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c54:	3308      	adds	r3, #8
 8012c56:	2100      	movs	r1, #0
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f001 fc5f 	bl	801451c <RCCEx_PLL2_Config>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012c64:	e015      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c6a:	3328      	adds	r3, #40	@ 0x28
 8012c6c:	2102      	movs	r1, #2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f001 fd06 	bl	8014680 <RCCEx_PLL3_Config>
 8012c74:	4603      	mov	r3, r0
 8012c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012c7a:	e00a      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c82:	e006      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c84:	bf00      	nop
 8012c86:	e004      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c88:	bf00      	nop
 8012c8a:	e002      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c8c:	bf00      	nop
 8012c8e:	e000      	b.n	8012c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d10e      	bne.n	8012cb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012c9a:	4b06      	ldr	r3, [pc, #24]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012caa:	4a02      	ldr	r2, [pc, #8]	@ (8012cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012cac:	430b      	orrs	r3, r1
 8012cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8012cb0:	e006      	b.n	8012cc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012cb2:	bf00      	nop
 8012cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012cd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012cda:	460b      	mov	r3, r1
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	d055      	beq.n	8012d8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012ce8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012cec:	d033      	beq.n	8012d56 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012cee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012cf2:	d82c      	bhi.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012cf8:	d02f      	beq.n	8012d5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012cfe:	d826      	bhi.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d04:	d02b      	beq.n	8012d5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012d06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d0a:	d820      	bhi.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012d10:	d012      	beq.n	8012d38 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012d16:	d81a      	bhi.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d022      	beq.n	8012d62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012d20:	d115      	bne.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d26:	3308      	adds	r3, #8
 8012d28:	2100      	movs	r1, #0
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f001 fbf6 	bl	801451c <RCCEx_PLL2_Config>
 8012d30:	4603      	mov	r3, r0
 8012d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012d36:	e015      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d3c:	3328      	adds	r3, #40	@ 0x28
 8012d3e:	2102      	movs	r1, #2
 8012d40:	4618      	mov	r0, r3
 8012d42:	f001 fc9d 	bl	8014680 <RCCEx_PLL3_Config>
 8012d46:	4603      	mov	r3, r0
 8012d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012d4c:	e00a      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d54:	e006      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d56:	bf00      	nop
 8012d58:	e004      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d5a:	bf00      	nop
 8012d5c:	e002      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d5e:	bf00      	nop
 8012d60:	e000      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d10b      	bne.n	8012d84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012d6c:	4ba0      	ldr	r3, [pc, #640]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d7c:	4a9c      	ldr	r2, [pc, #624]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d7e:	430b      	orrs	r3, r1
 8012d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d82:	e003      	b.n	8012d8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d94:	f002 0308 	and.w	r3, r2, #8
 8012d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012da2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012da6:	460b      	mov	r3, r1
 8012da8:	4313      	orrs	r3, r2
 8012daa:	d01e      	beq.n	8012dea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012db8:	d10c      	bne.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dbe:	3328      	adds	r3, #40	@ 0x28
 8012dc0:	2102      	movs	r1, #2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f001 fc5c 	bl	8014680 <RCCEx_PLL3_Config>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d002      	beq.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012dce:	2301      	movs	r3, #1
 8012dd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012dd4:	4b86      	ldr	r3, [pc, #536]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012dd8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012de4:	4a82      	ldr	r2, [pc, #520]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012de6:	430b      	orrs	r3, r1
 8012de8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	f002 0310 	and.w	r3, r2, #16
 8012df6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012e00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012e04:	460b      	mov	r3, r1
 8012e06:	4313      	orrs	r3, r2
 8012e08:	d01e      	beq.n	8012e48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e16:	d10c      	bne.n	8012e32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e1c:	3328      	adds	r3, #40	@ 0x28
 8012e1e:	2102      	movs	r1, #2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f001 fc2d 	bl	8014680 <RCCEx_PLL3_Config>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d002      	beq.n	8012e32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012e32:	4b6f      	ldr	r3, [pc, #444]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e42:	4a6b      	ldr	r2, [pc, #428]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e44:	430b      	orrs	r3, r1
 8012e46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012e54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012e56:	2300      	movs	r3, #0
 8012e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012e5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012e5e:	460b      	mov	r3, r1
 8012e60:	4313      	orrs	r3, r2
 8012e62:	d03e      	beq.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012e6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e70:	d022      	beq.n	8012eb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012e72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e76:	d81b      	bhi.n	8012eb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d003      	beq.n	8012e84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e80:	d00b      	beq.n	8012e9a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012e82:	e015      	b.n	8012eb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e88:	3308      	adds	r3, #8
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f001 fb45 	bl	801451c <RCCEx_PLL2_Config>
 8012e92:	4603      	mov	r3, r0
 8012e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012e98:	e00f      	b.n	8012eba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9e:	3328      	adds	r3, #40	@ 0x28
 8012ea0:	2102      	movs	r1, #2
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f001 fbec 	bl	8014680 <RCCEx_PLL3_Config>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012eae:	e004      	b.n	8012eba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012eb6:	e000      	b.n	8012eba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10b      	bne.n	8012eda <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ec6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ece:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012ed2:	4a47      	ldr	r2, [pc, #284]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ed4:	430b      	orrs	r3, r1
 8012ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ed8:	e003      	b.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012eee:	673b      	str	r3, [r7, #112]	@ 0x70
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	677b      	str	r3, [r7, #116]	@ 0x74
 8012ef4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012ef8:	460b      	mov	r3, r1
 8012efa:	4313      	orrs	r3, r2
 8012efc:	d03b      	beq.n	8012f76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f0a:	d01f      	beq.n	8012f4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012f0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f10:	d818      	bhi.n	8012f44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f16:	d003      	beq.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012f18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f1c:	d007      	beq.n	8012f2e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012f1e:	e011      	b.n	8012f44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f20:	4b33      	ldr	r3, [pc, #204]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f24:	4a32      	ldr	r2, [pc, #200]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012f2c:	e00f      	b.n	8012f4e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f32:	3328      	adds	r3, #40	@ 0x28
 8012f34:	2101      	movs	r1, #1
 8012f36:	4618      	mov	r0, r3
 8012f38:	f001 fba2 	bl	8014680 <RCCEx_PLL3_Config>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012f42:	e004      	b.n	8012f4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f44:	2301      	movs	r3, #1
 8012f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f4a:	e000      	b.n	8012f4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d10b      	bne.n	8012f6e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012f56:	4b26      	ldr	r3, [pc, #152]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f66:	4a22      	ldr	r2, [pc, #136]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f68:	430b      	orrs	r3, r1
 8012f6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8012f6c:	e003      	b.n	8012f76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012f84:	2300      	movs	r3, #0
 8012f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012f88:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	d034      	beq.n	8012ffc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d003      	beq.n	8012fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012fa0:	d007      	beq.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012fa2:	e011      	b.n	8012fc8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fa4:	4b12      	ldr	r3, [pc, #72]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fa8:	4a11      	ldr	r2, [pc, #68]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012fb0:	e00e      	b.n	8012fd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fb6:	3308      	adds	r3, #8
 8012fb8:	2102      	movs	r1, #2
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f001 faae 	bl	801451c <RCCEx_PLL2_Config>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012fc6:	e003      	b.n	8012fd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012fc8:	2301      	movs	r3, #1
 8012fca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d10d      	bne.n	8012ff4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012fd8:	4b05      	ldr	r3, [pc, #20]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fdc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012fe6:	4a02      	ldr	r2, [pc, #8]	@ (8012ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fe8:	430b      	orrs	r3, r1
 8012fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012fec:	e006      	b.n	8012ffc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012fee:	bf00      	nop
 8012ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8013008:	663b      	str	r3, [r7, #96]	@ 0x60
 801300a:	2300      	movs	r3, #0
 801300c:	667b      	str	r3, [r7, #100]	@ 0x64
 801300e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8013012:	460b      	mov	r3, r1
 8013014:	4313      	orrs	r3, r2
 8013016:	d00c      	beq.n	8013032 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801301c:	3328      	adds	r3, #40	@ 0x28
 801301e:	2102      	movs	r1, #2
 8013020:	4618      	mov	r0, r3
 8013022:	f001 fb2d 	bl	8014680 <RCCEx_PLL3_Config>
 8013026:	4603      	mov	r3, r0
 8013028:	2b00      	cmp	r3, #0
 801302a:	d002      	beq.n	8013032 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801302c:	2301      	movs	r3, #1
 801302e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801303e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013040:	2300      	movs	r3, #0
 8013042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013044:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8013048:	460b      	mov	r3, r1
 801304a:	4313      	orrs	r3, r2
 801304c:	d036      	beq.n	80130bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801304e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013058:	d018      	beq.n	801308c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801305a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801305e:	d811      	bhi.n	8013084 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013064:	d014      	beq.n	8013090 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8013066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801306a:	d80b      	bhi.n	8013084 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801306c:	2b00      	cmp	r3, #0
 801306e:	d011      	beq.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8013070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013074:	d106      	bne.n	8013084 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013076:	4bb7      	ldr	r3, [pc, #732]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801307a:	4ab6      	ldr	r2, [pc, #728]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801307c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013082:	e008      	b.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013084:	2301      	movs	r3, #1
 8013086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801308a:	e004      	b.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801308c:	bf00      	nop
 801308e:	e002      	b.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013090:	bf00      	nop
 8013092:	e000      	b.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801309a:	2b00      	cmp	r3, #0
 801309c:	d10a      	bne.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801309e:	4bad      	ldr	r3, [pc, #692]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80130a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130ac:	4aa9      	ldr	r2, [pc, #676]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130ae:	430b      	orrs	r3, r1
 80130b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80130b2:	e003      	b.n	80130bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80130b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80130bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80130c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80130ca:	2300      	movs	r3, #0
 80130cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80130ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80130d2:	460b      	mov	r3, r1
 80130d4:	4313      	orrs	r3, r2
 80130d6:	d009      	beq.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80130d8:	4b9e      	ldr	r3, [pc, #632]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80130e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130e6:	4a9b      	ldr	r2, [pc, #620]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130e8:	430b      	orrs	r3, r1
 80130ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80130ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80130f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80130fa:	2300      	movs	r3, #0
 80130fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8013102:	460b      	mov	r3, r1
 8013104:	4313      	orrs	r3, r2
 8013106:	d009      	beq.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013108:	4b92      	ldr	r3, [pc, #584]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801310a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801310c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8013110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013116:	4a8f      	ldr	r2, [pc, #572]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013118:	430b      	orrs	r3, r1
 801311a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801311c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013124:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8013128:	643b      	str	r3, [r7, #64]	@ 0x40
 801312a:	2300      	movs	r3, #0
 801312c:	647b      	str	r3, [r7, #68]	@ 0x44
 801312e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8013132:	460b      	mov	r3, r1
 8013134:	4313      	orrs	r3, r2
 8013136:	d00e      	beq.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013138:	4b86      	ldr	r3, [pc, #536]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801313a:	691b      	ldr	r3, [r3, #16]
 801313c:	4a85      	ldr	r2, [pc, #532]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801313e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8013142:	6113      	str	r3, [r2, #16]
 8013144:	4b83      	ldr	r3, [pc, #524]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013146:	6919      	ldr	r1, [r3, #16]
 8013148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801314c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8013150:	4a80      	ldr	r2, [pc, #512]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013152:	430b      	orrs	r3, r1
 8013154:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8013162:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013164:	2300      	movs	r3, #0
 8013166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013168:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801316c:	460b      	mov	r3, r1
 801316e:	4313      	orrs	r3, r2
 8013170:	d009      	beq.n	8013186 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013172:	4b78      	ldr	r3, [pc, #480]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013176:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801317a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013180:	4a74      	ldr	r2, [pc, #464]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013182:	430b      	orrs	r3, r1
 8013184:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8013192:	633b      	str	r3, [r7, #48]	@ 0x30
 8013194:	2300      	movs	r3, #0
 8013196:	637b      	str	r3, [r7, #52]	@ 0x34
 8013198:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801319c:	460b      	mov	r3, r1
 801319e:	4313      	orrs	r3, r2
 80131a0:	d00a      	beq.n	80131b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80131a2:	4b6c      	ldr	r3, [pc, #432]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80131a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80131aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80131b2:	4a68      	ldr	r2, [pc, #416]	@ (8013354 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131b4:	430b      	orrs	r3, r1
 80131b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80131b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c0:	2100      	movs	r1, #0
 80131c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80131c4:	f003 0301 	and.w	r3, r3, #1
 80131c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80131ce:	460b      	mov	r3, r1
 80131d0:	4313      	orrs	r3, r2
 80131d2:	d011      	beq.n	80131f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80131d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131d8:	3308      	adds	r3, #8
 80131da:	2100      	movs	r1, #0
 80131dc:	4618      	mov	r0, r3
 80131de:	f001 f99d 	bl	801451c <RCCEx_PLL2_Config>
 80131e2:	4603      	mov	r3, r0
 80131e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80131e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d003      	beq.n	80131f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80131f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80131f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013200:	2100      	movs	r1, #0
 8013202:	6239      	str	r1, [r7, #32]
 8013204:	f003 0302 	and.w	r3, r3, #2
 8013208:	627b      	str	r3, [r7, #36]	@ 0x24
 801320a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801320e:	460b      	mov	r3, r1
 8013210:	4313      	orrs	r3, r2
 8013212:	d011      	beq.n	8013238 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013218:	3308      	adds	r3, #8
 801321a:	2101      	movs	r1, #1
 801321c:	4618      	mov	r0, r3
 801321e:	f001 f97d 	bl	801451c <RCCEx_PLL2_Config>
 8013222:	4603      	mov	r3, r0
 8013224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801322c:	2b00      	cmp	r3, #0
 801322e:	d003      	beq.n	8013238 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013234:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8013238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	2100      	movs	r1, #0
 8013242:	61b9      	str	r1, [r7, #24]
 8013244:	f003 0304 	and.w	r3, r3, #4
 8013248:	61fb      	str	r3, [r7, #28]
 801324a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801324e:	460b      	mov	r3, r1
 8013250:	4313      	orrs	r3, r2
 8013252:	d011      	beq.n	8013278 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013258:	3308      	adds	r3, #8
 801325a:	2102      	movs	r1, #2
 801325c:	4618      	mov	r0, r3
 801325e:	f001 f95d 	bl	801451c <RCCEx_PLL2_Config>
 8013262:	4603      	mov	r3, r0
 8013264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801326c:	2b00      	cmp	r3, #0
 801326e:	d003      	beq.n	8013278 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013280:	2100      	movs	r1, #0
 8013282:	6139      	str	r1, [r7, #16]
 8013284:	f003 0308 	and.w	r3, r3, #8
 8013288:	617b      	str	r3, [r7, #20]
 801328a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801328e:	460b      	mov	r3, r1
 8013290:	4313      	orrs	r3, r2
 8013292:	d011      	beq.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013298:	3328      	adds	r3, #40	@ 0x28
 801329a:	2100      	movs	r1, #0
 801329c:	4618      	mov	r0, r3
 801329e:	f001 f9ef 	bl	8014680 <RCCEx_PLL3_Config>
 80132a2:	4603      	mov	r3, r0
 80132a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80132a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80132b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c0:	2100      	movs	r1, #0
 80132c2:	60b9      	str	r1, [r7, #8]
 80132c4:	f003 0310 	and.w	r3, r3, #16
 80132c8:	60fb      	str	r3, [r7, #12]
 80132ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80132ce:	460b      	mov	r3, r1
 80132d0:	4313      	orrs	r3, r2
 80132d2:	d011      	beq.n	80132f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80132d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132d8:	3328      	adds	r3, #40	@ 0x28
 80132da:	2101      	movs	r1, #1
 80132dc:	4618      	mov	r0, r3
 80132de:	f001 f9cf 	bl	8014680 <RCCEx_PLL3_Config>
 80132e2:	4603      	mov	r3, r0
 80132e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80132f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	2100      	movs	r1, #0
 8013302:	6039      	str	r1, [r7, #0]
 8013304:	f003 0320 	and.w	r3, r3, #32
 8013308:	607b      	str	r3, [r7, #4]
 801330a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801330e:	460b      	mov	r3, r1
 8013310:	4313      	orrs	r3, r2
 8013312:	d011      	beq.n	8013338 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013318:	3328      	adds	r3, #40	@ 0x28
 801331a:	2102      	movs	r1, #2
 801331c:	4618      	mov	r0, r3
 801331e:	f001 f9af 	bl	8014680 <RCCEx_PLL3_Config>
 8013322:	4603      	mov	r3, r0
 8013324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801332c:	2b00      	cmp	r3, #0
 801332e:	d003      	beq.n	8013338 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8013338:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 801333c:	2b00      	cmp	r3, #0
 801333e:	d101      	bne.n	8013344 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8013340:	2300      	movs	r3, #0
 8013342:	e000      	b.n	8013346 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8013344:	2301      	movs	r3, #1
}
 8013346:	4618      	mov	r0, r3
 8013348:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801334c:	46bd      	mov	sp, r7
 801334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013352:	bf00      	nop
 8013354:	58024400 	.word	0x58024400

08013358 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b090      	sub	sp, #64	@ 0x40
 801335c:	af00      	add	r7, sp, #0
 801335e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013366:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801336a:	430b      	orrs	r3, r1
 801336c:	f040 8094 	bne.w	8013498 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013370:	4b9b      	ldr	r3, [pc, #620]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013374:	f003 0307 	and.w	r3, r3, #7
 8013378:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337c:	2b04      	cmp	r3, #4
 801337e:	f200 8087 	bhi.w	8013490 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013382:	a201      	add	r2, pc, #4	@ (adr r2, 8013388 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013388:	0801339d 	.word	0x0801339d
 801338c:	080133c5 	.word	0x080133c5
 8013390:	080133ed 	.word	0x080133ed
 8013394:	08013489 	.word	0x08013489
 8013398:	08013415 	.word	0x08013415
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801339c:	4b90      	ldr	r3, [pc, #576]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133a8:	d108      	bne.n	80133bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80133aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 ff62 	bl	8014278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80133b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133b8:	f000 bc93 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133bc:	2300      	movs	r3, #0
 80133be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133c0:	f000 bc8f 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80133c4:	4b86      	ldr	r3, [pc, #536]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80133cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133d0:	d108      	bne.n	80133e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133d2:	f107 0318 	add.w	r3, r7, #24
 80133d6:	4618      	mov	r0, r3
 80133d8:	f000 fca6 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133e0:	f000 bc7f 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133e4:	2300      	movs	r3, #0
 80133e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133e8:	f000 bc7b 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80133ec:	4b7c      	ldr	r3, [pc, #496]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80133f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133f8:	d108      	bne.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133fa:	f107 030c 	add.w	r3, r7, #12
 80133fe:	4618      	mov	r0, r3
 8013400:	f000 fde6 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013408:	f000 bc6b 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801340c:	2300      	movs	r3, #0
 801340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013410:	f000 bc67 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013414:	4b72      	ldr	r3, [pc, #456]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013418:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801341c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801341e:	4b70      	ldr	r3, [pc, #448]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f003 0304 	and.w	r3, r3, #4
 8013426:	2b04      	cmp	r3, #4
 8013428:	d10c      	bne.n	8013444 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801342a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801342c:	2b00      	cmp	r3, #0
 801342e:	d109      	bne.n	8013444 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013430:	4b6b      	ldr	r3, [pc, #428]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	08db      	lsrs	r3, r3, #3
 8013436:	f003 0303 	and.w	r3, r3, #3
 801343a:	4a6a      	ldr	r2, [pc, #424]	@ (80135e4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801343c:	fa22 f303 	lsr.w	r3, r2, r3
 8013440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013442:	e01f      	b.n	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013444:	4b66      	ldr	r3, [pc, #408]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801344c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013450:	d106      	bne.n	8013460 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8013452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013458:	d102      	bne.n	8013460 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801345a:	4b63      	ldr	r3, [pc, #396]	@ (80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801345c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801345e:	e011      	b.n	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013460:	4b5f      	ldr	r3, [pc, #380]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801346c:	d106      	bne.n	801347c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801346e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013474:	d102      	bne.n	801347c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013476:	4b5d      	ldr	r3, [pc, #372]	@ (80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801347a:	e003      	b.n	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801347c:	2300      	movs	r3, #0
 801347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013480:	f000 bc2f 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013484:	f000 bc2d 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013488:	4b59      	ldr	r3, [pc, #356]	@ (80135f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801348c:	f000 bc29 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013490:	2300      	movs	r3, #0
 8013492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013494:	f000 bc25 	b.w	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013498:	e9d7 2300 	ldrd	r2, r3, [r7]
 801349c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80134a0:	430b      	orrs	r3, r1
 80134a2:	f040 80a7 	bne.w	80135f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80134a6:	4b4e      	ldr	r3, [pc, #312]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80134ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80134b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80134b6:	d054      	beq.n	8013562 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80134b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80134be:	f200 808b 	bhi.w	80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80134c8:	f000 8083 	beq.w	80135d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80134cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80134d2:	f200 8081 	bhi.w	80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80134dc:	d02f      	beq.n	801353e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80134de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80134e4:	d878      	bhi.n	80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d004      	beq.n	80134f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80134ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80134f2:	d012      	beq.n	801351a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80134f4:	e070      	b.n	80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80134f6:	4b3a      	ldr	r3, [pc, #232]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013502:	d107      	bne.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013508:	4618      	mov	r0, r3
 801350a:	f000 feb5 	bl	8014278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013512:	e3e6      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013518:	e3e3      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801351a:	4b31      	ldr	r3, [pc, #196]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013526:	d107      	bne.n	8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013528:	f107 0318 	add.w	r3, r7, #24
 801352c:	4618      	mov	r0, r3
 801352e:	f000 fbfb 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013536:	e3d4      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013538:	2300      	movs	r3, #0
 801353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801353c:	e3d1      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801353e:	4b28      	ldr	r3, [pc, #160]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801354a:	d107      	bne.n	801355c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801354c:	f107 030c 	add.w	r3, r7, #12
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fd3d 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801355a:	e3c2      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801355c:	2300      	movs	r3, #0
 801355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013560:	e3bf      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013562:	4b1f      	ldr	r3, [pc, #124]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801356a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801356c:	4b1c      	ldr	r3, [pc, #112]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f003 0304 	and.w	r3, r3, #4
 8013574:	2b04      	cmp	r3, #4
 8013576:	d10c      	bne.n	8013592 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801357a:	2b00      	cmp	r3, #0
 801357c:	d109      	bne.n	8013592 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801357e:	4b18      	ldr	r3, [pc, #96]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	08db      	lsrs	r3, r3, #3
 8013584:	f003 0303 	and.w	r3, r3, #3
 8013588:	4a16      	ldr	r2, [pc, #88]	@ (80135e4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801358a:	fa22 f303 	lsr.w	r3, r2, r3
 801358e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013590:	e01e      	b.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013592:	4b13      	ldr	r3, [pc, #76]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801359a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801359e:	d106      	bne.n	80135ae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80135a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80135a6:	d102      	bne.n	80135ae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80135a8:	4b0f      	ldr	r3, [pc, #60]	@ (80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80135aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135ac:	e010      	b.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80135ae:	4b0c      	ldr	r3, [pc, #48]	@ (80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135ba:	d106      	bne.n	80135ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80135bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135c2:	d102      	bne.n	80135ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80135c4:	4b09      	ldr	r3, [pc, #36]	@ (80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80135c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135c8:	e002      	b.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80135ce:	e388      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135d0:	e387      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80135d2:	4b07      	ldr	r3, [pc, #28]	@ (80135f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80135d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135d6:	e384      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80135d8:	2300      	movs	r3, #0
 80135da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135dc:	e381      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135de:	bf00      	nop
 80135e0:	58024400 	.word	0x58024400
 80135e4:	03d09000 	.word	0x03d09000
 80135e8:	003d0900 	.word	0x003d0900
 80135ec:	016e3600 	.word	0x016e3600
 80135f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80135f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135f8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80135fc:	430b      	orrs	r3, r1
 80135fe:	f040 809c 	bne.w	801373a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8013602:	4b9e      	ldr	r3, [pc, #632]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013606:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801360a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013612:	d054      	beq.n	80136be <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8013614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013616:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801361a:	f200 808b 	bhi.w	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013624:	f000 8083 	beq.w	801372e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8013628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801362a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801362e:	f200 8081 	bhi.w	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013634:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013638:	d02f      	beq.n	801369a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801363c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013640:	d878      	bhi.n	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013644:	2b00      	cmp	r3, #0
 8013646:	d004      	beq.n	8013652 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801364a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801364e:	d012      	beq.n	8013676 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8013650:	e070      	b.n	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013652:	4b8a      	ldr	r3, [pc, #552]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801365a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801365e:	d107      	bne.n	8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013664:	4618      	mov	r0, r3
 8013666:	f000 fe07 	bl	8014278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801366e:	e338      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013670:	2300      	movs	r3, #0
 8013672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013674:	e335      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013676:	4b81      	ldr	r3, [pc, #516]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801367e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013682:	d107      	bne.n	8013694 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013684:	f107 0318 	add.w	r3, r7, #24
 8013688:	4618      	mov	r0, r3
 801368a:	f000 fb4d 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013692:	e326      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013694:	2300      	movs	r3, #0
 8013696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013698:	e323      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801369a:	4b78      	ldr	r3, [pc, #480]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80136a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136a6:	d107      	bne.n	80136b8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136a8:	f107 030c 	add.w	r3, r7, #12
 80136ac:	4618      	mov	r0, r3
 80136ae:	f000 fc8f 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136b6:	e314      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136b8:	2300      	movs	r3, #0
 80136ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136bc:	e311      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80136be:	4b6f      	ldr	r3, [pc, #444]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80136c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80136c8:	4b6c      	ldr	r3, [pc, #432]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f003 0304 	and.w	r3, r3, #4
 80136d0:	2b04      	cmp	r3, #4
 80136d2:	d10c      	bne.n	80136ee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80136d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d109      	bne.n	80136ee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80136da:	4b68      	ldr	r3, [pc, #416]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	08db      	lsrs	r3, r3, #3
 80136e0:	f003 0303 	and.w	r3, r3, #3
 80136e4:	4a66      	ldr	r2, [pc, #408]	@ (8013880 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80136e6:	fa22 f303 	lsr.w	r3, r2, r3
 80136ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136ec:	e01e      	b.n	801372c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80136ee:	4b63      	ldr	r3, [pc, #396]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136fa:	d106      	bne.n	801370a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80136fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013702:	d102      	bne.n	801370a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013704:	4b5f      	ldr	r3, [pc, #380]	@ (8013884 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013708:	e010      	b.n	801372c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801370a:	4b5c      	ldr	r3, [pc, #368]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013716:	d106      	bne.n	8013726 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8013718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801371a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801371e:	d102      	bne.n	8013726 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013720:	4b59      	ldr	r3, [pc, #356]	@ (8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013724:	e002      	b.n	801372c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013726:	2300      	movs	r3, #0
 8013728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801372a:	e2da      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801372c:	e2d9      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801372e:	4b57      	ldr	r3, [pc, #348]	@ (801388c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013732:	e2d6      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013734:	2300      	movs	r3, #0
 8013736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013738:	e2d3      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801373a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801373e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8013742:	430b      	orrs	r3, r1
 8013744:	f040 80a7 	bne.w	8013896 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013748:	4b4c      	ldr	r3, [pc, #304]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801374a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801374c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013750:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013758:	d055      	beq.n	8013806 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013760:	f200 8096 	bhi.w	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801376a:	f000 8084 	beq.w	8013876 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013774:	f200 808c 	bhi.w	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801377a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801377e:	d030      	beq.n	80137e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013786:	f200 8083 	bhi.w	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801378c:	2b00      	cmp	r3, #0
 801378e:	d004      	beq.n	801379a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013796:	d012      	beq.n	80137be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013798:	e07a      	b.n	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801379a:	4b38      	ldr	r3, [pc, #224]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80137a6:	d107      	bne.n	80137b8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80137a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80137ac:	4618      	mov	r0, r3
 80137ae:	f000 fd63 	bl	8014278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80137b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137b6:	e294      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137b8:	2300      	movs	r3, #0
 80137ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137bc:	e291      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80137be:	4b2f      	ldr	r3, [pc, #188]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137ca:	d107      	bne.n	80137dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137cc:	f107 0318 	add.w	r3, r7, #24
 80137d0:	4618      	mov	r0, r3
 80137d2:	f000 faa9 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137da:	e282      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137dc:	2300      	movs	r3, #0
 80137de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137e0:	e27f      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80137e2:	4b26      	ldr	r3, [pc, #152]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137ee:	d107      	bne.n	8013800 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137f0:	f107 030c 	add.w	r3, r7, #12
 80137f4:	4618      	mov	r0, r3
 80137f6:	f000 fbeb 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137fe:	e270      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013800:	2300      	movs	r3, #0
 8013802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013804:	e26d      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013806:	4b1d      	ldr	r3, [pc, #116]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801380a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801380e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013810:	4b1a      	ldr	r3, [pc, #104]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f003 0304 	and.w	r3, r3, #4
 8013818:	2b04      	cmp	r3, #4
 801381a:	d10c      	bne.n	8013836 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801381e:	2b00      	cmp	r3, #0
 8013820:	d109      	bne.n	8013836 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013822:	4b16      	ldr	r3, [pc, #88]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	08db      	lsrs	r3, r3, #3
 8013828:	f003 0303 	and.w	r3, r3, #3
 801382c:	4a14      	ldr	r2, [pc, #80]	@ (8013880 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801382e:	fa22 f303 	lsr.w	r3, r2, r3
 8013832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013834:	e01e      	b.n	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013836:	4b11      	ldr	r3, [pc, #68]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801383e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013842:	d106      	bne.n	8013852 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801384a:	d102      	bne.n	8013852 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801384c:	4b0d      	ldr	r3, [pc, #52]	@ (8013884 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013850:	e010      	b.n	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013852:	4b0a      	ldr	r3, [pc, #40]	@ (801387c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801385a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801385e:	d106      	bne.n	801386e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013866:	d102      	bne.n	801386e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013868:	4b07      	ldr	r3, [pc, #28]	@ (8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801386c:	e002      	b.n	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013872:	e236      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013874:	e235      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013876:	4b05      	ldr	r3, [pc, #20]	@ (801388c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801387a:	e232      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801387c:	58024400 	.word	0x58024400
 8013880:	03d09000 	.word	0x03d09000
 8013884:	003d0900 	.word	0x003d0900
 8013888:	016e3600 	.word	0x016e3600
 801388c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013890:	2300      	movs	r3, #0
 8013892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013894:	e225      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013896:	e9d7 2300 	ldrd	r2, r3, [r7]
 801389a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801389e:	430b      	orrs	r3, r1
 80138a0:	f040 8085 	bne.w	80139ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80138a4:	4b9c      	ldr	r3, [pc, #624]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80138a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138a8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80138ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80138ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80138b4:	d06b      	beq.n	801398e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80138b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80138bc:	d874      	bhi.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80138c4:	d056      	beq.n	8013974 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80138c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80138cc:	d86c      	bhi.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80138d4:	d03b      	beq.n	801394e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80138d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80138dc:	d864      	bhi.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138e4:	d021      	beq.n	801392a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80138e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138ec:	d85c      	bhi.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d004      	beq.n	80138fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80138f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138fa:	d004      	beq.n	8013906 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80138fc:	e054      	b.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80138fe:	f7fe fb5f 	bl	8011fc0 <HAL_RCC_GetPCLK1Freq>
 8013902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013904:	e1ed      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013906:	4b84      	ldr	r3, [pc, #528]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801390e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013912:	d107      	bne.n	8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013914:	f107 0318 	add.w	r3, r7, #24
 8013918:	4618      	mov	r0, r3
 801391a:	f000 fa05 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013922:	e1de      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013924:	2300      	movs	r3, #0
 8013926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013928:	e1db      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801392a:	4b7b      	ldr	r3, [pc, #492]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013936:	d107      	bne.n	8013948 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013938:	f107 030c 	add.w	r3, r7, #12
 801393c:	4618      	mov	r0, r3
 801393e:	f000 fb47 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013946:	e1cc      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013948:	2300      	movs	r3, #0
 801394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801394c:	e1c9      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801394e:	4b72      	ldr	r3, [pc, #456]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f003 0304 	and.w	r3, r3, #4
 8013956:	2b04      	cmp	r3, #4
 8013958:	d109      	bne.n	801396e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801395a:	4b6f      	ldr	r3, [pc, #444]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	08db      	lsrs	r3, r3, #3
 8013960:	f003 0303 	and.w	r3, r3, #3
 8013964:	4a6d      	ldr	r2, [pc, #436]	@ (8013b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013966:	fa22 f303 	lsr.w	r3, r2, r3
 801396a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801396c:	e1b9      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801396e:	2300      	movs	r3, #0
 8013970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013972:	e1b6      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013974:	4b68      	ldr	r3, [pc, #416]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801397c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013980:	d102      	bne.n	8013988 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013982:	4b67      	ldr	r3, [pc, #412]	@ (8013b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013986:	e1ac      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013988:	2300      	movs	r3, #0
 801398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801398c:	e1a9      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801398e:	4b62      	ldr	r3, [pc, #392]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801399a:	d102      	bne.n	80139a2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801399c:	4b61      	ldr	r3, [pc, #388]	@ (8013b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139a0:	e19f      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139a2:	2300      	movs	r3, #0
 80139a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139a6:	e19c      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139ac:	e199      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80139ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139b2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80139b6:	430b      	orrs	r3, r1
 80139b8:	d173      	bne.n	8013aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80139ba:	4b57      	ldr	r3, [pc, #348]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80139be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80139c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80139c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139ca:	d02f      	beq.n	8013a2c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80139cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139d2:	d863      	bhi.n	8013a9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80139d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d004      	beq.n	80139e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80139da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139e0:	d012      	beq.n	8013a08 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80139e2:	e05b      	b.n	8013a9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80139e4:	4b4c      	ldr	r3, [pc, #304]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80139ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139f0:	d107      	bne.n	8013a02 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139f2:	f107 0318 	add.w	r3, r7, #24
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 f996 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a00:	e16f      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a06:	e16c      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a08:	4b43      	ldr	r3, [pc, #268]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a14:	d107      	bne.n	8013a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a16:	f107 030c 	add.w	r3, r7, #12
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f000 fad8 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a24:	e15d      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a26:	2300      	movs	r3, #0
 8013a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a2a:	e15a      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013a34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013a36:	4b38      	ldr	r3, [pc, #224]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f003 0304 	and.w	r3, r3, #4
 8013a3e:	2b04      	cmp	r3, #4
 8013a40:	d10c      	bne.n	8013a5c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d109      	bne.n	8013a5c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a48:	4b33      	ldr	r3, [pc, #204]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	08db      	lsrs	r3, r3, #3
 8013a4e:	f003 0303 	and.w	r3, r3, #3
 8013a52:	4a32      	ldr	r2, [pc, #200]	@ (8013b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013a54:	fa22 f303 	lsr.w	r3, r2, r3
 8013a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a5a:	e01e      	b.n	8013a9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a68:	d106      	bne.n	8013a78 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a70:	d102      	bne.n	8013a78 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013a72:	4b2b      	ldr	r3, [pc, #172]	@ (8013b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a76:	e010      	b.n	8013a9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013a78:	4b27      	ldr	r3, [pc, #156]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a84:	d106      	bne.n	8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a8c:	d102      	bne.n	8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013a8e:	4b25      	ldr	r3, [pc, #148]	@ (8013b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a92:	e002      	b.n	8013a9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013a94:	2300      	movs	r3, #0
 8013a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013a98:	e123      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a9a:	e122      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aa0:	e11f      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013aa6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013aaa:	430b      	orrs	r3, r1
 8013aac:	d13c      	bne.n	8013b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013aae:	4b1a      	ldr	r3, [pc, #104]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013ab6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d004      	beq.n	8013ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ac4:	d012      	beq.n	8013aec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013ac6:	e023      	b.n	8013b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013ac8:	4b13      	ldr	r3, [pc, #76]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013ad4:	d107      	bne.n	8013ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013ada:	4618      	mov	r0, r3
 8013adc:	f000 fbcc 	bl	8014278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ae4:	e0fd      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aea:	e0fa      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013aec:	4b0a      	ldr	r3, [pc, #40]	@ (8013b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013af8:	d107      	bne.n	8013b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013afa:	f107 0318 	add.w	r3, r7, #24
 8013afe:	4618      	mov	r0, r3
 8013b00:	f000 f912 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013b04:	6a3b      	ldr	r3, [r7, #32]
 8013b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b08:	e0eb      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b0e:	e0e8      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b10:	2300      	movs	r3, #0
 8013b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b14:	e0e5      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b16:	bf00      	nop
 8013b18:	58024400 	.word	0x58024400
 8013b1c:	03d09000 	.word	0x03d09000
 8013b20:	003d0900 	.word	0x003d0900
 8013b24:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b2c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013b30:	430b      	orrs	r3, r1
 8013b32:	f040 8085 	bne.w	8013c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013b36:	4b6d      	ldr	r3, [pc, #436]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b3a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b46:	d06b      	beq.n	8013c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b4e:	d874      	bhi.n	8013c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b56:	d056      	beq.n	8013c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b5e:	d86c      	bhi.n	8013c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013b66:	d03b      	beq.n	8013be0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013b6e:	d864      	bhi.n	8013c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b76:	d021      	beq.n	8013bbc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b7e:	d85c      	bhi.n	8013c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d004      	beq.n	8013b90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b8c:	d004      	beq.n	8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013b8e:	e054      	b.n	8013c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013b90:	f000 f8b4 	bl	8013cfc <HAL_RCCEx_GetD3PCLK1Freq>
 8013b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013b96:	e0a4      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b98:	4b54      	ldr	r3, [pc, #336]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013ba4:	d107      	bne.n	8013bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013ba6:	f107 0318 	add.w	r3, r7, #24
 8013baa:	4618      	mov	r0, r3
 8013bac:	f000 f8bc 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bb4:	e095      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bba:	e092      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013bc8:	d107      	bne.n	8013bda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013bca:	f107 030c 	add.w	r3, r7, #12
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f000 f9fe 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bd8:	e083      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bde:	e080      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013be0:	4b42      	ldr	r3, [pc, #264]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f003 0304 	and.w	r3, r3, #4
 8013be8:	2b04      	cmp	r3, #4
 8013bea:	d109      	bne.n	8013c00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013bec:	4b3f      	ldr	r3, [pc, #252]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	08db      	lsrs	r3, r3, #3
 8013bf2:	f003 0303 	and.w	r3, r3, #3
 8013bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8013cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8013bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bfe:	e070      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c00:	2300      	movs	r3, #0
 8013c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c04:	e06d      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013c06:	4b39      	ldr	r3, [pc, #228]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c12:	d102      	bne.n	8013c1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013c14:	4b37      	ldr	r3, [pc, #220]	@ (8013cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c18:	e063      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c1e:	e060      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c20:	4b32      	ldr	r3, [pc, #200]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c2c:	d102      	bne.n	8013c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013c2e:	4b32      	ldr	r3, [pc, #200]	@ (8013cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c32:	e056      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c34:	2300      	movs	r3, #0
 8013c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c38:	e053      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c3e:	e050      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c44:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013c48:	430b      	orrs	r3, r1
 8013c4a:	d148      	bne.n	8013cde <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013c4c:	4b27      	ldr	r3, [pc, #156]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013c54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c5c:	d02a      	beq.n	8013cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c64:	d838      	bhi.n	8013cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d004      	beq.n	8013c76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c72:	d00d      	beq.n	8013c90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013c74:	e030      	b.n	8013cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c76:	4b1d      	ldr	r3, [pc, #116]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c82:	d102      	bne.n	8013c8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013c84:	4b1c      	ldr	r3, [pc, #112]	@ (8013cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c88:	e02b      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c8e:	e028      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013c90:	4b16      	ldr	r3, [pc, #88]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013c9c:	d107      	bne.n	8013cae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 fae8 	bl	8014278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cac:	e019      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cb2:	e016      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8013cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013cc0:	d107      	bne.n	8013cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013cc2:	f107 0318 	add.w	r3, r7, #24
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f000 f82e 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013ccc:	69fb      	ldr	r3, [r7, #28]
 8013cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cd0:	e007      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cd6:	e004      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cdc:	e001      	b.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3740      	adds	r7, #64	@ 0x40
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	58024400 	.word	0x58024400
 8013cf0:	03d09000 	.word	0x03d09000
 8013cf4:	003d0900 	.word	0x003d0900
 8013cf8:	016e3600 	.word	0x016e3600

08013cfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013d00:	f7fe f92e 	bl	8011f60 <HAL_RCC_GetHCLKFreq>
 8013d04:	4602      	mov	r2, r0
 8013d06:	4b06      	ldr	r3, [pc, #24]	@ (8013d20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013d08:	6a1b      	ldr	r3, [r3, #32]
 8013d0a:	091b      	lsrs	r3, r3, #4
 8013d0c:	f003 0307 	and.w	r3, r3, #7
 8013d10:	4904      	ldr	r1, [pc, #16]	@ (8013d24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013d12:	5ccb      	ldrb	r3, [r1, r3]
 8013d14:	f003 031f 	and.w	r3, r3, #31
 8013d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	58024400 	.word	0x58024400
 8013d24:	0801eb5c 	.word	0x0801eb5c

08013d28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b089      	sub	sp, #36	@ 0x24
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013d30:	4ba1      	ldr	r3, [pc, #644]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d34:	f003 0303 	and.w	r3, r3, #3
 8013d38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013d3a:	4b9f      	ldr	r3, [pc, #636]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d3e:	0b1b      	lsrs	r3, r3, #12
 8013d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013d46:	4b9c      	ldr	r3, [pc, #624]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d4a:	091b      	lsrs	r3, r3, #4
 8013d4c:	f003 0301 	and.w	r3, r3, #1
 8013d50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013d52:	4b99      	ldr	r3, [pc, #612]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d56:	08db      	lsrs	r3, r3, #3
 8013d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d5c:	693a      	ldr	r2, [r7, #16]
 8013d5e:	fb02 f303 	mul.w	r3, r2, r3
 8013d62:	ee07 3a90 	vmov	s15, r3
 8013d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f000 8111 	beq.w	8013f98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	2b02      	cmp	r3, #2
 8013d7a:	f000 8083 	beq.w	8013e84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013d7e:	69bb      	ldr	r3, [r7, #24]
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	f200 80a1 	bhi.w	8013ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d003      	beq.n	8013d94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d056      	beq.n	8013e40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013d92:	e099      	b.n	8013ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013d94:	4b88      	ldr	r3, [pc, #544]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f003 0320 	and.w	r3, r3, #32
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d02d      	beq.n	8013dfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013da0:	4b85      	ldr	r3, [pc, #532]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	08db      	lsrs	r3, r3, #3
 8013da6:	f003 0303 	and.w	r3, r3, #3
 8013daa:	4a84      	ldr	r2, [pc, #528]	@ (8013fbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013dac:	fa22 f303 	lsr.w	r3, r2, r3
 8013db0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	ee07 3a90 	vmov	s15, r3
 8013db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	ee07 3a90 	vmov	s15, r3
 8013dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dca:	4b7b      	ldr	r3, [pc, #492]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dd2:	ee07 3a90 	vmov	s15, r3
 8013dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013df6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013dfa:	e087      	b.n	8013f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	ee07 3a90 	vmov	s15, r3
 8013e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e16:	ee07 3a90 	vmov	s15, r3
 8013e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e3e:	e065      	b.n	8013f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	ee07 3a90 	vmov	s15, r3
 8013e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e52:	4b59      	ldr	r3, [pc, #356]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e5a:	ee07 3a90 	vmov	s15, r3
 8013e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e82:	e043      	b.n	8013f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	ee07 3a90 	vmov	s15, r3
 8013e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e96:	4b48      	ldr	r3, [pc, #288]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e9e:	ee07 3a90 	vmov	s15, r3
 8013ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eaa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ec6:	e021      	b.n	8013f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	ee07 3a90 	vmov	s15, r3
 8013ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eda:	4b37      	ldr	r3, [pc, #220]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ee2:	ee07 3a90 	vmov	s15, r3
 8013ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f10:	0a5b      	lsrs	r3, r3, #9
 8013f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f16:	ee07 3a90 	vmov	s15, r3
 8013f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f32:	ee17 2a90 	vmov	r2, s15
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f3e:	0c1b      	lsrs	r3, r3, #16
 8013f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f44:	ee07 3a90 	vmov	s15, r3
 8013f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f60:	ee17 2a90 	vmov	r2, s15
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013f68:	4b13      	ldr	r3, [pc, #76]	@ (8013fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f6c:	0e1b      	lsrs	r3, r3, #24
 8013f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f72:	ee07 3a90 	vmov	s15, r3
 8013f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f8e:	ee17 2a90 	vmov	r2, s15
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013f96:	e008      	b.n	8013faa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	609a      	str	r2, [r3, #8]
}
 8013faa:	bf00      	nop
 8013fac:	3724      	adds	r7, #36	@ 0x24
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	58024400 	.word	0x58024400
 8013fbc:	03d09000 	.word	0x03d09000
 8013fc0:	46000000 	.word	0x46000000
 8013fc4:	4c742400 	.word	0x4c742400
 8013fc8:	4a742400 	.word	0x4a742400
 8013fcc:	4bb71b00 	.word	0x4bb71b00

08013fd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b089      	sub	sp, #36	@ 0x24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013fd8:	4ba1      	ldr	r3, [pc, #644]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fdc:	f003 0303 	and.w	r3, r3, #3
 8013fe0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013fe2:	4b9f      	ldr	r3, [pc, #636]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fe6:	0d1b      	lsrs	r3, r3, #20
 8013fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013fec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013fee:	4b9c      	ldr	r3, [pc, #624]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ff2:	0a1b      	lsrs	r3, r3, #8
 8013ff4:	f003 0301 	and.w	r3, r3, #1
 8013ff8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013ffa:	4b99      	ldr	r3, [pc, #612]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ffe:	08db      	lsrs	r3, r3, #3
 8014000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014004:	693a      	ldr	r2, [r7, #16]
 8014006:	fb02 f303 	mul.w	r3, r2, r3
 801400a:	ee07 3a90 	vmov	s15, r3
 801400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014012:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	2b00      	cmp	r3, #0
 801401a:	f000 8111 	beq.w	8014240 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	2b02      	cmp	r3, #2
 8014022:	f000 8083 	beq.w	801412c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	2b02      	cmp	r3, #2
 801402a:	f200 80a1 	bhi.w	8014170 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801402e:	69bb      	ldr	r3, [r7, #24]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d003      	beq.n	801403c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	2b01      	cmp	r3, #1
 8014038:	d056      	beq.n	80140e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801403a:	e099      	b.n	8014170 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801403c:	4b88      	ldr	r3, [pc, #544]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	f003 0320 	and.w	r3, r3, #32
 8014044:	2b00      	cmp	r3, #0
 8014046:	d02d      	beq.n	80140a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014048:	4b85      	ldr	r3, [pc, #532]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	08db      	lsrs	r3, r3, #3
 801404e:	f003 0303 	and.w	r3, r3, #3
 8014052:	4a84      	ldr	r2, [pc, #528]	@ (8014264 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8014054:	fa22 f303 	lsr.w	r3, r2, r3
 8014058:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	ee07 3a90 	vmov	s15, r3
 8014060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	ee07 3a90 	vmov	s15, r3
 801406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801406e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014072:	4b7b      	ldr	r3, [pc, #492]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801407a:	ee07 3a90 	vmov	s15, r3
 801407e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014082:	ed97 6a03 	vldr	s12, [r7, #12]
 8014086:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801408a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801408e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801409e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80140a2:	e087      	b.n	80141b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	ee07 3a90 	vmov	s15, r3
 80140aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801426c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80140b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140b6:	4b6a      	ldr	r3, [pc, #424]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140be:	ee07 3a90 	vmov	s15, r3
 80140c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80140ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80140ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140e6:	e065      	b.n	80141b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	ee07 3a90 	vmov	s15, r3
 80140ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80140f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140fa:	4b59      	ldr	r3, [pc, #356]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014102:	ee07 3a90 	vmov	s15, r3
 8014106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801410a:	ed97 6a03 	vldr	s12, [r7, #12]
 801410e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801411a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801411e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801412a:	e043      	b.n	80141b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	ee07 3a90 	vmov	s15, r3
 8014132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014136:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014274 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801413a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801413e:	4b48      	ldr	r3, [pc, #288]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014146:	ee07 3a90 	vmov	s15, r3
 801414a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801414e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014152:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801415a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801415e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014166:	ee67 7a27 	vmul.f32	s15, s14, s15
 801416a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801416e:	e021      	b.n	80141b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	ee07 3a90 	vmov	s15, r3
 8014176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801417a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801417e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014182:	4b37      	ldr	r3, [pc, #220]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801418a:	ee07 3a90 	vmov	s15, r3
 801418e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014192:	ed97 6a03 	vldr	s12, [r7, #12]
 8014196:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801419a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801419e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80141b4:	4b2a      	ldr	r3, [pc, #168]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141b8:	0a5b      	lsrs	r3, r3, #9
 80141ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141be:	ee07 3a90 	vmov	s15, r3
 80141c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80141d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141da:	ee17 2a90 	vmov	r2, s15
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80141e2:	4b1f      	ldr	r3, [pc, #124]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141e6:	0c1b      	lsrs	r3, r3, #16
 80141e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141ec:	ee07 3a90 	vmov	s15, r3
 80141f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8014200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014208:	ee17 2a90 	vmov	r2, s15
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8014210:	4b13      	ldr	r3, [pc, #76]	@ (8014260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014214:	0e1b      	lsrs	r3, r3, #24
 8014216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801421a:	ee07 3a90 	vmov	s15, r3
 801421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014226:	ee37 7a87 	vadd.f32	s14, s15, s14
 801422a:	edd7 6a07 	vldr	s13, [r7, #28]
 801422e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014236:	ee17 2a90 	vmov	r2, s15
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801423e:	e008      	b.n	8014252 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2200      	movs	r2, #0
 8014244:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2200      	movs	r2, #0
 801424a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2200      	movs	r2, #0
 8014250:	609a      	str	r2, [r3, #8]
}
 8014252:	bf00      	nop
 8014254:	3724      	adds	r7, #36	@ 0x24
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr
 801425e:	bf00      	nop
 8014260:	58024400 	.word	0x58024400
 8014264:	03d09000 	.word	0x03d09000
 8014268:	46000000 	.word	0x46000000
 801426c:	4c742400 	.word	0x4c742400
 8014270:	4a742400 	.word	0x4a742400
 8014274:	4bb71b00 	.word	0x4bb71b00

08014278 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014278:	b480      	push	{r7}
 801427a:	b089      	sub	sp, #36	@ 0x24
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014280:	4ba0      	ldr	r3, [pc, #640]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014284:	f003 0303 	and.w	r3, r3, #3
 8014288:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801428a:	4b9e      	ldr	r3, [pc, #632]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801428e:	091b      	lsrs	r3, r3, #4
 8014290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014294:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014296:	4b9b      	ldr	r3, [pc, #620]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80142a0:	4b98      	ldr	r3, [pc, #608]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142a4:	08db      	lsrs	r3, r3, #3
 80142a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142aa:	693a      	ldr	r2, [r7, #16]
 80142ac:	fb02 f303 	mul.w	r3, r2, r3
 80142b0:	ee07 3a90 	vmov	s15, r3
 80142b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	f000 8111 	beq.w	80144e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	f000 8083 	beq.w	80143d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	2b02      	cmp	r3, #2
 80142d0:	f200 80a1 	bhi.w	8014416 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80142d4:	69bb      	ldr	r3, [r7, #24]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d003      	beq.n	80142e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d056      	beq.n	801438e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80142e0:	e099      	b.n	8014416 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142e2:	4b88      	ldr	r3, [pc, #544]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f003 0320 	and.w	r3, r3, #32
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d02d      	beq.n	801434a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80142ee:	4b85      	ldr	r3, [pc, #532]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	08db      	lsrs	r3, r3, #3
 80142f4:	f003 0303 	and.w	r3, r3, #3
 80142f8:	4a83      	ldr	r2, [pc, #524]	@ (8014508 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80142fa:	fa22 f303 	lsr.w	r3, r2, r3
 80142fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	ee07 3a90 	vmov	s15, r3
 8014306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	ee07 3a90 	vmov	s15, r3
 8014310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014318:	4b7a      	ldr	r3, [pc, #488]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014320:	ee07 3a90 	vmov	s15, r3
 8014324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014328:	ed97 6a03 	vldr	s12, [r7, #12]
 801432c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801450c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801433c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014344:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014348:	e087      	b.n	801445a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	ee07 3a90 	vmov	s15, r3
 8014350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014354:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8014510 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801435c:	4b69      	ldr	r3, [pc, #420]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014364:	ee07 3a90 	vmov	s15, r3
 8014368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801436c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014370:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801450c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801437c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801438c:	e065      	b.n	801445a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	ee07 3a90 	vmov	s15, r3
 8014394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014398:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8014514 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801439c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143a0:	4b58      	ldr	r3, [pc, #352]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143a8:	ee07 3a90 	vmov	s15, r3
 80143ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80143b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801450c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80143d0:	e043      	b.n	801445a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	ee07 3a90 	vmov	s15, r3
 80143d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8014518 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80143e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143e4:	4b47      	ldr	r3, [pc, #284]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ec:	ee07 3a90 	vmov	s15, r3
 80143f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80143f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801450c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801440c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014410:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014414:	e021      	b.n	801445a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	ee07 3a90 	vmov	s15, r3
 801441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014420:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8014510 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014428:	4b36      	ldr	r3, [pc, #216]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801442c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014430:	ee07 3a90 	vmov	s15, r3
 8014434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014438:	ed97 6a03 	vldr	s12, [r7, #12]
 801443c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801450c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801444c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014454:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014458:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801445a:	4b2a      	ldr	r3, [pc, #168]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801445e:	0a5b      	lsrs	r3, r3, #9
 8014460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014464:	ee07 3a90 	vmov	s15, r3
 8014468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801446c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014474:	edd7 6a07 	vldr	s13, [r7, #28]
 8014478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801447c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014480:	ee17 2a90 	vmov	r2, s15
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014488:	4b1e      	ldr	r3, [pc, #120]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801448c:	0c1b      	lsrs	r3, r3, #16
 801448e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014492:	ee07 3a90 	vmov	s15, r3
 8014496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801449a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801449e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80144a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144ae:	ee17 2a90 	vmov	r2, s15
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80144b6:	4b13      	ldr	r3, [pc, #76]	@ (8014504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144ba:	0e1b      	lsrs	r3, r3, #24
 80144bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144c0:	ee07 3a90 	vmov	s15, r3
 80144c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80144cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80144d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144dc:	ee17 2a90 	vmov	r2, s15
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80144e4:	e008      	b.n	80144f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2200      	movs	r2, #0
 80144f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2200      	movs	r2, #0
 80144f6:	609a      	str	r2, [r3, #8]
}
 80144f8:	bf00      	nop
 80144fa:	3724      	adds	r7, #36	@ 0x24
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	58024400 	.word	0x58024400
 8014508:	03d09000 	.word	0x03d09000
 801450c:	46000000 	.word	0x46000000
 8014510:	4c742400 	.word	0x4c742400
 8014514:	4a742400 	.word	0x4a742400
 8014518:	4bb71b00 	.word	0x4bb71b00

0801451c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014526:	2300      	movs	r3, #0
 8014528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801452a:	4b53      	ldr	r3, [pc, #332]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 801452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801452e:	f003 0303 	and.w	r3, r3, #3
 8014532:	2b03      	cmp	r3, #3
 8014534:	d101      	bne.n	801453a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014536:	2301      	movs	r3, #1
 8014538:	e099      	b.n	801466e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801453a:	4b4f      	ldr	r3, [pc, #316]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	4a4e      	ldr	r2, [pc, #312]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014540:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014546:	f7f4 ffcd 	bl	80094e4 <HAL_GetTick>
 801454a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801454c:	e008      	b.n	8014560 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801454e:	f7f4 ffc9 	bl	80094e4 <HAL_GetTick>
 8014552:	4602      	mov	r2, r0
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	2b02      	cmp	r3, #2
 801455a:	d901      	bls.n	8014560 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801455c:	2303      	movs	r3, #3
 801455e:	e086      	b.n	801466e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014560:	4b45      	ldr	r3, [pc, #276]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014568:	2b00      	cmp	r3, #0
 801456a:	d1f0      	bne.n	801454e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801456c:	4b42      	ldr	r3, [pc, #264]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 801456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014570:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	031b      	lsls	r3, r3, #12
 801457a:	493f      	ldr	r1, [pc, #252]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 801457c:	4313      	orrs	r3, r2
 801457e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	3b01      	subs	r3, #1
 8014586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	689b      	ldr	r3, [r3, #8]
 801458e:	3b01      	subs	r3, #1
 8014590:	025b      	lsls	r3, r3, #9
 8014592:	b29b      	uxth	r3, r3
 8014594:	431a      	orrs	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	68db      	ldr	r3, [r3, #12]
 801459a:	3b01      	subs	r3, #1
 801459c:	041b      	lsls	r3, r3, #16
 801459e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80145a2:	431a      	orrs	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	691b      	ldr	r3, [r3, #16]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	061b      	lsls	r3, r3, #24
 80145ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80145b0:	4931      	ldr	r1, [pc, #196]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145b2:	4313      	orrs	r3, r2
 80145b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80145b6:	4b30      	ldr	r3, [pc, #192]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	695b      	ldr	r3, [r3, #20]
 80145c2:	492d      	ldr	r1, [pc, #180]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145c4:	4313      	orrs	r3, r2
 80145c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80145c8:	4b2b      	ldr	r3, [pc, #172]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145cc:	f023 0220 	bic.w	r2, r3, #32
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	699b      	ldr	r3, [r3, #24]
 80145d4:	4928      	ldr	r1, [pc, #160]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145d6:	4313      	orrs	r3, r2
 80145d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80145da:	4b27      	ldr	r3, [pc, #156]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145de:	4a26      	ldr	r2, [pc, #152]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145e0:	f023 0310 	bic.w	r3, r3, #16
 80145e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80145e6:	4b24      	ldr	r3, [pc, #144]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80145ea:	4b24      	ldr	r3, [pc, #144]	@ (801467c <RCCEx_PLL2_Config+0x160>)
 80145ec:	4013      	ands	r3, r2
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	69d2      	ldr	r2, [r2, #28]
 80145f2:	00d2      	lsls	r2, r2, #3
 80145f4:	4920      	ldr	r1, [pc, #128]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145f6:	4313      	orrs	r3, r2
 80145f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80145fa:	4b1f      	ldr	r3, [pc, #124]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 80145fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145fe:	4a1e      	ldr	r2, [pc, #120]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014600:	f043 0310 	orr.w	r3, r3, #16
 8014604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d106      	bne.n	801461a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801460c:	4b1a      	ldr	r3, [pc, #104]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 801460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014610:	4a19      	ldr	r2, [pc, #100]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014612:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014618:	e00f      	b.n	801463a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	2b01      	cmp	r3, #1
 801461e:	d106      	bne.n	801462e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014620:	4b15      	ldr	r3, [pc, #84]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014624:	4a14      	ldr	r2, [pc, #80]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801462a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801462c:	e005      	b.n	801463a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801462e:	4b12      	ldr	r3, [pc, #72]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014632:	4a11      	ldr	r2, [pc, #68]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014634:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014638:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801463a:	4b0f      	ldr	r3, [pc, #60]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4a0e      	ldr	r2, [pc, #56]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014640:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014646:	f7f4 ff4d 	bl	80094e4 <HAL_GetTick>
 801464a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801464c:	e008      	b.n	8014660 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801464e:	f7f4 ff49 	bl	80094e4 <HAL_GetTick>
 8014652:	4602      	mov	r2, r0
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	1ad3      	subs	r3, r2, r3
 8014658:	2b02      	cmp	r3, #2
 801465a:	d901      	bls.n	8014660 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801465c:	2303      	movs	r3, #3
 801465e:	e006      	b.n	801466e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014660:	4b05      	ldr	r3, [pc, #20]	@ (8014678 <RCCEx_PLL2_Config+0x15c>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014668:	2b00      	cmp	r3, #0
 801466a:	d0f0      	beq.n	801464e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801466c:	7bfb      	ldrb	r3, [r7, #15]
}
 801466e:	4618      	mov	r0, r3
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	58024400 	.word	0x58024400
 801467c:	ffff0007 	.word	0xffff0007

08014680 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801468a:	2300      	movs	r3, #0
 801468c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801468e:	4b53      	ldr	r3, [pc, #332]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014692:	f003 0303 	and.w	r3, r3, #3
 8014696:	2b03      	cmp	r3, #3
 8014698:	d101      	bne.n	801469e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801469a:	2301      	movs	r3, #1
 801469c:	e099      	b.n	80147d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801469e:	4b4f      	ldr	r3, [pc, #316]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	4a4e      	ldr	r2, [pc, #312]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80146a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80146a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146aa:	f7f4 ff1b 	bl	80094e4 <HAL_GetTick>
 80146ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80146b0:	e008      	b.n	80146c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80146b2:	f7f4 ff17 	bl	80094e4 <HAL_GetTick>
 80146b6:	4602      	mov	r2, r0
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	2b02      	cmp	r3, #2
 80146be:	d901      	bls.n	80146c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80146c0:	2303      	movs	r3, #3
 80146c2:	e086      	b.n	80147d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80146c4:	4b45      	ldr	r3, [pc, #276]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1f0      	bne.n	80146b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80146d0:	4b42      	ldr	r3, [pc, #264]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80146d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	051b      	lsls	r3, r3, #20
 80146de:	493f      	ldr	r1, [pc, #252]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80146e0:	4313      	orrs	r3, r2
 80146e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	685b      	ldr	r3, [r3, #4]
 80146e8:	3b01      	subs	r3, #1
 80146ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	689b      	ldr	r3, [r3, #8]
 80146f2:	3b01      	subs	r3, #1
 80146f4:	025b      	lsls	r3, r3, #9
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	431a      	orrs	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	68db      	ldr	r3, [r3, #12]
 80146fe:	3b01      	subs	r3, #1
 8014700:	041b      	lsls	r3, r3, #16
 8014702:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014706:	431a      	orrs	r2, r3
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	691b      	ldr	r3, [r3, #16]
 801470c:	3b01      	subs	r3, #1
 801470e:	061b      	lsls	r3, r3, #24
 8014710:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014714:	4931      	ldr	r1, [pc, #196]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014716:	4313      	orrs	r3, r2
 8014718:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801471a:	4b30      	ldr	r3, [pc, #192]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 801471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801471e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	695b      	ldr	r3, [r3, #20]
 8014726:	492d      	ldr	r1, [pc, #180]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014728:	4313      	orrs	r3, r2
 801472a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801472c:	4b2b      	ldr	r3, [pc, #172]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 801472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014730:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	699b      	ldr	r3, [r3, #24]
 8014738:	4928      	ldr	r1, [pc, #160]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 801473a:	4313      	orrs	r3, r2
 801473c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801473e:	4b27      	ldr	r3, [pc, #156]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014742:	4a26      	ldr	r2, [pc, #152]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801474a:	4b24      	ldr	r3, [pc, #144]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 801474c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801474e:	4b24      	ldr	r3, [pc, #144]	@ (80147e0 <RCCEx_PLL3_Config+0x160>)
 8014750:	4013      	ands	r3, r2
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	69d2      	ldr	r2, [r2, #28]
 8014756:	00d2      	lsls	r2, r2, #3
 8014758:	4920      	ldr	r1, [pc, #128]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 801475a:	4313      	orrs	r3, r2
 801475c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801475e:	4b1f      	ldr	r3, [pc, #124]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014762:	4a1e      	ldr	r2, [pc, #120]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d106      	bne.n	801477e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014770:	4b1a      	ldr	r3, [pc, #104]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014774:	4a19      	ldr	r2, [pc, #100]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014776:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801477a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801477c:	e00f      	b.n	801479e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d106      	bne.n	8014792 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014784:	4b15      	ldr	r3, [pc, #84]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014788:	4a14      	ldr	r2, [pc, #80]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 801478a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801478e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014790:	e005      	b.n	801479e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014792:	4b12      	ldr	r3, [pc, #72]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014796:	4a11      	ldr	r2, [pc, #68]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 8014798:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801479c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801479e:	4b0f      	ldr	r3, [pc, #60]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	4a0e      	ldr	r2, [pc, #56]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80147a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80147a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80147aa:	f7f4 fe9b 	bl	80094e4 <HAL_GetTick>
 80147ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80147b0:	e008      	b.n	80147c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80147b2:	f7f4 fe97 	bl	80094e4 <HAL_GetTick>
 80147b6:	4602      	mov	r2, r0
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	1ad3      	subs	r3, r2, r3
 80147bc:	2b02      	cmp	r3, #2
 80147be:	d901      	bls.n	80147c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80147c0:	2303      	movs	r3, #3
 80147c2:	e006      	b.n	80147d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80147c4:	4b05      	ldr	r3, [pc, #20]	@ (80147dc <RCCEx_PLL3_Config+0x15c>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d0f0      	beq.n	80147b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80147d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	58024400 	.word	0x58024400
 80147e0:	ffff0007 	.word	0xffff0007

080147e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d101      	bne.n	80147f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80147f2:	2301      	movs	r3, #1
 80147f4:	e10f      	b.n	8014a16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2200      	movs	r2, #0
 80147fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4a87      	ldr	r2, [pc, #540]	@ (8014a20 <HAL_SPI_Init+0x23c>)
 8014802:	4293      	cmp	r3, r2
 8014804:	d00f      	beq.n	8014826 <HAL_SPI_Init+0x42>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	4a86      	ldr	r2, [pc, #536]	@ (8014a24 <HAL_SPI_Init+0x240>)
 801480c:	4293      	cmp	r3, r2
 801480e:	d00a      	beq.n	8014826 <HAL_SPI_Init+0x42>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4a84      	ldr	r2, [pc, #528]	@ (8014a28 <HAL_SPI_Init+0x244>)
 8014816:	4293      	cmp	r3, r2
 8014818:	d005      	beq.n	8014826 <HAL_SPI_Init+0x42>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	2b0f      	cmp	r3, #15
 8014820:	d901      	bls.n	8014826 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8014822:	2301      	movs	r3, #1
 8014824:	e0f7      	b.n	8014a16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f001 fd22 	bl	8016270 <SPI_GetPacketSize>
 801482c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	4a7b      	ldr	r2, [pc, #492]	@ (8014a20 <HAL_SPI_Init+0x23c>)
 8014834:	4293      	cmp	r3, r2
 8014836:	d00c      	beq.n	8014852 <HAL_SPI_Init+0x6e>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4a79      	ldr	r2, [pc, #484]	@ (8014a24 <HAL_SPI_Init+0x240>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d007      	beq.n	8014852 <HAL_SPI_Init+0x6e>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4a78      	ldr	r2, [pc, #480]	@ (8014a28 <HAL_SPI_Init+0x244>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d002      	beq.n	8014852 <HAL_SPI_Init+0x6e>
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2b08      	cmp	r3, #8
 8014850:	d811      	bhi.n	8014876 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014856:	4a72      	ldr	r2, [pc, #456]	@ (8014a20 <HAL_SPI_Init+0x23c>)
 8014858:	4293      	cmp	r3, r2
 801485a:	d009      	beq.n	8014870 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	4a70      	ldr	r2, [pc, #448]	@ (8014a24 <HAL_SPI_Init+0x240>)
 8014862:	4293      	cmp	r3, r2
 8014864:	d004      	beq.n	8014870 <HAL_SPI_Init+0x8c>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a6f      	ldr	r2, [pc, #444]	@ (8014a28 <HAL_SPI_Init+0x244>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d104      	bne.n	801487a <HAL_SPI_Init+0x96>
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2b10      	cmp	r3, #16
 8014874:	d901      	bls.n	801487a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014876:	2301      	movs	r3, #1
 8014878:	e0cd      	b.n	8014a16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014880:	b2db      	uxtb	r3, r3
 8014882:	2b00      	cmp	r3, #0
 8014884:	d106      	bne.n	8014894 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	2200      	movs	r2, #0
 801488a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f7f3 fb7c 	bl	8007f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2202      	movs	r2, #2
 8014898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f022 0201 	bic.w	r2, r2, #1
 80148aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	689b      	ldr	r3, [r3, #8]
 80148b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80148b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	699b      	ldr	r3, [r3, #24]
 80148bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80148c0:	d119      	bne.n	80148f6 <HAL_SPI_Init+0x112>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80148ca:	d103      	bne.n	80148d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d008      	beq.n	80148e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d10c      	bne.n	80148f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80148e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148e4:	d107      	bne.n	80148f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	681a      	ldr	r2, [r3, #0]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80148f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d00f      	beq.n	8014922 <HAL_SPI_Init+0x13e>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	68db      	ldr	r3, [r3, #12]
 8014906:	2b06      	cmp	r3, #6
 8014908:	d90b      	bls.n	8014922 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	430a      	orrs	r2, r1
 801491e:	601a      	str	r2, [r3, #0]
 8014920:	e007      	b.n	8014932 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014930:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	69da      	ldr	r2, [r3, #28]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801493a:	431a      	orrs	r2, r3
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	431a      	orrs	r2, r3
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014944:	ea42 0103 	orr.w	r1, r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	68da      	ldr	r2, [r3, #12]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	430a      	orrs	r2, r1
 8014952:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801495c:	431a      	orrs	r2, r3
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014962:	431a      	orrs	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	699b      	ldr	r3, [r3, #24]
 8014968:	431a      	orrs	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	691b      	ldr	r3, [r3, #16]
 801496e:	431a      	orrs	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	695b      	ldr	r3, [r3, #20]
 8014974:	431a      	orrs	r2, r3
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6a1b      	ldr	r3, [r3, #32]
 801497a:	431a      	orrs	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	685b      	ldr	r3, [r3, #4]
 8014980:	431a      	orrs	r2, r3
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014986:	431a      	orrs	r2, r3
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	689b      	ldr	r3, [r3, #8]
 801498c:	431a      	orrs	r2, r3
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014992:	ea42 0103 	orr.w	r1, r2, r3
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	430a      	orrs	r2, r1
 80149a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d113      	bne.n	80149d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	689b      	ldr	r3, [r3, #8]
 80149b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80149bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	689b      	ldr	r3, [r3, #8]
 80149c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80149d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	f022 0201 	bic.w	r2, r2, #1
 80149e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	685b      	ldr	r3, [r3, #4]
 80149e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00a      	beq.n	8014a04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	430a      	orrs	r2, r1
 8014a02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2200      	movs	r2, #0
 8014a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2201      	movs	r2, #1
 8014a10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014a14:	2300      	movs	r3, #0
}
 8014a16:	4618      	mov	r0, r3
 8014a18:	3710      	adds	r7, #16
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	40013000 	.word	0x40013000
 8014a24:	40003800 	.word	0x40003800
 8014a28:	40003c00 	.word	0x40003c00

08014a2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b088      	sub	sp, #32
 8014a30:	af02      	add	r7, sp, #8
 8014a32:	60f8      	str	r0, [r7, #12]
 8014a34:	60b9      	str	r1, [r7, #8]
 8014a36:	603b      	str	r3, [r7, #0]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	3320      	adds	r3, #32
 8014a42:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a44:	f7f4 fd4e 	bl	80094e4 <HAL_GetTick>
 8014a48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d001      	beq.n	8014a5a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014a56:	2302      	movs	r3, #2
 8014a58:	e1d1      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d002      	beq.n	8014a66 <HAL_SPI_Transmit+0x3a>
 8014a60:	88fb      	ldrh	r3, [r7, #6]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d101      	bne.n	8014a6a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014a66:	2301      	movs	r3, #1
 8014a68:	e1c9      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d101      	bne.n	8014a78 <HAL_SPI_Transmit+0x4c>
 8014a74:	2302      	movs	r3, #2
 8014a76:	e1c2      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	2203      	movs	r2, #3
 8014a84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	68ba      	ldr	r2, [r7, #8]
 8014a94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	88fa      	ldrh	r2, [r7, #6]
 8014a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	88fa      	ldrh	r2, [r7, #6]
 8014aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	689b      	ldr	r3, [r3, #8]
 8014acc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014ad0:	d108      	bne.n	8014ae4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	681a      	ldr	r2, [r3, #0]
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	e009      	b.n	8014af8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014af6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	685a      	ldr	r2, [r3, #4]
 8014afe:	4b96      	ldr	r3, [pc, #600]	@ (8014d58 <HAL_SPI_Transmit+0x32c>)
 8014b00:	4013      	ands	r3, r2
 8014b02:	88f9      	ldrh	r1, [r7, #6]
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	6812      	ldr	r2, [r2, #0]
 8014b08:	430b      	orrs	r3, r1
 8014b0a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	f042 0201 	orr.w	r2, r2, #1
 8014b1a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014b24:	d107      	bne.n	8014b36 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	68db      	ldr	r3, [r3, #12]
 8014b3a:	2b0f      	cmp	r3, #15
 8014b3c:	d947      	bls.n	8014bce <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014b3e:	e03f      	b.n	8014bc0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	695b      	ldr	r3, [r3, #20]
 8014b46:	f003 0302 	and.w	r3, r3, #2
 8014b4a:	2b02      	cmp	r3, #2
 8014b4c:	d114      	bne.n	8014b78 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	6812      	ldr	r2, [r2, #0]
 8014b58:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014b5e:	1d1a      	adds	r2, r3, #4
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	3b01      	subs	r3, #1
 8014b6e:	b29a      	uxth	r2, r3
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014b76:	e023      	b.n	8014bc0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b78:	f7f4 fcb4 	bl	80094e4 <HAL_GetTick>
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	683a      	ldr	r2, [r7, #0]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d803      	bhi.n	8014b90 <HAL_SPI_Transmit+0x164>
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b8e:	d102      	bne.n	8014b96 <HAL_SPI_Transmit+0x16a>
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d114      	bne.n	8014bc0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f001 fa9c 	bl	80160d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2201      	movs	r2, #1
 8014bb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014bbc:	2303      	movs	r3, #3
 8014bbe:	e11e      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d1b9      	bne.n	8014b40 <HAL_SPI_Transmit+0x114>
 8014bcc:	e0f1      	b.n	8014db2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	68db      	ldr	r3, [r3, #12]
 8014bd2:	2b07      	cmp	r3, #7
 8014bd4:	f240 80e6 	bls.w	8014da4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014bd8:	e05d      	b.n	8014c96 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	695b      	ldr	r3, [r3, #20]
 8014be0:	f003 0302 	and.w	r3, r3, #2
 8014be4:	2b02      	cmp	r3, #2
 8014be6:	d132      	bne.n	8014c4e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d918      	bls.n	8014c26 <HAL_SPI_Transmit+0x1fa>
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d014      	beq.n	8014c26 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	6812      	ldr	r2, [r2, #0]
 8014c06:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c0c:	1d1a      	adds	r2, r3, #4
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	3b02      	subs	r3, #2
 8014c1c:	b29a      	uxth	r2, r3
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c24:	e037      	b.n	8014c96 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c2a:	881a      	ldrh	r2, [r3, #0]
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c34:	1c9a      	adds	r2, r3, #2
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	3b01      	subs	r3, #1
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c4c:	e023      	b.n	8014c96 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c4e:	f7f4 fc49 	bl	80094e4 <HAL_GetTick>
 8014c52:	4602      	mov	r2, r0
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	1ad3      	subs	r3, r2, r3
 8014c58:	683a      	ldr	r2, [r7, #0]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d803      	bhi.n	8014c66 <HAL_SPI_Transmit+0x23a>
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c64:	d102      	bne.n	8014c6c <HAL_SPI_Transmit+0x240>
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d114      	bne.n	8014c96 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c6c:	68f8      	ldr	r0, [r7, #12]
 8014c6e:	f001 fa31 	bl	80160d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2201      	movs	r2, #1
 8014c86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014c92:	2303      	movs	r3, #3
 8014c94:	e0b3      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d19b      	bne.n	8014bda <HAL_SPI_Transmit+0x1ae>
 8014ca2:	e086      	b.n	8014db2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	695b      	ldr	r3, [r3, #20]
 8014caa:	f003 0302 	and.w	r3, r3, #2
 8014cae:	2b02      	cmp	r3, #2
 8014cb0:	d154      	bne.n	8014d5c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	2b03      	cmp	r3, #3
 8014cbc:	d918      	bls.n	8014cf0 <HAL_SPI_Transmit+0x2c4>
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cc2:	2b40      	cmp	r3, #64	@ 0x40
 8014cc4:	d914      	bls.n	8014cf0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	6812      	ldr	r2, [r2, #0]
 8014cd0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cd6:	1d1a      	adds	r2, r3, #4
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	3b04      	subs	r3, #4
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cee:	e059      	b.n	8014da4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d917      	bls.n	8014d2c <HAL_SPI_Transmit+0x300>
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d013      	beq.n	8014d2c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d08:	881a      	ldrh	r2, [r3, #0]
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d12:	1c9a      	adds	r2, r3, #2
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d1e:	b29b      	uxth	r3, r3
 8014d20:	3b02      	subs	r3, #2
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d2a:	e03b      	b.n	8014da4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	3320      	adds	r3, #32
 8014d36:	7812      	ldrb	r2, [r2, #0]
 8014d38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d3e:	1c5a      	adds	r2, r3, #1
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d56:	e025      	b.n	8014da4 <HAL_SPI_Transmit+0x378>
 8014d58:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014d5c:	f7f4 fbc2 	bl	80094e4 <HAL_GetTick>
 8014d60:	4602      	mov	r2, r0
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	1ad3      	subs	r3, r2, r3
 8014d66:	683a      	ldr	r2, [r7, #0]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d803      	bhi.n	8014d74 <HAL_SPI_Transmit+0x348>
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d72:	d102      	bne.n	8014d7a <HAL_SPI_Transmit+0x34e>
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d114      	bne.n	8014da4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	f001 f9aa 	bl	80160d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	2201      	movs	r2, #1
 8014d94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014da0:	2303      	movs	r3, #3
 8014da2:	e02c      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014daa:	b29b      	uxth	r3, r3
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f47f af79 	bne.w	8014ca4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	2200      	movs	r2, #0
 8014dba:	2108      	movs	r1, #8
 8014dbc:	68f8      	ldr	r0, [r7, #12]
 8014dbe:	f001 fa29 	bl	8016214 <SPI_WaitOnFlagUntilTimeout>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d007      	beq.n	8014dd8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014dce:	f043 0220 	orr.w	r2, r3, #32
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	f001 f97b 	bl	80160d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2201      	movs	r2, #1
 8014de2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2200      	movs	r2, #0
 8014dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d001      	beq.n	8014dfc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	e000      	b.n	8014dfe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014dfc:	2300      	movs	r3, #0
  }
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3718      	adds	r7, #24
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop

08014e08 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b088      	sub	sp, #32
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	603b      	str	r3, [r7, #0]
 8014e14:	4613      	mov	r3, r2
 8014e16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e1c:	095b      	lsrs	r3, r3, #5
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	3301      	adds	r3, #1
 8014e22:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	3330      	adds	r3, #48	@ 0x30
 8014e2a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e2c:	f7f4 fb5a 	bl	80094e4 <HAL_GetTick>
 8014e30:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	2b01      	cmp	r3, #1
 8014e3c:	d001      	beq.n	8014e42 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014e3e:	2302      	movs	r3, #2
 8014e40:	e250      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d002      	beq.n	8014e4e <HAL_SPI_Receive+0x46>
 8014e48:	88fb      	ldrh	r3, [r7, #6]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d101      	bne.n	8014e52 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	e248      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014e58:	2b01      	cmp	r3, #1
 8014e5a:	d101      	bne.n	8014e60 <HAL_SPI_Receive+0x58>
 8014e5c:	2302      	movs	r3, #2
 8014e5e:	e241      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2201      	movs	r2, #1
 8014e64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2204      	movs	r2, #4
 8014e6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2200      	movs	r2, #0
 8014e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	68ba      	ldr	r2, [r7, #8]
 8014e7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	88fa      	ldrh	r2, [r7, #6]
 8014e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	88fa      	ldrh	r2, [r7, #6]
 8014e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2200      	movs	r2, #0
 8014e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2200      	movs	r2, #0
 8014e98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	2200      	movs	r2, #0
 8014eae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	689b      	ldr	r3, [r3, #8]
 8014eb4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014eb8:	d108      	bne.n	8014ecc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	681a      	ldr	r2, [r3, #0]
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014ec8:	601a      	str	r2, [r3, #0]
 8014eca:	e009      	b.n	8014ee0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014ede:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	685a      	ldr	r2, [r3, #4]
 8014ee6:	4b95      	ldr	r3, [pc, #596]	@ (801513c <HAL_SPI_Receive+0x334>)
 8014ee8:	4013      	ands	r3, r2
 8014eea:	88f9      	ldrh	r1, [r7, #6]
 8014eec:	68fa      	ldr	r2, [r7, #12]
 8014eee:	6812      	ldr	r2, [r2, #0]
 8014ef0:	430b      	orrs	r3, r1
 8014ef2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	681a      	ldr	r2, [r3, #0]
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	f042 0201 	orr.w	r2, r2, #1
 8014f02:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014f0c:	d107      	bne.n	8014f1e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014f1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	68db      	ldr	r3, [r3, #12]
 8014f22:	2b0f      	cmp	r3, #15
 8014f24:	d96c      	bls.n	8015000 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014f26:	e064      	b.n	8014ff2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	695b      	ldr	r3, [r3, #20]
 8014f2e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	695b      	ldr	r3, [r3, #20]
 8014f36:	f003 0301 	and.w	r3, r3, #1
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d114      	bne.n	8014f68 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f48:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f4e:	1d1a      	adds	r2, r3, #4
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	3b01      	subs	r3, #1
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f66:	e044      	b.n	8014ff2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	8bfa      	ldrh	r2, [r7, #30]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d919      	bls.n	8014faa <HAL_SPI_Receive+0x1a2>
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d014      	beq.n	8014faa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f8a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f90:	1d1a      	adds	r2, r3, #4
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	b29a      	uxth	r2, r3
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014fa8:	e023      	b.n	8014ff2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014faa:	f7f4 fa9b 	bl	80094e4 <HAL_GetTick>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	1ad3      	subs	r3, r2, r3
 8014fb4:	683a      	ldr	r2, [r7, #0]
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d803      	bhi.n	8014fc2 <HAL_SPI_Receive+0x1ba>
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fc0:	d102      	bne.n	8014fc8 <HAL_SPI_Receive+0x1c0>
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d114      	bne.n	8014ff2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f001 f883 	bl	80160d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014fd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014fee:	2303      	movs	r3, #3
 8014ff0:	e178      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d194      	bne.n	8014f28 <HAL_SPI_Receive+0x120>
 8014ffe:	e15e      	b.n	80152be <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	2b07      	cmp	r3, #7
 8015006:	f240 8153 	bls.w	80152b0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801500a:	e08f      	b.n	801512c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	695b      	ldr	r3, [r3, #20]
 8015012:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	695b      	ldr	r3, [r3, #20]
 801501a:	f003 0301 	and.w	r3, r3, #1
 801501e:	2b01      	cmp	r3, #1
 8015020:	d114      	bne.n	801504c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015026:	69ba      	ldr	r2, [r7, #24]
 8015028:	8812      	ldrh	r2, [r2, #0]
 801502a:	b292      	uxth	r2, r2
 801502c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015032:	1c9a      	adds	r2, r3, #2
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801503e:	b29b      	uxth	r3, r3
 8015040:	3b01      	subs	r3, #1
 8015042:	b29a      	uxth	r2, r3
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801504a:	e06f      	b.n	801512c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015052:	b29b      	uxth	r3, r3
 8015054:	8bfa      	ldrh	r2, [r7, #30]
 8015056:	429a      	cmp	r2, r3
 8015058:	d924      	bls.n	80150a4 <HAL_SPI_Receive+0x29c>
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015060:	2b00      	cmp	r3, #0
 8015062:	d01f      	beq.n	80150a4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015068:	69ba      	ldr	r2, [r7, #24]
 801506a:	8812      	ldrh	r2, [r2, #0]
 801506c:	b292      	uxth	r2, r2
 801506e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015074:	1c9a      	adds	r2, r3, #2
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801507e:	69ba      	ldr	r2, [r7, #24]
 8015080:	8812      	ldrh	r2, [r2, #0]
 8015082:	b292      	uxth	r2, r2
 8015084:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801508a:	1c9a      	adds	r2, r3, #2
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015096:	b29b      	uxth	r3, r3
 8015098:	3b02      	subs	r3, #2
 801509a:	b29a      	uxth	r2, r3
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150a2:	e043      	b.n	801512c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d119      	bne.n	80150e4 <HAL_SPI_Receive+0x2dc>
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d014      	beq.n	80150e4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150be:	69ba      	ldr	r2, [r7, #24]
 80150c0:	8812      	ldrh	r2, [r2, #0]
 80150c2:	b292      	uxth	r2, r2
 80150c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150ca:	1c9a      	adds	r2, r3, #2
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	3b01      	subs	r3, #1
 80150da:	b29a      	uxth	r2, r3
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150e2:	e023      	b.n	801512c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80150e4:	f7f4 f9fe 	bl	80094e4 <HAL_GetTick>
 80150e8:	4602      	mov	r2, r0
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	1ad3      	subs	r3, r2, r3
 80150ee:	683a      	ldr	r2, [r7, #0]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d803      	bhi.n	80150fc <HAL_SPI_Receive+0x2f4>
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150fa:	d102      	bne.n	8015102 <HAL_SPI_Receive+0x2fa>
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d114      	bne.n	801512c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f000 ffe6 	bl	80160d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801510e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	2201      	movs	r2, #1
 801511c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2200      	movs	r2, #0
 8015124:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015128:	2303      	movs	r3, #3
 801512a:	e0db      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015132:	b29b      	uxth	r3, r3
 8015134:	2b00      	cmp	r3, #0
 8015136:	f47f af69 	bne.w	801500c <HAL_SPI_Receive+0x204>
 801513a:	e0c0      	b.n	80152be <HAL_SPI_Receive+0x4b6>
 801513c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	695b      	ldr	r3, [r3, #20]
 8015146:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	695b      	ldr	r3, [r3, #20]
 801514e:	f003 0301 	and.w	r3, r3, #1
 8015152:	2b01      	cmp	r3, #1
 8015154:	d117      	bne.n	8015186 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015162:	7812      	ldrb	r2, [r2, #0]
 8015164:	b2d2      	uxtb	r2, r2
 8015166:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801516c:	1c5a      	adds	r2, r3, #1
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015178:	b29b      	uxth	r3, r3
 801517a:	3b01      	subs	r3, #1
 801517c:	b29a      	uxth	r2, r3
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015184:	e094      	b.n	80152b0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801518c:	b29b      	uxth	r3, r3
 801518e:	8bfa      	ldrh	r2, [r7, #30]
 8015190:	429a      	cmp	r2, r3
 8015192:	d946      	bls.n	8015222 <HAL_SPI_Receive+0x41a>
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801519a:	2b00      	cmp	r3, #0
 801519c:	d041      	beq.n	8015222 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151aa:	7812      	ldrb	r2, [r2, #0]
 80151ac:	b2d2      	uxtb	r2, r2
 80151ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151b4:	1c5a      	adds	r2, r3, #1
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151c6:	7812      	ldrb	r2, [r2, #0]
 80151c8:	b2d2      	uxtb	r2, r2
 80151ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151d0:	1c5a      	adds	r2, r3, #1
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151e2:	7812      	ldrb	r2, [r2, #0]
 80151e4:	b2d2      	uxtb	r2, r2
 80151e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151ec:	1c5a      	adds	r2, r3, #1
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151fe:	7812      	ldrb	r2, [r2, #0]
 8015200:	b2d2      	uxtb	r2, r2
 8015202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015208:	1c5a      	adds	r2, r3, #1
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015214:	b29b      	uxth	r3, r3
 8015216:	3b04      	subs	r3, #4
 8015218:	b29a      	uxth	r2, r3
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015220:	e046      	b.n	80152b0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015228:	b29b      	uxth	r3, r3
 801522a:	2b03      	cmp	r3, #3
 801522c:	d81c      	bhi.n	8015268 <HAL_SPI_Receive+0x460>
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015234:	2b00      	cmp	r3, #0
 8015236:	d017      	beq.n	8015268 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015244:	7812      	ldrb	r2, [r2, #0]
 8015246:	b2d2      	uxtb	r2, r2
 8015248:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801524e:	1c5a      	adds	r2, r3, #1
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801525a:	b29b      	uxth	r3, r3
 801525c:	3b01      	subs	r3, #1
 801525e:	b29a      	uxth	r2, r3
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015266:	e023      	b.n	80152b0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015268:	f7f4 f93c 	bl	80094e4 <HAL_GetTick>
 801526c:	4602      	mov	r2, r0
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	683a      	ldr	r2, [r7, #0]
 8015274:	429a      	cmp	r2, r3
 8015276:	d803      	bhi.n	8015280 <HAL_SPI_Receive+0x478>
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801527e:	d102      	bne.n	8015286 <HAL_SPI_Receive+0x47e>
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d114      	bne.n	80152b0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f000 ff24 	bl	80160d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015292:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2201      	movs	r2, #1
 80152a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80152ac:	2303      	movs	r3, #3
 80152ae:	e019      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	f47f af41 	bne.w	8015140 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80152be:	68f8      	ldr	r0, [r7, #12]
 80152c0:	f000 ff08 	bl	80160d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2201      	movs	r2, #1
 80152c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2200      	movs	r2, #0
 80152d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d001      	beq.n	80152e2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80152de:	2301      	movs	r3, #1
 80152e0:	e000      	b.n	80152e4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80152e2:	2300      	movs	r3, #0
  }
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3720      	adds	r7, #32
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b08e      	sub	sp, #56	@ 0x38
 80152f0:	af02      	add	r7, sp, #8
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	607a      	str	r2, [r7, #4]
 80152f8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	3320      	adds	r3, #32
 8015300:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	3330      	adds	r3, #48	@ 0x30
 8015308:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801530e:	095b      	lsrs	r3, r3, #5
 8015310:	b29b      	uxth	r3, r3
 8015312:	3301      	adds	r3, #1
 8015314:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015316:	f7f4 f8e5 	bl	80094e4 <HAL_GetTick>
 801531a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 801531c:	887b      	ldrh	r3, [r7, #2]
 801531e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8015320:	887b      	ldrh	r3, [r7, #2]
 8015322:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801532a:	b2db      	uxtb	r3, r3
 801532c:	2b01      	cmp	r3, #1
 801532e:	d001      	beq.n	8015334 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8015330:	2302      	movs	r3, #2
 8015332:	e310      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d005      	beq.n	8015346 <HAL_SPI_TransmitReceive+0x5a>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d002      	beq.n	8015346 <HAL_SPI_TransmitReceive+0x5a>
 8015340:	887b      	ldrh	r3, [r7, #2]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d101      	bne.n	801534a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8015346:	2301      	movs	r3, #1
 8015348:	e305      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015350:	2b01      	cmp	r3, #1
 8015352:	d101      	bne.n	8015358 <HAL_SPI_TransmitReceive+0x6c>
 8015354:	2302      	movs	r3, #2
 8015356:	e2fe      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	2201      	movs	r2, #1
 801535c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2205      	movs	r2, #5
 8015364:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2200      	movs	r2, #0
 801536c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	887a      	ldrh	r2, [r7, #2]
 801537a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	887a      	ldrh	r2, [r7, #2]
 8015382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	887a      	ldrh	r2, [r7, #2]
 8015390:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	887a      	ldrh	r2, [r7, #2]
 8015398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2200      	movs	r2, #0
 80153a6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	68da      	ldr	r2, [r3, #12]
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80153b6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	4a70      	ldr	r2, [pc, #448]	@ (8015580 <HAL_SPI_TransmitReceive+0x294>)
 80153be:	4293      	cmp	r3, r2
 80153c0:	d009      	beq.n	80153d6 <HAL_SPI_TransmitReceive+0xea>
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	4a6f      	ldr	r2, [pc, #444]	@ (8015584 <HAL_SPI_TransmitReceive+0x298>)
 80153c8:	4293      	cmp	r3, r2
 80153ca:	d004      	beq.n	80153d6 <HAL_SPI_TransmitReceive+0xea>
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	4a6d      	ldr	r2, [pc, #436]	@ (8015588 <HAL_SPI_TransmitReceive+0x29c>)
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d102      	bne.n	80153dc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80153d6:	2310      	movs	r3, #16
 80153d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80153da:	e001      	b.n	80153e0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80153dc:	2308      	movs	r3, #8
 80153de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	685a      	ldr	r2, [r3, #4]
 80153e6:	4b69      	ldr	r3, [pc, #420]	@ (801558c <HAL_SPI_TransmitReceive+0x2a0>)
 80153e8:	4013      	ands	r3, r2
 80153ea:	8879      	ldrh	r1, [r7, #2]
 80153ec:	68fa      	ldr	r2, [r7, #12]
 80153ee:	6812      	ldr	r2, [r2, #0]
 80153f0:	430b      	orrs	r3, r1
 80153f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f042 0201 	orr.w	r2, r2, #1
 8015402:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801540c:	d107      	bne.n	801541e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	681a      	ldr	r2, [r3, #0]
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801541c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	68db      	ldr	r3, [r3, #12]
 8015422:	2b0f      	cmp	r3, #15
 8015424:	f240 80a2 	bls.w	801556c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8015428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542a:	089b      	lsrs	r3, r3, #2
 801542c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801542e:	e094      	b.n	801555a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	695b      	ldr	r3, [r3, #20]
 8015436:	f003 0302 	and.w	r3, r3, #2
 801543a:	2b02      	cmp	r3, #2
 801543c:	d120      	bne.n	8015480 <HAL_SPI_TransmitReceive+0x194>
 801543e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015440:	2b00      	cmp	r3, #0
 8015442:	d01d      	beq.n	8015480 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015444:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015446:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801544c:	429a      	cmp	r2, r3
 801544e:	d217      	bcs.n	8015480 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	6812      	ldr	r2, [r2, #0]
 801545a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015460:	1d1a      	adds	r2, r3, #4
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801546c:	b29b      	uxth	r3, r3
 801546e:	3b01      	subs	r3, #1
 8015470:	b29a      	uxth	r2, r3
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801547e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	695b      	ldr	r3, [r3, #20]
 8015486:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015488:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801548a:	2b00      	cmp	r3, #0
 801548c:	d065      	beq.n	801555a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	695b      	ldr	r3, [r3, #20]
 8015494:	f003 0301 	and.w	r3, r3, #1
 8015498:	2b01      	cmp	r3, #1
 801549a:	d118      	bne.n	80154ce <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80154a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154ac:	1d1a      	adds	r2, r3, #4
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	3b01      	subs	r3, #1
 80154bc:	b29a      	uxth	r2, r3
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80154cc:	e045      	b.n	801555a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80154ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154d0:	8bfb      	ldrh	r3, [r7, #30]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d21d      	bcs.n	8015512 <HAL_SPI_TransmitReceive+0x226>
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d018      	beq.n	8015512 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80154ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154f0:	1d1a      	adds	r2, r3, #4
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	3b01      	subs	r3, #1
 8015500:	b29a      	uxth	r2, r3
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801550e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015510:	e023      	b.n	801555a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015512:	f7f3 ffe7 	bl	80094e4 <HAL_GetTick>
 8015516:	4602      	mov	r2, r0
 8015518:	69bb      	ldr	r3, [r7, #24]
 801551a:	1ad3      	subs	r3, r2, r3
 801551c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801551e:	429a      	cmp	r2, r3
 8015520:	d803      	bhi.n	801552a <HAL_SPI_TransmitReceive+0x23e>
 8015522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015528:	d102      	bne.n	8015530 <HAL_SPI_TransmitReceive+0x244>
 801552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801552c:	2b00      	cmp	r3, #0
 801552e:	d114      	bne.n	801555a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	f000 fdcf 	bl	80160d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801553c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	2201      	movs	r2, #1
 801554a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2200      	movs	r2, #0
 8015552:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015556:	2303      	movs	r3, #3
 8015558:	e1fd      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801555a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801555c:	2b00      	cmp	r3, #0
 801555e:	f47f af67 	bne.w	8015430 <HAL_SPI_TransmitReceive+0x144>
 8015562:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015564:	2b00      	cmp	r3, #0
 8015566:	f47f af63 	bne.w	8015430 <HAL_SPI_TransmitReceive+0x144>
 801556a:	e1ce      	b.n	801590a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	2b07      	cmp	r3, #7
 8015572:	f240 81c2 	bls.w	80158fa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8015576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015578:	085b      	lsrs	r3, r3, #1
 801557a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801557c:	e0c9      	b.n	8015712 <HAL_SPI_TransmitReceive+0x426>
 801557e:	bf00      	nop
 8015580:	40013000 	.word	0x40013000
 8015584:	40003800 	.word	0x40003800
 8015588:	40003c00 	.word	0x40003c00
 801558c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	695b      	ldr	r3, [r3, #20]
 8015596:	f003 0302 	and.w	r3, r3, #2
 801559a:	2b02      	cmp	r3, #2
 801559c:	d11f      	bne.n	80155de <HAL_SPI_TransmitReceive+0x2f2>
 801559e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d01c      	beq.n	80155de <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80155a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80155a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80155a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80155ac:	429a      	cmp	r2, r3
 80155ae:	d216      	bcs.n	80155de <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80155b4:	881a      	ldrh	r2, [r3, #0]
 80155b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155b8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80155be:	1c9a      	adds	r2, r3, #2
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	3b01      	subs	r3, #1
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80155e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f000 8092 	beq.w	8015712 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	695b      	ldr	r3, [r3, #20]
 80155f4:	f003 0301 	and.w	r3, r3, #1
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	d118      	bne.n	801562e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015600:	6a3a      	ldr	r2, [r7, #32]
 8015602:	8812      	ldrh	r2, [r2, #0]
 8015604:	b292      	uxth	r2, r2
 8015606:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801560c:	1c9a      	adds	r2, r3, #2
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015618:	b29b      	uxth	r3, r3
 801561a:	3b01      	subs	r3, #1
 801561c:	b29a      	uxth	r2, r3
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801562a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801562c:	e071      	b.n	8015712 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801562e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015630:	8bfb      	ldrh	r3, [r7, #30]
 8015632:	429a      	cmp	r2, r3
 8015634:	d228      	bcs.n	8015688 <HAL_SPI_TransmitReceive+0x39c>
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801563c:	2b00      	cmp	r3, #0
 801563e:	d023      	beq.n	8015688 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015644:	6a3a      	ldr	r2, [r7, #32]
 8015646:	8812      	ldrh	r2, [r2, #0]
 8015648:	b292      	uxth	r2, r2
 801564a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015650:	1c9a      	adds	r2, r3, #2
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801565a:	6a3a      	ldr	r2, [r7, #32]
 801565c:	8812      	ldrh	r2, [r2, #0]
 801565e:	b292      	uxth	r2, r2
 8015660:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015666:	1c9a      	adds	r2, r3, #2
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015672:	b29b      	uxth	r3, r3
 8015674:	3b02      	subs	r3, #2
 8015676:	b29a      	uxth	r2, r3
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015684:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015686:	e044      	b.n	8015712 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015688:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801568a:	2b01      	cmp	r3, #1
 801568c:	d11d      	bne.n	80156ca <HAL_SPI_TransmitReceive+0x3de>
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015694:	2b00      	cmp	r3, #0
 8015696:	d018      	beq.n	80156ca <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801569c:	6a3a      	ldr	r2, [r7, #32]
 801569e:	8812      	ldrh	r2, [r2, #0]
 80156a0:	b292      	uxth	r2, r2
 80156a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156a8:	1c9a      	adds	r2, r3, #2
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	3b01      	subs	r3, #1
 80156b8:	b29a      	uxth	r2, r3
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156c8:	e023      	b.n	8015712 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80156ca:	f7f3 ff0b 	bl	80094e4 <HAL_GetTick>
 80156ce:	4602      	mov	r2, r0
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	1ad3      	subs	r3, r2, r3
 80156d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d803      	bhi.n	80156e2 <HAL_SPI_TransmitReceive+0x3f6>
 80156da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156e0:	d102      	bne.n	80156e8 <HAL_SPI_TransmitReceive+0x3fc>
 80156e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d114      	bne.n	8015712 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80156e8:	68f8      	ldr	r0, [r7, #12]
 80156ea:	f000 fcf3 	bl	80160d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	2201      	movs	r2, #1
 8015702:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2200      	movs	r2, #0
 801570a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801570e:	2303      	movs	r3, #3
 8015710:	e121      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015712:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015714:	2b00      	cmp	r3, #0
 8015716:	f47f af3b 	bne.w	8015590 <HAL_SPI_TransmitReceive+0x2a4>
 801571a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801571c:	2b00      	cmp	r3, #0
 801571e:	f47f af37 	bne.w	8015590 <HAL_SPI_TransmitReceive+0x2a4>
 8015722:	e0f2      	b.n	801590a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	695b      	ldr	r3, [r3, #20]
 801572a:	f003 0302 	and.w	r3, r3, #2
 801572e:	2b02      	cmp	r3, #2
 8015730:	d121      	bne.n	8015776 <HAL_SPI_TransmitReceive+0x48a>
 8015732:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015734:	2b00      	cmp	r3, #0
 8015736:	d01e      	beq.n	8015776 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015738:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801573a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801573e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015740:	429a      	cmp	r2, r3
 8015742:	d218      	bcs.n	8015776 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	3320      	adds	r3, #32
 801574e:	7812      	ldrb	r2, [r2, #0]
 8015750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015756:	1c5a      	adds	r2, r3, #1
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015762:	b29b      	uxth	r3, r3
 8015764:	3b01      	subs	r3, #1
 8015766:	b29a      	uxth	r2, r3
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015774:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	695b      	ldr	r3, [r3, #20]
 801577c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801577e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015780:	2b00      	cmp	r3, #0
 8015782:	f000 80ba 	beq.w	80158fa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	695b      	ldr	r3, [r3, #20]
 801578c:	f003 0301 	and.w	r3, r3, #1
 8015790:	2b01      	cmp	r3, #1
 8015792:	d11b      	bne.n	80157cc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157a0:	7812      	ldrb	r2, [r2, #0]
 80157a2:	b2d2      	uxtb	r2, r2
 80157a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157aa:	1c5a      	adds	r2, r3, #1
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	3b01      	subs	r3, #1
 80157ba:	b29a      	uxth	r2, r3
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80157ca:	e096      	b.n	80158fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80157cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80157ce:	8bfb      	ldrh	r3, [r7, #30]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d24a      	bcs.n	801586a <HAL_SPI_TransmitReceive+0x57e>
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d045      	beq.n	801586a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157ea:	7812      	ldrb	r2, [r2, #0]
 80157ec:	b2d2      	uxtb	r2, r2
 80157ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157f4:	1c5a      	adds	r2, r3, #1
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015806:	7812      	ldrb	r2, [r2, #0]
 8015808:	b2d2      	uxtb	r2, r2
 801580a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015810:	1c5a      	adds	r2, r3, #1
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015822:	7812      	ldrb	r2, [r2, #0]
 8015824:	b2d2      	uxtb	r2, r2
 8015826:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801582c:	1c5a      	adds	r2, r3, #1
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801583e:	7812      	ldrb	r2, [r2, #0]
 8015840:	b2d2      	uxtb	r2, r2
 8015842:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015848:	1c5a      	adds	r2, r3, #1
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015854:	b29b      	uxth	r3, r3
 8015856:	3b04      	subs	r3, #4
 8015858:	b29a      	uxth	r2, r3
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015866:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015868:	e047      	b.n	80158fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801586a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801586c:	2b03      	cmp	r3, #3
 801586e:	d820      	bhi.n	80158b2 <HAL_SPI_TransmitReceive+0x5c6>
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015876:	2b00      	cmp	r3, #0
 8015878:	d01b      	beq.n	80158b2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015886:	7812      	ldrb	r2, [r2, #0]
 8015888:	b2d2      	uxtb	r2, r2
 801588a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015890:	1c5a      	adds	r2, r3, #1
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801589c:	b29b      	uxth	r3, r3
 801589e:	3b01      	subs	r3, #1
 80158a0:	b29a      	uxth	r2, r3
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80158b0:	e023      	b.n	80158fa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80158b2:	f7f3 fe17 	bl	80094e4 <HAL_GetTick>
 80158b6:	4602      	mov	r2, r0
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	1ad3      	subs	r3, r2, r3
 80158bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80158be:	429a      	cmp	r2, r3
 80158c0:	d803      	bhi.n	80158ca <HAL_SPI_TransmitReceive+0x5de>
 80158c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c8:	d102      	bne.n	80158d0 <HAL_SPI_TransmitReceive+0x5e4>
 80158ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d114      	bne.n	80158fa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80158d0:	68f8      	ldr	r0, [r7, #12]
 80158d2:	f000 fbff 	bl	80160d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	2201      	movs	r2, #1
 80158ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2200      	movs	r2, #0
 80158f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80158f6:	2303      	movs	r3, #3
 80158f8:	e02d      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80158fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f47f af11 	bne.w	8015724 <HAL_SPI_TransmitReceive+0x438>
 8015902:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015904:	2b00      	cmp	r3, #0
 8015906:	f47f af0d 	bne.w	8015724 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	9300      	str	r3, [sp, #0]
 801590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015910:	2200      	movs	r2, #0
 8015912:	2108      	movs	r1, #8
 8015914:	68f8      	ldr	r0, [r7, #12]
 8015916:	f000 fc7d 	bl	8016214 <SPI_WaitOnFlagUntilTimeout>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d007      	beq.n	8015930 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015926:	f043 0220 	orr.w	r2, r3, #32
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015930:	68f8      	ldr	r0, [r7, #12]
 8015932:	f000 fbcf 	bl	80160d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2201      	movs	r2, #1
 801593a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2200      	movs	r2, #0
 8015942:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801594c:	2b00      	cmp	r3, #0
 801594e:	d001      	beq.n	8015954 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015950:	2301      	movs	r3, #1
 8015952:	e000      	b.n	8015956 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8015954:	2300      	movs	r3, #0
  }
}
 8015956:	4618      	mov	r0, r3
 8015958:	3730      	adds	r7, #48	@ 0x30
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop

08015960 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	60f8      	str	r0, [r7, #12]
 8015968:	60b9      	str	r1, [r7, #8]
 801596a:	4613      	mov	r3, r2
 801596c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015974:	b2db      	uxtb	r3, r3
 8015976:	2b01      	cmp	r3, #1
 8015978:	d001      	beq.n	801597e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801597a:	2302      	movs	r3, #2
 801597c:	e126      	b.n	8015bcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d002      	beq.n	801598a <HAL_SPI_Transmit_DMA+0x2a>
 8015984:	88fb      	ldrh	r3, [r7, #6]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d101      	bne.n	801598e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801598a:	2301      	movs	r3, #1
 801598c:	e11e      	b.n	8015bcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015994:	2b01      	cmp	r3, #1
 8015996:	d101      	bne.n	801599c <HAL_SPI_Transmit_DMA+0x3c>
 8015998:	2302      	movs	r3, #2
 801599a:	e117      	b.n	8015bcc <HAL_SPI_Transmit_DMA+0x26c>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2201      	movs	r2, #1
 80159a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2203      	movs	r2, #3
 80159a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	2200      	movs	r2, #0
 80159b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	68ba      	ldr	r2, [r7, #8]
 80159b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	88fa      	ldrh	r2, [r7, #6]
 80159be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	88fa      	ldrh	r2, [r7, #6]
 80159c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2200      	movs	r2, #0
 80159ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	2200      	movs	r2, #0
 80159d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2200      	movs	r2, #0
 80159da:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	2200      	movs	r2, #0
 80159e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2200      	movs	r2, #0
 80159e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80159f4:	d108      	bne.n	8015a08 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015a04:	601a      	str	r2, [r3, #0]
 8015a06:	e009      	b.n	8015a1c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015a1a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	2b0f      	cmp	r3, #15
 8015a22:	d905      	bls.n	8015a30 <HAL_SPI_Transmit_DMA+0xd0>
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a28:	699b      	ldr	r3, [r3, #24]
 8015a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a2e:	d10f      	bne.n	8015a50 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015a34:	2b07      	cmp	r3, #7
 8015a36:	d911      	bls.n	8015a5c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a3c:	699b      	ldr	r3, [r3, #24]
 8015a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a42:	d00b      	beq.n	8015a5c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a48:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a4e:	d005      	beq.n	8015a5c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2200      	movs	r2, #0
 8015a54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e0b7      	b.n	8015bcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	68db      	ldr	r3, [r3, #12]
 8015a60:	2b07      	cmp	r3, #7
 8015a62:	d820      	bhi.n	8015aa6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a68:	699b      	ldr	r3, [r3, #24]
 8015a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a6e:	d109      	bne.n	8015a84 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	3301      	adds	r3, #1
 8015a7a:	105b      	asrs	r3, r3, #1
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a88:	699b      	ldr	r3, [r3, #24]
 8015a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a8e:	d11e      	bne.n	8015ace <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	3303      	adds	r3, #3
 8015a9a:	109b      	asrs	r3, r3, #2
 8015a9c:	b29a      	uxth	r2, r3
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015aa4:	e013      	b.n	8015ace <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	2b0f      	cmp	r3, #15
 8015aac:	d80f      	bhi.n	8015ace <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ab2:	699b      	ldr	r3, [r3, #24]
 8015ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ab8:	d109      	bne.n	8015ace <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	105b      	asrs	r3, r3, #1
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ad2:	4a40      	ldr	r2, [pc, #256]	@ (8015bd4 <HAL_SPI_Transmit_DMA+0x274>)
 8015ad4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ada:	4a3f      	ldr	r2, [pc, #252]	@ (8015bd8 <HAL_SPI_Transmit_DMA+0x278>)
 8015adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8015bdc <HAL_SPI_Transmit_DMA+0x27c>)
 8015ae4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aea:	2200      	movs	r2, #0
 8015aec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	689a      	ldr	r2, [r3, #8]
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015afc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015b06:	4619      	mov	r1, r3
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	3320      	adds	r3, #32
 8015b0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b18:	f7f6 f972 	bl	800be00 <HAL_DMA_Start_IT>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d011      	beq.n	8015b46 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b28:	f043 0210 	orr.w	r2, r3, #16
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2201      	movs	r2, #1
 8015b36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015b42:	2301      	movs	r3, #1
 8015b44:	e042      	b.n	8015bcc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b4a:	69db      	ldr	r3, [r3, #28]
 8015b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b50:	d108      	bne.n	8015b64 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	6859      	ldr	r1, [r3, #4]
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	4b20      	ldr	r3, [pc, #128]	@ (8015be0 <HAL_SPI_Transmit_DMA+0x280>)
 8015b5e:	400b      	ands	r3, r1
 8015b60:	6053      	str	r3, [r2, #4]
 8015b62:	e009      	b.n	8015b78 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	685a      	ldr	r2, [r3, #4]
 8015b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8015be0 <HAL_SPI_Transmit_DMA+0x280>)
 8015b6c:	4013      	ands	r3, r2
 8015b6e:	88f9      	ldrh	r1, [r7, #6]
 8015b70:	68fa      	ldr	r2, [r7, #12]
 8015b72:	6812      	ldr	r2, [r2, #0]
 8015b74:	430b      	orrs	r3, r1
 8015b76:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	689a      	ldr	r2, [r3, #8]
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015b86:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	691a      	ldr	r2, [r3, #16]
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015b96:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f042 0201 	orr.w	r2, r2, #1
 8015ba6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015bb0:	d107      	bne.n	8015bc2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	681a      	ldr	r2, [r3, #0]
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015bc0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015bca:	2300      	movs	r3, #0
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3710      	adds	r7, #16
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	0801603f 	.word	0x0801603f
 8015bd8:	08015ff9 	.word	0x08015ff9
 8015bdc:	0801605b 	.word	0x0801605b
 8015be0:	ffff0000 	.word	0xffff0000

08015be4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b08a      	sub	sp, #40	@ 0x28
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	691b      	ldr	r3, [r3, #16]
 8015bf2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	695b      	ldr	r3, [r3, #20]
 8015bfa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015bfc:	6a3a      	ldr	r2, [r7, #32]
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	4013      	ands	r3, r2
 8015c02:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	689b      	ldr	r3, [r3, #8]
 8015c0a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015c16:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	3330      	adds	r3, #48	@ 0x30
 8015c1e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d010      	beq.n	8015c4c <HAL_SPI_IRQHandler+0x68>
 8015c2a:	6a3b      	ldr	r3, [r7, #32]
 8015c2c:	f003 0308 	and.w	r3, r3, #8
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d00b      	beq.n	8015c4c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	699a      	ldr	r2, [r3, #24]
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015c42:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f000 f9cd 	bl	8015fe4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015c4a:	e192      	b.n	8015f72 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015c4c:	69bb      	ldr	r3, [r7, #24]
 8015c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d113      	bne.n	8015c7e <HAL_SPI_IRQHandler+0x9a>
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	f003 0320 	and.w	r3, r3, #32
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d10e      	bne.n	8015c7e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015c60:	69bb      	ldr	r3, [r7, #24]
 8015c62:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d009      	beq.n	8015c7e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	4798      	blx	r3
    handled = 1UL;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d10f      	bne.n	8015ca8 <HAL_SPI_IRQHandler+0xc4>
 8015c88:	69bb      	ldr	r3, [r7, #24]
 8015c8a:	f003 0301 	and.w	r3, r3, #1
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00a      	beq.n	8015ca8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015c92:	69bb      	ldr	r3, [r7, #24]
 8015c94:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d105      	bne.n	8015ca8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	4798      	blx	r3
    handled = 1UL;
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015ca8:	69bb      	ldr	r3, [r7, #24]
 8015caa:	f003 0320 	and.w	r3, r3, #32
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d10f      	bne.n	8015cd2 <HAL_SPI_IRQHandler+0xee>
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	f003 0302 	and.w	r3, r3, #2
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00a      	beq.n	8015cd2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015cbc:	69bb      	ldr	r3, [r7, #24]
 8015cbe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d105      	bne.n	8015cd2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	4798      	blx	r3
    handled = 1UL;
 8015cce:	2301      	movs	r3, #1
 8015cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f040 8147 	bne.w	8015f68 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015cda:	69bb      	ldr	r3, [r7, #24]
 8015cdc:	f003 0308 	and.w	r3, r3, #8
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	f000 808b 	beq.w	8015dfc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	699a      	ldr	r2, [r3, #24]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	f042 0208 	orr.w	r2, r2, #8
 8015cf4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	699a      	ldr	r2, [r3, #24]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	f042 0210 	orr.w	r2, r2, #16
 8015d04:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	699a      	ldr	r2, [r3, #24]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015d14:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	691a      	ldr	r2, [r3, #16]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	f022 0208 	bic.w	r2, r2, #8
 8015d24:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	689b      	ldr	r3, [r3, #8]
 8015d2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d13d      	bne.n	8015db0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015d34:	e036      	b.n	8015da4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	68db      	ldr	r3, [r3, #12]
 8015d3a:	2b0f      	cmp	r3, #15
 8015d3c:	d90b      	bls.n	8015d56 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015d48:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d4e:	1d1a      	adds	r2, r3, #4
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	665a      	str	r2, [r3, #100]	@ 0x64
 8015d54:	e01d      	b.n	8015d92 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	2b07      	cmp	r3, #7
 8015d5c:	d90b      	bls.n	8015d76 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d62:	68fa      	ldr	r2, [r7, #12]
 8015d64:	8812      	ldrh	r2, [r2, #0]
 8015d66:	b292      	uxth	r2, r2
 8015d68:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d6e:	1c9a      	adds	r2, r3, #2
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	665a      	str	r2, [r3, #100]	@ 0x64
 8015d74:	e00d      	b.n	8015d92 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d82:	7812      	ldrb	r2, [r2, #0]
 8015d84:	b2d2      	uxtb	r2, r2
 8015d86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d8c:	1c5a      	adds	r2, r3, #1
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d1c2      	bne.n	8015d36 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f000 f98f 	bl	80160d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	2201      	movs	r2, #1
 8015dba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d003      	beq.n	8015dd0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015dc8:	6878      	ldr	r0, [r7, #4]
 8015dca:	f000 f901 	bl	8015fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015dce:	e0d0      	b.n	8015f72 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015dd0:	7cfb      	ldrb	r3, [r7, #19]
 8015dd2:	2b05      	cmp	r3, #5
 8015dd4:	d103      	bne.n	8015dde <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 f8e6 	bl	8015fa8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015ddc:	e0c6      	b.n	8015f6c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015dde:	7cfb      	ldrb	r3, [r7, #19]
 8015de0:	2b04      	cmp	r3, #4
 8015de2:	d103      	bne.n	8015dec <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f000 f8d5 	bl	8015f94 <HAL_SPI_RxCpltCallback>
    return;
 8015dea:	e0bf      	b.n	8015f6c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015dec:	7cfb      	ldrb	r3, [r7, #19]
 8015dee:	2b03      	cmp	r3, #3
 8015df0:	f040 80bc 	bne.w	8015f6c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f000 f8c3 	bl	8015f80 <HAL_SPI_TxCpltCallback>
    return;
 8015dfa:	e0b7      	b.n	8015f6c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f000 80b5 	beq.w	8015f72 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d00f      	beq.n	8015e32 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e18:	f043 0204 	orr.w	r2, r3, #4
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	699a      	ldr	r2, [r3, #24]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e30:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00f      	beq.n	8015e5c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e42:	f043 0201 	orr.w	r2, r3, #1
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	699a      	ldr	r2, [r3, #24]
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015e5a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015e5c:	69bb      	ldr	r3, [r7, #24]
 8015e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d00f      	beq.n	8015e86 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e6c:	f043 0208 	orr.w	r2, r3, #8
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	699a      	ldr	r2, [r3, #24]
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015e84:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015e86:	69bb      	ldr	r3, [r7, #24]
 8015e88:	f003 0320 	and.w	r3, r3, #32
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00f      	beq.n	8015eb0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	699a      	ldr	r2, [r3, #24]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	f042 0220 	orr.w	r2, r2, #32
 8015eae:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d05a      	beq.n	8015f70 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	681a      	ldr	r2, [r3, #0]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	f022 0201 	bic.w	r2, r2, #1
 8015ec8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	6919      	ldr	r1, [r3, #16]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	4b28      	ldr	r3, [pc, #160]	@ (8015f78 <HAL_SPI_IRQHandler+0x394>)
 8015ed6:	400b      	ands	r3, r1
 8015ed8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015ee0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015ee4:	d138      	bne.n	8015f58 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	689a      	ldr	r2, [r3, #8]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015ef4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d013      	beq.n	8015f26 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f02:	4a1e      	ldr	r2, [pc, #120]	@ (8015f7c <HAL_SPI_IRQHandler+0x398>)
 8015f04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7f6 fd00 	bl	800c910 <HAL_DMA_Abort_IT>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d007      	beq.n	8015f26 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d020      	beq.n	8015f70 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f32:	4a12      	ldr	r2, [pc, #72]	@ (8015f7c <HAL_SPI_IRQHandler+0x398>)
 8015f34:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7f6 fce8 	bl	800c910 <HAL_DMA_Abort_IT>
 8015f40:	4603      	mov	r3, r0
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d014      	beq.n	8015f70 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015f56:	e00b      	b.n	8015f70 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f000 f835 	bl	8015fd0 <HAL_SPI_ErrorCallback>
    return;
 8015f66:	e003      	b.n	8015f70 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015f68:	bf00      	nop
 8015f6a:	e002      	b.n	8015f72 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015f6c:	bf00      	nop
 8015f6e:	e000      	b.n	8015f72 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015f70:	bf00      	nop
  }
}
 8015f72:	3728      	adds	r7, #40	@ 0x28
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	fffffc94 	.word	0xfffffc94
 8015f7c:	080160a1 	.word	0x080160a1

08015f80 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f80:	b480      	push	{r7}
 8015f82:	b083      	sub	sp, #12
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8015f88:	bf00      	nop
 8015f8a:	370c      	adds	r7, #12
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f92:	4770      	bx	lr

08015f94 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f94:	b480      	push	{r7}
 8015f96:	b083      	sub	sp, #12
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015f9c:	bf00      	nop
 8015f9e:	370c      	adds	r7, #12
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b083      	sub	sp, #12
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015fb0:	bf00      	nop
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015fc4:	bf00      	nop
 8015fc6:	370c      	adds	r7, #12
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fce:	4770      	bx	lr

08015fd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015fd8:	bf00      	nop
 8015fda:	370c      	adds	r7, #12
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe2:	4770      	bx	lr

08015fe4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b083      	sub	sp, #12
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015fec:	bf00      	nop
 8015fee:	370c      	adds	r7, #12
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr

08015ff8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016004:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801600c:	b2db      	uxtb	r3, r3
 801600e:	2b07      	cmp	r3, #7
 8016010:	d011      	beq.n	8016036 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016016:	69db      	ldr	r3, [r3, #28]
 8016018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801601c:	d103      	bne.n	8016026 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801601e:	68f8      	ldr	r0, [r7, #12]
 8016020:	f7ff ffae 	bl	8015f80 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8016024:	e007      	b.n	8016036 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	691a      	ldr	r2, [r3, #16]
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f042 0208 	orr.w	r2, r2, #8
 8016034:	611a      	str	r2, [r3, #16]
}
 8016036:	bf00      	nop
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801603e:	b580      	push	{r7, lr}
 8016040:	b084      	sub	sp, #16
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801604a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	f7ff ffb5 	bl	8015fbc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8016052:	bf00      	nop
 8016054:	3710      	adds	r7, #16
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b084      	sub	sp, #16
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016066:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f7f7 fdcf 	bl	800dc0c <HAL_DMA_GetError>
 801606e:	4603      	mov	r3, r0
 8016070:	2b02      	cmp	r3, #2
 8016072:	d011      	beq.n	8016098 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8016074:	68f8      	ldr	r0, [r7, #12]
 8016076:	f000 f82d 	bl	80160d4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016080:	f043 0210 	orr.w	r2, r3, #16
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2201      	movs	r2, #1
 801608e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8016092:	68f8      	ldr	r0, [r7, #12]
 8016094:	f7ff ff9c 	bl	8015fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8016098:	bf00      	nop
 801609a:	3710      	adds	r7, #16
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b084      	sub	sp, #16
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2200      	movs	r2, #0
 80160b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2200      	movs	r2, #0
 80160ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2201      	movs	r2, #1
 80160c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	f7ff ff82 	bl	8015fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80160cc:	bf00      	nop
 80160ce:	3710      	adds	r7, #16
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	695b      	ldr	r3, [r3, #20]
 80160e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	699a      	ldr	r2, [r3, #24]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	f042 0208 	orr.w	r2, r2, #8
 80160f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	699a      	ldr	r2, [r3, #24]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f042 0210 	orr.w	r2, r2, #16
 8016102:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	681a      	ldr	r2, [r3, #0]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	f022 0201 	bic.w	r2, r2, #1
 8016112:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	6919      	ldr	r1, [r3, #16]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	4b3c      	ldr	r3, [pc, #240]	@ (8016210 <SPI_CloseTransfer+0x13c>)
 8016120:	400b      	ands	r3, r1
 8016122:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	689a      	ldr	r2, [r3, #8]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8016132:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801613a:	b2db      	uxtb	r3, r3
 801613c:	2b04      	cmp	r3, #4
 801613e:	d014      	beq.n	801616a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	f003 0320 	and.w	r3, r3, #32
 8016146:	2b00      	cmp	r3, #0
 8016148:	d00f      	beq.n	801616a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016150:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	699a      	ldr	r2, [r3, #24]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f042 0220 	orr.w	r2, r2, #32
 8016168:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016170:	b2db      	uxtb	r3, r3
 8016172:	2b03      	cmp	r3, #3
 8016174:	d014      	beq.n	80161a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00f      	beq.n	80161a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016186:	f043 0204 	orr.w	r2, r3, #4
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	699a      	ldr	r2, [r3, #24]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801619e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d00f      	beq.n	80161ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161b0:	f043 0201 	orr.w	r2, r3, #1
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	699a      	ldr	r2, [r3, #24]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80161c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00f      	beq.n	80161f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161da:	f043 0208 	orr.w	r2, r3, #8
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	699a      	ldr	r2, [r3, #24]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80161f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2200      	movs	r2, #0
 80161f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2200      	movs	r2, #0
 8016200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8016204:	bf00      	nop
 8016206:	3714      	adds	r7, #20
 8016208:	46bd      	mov	sp, r7
 801620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620e:	4770      	bx	lr
 8016210:	fffffc90 	.word	0xfffffc90

08016214 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	603b      	str	r3, [r7, #0]
 8016220:	4613      	mov	r3, r2
 8016222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8016224:	e010      	b.n	8016248 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016226:	f7f3 f95d 	bl	80094e4 <HAL_GetTick>
 801622a:	4602      	mov	r2, r0
 801622c:	69bb      	ldr	r3, [r7, #24]
 801622e:	1ad3      	subs	r3, r2, r3
 8016230:	683a      	ldr	r2, [r7, #0]
 8016232:	429a      	cmp	r2, r3
 8016234:	d803      	bhi.n	801623e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801623c:	d102      	bne.n	8016244 <SPI_WaitOnFlagUntilTimeout+0x30>
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d101      	bne.n	8016248 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8016244:	2303      	movs	r3, #3
 8016246:	e00f      	b.n	8016268 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	695a      	ldr	r2, [r3, #20]
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	4013      	ands	r3, r2
 8016252:	68ba      	ldr	r2, [r7, #8]
 8016254:	429a      	cmp	r2, r3
 8016256:	bf0c      	ite	eq
 8016258:	2301      	moveq	r3, #1
 801625a:	2300      	movne	r3, #0
 801625c:	b2db      	uxtb	r3, r3
 801625e:	461a      	mov	r2, r3
 8016260:	79fb      	ldrb	r3, [r7, #7]
 8016262:	429a      	cmp	r2, r3
 8016264:	d0df      	beq.n	8016226 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8016266:	2300      	movs	r3, #0
}
 8016268:	4618      	mov	r0, r3
 801626a:	3710      	adds	r7, #16
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}

08016270 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8016270:	b480      	push	{r7}
 8016272:	b085      	sub	sp, #20
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801627c:	095b      	lsrs	r3, r3, #5
 801627e:	3301      	adds	r3, #1
 8016280:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	3301      	adds	r3, #1
 8016288:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	3307      	adds	r3, #7
 801628e:	08db      	lsrs	r3, r3, #3
 8016290:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8016292:	68bb      	ldr	r3, [r7, #8]
 8016294:	68fa      	ldr	r2, [r7, #12]
 8016296:	fb02 f303 	mul.w	r3, r2, r3
}
 801629a:	4618      	mov	r0, r3
 801629c:	3714      	adds	r7, #20
 801629e:	46bd      	mov	sp, r7
 80162a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a4:	4770      	bx	lr

080162a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80162a6:	b580      	push	{r7, lr}
 80162a8:	b082      	sub	sp, #8
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80162b4:	2301      	movs	r3, #1
 80162b6:	e049      	b.n	801634c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d106      	bne.n	80162d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f7f2 ff13 	bl	80090f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	2202      	movs	r2, #2
 80162d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	3304      	adds	r3, #4
 80162e2:	4619      	mov	r1, r3
 80162e4:	4610      	mov	r0, r2
 80162e6:	f000 fedb 	bl	80170a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2201      	movs	r2, #1
 80162ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	2201      	movs	r2, #1
 80162f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2201      	movs	r2, #1
 80162fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2201      	movs	r2, #1
 8016306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2201      	movs	r2, #1
 801630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2201      	movs	r2, #1
 8016316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2201      	movs	r2, #1
 801631e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2201      	movs	r2, #1
 8016326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2201      	movs	r2, #1
 801632e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2201      	movs	r2, #1
 8016336:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2201      	movs	r2, #1
 801633e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2201      	movs	r2, #1
 8016346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801634a:	2300      	movs	r3, #0
}
 801634c:	4618      	mov	r0, r3
 801634e:	3708      	adds	r7, #8
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016354:	b480      	push	{r7}
 8016356:	b085      	sub	sp, #20
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016362:	b2db      	uxtb	r3, r3
 8016364:	2b01      	cmp	r3, #1
 8016366:	d001      	beq.n	801636c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016368:	2301      	movs	r3, #1
 801636a:	e056      	b.n	801641a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2202      	movs	r2, #2
 8016370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	4a2b      	ldr	r2, [pc, #172]	@ (8016428 <HAL_TIM_Base_Start+0xd4>)
 801637a:	4293      	cmp	r3, r2
 801637c:	d02c      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016386:	d027      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4a27      	ldr	r2, [pc, #156]	@ (801642c <HAL_TIM_Base_Start+0xd8>)
 801638e:	4293      	cmp	r3, r2
 8016390:	d022      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	4a26      	ldr	r2, [pc, #152]	@ (8016430 <HAL_TIM_Base_Start+0xdc>)
 8016398:	4293      	cmp	r3, r2
 801639a:	d01d      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4a24      	ldr	r2, [pc, #144]	@ (8016434 <HAL_TIM_Base_Start+0xe0>)
 80163a2:	4293      	cmp	r3, r2
 80163a4:	d018      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	4a23      	ldr	r2, [pc, #140]	@ (8016438 <HAL_TIM_Base_Start+0xe4>)
 80163ac:	4293      	cmp	r3, r2
 80163ae:	d013      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4a21      	ldr	r2, [pc, #132]	@ (801643c <HAL_TIM_Base_Start+0xe8>)
 80163b6:	4293      	cmp	r3, r2
 80163b8:	d00e      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4a20      	ldr	r2, [pc, #128]	@ (8016440 <HAL_TIM_Base_Start+0xec>)
 80163c0:	4293      	cmp	r3, r2
 80163c2:	d009      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	4a1e      	ldr	r2, [pc, #120]	@ (8016444 <HAL_TIM_Base_Start+0xf0>)
 80163ca:	4293      	cmp	r3, r2
 80163cc:	d004      	beq.n	80163d8 <HAL_TIM_Base_Start+0x84>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4a1d      	ldr	r2, [pc, #116]	@ (8016448 <HAL_TIM_Base_Start+0xf4>)
 80163d4:	4293      	cmp	r3, r2
 80163d6:	d115      	bne.n	8016404 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	689a      	ldr	r2, [r3, #8]
 80163de:	4b1b      	ldr	r3, [pc, #108]	@ (801644c <HAL_TIM_Base_Start+0xf8>)
 80163e0:	4013      	ands	r3, r2
 80163e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	2b06      	cmp	r3, #6
 80163e8:	d015      	beq.n	8016416 <HAL_TIM_Base_Start+0xc2>
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80163f0:	d011      	beq.n	8016416 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	f042 0201 	orr.w	r2, r2, #1
 8016400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016402:	e008      	b.n	8016416 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	681a      	ldr	r2, [r3, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f042 0201 	orr.w	r2, r2, #1
 8016412:	601a      	str	r2, [r3, #0]
 8016414:	e000      	b.n	8016418 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016418:	2300      	movs	r3, #0
}
 801641a:	4618      	mov	r0, r3
 801641c:	3714      	adds	r7, #20
 801641e:	46bd      	mov	sp, r7
 8016420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016424:	4770      	bx	lr
 8016426:	bf00      	nop
 8016428:	40010000 	.word	0x40010000
 801642c:	40000400 	.word	0x40000400
 8016430:	40000800 	.word	0x40000800
 8016434:	40000c00 	.word	0x40000c00
 8016438:	40010400 	.word	0x40010400
 801643c:	40001800 	.word	0x40001800
 8016440:	40014000 	.word	0x40014000
 8016444:	4000e000 	.word	0x4000e000
 8016448:	4000e400 	.word	0x4000e400
 801644c:	00010007 	.word	0x00010007

08016450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016450:	b480      	push	{r7}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b01      	cmp	r3, #1
 8016462:	d001      	beq.n	8016468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016464:	2301      	movs	r3, #1
 8016466:	e05e      	b.n	8016526 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2202      	movs	r2, #2
 801646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	68da      	ldr	r2, [r3, #12]
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	f042 0201 	orr.w	r2, r2, #1
 801647e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	4a2b      	ldr	r2, [pc, #172]	@ (8016534 <HAL_TIM_Base_Start_IT+0xe4>)
 8016486:	4293      	cmp	r3, r2
 8016488:	d02c      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016492:	d027      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	4a27      	ldr	r2, [pc, #156]	@ (8016538 <HAL_TIM_Base_Start_IT+0xe8>)
 801649a:	4293      	cmp	r3, r2
 801649c:	d022      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	4a26      	ldr	r2, [pc, #152]	@ (801653c <HAL_TIM_Base_Start_IT+0xec>)
 80164a4:	4293      	cmp	r3, r2
 80164a6:	d01d      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	4a24      	ldr	r2, [pc, #144]	@ (8016540 <HAL_TIM_Base_Start_IT+0xf0>)
 80164ae:	4293      	cmp	r3, r2
 80164b0:	d018      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	4a23      	ldr	r2, [pc, #140]	@ (8016544 <HAL_TIM_Base_Start_IT+0xf4>)
 80164b8:	4293      	cmp	r3, r2
 80164ba:	d013      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4a21      	ldr	r2, [pc, #132]	@ (8016548 <HAL_TIM_Base_Start_IT+0xf8>)
 80164c2:	4293      	cmp	r3, r2
 80164c4:	d00e      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	4a20      	ldr	r2, [pc, #128]	@ (801654c <HAL_TIM_Base_Start_IT+0xfc>)
 80164cc:	4293      	cmp	r3, r2
 80164ce:	d009      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	4a1e      	ldr	r2, [pc, #120]	@ (8016550 <HAL_TIM_Base_Start_IT+0x100>)
 80164d6:	4293      	cmp	r3, r2
 80164d8:	d004      	beq.n	80164e4 <HAL_TIM_Base_Start_IT+0x94>
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	4a1d      	ldr	r2, [pc, #116]	@ (8016554 <HAL_TIM_Base_Start_IT+0x104>)
 80164e0:	4293      	cmp	r3, r2
 80164e2:	d115      	bne.n	8016510 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	689a      	ldr	r2, [r3, #8]
 80164ea:	4b1b      	ldr	r3, [pc, #108]	@ (8016558 <HAL_TIM_Base_Start_IT+0x108>)
 80164ec:	4013      	ands	r3, r2
 80164ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2b06      	cmp	r3, #6
 80164f4:	d015      	beq.n	8016522 <HAL_TIM_Base_Start_IT+0xd2>
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80164fc:	d011      	beq.n	8016522 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f042 0201 	orr.w	r2, r2, #1
 801650c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801650e:	e008      	b.n	8016522 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	f042 0201 	orr.w	r2, r2, #1
 801651e:	601a      	str	r2, [r3, #0]
 8016520:	e000      	b.n	8016524 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016524:	2300      	movs	r3, #0
}
 8016526:	4618      	mov	r0, r3
 8016528:	3714      	adds	r7, #20
 801652a:	46bd      	mov	sp, r7
 801652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop
 8016534:	40010000 	.word	0x40010000
 8016538:	40000400 	.word	0x40000400
 801653c:	40000800 	.word	0x40000800
 8016540:	40000c00 	.word	0x40000c00
 8016544:	40010400 	.word	0x40010400
 8016548:	40001800 	.word	0x40001800
 801654c:	40014000 	.word	0x40014000
 8016550:	4000e000 	.word	0x4000e000
 8016554:	4000e400 	.word	0x4000e400
 8016558:	00010007 	.word	0x00010007

0801655c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d101      	bne.n	801656e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801656a:	2301      	movs	r3, #1
 801656c:	e049      	b.n	8016602 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016574:	b2db      	uxtb	r3, r3
 8016576:	2b00      	cmp	r3, #0
 8016578:	d106      	bne.n	8016588 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2200      	movs	r2, #0
 801657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f7f2 fd2e 	bl	8008fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2202      	movs	r2, #2
 801658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681a      	ldr	r2, [r3, #0]
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	3304      	adds	r3, #4
 8016598:	4619      	mov	r1, r3
 801659a:	4610      	mov	r0, r2
 801659c:	f000 fd80 	bl	80170a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2201      	movs	r2, #1
 80165a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2201      	movs	r2, #1
 80165ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2201      	movs	r2, #1
 80165b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2201      	movs	r2, #1
 80165bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2201      	movs	r2, #1
 80165c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2201      	movs	r2, #1
 80165cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2201      	movs	r2, #1
 80165dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2201      	movs	r2, #1
 80165e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2201      	movs	r2, #1
 80165ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2201      	movs	r2, #1
 80165f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2201      	movs	r2, #1
 80165fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016600:	2300      	movs	r3, #0
}
 8016602:	4618      	mov	r0, r3
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
	...

0801660c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d109      	bne.n	8016630 <HAL_TIM_PWM_Start+0x24>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016622:	b2db      	uxtb	r3, r3
 8016624:	2b01      	cmp	r3, #1
 8016626:	bf14      	ite	ne
 8016628:	2301      	movne	r3, #1
 801662a:	2300      	moveq	r3, #0
 801662c:	b2db      	uxtb	r3, r3
 801662e:	e03c      	b.n	80166aa <HAL_TIM_PWM_Start+0x9e>
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	2b04      	cmp	r3, #4
 8016634:	d109      	bne.n	801664a <HAL_TIM_PWM_Start+0x3e>
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801663c:	b2db      	uxtb	r3, r3
 801663e:	2b01      	cmp	r3, #1
 8016640:	bf14      	ite	ne
 8016642:	2301      	movne	r3, #1
 8016644:	2300      	moveq	r3, #0
 8016646:	b2db      	uxtb	r3, r3
 8016648:	e02f      	b.n	80166aa <HAL_TIM_PWM_Start+0x9e>
 801664a:	683b      	ldr	r3, [r7, #0]
 801664c:	2b08      	cmp	r3, #8
 801664e:	d109      	bne.n	8016664 <HAL_TIM_PWM_Start+0x58>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016656:	b2db      	uxtb	r3, r3
 8016658:	2b01      	cmp	r3, #1
 801665a:	bf14      	ite	ne
 801665c:	2301      	movne	r3, #1
 801665e:	2300      	moveq	r3, #0
 8016660:	b2db      	uxtb	r3, r3
 8016662:	e022      	b.n	80166aa <HAL_TIM_PWM_Start+0x9e>
 8016664:	683b      	ldr	r3, [r7, #0]
 8016666:	2b0c      	cmp	r3, #12
 8016668:	d109      	bne.n	801667e <HAL_TIM_PWM_Start+0x72>
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016670:	b2db      	uxtb	r3, r3
 8016672:	2b01      	cmp	r3, #1
 8016674:	bf14      	ite	ne
 8016676:	2301      	movne	r3, #1
 8016678:	2300      	moveq	r3, #0
 801667a:	b2db      	uxtb	r3, r3
 801667c:	e015      	b.n	80166aa <HAL_TIM_PWM_Start+0x9e>
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	2b10      	cmp	r3, #16
 8016682:	d109      	bne.n	8016698 <HAL_TIM_PWM_Start+0x8c>
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801668a:	b2db      	uxtb	r3, r3
 801668c:	2b01      	cmp	r3, #1
 801668e:	bf14      	ite	ne
 8016690:	2301      	movne	r3, #1
 8016692:	2300      	moveq	r3, #0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	e008      	b.n	80166aa <HAL_TIM_PWM_Start+0x9e>
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801669e:	b2db      	uxtb	r3, r3
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	bf14      	ite	ne
 80166a4:	2301      	movne	r3, #1
 80166a6:	2300      	moveq	r3, #0
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d001      	beq.n	80166b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80166ae:	2301      	movs	r3, #1
 80166b0:	e0ab      	b.n	801680a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d104      	bne.n	80166c2 <HAL_TIM_PWM_Start+0xb6>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2202      	movs	r2, #2
 80166bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80166c0:	e023      	b.n	801670a <HAL_TIM_PWM_Start+0xfe>
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	2b04      	cmp	r3, #4
 80166c6:	d104      	bne.n	80166d2 <HAL_TIM_PWM_Start+0xc6>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2202      	movs	r2, #2
 80166cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80166d0:	e01b      	b.n	801670a <HAL_TIM_PWM_Start+0xfe>
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	2b08      	cmp	r3, #8
 80166d6:	d104      	bne.n	80166e2 <HAL_TIM_PWM_Start+0xd6>
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2202      	movs	r2, #2
 80166dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80166e0:	e013      	b.n	801670a <HAL_TIM_PWM_Start+0xfe>
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	2b0c      	cmp	r3, #12
 80166e6:	d104      	bne.n	80166f2 <HAL_TIM_PWM_Start+0xe6>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2202      	movs	r2, #2
 80166ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80166f0:	e00b      	b.n	801670a <HAL_TIM_PWM_Start+0xfe>
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	2b10      	cmp	r3, #16
 80166f6:	d104      	bne.n	8016702 <HAL_TIM_PWM_Start+0xf6>
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2202      	movs	r2, #2
 80166fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016700:	e003      	b.n	801670a <HAL_TIM_PWM_Start+0xfe>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2202      	movs	r2, #2
 8016706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2201      	movs	r2, #1
 8016710:	6839      	ldr	r1, [r7, #0]
 8016712:	4618      	mov	r0, r3
 8016714:	f001 fa1a 	bl	8017b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	4a3d      	ldr	r2, [pc, #244]	@ (8016814 <HAL_TIM_PWM_Start+0x208>)
 801671e:	4293      	cmp	r3, r2
 8016720:	d013      	beq.n	801674a <HAL_TIM_PWM_Start+0x13e>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	4a3c      	ldr	r2, [pc, #240]	@ (8016818 <HAL_TIM_PWM_Start+0x20c>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d00e      	beq.n	801674a <HAL_TIM_PWM_Start+0x13e>
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4a3a      	ldr	r2, [pc, #232]	@ (801681c <HAL_TIM_PWM_Start+0x210>)
 8016732:	4293      	cmp	r3, r2
 8016734:	d009      	beq.n	801674a <HAL_TIM_PWM_Start+0x13e>
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	4a39      	ldr	r2, [pc, #228]	@ (8016820 <HAL_TIM_PWM_Start+0x214>)
 801673c:	4293      	cmp	r3, r2
 801673e:	d004      	beq.n	801674a <HAL_TIM_PWM_Start+0x13e>
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	4a37      	ldr	r2, [pc, #220]	@ (8016824 <HAL_TIM_PWM_Start+0x218>)
 8016746:	4293      	cmp	r3, r2
 8016748:	d101      	bne.n	801674e <HAL_TIM_PWM_Start+0x142>
 801674a:	2301      	movs	r3, #1
 801674c:	e000      	b.n	8016750 <HAL_TIM_PWM_Start+0x144>
 801674e:	2300      	movs	r3, #0
 8016750:	2b00      	cmp	r3, #0
 8016752:	d007      	beq.n	8016764 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016762:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	4a2a      	ldr	r2, [pc, #168]	@ (8016814 <HAL_TIM_PWM_Start+0x208>)
 801676a:	4293      	cmp	r3, r2
 801676c:	d02c      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016776:	d027      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	4a2a      	ldr	r2, [pc, #168]	@ (8016828 <HAL_TIM_PWM_Start+0x21c>)
 801677e:	4293      	cmp	r3, r2
 8016780:	d022      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4a29      	ldr	r2, [pc, #164]	@ (801682c <HAL_TIM_PWM_Start+0x220>)
 8016788:	4293      	cmp	r3, r2
 801678a:	d01d      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	4a27      	ldr	r2, [pc, #156]	@ (8016830 <HAL_TIM_PWM_Start+0x224>)
 8016792:	4293      	cmp	r3, r2
 8016794:	d018      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4a1f      	ldr	r2, [pc, #124]	@ (8016818 <HAL_TIM_PWM_Start+0x20c>)
 801679c:	4293      	cmp	r3, r2
 801679e:	d013      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	4a23      	ldr	r2, [pc, #140]	@ (8016834 <HAL_TIM_PWM_Start+0x228>)
 80167a6:	4293      	cmp	r3, r2
 80167a8:	d00e      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	4a1b      	ldr	r2, [pc, #108]	@ (801681c <HAL_TIM_PWM_Start+0x210>)
 80167b0:	4293      	cmp	r3, r2
 80167b2:	d009      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	4a1f      	ldr	r2, [pc, #124]	@ (8016838 <HAL_TIM_PWM_Start+0x22c>)
 80167ba:	4293      	cmp	r3, r2
 80167bc:	d004      	beq.n	80167c8 <HAL_TIM_PWM_Start+0x1bc>
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	4a1e      	ldr	r2, [pc, #120]	@ (801683c <HAL_TIM_PWM_Start+0x230>)
 80167c4:	4293      	cmp	r3, r2
 80167c6:	d115      	bne.n	80167f4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	689a      	ldr	r2, [r3, #8]
 80167ce:	4b1c      	ldr	r3, [pc, #112]	@ (8016840 <HAL_TIM_PWM_Start+0x234>)
 80167d0:	4013      	ands	r3, r2
 80167d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2b06      	cmp	r3, #6
 80167d8:	d015      	beq.n	8016806 <HAL_TIM_PWM_Start+0x1fa>
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80167e0:	d011      	beq.n	8016806 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	f042 0201 	orr.w	r2, r2, #1
 80167f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167f2:	e008      	b.n	8016806 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	f042 0201 	orr.w	r2, r2, #1
 8016802:	601a      	str	r2, [r3, #0]
 8016804:	e000      	b.n	8016808 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016806:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016808:	2300      	movs	r3, #0
}
 801680a:	4618      	mov	r0, r3
 801680c:	3710      	adds	r7, #16
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
 8016812:	bf00      	nop
 8016814:	40010000 	.word	0x40010000
 8016818:	40010400 	.word	0x40010400
 801681c:	40014000 	.word	0x40014000
 8016820:	40014400 	.word	0x40014400
 8016824:	40014800 	.word	0x40014800
 8016828:	40000400 	.word	0x40000400
 801682c:	40000800 	.word	0x40000800
 8016830:	40000c00 	.word	0x40000c00
 8016834:	40001800 	.word	0x40001800
 8016838:	4000e000 	.word	0x4000e000
 801683c:	4000e400 	.word	0x4000e400
 8016840:	00010007 	.word	0x00010007

08016844 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d101      	bne.n	8016856 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016852:	2301      	movs	r3, #1
 8016854:	e049      	b.n	80168ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801685c:	b2db      	uxtb	r3, r3
 801685e:	2b00      	cmp	r3, #0
 8016860:	d106      	bne.n	8016870 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2200      	movs	r2, #0
 8016866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f7f2 fbf4 	bl	8009058 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2202      	movs	r2, #2
 8016874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	3304      	adds	r3, #4
 8016880:	4619      	mov	r1, r3
 8016882:	4610      	mov	r0, r2
 8016884:	f000 fc0c 	bl	80170a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2201      	movs	r2, #1
 801688c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2201      	movs	r2, #1
 8016894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2201      	movs	r2, #1
 801689c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2201      	movs	r2, #1
 80168a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2201      	movs	r2, #1
 80168ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2201      	movs	r2, #1
 80168b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2201      	movs	r2, #1
 80168bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2201      	movs	r2, #1
 80168c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2201      	movs	r2, #1
 80168cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2201      	movs	r2, #1
 80168d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2201      	movs	r2, #1
 80168dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2201      	movs	r2, #1
 80168e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80168e8:	2300      	movs	r3, #0
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3708      	adds	r7, #8
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}

080168f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80168f2:	b580      	push	{r7, lr}
 80168f4:	b084      	sub	sp, #16
 80168f6:	af00      	add	r7, sp, #0
 80168f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	68db      	ldr	r3, [r3, #12]
 8016900:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	691b      	ldr	r3, [r3, #16]
 8016908:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	f003 0302 	and.w	r3, r3, #2
 8016910:	2b00      	cmp	r3, #0
 8016912:	d020      	beq.n	8016956 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	f003 0302 	and.w	r3, r3, #2
 801691a:	2b00      	cmp	r3, #0
 801691c:	d01b      	beq.n	8016956 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f06f 0202 	mvn.w	r2, #2
 8016926:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2201      	movs	r2, #1
 801692c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	699b      	ldr	r3, [r3, #24]
 8016934:	f003 0303 	and.w	r3, r3, #3
 8016938:	2b00      	cmp	r3, #0
 801693a:	d003      	beq.n	8016944 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f000 fb91 	bl	8017064 <HAL_TIM_IC_CaptureCallback>
 8016942:	e005      	b.n	8016950 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f000 fb83 	bl	8017050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f000 fb94 	bl	8017078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	f003 0304 	and.w	r3, r3, #4
 801695c:	2b00      	cmp	r3, #0
 801695e:	d020      	beq.n	80169a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	f003 0304 	and.w	r3, r3, #4
 8016966:	2b00      	cmp	r3, #0
 8016968:	d01b      	beq.n	80169a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	f06f 0204 	mvn.w	r2, #4
 8016972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2202      	movs	r2, #2
 8016978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	699b      	ldr	r3, [r3, #24]
 8016980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016984:	2b00      	cmp	r3, #0
 8016986:	d003      	beq.n	8016990 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	f000 fb6b 	bl	8017064 <HAL_TIM_IC_CaptureCallback>
 801698e:	e005      	b.n	801699c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f000 fb5d 	bl	8017050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	f000 fb6e 	bl	8017078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2200      	movs	r2, #0
 80169a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	f003 0308 	and.w	r3, r3, #8
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d020      	beq.n	80169ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f003 0308 	and.w	r3, r3, #8
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d01b      	beq.n	80169ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	f06f 0208 	mvn.w	r2, #8
 80169be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2204      	movs	r2, #4
 80169c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	69db      	ldr	r3, [r3, #28]
 80169cc:	f003 0303 	and.w	r3, r3, #3
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d003      	beq.n	80169dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f000 fb45 	bl	8017064 <HAL_TIM_IC_CaptureCallback>
 80169da:	e005      	b.n	80169e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f000 fb37 	bl	8017050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 fb48 	bl	8017078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2200      	movs	r2, #0
 80169ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	f003 0310 	and.w	r3, r3, #16
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d020      	beq.n	8016a3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f003 0310 	and.w	r3, r3, #16
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d01b      	beq.n	8016a3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f06f 0210 	mvn.w	r2, #16
 8016a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2208      	movs	r2, #8
 8016a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	69db      	ldr	r3, [r3, #28]
 8016a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d003      	beq.n	8016a28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 fb1f 	bl	8017064 <HAL_TIM_IC_CaptureCallback>
 8016a26:	e005      	b.n	8016a34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f000 fb11 	bl	8017050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fb22 	bl	8017078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2200      	movs	r2, #0
 8016a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	f003 0301 	and.w	r3, r3, #1
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d00c      	beq.n	8016a5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	f003 0301 	and.w	r3, r3, #1
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d007      	beq.n	8016a5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f06f 0201 	mvn.w	r2, #1
 8016a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	f7ef fae1 	bl	8006020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d104      	bne.n	8016a72 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d00c      	beq.n	8016a8c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d007      	beq.n	8016a8c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	f001 f9b8 	bl	8017dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d00c      	beq.n	8016ab0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d007      	beq.n	8016ab0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f001 f9b0 	bl	8017e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00c      	beq.n	8016ad4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d007      	beq.n	8016ad4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f000 fadc 	bl	801708c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	f003 0320 	and.w	r3, r3, #32
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d00c      	beq.n	8016af8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	f003 0320 	and.w	r3, r3, #32
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d007      	beq.n	8016af8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f06f 0220 	mvn.w	r2, #32
 8016af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f001 f978 	bl	8017de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016af8:	bf00      	nop
 8016afa:	3710      	adds	r7, #16
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}

08016b00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b086      	sub	sp, #24
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	60f8      	str	r0, [r7, #12]
 8016b08:	60b9      	str	r1, [r7, #8]
 8016b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d101      	bne.n	8016b1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8016b1a:	2302      	movs	r3, #2
 8016b1c:	e088      	b.n	8016c30 <HAL_TIM_IC_ConfigChannel+0x130>
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	2201      	movs	r2, #1
 8016b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d11b      	bne.n	8016b64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016b3c:	f000 fe32 	bl	80177a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	699a      	ldr	r2, [r3, #24]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	f022 020c 	bic.w	r2, r2, #12
 8016b4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	6999      	ldr	r1, [r3, #24]
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	689a      	ldr	r2, [r3, #8]
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	430a      	orrs	r2, r1
 8016b60:	619a      	str	r2, [r3, #24]
 8016b62:	e060      	b.n	8016c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2b04      	cmp	r3, #4
 8016b68:	d11c      	bne.n	8016ba4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016b7a:	f000 fec2 	bl	8017902 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	699a      	ldr	r2, [r3, #24]
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016b8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	6999      	ldr	r1, [r3, #24]
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	689b      	ldr	r3, [r3, #8]
 8016b98:	021a      	lsls	r2, r3, #8
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	430a      	orrs	r2, r1
 8016ba0:	619a      	str	r2, [r3, #24]
 8016ba2:	e040      	b.n	8016c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2b08      	cmp	r3, #8
 8016ba8:	d11b      	bne.n	8016be2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016bba:	f000 ff0f 	bl	80179dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	69da      	ldr	r2, [r3, #28]
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f022 020c 	bic.w	r2, r2, #12
 8016bcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	69d9      	ldr	r1, [r3, #28]
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	689a      	ldr	r2, [r3, #8]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	430a      	orrs	r2, r1
 8016bde:	61da      	str	r2, [r3, #28]
 8016be0:	e021      	b.n	8016c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2b0c      	cmp	r3, #12
 8016be6:	d11c      	bne.n	8016c22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016bf8:	f000 ff2c 	bl	8017a54 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	69da      	ldr	r2, [r3, #28]
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	69d9      	ldr	r1, [r3, #28]
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	689b      	ldr	r3, [r3, #8]
 8016c16:	021a      	lsls	r2, r3, #8
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	430a      	orrs	r2, r1
 8016c1e:	61da      	str	r2, [r3, #28]
 8016c20:	e001      	b.n	8016c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016c22:	2301      	movs	r3, #1
 8016c24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	3718      	adds	r7, #24
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}

08016c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b086      	sub	sp, #24
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	60f8      	str	r0, [r7, #12]
 8016c40:	60b9      	str	r1, [r7, #8]
 8016c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016c44:	2300      	movs	r3, #0
 8016c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016c4e:	2b01      	cmp	r3, #1
 8016c50:	d101      	bne.n	8016c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016c52:	2302      	movs	r3, #2
 8016c54:	e0ff      	b.n	8016e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	2201      	movs	r2, #1
 8016c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2b14      	cmp	r3, #20
 8016c62:	f200 80f0 	bhi.w	8016e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016c66:	a201      	add	r2, pc, #4	@ (adr r2, 8016c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c6c:	08016cc1 	.word	0x08016cc1
 8016c70:	08016e47 	.word	0x08016e47
 8016c74:	08016e47 	.word	0x08016e47
 8016c78:	08016e47 	.word	0x08016e47
 8016c7c:	08016d01 	.word	0x08016d01
 8016c80:	08016e47 	.word	0x08016e47
 8016c84:	08016e47 	.word	0x08016e47
 8016c88:	08016e47 	.word	0x08016e47
 8016c8c:	08016d43 	.word	0x08016d43
 8016c90:	08016e47 	.word	0x08016e47
 8016c94:	08016e47 	.word	0x08016e47
 8016c98:	08016e47 	.word	0x08016e47
 8016c9c:	08016d83 	.word	0x08016d83
 8016ca0:	08016e47 	.word	0x08016e47
 8016ca4:	08016e47 	.word	0x08016e47
 8016ca8:	08016e47 	.word	0x08016e47
 8016cac:	08016dc5 	.word	0x08016dc5
 8016cb0:	08016e47 	.word	0x08016e47
 8016cb4:	08016e47 	.word	0x08016e47
 8016cb8:	08016e47 	.word	0x08016e47
 8016cbc:	08016e05 	.word	0x08016e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	68b9      	ldr	r1, [r7, #8]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f000 fa96 	bl	80171f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	699a      	ldr	r2, [r3, #24]
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f042 0208 	orr.w	r2, r2, #8
 8016cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	699a      	ldr	r2, [r3, #24]
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	f022 0204 	bic.w	r2, r2, #4
 8016cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	6999      	ldr	r1, [r3, #24]
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	691a      	ldr	r2, [r3, #16]
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	430a      	orrs	r2, r1
 8016cfc:	619a      	str	r2, [r3, #24]
      break;
 8016cfe:	e0a5      	b.n	8016e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	68b9      	ldr	r1, [r7, #8]
 8016d06:	4618      	mov	r0, r3
 8016d08:	f000 fb06 	bl	8017318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	699a      	ldr	r2, [r3, #24]
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	699a      	ldr	r2, [r3, #24]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	6999      	ldr	r1, [r3, #24]
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	691b      	ldr	r3, [r3, #16]
 8016d36:	021a      	lsls	r2, r3, #8
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	430a      	orrs	r2, r1
 8016d3e:	619a      	str	r2, [r3, #24]
      break;
 8016d40:	e084      	b.n	8016e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	68b9      	ldr	r1, [r7, #8]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f000 fb6f 	bl	801742c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	69da      	ldr	r2, [r3, #28]
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	f042 0208 	orr.w	r2, r2, #8
 8016d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	69da      	ldr	r2, [r3, #28]
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f022 0204 	bic.w	r2, r2, #4
 8016d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	69d9      	ldr	r1, [r3, #28]
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	691a      	ldr	r2, [r3, #16]
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	430a      	orrs	r2, r1
 8016d7e:	61da      	str	r2, [r3, #28]
      break;
 8016d80:	e064      	b.n	8016e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	68b9      	ldr	r1, [r7, #8]
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f000 fbd7 	bl	801753c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	69da      	ldr	r2, [r3, #28]
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	69da      	ldr	r2, [r3, #28]
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	69d9      	ldr	r1, [r3, #28]
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	691b      	ldr	r3, [r3, #16]
 8016db8:	021a      	lsls	r2, r3, #8
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	430a      	orrs	r2, r1
 8016dc0:	61da      	str	r2, [r3, #28]
      break;
 8016dc2:	e043      	b.n	8016e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	68b9      	ldr	r1, [r7, #8]
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f000 fc20 	bl	8017610 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f042 0208 	orr.w	r2, r2, #8
 8016dde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f022 0204 	bic.w	r2, r2, #4
 8016dee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	691a      	ldr	r2, [r3, #16]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	430a      	orrs	r2, r1
 8016e00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e02:	e023      	b.n	8016e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	68b9      	ldr	r1, [r7, #8]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f000 fc64 	bl	80176d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	691b      	ldr	r3, [r3, #16]
 8016e3a:	021a      	lsls	r2, r3, #8
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	430a      	orrs	r2, r1
 8016e42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e44:	e002      	b.n	8016e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016e46:	2301      	movs	r3, #1
 8016e48:	75fb      	strb	r3, [r7, #23]
      break;
 8016e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	2200      	movs	r2, #0
 8016e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3718      	adds	r7, #24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop

08016e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b084      	sub	sp, #16
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
 8016e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d101      	bne.n	8016e7c <HAL_TIM_ConfigClockSource+0x1c>
 8016e78:	2302      	movs	r3, #2
 8016e7a:	e0dc      	b.n	8017036 <HAL_TIM_ConfigClockSource+0x1d6>
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2201      	movs	r2, #1
 8016e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	2202      	movs	r2, #2
 8016e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	689b      	ldr	r3, [r3, #8]
 8016e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016e94:	68ba      	ldr	r2, [r7, #8]
 8016e96:	4b6a      	ldr	r3, [pc, #424]	@ (8017040 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016e98:	4013      	ands	r3, r2
 8016e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	68ba      	ldr	r2, [r7, #8]
 8016eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016eac:	683b      	ldr	r3, [r7, #0]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	4a64      	ldr	r2, [pc, #400]	@ (8017044 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016eb2:	4293      	cmp	r3, r2
 8016eb4:	f000 80a9 	beq.w	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016eb8:	4a62      	ldr	r2, [pc, #392]	@ (8017044 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	f200 80ae 	bhi.w	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016ec0:	4a61      	ldr	r2, [pc, #388]	@ (8017048 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	f000 80a1 	beq.w	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016ec8:	4a5f      	ldr	r2, [pc, #380]	@ (8017048 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	f200 80a6 	bhi.w	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016ed0:	4a5e      	ldr	r2, [pc, #376]	@ (801704c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	f000 8099 	beq.w	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016ed8:	4a5c      	ldr	r2, [pc, #368]	@ (801704c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	f200 809e 	bhi.w	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016ee0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016ee4:	f000 8091 	beq.w	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016ee8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016eec:	f200 8096 	bhi.w	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016ef4:	f000 8089 	beq.w	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016efc:	f200 808e 	bhi.w	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f04:	d03e      	beq.n	8016f84 <HAL_TIM_ConfigClockSource+0x124>
 8016f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f0a:	f200 8087 	bhi.w	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f12:	f000 8086 	beq.w	8017022 <HAL_TIM_ConfigClockSource+0x1c2>
 8016f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f1a:	d87f      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f1c:	2b70      	cmp	r3, #112	@ 0x70
 8016f1e:	d01a      	beq.n	8016f56 <HAL_TIM_ConfigClockSource+0xf6>
 8016f20:	2b70      	cmp	r3, #112	@ 0x70
 8016f22:	d87b      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f24:	2b60      	cmp	r3, #96	@ 0x60
 8016f26:	d050      	beq.n	8016fca <HAL_TIM_ConfigClockSource+0x16a>
 8016f28:	2b60      	cmp	r3, #96	@ 0x60
 8016f2a:	d877      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f2c:	2b50      	cmp	r3, #80	@ 0x50
 8016f2e:	d03c      	beq.n	8016faa <HAL_TIM_ConfigClockSource+0x14a>
 8016f30:	2b50      	cmp	r3, #80	@ 0x50
 8016f32:	d873      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f34:	2b40      	cmp	r3, #64	@ 0x40
 8016f36:	d058      	beq.n	8016fea <HAL_TIM_ConfigClockSource+0x18a>
 8016f38:	2b40      	cmp	r3, #64	@ 0x40
 8016f3a:	d86f      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f3c:	2b30      	cmp	r3, #48	@ 0x30
 8016f3e:	d064      	beq.n	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f40:	2b30      	cmp	r3, #48	@ 0x30
 8016f42:	d86b      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f44:	2b20      	cmp	r3, #32
 8016f46:	d060      	beq.n	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f48:	2b20      	cmp	r3, #32
 8016f4a:	d867      	bhi.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d05c      	beq.n	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f50:	2b10      	cmp	r3, #16
 8016f52:	d05a      	beq.n	801700a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f54:	e062      	b.n	801701c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f66:	f000 fdd1 	bl	8017b0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	689b      	ldr	r3, [r3, #8]
 8016f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	68ba      	ldr	r2, [r7, #8]
 8016f80:	609a      	str	r2, [r3, #8]
      break;
 8016f82:	e04f      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f94:	f000 fdba 	bl	8017b0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	689a      	ldr	r2, [r3, #8]
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016fa6:	609a      	str	r2, [r3, #8]
      break;
 8016fa8:	e03c      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fb6:	461a      	mov	r2, r3
 8016fb8:	f000 fc74 	bl	80178a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	2150      	movs	r1, #80	@ 0x50
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f000 fd84 	bl	8017ad0 <TIM_ITRx_SetConfig>
      break;
 8016fc8:	e02c      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	f000 fcd0 	bl	801797c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	2160      	movs	r1, #96	@ 0x60
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f000 fd74 	bl	8017ad0 <TIM_ITRx_SetConfig>
      break;
 8016fe8:	e01c      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	f000 fc54 	bl	80178a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	2140      	movs	r1, #64	@ 0x40
 8017002:	4618      	mov	r0, r3
 8017004:	f000 fd64 	bl	8017ad0 <TIM_ITRx_SetConfig>
      break;
 8017008:	e00c      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681a      	ldr	r2, [r3, #0]
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	4619      	mov	r1, r3
 8017014:	4610      	mov	r0, r2
 8017016:	f000 fd5b 	bl	8017ad0 <TIM_ITRx_SetConfig>
      break;
 801701a:	e003      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801701c:	2301      	movs	r3, #1
 801701e:	73fb      	strb	r3, [r7, #15]
      break;
 8017020:	e000      	b.n	8017024 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8017022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2201      	movs	r2, #1
 8017028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2200      	movs	r2, #0
 8017030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017034:	7bfb      	ldrb	r3, [r7, #15]
}
 8017036:	4618      	mov	r0, r3
 8017038:	3710      	adds	r7, #16
 801703a:	46bd      	mov	sp, r7
 801703c:	bd80      	pop	{r7, pc}
 801703e:	bf00      	nop
 8017040:	ffceff88 	.word	0xffceff88
 8017044:	00100040 	.word	0x00100040
 8017048:	00100030 	.word	0x00100030
 801704c:	00100020 	.word	0x00100020

08017050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017050:	b480      	push	{r7}
 8017052:	b083      	sub	sp, #12
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017058:	bf00      	nop
 801705a:	370c      	adds	r7, #12
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017064:	b480      	push	{r7}
 8017066:	b083      	sub	sp, #12
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801706c:	bf00      	nop
 801706e:	370c      	adds	r7, #12
 8017070:	46bd      	mov	sp, r7
 8017072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017076:	4770      	bx	lr

08017078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017078:	b480      	push	{r7}
 801707a:	b083      	sub	sp, #12
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017080:	bf00      	nop
 8017082:	370c      	adds	r7, #12
 8017084:	46bd      	mov	sp, r7
 8017086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708a:	4770      	bx	lr

0801708c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801708c:	b480      	push	{r7}
 801708e:	b083      	sub	sp, #12
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017094:	bf00      	nop
 8017096:	370c      	adds	r7, #12
 8017098:	46bd      	mov	sp, r7
 801709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709e:	4770      	bx	lr

080170a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b085      	sub	sp, #20
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	4a47      	ldr	r2, [pc, #284]	@ (80171d0 <TIM_Base_SetConfig+0x130>)
 80170b4:	4293      	cmp	r3, r2
 80170b6:	d013      	beq.n	80170e0 <TIM_Base_SetConfig+0x40>
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170be:	d00f      	beq.n	80170e0 <TIM_Base_SetConfig+0x40>
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	4a44      	ldr	r2, [pc, #272]	@ (80171d4 <TIM_Base_SetConfig+0x134>)
 80170c4:	4293      	cmp	r3, r2
 80170c6:	d00b      	beq.n	80170e0 <TIM_Base_SetConfig+0x40>
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	4a43      	ldr	r2, [pc, #268]	@ (80171d8 <TIM_Base_SetConfig+0x138>)
 80170cc:	4293      	cmp	r3, r2
 80170ce:	d007      	beq.n	80170e0 <TIM_Base_SetConfig+0x40>
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	4a42      	ldr	r2, [pc, #264]	@ (80171dc <TIM_Base_SetConfig+0x13c>)
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d003      	beq.n	80170e0 <TIM_Base_SetConfig+0x40>
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	4a41      	ldr	r2, [pc, #260]	@ (80171e0 <TIM_Base_SetConfig+0x140>)
 80170dc:	4293      	cmp	r3, r2
 80170de:	d108      	bne.n	80170f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80170e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	685b      	ldr	r3, [r3, #4]
 80170ec:	68fa      	ldr	r2, [r7, #12]
 80170ee:	4313      	orrs	r3, r2
 80170f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	4a36      	ldr	r2, [pc, #216]	@ (80171d0 <TIM_Base_SetConfig+0x130>)
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d027      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017100:	d023      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	4a33      	ldr	r2, [pc, #204]	@ (80171d4 <TIM_Base_SetConfig+0x134>)
 8017106:	4293      	cmp	r3, r2
 8017108:	d01f      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	4a32      	ldr	r2, [pc, #200]	@ (80171d8 <TIM_Base_SetConfig+0x138>)
 801710e:	4293      	cmp	r3, r2
 8017110:	d01b      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	4a31      	ldr	r2, [pc, #196]	@ (80171dc <TIM_Base_SetConfig+0x13c>)
 8017116:	4293      	cmp	r3, r2
 8017118:	d017      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	4a30      	ldr	r2, [pc, #192]	@ (80171e0 <TIM_Base_SetConfig+0x140>)
 801711e:	4293      	cmp	r3, r2
 8017120:	d013      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	4a2f      	ldr	r2, [pc, #188]	@ (80171e4 <TIM_Base_SetConfig+0x144>)
 8017126:	4293      	cmp	r3, r2
 8017128:	d00f      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	4a2e      	ldr	r2, [pc, #184]	@ (80171e8 <TIM_Base_SetConfig+0x148>)
 801712e:	4293      	cmp	r3, r2
 8017130:	d00b      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	4a2d      	ldr	r2, [pc, #180]	@ (80171ec <TIM_Base_SetConfig+0x14c>)
 8017136:	4293      	cmp	r3, r2
 8017138:	d007      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	4a2c      	ldr	r2, [pc, #176]	@ (80171f0 <TIM_Base_SetConfig+0x150>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d003      	beq.n	801714a <TIM_Base_SetConfig+0xaa>
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4a2b      	ldr	r2, [pc, #172]	@ (80171f4 <TIM_Base_SetConfig+0x154>)
 8017146:	4293      	cmp	r3, r2
 8017148:	d108      	bne.n	801715c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	68db      	ldr	r3, [r3, #12]
 8017156:	68fa      	ldr	r2, [r7, #12]
 8017158:	4313      	orrs	r3, r2
 801715a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	695b      	ldr	r3, [r3, #20]
 8017166:	4313      	orrs	r3, r2
 8017168:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	689a      	ldr	r2, [r3, #8]
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	681a      	ldr	r2, [r3, #0]
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	4a14      	ldr	r2, [pc, #80]	@ (80171d0 <TIM_Base_SetConfig+0x130>)
 801717e:	4293      	cmp	r3, r2
 8017180:	d00f      	beq.n	80171a2 <TIM_Base_SetConfig+0x102>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	4a16      	ldr	r2, [pc, #88]	@ (80171e0 <TIM_Base_SetConfig+0x140>)
 8017186:	4293      	cmp	r3, r2
 8017188:	d00b      	beq.n	80171a2 <TIM_Base_SetConfig+0x102>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	4a15      	ldr	r2, [pc, #84]	@ (80171e4 <TIM_Base_SetConfig+0x144>)
 801718e:	4293      	cmp	r3, r2
 8017190:	d007      	beq.n	80171a2 <TIM_Base_SetConfig+0x102>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4a14      	ldr	r2, [pc, #80]	@ (80171e8 <TIM_Base_SetConfig+0x148>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d003      	beq.n	80171a2 <TIM_Base_SetConfig+0x102>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4a13      	ldr	r2, [pc, #76]	@ (80171ec <TIM_Base_SetConfig+0x14c>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d103      	bne.n	80171aa <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	691a      	ldr	r2, [r3, #16]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	f043 0204 	orr.w	r2, r3, #4
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2201      	movs	r2, #1
 80171ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	601a      	str	r2, [r3, #0]
}
 80171c2:	bf00      	nop
 80171c4:	3714      	adds	r7, #20
 80171c6:	46bd      	mov	sp, r7
 80171c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171cc:	4770      	bx	lr
 80171ce:	bf00      	nop
 80171d0:	40010000 	.word	0x40010000
 80171d4:	40000400 	.word	0x40000400
 80171d8:	40000800 	.word	0x40000800
 80171dc:	40000c00 	.word	0x40000c00
 80171e0:	40010400 	.word	0x40010400
 80171e4:	40014000 	.word	0x40014000
 80171e8:	40014400 	.word	0x40014400
 80171ec:	40014800 	.word	0x40014800
 80171f0:	4000e000 	.word	0x4000e000
 80171f4:	4000e400 	.word	0x4000e400

080171f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80171f8:	b480      	push	{r7}
 80171fa:	b087      	sub	sp, #28
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6a1b      	ldr	r3, [r3, #32]
 8017206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6a1b      	ldr	r3, [r3, #32]
 801720c:	f023 0201 	bic.w	r2, r3, #1
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	685b      	ldr	r3, [r3, #4]
 8017218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	699b      	ldr	r3, [r3, #24]
 801721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	4b37      	ldr	r3, [pc, #220]	@ (8017300 <TIM_OC1_SetConfig+0x108>)
 8017224:	4013      	ands	r3, r2
 8017226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	f023 0303 	bic.w	r3, r3, #3
 801722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	68fa      	ldr	r2, [r7, #12]
 8017236:	4313      	orrs	r3, r2
 8017238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	f023 0302 	bic.w	r3, r3, #2
 8017240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	689b      	ldr	r3, [r3, #8]
 8017246:	697a      	ldr	r2, [r7, #20]
 8017248:	4313      	orrs	r3, r2
 801724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	4a2d      	ldr	r2, [pc, #180]	@ (8017304 <TIM_OC1_SetConfig+0x10c>)
 8017250:	4293      	cmp	r3, r2
 8017252:	d00f      	beq.n	8017274 <TIM_OC1_SetConfig+0x7c>
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	4a2c      	ldr	r2, [pc, #176]	@ (8017308 <TIM_OC1_SetConfig+0x110>)
 8017258:	4293      	cmp	r3, r2
 801725a:	d00b      	beq.n	8017274 <TIM_OC1_SetConfig+0x7c>
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	4a2b      	ldr	r2, [pc, #172]	@ (801730c <TIM_OC1_SetConfig+0x114>)
 8017260:	4293      	cmp	r3, r2
 8017262:	d007      	beq.n	8017274 <TIM_OC1_SetConfig+0x7c>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	4a2a      	ldr	r2, [pc, #168]	@ (8017310 <TIM_OC1_SetConfig+0x118>)
 8017268:	4293      	cmp	r3, r2
 801726a:	d003      	beq.n	8017274 <TIM_OC1_SetConfig+0x7c>
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	4a29      	ldr	r2, [pc, #164]	@ (8017314 <TIM_OC1_SetConfig+0x11c>)
 8017270:	4293      	cmp	r3, r2
 8017272:	d10c      	bne.n	801728e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	f023 0308 	bic.w	r3, r3, #8
 801727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	68db      	ldr	r3, [r3, #12]
 8017280:	697a      	ldr	r2, [r7, #20]
 8017282:	4313      	orrs	r3, r2
 8017284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	f023 0304 	bic.w	r3, r3, #4
 801728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	4a1c      	ldr	r2, [pc, #112]	@ (8017304 <TIM_OC1_SetConfig+0x10c>)
 8017292:	4293      	cmp	r3, r2
 8017294:	d00f      	beq.n	80172b6 <TIM_OC1_SetConfig+0xbe>
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	4a1b      	ldr	r2, [pc, #108]	@ (8017308 <TIM_OC1_SetConfig+0x110>)
 801729a:	4293      	cmp	r3, r2
 801729c:	d00b      	beq.n	80172b6 <TIM_OC1_SetConfig+0xbe>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	4a1a      	ldr	r2, [pc, #104]	@ (801730c <TIM_OC1_SetConfig+0x114>)
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d007      	beq.n	80172b6 <TIM_OC1_SetConfig+0xbe>
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	4a19      	ldr	r2, [pc, #100]	@ (8017310 <TIM_OC1_SetConfig+0x118>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d003      	beq.n	80172b6 <TIM_OC1_SetConfig+0xbe>
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	4a18      	ldr	r2, [pc, #96]	@ (8017314 <TIM_OC1_SetConfig+0x11c>)
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d111      	bne.n	80172da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80172b6:	693b      	ldr	r3, [r7, #16]
 80172b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80172bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80172c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	695b      	ldr	r3, [r3, #20]
 80172ca:	693a      	ldr	r2, [r7, #16]
 80172cc:	4313      	orrs	r3, r2
 80172ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	699b      	ldr	r3, [r3, #24]
 80172d4:	693a      	ldr	r2, [r7, #16]
 80172d6:	4313      	orrs	r3, r2
 80172d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	693a      	ldr	r2, [r7, #16]
 80172de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	68fa      	ldr	r2, [r7, #12]
 80172e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	685a      	ldr	r2, [r3, #4]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	697a      	ldr	r2, [r7, #20]
 80172f2:	621a      	str	r2, [r3, #32]
}
 80172f4:	bf00      	nop
 80172f6:	371c      	adds	r7, #28
 80172f8:	46bd      	mov	sp, r7
 80172fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fe:	4770      	bx	lr
 8017300:	fffeff8f 	.word	0xfffeff8f
 8017304:	40010000 	.word	0x40010000
 8017308:	40010400 	.word	0x40010400
 801730c:	40014000 	.word	0x40014000
 8017310:	40014400 	.word	0x40014400
 8017314:	40014800 	.word	0x40014800

08017318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017318:	b480      	push	{r7}
 801731a:	b087      	sub	sp, #28
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
 8017320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6a1b      	ldr	r3, [r3, #32]
 8017326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6a1b      	ldr	r3, [r3, #32]
 801732c:	f023 0210 	bic.w	r2, r3, #16
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	699b      	ldr	r3, [r3, #24]
 801733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017340:	68fa      	ldr	r2, [r7, #12]
 8017342:	4b34      	ldr	r3, [pc, #208]	@ (8017414 <TIM_OC2_SetConfig+0xfc>)
 8017344:	4013      	ands	r3, r2
 8017346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	021b      	lsls	r3, r3, #8
 8017356:	68fa      	ldr	r2, [r7, #12]
 8017358:	4313      	orrs	r3, r2
 801735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	f023 0320 	bic.w	r3, r3, #32
 8017362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017364:	683b      	ldr	r3, [r7, #0]
 8017366:	689b      	ldr	r3, [r3, #8]
 8017368:	011b      	lsls	r3, r3, #4
 801736a:	697a      	ldr	r2, [r7, #20]
 801736c:	4313      	orrs	r3, r2
 801736e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	4a29      	ldr	r2, [pc, #164]	@ (8017418 <TIM_OC2_SetConfig+0x100>)
 8017374:	4293      	cmp	r3, r2
 8017376:	d003      	beq.n	8017380 <TIM_OC2_SetConfig+0x68>
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	4a28      	ldr	r2, [pc, #160]	@ (801741c <TIM_OC2_SetConfig+0x104>)
 801737c:	4293      	cmp	r3, r2
 801737e:	d10d      	bne.n	801739c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	68db      	ldr	r3, [r3, #12]
 801738c:	011b      	lsls	r3, r3, #4
 801738e:	697a      	ldr	r2, [r7, #20]
 8017390:	4313      	orrs	r3, r2
 8017392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801739a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	4a1e      	ldr	r2, [pc, #120]	@ (8017418 <TIM_OC2_SetConfig+0x100>)
 80173a0:	4293      	cmp	r3, r2
 80173a2:	d00f      	beq.n	80173c4 <TIM_OC2_SetConfig+0xac>
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	4a1d      	ldr	r2, [pc, #116]	@ (801741c <TIM_OC2_SetConfig+0x104>)
 80173a8:	4293      	cmp	r3, r2
 80173aa:	d00b      	beq.n	80173c4 <TIM_OC2_SetConfig+0xac>
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	4a1c      	ldr	r2, [pc, #112]	@ (8017420 <TIM_OC2_SetConfig+0x108>)
 80173b0:	4293      	cmp	r3, r2
 80173b2:	d007      	beq.n	80173c4 <TIM_OC2_SetConfig+0xac>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	4a1b      	ldr	r2, [pc, #108]	@ (8017424 <TIM_OC2_SetConfig+0x10c>)
 80173b8:	4293      	cmp	r3, r2
 80173ba:	d003      	beq.n	80173c4 <TIM_OC2_SetConfig+0xac>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	4a1a      	ldr	r2, [pc, #104]	@ (8017428 <TIM_OC2_SetConfig+0x110>)
 80173c0:	4293      	cmp	r3, r2
 80173c2:	d113      	bne.n	80173ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80173c4:	693b      	ldr	r3, [r7, #16]
 80173c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80173ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80173cc:	693b      	ldr	r3, [r7, #16]
 80173ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80173d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	695b      	ldr	r3, [r3, #20]
 80173d8:	009b      	lsls	r3, r3, #2
 80173da:	693a      	ldr	r2, [r7, #16]
 80173dc:	4313      	orrs	r3, r2
 80173de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	699b      	ldr	r3, [r3, #24]
 80173e4:	009b      	lsls	r3, r3, #2
 80173e6:	693a      	ldr	r2, [r7, #16]
 80173e8:	4313      	orrs	r3, r2
 80173ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	693a      	ldr	r2, [r7, #16]
 80173f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	68fa      	ldr	r2, [r7, #12]
 80173f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80173f8:	683b      	ldr	r3, [r7, #0]
 80173fa:	685a      	ldr	r2, [r3, #4]
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	697a      	ldr	r2, [r7, #20]
 8017404:	621a      	str	r2, [r3, #32]
}
 8017406:	bf00      	nop
 8017408:	371c      	adds	r7, #28
 801740a:	46bd      	mov	sp, r7
 801740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017410:	4770      	bx	lr
 8017412:	bf00      	nop
 8017414:	feff8fff 	.word	0xfeff8fff
 8017418:	40010000 	.word	0x40010000
 801741c:	40010400 	.word	0x40010400
 8017420:	40014000 	.word	0x40014000
 8017424:	40014400 	.word	0x40014400
 8017428:	40014800 	.word	0x40014800

0801742c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801742c:	b480      	push	{r7}
 801742e:	b087      	sub	sp, #28
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	6a1b      	ldr	r3, [r3, #32]
 801743a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6a1b      	ldr	r3, [r3, #32]
 8017440:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	69db      	ldr	r3, [r3, #28]
 8017452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	4b33      	ldr	r3, [pc, #204]	@ (8017524 <TIM_OC3_SetConfig+0xf8>)
 8017458:	4013      	ands	r3, r2
 801745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	f023 0303 	bic.w	r3, r3, #3
 8017462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	68fa      	ldr	r2, [r7, #12]
 801746a:	4313      	orrs	r3, r2
 801746c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	689b      	ldr	r3, [r3, #8]
 801747a:	021b      	lsls	r3, r3, #8
 801747c:	697a      	ldr	r2, [r7, #20]
 801747e:	4313      	orrs	r3, r2
 8017480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	4a28      	ldr	r2, [pc, #160]	@ (8017528 <TIM_OC3_SetConfig+0xfc>)
 8017486:	4293      	cmp	r3, r2
 8017488:	d003      	beq.n	8017492 <TIM_OC3_SetConfig+0x66>
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	4a27      	ldr	r2, [pc, #156]	@ (801752c <TIM_OC3_SetConfig+0x100>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d10d      	bne.n	80174ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	021b      	lsls	r3, r3, #8
 80174a0:	697a      	ldr	r2, [r7, #20]
 80174a2:	4313      	orrs	r3, r2
 80174a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80174a6:	697b      	ldr	r3, [r7, #20]
 80174a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80174ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	4a1d      	ldr	r2, [pc, #116]	@ (8017528 <TIM_OC3_SetConfig+0xfc>)
 80174b2:	4293      	cmp	r3, r2
 80174b4:	d00f      	beq.n	80174d6 <TIM_OC3_SetConfig+0xaa>
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	4a1c      	ldr	r2, [pc, #112]	@ (801752c <TIM_OC3_SetConfig+0x100>)
 80174ba:	4293      	cmp	r3, r2
 80174bc:	d00b      	beq.n	80174d6 <TIM_OC3_SetConfig+0xaa>
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	4a1b      	ldr	r2, [pc, #108]	@ (8017530 <TIM_OC3_SetConfig+0x104>)
 80174c2:	4293      	cmp	r3, r2
 80174c4:	d007      	beq.n	80174d6 <TIM_OC3_SetConfig+0xaa>
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	4a1a      	ldr	r2, [pc, #104]	@ (8017534 <TIM_OC3_SetConfig+0x108>)
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d003      	beq.n	80174d6 <TIM_OC3_SetConfig+0xaa>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	4a19      	ldr	r2, [pc, #100]	@ (8017538 <TIM_OC3_SetConfig+0x10c>)
 80174d2:	4293      	cmp	r3, r2
 80174d4:	d113      	bne.n	80174fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80174dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80174e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	695b      	ldr	r3, [r3, #20]
 80174ea:	011b      	lsls	r3, r3, #4
 80174ec:	693a      	ldr	r2, [r7, #16]
 80174ee:	4313      	orrs	r3, r2
 80174f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	699b      	ldr	r3, [r3, #24]
 80174f6:	011b      	lsls	r3, r3, #4
 80174f8:	693a      	ldr	r2, [r7, #16]
 80174fa:	4313      	orrs	r3, r2
 80174fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	693a      	ldr	r2, [r7, #16]
 8017502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	685a      	ldr	r2, [r3, #4]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	697a      	ldr	r2, [r7, #20]
 8017516:	621a      	str	r2, [r3, #32]
}
 8017518:	bf00      	nop
 801751a:	371c      	adds	r7, #28
 801751c:	46bd      	mov	sp, r7
 801751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017522:	4770      	bx	lr
 8017524:	fffeff8f 	.word	0xfffeff8f
 8017528:	40010000 	.word	0x40010000
 801752c:	40010400 	.word	0x40010400
 8017530:	40014000 	.word	0x40014000
 8017534:	40014400 	.word	0x40014400
 8017538:	40014800 	.word	0x40014800

0801753c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801753c:	b480      	push	{r7}
 801753e:	b087      	sub	sp, #28
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6a1b      	ldr	r3, [r3, #32]
 801754a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	6a1b      	ldr	r3, [r3, #32]
 8017550:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	69db      	ldr	r3, [r3, #28]
 8017562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017564:	68fa      	ldr	r2, [r7, #12]
 8017566:	4b24      	ldr	r3, [pc, #144]	@ (80175f8 <TIM_OC4_SetConfig+0xbc>)
 8017568:	4013      	ands	r3, r2
 801756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	021b      	lsls	r3, r3, #8
 801757a:	68fa      	ldr	r2, [r7, #12]
 801757c:	4313      	orrs	r3, r2
 801757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	689b      	ldr	r3, [r3, #8]
 801758c:	031b      	lsls	r3, r3, #12
 801758e:	693a      	ldr	r2, [r7, #16]
 8017590:	4313      	orrs	r3, r2
 8017592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	4a19      	ldr	r2, [pc, #100]	@ (80175fc <TIM_OC4_SetConfig+0xc0>)
 8017598:	4293      	cmp	r3, r2
 801759a:	d00f      	beq.n	80175bc <TIM_OC4_SetConfig+0x80>
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	4a18      	ldr	r2, [pc, #96]	@ (8017600 <TIM_OC4_SetConfig+0xc4>)
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d00b      	beq.n	80175bc <TIM_OC4_SetConfig+0x80>
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	4a17      	ldr	r2, [pc, #92]	@ (8017604 <TIM_OC4_SetConfig+0xc8>)
 80175a8:	4293      	cmp	r3, r2
 80175aa:	d007      	beq.n	80175bc <TIM_OC4_SetConfig+0x80>
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	4a16      	ldr	r2, [pc, #88]	@ (8017608 <TIM_OC4_SetConfig+0xcc>)
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d003      	beq.n	80175bc <TIM_OC4_SetConfig+0x80>
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	4a15      	ldr	r2, [pc, #84]	@ (801760c <TIM_OC4_SetConfig+0xd0>)
 80175b8:	4293      	cmp	r3, r2
 80175ba:	d109      	bne.n	80175d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80175c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	695b      	ldr	r3, [r3, #20]
 80175c8:	019b      	lsls	r3, r3, #6
 80175ca:	697a      	ldr	r2, [r7, #20]
 80175cc:	4313      	orrs	r3, r2
 80175ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	697a      	ldr	r2, [r7, #20]
 80175d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	68fa      	ldr	r2, [r7, #12]
 80175da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	685a      	ldr	r2, [r3, #4]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	693a      	ldr	r2, [r7, #16]
 80175e8:	621a      	str	r2, [r3, #32]
}
 80175ea:	bf00      	nop
 80175ec:	371c      	adds	r7, #28
 80175ee:	46bd      	mov	sp, r7
 80175f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f4:	4770      	bx	lr
 80175f6:	bf00      	nop
 80175f8:	feff8fff 	.word	0xfeff8fff
 80175fc:	40010000 	.word	0x40010000
 8017600:	40010400 	.word	0x40010400
 8017604:	40014000 	.word	0x40014000
 8017608:	40014400 	.word	0x40014400
 801760c:	40014800 	.word	0x40014800

08017610 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017610:	b480      	push	{r7}
 8017612:	b087      	sub	sp, #28
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	6a1b      	ldr	r3, [r3, #32]
 801761e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6a1b      	ldr	r3, [r3, #32]
 8017624:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	685b      	ldr	r3, [r3, #4]
 8017630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017638:	68fa      	ldr	r2, [r7, #12]
 801763a:	4b21      	ldr	r3, [pc, #132]	@ (80176c0 <TIM_OC5_SetConfig+0xb0>)
 801763c:	4013      	ands	r3, r2
 801763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	68fa      	ldr	r2, [r7, #12]
 8017646:	4313      	orrs	r3, r2
 8017648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	689b      	ldr	r3, [r3, #8]
 8017656:	041b      	lsls	r3, r3, #16
 8017658:	693a      	ldr	r2, [r7, #16]
 801765a:	4313      	orrs	r3, r2
 801765c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	4a18      	ldr	r2, [pc, #96]	@ (80176c4 <TIM_OC5_SetConfig+0xb4>)
 8017662:	4293      	cmp	r3, r2
 8017664:	d00f      	beq.n	8017686 <TIM_OC5_SetConfig+0x76>
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	4a17      	ldr	r2, [pc, #92]	@ (80176c8 <TIM_OC5_SetConfig+0xb8>)
 801766a:	4293      	cmp	r3, r2
 801766c:	d00b      	beq.n	8017686 <TIM_OC5_SetConfig+0x76>
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	4a16      	ldr	r2, [pc, #88]	@ (80176cc <TIM_OC5_SetConfig+0xbc>)
 8017672:	4293      	cmp	r3, r2
 8017674:	d007      	beq.n	8017686 <TIM_OC5_SetConfig+0x76>
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4a15      	ldr	r2, [pc, #84]	@ (80176d0 <TIM_OC5_SetConfig+0xc0>)
 801767a:	4293      	cmp	r3, r2
 801767c:	d003      	beq.n	8017686 <TIM_OC5_SetConfig+0x76>
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	4a14      	ldr	r2, [pc, #80]	@ (80176d4 <TIM_OC5_SetConfig+0xc4>)
 8017682:	4293      	cmp	r3, r2
 8017684:	d109      	bne.n	801769a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801768c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	695b      	ldr	r3, [r3, #20]
 8017692:	021b      	lsls	r3, r3, #8
 8017694:	697a      	ldr	r2, [r7, #20]
 8017696:	4313      	orrs	r3, r2
 8017698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	697a      	ldr	r2, [r7, #20]
 801769e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	68fa      	ldr	r2, [r7, #12]
 80176a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	685a      	ldr	r2, [r3, #4]
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	693a      	ldr	r2, [r7, #16]
 80176b2:	621a      	str	r2, [r3, #32]
}
 80176b4:	bf00      	nop
 80176b6:	371c      	adds	r7, #28
 80176b8:	46bd      	mov	sp, r7
 80176ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176be:	4770      	bx	lr
 80176c0:	fffeff8f 	.word	0xfffeff8f
 80176c4:	40010000 	.word	0x40010000
 80176c8:	40010400 	.word	0x40010400
 80176cc:	40014000 	.word	0x40014000
 80176d0:	40014400 	.word	0x40014400
 80176d4:	40014800 	.word	0x40014800

080176d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80176d8:	b480      	push	{r7}
 80176da:	b087      	sub	sp, #28
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	6a1b      	ldr	r3, [r3, #32]
 80176e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	6a1b      	ldr	r3, [r3, #32]
 80176ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	685b      	ldr	r3, [r3, #4]
 80176f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017700:	68fa      	ldr	r2, [r7, #12]
 8017702:	4b22      	ldr	r3, [pc, #136]	@ (801778c <TIM_OC6_SetConfig+0xb4>)
 8017704:	4013      	ands	r3, r2
 8017706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	021b      	lsls	r3, r3, #8
 801770e:	68fa      	ldr	r2, [r7, #12]
 8017710:	4313      	orrs	r3, r2
 8017712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017714:	693b      	ldr	r3, [r7, #16]
 8017716:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	689b      	ldr	r3, [r3, #8]
 8017720:	051b      	lsls	r3, r3, #20
 8017722:	693a      	ldr	r2, [r7, #16]
 8017724:	4313      	orrs	r3, r2
 8017726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	4a19      	ldr	r2, [pc, #100]	@ (8017790 <TIM_OC6_SetConfig+0xb8>)
 801772c:	4293      	cmp	r3, r2
 801772e:	d00f      	beq.n	8017750 <TIM_OC6_SetConfig+0x78>
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	4a18      	ldr	r2, [pc, #96]	@ (8017794 <TIM_OC6_SetConfig+0xbc>)
 8017734:	4293      	cmp	r3, r2
 8017736:	d00b      	beq.n	8017750 <TIM_OC6_SetConfig+0x78>
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	4a17      	ldr	r2, [pc, #92]	@ (8017798 <TIM_OC6_SetConfig+0xc0>)
 801773c:	4293      	cmp	r3, r2
 801773e:	d007      	beq.n	8017750 <TIM_OC6_SetConfig+0x78>
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	4a16      	ldr	r2, [pc, #88]	@ (801779c <TIM_OC6_SetConfig+0xc4>)
 8017744:	4293      	cmp	r3, r2
 8017746:	d003      	beq.n	8017750 <TIM_OC6_SetConfig+0x78>
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	4a15      	ldr	r2, [pc, #84]	@ (80177a0 <TIM_OC6_SetConfig+0xc8>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d109      	bne.n	8017764 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017750:	697b      	ldr	r3, [r7, #20]
 8017752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	695b      	ldr	r3, [r3, #20]
 801775c:	029b      	lsls	r3, r3, #10
 801775e:	697a      	ldr	r2, [r7, #20]
 8017760:	4313      	orrs	r3, r2
 8017762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	697a      	ldr	r2, [r7, #20]
 8017768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	68fa      	ldr	r2, [r7, #12]
 801776e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	685a      	ldr	r2, [r3, #4]
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	693a      	ldr	r2, [r7, #16]
 801777c:	621a      	str	r2, [r3, #32]
}
 801777e:	bf00      	nop
 8017780:	371c      	adds	r7, #28
 8017782:	46bd      	mov	sp, r7
 8017784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017788:	4770      	bx	lr
 801778a:	bf00      	nop
 801778c:	feff8fff 	.word	0xfeff8fff
 8017790:	40010000 	.word	0x40010000
 8017794:	40010400 	.word	0x40010400
 8017798:	40014000 	.word	0x40014000
 801779c:	40014400 	.word	0x40014400
 80177a0:	40014800 	.word	0x40014800

080177a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80177a4:	b480      	push	{r7}
 80177a6:	b087      	sub	sp, #28
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
 80177b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	6a1b      	ldr	r3, [r3, #32]
 80177b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	6a1b      	ldr	r3, [r3, #32]
 80177bc:	f023 0201 	bic.w	r2, r3, #1
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	699b      	ldr	r3, [r3, #24]
 80177c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	4a2c      	ldr	r2, [pc, #176]	@ (8017880 <TIM_TI1_SetConfig+0xdc>)
 80177ce:	4293      	cmp	r3, r2
 80177d0:	d023      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80177d8:	d01f      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	4a29      	ldr	r2, [pc, #164]	@ (8017884 <TIM_TI1_SetConfig+0xe0>)
 80177de:	4293      	cmp	r3, r2
 80177e0:	d01b      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	4a28      	ldr	r2, [pc, #160]	@ (8017888 <TIM_TI1_SetConfig+0xe4>)
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d017      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	4a27      	ldr	r2, [pc, #156]	@ (801788c <TIM_TI1_SetConfig+0xe8>)
 80177ee:	4293      	cmp	r3, r2
 80177f0:	d013      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	4a26      	ldr	r2, [pc, #152]	@ (8017890 <TIM_TI1_SetConfig+0xec>)
 80177f6:	4293      	cmp	r3, r2
 80177f8:	d00f      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	4a25      	ldr	r2, [pc, #148]	@ (8017894 <TIM_TI1_SetConfig+0xf0>)
 80177fe:	4293      	cmp	r3, r2
 8017800:	d00b      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	4a24      	ldr	r2, [pc, #144]	@ (8017898 <TIM_TI1_SetConfig+0xf4>)
 8017806:	4293      	cmp	r3, r2
 8017808:	d007      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	4a23      	ldr	r2, [pc, #140]	@ (801789c <TIM_TI1_SetConfig+0xf8>)
 801780e:	4293      	cmp	r3, r2
 8017810:	d003      	beq.n	801781a <TIM_TI1_SetConfig+0x76>
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	4a22      	ldr	r2, [pc, #136]	@ (80178a0 <TIM_TI1_SetConfig+0xfc>)
 8017816:	4293      	cmp	r3, r2
 8017818:	d101      	bne.n	801781e <TIM_TI1_SetConfig+0x7a>
 801781a:	2301      	movs	r3, #1
 801781c:	e000      	b.n	8017820 <TIM_TI1_SetConfig+0x7c>
 801781e:	2300      	movs	r3, #0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d008      	beq.n	8017836 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	f023 0303 	bic.w	r3, r3, #3
 801782a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801782c:	697a      	ldr	r2, [r7, #20]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	4313      	orrs	r3, r2
 8017832:	617b      	str	r3, [r7, #20]
 8017834:	e003      	b.n	801783e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	f043 0301 	orr.w	r3, r3, #1
 801783c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801783e:	697b      	ldr	r3, [r7, #20]
 8017840:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	011b      	lsls	r3, r3, #4
 801784a:	b2db      	uxtb	r3, r3
 801784c:	697a      	ldr	r2, [r7, #20]
 801784e:	4313      	orrs	r3, r2
 8017850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017852:	693b      	ldr	r3, [r7, #16]
 8017854:	f023 030a 	bic.w	r3, r3, #10
 8017858:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	f003 030a 	and.w	r3, r3, #10
 8017860:	693a      	ldr	r2, [r7, #16]
 8017862:	4313      	orrs	r3, r2
 8017864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	697a      	ldr	r2, [r7, #20]
 801786a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	693a      	ldr	r2, [r7, #16]
 8017870:	621a      	str	r2, [r3, #32]
}
 8017872:	bf00      	nop
 8017874:	371c      	adds	r7, #28
 8017876:	46bd      	mov	sp, r7
 8017878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787c:	4770      	bx	lr
 801787e:	bf00      	nop
 8017880:	40010000 	.word	0x40010000
 8017884:	40000400 	.word	0x40000400
 8017888:	40000800 	.word	0x40000800
 801788c:	40000c00 	.word	0x40000c00
 8017890:	40010400 	.word	0x40010400
 8017894:	40001800 	.word	0x40001800
 8017898:	40014000 	.word	0x40014000
 801789c:	4000e000 	.word	0x4000e000
 80178a0:	4000e400 	.word	0x4000e400

080178a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80178a4:	b480      	push	{r7}
 80178a6:	b087      	sub	sp, #28
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	60f8      	str	r0, [r7, #12]
 80178ac:	60b9      	str	r1, [r7, #8]
 80178ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	6a1b      	ldr	r3, [r3, #32]
 80178b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	6a1b      	ldr	r3, [r3, #32]
 80178ba:	f023 0201 	bic.w	r2, r3, #1
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	699b      	ldr	r3, [r3, #24]
 80178c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178c8:	693b      	ldr	r3, [r7, #16]
 80178ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	011b      	lsls	r3, r3, #4
 80178d4:	693a      	ldr	r2, [r7, #16]
 80178d6:	4313      	orrs	r3, r2
 80178d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178da:	697b      	ldr	r3, [r7, #20]
 80178dc:	f023 030a 	bic.w	r3, r3, #10
 80178e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80178e2:	697a      	ldr	r2, [r7, #20]
 80178e4:	68bb      	ldr	r3, [r7, #8]
 80178e6:	4313      	orrs	r3, r2
 80178e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	693a      	ldr	r2, [r7, #16]
 80178ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	697a      	ldr	r2, [r7, #20]
 80178f4:	621a      	str	r2, [r3, #32]
}
 80178f6:	bf00      	nop
 80178f8:	371c      	adds	r7, #28
 80178fa:	46bd      	mov	sp, r7
 80178fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017900:	4770      	bx	lr

08017902 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017902:	b480      	push	{r7}
 8017904:	b087      	sub	sp, #28
 8017906:	af00      	add	r7, sp, #0
 8017908:	60f8      	str	r0, [r7, #12]
 801790a:	60b9      	str	r1, [r7, #8]
 801790c:	607a      	str	r2, [r7, #4]
 801790e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	6a1b      	ldr	r3, [r3, #32]
 8017914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	6a1b      	ldr	r3, [r3, #32]
 801791a:	f023 0210 	bic.w	r2, r3, #16
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	699b      	ldr	r3, [r3, #24]
 8017926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017928:	693b      	ldr	r3, [r7, #16]
 801792a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801792e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	021b      	lsls	r3, r3, #8
 8017934:	693a      	ldr	r2, [r7, #16]
 8017936:	4313      	orrs	r3, r2
 8017938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801793a:	693b      	ldr	r3, [r7, #16]
 801793c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	031b      	lsls	r3, r3, #12
 8017946:	b29b      	uxth	r3, r3
 8017948:	693a      	ldr	r2, [r7, #16]
 801794a:	4313      	orrs	r3, r2
 801794c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017954:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	011b      	lsls	r3, r3, #4
 801795a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801795e:	697a      	ldr	r2, [r7, #20]
 8017960:	4313      	orrs	r3, r2
 8017962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	693a      	ldr	r2, [r7, #16]
 8017968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	697a      	ldr	r2, [r7, #20]
 801796e:	621a      	str	r2, [r3, #32]
}
 8017970:	bf00      	nop
 8017972:	371c      	adds	r7, #28
 8017974:	46bd      	mov	sp, r7
 8017976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797a:	4770      	bx	lr

0801797c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801797c:	b480      	push	{r7}
 801797e:	b087      	sub	sp, #28
 8017980:	af00      	add	r7, sp, #0
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	6a1b      	ldr	r3, [r3, #32]
 801798c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	6a1b      	ldr	r3, [r3, #32]
 8017992:	f023 0210 	bic.w	r2, r3, #16
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	699b      	ldr	r3, [r3, #24]
 801799e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179a0:	693b      	ldr	r3, [r7, #16]
 80179a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	031b      	lsls	r3, r3, #12
 80179ac:	693a      	ldr	r2, [r7, #16]
 80179ae:	4313      	orrs	r3, r2
 80179b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80179b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	011b      	lsls	r3, r3, #4
 80179be:	697a      	ldr	r2, [r7, #20]
 80179c0:	4313      	orrs	r3, r2
 80179c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	693a      	ldr	r2, [r7, #16]
 80179c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	697a      	ldr	r2, [r7, #20]
 80179ce:	621a      	str	r2, [r3, #32]
}
 80179d0:	bf00      	nop
 80179d2:	371c      	adds	r7, #28
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr

080179dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80179dc:	b480      	push	{r7}
 80179de:	b087      	sub	sp, #28
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	60b9      	str	r1, [r7, #8]
 80179e6:	607a      	str	r2, [r7, #4]
 80179e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	6a1b      	ldr	r3, [r3, #32]
 80179ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	6a1b      	ldr	r3, [r3, #32]
 80179f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	69db      	ldr	r3, [r3, #28]
 8017a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	f023 0303 	bic.w	r3, r3, #3
 8017a08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017a0a:	693a      	ldr	r2, [r7, #16]
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	4313      	orrs	r3, r2
 8017a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017a12:	693b      	ldr	r3, [r7, #16]
 8017a14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017a18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	011b      	lsls	r3, r3, #4
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	693a      	ldr	r2, [r7, #16]
 8017a22:	4313      	orrs	r3, r2
 8017a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	021b      	lsls	r3, r3, #8
 8017a32:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017a36:	697a      	ldr	r2, [r7, #20]
 8017a38:	4313      	orrs	r3, r2
 8017a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	693a      	ldr	r2, [r7, #16]
 8017a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	697a      	ldr	r2, [r7, #20]
 8017a46:	621a      	str	r2, [r3, #32]
}
 8017a48:	bf00      	nop
 8017a4a:	371c      	adds	r7, #28
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr

08017a54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a54:	b480      	push	{r7}
 8017a56:	b087      	sub	sp, #28
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	60f8      	str	r0, [r7, #12]
 8017a5c:	60b9      	str	r1, [r7, #8]
 8017a5e:	607a      	str	r2, [r7, #4]
 8017a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	6a1b      	ldr	r3, [r3, #32]
 8017a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	6a1b      	ldr	r3, [r3, #32]
 8017a6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	69db      	ldr	r3, [r3, #28]
 8017a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017a7a:	693b      	ldr	r3, [r7, #16]
 8017a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017a80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	021b      	lsls	r3, r3, #8
 8017a86:	693a      	ldr	r2, [r7, #16]
 8017a88:	4313      	orrs	r3, r2
 8017a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017a8c:	693b      	ldr	r3, [r7, #16]
 8017a8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a92:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	031b      	lsls	r3, r3, #12
 8017a98:	b29b      	uxth	r3, r3
 8017a9a:	693a      	ldr	r2, [r7, #16]
 8017a9c:	4313      	orrs	r3, r2
 8017a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	031b      	lsls	r3, r3, #12
 8017aac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017ab0:	697a      	ldr	r2, [r7, #20]
 8017ab2:	4313      	orrs	r3, r2
 8017ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	693a      	ldr	r2, [r7, #16]
 8017aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	697a      	ldr	r2, [r7, #20]
 8017ac0:	621a      	str	r2, [r3, #32]
}
 8017ac2:	bf00      	nop
 8017ac4:	371c      	adds	r7, #28
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr
	...

08017ad0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b085      	sub	sp, #20
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	689b      	ldr	r3, [r3, #8]
 8017ade:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017ae0:	68fa      	ldr	r2, [r7, #12]
 8017ae2:	4b09      	ldr	r3, [pc, #36]	@ (8017b08 <TIM_ITRx_SetConfig+0x38>)
 8017ae4:	4013      	ands	r3, r2
 8017ae6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017ae8:	683a      	ldr	r2, [r7, #0]
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	4313      	orrs	r3, r2
 8017aee:	f043 0307 	orr.w	r3, r3, #7
 8017af2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	68fa      	ldr	r2, [r7, #12]
 8017af8:	609a      	str	r2, [r3, #8]
}
 8017afa:	bf00      	nop
 8017afc:	3714      	adds	r7, #20
 8017afe:	46bd      	mov	sp, r7
 8017b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b04:	4770      	bx	lr
 8017b06:	bf00      	nop
 8017b08:	ffcfff8f 	.word	0xffcfff8f

08017b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b087      	sub	sp, #28
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
 8017b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017b20:	697b      	ldr	r3, [r7, #20]
 8017b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	021a      	lsls	r2, r3, #8
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	431a      	orrs	r2, r3
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	4313      	orrs	r3, r2
 8017b34:	697a      	ldr	r2, [r7, #20]
 8017b36:	4313      	orrs	r3, r2
 8017b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	697a      	ldr	r2, [r7, #20]
 8017b3e:	609a      	str	r2, [r3, #8]
}
 8017b40:	bf00      	nop
 8017b42:	371c      	adds	r7, #28
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr

08017b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b087      	sub	sp, #28
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	60f8      	str	r0, [r7, #12]
 8017b54:	60b9      	str	r1, [r7, #8]
 8017b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	f003 031f 	and.w	r3, r3, #31
 8017b5e:	2201      	movs	r2, #1
 8017b60:	fa02 f303 	lsl.w	r3, r2, r3
 8017b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	6a1a      	ldr	r2, [r3, #32]
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	43db      	mvns	r3, r3
 8017b6e:	401a      	ands	r2, r3
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	6a1a      	ldr	r2, [r3, #32]
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	f003 031f 	and.w	r3, r3, #31
 8017b7e:	6879      	ldr	r1, [r7, #4]
 8017b80:	fa01 f303 	lsl.w	r3, r1, r3
 8017b84:	431a      	orrs	r2, r3
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	621a      	str	r2, [r3, #32]
}
 8017b8a:	bf00      	nop
 8017b8c:	371c      	adds	r7, #28
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b94:	4770      	bx	lr
	...

08017b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b085      	sub	sp, #20
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017ba8:	2b01      	cmp	r3, #1
 8017baa:	d101      	bne.n	8017bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017bac:	2302      	movs	r3, #2
 8017bae:	e077      	b.n	8017ca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2201      	movs	r2, #1
 8017bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2202      	movs	r2, #2
 8017bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	685b      	ldr	r3, [r3, #4]
 8017bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	689b      	ldr	r3, [r3, #8]
 8017bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	4a35      	ldr	r2, [pc, #212]	@ (8017cac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017bd6:	4293      	cmp	r3, r2
 8017bd8:	d004      	beq.n	8017be4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4a34      	ldr	r2, [pc, #208]	@ (8017cb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017be0:	4293      	cmp	r3, r2
 8017be2:	d108      	bne.n	8017bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	68fa      	ldr	r2, [r7, #12]
 8017bf2:	4313      	orrs	r3, r2
 8017bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017bfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	68fa      	ldr	r2, [r7, #12]
 8017c04:	4313      	orrs	r3, r2
 8017c06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	68fa      	ldr	r2, [r7, #12]
 8017c0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	4a25      	ldr	r2, [pc, #148]	@ (8017cac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c16:	4293      	cmp	r3, r2
 8017c18:	d02c      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c22:	d027      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	4a22      	ldr	r2, [pc, #136]	@ (8017cb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017c2a:	4293      	cmp	r3, r2
 8017c2c:	d022      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	4a21      	ldr	r2, [pc, #132]	@ (8017cb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017c34:	4293      	cmp	r3, r2
 8017c36:	d01d      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8017cbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	d018      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	4a1a      	ldr	r2, [pc, #104]	@ (8017cb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c48:	4293      	cmp	r3, r2
 8017c4a:	d013      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	4a1b      	ldr	r2, [pc, #108]	@ (8017cc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017c52:	4293      	cmp	r3, r2
 8017c54:	d00e      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8017cc4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017c5c:	4293      	cmp	r3, r2
 8017c5e:	d009      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	4a18      	ldr	r2, [pc, #96]	@ (8017cc8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017c66:	4293      	cmp	r3, r2
 8017c68:	d004      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	4a17      	ldr	r2, [pc, #92]	@ (8017ccc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017c70:	4293      	cmp	r3, r2
 8017c72:	d10c      	bne.n	8017c8e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017c74:	68bb      	ldr	r3, [r7, #8]
 8017c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017c7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	689b      	ldr	r3, [r3, #8]
 8017c80:	68ba      	ldr	r2, [r7, #8]
 8017c82:	4313      	orrs	r3, r2
 8017c84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	68ba      	ldr	r2, [r7, #8]
 8017c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2201      	movs	r2, #1
 8017c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2200      	movs	r2, #0
 8017c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017c9e:	2300      	movs	r3, #0
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3714      	adds	r7, #20
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017caa:	4770      	bx	lr
 8017cac:	40010000 	.word	0x40010000
 8017cb0:	40010400 	.word	0x40010400
 8017cb4:	40000400 	.word	0x40000400
 8017cb8:	40000800 	.word	0x40000800
 8017cbc:	40000c00 	.word	0x40000c00
 8017cc0:	40001800 	.word	0x40001800
 8017cc4:	40014000 	.word	0x40014000
 8017cc8:	4000e000 	.word	0x4000e000
 8017ccc:	4000e400 	.word	0x4000e400

08017cd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017cd0:	b480      	push	{r7}
 8017cd2:	b085      	sub	sp, #20
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	d101      	bne.n	8017cec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017ce8:	2302      	movs	r3, #2
 8017cea:	e073      	b.n	8017dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2201      	movs	r2, #1
 8017cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	68db      	ldr	r3, [r3, #12]
 8017cfe:	4313      	orrs	r3, r2
 8017d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	689b      	ldr	r3, [r3, #8]
 8017d0c:	4313      	orrs	r3, r2
 8017d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	4313      	orrs	r3, r2
 8017d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	4313      	orrs	r3, r2
 8017d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	691b      	ldr	r3, [r3, #16]
 8017d36:	4313      	orrs	r3, r2
 8017d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017d40:	683b      	ldr	r3, [r7, #0]
 8017d42:	695b      	ldr	r3, [r3, #20]
 8017d44:	4313      	orrs	r3, r2
 8017d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017d4e:	683b      	ldr	r3, [r7, #0]
 8017d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d52:	4313      	orrs	r3, r2
 8017d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	699b      	ldr	r3, [r3, #24]
 8017d60:	041b      	lsls	r3, r3, #16
 8017d62:	4313      	orrs	r3, r2
 8017d64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	69db      	ldr	r3, [r3, #28]
 8017d70:	4313      	orrs	r3, r2
 8017d72:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	4a19      	ldr	r2, [pc, #100]	@ (8017de0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d004      	beq.n	8017d88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	4a18      	ldr	r2, [pc, #96]	@ (8017de4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017d84:	4293      	cmp	r3, r2
 8017d86:	d11c      	bne.n	8017dc2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017d8e:	683b      	ldr	r3, [r7, #0]
 8017d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d92:	051b      	lsls	r3, r3, #20
 8017d94:	4313      	orrs	r3, r2
 8017d96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	6a1b      	ldr	r3, [r3, #32]
 8017da2:	4313      	orrs	r3, r2
 8017da4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017dac:	683b      	ldr	r3, [r7, #0]
 8017dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017db0:	4313      	orrs	r3, r2
 8017db2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dbe:	4313      	orrs	r3, r2
 8017dc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	68fa      	ldr	r2, [r7, #12]
 8017dc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2200      	movs	r2, #0
 8017dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017dd2:	2300      	movs	r3, #0
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3714      	adds	r7, #20
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr
 8017de0:	40010000 	.word	0x40010000
 8017de4:	40010400 	.word	0x40010400

08017de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017de8:	b480      	push	{r7}
 8017dea:	b083      	sub	sp, #12
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017df0:	bf00      	nop
 8017df2:	370c      	adds	r7, #12
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b083      	sub	sp, #12
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e04:	bf00      	nop
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr

08017e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017e18:	bf00      	nop
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr

08017e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d101      	bne.n	8017e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017e32:	2301      	movs	r3, #1
 8017e34:	e042      	b.n	8017ebc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d106      	bne.n	8017e4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	2200      	movs	r2, #0
 8017e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	f7f1 fa29 	bl	80092a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	2224      	movs	r2, #36	@ 0x24
 8017e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	681a      	ldr	r2, [r3, #0]
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f022 0201 	bic.w	r2, r2, #1
 8017e64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d002      	beq.n	8017e74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f001 fbf8 	bl	8019664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f000 fd89 	bl	801898c <UART_SetConfig>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	2b01      	cmp	r3, #1
 8017e7e:	d101      	bne.n	8017e84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017e80:	2301      	movs	r3, #1
 8017e82:	e01b      	b.n	8017ebc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	685a      	ldr	r2, [r3, #4]
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	689a      	ldr	r2, [r3, #8]
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	681a      	ldr	r2, [r3, #0]
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	f042 0201 	orr.w	r2, r2, #1
 8017eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f001 fc77 	bl	80197a8 <UART_CheckIdleState>
 8017eba:	4603      	mov	r3, r0
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	3708      	adds	r7, #8
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}

08017ec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b08a      	sub	sp, #40	@ 0x28
 8017ec8:	af02      	add	r7, sp, #8
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	60b9      	str	r1, [r7, #8]
 8017ece:	603b      	str	r3, [r7, #0]
 8017ed0:	4613      	mov	r3, r2
 8017ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017eda:	2b20      	cmp	r3, #32
 8017edc:	d17b      	bne.n	8017fd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d002      	beq.n	8017eea <HAL_UART_Transmit+0x26>
 8017ee4:	88fb      	ldrh	r3, [r7, #6]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d101      	bne.n	8017eee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017eea:	2301      	movs	r3, #1
 8017eec:	e074      	b.n	8017fd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	2221      	movs	r2, #33	@ 0x21
 8017efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017efe:	f7f1 faf1 	bl	80094e4 <HAL_GetTick>
 8017f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	88fa      	ldrh	r2, [r7, #6]
 8017f08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	88fa      	ldrh	r2, [r7, #6]
 8017f10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	689b      	ldr	r3, [r3, #8]
 8017f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017f1c:	d108      	bne.n	8017f30 <HAL_UART_Transmit+0x6c>
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	691b      	ldr	r3, [r3, #16]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d104      	bne.n	8017f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017f26:	2300      	movs	r3, #0
 8017f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	61bb      	str	r3, [r7, #24]
 8017f2e:	e003      	b.n	8017f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017f34:	2300      	movs	r3, #0
 8017f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017f38:	e030      	b.n	8017f9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	9300      	str	r3, [sp, #0]
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	2200      	movs	r2, #0
 8017f42:	2180      	movs	r1, #128	@ 0x80
 8017f44:	68f8      	ldr	r0, [r7, #12]
 8017f46:	f001 fcd9 	bl	80198fc <UART_WaitOnFlagUntilTimeout>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d005      	beq.n	8017f5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	2220      	movs	r2, #32
 8017f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017f58:	2303      	movs	r3, #3
 8017f5a:	e03d      	b.n	8017fd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017f5c:	69fb      	ldr	r3, [r7, #28]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d10b      	bne.n	8017f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017f62:	69bb      	ldr	r3, [r7, #24]
 8017f64:	881b      	ldrh	r3, [r3, #0]
 8017f66:	461a      	mov	r2, r3
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017f70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	3302      	adds	r3, #2
 8017f76:	61bb      	str	r3, [r7, #24]
 8017f78:	e007      	b.n	8017f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	781a      	ldrb	r2, [r3, #0]
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017f84:	69fb      	ldr	r3, [r7, #28]
 8017f86:	3301      	adds	r3, #1
 8017f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	3b01      	subs	r3, #1
 8017f94:	b29a      	uxth	r2, r3
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017fa2:	b29b      	uxth	r3, r3
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d1c8      	bne.n	8017f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	9300      	str	r3, [sp, #0]
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	2140      	movs	r1, #64	@ 0x40
 8017fb2:	68f8      	ldr	r0, [r7, #12]
 8017fb4:	f001 fca2 	bl	80198fc <UART_WaitOnFlagUntilTimeout>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d005      	beq.n	8017fca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	2220      	movs	r2, #32
 8017fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017fc6:	2303      	movs	r3, #3
 8017fc8:	e006      	b.n	8017fd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	2220      	movs	r2, #32
 8017fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	e000      	b.n	8017fd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017fd6:	2302      	movs	r3, #2
  }
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	3720      	adds	r7, #32
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017fe0:	b480      	push	{r7}
 8017fe2:	b091      	sub	sp, #68	@ 0x44
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	4613      	mov	r3, r2
 8017fec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ff4:	2b20      	cmp	r3, #32
 8017ff6:	d178      	bne.n	80180ea <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d002      	beq.n	8018004 <HAL_UART_Transmit_IT+0x24>
 8017ffe:	88fb      	ldrh	r3, [r7, #6]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d101      	bne.n	8018008 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8018004:	2301      	movs	r3, #1
 8018006:	e071      	b.n	80180ec <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	68ba      	ldr	r2, [r7, #8]
 801800c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	88fa      	ldrh	r2, [r7, #6]
 8018012:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	88fa      	ldrh	r2, [r7, #6]
 801801a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	2200      	movs	r2, #0
 8018022:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	2200      	movs	r2, #0
 8018028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	2221      	movs	r2, #33	@ 0x21
 8018030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801803c:	d12a      	bne.n	8018094 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	689b      	ldr	r3, [r3, #8]
 8018042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018046:	d107      	bne.n	8018058 <HAL_UART_Transmit_IT+0x78>
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	691b      	ldr	r3, [r3, #16]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d103      	bne.n	8018058 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	4a29      	ldr	r2, [pc, #164]	@ (80180f8 <HAL_UART_Transmit_IT+0x118>)
 8018054:	679a      	str	r2, [r3, #120]	@ 0x78
 8018056:	e002      	b.n	801805e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	4a28      	ldr	r2, [pc, #160]	@ (80180fc <HAL_UART_Transmit_IT+0x11c>)
 801805c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	3308      	adds	r3, #8
 8018064:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018068:	e853 3f00 	ldrex	r3, [r3]
 801806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018070:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018074:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	3308      	adds	r3, #8
 801807c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801807e:	637a      	str	r2, [r7, #52]	@ 0x34
 8018080:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018086:	e841 2300 	strex	r3, r2, [r1]
 801808a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801808e:	2b00      	cmp	r3, #0
 8018090:	d1e5      	bne.n	801805e <HAL_UART_Transmit_IT+0x7e>
 8018092:	e028      	b.n	80180e6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	689b      	ldr	r3, [r3, #8]
 8018098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801809c:	d107      	bne.n	80180ae <HAL_UART_Transmit_IT+0xce>
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	691b      	ldr	r3, [r3, #16]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d103      	bne.n	80180ae <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	4a15      	ldr	r2, [pc, #84]	@ (8018100 <HAL_UART_Transmit_IT+0x120>)
 80180aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80180ac:	e002      	b.n	80180b4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	4a14      	ldr	r2, [pc, #80]	@ (8018104 <HAL_UART_Transmit_IT+0x124>)
 80180b2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180ba:	697b      	ldr	r3, [r7, #20]
 80180bc:	e853 3f00 	ldrex	r3, [r3]
 80180c0:	613b      	str	r3, [r7, #16]
   return(result);
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80180c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	461a      	mov	r2, r3
 80180d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180d2:	623b      	str	r3, [r7, #32]
 80180d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180d6:	69f9      	ldr	r1, [r7, #28]
 80180d8:	6a3a      	ldr	r2, [r7, #32]
 80180da:	e841 2300 	strex	r3, r2, [r1]
 80180de:	61bb      	str	r3, [r7, #24]
   return(result);
 80180e0:	69bb      	ldr	r3, [r7, #24]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d1e6      	bne.n	80180b4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80180e6:	2300      	movs	r3, #0
 80180e8:	e000      	b.n	80180ec <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80180ea:	2302      	movs	r3, #2
  }
}
 80180ec:	4618      	mov	r0, r3
 80180ee:	3744      	adds	r7, #68	@ 0x44
 80180f0:	46bd      	mov	sp, r7
 80180f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f6:	4770      	bx	lr
 80180f8:	08019f67 	.word	0x08019f67
 80180fc:	08019e87 	.word	0x08019e87
 8018100:	08019dc5 	.word	0x08019dc5
 8018104:	08019d0d 	.word	0x08019d0d

08018108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b08a      	sub	sp, #40	@ 0x28
 801810c:	af00      	add	r7, sp, #0
 801810e:	60f8      	str	r0, [r7, #12]
 8018110:	60b9      	str	r1, [r7, #8]
 8018112:	4613      	mov	r3, r2
 8018114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801811c:	2b20      	cmp	r3, #32
 801811e:	d137      	bne.n	8018190 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d002      	beq.n	801812c <HAL_UART_Receive_IT+0x24>
 8018126:	88fb      	ldrh	r3, [r7, #6]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d101      	bne.n	8018130 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801812c:	2301      	movs	r3, #1
 801812e:	e030      	b.n	8018192 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	2200      	movs	r2, #0
 8018134:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	4a18      	ldr	r2, [pc, #96]	@ (801819c <HAL_UART_Receive_IT+0x94>)
 801813c:	4293      	cmp	r3, r2
 801813e:	d01f      	beq.n	8018180 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801814a:	2b00      	cmp	r3, #0
 801814c:	d018      	beq.n	8018180 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	e853 3f00 	ldrex	r3, [r3]
 801815a:	613b      	str	r3, [r7, #16]
   return(result);
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018162:	627b      	str	r3, [r7, #36]	@ 0x24
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	461a      	mov	r2, r3
 801816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801816c:	623b      	str	r3, [r7, #32]
 801816e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018170:	69f9      	ldr	r1, [r7, #28]
 8018172:	6a3a      	ldr	r2, [r7, #32]
 8018174:	e841 2300 	strex	r3, r2, [r1]
 8018178:	61bb      	str	r3, [r7, #24]
   return(result);
 801817a:	69bb      	ldr	r3, [r7, #24]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d1e6      	bne.n	801814e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018180:	88fb      	ldrh	r3, [r7, #6]
 8018182:	461a      	mov	r2, r3
 8018184:	68b9      	ldr	r1, [r7, #8]
 8018186:	68f8      	ldr	r0, [r7, #12]
 8018188:	f001 fc26 	bl	80199d8 <UART_Start_Receive_IT>
 801818c:	4603      	mov	r3, r0
 801818e:	e000      	b.n	8018192 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018190:	2302      	movs	r3, #2
  }
}
 8018192:	4618      	mov	r0, r3
 8018194:	3728      	adds	r7, #40	@ 0x28
 8018196:	46bd      	mov	sp, r7
 8018198:	bd80      	pop	{r7, pc}
 801819a:	bf00      	nop
 801819c:	58000c00 	.word	0x58000c00

080181a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b0ba      	sub	sp, #232	@ 0xe8
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	69db      	ldr	r3, [r3, #28]
 80181ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	689b      	ldr	r3, [r3, #8]
 80181c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80181c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80181ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80181ce:	4013      	ands	r3, r2
 80181d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80181d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d11b      	bne.n	8018214 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80181dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80181e0:	f003 0320 	and.w	r3, r3, #32
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d015      	beq.n	8018214 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80181e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80181ec:	f003 0320 	and.w	r3, r3, #32
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d105      	bne.n	8018200 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80181f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80181f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d009      	beq.n	8018214 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018204:	2b00      	cmp	r3, #0
 8018206:	f000 8393 	beq.w	8018930 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	4798      	blx	r3
      }
      return;
 8018212:	e38d      	b.n	8018930 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018218:	2b00      	cmp	r3, #0
 801821a:	f000 8123 	beq.w	8018464 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801821e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018222:	4b8d      	ldr	r3, [pc, #564]	@ (8018458 <HAL_UART_IRQHandler+0x2b8>)
 8018224:	4013      	ands	r3, r2
 8018226:	2b00      	cmp	r3, #0
 8018228:	d106      	bne.n	8018238 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801822a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801822e:	4b8b      	ldr	r3, [pc, #556]	@ (801845c <HAL_UART_IRQHandler+0x2bc>)
 8018230:	4013      	ands	r3, r2
 8018232:	2b00      	cmp	r3, #0
 8018234:	f000 8116 	beq.w	8018464 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801823c:	f003 0301 	and.w	r3, r3, #1
 8018240:	2b00      	cmp	r3, #0
 8018242:	d011      	beq.n	8018268 <HAL_UART_IRQHandler+0xc8>
 8018244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801824c:	2b00      	cmp	r3, #0
 801824e:	d00b      	beq.n	8018268 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2201      	movs	r2, #1
 8018256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801825e:	f043 0201 	orr.w	r2, r3, #1
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801826c:	f003 0302 	and.w	r3, r3, #2
 8018270:	2b00      	cmp	r3, #0
 8018272:	d011      	beq.n	8018298 <HAL_UART_IRQHandler+0xf8>
 8018274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018278:	f003 0301 	and.w	r3, r3, #1
 801827c:	2b00      	cmp	r3, #0
 801827e:	d00b      	beq.n	8018298 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	2202      	movs	r2, #2
 8018286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801828e:	f043 0204 	orr.w	r2, r3, #4
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801829c:	f003 0304 	and.w	r3, r3, #4
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d011      	beq.n	80182c8 <HAL_UART_IRQHandler+0x128>
 80182a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182a8:	f003 0301 	and.w	r3, r3, #1
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d00b      	beq.n	80182c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	2204      	movs	r2, #4
 80182b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182be:	f043 0202 	orr.w	r2, r3, #2
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80182c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182cc:	f003 0308 	and.w	r3, r3, #8
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d017      	beq.n	8018304 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80182d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182d8:	f003 0320 	and.w	r3, r3, #32
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d105      	bne.n	80182ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80182e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182e4:	4b5c      	ldr	r3, [pc, #368]	@ (8018458 <HAL_UART_IRQHandler+0x2b8>)
 80182e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d00b      	beq.n	8018304 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2208      	movs	r2, #8
 80182f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182fa:	f043 0208 	orr.w	r2, r3, #8
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801830c:	2b00      	cmp	r3, #0
 801830e:	d012      	beq.n	8018336 <HAL_UART_IRQHandler+0x196>
 8018310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018314:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018318:	2b00      	cmp	r3, #0
 801831a:	d00c      	beq.n	8018336 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801832c:	f043 0220 	orr.w	r2, r3, #32
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801833c:	2b00      	cmp	r3, #0
 801833e:	f000 82f9 	beq.w	8018934 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018346:	f003 0320 	and.w	r3, r3, #32
 801834a:	2b00      	cmp	r3, #0
 801834c:	d013      	beq.n	8018376 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801834e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018352:	f003 0320 	and.w	r3, r3, #32
 8018356:	2b00      	cmp	r3, #0
 8018358:	d105      	bne.n	8018366 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801835e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018362:	2b00      	cmp	r3, #0
 8018364:	d007      	beq.n	8018376 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801836a:	2b00      	cmp	r3, #0
 801836c:	d003      	beq.n	8018376 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018372:	6878      	ldr	r0, [r7, #4]
 8018374:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801837c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	689b      	ldr	r3, [r3, #8]
 8018386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801838a:	2b40      	cmp	r3, #64	@ 0x40
 801838c:	d005      	beq.n	801839a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801838e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018392:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018396:	2b00      	cmp	r3, #0
 8018398:	d054      	beq.n	8018444 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f001 fc3e 	bl	8019c1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	689b      	ldr	r3, [r3, #8]
 80183a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80183aa:	2b40      	cmp	r3, #64	@ 0x40
 80183ac:	d146      	bne.n	801843c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	3308      	adds	r3, #8
 80183b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80183bc:	e853 3f00 	ldrex	r3, [r3]
 80183c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80183c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80183c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80183cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	3308      	adds	r3, #8
 80183d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80183da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80183de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80183e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80183ea:	e841 2300 	strex	r3, r2, [r1]
 80183ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80183f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d1d9      	bne.n	80183ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018400:	2b00      	cmp	r3, #0
 8018402:	d017      	beq.n	8018434 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801840a:	4a15      	ldr	r2, [pc, #84]	@ (8018460 <HAL_UART_IRQHandler+0x2c0>)
 801840c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018414:	4618      	mov	r0, r3
 8018416:	f7f4 fa7b 	bl	800c910 <HAL_DMA_Abort_IT>
 801841a:	4603      	mov	r3, r0
 801841c:	2b00      	cmp	r3, #0
 801841e:	d019      	beq.n	8018454 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018428:	687a      	ldr	r2, [r7, #4]
 801842a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801842e:	4610      	mov	r0, r2
 8018430:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018432:	e00f      	b.n	8018454 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018434:	6878      	ldr	r0, [r7, #4]
 8018436:	f000 fa93 	bl	8018960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801843a:	e00b      	b.n	8018454 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801843c:	6878      	ldr	r0, [r7, #4]
 801843e:	f000 fa8f 	bl	8018960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018442:	e007      	b.n	8018454 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f000 fa8b 	bl	8018960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	2200      	movs	r2, #0
 801844e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8018452:	e26f      	b.n	8018934 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018454:	bf00      	nop
    return;
 8018456:	e26d      	b.n	8018934 <HAL_UART_IRQHandler+0x794>
 8018458:	10000001 	.word	0x10000001
 801845c:	04000120 	.word	0x04000120
 8018460:	08019ce9 	.word	0x08019ce9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018468:	2b01      	cmp	r3, #1
 801846a:	f040 8203 	bne.w	8018874 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801846e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018472:	f003 0310 	and.w	r3, r3, #16
 8018476:	2b00      	cmp	r3, #0
 8018478:	f000 81fc 	beq.w	8018874 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801847c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018480:	f003 0310 	and.w	r3, r3, #16
 8018484:	2b00      	cmp	r3, #0
 8018486:	f000 81f5 	beq.w	8018874 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	2210      	movs	r2, #16
 8018490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	689b      	ldr	r3, [r3, #8]
 8018498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801849c:	2b40      	cmp	r3, #64	@ 0x40
 801849e:	f040 816d 	bne.w	801877c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	4aa4      	ldr	r2, [pc, #656]	@ (801873c <HAL_UART_IRQHandler+0x59c>)
 80184ac:	4293      	cmp	r3, r2
 80184ae:	d068      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4aa1      	ldr	r2, [pc, #644]	@ (8018740 <HAL_UART_IRQHandler+0x5a0>)
 80184ba:	4293      	cmp	r3, r2
 80184bc:	d061      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	4a9f      	ldr	r2, [pc, #636]	@ (8018744 <HAL_UART_IRQHandler+0x5a4>)
 80184c8:	4293      	cmp	r3, r2
 80184ca:	d05a      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	4a9c      	ldr	r2, [pc, #624]	@ (8018748 <HAL_UART_IRQHandler+0x5a8>)
 80184d6:	4293      	cmp	r3, r2
 80184d8:	d053      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	4a9a      	ldr	r2, [pc, #616]	@ (801874c <HAL_UART_IRQHandler+0x5ac>)
 80184e4:	4293      	cmp	r3, r2
 80184e6:	d04c      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	4a97      	ldr	r2, [pc, #604]	@ (8018750 <HAL_UART_IRQHandler+0x5b0>)
 80184f2:	4293      	cmp	r3, r2
 80184f4:	d045      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4a95      	ldr	r2, [pc, #596]	@ (8018754 <HAL_UART_IRQHandler+0x5b4>)
 8018500:	4293      	cmp	r3, r2
 8018502:	d03e      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	4a92      	ldr	r2, [pc, #584]	@ (8018758 <HAL_UART_IRQHandler+0x5b8>)
 801850e:	4293      	cmp	r3, r2
 8018510:	d037      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	4a90      	ldr	r2, [pc, #576]	@ (801875c <HAL_UART_IRQHandler+0x5bc>)
 801851c:	4293      	cmp	r3, r2
 801851e:	d030      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	4a8d      	ldr	r2, [pc, #564]	@ (8018760 <HAL_UART_IRQHandler+0x5c0>)
 801852a:	4293      	cmp	r3, r2
 801852c:	d029      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	4a8b      	ldr	r2, [pc, #556]	@ (8018764 <HAL_UART_IRQHandler+0x5c4>)
 8018538:	4293      	cmp	r3, r2
 801853a:	d022      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	4a88      	ldr	r2, [pc, #544]	@ (8018768 <HAL_UART_IRQHandler+0x5c8>)
 8018546:	4293      	cmp	r3, r2
 8018548:	d01b      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	4a86      	ldr	r2, [pc, #536]	@ (801876c <HAL_UART_IRQHandler+0x5cc>)
 8018554:	4293      	cmp	r3, r2
 8018556:	d014      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	4a83      	ldr	r2, [pc, #524]	@ (8018770 <HAL_UART_IRQHandler+0x5d0>)
 8018562:	4293      	cmp	r3, r2
 8018564:	d00d      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	4a81      	ldr	r2, [pc, #516]	@ (8018774 <HAL_UART_IRQHandler+0x5d4>)
 8018570:	4293      	cmp	r3, r2
 8018572:	d006      	beq.n	8018582 <HAL_UART_IRQHandler+0x3e2>
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	4a7e      	ldr	r2, [pc, #504]	@ (8018778 <HAL_UART_IRQHandler+0x5d8>)
 801857e:	4293      	cmp	r3, r2
 8018580:	d106      	bne.n	8018590 <HAL_UART_IRQHandler+0x3f0>
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	685b      	ldr	r3, [r3, #4]
 801858c:	b29b      	uxth	r3, r3
 801858e:	e005      	b.n	801859c <HAL_UART_IRQHandler+0x3fc>
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	b29b      	uxth	r3, r3
 801859c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80185a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f000 80ad 	beq.w	8018704 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80185b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80185b4:	429a      	cmp	r2, r3
 80185b6:	f080 80a5 	bcs.w	8018704 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80185c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ca:	69db      	ldr	r3, [r3, #28]
 80185cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80185d0:	f000 8087 	beq.w	80186e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80185e0:	e853 3f00 	ldrex	r3, [r3]
 80185e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80185e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80185ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80185f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	461a      	mov	r2, r3
 80185fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80185fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018602:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018606:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801860a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801860e:	e841 2300 	strex	r3, r2, [r1]
 8018612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8018616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801861a:	2b00      	cmp	r3, #0
 801861c:	d1da      	bne.n	80185d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	3308      	adds	r3, #8
 8018624:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018628:	e853 3f00 	ldrex	r3, [r3]
 801862c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801862e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018630:	f023 0301 	bic.w	r3, r3, #1
 8018634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	3308      	adds	r3, #8
 801863e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8018642:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8018646:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801864a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801864e:	e841 2300 	strex	r3, r2, [r1]
 8018652:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8018654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018656:	2b00      	cmp	r3, #0
 8018658:	d1e1      	bne.n	801861e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	3308      	adds	r3, #8
 8018660:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018664:	e853 3f00 	ldrex	r3, [r3]
 8018668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801866a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801866c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	3308      	adds	r3, #8
 801867a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801867e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018686:	e841 2300 	strex	r3, r2, [r1]
 801868a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801868c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801868e:	2b00      	cmp	r3, #0
 8018690:	d1e3      	bne.n	801865a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	2220      	movs	r2, #32
 8018696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	2200      	movs	r2, #0
 801869e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80186a8:	e853 3f00 	ldrex	r3, [r3]
 80186ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80186ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80186b0:	f023 0310 	bic.w	r3, r3, #16
 80186b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	461a      	mov	r2, r3
 80186be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80186c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80186c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80186c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186ca:	e841 2300 	strex	r3, r2, [r1]
 80186ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80186d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d1e4      	bne.n	80186a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80186dc:	4618      	mov	r0, r3
 80186de:	f7f3 fdf9 	bl	800c2d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2202      	movs	r2, #2
 80186e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80186f4:	b29b      	uxth	r3, r3
 80186f6:	1ad3      	subs	r3, r2, r3
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	4619      	mov	r1, r3
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f000 f939 	bl	8018974 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8018702:	e119      	b.n	8018938 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801870a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801870e:	429a      	cmp	r2, r3
 8018710:	f040 8112 	bne.w	8018938 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801871a:	69db      	ldr	r3, [r3, #28]
 801871c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018720:	f040 810a 	bne.w	8018938 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2202      	movs	r2, #2
 8018728:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018730:	4619      	mov	r1, r3
 8018732:	6878      	ldr	r0, [r7, #4]
 8018734:	f000 f91e 	bl	8018974 <HAL_UARTEx_RxEventCallback>
      return;
 8018738:	e0fe      	b.n	8018938 <HAL_UART_IRQHandler+0x798>
 801873a:	bf00      	nop
 801873c:	40020010 	.word	0x40020010
 8018740:	40020028 	.word	0x40020028
 8018744:	40020040 	.word	0x40020040
 8018748:	40020058 	.word	0x40020058
 801874c:	40020070 	.word	0x40020070
 8018750:	40020088 	.word	0x40020088
 8018754:	400200a0 	.word	0x400200a0
 8018758:	400200b8 	.word	0x400200b8
 801875c:	40020410 	.word	0x40020410
 8018760:	40020428 	.word	0x40020428
 8018764:	40020440 	.word	0x40020440
 8018768:	40020458 	.word	0x40020458
 801876c:	40020470 	.word	0x40020470
 8018770:	40020488 	.word	0x40020488
 8018774:	400204a0 	.word	0x400204a0
 8018778:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018788:	b29b      	uxth	r3, r3
 801878a:	1ad3      	subs	r3, r2, r3
 801878c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018796:	b29b      	uxth	r3, r3
 8018798:	2b00      	cmp	r3, #0
 801879a:	f000 80cf 	beq.w	801893c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801879e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	f000 80ca 	beq.w	801893c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187b0:	e853 3f00 	ldrex	r3, [r3]
 80187b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80187b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80187bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	461a      	mov	r2, r3
 80187c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80187ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80187cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80187d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80187d2:	e841 2300 	strex	r3, r2, [r1]
 80187d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80187d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d1e4      	bne.n	80187a8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	3308      	adds	r3, #8
 80187e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187e8:	e853 3f00 	ldrex	r3, [r3]
 80187ec:	623b      	str	r3, [r7, #32]
   return(result);
 80187ee:	6a3a      	ldr	r2, [r7, #32]
 80187f0:	4b55      	ldr	r3, [pc, #340]	@ (8018948 <HAL_UART_IRQHandler+0x7a8>)
 80187f2:	4013      	ands	r3, r2
 80187f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	3308      	adds	r3, #8
 80187fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018802:	633a      	str	r2, [r7, #48]	@ 0x30
 8018804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801880a:	e841 2300 	strex	r3, r2, [r1]
 801880e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018812:	2b00      	cmp	r3, #0
 8018814:	d1e3      	bne.n	80187de <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	2220      	movs	r2, #32
 801881a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	2200      	movs	r2, #0
 8018822:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	2200      	movs	r2, #0
 8018828:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	e853 3f00 	ldrex	r3, [r3]
 8018836:	60fb      	str	r3, [r7, #12]
   return(result);
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	f023 0310 	bic.w	r3, r3, #16
 801883e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	461a      	mov	r2, r3
 8018848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801884c:	61fb      	str	r3, [r7, #28]
 801884e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018850:	69b9      	ldr	r1, [r7, #24]
 8018852:	69fa      	ldr	r2, [r7, #28]
 8018854:	e841 2300 	strex	r3, r2, [r1]
 8018858:	617b      	str	r3, [r7, #20]
   return(result);
 801885a:	697b      	ldr	r3, [r7, #20]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d1e4      	bne.n	801882a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	2202      	movs	r2, #2
 8018864:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801886a:	4619      	mov	r1, r3
 801886c:	6878      	ldr	r0, [r7, #4]
 801886e:	f000 f881 	bl	8018974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018872:	e063      	b.n	801893c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801887c:	2b00      	cmp	r3, #0
 801887e:	d00e      	beq.n	801889e <HAL_UART_IRQHandler+0x6fe>
 8018880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018888:	2b00      	cmp	r3, #0
 801888a:	d008      	beq.n	801889e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f002 f926 	bl	801aae8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801889c:	e051      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d014      	beq.n	80188d4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80188aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d105      	bne.n	80188c2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80188b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80188ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d008      	beq.n	80188d4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d03a      	beq.n	8018940 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	4798      	blx	r3
    }
    return;
 80188d2:	e035      	b.n	8018940 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80188d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d009      	beq.n	80188f4 <HAL_UART_IRQHandler+0x754>
 80188e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d003      	beq.n	80188f4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f001 fbaf 	bl	801a050 <UART_EndTransmit_IT>
    return;
 80188f2:	e026      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80188f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d009      	beq.n	8018914 <HAL_UART_IRQHandler+0x774>
 8018900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018904:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018908:	2b00      	cmp	r3, #0
 801890a:	d003      	beq.n	8018914 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801890c:	6878      	ldr	r0, [r7, #4]
 801890e:	f002 f8ff 	bl	801ab10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018912:	e016      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801891c:	2b00      	cmp	r3, #0
 801891e:	d010      	beq.n	8018942 <HAL_UART_IRQHandler+0x7a2>
 8018920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018924:	2b00      	cmp	r3, #0
 8018926:	da0c      	bge.n	8018942 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f002 f8e7 	bl	801aafc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801892e:	e008      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018930:	bf00      	nop
 8018932:	e006      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018934:	bf00      	nop
 8018936:	e004      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018938:	bf00      	nop
 801893a:	e002      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
      return;
 801893c:	bf00      	nop
 801893e:	e000      	b.n	8018942 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018940:	bf00      	nop
  }
}
 8018942:	37e8      	adds	r7, #232	@ 0xe8
 8018944:	46bd      	mov	sp, r7
 8018946:	bd80      	pop	{r7, pc}
 8018948:	effffffe 	.word	0xeffffffe

0801894c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801894c:	b480      	push	{r7}
 801894e:	b083      	sub	sp, #12
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018954:	bf00      	nop
 8018956:	370c      	adds	r7, #12
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr

08018960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018960:	b480      	push	{r7}
 8018962:	b083      	sub	sp, #12
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018968:	bf00      	nop
 801896a:	370c      	adds	r7, #12
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr

08018974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018974:	b480      	push	{r7}
 8018976:	b083      	sub	sp, #12
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
 801897c:	460b      	mov	r3, r1
 801897e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018980:	bf00      	nop
 8018982:	370c      	adds	r7, #12
 8018984:	46bd      	mov	sp, r7
 8018986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898a:	4770      	bx	lr

0801898c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801898c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018990:	b092      	sub	sp, #72	@ 0x48
 8018992:	af00      	add	r7, sp, #0
 8018994:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018996:	2300      	movs	r3, #0
 8018998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801899c:	697b      	ldr	r3, [r7, #20]
 801899e:	689a      	ldr	r2, [r3, #8]
 80189a0:	697b      	ldr	r3, [r7, #20]
 80189a2:	691b      	ldr	r3, [r3, #16]
 80189a4:	431a      	orrs	r2, r3
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	695b      	ldr	r3, [r3, #20]
 80189aa:	431a      	orrs	r2, r3
 80189ac:	697b      	ldr	r3, [r7, #20]
 80189ae:	69db      	ldr	r3, [r3, #28]
 80189b0:	4313      	orrs	r3, r2
 80189b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	681a      	ldr	r2, [r3, #0]
 80189ba:	4bbe      	ldr	r3, [pc, #760]	@ (8018cb4 <UART_SetConfig+0x328>)
 80189bc:	4013      	ands	r3, r2
 80189be:	697a      	ldr	r2, [r7, #20]
 80189c0:	6812      	ldr	r2, [r2, #0]
 80189c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80189c4:	430b      	orrs	r3, r1
 80189c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80189d2:	697b      	ldr	r3, [r7, #20]
 80189d4:	68da      	ldr	r2, [r3, #12]
 80189d6:	697b      	ldr	r3, [r7, #20]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	430a      	orrs	r2, r1
 80189dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	699b      	ldr	r3, [r3, #24]
 80189e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80189e4:	697b      	ldr	r3, [r7, #20]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	4ab3      	ldr	r2, [pc, #716]	@ (8018cb8 <UART_SetConfig+0x32c>)
 80189ea:	4293      	cmp	r3, r2
 80189ec:	d004      	beq.n	80189f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	6a1b      	ldr	r3, [r3, #32]
 80189f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80189f4:	4313      	orrs	r3, r2
 80189f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	689a      	ldr	r2, [r3, #8]
 80189fe:	4baf      	ldr	r3, [pc, #700]	@ (8018cbc <UART_SetConfig+0x330>)
 8018a00:	4013      	ands	r3, r2
 8018a02:	697a      	ldr	r2, [r7, #20]
 8018a04:	6812      	ldr	r2, [r2, #0]
 8018a06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a08:	430b      	orrs	r3, r1
 8018a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a12:	f023 010f 	bic.w	r1, r3, #15
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018a1a:	697b      	ldr	r3, [r7, #20]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	430a      	orrs	r2, r1
 8018a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018a22:	697b      	ldr	r3, [r7, #20]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	4aa6      	ldr	r2, [pc, #664]	@ (8018cc0 <UART_SetConfig+0x334>)
 8018a28:	4293      	cmp	r3, r2
 8018a2a:	d177      	bne.n	8018b1c <UART_SetConfig+0x190>
 8018a2c:	4ba5      	ldr	r3, [pc, #660]	@ (8018cc4 <UART_SetConfig+0x338>)
 8018a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018a34:	2b28      	cmp	r3, #40	@ 0x28
 8018a36:	d86d      	bhi.n	8018b14 <UART_SetConfig+0x188>
 8018a38:	a201      	add	r2, pc, #4	@ (adr r2, 8018a40 <UART_SetConfig+0xb4>)
 8018a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a3e:	bf00      	nop
 8018a40:	08018ae5 	.word	0x08018ae5
 8018a44:	08018b15 	.word	0x08018b15
 8018a48:	08018b15 	.word	0x08018b15
 8018a4c:	08018b15 	.word	0x08018b15
 8018a50:	08018b15 	.word	0x08018b15
 8018a54:	08018b15 	.word	0x08018b15
 8018a58:	08018b15 	.word	0x08018b15
 8018a5c:	08018b15 	.word	0x08018b15
 8018a60:	08018aed 	.word	0x08018aed
 8018a64:	08018b15 	.word	0x08018b15
 8018a68:	08018b15 	.word	0x08018b15
 8018a6c:	08018b15 	.word	0x08018b15
 8018a70:	08018b15 	.word	0x08018b15
 8018a74:	08018b15 	.word	0x08018b15
 8018a78:	08018b15 	.word	0x08018b15
 8018a7c:	08018b15 	.word	0x08018b15
 8018a80:	08018af5 	.word	0x08018af5
 8018a84:	08018b15 	.word	0x08018b15
 8018a88:	08018b15 	.word	0x08018b15
 8018a8c:	08018b15 	.word	0x08018b15
 8018a90:	08018b15 	.word	0x08018b15
 8018a94:	08018b15 	.word	0x08018b15
 8018a98:	08018b15 	.word	0x08018b15
 8018a9c:	08018b15 	.word	0x08018b15
 8018aa0:	08018afd 	.word	0x08018afd
 8018aa4:	08018b15 	.word	0x08018b15
 8018aa8:	08018b15 	.word	0x08018b15
 8018aac:	08018b15 	.word	0x08018b15
 8018ab0:	08018b15 	.word	0x08018b15
 8018ab4:	08018b15 	.word	0x08018b15
 8018ab8:	08018b15 	.word	0x08018b15
 8018abc:	08018b15 	.word	0x08018b15
 8018ac0:	08018b05 	.word	0x08018b05
 8018ac4:	08018b15 	.word	0x08018b15
 8018ac8:	08018b15 	.word	0x08018b15
 8018acc:	08018b15 	.word	0x08018b15
 8018ad0:	08018b15 	.word	0x08018b15
 8018ad4:	08018b15 	.word	0x08018b15
 8018ad8:	08018b15 	.word	0x08018b15
 8018adc:	08018b15 	.word	0x08018b15
 8018ae0:	08018b0d 	.word	0x08018b0d
 8018ae4:	2301      	movs	r3, #1
 8018ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aea:	e326      	b.n	801913a <UART_SetConfig+0x7ae>
 8018aec:	2304      	movs	r3, #4
 8018aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018af2:	e322      	b.n	801913a <UART_SetConfig+0x7ae>
 8018af4:	2308      	movs	r3, #8
 8018af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018afa:	e31e      	b.n	801913a <UART_SetConfig+0x7ae>
 8018afc:	2310      	movs	r3, #16
 8018afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b02:	e31a      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b04:	2320      	movs	r3, #32
 8018b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b0a:	e316      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b0c:	2340      	movs	r3, #64	@ 0x40
 8018b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b12:	e312      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b14:	2380      	movs	r3, #128	@ 0x80
 8018b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b1a:	e30e      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a69      	ldr	r2, [pc, #420]	@ (8018cc8 <UART_SetConfig+0x33c>)
 8018b22:	4293      	cmp	r3, r2
 8018b24:	d130      	bne.n	8018b88 <UART_SetConfig+0x1fc>
 8018b26:	4b67      	ldr	r3, [pc, #412]	@ (8018cc4 <UART_SetConfig+0x338>)
 8018b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b2a:	f003 0307 	and.w	r3, r3, #7
 8018b2e:	2b05      	cmp	r3, #5
 8018b30:	d826      	bhi.n	8018b80 <UART_SetConfig+0x1f4>
 8018b32:	a201      	add	r2, pc, #4	@ (adr r2, 8018b38 <UART_SetConfig+0x1ac>)
 8018b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b38:	08018b51 	.word	0x08018b51
 8018b3c:	08018b59 	.word	0x08018b59
 8018b40:	08018b61 	.word	0x08018b61
 8018b44:	08018b69 	.word	0x08018b69
 8018b48:	08018b71 	.word	0x08018b71
 8018b4c:	08018b79 	.word	0x08018b79
 8018b50:	2300      	movs	r3, #0
 8018b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b56:	e2f0      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b58:	2304      	movs	r3, #4
 8018b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b5e:	e2ec      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b60:	2308      	movs	r3, #8
 8018b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b66:	e2e8      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b68:	2310      	movs	r3, #16
 8018b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b6e:	e2e4      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b70:	2320      	movs	r3, #32
 8018b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b76:	e2e0      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b78:	2340      	movs	r3, #64	@ 0x40
 8018b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7e:	e2dc      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b80:	2380      	movs	r3, #128	@ 0x80
 8018b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b86:	e2d8      	b.n	801913a <UART_SetConfig+0x7ae>
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8018ccc <UART_SetConfig+0x340>)
 8018b8e:	4293      	cmp	r3, r2
 8018b90:	d130      	bne.n	8018bf4 <UART_SetConfig+0x268>
 8018b92:	4b4c      	ldr	r3, [pc, #304]	@ (8018cc4 <UART_SetConfig+0x338>)
 8018b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b96:	f003 0307 	and.w	r3, r3, #7
 8018b9a:	2b05      	cmp	r3, #5
 8018b9c:	d826      	bhi.n	8018bec <UART_SetConfig+0x260>
 8018b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8018ba4 <UART_SetConfig+0x218>)
 8018ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ba4:	08018bbd 	.word	0x08018bbd
 8018ba8:	08018bc5 	.word	0x08018bc5
 8018bac:	08018bcd 	.word	0x08018bcd
 8018bb0:	08018bd5 	.word	0x08018bd5
 8018bb4:	08018bdd 	.word	0x08018bdd
 8018bb8:	08018be5 	.word	0x08018be5
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bc2:	e2ba      	b.n	801913a <UART_SetConfig+0x7ae>
 8018bc4:	2304      	movs	r3, #4
 8018bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bca:	e2b6      	b.n	801913a <UART_SetConfig+0x7ae>
 8018bcc:	2308      	movs	r3, #8
 8018bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bd2:	e2b2      	b.n	801913a <UART_SetConfig+0x7ae>
 8018bd4:	2310      	movs	r3, #16
 8018bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bda:	e2ae      	b.n	801913a <UART_SetConfig+0x7ae>
 8018bdc:	2320      	movs	r3, #32
 8018bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be2:	e2aa      	b.n	801913a <UART_SetConfig+0x7ae>
 8018be4:	2340      	movs	r3, #64	@ 0x40
 8018be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bea:	e2a6      	b.n	801913a <UART_SetConfig+0x7ae>
 8018bec:	2380      	movs	r3, #128	@ 0x80
 8018bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf2:	e2a2      	b.n	801913a <UART_SetConfig+0x7ae>
 8018bf4:	697b      	ldr	r3, [r7, #20]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	4a35      	ldr	r2, [pc, #212]	@ (8018cd0 <UART_SetConfig+0x344>)
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	d130      	bne.n	8018c60 <UART_SetConfig+0x2d4>
 8018bfe:	4b31      	ldr	r3, [pc, #196]	@ (8018cc4 <UART_SetConfig+0x338>)
 8018c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c02:	f003 0307 	and.w	r3, r3, #7
 8018c06:	2b05      	cmp	r3, #5
 8018c08:	d826      	bhi.n	8018c58 <UART_SetConfig+0x2cc>
 8018c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8018c10 <UART_SetConfig+0x284>)
 8018c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c10:	08018c29 	.word	0x08018c29
 8018c14:	08018c31 	.word	0x08018c31
 8018c18:	08018c39 	.word	0x08018c39
 8018c1c:	08018c41 	.word	0x08018c41
 8018c20:	08018c49 	.word	0x08018c49
 8018c24:	08018c51 	.word	0x08018c51
 8018c28:	2300      	movs	r3, #0
 8018c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c2e:	e284      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c30:	2304      	movs	r3, #4
 8018c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c36:	e280      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c38:	2308      	movs	r3, #8
 8018c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c3e:	e27c      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c40:	2310      	movs	r3, #16
 8018c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c46:	e278      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c48:	2320      	movs	r3, #32
 8018c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c4e:	e274      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c50:	2340      	movs	r3, #64	@ 0x40
 8018c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c56:	e270      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c58:	2380      	movs	r3, #128	@ 0x80
 8018c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c5e:	e26c      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c60:	697b      	ldr	r3, [r7, #20]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4a1b      	ldr	r2, [pc, #108]	@ (8018cd4 <UART_SetConfig+0x348>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d142      	bne.n	8018cf0 <UART_SetConfig+0x364>
 8018c6a:	4b16      	ldr	r3, [pc, #88]	@ (8018cc4 <UART_SetConfig+0x338>)
 8018c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c6e:	f003 0307 	and.w	r3, r3, #7
 8018c72:	2b05      	cmp	r3, #5
 8018c74:	d838      	bhi.n	8018ce8 <UART_SetConfig+0x35c>
 8018c76:	a201      	add	r2, pc, #4	@ (adr r2, 8018c7c <UART_SetConfig+0x2f0>)
 8018c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c7c:	08018c95 	.word	0x08018c95
 8018c80:	08018c9d 	.word	0x08018c9d
 8018c84:	08018ca5 	.word	0x08018ca5
 8018c88:	08018cad 	.word	0x08018cad
 8018c8c:	08018cd9 	.word	0x08018cd9
 8018c90:	08018ce1 	.word	0x08018ce1
 8018c94:	2300      	movs	r3, #0
 8018c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c9a:	e24e      	b.n	801913a <UART_SetConfig+0x7ae>
 8018c9c:	2304      	movs	r3, #4
 8018c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ca2:	e24a      	b.n	801913a <UART_SetConfig+0x7ae>
 8018ca4:	2308      	movs	r3, #8
 8018ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018caa:	e246      	b.n	801913a <UART_SetConfig+0x7ae>
 8018cac:	2310      	movs	r3, #16
 8018cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cb2:	e242      	b.n	801913a <UART_SetConfig+0x7ae>
 8018cb4:	cfff69f3 	.word	0xcfff69f3
 8018cb8:	58000c00 	.word	0x58000c00
 8018cbc:	11fff4ff 	.word	0x11fff4ff
 8018cc0:	40011000 	.word	0x40011000
 8018cc4:	58024400 	.word	0x58024400
 8018cc8:	40004400 	.word	0x40004400
 8018ccc:	40004800 	.word	0x40004800
 8018cd0:	40004c00 	.word	0x40004c00
 8018cd4:	40005000 	.word	0x40005000
 8018cd8:	2320      	movs	r3, #32
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e22c      	b.n	801913a <UART_SetConfig+0x7ae>
 8018ce0:	2340      	movs	r3, #64	@ 0x40
 8018ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ce6:	e228      	b.n	801913a <UART_SetConfig+0x7ae>
 8018ce8:	2380      	movs	r3, #128	@ 0x80
 8018cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cee:	e224      	b.n	801913a <UART_SetConfig+0x7ae>
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	4ab1      	ldr	r2, [pc, #708]	@ (8018fbc <UART_SetConfig+0x630>)
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	d176      	bne.n	8018de8 <UART_SetConfig+0x45c>
 8018cfa:	4bb1      	ldr	r3, [pc, #708]	@ (8018fc0 <UART_SetConfig+0x634>)
 8018cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d02:	2b28      	cmp	r3, #40	@ 0x28
 8018d04:	d86c      	bhi.n	8018de0 <UART_SetConfig+0x454>
 8018d06:	a201      	add	r2, pc, #4	@ (adr r2, 8018d0c <UART_SetConfig+0x380>)
 8018d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d0c:	08018db1 	.word	0x08018db1
 8018d10:	08018de1 	.word	0x08018de1
 8018d14:	08018de1 	.word	0x08018de1
 8018d18:	08018de1 	.word	0x08018de1
 8018d1c:	08018de1 	.word	0x08018de1
 8018d20:	08018de1 	.word	0x08018de1
 8018d24:	08018de1 	.word	0x08018de1
 8018d28:	08018de1 	.word	0x08018de1
 8018d2c:	08018db9 	.word	0x08018db9
 8018d30:	08018de1 	.word	0x08018de1
 8018d34:	08018de1 	.word	0x08018de1
 8018d38:	08018de1 	.word	0x08018de1
 8018d3c:	08018de1 	.word	0x08018de1
 8018d40:	08018de1 	.word	0x08018de1
 8018d44:	08018de1 	.word	0x08018de1
 8018d48:	08018de1 	.word	0x08018de1
 8018d4c:	08018dc1 	.word	0x08018dc1
 8018d50:	08018de1 	.word	0x08018de1
 8018d54:	08018de1 	.word	0x08018de1
 8018d58:	08018de1 	.word	0x08018de1
 8018d5c:	08018de1 	.word	0x08018de1
 8018d60:	08018de1 	.word	0x08018de1
 8018d64:	08018de1 	.word	0x08018de1
 8018d68:	08018de1 	.word	0x08018de1
 8018d6c:	08018dc9 	.word	0x08018dc9
 8018d70:	08018de1 	.word	0x08018de1
 8018d74:	08018de1 	.word	0x08018de1
 8018d78:	08018de1 	.word	0x08018de1
 8018d7c:	08018de1 	.word	0x08018de1
 8018d80:	08018de1 	.word	0x08018de1
 8018d84:	08018de1 	.word	0x08018de1
 8018d88:	08018de1 	.word	0x08018de1
 8018d8c:	08018dd1 	.word	0x08018dd1
 8018d90:	08018de1 	.word	0x08018de1
 8018d94:	08018de1 	.word	0x08018de1
 8018d98:	08018de1 	.word	0x08018de1
 8018d9c:	08018de1 	.word	0x08018de1
 8018da0:	08018de1 	.word	0x08018de1
 8018da4:	08018de1 	.word	0x08018de1
 8018da8:	08018de1 	.word	0x08018de1
 8018dac:	08018dd9 	.word	0x08018dd9
 8018db0:	2301      	movs	r3, #1
 8018db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018db6:	e1c0      	b.n	801913a <UART_SetConfig+0x7ae>
 8018db8:	2304      	movs	r3, #4
 8018dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dbe:	e1bc      	b.n	801913a <UART_SetConfig+0x7ae>
 8018dc0:	2308      	movs	r3, #8
 8018dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dc6:	e1b8      	b.n	801913a <UART_SetConfig+0x7ae>
 8018dc8:	2310      	movs	r3, #16
 8018dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dce:	e1b4      	b.n	801913a <UART_SetConfig+0x7ae>
 8018dd0:	2320      	movs	r3, #32
 8018dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dd6:	e1b0      	b.n	801913a <UART_SetConfig+0x7ae>
 8018dd8:	2340      	movs	r3, #64	@ 0x40
 8018dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dde:	e1ac      	b.n	801913a <UART_SetConfig+0x7ae>
 8018de0:	2380      	movs	r3, #128	@ 0x80
 8018de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018de6:	e1a8      	b.n	801913a <UART_SetConfig+0x7ae>
 8018de8:	697b      	ldr	r3, [r7, #20]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	4a75      	ldr	r2, [pc, #468]	@ (8018fc4 <UART_SetConfig+0x638>)
 8018dee:	4293      	cmp	r3, r2
 8018df0:	d130      	bne.n	8018e54 <UART_SetConfig+0x4c8>
 8018df2:	4b73      	ldr	r3, [pc, #460]	@ (8018fc0 <UART_SetConfig+0x634>)
 8018df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018df6:	f003 0307 	and.w	r3, r3, #7
 8018dfa:	2b05      	cmp	r3, #5
 8018dfc:	d826      	bhi.n	8018e4c <UART_SetConfig+0x4c0>
 8018dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8018e04 <UART_SetConfig+0x478>)
 8018e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e04:	08018e1d 	.word	0x08018e1d
 8018e08:	08018e25 	.word	0x08018e25
 8018e0c:	08018e2d 	.word	0x08018e2d
 8018e10:	08018e35 	.word	0x08018e35
 8018e14:	08018e3d 	.word	0x08018e3d
 8018e18:	08018e45 	.word	0x08018e45
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e22:	e18a      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e24:	2304      	movs	r3, #4
 8018e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e2a:	e186      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e2c:	2308      	movs	r3, #8
 8018e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e32:	e182      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e34:	2310      	movs	r3, #16
 8018e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e3a:	e17e      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e3c:	2320      	movs	r3, #32
 8018e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e42:	e17a      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e44:	2340      	movs	r3, #64	@ 0x40
 8018e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e4a:	e176      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e4c:	2380      	movs	r3, #128	@ 0x80
 8018e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e52:	e172      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	4a5b      	ldr	r2, [pc, #364]	@ (8018fc8 <UART_SetConfig+0x63c>)
 8018e5a:	4293      	cmp	r3, r2
 8018e5c:	d130      	bne.n	8018ec0 <UART_SetConfig+0x534>
 8018e5e:	4b58      	ldr	r3, [pc, #352]	@ (8018fc0 <UART_SetConfig+0x634>)
 8018e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e62:	f003 0307 	and.w	r3, r3, #7
 8018e66:	2b05      	cmp	r3, #5
 8018e68:	d826      	bhi.n	8018eb8 <UART_SetConfig+0x52c>
 8018e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8018e70 <UART_SetConfig+0x4e4>)
 8018e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e70:	08018e89 	.word	0x08018e89
 8018e74:	08018e91 	.word	0x08018e91
 8018e78:	08018e99 	.word	0x08018e99
 8018e7c:	08018ea1 	.word	0x08018ea1
 8018e80:	08018ea9 	.word	0x08018ea9
 8018e84:	08018eb1 	.word	0x08018eb1
 8018e88:	2300      	movs	r3, #0
 8018e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e8e:	e154      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e90:	2304      	movs	r3, #4
 8018e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e96:	e150      	b.n	801913a <UART_SetConfig+0x7ae>
 8018e98:	2308      	movs	r3, #8
 8018e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e9e:	e14c      	b.n	801913a <UART_SetConfig+0x7ae>
 8018ea0:	2310      	movs	r3, #16
 8018ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ea6:	e148      	b.n	801913a <UART_SetConfig+0x7ae>
 8018ea8:	2320      	movs	r3, #32
 8018eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eae:	e144      	b.n	801913a <UART_SetConfig+0x7ae>
 8018eb0:	2340      	movs	r3, #64	@ 0x40
 8018eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eb6:	e140      	b.n	801913a <UART_SetConfig+0x7ae>
 8018eb8:	2380      	movs	r3, #128	@ 0x80
 8018eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ebe:	e13c      	b.n	801913a <UART_SetConfig+0x7ae>
 8018ec0:	697b      	ldr	r3, [r7, #20]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a41      	ldr	r2, [pc, #260]	@ (8018fcc <UART_SetConfig+0x640>)
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	f040 8082 	bne.w	8018fd0 <UART_SetConfig+0x644>
 8018ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8018fc0 <UART_SetConfig+0x634>)
 8018ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ed4:	2b28      	cmp	r3, #40	@ 0x28
 8018ed6:	d86d      	bhi.n	8018fb4 <UART_SetConfig+0x628>
 8018ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ee0 <UART_SetConfig+0x554>)
 8018eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ede:	bf00      	nop
 8018ee0:	08018f85 	.word	0x08018f85
 8018ee4:	08018fb5 	.word	0x08018fb5
 8018ee8:	08018fb5 	.word	0x08018fb5
 8018eec:	08018fb5 	.word	0x08018fb5
 8018ef0:	08018fb5 	.word	0x08018fb5
 8018ef4:	08018fb5 	.word	0x08018fb5
 8018ef8:	08018fb5 	.word	0x08018fb5
 8018efc:	08018fb5 	.word	0x08018fb5
 8018f00:	08018f8d 	.word	0x08018f8d
 8018f04:	08018fb5 	.word	0x08018fb5
 8018f08:	08018fb5 	.word	0x08018fb5
 8018f0c:	08018fb5 	.word	0x08018fb5
 8018f10:	08018fb5 	.word	0x08018fb5
 8018f14:	08018fb5 	.word	0x08018fb5
 8018f18:	08018fb5 	.word	0x08018fb5
 8018f1c:	08018fb5 	.word	0x08018fb5
 8018f20:	08018f95 	.word	0x08018f95
 8018f24:	08018fb5 	.word	0x08018fb5
 8018f28:	08018fb5 	.word	0x08018fb5
 8018f2c:	08018fb5 	.word	0x08018fb5
 8018f30:	08018fb5 	.word	0x08018fb5
 8018f34:	08018fb5 	.word	0x08018fb5
 8018f38:	08018fb5 	.word	0x08018fb5
 8018f3c:	08018fb5 	.word	0x08018fb5
 8018f40:	08018f9d 	.word	0x08018f9d
 8018f44:	08018fb5 	.word	0x08018fb5
 8018f48:	08018fb5 	.word	0x08018fb5
 8018f4c:	08018fb5 	.word	0x08018fb5
 8018f50:	08018fb5 	.word	0x08018fb5
 8018f54:	08018fb5 	.word	0x08018fb5
 8018f58:	08018fb5 	.word	0x08018fb5
 8018f5c:	08018fb5 	.word	0x08018fb5
 8018f60:	08018fa5 	.word	0x08018fa5
 8018f64:	08018fb5 	.word	0x08018fb5
 8018f68:	08018fb5 	.word	0x08018fb5
 8018f6c:	08018fb5 	.word	0x08018fb5
 8018f70:	08018fb5 	.word	0x08018fb5
 8018f74:	08018fb5 	.word	0x08018fb5
 8018f78:	08018fb5 	.word	0x08018fb5
 8018f7c:	08018fb5 	.word	0x08018fb5
 8018f80:	08018fad 	.word	0x08018fad
 8018f84:	2301      	movs	r3, #1
 8018f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f8a:	e0d6      	b.n	801913a <UART_SetConfig+0x7ae>
 8018f8c:	2304      	movs	r3, #4
 8018f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f92:	e0d2      	b.n	801913a <UART_SetConfig+0x7ae>
 8018f94:	2308      	movs	r3, #8
 8018f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f9a:	e0ce      	b.n	801913a <UART_SetConfig+0x7ae>
 8018f9c:	2310      	movs	r3, #16
 8018f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fa2:	e0ca      	b.n	801913a <UART_SetConfig+0x7ae>
 8018fa4:	2320      	movs	r3, #32
 8018fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018faa:	e0c6      	b.n	801913a <UART_SetConfig+0x7ae>
 8018fac:	2340      	movs	r3, #64	@ 0x40
 8018fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fb2:	e0c2      	b.n	801913a <UART_SetConfig+0x7ae>
 8018fb4:	2380      	movs	r3, #128	@ 0x80
 8018fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fba:	e0be      	b.n	801913a <UART_SetConfig+0x7ae>
 8018fbc:	40011400 	.word	0x40011400
 8018fc0:	58024400 	.word	0x58024400
 8018fc4:	40007800 	.word	0x40007800
 8018fc8:	40007c00 	.word	0x40007c00
 8018fcc:	40011800 	.word	0x40011800
 8018fd0:	697b      	ldr	r3, [r7, #20]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	4aad      	ldr	r2, [pc, #692]	@ (801928c <UART_SetConfig+0x900>)
 8018fd6:	4293      	cmp	r3, r2
 8018fd8:	d176      	bne.n	80190c8 <UART_SetConfig+0x73c>
 8018fda:	4bad      	ldr	r3, [pc, #692]	@ (8019290 <UART_SetConfig+0x904>)
 8018fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018fe2:	2b28      	cmp	r3, #40	@ 0x28
 8018fe4:	d86c      	bhi.n	80190c0 <UART_SetConfig+0x734>
 8018fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8018fec <UART_SetConfig+0x660>)
 8018fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fec:	08019091 	.word	0x08019091
 8018ff0:	080190c1 	.word	0x080190c1
 8018ff4:	080190c1 	.word	0x080190c1
 8018ff8:	080190c1 	.word	0x080190c1
 8018ffc:	080190c1 	.word	0x080190c1
 8019000:	080190c1 	.word	0x080190c1
 8019004:	080190c1 	.word	0x080190c1
 8019008:	080190c1 	.word	0x080190c1
 801900c:	08019099 	.word	0x08019099
 8019010:	080190c1 	.word	0x080190c1
 8019014:	080190c1 	.word	0x080190c1
 8019018:	080190c1 	.word	0x080190c1
 801901c:	080190c1 	.word	0x080190c1
 8019020:	080190c1 	.word	0x080190c1
 8019024:	080190c1 	.word	0x080190c1
 8019028:	080190c1 	.word	0x080190c1
 801902c:	080190a1 	.word	0x080190a1
 8019030:	080190c1 	.word	0x080190c1
 8019034:	080190c1 	.word	0x080190c1
 8019038:	080190c1 	.word	0x080190c1
 801903c:	080190c1 	.word	0x080190c1
 8019040:	080190c1 	.word	0x080190c1
 8019044:	080190c1 	.word	0x080190c1
 8019048:	080190c1 	.word	0x080190c1
 801904c:	080190a9 	.word	0x080190a9
 8019050:	080190c1 	.word	0x080190c1
 8019054:	080190c1 	.word	0x080190c1
 8019058:	080190c1 	.word	0x080190c1
 801905c:	080190c1 	.word	0x080190c1
 8019060:	080190c1 	.word	0x080190c1
 8019064:	080190c1 	.word	0x080190c1
 8019068:	080190c1 	.word	0x080190c1
 801906c:	080190b1 	.word	0x080190b1
 8019070:	080190c1 	.word	0x080190c1
 8019074:	080190c1 	.word	0x080190c1
 8019078:	080190c1 	.word	0x080190c1
 801907c:	080190c1 	.word	0x080190c1
 8019080:	080190c1 	.word	0x080190c1
 8019084:	080190c1 	.word	0x080190c1
 8019088:	080190c1 	.word	0x080190c1
 801908c:	080190b9 	.word	0x080190b9
 8019090:	2301      	movs	r3, #1
 8019092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019096:	e050      	b.n	801913a <UART_SetConfig+0x7ae>
 8019098:	2304      	movs	r3, #4
 801909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801909e:	e04c      	b.n	801913a <UART_SetConfig+0x7ae>
 80190a0:	2308      	movs	r3, #8
 80190a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190a6:	e048      	b.n	801913a <UART_SetConfig+0x7ae>
 80190a8:	2310      	movs	r3, #16
 80190aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190ae:	e044      	b.n	801913a <UART_SetConfig+0x7ae>
 80190b0:	2320      	movs	r3, #32
 80190b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190b6:	e040      	b.n	801913a <UART_SetConfig+0x7ae>
 80190b8:	2340      	movs	r3, #64	@ 0x40
 80190ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190be:	e03c      	b.n	801913a <UART_SetConfig+0x7ae>
 80190c0:	2380      	movs	r3, #128	@ 0x80
 80190c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190c6:	e038      	b.n	801913a <UART_SetConfig+0x7ae>
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	4a71      	ldr	r2, [pc, #452]	@ (8019294 <UART_SetConfig+0x908>)
 80190ce:	4293      	cmp	r3, r2
 80190d0:	d130      	bne.n	8019134 <UART_SetConfig+0x7a8>
 80190d2:	4b6f      	ldr	r3, [pc, #444]	@ (8019290 <UART_SetConfig+0x904>)
 80190d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80190d6:	f003 0307 	and.w	r3, r3, #7
 80190da:	2b05      	cmp	r3, #5
 80190dc:	d826      	bhi.n	801912c <UART_SetConfig+0x7a0>
 80190de:	a201      	add	r2, pc, #4	@ (adr r2, 80190e4 <UART_SetConfig+0x758>)
 80190e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190e4:	080190fd 	.word	0x080190fd
 80190e8:	08019105 	.word	0x08019105
 80190ec:	0801910d 	.word	0x0801910d
 80190f0:	08019115 	.word	0x08019115
 80190f4:	0801911d 	.word	0x0801911d
 80190f8:	08019125 	.word	0x08019125
 80190fc:	2302      	movs	r3, #2
 80190fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019102:	e01a      	b.n	801913a <UART_SetConfig+0x7ae>
 8019104:	2304      	movs	r3, #4
 8019106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801910a:	e016      	b.n	801913a <UART_SetConfig+0x7ae>
 801910c:	2308      	movs	r3, #8
 801910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019112:	e012      	b.n	801913a <UART_SetConfig+0x7ae>
 8019114:	2310      	movs	r3, #16
 8019116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801911a:	e00e      	b.n	801913a <UART_SetConfig+0x7ae>
 801911c:	2320      	movs	r3, #32
 801911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019122:	e00a      	b.n	801913a <UART_SetConfig+0x7ae>
 8019124:	2340      	movs	r3, #64	@ 0x40
 8019126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801912a:	e006      	b.n	801913a <UART_SetConfig+0x7ae>
 801912c:	2380      	movs	r3, #128	@ 0x80
 801912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019132:	e002      	b.n	801913a <UART_SetConfig+0x7ae>
 8019134:	2380      	movs	r3, #128	@ 0x80
 8019136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	4a55      	ldr	r2, [pc, #340]	@ (8019294 <UART_SetConfig+0x908>)
 8019140:	4293      	cmp	r3, r2
 8019142:	f040 80f8 	bne.w	8019336 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8019146:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801914a:	2b20      	cmp	r3, #32
 801914c:	dc46      	bgt.n	80191dc <UART_SetConfig+0x850>
 801914e:	2b02      	cmp	r3, #2
 8019150:	db75      	blt.n	801923e <UART_SetConfig+0x8b2>
 8019152:	3b02      	subs	r3, #2
 8019154:	2b1e      	cmp	r3, #30
 8019156:	d872      	bhi.n	801923e <UART_SetConfig+0x8b2>
 8019158:	a201      	add	r2, pc, #4	@ (adr r2, 8019160 <UART_SetConfig+0x7d4>)
 801915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801915e:	bf00      	nop
 8019160:	080191e3 	.word	0x080191e3
 8019164:	0801923f 	.word	0x0801923f
 8019168:	080191eb 	.word	0x080191eb
 801916c:	0801923f 	.word	0x0801923f
 8019170:	0801923f 	.word	0x0801923f
 8019174:	0801923f 	.word	0x0801923f
 8019178:	080191fb 	.word	0x080191fb
 801917c:	0801923f 	.word	0x0801923f
 8019180:	0801923f 	.word	0x0801923f
 8019184:	0801923f 	.word	0x0801923f
 8019188:	0801923f 	.word	0x0801923f
 801918c:	0801923f 	.word	0x0801923f
 8019190:	0801923f 	.word	0x0801923f
 8019194:	0801923f 	.word	0x0801923f
 8019198:	0801920b 	.word	0x0801920b
 801919c:	0801923f 	.word	0x0801923f
 80191a0:	0801923f 	.word	0x0801923f
 80191a4:	0801923f 	.word	0x0801923f
 80191a8:	0801923f 	.word	0x0801923f
 80191ac:	0801923f 	.word	0x0801923f
 80191b0:	0801923f 	.word	0x0801923f
 80191b4:	0801923f 	.word	0x0801923f
 80191b8:	0801923f 	.word	0x0801923f
 80191bc:	0801923f 	.word	0x0801923f
 80191c0:	0801923f 	.word	0x0801923f
 80191c4:	0801923f 	.word	0x0801923f
 80191c8:	0801923f 	.word	0x0801923f
 80191cc:	0801923f 	.word	0x0801923f
 80191d0:	0801923f 	.word	0x0801923f
 80191d4:	0801923f 	.word	0x0801923f
 80191d8:	08019231 	.word	0x08019231
 80191dc:	2b40      	cmp	r3, #64	@ 0x40
 80191de:	d02a      	beq.n	8019236 <UART_SetConfig+0x8aa>
 80191e0:	e02d      	b.n	801923e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80191e2:	f7fa fd8b 	bl	8013cfc <HAL_RCCEx_GetD3PCLK1Freq>
 80191e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80191e8:	e02f      	b.n	801924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80191ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7fa fd9a 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80191f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191f8:	e027      	b.n	801924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80191fa:	f107 0318 	add.w	r3, r7, #24
 80191fe:	4618      	mov	r0, r3
 8019200:	f7fa fee6 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019204:	69fb      	ldr	r3, [r7, #28]
 8019206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019208:	e01f      	b.n	801924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801920a:	4b21      	ldr	r3, [pc, #132]	@ (8019290 <UART_SetConfig+0x904>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	f003 0320 	and.w	r3, r3, #32
 8019212:	2b00      	cmp	r3, #0
 8019214:	d009      	beq.n	801922a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019216:	4b1e      	ldr	r3, [pc, #120]	@ (8019290 <UART_SetConfig+0x904>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	08db      	lsrs	r3, r3, #3
 801921c:	f003 0303 	and.w	r3, r3, #3
 8019220:	4a1d      	ldr	r2, [pc, #116]	@ (8019298 <UART_SetConfig+0x90c>)
 8019222:	fa22 f303 	lsr.w	r3, r2, r3
 8019226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019228:	e00f      	b.n	801924a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801922a:	4b1b      	ldr	r3, [pc, #108]	@ (8019298 <UART_SetConfig+0x90c>)
 801922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801922e:	e00c      	b.n	801924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019230:	4b1a      	ldr	r3, [pc, #104]	@ (801929c <UART_SetConfig+0x910>)
 8019232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019234:	e009      	b.n	801924a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801923c:	e005      	b.n	801924a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801923e:	2300      	movs	r3, #0
 8019240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019242:	2301      	movs	r3, #1
 8019244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801924c:	2b00      	cmp	r3, #0
 801924e:	f000 81ee 	beq.w	801962e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019252:	697b      	ldr	r3, [r7, #20]
 8019254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019256:	4a12      	ldr	r2, [pc, #72]	@ (80192a0 <UART_SetConfig+0x914>)
 8019258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801925c:	461a      	mov	r2, r3
 801925e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019260:	fbb3 f3f2 	udiv	r3, r3, r2
 8019264:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	685a      	ldr	r2, [r3, #4]
 801926a:	4613      	mov	r3, r2
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	4413      	add	r3, r2
 8019270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019272:	429a      	cmp	r2, r3
 8019274:	d305      	bcc.n	8019282 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019276:	697b      	ldr	r3, [r7, #20]
 8019278:	685b      	ldr	r3, [r3, #4]
 801927a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801927c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801927e:	429a      	cmp	r2, r3
 8019280:	d910      	bls.n	80192a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8019282:	2301      	movs	r3, #1
 8019284:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019288:	e1d1      	b.n	801962e <UART_SetConfig+0xca2>
 801928a:	bf00      	nop
 801928c:	40011c00 	.word	0x40011c00
 8019290:	58024400 	.word	0x58024400
 8019294:	58000c00 	.word	0x58000c00
 8019298:	03d09000 	.word	0x03d09000
 801929c:	003d0900 	.word	0x003d0900
 80192a0:	0801eb74 	.word	0x0801eb74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192a6:	2200      	movs	r2, #0
 80192a8:	60bb      	str	r3, [r7, #8]
 80192aa:	60fa      	str	r2, [r7, #12]
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192b0:	4ac0      	ldr	r2, [pc, #768]	@ (80195b4 <UART_SetConfig+0xc28>)
 80192b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192b6:	b29b      	uxth	r3, r3
 80192b8:	2200      	movs	r2, #0
 80192ba:	603b      	str	r3, [r7, #0]
 80192bc:	607a      	str	r2, [r7, #4]
 80192be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80192c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80192c6:	f7e7 f873 	bl	80003b0 <__aeabi_uldivmod>
 80192ca:	4602      	mov	r2, r0
 80192cc:	460b      	mov	r3, r1
 80192ce:	4610      	mov	r0, r2
 80192d0:	4619      	mov	r1, r3
 80192d2:	f04f 0200 	mov.w	r2, #0
 80192d6:	f04f 0300 	mov.w	r3, #0
 80192da:	020b      	lsls	r3, r1, #8
 80192dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80192e0:	0202      	lsls	r2, r0, #8
 80192e2:	6979      	ldr	r1, [r7, #20]
 80192e4:	6849      	ldr	r1, [r1, #4]
 80192e6:	0849      	lsrs	r1, r1, #1
 80192e8:	2000      	movs	r0, #0
 80192ea:	460c      	mov	r4, r1
 80192ec:	4605      	mov	r5, r0
 80192ee:	eb12 0804 	adds.w	r8, r2, r4
 80192f2:	eb43 0905 	adc.w	r9, r3, r5
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	2200      	movs	r2, #0
 80192fc:	469a      	mov	sl, r3
 80192fe:	4693      	mov	fp, r2
 8019300:	4652      	mov	r2, sl
 8019302:	465b      	mov	r3, fp
 8019304:	4640      	mov	r0, r8
 8019306:	4649      	mov	r1, r9
 8019308:	f7e7 f852 	bl	80003b0 <__aeabi_uldivmod>
 801930c:	4602      	mov	r2, r0
 801930e:	460b      	mov	r3, r1
 8019310:	4613      	mov	r3, r2
 8019312:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801931a:	d308      	bcc.n	801932e <UART_SetConfig+0x9a2>
 801931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801931e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019322:	d204      	bcs.n	801932e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8019324:	697b      	ldr	r3, [r7, #20]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801932a:	60da      	str	r2, [r3, #12]
 801932c:	e17f      	b.n	801962e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801932e:	2301      	movs	r3, #1
 8019330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019334:	e17b      	b.n	801962e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	69db      	ldr	r3, [r3, #28]
 801933a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801933e:	f040 80bd 	bne.w	80194bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8019342:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019346:	2b20      	cmp	r3, #32
 8019348:	dc48      	bgt.n	80193dc <UART_SetConfig+0xa50>
 801934a:	2b00      	cmp	r3, #0
 801934c:	db7b      	blt.n	8019446 <UART_SetConfig+0xaba>
 801934e:	2b20      	cmp	r3, #32
 8019350:	d879      	bhi.n	8019446 <UART_SetConfig+0xaba>
 8019352:	a201      	add	r2, pc, #4	@ (adr r2, 8019358 <UART_SetConfig+0x9cc>)
 8019354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019358:	080193e3 	.word	0x080193e3
 801935c:	080193eb 	.word	0x080193eb
 8019360:	08019447 	.word	0x08019447
 8019364:	08019447 	.word	0x08019447
 8019368:	080193f3 	.word	0x080193f3
 801936c:	08019447 	.word	0x08019447
 8019370:	08019447 	.word	0x08019447
 8019374:	08019447 	.word	0x08019447
 8019378:	08019403 	.word	0x08019403
 801937c:	08019447 	.word	0x08019447
 8019380:	08019447 	.word	0x08019447
 8019384:	08019447 	.word	0x08019447
 8019388:	08019447 	.word	0x08019447
 801938c:	08019447 	.word	0x08019447
 8019390:	08019447 	.word	0x08019447
 8019394:	08019447 	.word	0x08019447
 8019398:	08019413 	.word	0x08019413
 801939c:	08019447 	.word	0x08019447
 80193a0:	08019447 	.word	0x08019447
 80193a4:	08019447 	.word	0x08019447
 80193a8:	08019447 	.word	0x08019447
 80193ac:	08019447 	.word	0x08019447
 80193b0:	08019447 	.word	0x08019447
 80193b4:	08019447 	.word	0x08019447
 80193b8:	08019447 	.word	0x08019447
 80193bc:	08019447 	.word	0x08019447
 80193c0:	08019447 	.word	0x08019447
 80193c4:	08019447 	.word	0x08019447
 80193c8:	08019447 	.word	0x08019447
 80193cc:	08019447 	.word	0x08019447
 80193d0:	08019447 	.word	0x08019447
 80193d4:	08019447 	.word	0x08019447
 80193d8:	08019439 	.word	0x08019439
 80193dc:	2b40      	cmp	r3, #64	@ 0x40
 80193de:	d02e      	beq.n	801943e <UART_SetConfig+0xab2>
 80193e0:	e031      	b.n	8019446 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80193e2:	f7f8 fded 	bl	8011fc0 <HAL_RCC_GetPCLK1Freq>
 80193e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80193e8:	e033      	b.n	8019452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80193ea:	f7f8 fdff 	bl	8011fec <HAL_RCC_GetPCLK2Freq>
 80193ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80193f0:	e02f      	b.n	8019452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80193f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7fa fc96 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80193fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019400:	e027      	b.n	8019452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019402:	f107 0318 	add.w	r3, r7, #24
 8019406:	4618      	mov	r0, r3
 8019408:	f7fa fde2 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801940c:	69fb      	ldr	r3, [r7, #28]
 801940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019410:	e01f      	b.n	8019452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019412:	4b69      	ldr	r3, [pc, #420]	@ (80195b8 <UART_SetConfig+0xc2c>)
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	f003 0320 	and.w	r3, r3, #32
 801941a:	2b00      	cmp	r3, #0
 801941c:	d009      	beq.n	8019432 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801941e:	4b66      	ldr	r3, [pc, #408]	@ (80195b8 <UART_SetConfig+0xc2c>)
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	08db      	lsrs	r3, r3, #3
 8019424:	f003 0303 	and.w	r3, r3, #3
 8019428:	4a64      	ldr	r2, [pc, #400]	@ (80195bc <UART_SetConfig+0xc30>)
 801942a:	fa22 f303 	lsr.w	r3, r2, r3
 801942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019430:	e00f      	b.n	8019452 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8019432:	4b62      	ldr	r3, [pc, #392]	@ (80195bc <UART_SetConfig+0xc30>)
 8019434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019436:	e00c      	b.n	8019452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019438:	4b61      	ldr	r3, [pc, #388]	@ (80195c0 <UART_SetConfig+0xc34>)
 801943a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801943c:	e009      	b.n	8019452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801943e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019444:	e005      	b.n	8019452 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8019446:	2300      	movs	r3, #0
 8019448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801944a:	2301      	movs	r3, #1
 801944c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019454:	2b00      	cmp	r3, #0
 8019456:	f000 80ea 	beq.w	801962e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801945a:	697b      	ldr	r3, [r7, #20]
 801945c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801945e:	4a55      	ldr	r2, [pc, #340]	@ (80195b4 <UART_SetConfig+0xc28>)
 8019460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019464:	461a      	mov	r2, r3
 8019466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019468:	fbb3 f3f2 	udiv	r3, r3, r2
 801946c:	005a      	lsls	r2, r3, #1
 801946e:	697b      	ldr	r3, [r7, #20]
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	085b      	lsrs	r3, r3, #1
 8019474:	441a      	add	r2, r3
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	685b      	ldr	r3, [r3, #4]
 801947a:	fbb2 f3f3 	udiv	r3, r2, r3
 801947e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019482:	2b0f      	cmp	r3, #15
 8019484:	d916      	bls.n	80194b4 <UART_SetConfig+0xb28>
 8019486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801948c:	d212      	bcs.n	80194b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019490:	b29b      	uxth	r3, r3
 8019492:	f023 030f 	bic.w	r3, r3, #15
 8019496:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801949a:	085b      	lsrs	r3, r3, #1
 801949c:	b29b      	uxth	r3, r3
 801949e:	f003 0307 	and.w	r3, r3, #7
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80194a6:	4313      	orrs	r3, r2
 80194a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80194aa:	697b      	ldr	r3, [r7, #20]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80194b0:	60da      	str	r2, [r3, #12]
 80194b2:	e0bc      	b.n	801962e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80194b4:	2301      	movs	r3, #1
 80194b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80194ba:	e0b8      	b.n	801962e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80194bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80194c0:	2b20      	cmp	r3, #32
 80194c2:	dc4b      	bgt.n	801955c <UART_SetConfig+0xbd0>
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f2c0 8087 	blt.w	80195d8 <UART_SetConfig+0xc4c>
 80194ca:	2b20      	cmp	r3, #32
 80194cc:	f200 8084 	bhi.w	80195d8 <UART_SetConfig+0xc4c>
 80194d0:	a201      	add	r2, pc, #4	@ (adr r2, 80194d8 <UART_SetConfig+0xb4c>)
 80194d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194d6:	bf00      	nop
 80194d8:	08019563 	.word	0x08019563
 80194dc:	0801956b 	.word	0x0801956b
 80194e0:	080195d9 	.word	0x080195d9
 80194e4:	080195d9 	.word	0x080195d9
 80194e8:	08019573 	.word	0x08019573
 80194ec:	080195d9 	.word	0x080195d9
 80194f0:	080195d9 	.word	0x080195d9
 80194f4:	080195d9 	.word	0x080195d9
 80194f8:	08019583 	.word	0x08019583
 80194fc:	080195d9 	.word	0x080195d9
 8019500:	080195d9 	.word	0x080195d9
 8019504:	080195d9 	.word	0x080195d9
 8019508:	080195d9 	.word	0x080195d9
 801950c:	080195d9 	.word	0x080195d9
 8019510:	080195d9 	.word	0x080195d9
 8019514:	080195d9 	.word	0x080195d9
 8019518:	08019593 	.word	0x08019593
 801951c:	080195d9 	.word	0x080195d9
 8019520:	080195d9 	.word	0x080195d9
 8019524:	080195d9 	.word	0x080195d9
 8019528:	080195d9 	.word	0x080195d9
 801952c:	080195d9 	.word	0x080195d9
 8019530:	080195d9 	.word	0x080195d9
 8019534:	080195d9 	.word	0x080195d9
 8019538:	080195d9 	.word	0x080195d9
 801953c:	080195d9 	.word	0x080195d9
 8019540:	080195d9 	.word	0x080195d9
 8019544:	080195d9 	.word	0x080195d9
 8019548:	080195d9 	.word	0x080195d9
 801954c:	080195d9 	.word	0x080195d9
 8019550:	080195d9 	.word	0x080195d9
 8019554:	080195d9 	.word	0x080195d9
 8019558:	080195cb 	.word	0x080195cb
 801955c:	2b40      	cmp	r3, #64	@ 0x40
 801955e:	d037      	beq.n	80195d0 <UART_SetConfig+0xc44>
 8019560:	e03a      	b.n	80195d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019562:	f7f8 fd2d 	bl	8011fc0 <HAL_RCC_GetPCLK1Freq>
 8019566:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019568:	e03c      	b.n	80195e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801956a:	f7f8 fd3f 	bl	8011fec <HAL_RCC_GetPCLK2Freq>
 801956e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019570:	e038      	b.n	80195e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019576:	4618      	mov	r0, r3
 8019578:	f7fa fbd6 	bl	8013d28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019580:	e030      	b.n	80195e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019582:	f107 0318 	add.w	r3, r7, #24
 8019586:	4618      	mov	r0, r3
 8019588:	f7fa fd22 	bl	8013fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801958c:	69fb      	ldr	r3, [r7, #28]
 801958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019590:	e028      	b.n	80195e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019592:	4b09      	ldr	r3, [pc, #36]	@ (80195b8 <UART_SetConfig+0xc2c>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	f003 0320 	and.w	r3, r3, #32
 801959a:	2b00      	cmp	r3, #0
 801959c:	d012      	beq.n	80195c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801959e:	4b06      	ldr	r3, [pc, #24]	@ (80195b8 <UART_SetConfig+0xc2c>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	08db      	lsrs	r3, r3, #3
 80195a4:	f003 0303 	and.w	r3, r3, #3
 80195a8:	4a04      	ldr	r2, [pc, #16]	@ (80195bc <UART_SetConfig+0xc30>)
 80195aa:	fa22 f303 	lsr.w	r3, r2, r3
 80195ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80195b0:	e018      	b.n	80195e4 <UART_SetConfig+0xc58>
 80195b2:	bf00      	nop
 80195b4:	0801eb74 	.word	0x0801eb74
 80195b8:	58024400 	.word	0x58024400
 80195bc:	03d09000 	.word	0x03d09000
 80195c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80195c4:	4b24      	ldr	r3, [pc, #144]	@ (8019658 <UART_SetConfig+0xccc>)
 80195c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195c8:	e00c      	b.n	80195e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80195ca:	4b24      	ldr	r3, [pc, #144]	@ (801965c <UART_SetConfig+0xcd0>)
 80195cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195ce:	e009      	b.n	80195e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80195d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80195d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195d6:	e005      	b.n	80195e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80195d8:	2300      	movs	r3, #0
 80195da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80195dc:	2301      	movs	r3, #1
 80195de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80195e2:	bf00      	nop
    }

    if (pclk != 0U)
 80195e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d021      	beq.n	801962e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80195ea:	697b      	ldr	r3, [r7, #20]
 80195ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195ee:	4a1c      	ldr	r2, [pc, #112]	@ (8019660 <UART_SetConfig+0xcd4>)
 80195f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195f4:	461a      	mov	r2, r3
 80195f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80195fc:	697b      	ldr	r3, [r7, #20]
 80195fe:	685b      	ldr	r3, [r3, #4]
 8019600:	085b      	lsrs	r3, r3, #1
 8019602:	441a      	add	r2, r3
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	fbb2 f3f3 	udiv	r3, r2, r3
 801960c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019610:	2b0f      	cmp	r3, #15
 8019612:	d909      	bls.n	8019628 <UART_SetConfig+0xc9c>
 8019614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801961a:	d205      	bcs.n	8019628 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801961e:	b29a      	uxth	r2, r3
 8019620:	697b      	ldr	r3, [r7, #20]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	60da      	str	r2, [r3, #12]
 8019626:	e002      	b.n	801962e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019628:	2301      	movs	r3, #1
 801962a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	2201      	movs	r2, #1
 8019632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	2201      	movs	r2, #1
 801963a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801963e:	697b      	ldr	r3, [r7, #20]
 8019640:	2200      	movs	r2, #0
 8019642:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	2200      	movs	r2, #0
 8019648:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801964a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801964e:	4618      	mov	r0, r3
 8019650:	3748      	adds	r7, #72	@ 0x48
 8019652:	46bd      	mov	sp, r7
 8019654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019658:	03d09000 	.word	0x03d09000
 801965c:	003d0900 	.word	0x003d0900
 8019660:	0801eb74 	.word	0x0801eb74

08019664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019664:	b480      	push	{r7}
 8019666:	b083      	sub	sp, #12
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019670:	f003 0308 	and.w	r3, r3, #8
 8019674:	2b00      	cmp	r3, #0
 8019676:	d00a      	beq.n	801968e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	685b      	ldr	r3, [r3, #4]
 801967e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	430a      	orrs	r2, r1
 801968c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019692:	f003 0301 	and.w	r3, r3, #1
 8019696:	2b00      	cmp	r3, #0
 8019698:	d00a      	beq.n	80196b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	685b      	ldr	r3, [r3, #4]
 80196a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	430a      	orrs	r2, r1
 80196ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196b4:	f003 0302 	and.w	r3, r3, #2
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d00a      	beq.n	80196d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	430a      	orrs	r2, r1
 80196d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196d6:	f003 0304 	and.w	r3, r3, #4
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d00a      	beq.n	80196f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	430a      	orrs	r2, r1
 80196f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196f8:	f003 0310 	and.w	r3, r3, #16
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d00a      	beq.n	8019716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	689b      	ldr	r3, [r3, #8]
 8019706:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	430a      	orrs	r2, r1
 8019714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801971a:	f003 0320 	and.w	r3, r3, #32
 801971e:	2b00      	cmp	r3, #0
 8019720:	d00a      	beq.n	8019738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	689b      	ldr	r3, [r3, #8]
 8019728:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	430a      	orrs	r2, r1
 8019736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801973c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019740:	2b00      	cmp	r3, #0
 8019742:	d01a      	beq.n	801977a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	685b      	ldr	r3, [r3, #4]
 801974a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	430a      	orrs	r2, r1
 8019758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801975e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019762:	d10a      	bne.n	801977a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	685b      	ldr	r3, [r3, #4]
 801976a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	430a      	orrs	r2, r1
 8019778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801977e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019782:	2b00      	cmp	r3, #0
 8019784:	d00a      	beq.n	801979c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	685b      	ldr	r3, [r3, #4]
 801978c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	430a      	orrs	r2, r1
 801979a:	605a      	str	r2, [r3, #4]
  }
}
 801979c:	bf00      	nop
 801979e:	370c      	adds	r7, #12
 80197a0:	46bd      	mov	sp, r7
 80197a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a6:	4770      	bx	lr

080197a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b098      	sub	sp, #96	@ 0x60
 80197ac:	af02      	add	r7, sp, #8
 80197ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2200      	movs	r2, #0
 80197b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80197b8:	f7ef fe94 	bl	80094e4 <HAL_GetTick>
 80197bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	f003 0308 	and.w	r3, r3, #8
 80197c8:	2b08      	cmp	r3, #8
 80197ca:	d12f      	bne.n	801982c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80197cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80197d0:	9300      	str	r3, [sp, #0]
 80197d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197d4:	2200      	movs	r2, #0
 80197d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80197da:	6878      	ldr	r0, [r7, #4]
 80197dc:	f000 f88e 	bl	80198fc <UART_WaitOnFlagUntilTimeout>
 80197e0:	4603      	mov	r3, r0
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d022      	beq.n	801982c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ee:	e853 3f00 	ldrex	r3, [r3]
 80197f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80197f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80197fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	461a      	mov	r2, r3
 8019802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019804:	647b      	str	r3, [r7, #68]	@ 0x44
 8019806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801980a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801980c:	e841 2300 	strex	r3, r2, [r1]
 8019810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019814:	2b00      	cmp	r3, #0
 8019816:	d1e6      	bne.n	80197e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	2220      	movs	r2, #32
 801981c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	2200      	movs	r2, #0
 8019824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019828:	2303      	movs	r3, #3
 801982a:	e063      	b.n	80198f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	f003 0304 	and.w	r3, r3, #4
 8019836:	2b04      	cmp	r3, #4
 8019838:	d149      	bne.n	80198ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801983a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801983e:	9300      	str	r3, [sp, #0]
 8019840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019842:	2200      	movs	r2, #0
 8019844:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f000 f857 	bl	80198fc <UART_WaitOnFlagUntilTimeout>
 801984e:	4603      	mov	r3, r0
 8019850:	2b00      	cmp	r3, #0
 8019852:	d03c      	beq.n	80198ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801985c:	e853 3f00 	ldrex	r3, [r3]
 8019860:	623b      	str	r3, [r7, #32]
   return(result);
 8019862:	6a3b      	ldr	r3, [r7, #32]
 8019864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	461a      	mov	r2, r3
 8019870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019872:	633b      	str	r3, [r7, #48]	@ 0x30
 8019874:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801987a:	e841 2300 	strex	r3, r2, [r1]
 801987e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019882:	2b00      	cmp	r3, #0
 8019884:	d1e6      	bne.n	8019854 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	3308      	adds	r3, #8
 801988c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801988e:	693b      	ldr	r3, [r7, #16]
 8019890:	e853 3f00 	ldrex	r3, [r3]
 8019894:	60fb      	str	r3, [r7, #12]
   return(result);
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	f023 0301 	bic.w	r3, r3, #1
 801989c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	3308      	adds	r3, #8
 80198a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80198a6:	61fa      	str	r2, [r7, #28]
 80198a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198aa:	69b9      	ldr	r1, [r7, #24]
 80198ac:	69fa      	ldr	r2, [r7, #28]
 80198ae:	e841 2300 	strex	r3, r2, [r1]
 80198b2:	617b      	str	r3, [r7, #20]
   return(result);
 80198b4:	697b      	ldr	r3, [r7, #20]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d1e5      	bne.n	8019886 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2220      	movs	r2, #32
 80198be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	2200      	movs	r2, #0
 80198c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198ca:	2303      	movs	r3, #3
 80198cc:	e012      	b.n	80198f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	2220      	movs	r2, #32
 80198d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	2220      	movs	r2, #32
 80198da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	2200      	movs	r2, #0
 80198e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2200      	movs	r2, #0
 80198e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	2200      	movs	r2, #0
 80198ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80198f2:	2300      	movs	r3, #0
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	3758      	adds	r7, #88	@ 0x58
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}

080198fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b084      	sub	sp, #16
 8019900:	af00      	add	r7, sp, #0
 8019902:	60f8      	str	r0, [r7, #12]
 8019904:	60b9      	str	r1, [r7, #8]
 8019906:	603b      	str	r3, [r7, #0]
 8019908:	4613      	mov	r3, r2
 801990a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801990c:	e04f      	b.n	80199ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801990e:	69bb      	ldr	r3, [r7, #24]
 8019910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019914:	d04b      	beq.n	80199ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019916:	f7ef fde5 	bl	80094e4 <HAL_GetTick>
 801991a:	4602      	mov	r2, r0
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	1ad3      	subs	r3, r2, r3
 8019920:	69ba      	ldr	r2, [r7, #24]
 8019922:	429a      	cmp	r2, r3
 8019924:	d302      	bcc.n	801992c <UART_WaitOnFlagUntilTimeout+0x30>
 8019926:	69bb      	ldr	r3, [r7, #24]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d101      	bne.n	8019930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801992c:	2303      	movs	r3, #3
 801992e:	e04e      	b.n	80199ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	f003 0304 	and.w	r3, r3, #4
 801993a:	2b00      	cmp	r3, #0
 801993c:	d037      	beq.n	80199ae <UART_WaitOnFlagUntilTimeout+0xb2>
 801993e:	68bb      	ldr	r3, [r7, #8]
 8019940:	2b80      	cmp	r3, #128	@ 0x80
 8019942:	d034      	beq.n	80199ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8019944:	68bb      	ldr	r3, [r7, #8]
 8019946:	2b40      	cmp	r3, #64	@ 0x40
 8019948:	d031      	beq.n	80199ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	69db      	ldr	r3, [r3, #28]
 8019950:	f003 0308 	and.w	r3, r3, #8
 8019954:	2b08      	cmp	r3, #8
 8019956:	d110      	bne.n	801997a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	2208      	movs	r2, #8
 801995e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019960:	68f8      	ldr	r0, [r7, #12]
 8019962:	f000 f95b 	bl	8019c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	2208      	movs	r2, #8
 801996a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	2200      	movs	r2, #0
 8019972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019976:	2301      	movs	r3, #1
 8019978:	e029      	b.n	80199ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	69db      	ldr	r3, [r3, #28]
 8019980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019988:	d111      	bne.n	80199ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019994:	68f8      	ldr	r0, [r7, #12]
 8019996:	f000 f941 	bl	8019c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	2220      	movs	r2, #32
 801999e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	2200      	movs	r2, #0
 80199a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80199aa:	2303      	movs	r3, #3
 80199ac:	e00f      	b.n	80199ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	69da      	ldr	r2, [r3, #28]
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	4013      	ands	r3, r2
 80199b8:	68ba      	ldr	r2, [r7, #8]
 80199ba:	429a      	cmp	r2, r3
 80199bc:	bf0c      	ite	eq
 80199be:	2301      	moveq	r3, #1
 80199c0:	2300      	movne	r3, #0
 80199c2:	b2db      	uxtb	r3, r3
 80199c4:	461a      	mov	r2, r3
 80199c6:	79fb      	ldrb	r3, [r7, #7]
 80199c8:	429a      	cmp	r2, r3
 80199ca:	d0a0      	beq.n	801990e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80199cc:	2300      	movs	r3, #0
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	3710      	adds	r7, #16
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}
	...

080199d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80199d8:	b480      	push	{r7}
 80199da:	b0a3      	sub	sp, #140	@ 0x8c
 80199dc:	af00      	add	r7, sp, #0
 80199de:	60f8      	str	r0, [r7, #12]
 80199e0:	60b9      	str	r1, [r7, #8]
 80199e2:	4613      	mov	r3, r2
 80199e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	68ba      	ldr	r2, [r7, #8]
 80199ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	88fa      	ldrh	r2, [r7, #6]
 80199f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	88fa      	ldrh	r2, [r7, #6]
 80199f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	2200      	movs	r2, #0
 8019a00:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	689b      	ldr	r3, [r3, #8]
 8019a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a0a:	d10e      	bne.n	8019a2a <UART_Start_Receive_IT+0x52>
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	691b      	ldr	r3, [r3, #16]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d105      	bne.n	8019a20 <UART_Start_Receive_IT+0x48>
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a1e:	e02d      	b.n	8019a7c <UART_Start_Receive_IT+0xa4>
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	22ff      	movs	r2, #255	@ 0xff
 8019a24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a28:	e028      	b.n	8019a7c <UART_Start_Receive_IT+0xa4>
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	689b      	ldr	r3, [r3, #8]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d10d      	bne.n	8019a4e <UART_Start_Receive_IT+0x76>
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	691b      	ldr	r3, [r3, #16]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d104      	bne.n	8019a44 <UART_Start_Receive_IT+0x6c>
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	22ff      	movs	r2, #255	@ 0xff
 8019a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a42:	e01b      	b.n	8019a7c <UART_Start_Receive_IT+0xa4>
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	227f      	movs	r2, #127	@ 0x7f
 8019a48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a4c:	e016      	b.n	8019a7c <UART_Start_Receive_IT+0xa4>
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	689b      	ldr	r3, [r3, #8]
 8019a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019a56:	d10d      	bne.n	8019a74 <UART_Start_Receive_IT+0x9c>
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	691b      	ldr	r3, [r3, #16]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d104      	bne.n	8019a6a <UART_Start_Receive_IT+0x92>
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	227f      	movs	r2, #127	@ 0x7f
 8019a64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a68:	e008      	b.n	8019a7c <UART_Start_Receive_IT+0xa4>
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	223f      	movs	r2, #63	@ 0x3f
 8019a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a72:	e003      	b.n	8019a7c <UART_Start_Receive_IT+0xa4>
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	2200      	movs	r2, #0
 8019a78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2222      	movs	r2, #34	@ 0x22
 8019a88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	3308      	adds	r3, #8
 8019a92:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a96:	e853 3f00 	ldrex	r3, [r3]
 8019a9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019a9e:	f043 0301 	orr.w	r3, r3, #1
 8019aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	3308      	adds	r3, #8
 8019aac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019ab0:	673a      	str	r2, [r7, #112]	@ 0x70
 8019ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ab4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019ab6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019ab8:	e841 2300 	strex	r3, r2, [r1]
 8019abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d1e3      	bne.n	8019a8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019acc:	d14f      	bne.n	8019b6e <UART_Start_Receive_IT+0x196>
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019ad4:	88fa      	ldrh	r2, [r7, #6]
 8019ad6:	429a      	cmp	r2, r3
 8019ad8:	d349      	bcc.n	8019b6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	689b      	ldr	r3, [r3, #8]
 8019ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019ae2:	d107      	bne.n	8019af4 <UART_Start_Receive_IT+0x11c>
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	691b      	ldr	r3, [r3, #16]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d103      	bne.n	8019af4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	4a47      	ldr	r2, [pc, #284]	@ (8019c0c <UART_Start_Receive_IT+0x234>)
 8019af0:	675a      	str	r2, [r3, #116]	@ 0x74
 8019af2:	e002      	b.n	8019afa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	4a46      	ldr	r2, [pc, #280]	@ (8019c10 <UART_Start_Receive_IT+0x238>)
 8019af8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	691b      	ldr	r3, [r3, #16]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d01a      	beq.n	8019b38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b0a:	e853 3f00 	ldrex	r3, [r3]
 8019b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019b26:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b28:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019b2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019b2c:	e841 2300 	strex	r3, r2, [r1]
 8019b30:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d1e4      	bne.n	8019b02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	3308      	adds	r3, #8
 8019b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b42:	e853 3f00 	ldrex	r3, [r3]
 8019b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	3308      	adds	r3, #8
 8019b56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019b58:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019b5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019b60:	e841 2300 	strex	r3, r2, [r1]
 8019b64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d1e5      	bne.n	8019b38 <UART_Start_Receive_IT+0x160>
 8019b6c:	e046      	b.n	8019bfc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	689b      	ldr	r3, [r3, #8]
 8019b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b76:	d107      	bne.n	8019b88 <UART_Start_Receive_IT+0x1b0>
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	691b      	ldr	r3, [r3, #16]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d103      	bne.n	8019b88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	4a24      	ldr	r2, [pc, #144]	@ (8019c14 <UART_Start_Receive_IT+0x23c>)
 8019b84:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b86:	e002      	b.n	8019b8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	4a23      	ldr	r2, [pc, #140]	@ (8019c18 <UART_Start_Receive_IT+0x240>)
 8019b8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	691b      	ldr	r3, [r3, #16]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d019      	beq.n	8019bca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b9e:	e853 3f00 	ldrex	r3, [r3]
 8019ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ba6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019baa:	677b      	str	r3, [r7, #116]	@ 0x74
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	461a      	mov	r2, r3
 8019bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bb6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019bba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019bbc:	e841 2300 	strex	r3, r2, [r1]
 8019bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d1e6      	bne.n	8019b96 <UART_Start_Receive_IT+0x1be>
 8019bc8:	e018      	b.n	8019bfc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bd0:	697b      	ldr	r3, [r7, #20]
 8019bd2:	e853 3f00 	ldrex	r3, [r3]
 8019bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	f043 0320 	orr.w	r3, r3, #32
 8019bde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	461a      	mov	r2, r3
 8019be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019be8:	623b      	str	r3, [r7, #32]
 8019bea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bec:	69f9      	ldr	r1, [r7, #28]
 8019bee:	6a3a      	ldr	r2, [r7, #32]
 8019bf0:	e841 2300 	strex	r3, r2, [r1]
 8019bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8019bf6:	69bb      	ldr	r3, [r7, #24]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1e6      	bne.n	8019bca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019bfc:	2300      	movs	r3, #0
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	378c      	adds	r7, #140	@ 0x8c
 8019c02:	46bd      	mov	sp, r7
 8019c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c08:	4770      	bx	lr
 8019c0a:	bf00      	nop
 8019c0c:	0801a77d 	.word	0x0801a77d
 8019c10:	0801a419 	.word	0x0801a419
 8019c14:	0801a261 	.word	0x0801a261
 8019c18:	0801a0a9 	.word	0x0801a0a9

08019c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019c1c:	b480      	push	{r7}
 8019c1e:	b095      	sub	sp, #84	@ 0x54
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c2c:	e853 3f00 	ldrex	r3, [r3]
 8019c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	461a      	mov	r2, r3
 8019c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019c4a:	e841 2300 	strex	r3, r2, [r1]
 8019c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d1e6      	bne.n	8019c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	3308      	adds	r3, #8
 8019c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c5e:	6a3b      	ldr	r3, [r7, #32]
 8019c60:	e853 3f00 	ldrex	r3, [r3]
 8019c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8019c66:	69fa      	ldr	r2, [r7, #28]
 8019c68:	4b1e      	ldr	r3, [pc, #120]	@ (8019ce4 <UART_EndRxTransfer+0xc8>)
 8019c6a:	4013      	ands	r3, r2
 8019c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	3308      	adds	r3, #8
 8019c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019c7e:	e841 2300 	strex	r3, r2, [r1]
 8019c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d1e5      	bne.n	8019c56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	d118      	bne.n	8019cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	e853 3f00 	ldrex	r3, [r3]
 8019c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	f023 0310 	bic.w	r3, r3, #16
 8019ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	461a      	mov	r2, r3
 8019cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019cb0:	61bb      	str	r3, [r7, #24]
 8019cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cb4:	6979      	ldr	r1, [r7, #20]
 8019cb6:	69ba      	ldr	r2, [r7, #24]
 8019cb8:	e841 2300 	strex	r3, r2, [r1]
 8019cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8019cbe:	693b      	ldr	r3, [r7, #16]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d1e6      	bne.n	8019c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2220      	movs	r2, #32
 8019cc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2200      	movs	r2, #0
 8019cd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019cd8:	bf00      	nop
 8019cda:	3754      	adds	r7, #84	@ 0x54
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce2:	4770      	bx	lr
 8019ce4:	effffffe 	.word	0xeffffffe

08019ce8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b084      	sub	sp, #16
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019cf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019cfe:	68f8      	ldr	r0, [r7, #12]
 8019d00:	f7fe fe2e 	bl	8018960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d04:	bf00      	nop
 8019d06:	3710      	adds	r7, #16
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}

08019d0c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b08f      	sub	sp, #60	@ 0x3c
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019d1a:	2b21      	cmp	r3, #33	@ 0x21
 8019d1c:	d14c      	bne.n	8019db8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d132      	bne.n	8019d90 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d30:	6a3b      	ldr	r3, [r7, #32]
 8019d32:	e853 3f00 	ldrex	r3, [r3]
 8019d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8019d38:	69fb      	ldr	r3, [r7, #28]
 8019d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	461a      	mov	r2, r3
 8019d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d4a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d50:	e841 2300 	strex	r3, r2, [r1]
 8019d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d1e6      	bne.n	8019d2a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	e853 3f00 	ldrex	r3, [r3]
 8019d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d6a:	68bb      	ldr	r3, [r7, #8]
 8019d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	461a      	mov	r2, r3
 8019d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d7a:	61bb      	str	r3, [r7, #24]
 8019d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d7e:	6979      	ldr	r1, [r7, #20]
 8019d80:	69ba      	ldr	r2, [r7, #24]
 8019d82:	e841 2300 	strex	r3, r2, [r1]
 8019d86:	613b      	str	r3, [r7, #16]
   return(result);
 8019d88:	693b      	ldr	r3, [r7, #16]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d1e6      	bne.n	8019d5c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019d8e:	e013      	b.n	8019db8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d94:	781a      	ldrb	r2, [r3, #0]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019da0:	1c5a      	adds	r2, r3, #1
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	3b01      	subs	r3, #1
 8019db0:	b29a      	uxth	r2, r3
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019db8:	bf00      	nop
 8019dba:	373c      	adds	r7, #60	@ 0x3c
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc2:	4770      	bx	lr

08019dc4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019dc4:	b480      	push	{r7}
 8019dc6:	b091      	sub	sp, #68	@ 0x44
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019dd2:	2b21      	cmp	r3, #33	@ 0x21
 8019dd4:	d151      	bne.n	8019e7a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d132      	bne.n	8019e48 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dea:	e853 3f00 	ldrex	r3, [r3]
 8019dee:	623b      	str	r3, [r7, #32]
   return(result);
 8019df0:	6a3b      	ldr	r3, [r7, #32]
 8019df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019e08:	e841 2300 	strex	r3, r2, [r1]
 8019e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d1e6      	bne.n	8019de2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e1a:	693b      	ldr	r3, [r7, #16]
 8019e1c:	e853 3f00 	ldrex	r3, [r3]
 8019e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	461a      	mov	r2, r3
 8019e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e32:	61fb      	str	r3, [r7, #28]
 8019e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e36:	69b9      	ldr	r1, [r7, #24]
 8019e38:	69fa      	ldr	r2, [r7, #28]
 8019e3a:	e841 2300 	strex	r3, r2, [r1]
 8019e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8019e40:	697b      	ldr	r3, [r7, #20]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d1e6      	bne.n	8019e14 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019e46:	e018      	b.n	8019e7a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019e50:	881b      	ldrh	r3, [r3, #0]
 8019e52:	461a      	mov	r2, r3
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019e5c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e62:	1c9a      	adds	r2, r3, #2
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	3b01      	subs	r3, #1
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e7a:	bf00      	nop
 8019e7c:	3744      	adds	r7, #68	@ 0x44
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e84:	4770      	bx	lr

08019e86 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019e86:	b480      	push	{r7}
 8019e88:	b091      	sub	sp, #68	@ 0x44
 8019e8a:	af00      	add	r7, sp, #0
 8019e8c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e94:	2b21      	cmp	r3, #33	@ 0x21
 8019e96:	d160      	bne.n	8019f5a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019e9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019ea0:	e057      	b.n	8019f52 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d133      	bne.n	8019f16 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	3308      	adds	r3, #8
 8019eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eb8:	e853 3f00 	ldrex	r3, [r3]
 8019ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8019ebe:	6a3b      	ldr	r3, [r7, #32]
 8019ec0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	3308      	adds	r3, #8
 8019ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019ece:	633a      	str	r2, [r7, #48]	@ 0x30
 8019ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ed6:	e841 2300 	strex	r3, r2, [r1]
 8019eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d1e5      	bne.n	8019eae <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ee8:	693b      	ldr	r3, [r7, #16]
 8019eea:	e853 3f00 	ldrex	r3, [r3]
 8019eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	461a      	mov	r2, r3
 8019efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f00:	61fb      	str	r3, [r7, #28]
 8019f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f04:	69b9      	ldr	r1, [r7, #24]
 8019f06:	69fa      	ldr	r2, [r7, #28]
 8019f08:	e841 2300 	strex	r3, r2, [r1]
 8019f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8019f0e:	697b      	ldr	r3, [r7, #20]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d1e6      	bne.n	8019ee2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019f14:	e021      	b.n	8019f5a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	69db      	ldr	r3, [r3, #28]
 8019f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d013      	beq.n	8019f4c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f28:	781a      	ldrb	r2, [r3, #0]
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f34:	1c5a      	adds	r2, r3, #1
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	3b01      	subs	r3, #1
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f4e:	3b01      	subs	r3, #1
 8019f50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f52:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d1a4      	bne.n	8019ea2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019f58:	e7ff      	b.n	8019f5a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019f5a:	bf00      	nop
 8019f5c:	3744      	adds	r7, #68	@ 0x44
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f64:	4770      	bx	lr

08019f66 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f66:	b480      	push	{r7}
 8019f68:	b091      	sub	sp, #68	@ 0x44
 8019f6a:	af00      	add	r7, sp, #0
 8019f6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f74:	2b21      	cmp	r3, #33	@ 0x21
 8019f76:	d165      	bne.n	801a044 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f80:	e05c      	b.n	801a03c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d133      	bne.n	8019ff6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	3308      	adds	r3, #8
 8019f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f96:	6a3b      	ldr	r3, [r7, #32]
 8019f98:	e853 3f00 	ldrex	r3, [r3]
 8019f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8019f9e:	69fb      	ldr	r3, [r7, #28]
 8019fa0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	3308      	adds	r3, #8
 8019fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019fb6:	e841 2300 	strex	r3, r2, [r1]
 8019fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d1e5      	bne.n	8019f8e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	e853 3f00 	ldrex	r3, [r3]
 8019fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8019fd0:	68bb      	ldr	r3, [r7, #8]
 8019fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	461a      	mov	r2, r3
 8019fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fe0:	61bb      	str	r3, [r7, #24]
 8019fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fe4:	6979      	ldr	r1, [r7, #20]
 8019fe6:	69ba      	ldr	r2, [r7, #24]
 8019fe8:	e841 2300 	strex	r3, r2, [r1]
 8019fec:	613b      	str	r3, [r7, #16]
   return(result);
 8019fee:	693b      	ldr	r3, [r7, #16]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d1e6      	bne.n	8019fc2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019ff4:	e026      	b.n	801a044 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	69db      	ldr	r3, [r3, #28]
 8019ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a000:	2b00      	cmp	r3, #0
 801a002:	d018      	beq.n	801a036 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a008:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a00c:	881b      	ldrh	r3, [r3, #0]
 801a00e:	461a      	mov	r2, r3
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a018:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a01e:	1c9a      	adds	r2, r3, #2
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	3b01      	subs	r3, #1
 801a02e:	b29a      	uxth	r2, r3
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a036:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a038:	3b01      	subs	r3, #1
 801a03a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a03c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d19f      	bne.n	8019f82 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a042:	e7ff      	b.n	801a044 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a044:	bf00      	nop
 801a046:	3744      	adds	r7, #68	@ 0x44
 801a048:	46bd      	mov	sp, r7
 801a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04e:	4770      	bx	lr

0801a050 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b088      	sub	sp, #32
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	e853 3f00 	ldrex	r3, [r3]
 801a064:	60bb      	str	r3, [r7, #8]
   return(result);
 801a066:	68bb      	ldr	r3, [r7, #8]
 801a068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a06c:	61fb      	str	r3, [r7, #28]
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	461a      	mov	r2, r3
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	61bb      	str	r3, [r7, #24]
 801a078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a07a:	6979      	ldr	r1, [r7, #20]
 801a07c:	69ba      	ldr	r2, [r7, #24]
 801a07e:	e841 2300 	strex	r3, r2, [r1]
 801a082:	613b      	str	r3, [r7, #16]
   return(result);
 801a084:	693b      	ldr	r3, [r7, #16]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d1e6      	bne.n	801a058 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	2220      	movs	r2, #32
 801a08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	2200      	movs	r2, #0
 801a096:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a098:	6878      	ldr	r0, [r7, #4]
 801a09a:	f7fe fc57 	bl	801894c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a09e:	bf00      	nop
 801a0a0:	3720      	adds	r7, #32
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	bd80      	pop	{r7, pc}
	...

0801a0a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b09c      	sub	sp, #112	@ 0x70
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a0b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a0c0:	2b22      	cmp	r3, #34	@ 0x22
 801a0c2:	f040 80be 	bne.w	801a242 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a0d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a0d4:	b2d9      	uxtb	r1, r3
 801a0d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a0da:	b2da      	uxtb	r2, r3
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0e0:	400a      	ands	r2, r1
 801a0e2:	b2d2      	uxtb	r2, r2
 801a0e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0ea:	1c5a      	adds	r2, r3, #1
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	3b01      	subs	r3, #1
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a108:	b29b      	uxth	r3, r3
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	f040 80a1 	bne.w	801a252 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a118:	e853 3f00 	ldrex	r3, [r3]
 801a11c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a124:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	461a      	mov	r2, r3
 801a12c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a12e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a130:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a132:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a136:	e841 2300 	strex	r3, r2, [r1]
 801a13a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a13c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d1e6      	bne.n	801a110 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	3308      	adds	r3, #8
 801a148:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a14c:	e853 3f00 	ldrex	r3, [r3]
 801a150:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a154:	f023 0301 	bic.w	r3, r3, #1
 801a158:	667b      	str	r3, [r7, #100]	@ 0x64
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	3308      	adds	r3, #8
 801a160:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a162:	647a      	str	r2, [r7, #68]	@ 0x44
 801a164:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a166:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a16a:	e841 2300 	strex	r3, r2, [r1]
 801a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a172:	2b00      	cmp	r3, #0
 801a174:	d1e5      	bne.n	801a142 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2220      	movs	r2, #32
 801a17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2200      	movs	r2, #0
 801a182:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2200      	movs	r2, #0
 801a188:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	4a33      	ldr	r2, [pc, #204]	@ (801a25c <UART_RxISR_8BIT+0x1b4>)
 801a190:	4293      	cmp	r3, r2
 801a192:	d01f      	beq.n	801a1d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d018      	beq.n	801a1d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1aa:	e853 3f00 	ldrex	r3, [r3]
 801a1ae:	623b      	str	r3, [r7, #32]
   return(result);
 801a1b0:	6a3b      	ldr	r3, [r7, #32]
 801a1b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a1b6:	663b      	str	r3, [r7, #96]	@ 0x60
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	461a      	mov	r2, r3
 801a1be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1c0:	633b      	str	r3, [r7, #48]	@ 0x30
 801a1c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1c8:	e841 2300 	strex	r3, r2, [r1]
 801a1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1e6      	bne.n	801a1a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a1d8:	2b01      	cmp	r3, #1
 801a1da:	d12e      	bne.n	801a23a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2200      	movs	r2, #0
 801a1e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1e8:	693b      	ldr	r3, [r7, #16]
 801a1ea:	e853 3f00 	ldrex	r3, [r3]
 801a1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	f023 0310 	bic.w	r3, r3, #16
 801a1f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	461a      	mov	r2, r3
 801a1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a200:	61fb      	str	r3, [r7, #28]
 801a202:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a204:	69b9      	ldr	r1, [r7, #24]
 801a206:	69fa      	ldr	r2, [r7, #28]
 801a208:	e841 2300 	strex	r3, r2, [r1]
 801a20c:	617b      	str	r3, [r7, #20]
   return(result);
 801a20e:	697b      	ldr	r3, [r7, #20]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d1e6      	bne.n	801a1e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	69db      	ldr	r3, [r3, #28]
 801a21a:	f003 0310 	and.w	r3, r3, #16
 801a21e:	2b10      	cmp	r3, #16
 801a220:	d103      	bne.n	801a22a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	2210      	movs	r2, #16
 801a228:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a230:	4619      	mov	r1, r3
 801a232:	6878      	ldr	r0, [r7, #4]
 801a234:	f7fe fb9e 	bl	8018974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a238:	e00b      	b.n	801a252 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a23a:	6878      	ldr	r0, [r7, #4]
 801a23c:	f7ec f99c 	bl	8006578 <HAL_UART_RxCpltCallback>
}
 801a240:	e007      	b.n	801a252 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	699a      	ldr	r2, [r3, #24]
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	f042 0208 	orr.w	r2, r2, #8
 801a250:	619a      	str	r2, [r3, #24]
}
 801a252:	bf00      	nop
 801a254:	3770      	adds	r7, #112	@ 0x70
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	58000c00 	.word	0x58000c00

0801a260 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b09c      	sub	sp, #112	@ 0x70
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a26e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a278:	2b22      	cmp	r3, #34	@ 0x22
 801a27a:	f040 80be 	bne.w	801a3fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a284:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a28c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a28e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a292:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a296:	4013      	ands	r3, r2
 801a298:	b29a      	uxth	r2, r3
 801a29a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a29c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a2a2:	1c9a      	adds	r2, r3, #2
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2ae:	b29b      	uxth	r3, r3
 801a2b0:	3b01      	subs	r3, #1
 801a2b2:	b29a      	uxth	r2, r3
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2c0:	b29b      	uxth	r3, r3
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	f040 80a1 	bne.w	801a40a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a2d0:	e853 3f00 	ldrex	r3, [r3]
 801a2d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a2d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a2dc:	667b      	str	r3, [r7, #100]	@ 0x64
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2e6:	657b      	str	r3, [r7, #84]	@ 0x54
 801a2e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a2ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2ee:	e841 2300 	strex	r3, r2, [r1]
 801a2f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d1e6      	bne.n	801a2c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	3308      	adds	r3, #8
 801a300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a304:	e853 3f00 	ldrex	r3, [r3]
 801a308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a30c:	f023 0301 	bic.w	r3, r3, #1
 801a310:	663b      	str	r3, [r7, #96]	@ 0x60
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	3308      	adds	r3, #8
 801a318:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a31a:	643a      	str	r2, [r7, #64]	@ 0x40
 801a31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a31e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a322:	e841 2300 	strex	r3, r2, [r1]
 801a326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d1e5      	bne.n	801a2fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	2220      	movs	r2, #32
 801a332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	2200      	movs	r2, #0
 801a33a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	2200      	movs	r2, #0
 801a340:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	4a33      	ldr	r2, [pc, #204]	@ (801a414 <UART_RxISR_16BIT+0x1b4>)
 801a348:	4293      	cmp	r3, r2
 801a34a:	d01f      	beq.n	801a38c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	685b      	ldr	r3, [r3, #4]
 801a352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a356:	2b00      	cmp	r3, #0
 801a358:	d018      	beq.n	801a38c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a360:	6a3b      	ldr	r3, [r7, #32]
 801a362:	e853 3f00 	ldrex	r3, [r3]
 801a366:	61fb      	str	r3, [r7, #28]
   return(result);
 801a368:	69fb      	ldr	r3, [r7, #28]
 801a36a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a36e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	461a      	mov	r2, r3
 801a376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a37a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a37c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a37e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a380:	e841 2300 	strex	r3, r2, [r1]
 801a384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d1e6      	bne.n	801a35a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a390:	2b01      	cmp	r3, #1
 801a392:	d12e      	bne.n	801a3f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	2200      	movs	r2, #0
 801a398:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	e853 3f00 	ldrex	r3, [r3]
 801a3a6:	60bb      	str	r3, [r7, #8]
   return(result);
 801a3a8:	68bb      	ldr	r3, [r7, #8]
 801a3aa:	f023 0310 	bic.w	r3, r3, #16
 801a3ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	461a      	mov	r2, r3
 801a3b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3b8:	61bb      	str	r3, [r7, #24]
 801a3ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3bc:	6979      	ldr	r1, [r7, #20]
 801a3be:	69ba      	ldr	r2, [r7, #24]
 801a3c0:	e841 2300 	strex	r3, r2, [r1]
 801a3c4:	613b      	str	r3, [r7, #16]
   return(result);
 801a3c6:	693b      	ldr	r3, [r7, #16]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d1e6      	bne.n	801a39a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	69db      	ldr	r3, [r3, #28]
 801a3d2:	f003 0310 	and.w	r3, r3, #16
 801a3d6:	2b10      	cmp	r3, #16
 801a3d8:	d103      	bne.n	801a3e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	2210      	movs	r2, #16
 801a3e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a3e8:	4619      	mov	r1, r3
 801a3ea:	6878      	ldr	r0, [r7, #4]
 801a3ec:	f7fe fac2 	bl	8018974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a3f0:	e00b      	b.n	801a40a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a3f2:	6878      	ldr	r0, [r7, #4]
 801a3f4:	f7ec f8c0 	bl	8006578 <HAL_UART_RxCpltCallback>
}
 801a3f8:	e007      	b.n	801a40a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	699a      	ldr	r2, [r3, #24]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	f042 0208 	orr.w	r2, r2, #8
 801a408:	619a      	str	r2, [r3, #24]
}
 801a40a:	bf00      	nop
 801a40c:	3770      	adds	r7, #112	@ 0x70
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}
 801a412:	bf00      	nop
 801a414:	58000c00 	.word	0x58000c00

0801a418 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b0ac      	sub	sp, #176	@ 0xb0
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a426:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	69db      	ldr	r3, [r3, #28]
 801a430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	689b      	ldr	r3, [r3, #8]
 801a444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a44e:	2b22      	cmp	r3, #34	@ 0x22
 801a450:	f040 8181 	bne.w	801a756 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a45a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a45e:	e124      	b.n	801a6aa <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a466:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a46a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a46e:	b2d9      	uxtb	r1, r3
 801a470:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a474:	b2da      	uxtb	r2, r3
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a47a:	400a      	ands	r2, r1
 801a47c:	b2d2      	uxtb	r2, r2
 801a47e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a484:	1c5a      	adds	r2, r3, #1
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a490:	b29b      	uxth	r3, r3
 801a492:	3b01      	subs	r3, #1
 801a494:	b29a      	uxth	r2, r3
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	69db      	ldr	r3, [r3, #28]
 801a4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4aa:	f003 0307 	and.w	r3, r3, #7
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d053      	beq.n	801a55a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4b6:	f003 0301 	and.w	r3, r3, #1
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d011      	beq.n	801a4e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a4be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d00b      	beq.n	801a4e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	2201      	movs	r2, #1
 801a4d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4d8:	f043 0201 	orr.w	r2, r3, #1
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a4e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4e6:	f003 0302 	and.w	r3, r3, #2
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d011      	beq.n	801a512 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a4ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4f2:	f003 0301 	and.w	r3, r3, #1
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d00b      	beq.n	801a512 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	2202      	movs	r2, #2
 801a500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a508:	f043 0204 	orr.w	r2, r3, #4
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a516:	f003 0304 	and.w	r3, r3, #4
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d011      	beq.n	801a542 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a522:	f003 0301 	and.w	r3, r3, #1
 801a526:	2b00      	cmp	r3, #0
 801a528:	d00b      	beq.n	801a542 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	2204      	movs	r2, #4
 801a530:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a538:	f043 0202 	orr.w	r2, r3, #2
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d006      	beq.n	801a55a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a54c:	6878      	ldr	r0, [r7, #4]
 801a54e:	f7fe fa07 	bl	8018960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2200      	movs	r2, #0
 801a556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a560:	b29b      	uxth	r3, r3
 801a562:	2b00      	cmp	r3, #0
 801a564:	f040 80a1 	bne.w	801a6aa <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a56e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a570:	e853 3f00 	ldrex	r3, [r3]
 801a574:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a57c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	461a      	mov	r2, r3
 801a586:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a58a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a58c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a58e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a590:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a592:	e841 2300 	strex	r3, r2, [r1]
 801a596:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a598:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d1e4      	bne.n	801a568 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	3308      	adds	r3, #8
 801a5a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a5a8:	e853 3f00 	ldrex	r3, [r3]
 801a5ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a5ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a5b0:	4b6f      	ldr	r3, [pc, #444]	@ (801a770 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a5b2:	4013      	ands	r3, r2
 801a5b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	3308      	adds	r3, #8
 801a5be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a5c2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a5c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a5c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a5ca:	e841 2300 	strex	r3, r2, [r1]
 801a5ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a5d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d1e3      	bne.n	801a59e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	2220      	movs	r2, #32
 801a5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	4a61      	ldr	r2, [pc, #388]	@ (801a774 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d021      	beq.n	801a638 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d01a      	beq.n	801a638 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a60a:	e853 3f00 	ldrex	r3, [r3]
 801a60e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a612:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	461a      	mov	r2, r3
 801a620:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a624:	657b      	str	r3, [r7, #84]	@ 0x54
 801a626:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a628:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a62a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a62c:	e841 2300 	strex	r3, r2, [r1]
 801a630:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a634:	2b00      	cmp	r3, #0
 801a636:	d1e4      	bne.n	801a602 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a63c:	2b01      	cmp	r3, #1
 801a63e:	d130      	bne.n	801a6a2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	2200      	movs	r2, #0
 801a644:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a64e:	e853 3f00 	ldrex	r3, [r3]
 801a652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a656:	f023 0310 	bic.w	r3, r3, #16
 801a65a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	461a      	mov	r2, r3
 801a664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a668:	643b      	str	r3, [r7, #64]	@ 0x40
 801a66a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a66c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a66e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a670:	e841 2300 	strex	r3, r2, [r1]
 801a674:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d1e4      	bne.n	801a646 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	69db      	ldr	r3, [r3, #28]
 801a682:	f003 0310 	and.w	r3, r3, #16
 801a686:	2b10      	cmp	r3, #16
 801a688:	d103      	bne.n	801a692 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	2210      	movs	r2, #16
 801a690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a698:	4619      	mov	r1, r3
 801a69a:	6878      	ldr	r0, [r7, #4]
 801a69c:	f7fe f96a 	bl	8018974 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a6a0:	e00e      	b.n	801a6c0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a6a2:	6878      	ldr	r0, [r7, #4]
 801a6a4:	f7eb ff68 	bl	8006578 <HAL_UART_RxCpltCallback>
        break;
 801a6a8:	e00a      	b.n	801a6c0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a6aa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d006      	beq.n	801a6c0 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a6b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a6b6:	f003 0320 	and.w	r3, r3, #32
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f47f aed0 	bne.w	801a460 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a6c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a6ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d049      	beq.n	801a766 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a6d8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a6dc:	429a      	cmp	r2, r3
 801a6de:	d242      	bcs.n	801a766 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	3308      	adds	r3, #8
 801a6e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6e8:	6a3b      	ldr	r3, [r7, #32]
 801a6ea:	e853 3f00 	ldrex	r3, [r3]
 801a6ee:	61fb      	str	r3, [r7, #28]
   return(result);
 801a6f0:	69fb      	ldr	r3, [r7, #28]
 801a6f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a6f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	3308      	adds	r3, #8
 801a700:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a70a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a70c:	e841 2300 	strex	r3, r2, [r1]
 801a710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a714:	2b00      	cmp	r3, #0
 801a716:	d1e3      	bne.n	801a6e0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	4a17      	ldr	r2, [pc, #92]	@ (801a778 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a71c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	e853 3f00 	ldrex	r3, [r3]
 801a72a:	60bb      	str	r3, [r7, #8]
   return(result);
 801a72c:	68bb      	ldr	r3, [r7, #8]
 801a72e:	f043 0320 	orr.w	r3, r3, #32
 801a732:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	461a      	mov	r2, r3
 801a73c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a740:	61bb      	str	r3, [r7, #24]
 801a742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a744:	6979      	ldr	r1, [r7, #20]
 801a746:	69ba      	ldr	r2, [r7, #24]
 801a748:	e841 2300 	strex	r3, r2, [r1]
 801a74c:	613b      	str	r3, [r7, #16]
   return(result);
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d1e4      	bne.n	801a71e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a754:	e007      	b.n	801a766 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	699a      	ldr	r2, [r3, #24]
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	f042 0208 	orr.w	r2, r2, #8
 801a764:	619a      	str	r2, [r3, #24]
}
 801a766:	bf00      	nop
 801a768:	37b0      	adds	r7, #176	@ 0xb0
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	effffffe 	.word	0xeffffffe
 801a774:	58000c00 	.word	0x58000c00
 801a778:	0801a0a9 	.word	0x0801a0a9

0801a77c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b0ae      	sub	sp, #184	@ 0xb8
 801a780:	af00      	add	r7, sp, #0
 801a782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a78a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	69db      	ldr	r3, [r3, #28]
 801a794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	689b      	ldr	r3, [r3, #8]
 801a7a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a7b2:	2b22      	cmp	r3, #34	@ 0x22
 801a7b4:	f040 8185 	bne.w	801aac2 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a7be:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a7c2:	e128      	b.n	801aa16 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a7d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a7da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a7de:	4013      	ands	r3, r2
 801a7e0:	b29a      	uxth	r2, r3
 801a7e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a7e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7ec:	1c9a      	adds	r2, r3, #2
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a7f8:	b29b      	uxth	r3, r3
 801a7fa:	3b01      	subs	r3, #1
 801a7fc:	b29a      	uxth	r2, r3
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	69db      	ldr	r3, [r3, #28]
 801a80a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a80e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a812:	f003 0307 	and.w	r3, r3, #7
 801a816:	2b00      	cmp	r3, #0
 801a818:	d053      	beq.n	801a8c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a81a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a81e:	f003 0301 	and.w	r3, r3, #1
 801a822:	2b00      	cmp	r3, #0
 801a824:	d011      	beq.n	801a84a <UART_RxISR_16BIT_FIFOEN+0xce>
 801a826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a82a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d00b      	beq.n	801a84a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	2201      	movs	r2, #1
 801a838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a840:	f043 0201 	orr.w	r2, r3, #1
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a84a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a84e:	f003 0302 	and.w	r3, r3, #2
 801a852:	2b00      	cmp	r3, #0
 801a854:	d011      	beq.n	801a87a <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a85a:	f003 0301 	and.w	r3, r3, #1
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d00b      	beq.n	801a87a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2202      	movs	r2, #2
 801a868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a870:	f043 0204 	orr.w	r2, r3, #4
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a87a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a87e:	f003 0304 	and.w	r3, r3, #4
 801a882:	2b00      	cmp	r3, #0
 801a884:	d011      	beq.n	801a8aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a88a:	f003 0301 	and.w	r3, r3, #1
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d00b      	beq.n	801a8aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	2204      	movs	r2, #4
 801a898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8a0:	f043 0202 	orr.w	r2, r3, #2
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d006      	beq.n	801a8c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	f7fe f853 	bl	8018960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2200      	movs	r2, #0
 801a8be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a8c8:	b29b      	uxth	r3, r3
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	f040 80a3 	bne.w	801aa16 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a8d8:	e853 3f00 	ldrex	r3, [r3]
 801a8dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a8de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a8e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	461a      	mov	r2, r3
 801a8ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a8f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a8f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a8fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a8fe:	e841 2300 	strex	r3, r2, [r1]
 801a902:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a906:	2b00      	cmp	r3, #0
 801a908:	d1e2      	bne.n	801a8d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	3308      	adds	r3, #8
 801a910:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a914:	e853 3f00 	ldrex	r3, [r3]
 801a918:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a91a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a91c:	4b6f      	ldr	r3, [pc, #444]	@ (801aadc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a91e:	4013      	ands	r3, r2
 801a920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	3308      	adds	r3, #8
 801a92a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a92e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a930:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a932:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a934:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a936:	e841 2300 	strex	r3, r2, [r1]
 801a93a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a93c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d1e3      	bne.n	801a90a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	2220      	movs	r2, #32
 801a946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2200      	movs	r2, #0
 801a94e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2200      	movs	r2, #0
 801a954:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	4a61      	ldr	r2, [pc, #388]	@ (801aae0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a95c:	4293      	cmp	r3, r2
 801a95e:	d021      	beq.n	801a9a4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d01a      	beq.n	801a9a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a976:	e853 3f00 	ldrex	r3, [r3]
 801a97a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a97c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a97e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	461a      	mov	r2, r3
 801a98c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a990:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a992:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a994:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a996:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a998:	e841 2300 	strex	r3, r2, [r1]
 801a99c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a99e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d1e4      	bne.n	801a96e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9a8:	2b01      	cmp	r3, #1
 801a9aa:	d130      	bne.n	801aa0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	2200      	movs	r2, #0
 801a9b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a9ba:	e853 3f00 	ldrex	r3, [r3]
 801a9be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9c2:	f023 0310 	bic.w	r3, r3, #16
 801a9c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	461a      	mov	r2, r3
 801a9d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a9d4:	647b      	str	r3, [r7, #68]	@ 0x44
 801a9d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a9da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a9dc:	e841 2300 	strex	r3, r2, [r1]
 801a9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d1e4      	bne.n	801a9b2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	69db      	ldr	r3, [r3, #28]
 801a9ee:	f003 0310 	and.w	r3, r3, #16
 801a9f2:	2b10      	cmp	r3, #16
 801a9f4:	d103      	bne.n	801a9fe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	2210      	movs	r2, #16
 801a9fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aa04:	4619      	mov	r1, r3
 801aa06:	6878      	ldr	r0, [r7, #4]
 801aa08:	f7fd ffb4 	bl	8018974 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aa0c:	e00e      	b.n	801aa2c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aa0e:	6878      	ldr	r0, [r7, #4]
 801aa10:	f7eb fdb2 	bl	8006578 <HAL_UART_RxCpltCallback>
        break;
 801aa14:	e00a      	b.n	801aa2c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aa16:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d006      	beq.n	801aa2c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aa1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aa22:	f003 0320 	and.w	r3, r3, #32
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	f47f aecc 	bne.w	801a7c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aa32:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aa36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d049      	beq.n	801aad2 <UART_RxISR_16BIT_FIFOEN+0x356>
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aa44:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aa48:	429a      	cmp	r2, r3
 801aa4a:	d242      	bcs.n	801aad2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	3308      	adds	r3, #8
 801aa52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa56:	e853 3f00 	ldrex	r3, [r3]
 801aa5a:	623b      	str	r3, [r7, #32]
   return(result);
 801aa5c:	6a3b      	ldr	r3, [r7, #32]
 801aa5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aa62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	3308      	adds	r3, #8
 801aa6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801aa70:	633a      	str	r2, [r7, #48]	@ 0x30
 801aa72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aa76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa78:	e841 2300 	strex	r3, r2, [r1]
 801aa7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d1e3      	bne.n	801aa4c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	4a17      	ldr	r2, [pc, #92]	@ (801aae4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801aa88:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa90:	693b      	ldr	r3, [r7, #16]
 801aa92:	e853 3f00 	ldrex	r3, [r3]
 801aa96:	60fb      	str	r3, [r7, #12]
   return(result);
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	f043 0320 	orr.w	r3, r3, #32
 801aa9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	461a      	mov	r2, r3
 801aaa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801aaac:	61fb      	str	r3, [r7, #28]
 801aaae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aab0:	69b9      	ldr	r1, [r7, #24]
 801aab2:	69fa      	ldr	r2, [r7, #28]
 801aab4:	e841 2300 	strex	r3, r2, [r1]
 801aab8:	617b      	str	r3, [r7, #20]
   return(result);
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d1e4      	bne.n	801aa8a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801aac0:	e007      	b.n	801aad2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	699a      	ldr	r2, [r3, #24]
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	f042 0208 	orr.w	r2, r2, #8
 801aad0:	619a      	str	r2, [r3, #24]
}
 801aad2:	bf00      	nop
 801aad4:	37b8      	adds	r7, #184	@ 0xb8
 801aad6:	46bd      	mov	sp, r7
 801aad8:	bd80      	pop	{r7, pc}
 801aada:	bf00      	nop
 801aadc:	effffffe 	.word	0xeffffffe
 801aae0:	58000c00 	.word	0x58000c00
 801aae4:	0801a261 	.word	0x0801a261

0801aae8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801aae8:	b480      	push	{r7}
 801aaea:	b083      	sub	sp, #12
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801aaf0:	bf00      	nop
 801aaf2:	370c      	adds	r7, #12
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafa:	4770      	bx	lr

0801aafc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801aafc:	b480      	push	{r7}
 801aafe:	b083      	sub	sp, #12
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab04:	bf00      	nop
 801ab06:	370c      	adds	r7, #12
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0e:	4770      	bx	lr

0801ab10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801ab10:	b480      	push	{r7}
 801ab12:	b083      	sub	sp, #12
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801ab18:	bf00      	nop
 801ab1a:	370c      	adds	r7, #12
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab22:	4770      	bx	lr

0801ab24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ab24:	b480      	push	{r7}
 801ab26:	b085      	sub	sp, #20
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	d101      	bne.n	801ab3a <HAL_UARTEx_DisableFifoMode+0x16>
 801ab36:	2302      	movs	r3, #2
 801ab38:	e027      	b.n	801ab8a <HAL_UARTEx_DisableFifoMode+0x66>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2201      	movs	r2, #1
 801ab3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2224      	movs	r2, #36	@ 0x24
 801ab46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	681a      	ldr	r2, [r3, #0]
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	f022 0201 	bic.w	r2, r2, #1
 801ab60:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801ab68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	2200      	movs	r2, #0
 801ab6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	68fa      	ldr	r2, [r7, #12]
 801ab76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2220      	movs	r2, #32
 801ab7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2200      	movs	r2, #0
 801ab84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ab88:	2300      	movs	r3, #0
}
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	3714      	adds	r7, #20
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab94:	4770      	bx	lr

0801ab96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ab96:	b580      	push	{r7, lr}
 801ab98:	b084      	sub	sp, #16
 801ab9a:	af00      	add	r7, sp, #0
 801ab9c:	6078      	str	r0, [r7, #4]
 801ab9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801aba6:	2b01      	cmp	r3, #1
 801aba8:	d101      	bne.n	801abae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801abaa:	2302      	movs	r3, #2
 801abac:	e02d      	b.n	801ac0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	2201      	movs	r2, #1
 801abb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	2224      	movs	r2, #36	@ 0x24
 801abba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	681a      	ldr	r2, [r3, #0]
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	f022 0201 	bic.w	r2, r2, #1
 801abd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	689b      	ldr	r3, [r3, #8]
 801abdc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	683a      	ldr	r2, [r7, #0]
 801abe6:	430a      	orrs	r2, r1
 801abe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801abea:	6878      	ldr	r0, [r7, #4]
 801abec:	f000 f850 	bl	801ac90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	68fa      	ldr	r2, [r7, #12]
 801abf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2220      	movs	r2, #32
 801abfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3710      	adds	r7, #16
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}

0801ac12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac12:	b580      	push	{r7, lr}
 801ac14:	b084      	sub	sp, #16
 801ac16:	af00      	add	r7, sp, #0
 801ac18:	6078      	str	r0, [r7, #4]
 801ac1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac22:	2b01      	cmp	r3, #1
 801ac24:	d101      	bne.n	801ac2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ac26:	2302      	movs	r3, #2
 801ac28:	e02d      	b.n	801ac86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	2201      	movs	r2, #1
 801ac2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	2224      	movs	r2, #36	@ 0x24
 801ac36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	681a      	ldr	r2, [r3, #0]
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	f022 0201 	bic.w	r2, r2, #1
 801ac50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	689b      	ldr	r3, [r3, #8]
 801ac58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	683a      	ldr	r2, [r7, #0]
 801ac62:	430a      	orrs	r2, r1
 801ac64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac66:	6878      	ldr	r0, [r7, #4]
 801ac68:	f000 f812 	bl	801ac90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	68fa      	ldr	r2, [r7, #12]
 801ac72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2220      	movs	r2, #32
 801ac78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	2200      	movs	r2, #0
 801ac80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac84:	2300      	movs	r3, #0
}
 801ac86:	4618      	mov	r0, r3
 801ac88:	3710      	adds	r7, #16
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	bd80      	pop	{r7, pc}
	...

0801ac90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ac90:	b480      	push	{r7}
 801ac92:	b085      	sub	sp, #20
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d108      	bne.n	801acb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	2201      	movs	r2, #1
 801aca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2201      	movs	r2, #1
 801acac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801acb0:	e031      	b.n	801ad16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801acb2:	2310      	movs	r3, #16
 801acb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801acb6:	2310      	movs	r3, #16
 801acb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	689b      	ldr	r3, [r3, #8]
 801acc0:	0e5b      	lsrs	r3, r3, #25
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	f003 0307 	and.w	r3, r3, #7
 801acc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	689b      	ldr	r3, [r3, #8]
 801acd0:	0f5b      	lsrs	r3, r3, #29
 801acd2:	b2db      	uxtb	r3, r3
 801acd4:	f003 0307 	and.w	r3, r3, #7
 801acd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801acda:	7bbb      	ldrb	r3, [r7, #14]
 801acdc:	7b3a      	ldrb	r2, [r7, #12]
 801acde:	4911      	ldr	r1, [pc, #68]	@ (801ad24 <UARTEx_SetNbDataToProcess+0x94>)
 801ace0:	5c8a      	ldrb	r2, [r1, r2]
 801ace2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ace6:	7b3a      	ldrb	r2, [r7, #12]
 801ace8:	490f      	ldr	r1, [pc, #60]	@ (801ad28 <UARTEx_SetNbDataToProcess+0x98>)
 801acea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801acec:	fb93 f3f2 	sdiv	r3, r3, r2
 801acf0:	b29a      	uxth	r2, r3
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801acf8:	7bfb      	ldrb	r3, [r7, #15]
 801acfa:	7b7a      	ldrb	r2, [r7, #13]
 801acfc:	4909      	ldr	r1, [pc, #36]	@ (801ad24 <UARTEx_SetNbDataToProcess+0x94>)
 801acfe:	5c8a      	ldrb	r2, [r1, r2]
 801ad00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad04:	7b7a      	ldrb	r2, [r7, #13]
 801ad06:	4908      	ldr	r1, [pc, #32]	@ (801ad28 <UARTEx_SetNbDataToProcess+0x98>)
 801ad08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad0a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad0e:	b29a      	uxth	r2, r3
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ad16:	bf00      	nop
 801ad18:	3714      	adds	r7, #20
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad20:	4770      	bx	lr
 801ad22:	bf00      	nop
 801ad24:	0801eb8c 	.word	0x0801eb8c
 801ad28:	0801eb94 	.word	0x0801eb94

0801ad2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801ad30:	4904      	ldr	r1, [pc, #16]	@ (801ad44 <MX_FATFS_Init+0x18>)
 801ad32:	4805      	ldr	r0, [pc, #20]	@ (801ad48 <MX_FATFS_Init+0x1c>)
 801ad34:	f003 f8d8 	bl	801dee8 <FATFS_LinkDriver>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	461a      	mov	r2, r3
 801ad3c:	4b03      	ldr	r3, [pc, #12]	@ (801ad4c <MX_FATFS_Init+0x20>)
 801ad3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801ad40:	bf00      	nop
 801ad42:	bd80      	pop	{r7, pc}
 801ad44:	2400054c 	.word	0x2400054c
 801ad48:	24000014 	.word	0x24000014
 801ad4c:	24000548 	.word	0x24000548

0801ad50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ad50:	b480      	push	{r7}
 801ad52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801ad54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad5e:	4770      	bx	lr

0801ad60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b082      	sub	sp, #8
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	4603      	mov	r3, r0
 801ad68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801ad6a:	79fb      	ldrb	r3, [r7, #7]
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f7e9 fbf9 	bl	8004564 <SD_disk_initialize>
 801ad72:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801ad74:	4618      	mov	r0, r3
 801ad76:	3708      	adds	r7, #8
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	bd80      	pop	{r7, pc}

0801ad7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b082      	sub	sp, #8
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	4603      	mov	r3, r0
 801ad84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ad86:	79fb      	ldrb	r3, [r7, #7]
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f7e9 fcd7 	bl	800473c <SD_disk_status>
 801ad8e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	3708      	adds	r7, #8
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}

0801ad98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b084      	sub	sp, #16
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	60b9      	str	r1, [r7, #8]
 801ada0:	607a      	str	r2, [r7, #4]
 801ada2:	603b      	str	r3, [r7, #0]
 801ada4:	4603      	mov	r3, r0
 801ada6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ada8:	7bf8      	ldrb	r0, [r7, #15]
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	687a      	ldr	r2, [r7, #4]
 801adae:	68b9      	ldr	r1, [r7, #8]
 801adb0:	f7e9 fcda 	bl	8004768 <SD_disk_read>
 801adb4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801adb6:	4618      	mov	r0, r3
 801adb8:	3710      	adds	r7, #16
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}

0801adbe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801adbe:	b580      	push	{r7, lr}
 801adc0:	b084      	sub	sp, #16
 801adc2:	af00      	add	r7, sp, #0
 801adc4:	60b9      	str	r1, [r7, #8]
 801adc6:	607a      	str	r2, [r7, #4]
 801adc8:	603b      	str	r3, [r7, #0]
 801adca:	4603      	mov	r3, r0
 801adcc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801adce:	7bf8      	ldrb	r0, [r7, #15]
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	687a      	ldr	r2, [r7, #4]
 801add4:	68b9      	ldr	r1, [r7, #8]
 801add6:	f7e9 fd31 	bl	800483c <SD_disk_write>
 801adda:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801addc:	4618      	mov	r0, r3
 801adde:	3710      	adds	r7, #16
 801ade0:	46bd      	mov	sp, r7
 801ade2:	bd80      	pop	{r7, pc}

0801ade4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b082      	sub	sp, #8
 801ade8:	af00      	add	r7, sp, #0
 801adea:	4603      	mov	r3, r0
 801adec:	603a      	str	r2, [r7, #0]
 801adee:	71fb      	strb	r3, [r7, #7]
 801adf0:	460b      	mov	r3, r1
 801adf2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801adf4:	79b9      	ldrb	r1, [r7, #6]
 801adf6:	79fb      	ldrb	r3, [r7, #7]
 801adf8:	683a      	ldr	r2, [r7, #0]
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7e9 fda2 	bl	8004944 <SD_disk_ioctl>
 801ae00:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ae02:	4618      	mov	r0, r3
 801ae04:	3708      	adds	r7, #8
 801ae06:	46bd      	mov	sp, r7
 801ae08:	bd80      	pop	{r7, pc}
	...

0801ae0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b084      	sub	sp, #16
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	4603      	mov	r3, r0
 801ae14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ae16:	79fb      	ldrb	r3, [r7, #7]
 801ae18:	4a08      	ldr	r2, [pc, #32]	@ (801ae3c <disk_status+0x30>)
 801ae1a:	009b      	lsls	r3, r3, #2
 801ae1c:	4413      	add	r3, r2
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	685b      	ldr	r3, [r3, #4]
 801ae22:	79fa      	ldrb	r2, [r7, #7]
 801ae24:	4905      	ldr	r1, [pc, #20]	@ (801ae3c <disk_status+0x30>)
 801ae26:	440a      	add	r2, r1
 801ae28:	7a12      	ldrb	r2, [r2, #8]
 801ae2a:	4610      	mov	r0, r2
 801ae2c:	4798      	blx	r3
 801ae2e:	4603      	mov	r3, r0
 801ae30:	73fb      	strb	r3, [r7, #15]
  return stat;
 801ae32:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae34:	4618      	mov	r0, r3
 801ae36:	3710      	adds	r7, #16
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd80      	pop	{r7, pc}
 801ae3c:	24000768 	.word	0x24000768

0801ae40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b084      	sub	sp, #16
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	4603      	mov	r3, r0
 801ae48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801ae4e:	79fb      	ldrb	r3, [r7, #7]
 801ae50:	4a0e      	ldr	r2, [pc, #56]	@ (801ae8c <disk_initialize+0x4c>)
 801ae52:	5cd3      	ldrb	r3, [r2, r3]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d114      	bne.n	801ae82 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801ae58:	79fb      	ldrb	r3, [r7, #7]
 801ae5a:	4a0c      	ldr	r2, [pc, #48]	@ (801ae8c <disk_initialize+0x4c>)
 801ae5c:	009b      	lsls	r3, r3, #2
 801ae5e:	4413      	add	r3, r2
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	79fa      	ldrb	r2, [r7, #7]
 801ae66:	4909      	ldr	r1, [pc, #36]	@ (801ae8c <disk_initialize+0x4c>)
 801ae68:	440a      	add	r2, r1
 801ae6a:	7a12      	ldrb	r2, [r2, #8]
 801ae6c:	4610      	mov	r0, r2
 801ae6e:	4798      	blx	r3
 801ae70:	4603      	mov	r3, r0
 801ae72:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801ae74:	7bfb      	ldrb	r3, [r7, #15]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d103      	bne.n	801ae82 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801ae7a:	79fb      	ldrb	r3, [r7, #7]
 801ae7c:	4a03      	ldr	r2, [pc, #12]	@ (801ae8c <disk_initialize+0x4c>)
 801ae7e:	2101      	movs	r1, #1
 801ae80:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae84:	4618      	mov	r0, r3
 801ae86:	3710      	adds	r7, #16
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	bd80      	pop	{r7, pc}
 801ae8c:	24000768 	.word	0x24000768

0801ae90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801ae90:	b590      	push	{r4, r7, lr}
 801ae92:	b087      	sub	sp, #28
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	60b9      	str	r1, [r7, #8]
 801ae98:	607a      	str	r2, [r7, #4]
 801ae9a:	603b      	str	r3, [r7, #0]
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801aea0:	7bfb      	ldrb	r3, [r7, #15]
 801aea2:	4a0a      	ldr	r2, [pc, #40]	@ (801aecc <disk_read+0x3c>)
 801aea4:	009b      	lsls	r3, r3, #2
 801aea6:	4413      	add	r3, r2
 801aea8:	685b      	ldr	r3, [r3, #4]
 801aeaa:	689c      	ldr	r4, [r3, #8]
 801aeac:	7bfb      	ldrb	r3, [r7, #15]
 801aeae:	4a07      	ldr	r2, [pc, #28]	@ (801aecc <disk_read+0x3c>)
 801aeb0:	4413      	add	r3, r2
 801aeb2:	7a18      	ldrb	r0, [r3, #8]
 801aeb4:	683b      	ldr	r3, [r7, #0]
 801aeb6:	687a      	ldr	r2, [r7, #4]
 801aeb8:	68b9      	ldr	r1, [r7, #8]
 801aeba:	47a0      	blx	r4
 801aebc:	4603      	mov	r3, r0
 801aebe:	75fb      	strb	r3, [r7, #23]
  return res;
 801aec0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aec2:	4618      	mov	r0, r3
 801aec4:	371c      	adds	r7, #28
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd90      	pop	{r4, r7, pc}
 801aeca:	bf00      	nop
 801aecc:	24000768 	.word	0x24000768

0801aed0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801aed0:	b590      	push	{r4, r7, lr}
 801aed2:	b087      	sub	sp, #28
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	60b9      	str	r1, [r7, #8]
 801aed8:	607a      	str	r2, [r7, #4]
 801aeda:	603b      	str	r3, [r7, #0]
 801aedc:	4603      	mov	r3, r0
 801aede:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801aee0:	7bfb      	ldrb	r3, [r7, #15]
 801aee2:	4a0a      	ldr	r2, [pc, #40]	@ (801af0c <disk_write+0x3c>)
 801aee4:	009b      	lsls	r3, r3, #2
 801aee6:	4413      	add	r3, r2
 801aee8:	685b      	ldr	r3, [r3, #4]
 801aeea:	68dc      	ldr	r4, [r3, #12]
 801aeec:	7bfb      	ldrb	r3, [r7, #15]
 801aeee:	4a07      	ldr	r2, [pc, #28]	@ (801af0c <disk_write+0x3c>)
 801aef0:	4413      	add	r3, r2
 801aef2:	7a18      	ldrb	r0, [r3, #8]
 801aef4:	683b      	ldr	r3, [r7, #0]
 801aef6:	687a      	ldr	r2, [r7, #4]
 801aef8:	68b9      	ldr	r1, [r7, #8]
 801aefa:	47a0      	blx	r4
 801aefc:	4603      	mov	r3, r0
 801aefe:	75fb      	strb	r3, [r7, #23]
  return res;
 801af00:	7dfb      	ldrb	r3, [r7, #23]
}
 801af02:	4618      	mov	r0, r3
 801af04:	371c      	adds	r7, #28
 801af06:	46bd      	mov	sp, r7
 801af08:	bd90      	pop	{r4, r7, pc}
 801af0a:	bf00      	nop
 801af0c:	24000768 	.word	0x24000768

0801af10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b084      	sub	sp, #16
 801af14:	af00      	add	r7, sp, #0
 801af16:	4603      	mov	r3, r0
 801af18:	603a      	str	r2, [r7, #0]
 801af1a:	71fb      	strb	r3, [r7, #7]
 801af1c:	460b      	mov	r3, r1
 801af1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801af20:	79fb      	ldrb	r3, [r7, #7]
 801af22:	4a09      	ldr	r2, [pc, #36]	@ (801af48 <disk_ioctl+0x38>)
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	4413      	add	r3, r2
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	691b      	ldr	r3, [r3, #16]
 801af2c:	79fa      	ldrb	r2, [r7, #7]
 801af2e:	4906      	ldr	r1, [pc, #24]	@ (801af48 <disk_ioctl+0x38>)
 801af30:	440a      	add	r2, r1
 801af32:	7a10      	ldrb	r0, [r2, #8]
 801af34:	79b9      	ldrb	r1, [r7, #6]
 801af36:	683a      	ldr	r2, [r7, #0]
 801af38:	4798      	blx	r3
 801af3a:	4603      	mov	r3, r0
 801af3c:	73fb      	strb	r3, [r7, #15]
  return res;
 801af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 801af40:	4618      	mov	r0, r3
 801af42:	3710      	adds	r7, #16
 801af44:	46bd      	mov	sp, r7
 801af46:	bd80      	pop	{r7, pc}
 801af48:	24000768 	.word	0x24000768

0801af4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801af4c:	b480      	push	{r7}
 801af4e:	b085      	sub	sp, #20
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	3301      	adds	r3, #1
 801af58:	781b      	ldrb	r3, [r3, #0]
 801af5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801af5c:	89fb      	ldrh	r3, [r7, #14]
 801af5e:	021b      	lsls	r3, r3, #8
 801af60:	b21a      	sxth	r2, r3
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	781b      	ldrb	r3, [r3, #0]
 801af66:	b21b      	sxth	r3, r3
 801af68:	4313      	orrs	r3, r2
 801af6a:	b21b      	sxth	r3, r3
 801af6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801af6e:	89fb      	ldrh	r3, [r7, #14]
}
 801af70:	4618      	mov	r0, r3
 801af72:	3714      	adds	r7, #20
 801af74:	46bd      	mov	sp, r7
 801af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7a:	4770      	bx	lr

0801af7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801af7c:	b480      	push	{r7}
 801af7e:	b085      	sub	sp, #20
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	3303      	adds	r3, #3
 801af88:	781b      	ldrb	r3, [r3, #0]
 801af8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	021b      	lsls	r3, r3, #8
 801af90:	687a      	ldr	r2, [r7, #4]
 801af92:	3202      	adds	r2, #2
 801af94:	7812      	ldrb	r2, [r2, #0]
 801af96:	4313      	orrs	r3, r2
 801af98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	021b      	lsls	r3, r3, #8
 801af9e:	687a      	ldr	r2, [r7, #4]
 801afa0:	3201      	adds	r2, #1
 801afa2:	7812      	ldrb	r2, [r2, #0]
 801afa4:	4313      	orrs	r3, r2
 801afa6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	021b      	lsls	r3, r3, #8
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	7812      	ldrb	r2, [r2, #0]
 801afb0:	4313      	orrs	r3, r2
 801afb2:	60fb      	str	r3, [r7, #12]
	return rv;
 801afb4:	68fb      	ldr	r3, [r7, #12]
}
 801afb6:	4618      	mov	r0, r3
 801afb8:	3714      	adds	r7, #20
 801afba:	46bd      	mov	sp, r7
 801afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc0:	4770      	bx	lr

0801afc2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801afc2:	b480      	push	{r7}
 801afc4:	b083      	sub	sp, #12
 801afc6:	af00      	add	r7, sp, #0
 801afc8:	6078      	str	r0, [r7, #4]
 801afca:	460b      	mov	r3, r1
 801afcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	1c5a      	adds	r2, r3, #1
 801afd2:	607a      	str	r2, [r7, #4]
 801afd4:	887a      	ldrh	r2, [r7, #2]
 801afd6:	b2d2      	uxtb	r2, r2
 801afd8:	701a      	strb	r2, [r3, #0]
 801afda:	887b      	ldrh	r3, [r7, #2]
 801afdc:	0a1b      	lsrs	r3, r3, #8
 801afde:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	1c5a      	adds	r2, r3, #1
 801afe4:	607a      	str	r2, [r7, #4]
 801afe6:	887a      	ldrh	r2, [r7, #2]
 801afe8:	b2d2      	uxtb	r2, r2
 801afea:	701a      	strb	r2, [r3, #0]
}
 801afec:	bf00      	nop
 801afee:	370c      	adds	r7, #12
 801aff0:	46bd      	mov	sp, r7
 801aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff6:	4770      	bx	lr

0801aff8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801aff8:	b480      	push	{r7}
 801affa:	b083      	sub	sp, #12
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
 801b000:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	1c5a      	adds	r2, r3, #1
 801b006:	607a      	str	r2, [r7, #4]
 801b008:	683a      	ldr	r2, [r7, #0]
 801b00a:	b2d2      	uxtb	r2, r2
 801b00c:	701a      	strb	r2, [r3, #0]
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	0a1b      	lsrs	r3, r3, #8
 801b012:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	1c5a      	adds	r2, r3, #1
 801b018:	607a      	str	r2, [r7, #4]
 801b01a:	683a      	ldr	r2, [r7, #0]
 801b01c:	b2d2      	uxtb	r2, r2
 801b01e:	701a      	strb	r2, [r3, #0]
 801b020:	683b      	ldr	r3, [r7, #0]
 801b022:	0a1b      	lsrs	r3, r3, #8
 801b024:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	1c5a      	adds	r2, r3, #1
 801b02a:	607a      	str	r2, [r7, #4]
 801b02c:	683a      	ldr	r2, [r7, #0]
 801b02e:	b2d2      	uxtb	r2, r2
 801b030:	701a      	strb	r2, [r3, #0]
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	0a1b      	lsrs	r3, r3, #8
 801b036:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	1c5a      	adds	r2, r3, #1
 801b03c:	607a      	str	r2, [r7, #4]
 801b03e:	683a      	ldr	r2, [r7, #0]
 801b040:	b2d2      	uxtb	r2, r2
 801b042:	701a      	strb	r2, [r3, #0]
}
 801b044:	bf00      	nop
 801b046:	370c      	adds	r7, #12
 801b048:	46bd      	mov	sp, r7
 801b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b04e:	4770      	bx	lr

0801b050 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b050:	b480      	push	{r7}
 801b052:	b087      	sub	sp, #28
 801b054:	af00      	add	r7, sp, #0
 801b056:	60f8      	str	r0, [r7, #12]
 801b058:	60b9      	str	r1, [r7, #8]
 801b05a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b060:	68bb      	ldr	r3, [r7, #8]
 801b062:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d00d      	beq.n	801b086 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b06a:	693a      	ldr	r2, [r7, #16]
 801b06c:	1c53      	adds	r3, r2, #1
 801b06e:	613b      	str	r3, [r7, #16]
 801b070:	697b      	ldr	r3, [r7, #20]
 801b072:	1c59      	adds	r1, r3, #1
 801b074:	6179      	str	r1, [r7, #20]
 801b076:	7812      	ldrb	r2, [r2, #0]
 801b078:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	3b01      	subs	r3, #1
 801b07e:	607b      	str	r3, [r7, #4]
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d1f1      	bne.n	801b06a <mem_cpy+0x1a>
	}
}
 801b086:	bf00      	nop
 801b088:	371c      	adds	r7, #28
 801b08a:	46bd      	mov	sp, r7
 801b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b090:	4770      	bx	lr

0801b092 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b092:	b480      	push	{r7}
 801b094:	b087      	sub	sp, #28
 801b096:	af00      	add	r7, sp, #0
 801b098:	60f8      	str	r0, [r7, #12]
 801b09a:	60b9      	str	r1, [r7, #8]
 801b09c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b0a2:	697b      	ldr	r3, [r7, #20]
 801b0a4:	1c5a      	adds	r2, r3, #1
 801b0a6:	617a      	str	r2, [r7, #20]
 801b0a8:	68ba      	ldr	r2, [r7, #8]
 801b0aa:	b2d2      	uxtb	r2, r2
 801b0ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	3b01      	subs	r3, #1
 801b0b2:	607b      	str	r3, [r7, #4]
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d1f3      	bne.n	801b0a2 <mem_set+0x10>
}
 801b0ba:	bf00      	nop
 801b0bc:	bf00      	nop
 801b0be:	371c      	adds	r7, #28
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c6:	4770      	bx	lr

0801b0c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b0c8:	b480      	push	{r7}
 801b0ca:	b089      	sub	sp, #36	@ 0x24
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	60f8      	str	r0, [r7, #12]
 801b0d0:	60b9      	str	r1, [r7, #8]
 801b0d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	61fb      	str	r3, [r7, #28]
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b0dc:	2300      	movs	r3, #0
 801b0de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b0e0:	69fb      	ldr	r3, [r7, #28]
 801b0e2:	1c5a      	adds	r2, r3, #1
 801b0e4:	61fa      	str	r2, [r7, #28]
 801b0e6:	781b      	ldrb	r3, [r3, #0]
 801b0e8:	4619      	mov	r1, r3
 801b0ea:	69bb      	ldr	r3, [r7, #24]
 801b0ec:	1c5a      	adds	r2, r3, #1
 801b0ee:	61ba      	str	r2, [r7, #24]
 801b0f0:	781b      	ldrb	r3, [r3, #0]
 801b0f2:	1acb      	subs	r3, r1, r3
 801b0f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	3b01      	subs	r3, #1
 801b0fa:	607b      	str	r3, [r7, #4]
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d002      	beq.n	801b108 <mem_cmp+0x40>
 801b102:	697b      	ldr	r3, [r7, #20]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d0eb      	beq.n	801b0e0 <mem_cmp+0x18>

	return r;
 801b108:	697b      	ldr	r3, [r7, #20]
}
 801b10a:	4618      	mov	r0, r3
 801b10c:	3724      	adds	r7, #36	@ 0x24
 801b10e:	46bd      	mov	sp, r7
 801b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b114:	4770      	bx	lr

0801b116 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b116:	b480      	push	{r7}
 801b118:	b083      	sub	sp, #12
 801b11a:	af00      	add	r7, sp, #0
 801b11c:	6078      	str	r0, [r7, #4]
 801b11e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b120:	e002      	b.n	801b128 <chk_chr+0x12>
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	3301      	adds	r3, #1
 801b126:	607b      	str	r3, [r7, #4]
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	781b      	ldrb	r3, [r3, #0]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d005      	beq.n	801b13c <chk_chr+0x26>
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	781b      	ldrb	r3, [r3, #0]
 801b134:	461a      	mov	r2, r3
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	4293      	cmp	r3, r2
 801b13a:	d1f2      	bne.n	801b122 <chk_chr+0xc>
	return *str;
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	781b      	ldrb	r3, [r3, #0]
}
 801b140:	4618      	mov	r0, r3
 801b142:	370c      	adds	r7, #12
 801b144:	46bd      	mov	sp, r7
 801b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14a:	4770      	bx	lr

0801b14c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b14c:	b480      	push	{r7}
 801b14e:	b085      	sub	sp, #20
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
 801b154:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b156:	2300      	movs	r3, #0
 801b158:	60bb      	str	r3, [r7, #8]
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	60fb      	str	r3, [r7, #12]
 801b15e:	e029      	b.n	801b1b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b160:	4a27      	ldr	r2, [pc, #156]	@ (801b200 <chk_lock+0xb4>)
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	011b      	lsls	r3, r3, #4
 801b166:	4413      	add	r3, r2
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d01d      	beq.n	801b1aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b16e:	4a24      	ldr	r2, [pc, #144]	@ (801b200 <chk_lock+0xb4>)
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	011b      	lsls	r3, r3, #4
 801b174:	4413      	add	r3, r2
 801b176:	681a      	ldr	r2, [r3, #0]
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	429a      	cmp	r2, r3
 801b17e:	d116      	bne.n	801b1ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b180:	4a1f      	ldr	r2, [pc, #124]	@ (801b200 <chk_lock+0xb4>)
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	011b      	lsls	r3, r3, #4
 801b186:	4413      	add	r3, r2
 801b188:	3304      	adds	r3, #4
 801b18a:	681a      	ldr	r2, [r3, #0]
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b190:	429a      	cmp	r2, r3
 801b192:	d10c      	bne.n	801b1ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b194:	4a1a      	ldr	r2, [pc, #104]	@ (801b200 <chk_lock+0xb4>)
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	011b      	lsls	r3, r3, #4
 801b19a:	4413      	add	r3, r2
 801b19c:	3308      	adds	r3, #8
 801b19e:	681a      	ldr	r2, [r3, #0]
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d102      	bne.n	801b1ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b1a8:	e007      	b.n	801b1ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	3301      	adds	r3, #1
 801b1b2:	60fb      	str	r3, [r7, #12]
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d0d2      	beq.n	801b160 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	2b01      	cmp	r3, #1
 801b1be:	d109      	bne.n	801b1d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b1c0:	68bb      	ldr	r3, [r7, #8]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d102      	bne.n	801b1cc <chk_lock+0x80>
 801b1c6:	683b      	ldr	r3, [r7, #0]
 801b1c8:	2b02      	cmp	r3, #2
 801b1ca:	d101      	bne.n	801b1d0 <chk_lock+0x84>
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	e010      	b.n	801b1f2 <chk_lock+0xa6>
 801b1d0:	2312      	movs	r3, #18
 801b1d2:	e00e      	b.n	801b1f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b1d4:	683b      	ldr	r3, [r7, #0]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d108      	bne.n	801b1ec <chk_lock+0xa0>
 801b1da:	4a09      	ldr	r2, [pc, #36]	@ (801b200 <chk_lock+0xb4>)
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	011b      	lsls	r3, r3, #4
 801b1e0:	4413      	add	r3, r2
 801b1e2:	330c      	adds	r3, #12
 801b1e4:	881b      	ldrh	r3, [r3, #0]
 801b1e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b1ea:	d101      	bne.n	801b1f0 <chk_lock+0xa4>
 801b1ec:	2310      	movs	r3, #16
 801b1ee:	e000      	b.n	801b1f2 <chk_lock+0xa6>
 801b1f0:	2300      	movs	r3, #0
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3714      	adds	r7, #20
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1fc:	4770      	bx	lr
 801b1fe:	bf00      	nop
 801b200:	24000558 	.word	0x24000558

0801b204 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b204:	b480      	push	{r7}
 801b206:	b083      	sub	sp, #12
 801b208:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b20a:	2300      	movs	r3, #0
 801b20c:	607b      	str	r3, [r7, #4]
 801b20e:	e002      	b.n	801b216 <enq_lock+0x12>
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	3301      	adds	r3, #1
 801b214:	607b      	str	r3, [r7, #4]
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d106      	bne.n	801b22a <enq_lock+0x26>
 801b21c:	4a09      	ldr	r2, [pc, #36]	@ (801b244 <enq_lock+0x40>)
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	011b      	lsls	r3, r3, #4
 801b222:	4413      	add	r3, r2
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d1f2      	bne.n	801b210 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	bf14      	ite	ne
 801b230:	2301      	movne	r3, #1
 801b232:	2300      	moveq	r3, #0
 801b234:	b2db      	uxtb	r3, r3
}
 801b236:	4618      	mov	r0, r3
 801b238:	370c      	adds	r7, #12
 801b23a:	46bd      	mov	sp, r7
 801b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b240:	4770      	bx	lr
 801b242:	bf00      	nop
 801b244:	24000558 	.word	0x24000558

0801b248 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b248:	b480      	push	{r7}
 801b24a:	b085      	sub	sp, #20
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
 801b250:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b252:	2300      	movs	r3, #0
 801b254:	60fb      	str	r3, [r7, #12]
 801b256:	e01f      	b.n	801b298 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b258:	4a41      	ldr	r2, [pc, #260]	@ (801b360 <inc_lock+0x118>)
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	011b      	lsls	r3, r3, #4
 801b25e:	4413      	add	r3, r2
 801b260:	681a      	ldr	r2, [r3, #0]
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	429a      	cmp	r2, r3
 801b268:	d113      	bne.n	801b292 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b26a:	4a3d      	ldr	r2, [pc, #244]	@ (801b360 <inc_lock+0x118>)
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	011b      	lsls	r3, r3, #4
 801b270:	4413      	add	r3, r2
 801b272:	3304      	adds	r3, #4
 801b274:	681a      	ldr	r2, [r3, #0]
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d109      	bne.n	801b292 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b27e:	4a38      	ldr	r2, [pc, #224]	@ (801b360 <inc_lock+0x118>)
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	011b      	lsls	r3, r3, #4
 801b284:	4413      	add	r3, r2
 801b286:	3308      	adds	r3, #8
 801b288:	681a      	ldr	r2, [r3, #0]
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b28e:	429a      	cmp	r2, r3
 801b290:	d006      	beq.n	801b2a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	3301      	adds	r3, #1
 801b296:	60fb      	str	r3, [r7, #12]
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d0dc      	beq.n	801b258 <inc_lock+0x10>
 801b29e:	e000      	b.n	801b2a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b2a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	2b01      	cmp	r3, #1
 801b2a6:	d132      	bne.n	801b30e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	60fb      	str	r3, [r7, #12]
 801b2ac:	e002      	b.n	801b2b4 <inc_lock+0x6c>
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	3301      	adds	r3, #1
 801b2b2:	60fb      	str	r3, [r7, #12]
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d106      	bne.n	801b2c8 <inc_lock+0x80>
 801b2ba:	4a29      	ldr	r2, [pc, #164]	@ (801b360 <inc_lock+0x118>)
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	011b      	lsls	r3, r3, #4
 801b2c0:	4413      	add	r3, r2
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d1f2      	bne.n	801b2ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	2b01      	cmp	r3, #1
 801b2cc:	d101      	bne.n	801b2d2 <inc_lock+0x8a>
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	e040      	b.n	801b354 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681a      	ldr	r2, [r3, #0]
 801b2d6:	4922      	ldr	r1, [pc, #136]	@ (801b360 <inc_lock+0x118>)
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	011b      	lsls	r3, r3, #4
 801b2dc:	440b      	add	r3, r1
 801b2de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	689a      	ldr	r2, [r3, #8]
 801b2e4:	491e      	ldr	r1, [pc, #120]	@ (801b360 <inc_lock+0x118>)
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	011b      	lsls	r3, r3, #4
 801b2ea:	440b      	add	r3, r1
 801b2ec:	3304      	adds	r3, #4
 801b2ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	695a      	ldr	r2, [r3, #20]
 801b2f4:	491a      	ldr	r1, [pc, #104]	@ (801b360 <inc_lock+0x118>)
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	011b      	lsls	r3, r3, #4
 801b2fa:	440b      	add	r3, r1
 801b2fc:	3308      	adds	r3, #8
 801b2fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b300:	4a17      	ldr	r2, [pc, #92]	@ (801b360 <inc_lock+0x118>)
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	011b      	lsls	r3, r3, #4
 801b306:	4413      	add	r3, r2
 801b308:	330c      	adds	r3, #12
 801b30a:	2200      	movs	r2, #0
 801b30c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b30e:	683b      	ldr	r3, [r7, #0]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d009      	beq.n	801b328 <inc_lock+0xe0>
 801b314:	4a12      	ldr	r2, [pc, #72]	@ (801b360 <inc_lock+0x118>)
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	011b      	lsls	r3, r3, #4
 801b31a:	4413      	add	r3, r2
 801b31c:	330c      	adds	r3, #12
 801b31e:	881b      	ldrh	r3, [r3, #0]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d001      	beq.n	801b328 <inc_lock+0xe0>
 801b324:	2300      	movs	r3, #0
 801b326:	e015      	b.n	801b354 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d108      	bne.n	801b340 <inc_lock+0xf8>
 801b32e:	4a0c      	ldr	r2, [pc, #48]	@ (801b360 <inc_lock+0x118>)
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	011b      	lsls	r3, r3, #4
 801b334:	4413      	add	r3, r2
 801b336:	330c      	adds	r3, #12
 801b338:	881b      	ldrh	r3, [r3, #0]
 801b33a:	3301      	adds	r3, #1
 801b33c:	b29a      	uxth	r2, r3
 801b33e:	e001      	b.n	801b344 <inc_lock+0xfc>
 801b340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b344:	4906      	ldr	r1, [pc, #24]	@ (801b360 <inc_lock+0x118>)
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	011b      	lsls	r3, r3, #4
 801b34a:	440b      	add	r3, r1
 801b34c:	330c      	adds	r3, #12
 801b34e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	3301      	adds	r3, #1
}
 801b354:	4618      	mov	r0, r3
 801b356:	3714      	adds	r7, #20
 801b358:	46bd      	mov	sp, r7
 801b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b35e:	4770      	bx	lr
 801b360:	24000558 	.word	0x24000558

0801b364 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b364:	b480      	push	{r7}
 801b366:	b085      	sub	sp, #20
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	3b01      	subs	r3, #1
 801b370:	607b      	str	r3, [r7, #4]
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d125      	bne.n	801b3c4 <dec_lock+0x60>
		n = Files[i].ctr;
 801b378:	4a17      	ldr	r2, [pc, #92]	@ (801b3d8 <dec_lock+0x74>)
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	011b      	lsls	r3, r3, #4
 801b37e:	4413      	add	r3, r2
 801b380:	330c      	adds	r3, #12
 801b382:	881b      	ldrh	r3, [r3, #0]
 801b384:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b386:	89fb      	ldrh	r3, [r7, #14]
 801b388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b38c:	d101      	bne.n	801b392 <dec_lock+0x2e>
 801b38e:	2300      	movs	r3, #0
 801b390:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b392:	89fb      	ldrh	r3, [r7, #14]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d002      	beq.n	801b39e <dec_lock+0x3a>
 801b398:	89fb      	ldrh	r3, [r7, #14]
 801b39a:	3b01      	subs	r3, #1
 801b39c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b39e:	4a0e      	ldr	r2, [pc, #56]	@ (801b3d8 <dec_lock+0x74>)
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	011b      	lsls	r3, r3, #4
 801b3a4:	4413      	add	r3, r2
 801b3a6:	330c      	adds	r3, #12
 801b3a8:	89fa      	ldrh	r2, [r7, #14]
 801b3aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b3ac:	89fb      	ldrh	r3, [r7, #14]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d105      	bne.n	801b3be <dec_lock+0x5a>
 801b3b2:	4a09      	ldr	r2, [pc, #36]	@ (801b3d8 <dec_lock+0x74>)
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	011b      	lsls	r3, r3, #4
 801b3b8:	4413      	add	r3, r2
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b3be:	2300      	movs	r3, #0
 801b3c0:	737b      	strb	r3, [r7, #13]
 801b3c2:	e001      	b.n	801b3c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b3c4:	2302      	movs	r3, #2
 801b3c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b3c8:	7b7b      	ldrb	r3, [r7, #13]
}
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	3714      	adds	r7, #20
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d4:	4770      	bx	lr
 801b3d6:	bf00      	nop
 801b3d8:	24000558 	.word	0x24000558

0801b3dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b3dc:	b480      	push	{r7}
 801b3de:	b085      	sub	sp, #20
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	60fb      	str	r3, [r7, #12]
 801b3e8:	e010      	b.n	801b40c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b3ea:	4a0d      	ldr	r2, [pc, #52]	@ (801b420 <clear_lock+0x44>)
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	011b      	lsls	r3, r3, #4
 801b3f0:	4413      	add	r3, r2
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	687a      	ldr	r2, [r7, #4]
 801b3f6:	429a      	cmp	r2, r3
 801b3f8:	d105      	bne.n	801b406 <clear_lock+0x2a>
 801b3fa:	4a09      	ldr	r2, [pc, #36]	@ (801b420 <clear_lock+0x44>)
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	011b      	lsls	r3, r3, #4
 801b400:	4413      	add	r3, r2
 801b402:	2200      	movs	r2, #0
 801b404:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	3301      	adds	r3, #1
 801b40a:	60fb      	str	r3, [r7, #12]
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d0eb      	beq.n	801b3ea <clear_lock+0xe>
	}
}
 801b412:	bf00      	nop
 801b414:	bf00      	nop
 801b416:	3714      	adds	r7, #20
 801b418:	46bd      	mov	sp, r7
 801b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b41e:	4770      	bx	lr
 801b420:	24000558 	.word	0x24000558

0801b424 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b086      	sub	sp, #24
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b42c:	2300      	movs	r3, #0
 801b42e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	78db      	ldrb	r3, [r3, #3]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d034      	beq.n	801b4a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b43c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	7858      	ldrb	r0, [r3, #1]
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b448:	2301      	movs	r3, #1
 801b44a:	697a      	ldr	r2, [r7, #20]
 801b44c:	f7ff fd40 	bl	801aed0 <disk_write>
 801b450:	4603      	mov	r3, r0
 801b452:	2b00      	cmp	r3, #0
 801b454:	d002      	beq.n	801b45c <sync_window+0x38>
			res = FR_DISK_ERR;
 801b456:	2301      	movs	r3, #1
 801b458:	73fb      	strb	r3, [r7, #15]
 801b45a:	e022      	b.n	801b4a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	2200      	movs	r2, #0
 801b460:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b466:	697a      	ldr	r2, [r7, #20]
 801b468:	1ad2      	subs	r2, r2, r3
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6a1b      	ldr	r3, [r3, #32]
 801b46e:	429a      	cmp	r2, r3
 801b470:	d217      	bcs.n	801b4a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	789b      	ldrb	r3, [r3, #2]
 801b476:	613b      	str	r3, [r7, #16]
 801b478:	e010      	b.n	801b49c <sync_window+0x78>
					wsect += fs->fsize;
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6a1b      	ldr	r3, [r3, #32]
 801b47e:	697a      	ldr	r2, [r7, #20]
 801b480:	4413      	add	r3, r2
 801b482:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	7858      	ldrb	r0, [r3, #1]
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b48e:	2301      	movs	r3, #1
 801b490:	697a      	ldr	r2, [r7, #20]
 801b492:	f7ff fd1d 	bl	801aed0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	3b01      	subs	r3, #1
 801b49a:	613b      	str	r3, [r7, #16]
 801b49c:	693b      	ldr	r3, [r7, #16]
 801b49e:	2b01      	cmp	r3, #1
 801b4a0:	d8eb      	bhi.n	801b47a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	3718      	adds	r7, #24
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	bd80      	pop	{r7, pc}

0801b4ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b4ac:	b580      	push	{r7, lr}
 801b4ae:	b084      	sub	sp, #16
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	6078      	str	r0, [r7, #4]
 801b4b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4be:	683a      	ldr	r2, [r7, #0]
 801b4c0:	429a      	cmp	r2, r3
 801b4c2:	d01b      	beq.n	801b4fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b4c4:	6878      	ldr	r0, [r7, #4]
 801b4c6:	f7ff ffad 	bl	801b424 <sync_window>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b4ce:	7bfb      	ldrb	r3, [r7, #15]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d113      	bne.n	801b4fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	7858      	ldrb	r0, [r3, #1]
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4de:	2301      	movs	r3, #1
 801b4e0:	683a      	ldr	r2, [r7, #0]
 801b4e2:	f7ff fcd5 	bl	801ae90 <disk_read>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d004      	beq.n	801b4f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b4f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b4f2:	2301      	movs	r3, #1
 801b4f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	683a      	ldr	r2, [r7, #0]
 801b4fa:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4fe:	4618      	mov	r0, r3
 801b500:	3710      	adds	r7, #16
 801b502:	46bd      	mov	sp, r7
 801b504:	bd80      	pop	{r7, pc}
	...

0801b508 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b084      	sub	sp, #16
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	f7ff ff87 	bl	801b424 <sync_window>
 801b516:	4603      	mov	r3, r0
 801b518:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b51a:	7bfb      	ldrb	r3, [r7, #15]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d159      	bne.n	801b5d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	781b      	ldrb	r3, [r3, #0]
 801b524:	2b03      	cmp	r3, #3
 801b526:	d149      	bne.n	801b5bc <sync_fs+0xb4>
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	791b      	ldrb	r3, [r3, #4]
 801b52c:	2b01      	cmp	r3, #1
 801b52e:	d145      	bne.n	801b5bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	899b      	ldrh	r3, [r3, #12]
 801b53a:	461a      	mov	r2, r3
 801b53c:	2100      	movs	r1, #0
 801b53e:	f7ff fda8 	bl	801b092 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	3338      	adds	r3, #56	@ 0x38
 801b546:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b54a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b54e:	4618      	mov	r0, r3
 801b550:	f7ff fd37 	bl	801afc2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	3338      	adds	r3, #56	@ 0x38
 801b558:	4921      	ldr	r1, [pc, #132]	@ (801b5e0 <sync_fs+0xd8>)
 801b55a:	4618      	mov	r0, r3
 801b55c:	f7ff fd4c 	bl	801aff8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	3338      	adds	r3, #56	@ 0x38
 801b564:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b568:	491e      	ldr	r1, [pc, #120]	@ (801b5e4 <sync_fs+0xdc>)
 801b56a:	4618      	mov	r0, r3
 801b56c:	f7ff fd44 	bl	801aff8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	3338      	adds	r3, #56	@ 0x38
 801b574:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	699b      	ldr	r3, [r3, #24]
 801b57c:	4619      	mov	r1, r3
 801b57e:	4610      	mov	r0, r2
 801b580:	f7ff fd3a 	bl	801aff8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	3338      	adds	r3, #56	@ 0x38
 801b588:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	695b      	ldr	r3, [r3, #20]
 801b590:	4619      	mov	r1, r3
 801b592:	4610      	mov	r0, r2
 801b594:	f7ff fd30 	bl	801aff8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b59c:	1c5a      	adds	r2, r3, #1
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	7858      	ldrb	r0, [r3, #1]
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b5b0:	2301      	movs	r3, #1
 801b5b2:	f7ff fc8d 	bl	801aed0 <disk_write>
			fs->fsi_flag = 0;
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	785b      	ldrb	r3, [r3, #1]
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	2100      	movs	r1, #0
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f7ff fca3 	bl	801af10 <disk_ioctl>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d001      	beq.n	801b5d4 <sync_fs+0xcc>
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	3710      	adds	r7, #16
 801b5da:	46bd      	mov	sp, r7
 801b5dc:	bd80      	pop	{r7, pc}
 801b5de:	bf00      	nop
 801b5e0:	41615252 	.word	0x41615252
 801b5e4:	61417272 	.word	0x61417272

0801b5e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b5e8:	b480      	push	{r7}
 801b5ea:	b083      	sub	sp, #12
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
 801b5f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	3b02      	subs	r3, #2
 801b5f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	69db      	ldr	r3, [r3, #28]
 801b5fc:	3b02      	subs	r3, #2
 801b5fe:	683a      	ldr	r2, [r7, #0]
 801b600:	429a      	cmp	r2, r3
 801b602:	d301      	bcc.n	801b608 <clust2sect+0x20>
 801b604:	2300      	movs	r3, #0
 801b606:	e008      	b.n	801b61a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	895b      	ldrh	r3, [r3, #10]
 801b60c:	461a      	mov	r2, r3
 801b60e:	683b      	ldr	r3, [r7, #0]
 801b610:	fb03 f202 	mul.w	r2, r3, r2
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b618:	4413      	add	r3, r2
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	370c      	adds	r7, #12
 801b61e:	46bd      	mov	sp, r7
 801b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b624:	4770      	bx	lr

0801b626 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b626:	b580      	push	{r7, lr}
 801b628:	b086      	sub	sp, #24
 801b62a:	af00      	add	r7, sp, #0
 801b62c:	6078      	str	r0, [r7, #4]
 801b62e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b636:	683b      	ldr	r3, [r7, #0]
 801b638:	2b01      	cmp	r3, #1
 801b63a:	d904      	bls.n	801b646 <get_fat+0x20>
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	69db      	ldr	r3, [r3, #28]
 801b640:	683a      	ldr	r2, [r7, #0]
 801b642:	429a      	cmp	r2, r3
 801b644:	d302      	bcc.n	801b64c <get_fat+0x26>
		val = 1;	/* Internal error */
 801b646:	2301      	movs	r3, #1
 801b648:	617b      	str	r3, [r7, #20]
 801b64a:	e0ba      	b.n	801b7c2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b64c:	f04f 33ff 	mov.w	r3, #4294967295
 801b650:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b652:	693b      	ldr	r3, [r7, #16]
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	2b03      	cmp	r3, #3
 801b658:	f000 8082 	beq.w	801b760 <get_fat+0x13a>
 801b65c:	2b03      	cmp	r3, #3
 801b65e:	f300 80a6 	bgt.w	801b7ae <get_fat+0x188>
 801b662:	2b01      	cmp	r3, #1
 801b664:	d002      	beq.n	801b66c <get_fat+0x46>
 801b666:	2b02      	cmp	r3, #2
 801b668:	d055      	beq.n	801b716 <get_fat+0xf0>
 801b66a:	e0a0      	b.n	801b7ae <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b66c:	683b      	ldr	r3, [r7, #0]
 801b66e:	60fb      	str	r3, [r7, #12]
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	085b      	lsrs	r3, r3, #1
 801b674:	68fa      	ldr	r2, [r7, #12]
 801b676:	4413      	add	r3, r2
 801b678:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b67a:	693b      	ldr	r3, [r7, #16]
 801b67c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b67e:	693b      	ldr	r3, [r7, #16]
 801b680:	899b      	ldrh	r3, [r3, #12]
 801b682:	4619      	mov	r1, r3
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	fbb3 f3f1 	udiv	r3, r3, r1
 801b68a:	4413      	add	r3, r2
 801b68c:	4619      	mov	r1, r3
 801b68e:	6938      	ldr	r0, [r7, #16]
 801b690:	f7ff ff0c 	bl	801b4ac <move_window>
 801b694:	4603      	mov	r3, r0
 801b696:	2b00      	cmp	r3, #0
 801b698:	f040 808c 	bne.w	801b7b4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	1c5a      	adds	r2, r3, #1
 801b6a0:	60fa      	str	r2, [r7, #12]
 801b6a2:	693a      	ldr	r2, [r7, #16]
 801b6a4:	8992      	ldrh	r2, [r2, #12]
 801b6a6:	fbb3 f1f2 	udiv	r1, r3, r2
 801b6aa:	fb01 f202 	mul.w	r2, r1, r2
 801b6ae:	1a9b      	subs	r3, r3, r2
 801b6b0:	693a      	ldr	r2, [r7, #16]
 801b6b2:	4413      	add	r3, r2
 801b6b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b6b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b6ba:	693b      	ldr	r3, [r7, #16]
 801b6bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6be:	693b      	ldr	r3, [r7, #16]
 801b6c0:	899b      	ldrh	r3, [r3, #12]
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6ca:	4413      	add	r3, r2
 801b6cc:	4619      	mov	r1, r3
 801b6ce:	6938      	ldr	r0, [r7, #16]
 801b6d0:	f7ff feec 	bl	801b4ac <move_window>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d16e      	bne.n	801b7b8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b6da:	693b      	ldr	r3, [r7, #16]
 801b6dc:	899b      	ldrh	r3, [r3, #12]
 801b6de:	461a      	mov	r2, r3
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	fbb3 f1f2 	udiv	r1, r3, r2
 801b6e6:	fb01 f202 	mul.w	r2, r1, r2
 801b6ea:	1a9b      	subs	r3, r3, r2
 801b6ec:	693a      	ldr	r2, [r7, #16]
 801b6ee:	4413      	add	r3, r2
 801b6f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b6f4:	021b      	lsls	r3, r3, #8
 801b6f6:	68ba      	ldr	r2, [r7, #8]
 801b6f8:	4313      	orrs	r3, r2
 801b6fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b6fc:	683b      	ldr	r3, [r7, #0]
 801b6fe:	f003 0301 	and.w	r3, r3, #1
 801b702:	2b00      	cmp	r3, #0
 801b704:	d002      	beq.n	801b70c <get_fat+0xe6>
 801b706:	68bb      	ldr	r3, [r7, #8]
 801b708:	091b      	lsrs	r3, r3, #4
 801b70a:	e002      	b.n	801b712 <get_fat+0xec>
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b712:	617b      	str	r3, [r7, #20]
			break;
 801b714:	e055      	b.n	801b7c2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b716:	693b      	ldr	r3, [r7, #16]
 801b718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b71a:	693b      	ldr	r3, [r7, #16]
 801b71c:	899b      	ldrh	r3, [r3, #12]
 801b71e:	085b      	lsrs	r3, r3, #1
 801b720:	b29b      	uxth	r3, r3
 801b722:	4619      	mov	r1, r3
 801b724:	683b      	ldr	r3, [r7, #0]
 801b726:	fbb3 f3f1 	udiv	r3, r3, r1
 801b72a:	4413      	add	r3, r2
 801b72c:	4619      	mov	r1, r3
 801b72e:	6938      	ldr	r0, [r7, #16]
 801b730:	f7ff febc 	bl	801b4ac <move_window>
 801b734:	4603      	mov	r3, r0
 801b736:	2b00      	cmp	r3, #0
 801b738:	d140      	bne.n	801b7bc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b740:	683b      	ldr	r3, [r7, #0]
 801b742:	005b      	lsls	r3, r3, #1
 801b744:	693a      	ldr	r2, [r7, #16]
 801b746:	8992      	ldrh	r2, [r2, #12]
 801b748:	fbb3 f0f2 	udiv	r0, r3, r2
 801b74c:	fb00 f202 	mul.w	r2, r0, r2
 801b750:	1a9b      	subs	r3, r3, r2
 801b752:	440b      	add	r3, r1
 801b754:	4618      	mov	r0, r3
 801b756:	f7ff fbf9 	bl	801af4c <ld_word>
 801b75a:	4603      	mov	r3, r0
 801b75c:	617b      	str	r3, [r7, #20]
			break;
 801b75e:	e030      	b.n	801b7c2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b760:	693b      	ldr	r3, [r7, #16]
 801b762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b764:	693b      	ldr	r3, [r7, #16]
 801b766:	899b      	ldrh	r3, [r3, #12]
 801b768:	089b      	lsrs	r3, r3, #2
 801b76a:	b29b      	uxth	r3, r3
 801b76c:	4619      	mov	r1, r3
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	fbb3 f3f1 	udiv	r3, r3, r1
 801b774:	4413      	add	r3, r2
 801b776:	4619      	mov	r1, r3
 801b778:	6938      	ldr	r0, [r7, #16]
 801b77a:	f7ff fe97 	bl	801b4ac <move_window>
 801b77e:	4603      	mov	r3, r0
 801b780:	2b00      	cmp	r3, #0
 801b782:	d11d      	bne.n	801b7c0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b784:	693b      	ldr	r3, [r7, #16]
 801b786:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b78a:	683b      	ldr	r3, [r7, #0]
 801b78c:	009b      	lsls	r3, r3, #2
 801b78e:	693a      	ldr	r2, [r7, #16]
 801b790:	8992      	ldrh	r2, [r2, #12]
 801b792:	fbb3 f0f2 	udiv	r0, r3, r2
 801b796:	fb00 f202 	mul.w	r2, r0, r2
 801b79a:	1a9b      	subs	r3, r3, r2
 801b79c:	440b      	add	r3, r1
 801b79e:	4618      	mov	r0, r3
 801b7a0:	f7ff fbec 	bl	801af7c <ld_dword>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b7aa:	617b      	str	r3, [r7, #20]
			break;
 801b7ac:	e009      	b.n	801b7c2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	617b      	str	r3, [r7, #20]
 801b7b2:	e006      	b.n	801b7c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b7b4:	bf00      	nop
 801b7b6:	e004      	b.n	801b7c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b7b8:	bf00      	nop
 801b7ba:	e002      	b.n	801b7c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b7bc:	bf00      	nop
 801b7be:	e000      	b.n	801b7c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b7c0:	bf00      	nop
		}
	}

	return val;
 801b7c2:	697b      	ldr	r3, [r7, #20]
}
 801b7c4:	4618      	mov	r0, r3
 801b7c6:	3718      	adds	r7, #24
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	bd80      	pop	{r7, pc}

0801b7cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b7cc:	b590      	push	{r4, r7, lr}
 801b7ce:	b089      	sub	sp, #36	@ 0x24
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	60f8      	str	r0, [r7, #12]
 801b7d4:	60b9      	str	r1, [r7, #8]
 801b7d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b7d8:	2302      	movs	r3, #2
 801b7da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	f240 8109 	bls.w	801b9f6 <put_fat+0x22a>
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	69db      	ldr	r3, [r3, #28]
 801b7e8:	68ba      	ldr	r2, [r7, #8]
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	f080 8103 	bcs.w	801b9f6 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	2b03      	cmp	r3, #3
 801b7f6:	f000 80b6 	beq.w	801b966 <put_fat+0x19a>
 801b7fa:	2b03      	cmp	r3, #3
 801b7fc:	f300 80fb 	bgt.w	801b9f6 <put_fat+0x22a>
 801b800:	2b01      	cmp	r3, #1
 801b802:	d003      	beq.n	801b80c <put_fat+0x40>
 801b804:	2b02      	cmp	r3, #2
 801b806:	f000 8083 	beq.w	801b910 <put_fat+0x144>
 801b80a:	e0f4      	b.n	801b9f6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	61bb      	str	r3, [r7, #24]
 801b810:	69bb      	ldr	r3, [r7, #24]
 801b812:	085b      	lsrs	r3, r3, #1
 801b814:	69ba      	ldr	r2, [r7, #24]
 801b816:	4413      	add	r3, r2
 801b818:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	899b      	ldrh	r3, [r3, #12]
 801b822:	4619      	mov	r1, r3
 801b824:	69bb      	ldr	r3, [r7, #24]
 801b826:	fbb3 f3f1 	udiv	r3, r3, r1
 801b82a:	4413      	add	r3, r2
 801b82c:	4619      	mov	r1, r3
 801b82e:	68f8      	ldr	r0, [r7, #12]
 801b830:	f7ff fe3c 	bl	801b4ac <move_window>
 801b834:	4603      	mov	r3, r0
 801b836:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b838:	7ffb      	ldrb	r3, [r7, #31]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	f040 80d4 	bne.w	801b9e8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b846:	69bb      	ldr	r3, [r7, #24]
 801b848:	1c5a      	adds	r2, r3, #1
 801b84a:	61ba      	str	r2, [r7, #24]
 801b84c:	68fa      	ldr	r2, [r7, #12]
 801b84e:	8992      	ldrh	r2, [r2, #12]
 801b850:	fbb3 f0f2 	udiv	r0, r3, r2
 801b854:	fb00 f202 	mul.w	r2, r0, r2
 801b858:	1a9b      	subs	r3, r3, r2
 801b85a:	440b      	add	r3, r1
 801b85c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	f003 0301 	and.w	r3, r3, #1
 801b864:	2b00      	cmp	r3, #0
 801b866:	d00d      	beq.n	801b884 <put_fat+0xb8>
 801b868:	697b      	ldr	r3, [r7, #20]
 801b86a:	781b      	ldrb	r3, [r3, #0]
 801b86c:	b25b      	sxtb	r3, r3
 801b86e:	f003 030f 	and.w	r3, r3, #15
 801b872:	b25a      	sxtb	r2, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	b2db      	uxtb	r3, r3
 801b878:	011b      	lsls	r3, r3, #4
 801b87a:	b25b      	sxtb	r3, r3
 801b87c:	4313      	orrs	r3, r2
 801b87e:	b25b      	sxtb	r3, r3
 801b880:	b2db      	uxtb	r3, r3
 801b882:	e001      	b.n	801b888 <put_fat+0xbc>
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	b2db      	uxtb	r3, r3
 801b888:	697a      	ldr	r2, [r7, #20]
 801b88a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b88c:	68fb      	ldr	r3, [r7, #12]
 801b88e:	2201      	movs	r2, #1
 801b890:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	899b      	ldrh	r3, [r3, #12]
 801b89a:	4619      	mov	r1, r3
 801b89c:	69bb      	ldr	r3, [r7, #24]
 801b89e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8a2:	4413      	add	r3, r2
 801b8a4:	4619      	mov	r1, r3
 801b8a6:	68f8      	ldr	r0, [r7, #12]
 801b8a8:	f7ff fe00 	bl	801b4ac <move_window>
 801b8ac:	4603      	mov	r3, r0
 801b8ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8b0:	7ffb      	ldrb	r3, [r7, #31]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	f040 809a 	bne.w	801b9ec <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	899b      	ldrh	r3, [r3, #12]
 801b8c2:	461a      	mov	r2, r3
 801b8c4:	69bb      	ldr	r3, [r7, #24]
 801b8c6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b8ca:	fb00 f202 	mul.w	r2, r0, r2
 801b8ce:	1a9b      	subs	r3, r3, r2
 801b8d0:	440b      	add	r3, r1
 801b8d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b8d4:	68bb      	ldr	r3, [r7, #8]
 801b8d6:	f003 0301 	and.w	r3, r3, #1
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d003      	beq.n	801b8e6 <put_fat+0x11a>
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	091b      	lsrs	r3, r3, #4
 801b8e2:	b2db      	uxtb	r3, r3
 801b8e4:	e00e      	b.n	801b904 <put_fat+0x138>
 801b8e6:	697b      	ldr	r3, [r7, #20]
 801b8e8:	781b      	ldrb	r3, [r3, #0]
 801b8ea:	b25b      	sxtb	r3, r3
 801b8ec:	f023 030f 	bic.w	r3, r3, #15
 801b8f0:	b25a      	sxtb	r2, r3
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	0a1b      	lsrs	r3, r3, #8
 801b8f6:	b25b      	sxtb	r3, r3
 801b8f8:	f003 030f 	and.w	r3, r3, #15
 801b8fc:	b25b      	sxtb	r3, r3
 801b8fe:	4313      	orrs	r3, r2
 801b900:	b25b      	sxtb	r3, r3
 801b902:	b2db      	uxtb	r3, r3
 801b904:	697a      	ldr	r2, [r7, #20]
 801b906:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	2201      	movs	r2, #1
 801b90c:	70da      	strb	r2, [r3, #3]
			break;
 801b90e:	e072      	b.n	801b9f6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b914:	68fb      	ldr	r3, [r7, #12]
 801b916:	899b      	ldrh	r3, [r3, #12]
 801b918:	085b      	lsrs	r3, r3, #1
 801b91a:	b29b      	uxth	r3, r3
 801b91c:	4619      	mov	r1, r3
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	fbb3 f3f1 	udiv	r3, r3, r1
 801b924:	4413      	add	r3, r2
 801b926:	4619      	mov	r1, r3
 801b928:	68f8      	ldr	r0, [r7, #12]
 801b92a:	f7ff fdbf 	bl	801b4ac <move_window>
 801b92e:	4603      	mov	r3, r0
 801b930:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b932:	7ffb      	ldrb	r3, [r7, #31]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d15b      	bne.n	801b9f0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	005b      	lsls	r3, r3, #1
 801b942:	68fa      	ldr	r2, [r7, #12]
 801b944:	8992      	ldrh	r2, [r2, #12]
 801b946:	fbb3 f0f2 	udiv	r0, r3, r2
 801b94a:	fb00 f202 	mul.w	r2, r0, r2
 801b94e:	1a9b      	subs	r3, r3, r2
 801b950:	440b      	add	r3, r1
 801b952:	687a      	ldr	r2, [r7, #4]
 801b954:	b292      	uxth	r2, r2
 801b956:	4611      	mov	r1, r2
 801b958:	4618      	mov	r0, r3
 801b95a:	f7ff fb32 	bl	801afc2 <st_word>
			fs->wflag = 1;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	2201      	movs	r2, #1
 801b962:	70da      	strb	r2, [r3, #3]
			break;
 801b964:	e047      	b.n	801b9f6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	899b      	ldrh	r3, [r3, #12]
 801b96e:	089b      	lsrs	r3, r3, #2
 801b970:	b29b      	uxth	r3, r3
 801b972:	4619      	mov	r1, r3
 801b974:	68bb      	ldr	r3, [r7, #8]
 801b976:	fbb3 f3f1 	udiv	r3, r3, r1
 801b97a:	4413      	add	r3, r2
 801b97c:	4619      	mov	r1, r3
 801b97e:	68f8      	ldr	r0, [r7, #12]
 801b980:	f7ff fd94 	bl	801b4ac <move_window>
 801b984:	4603      	mov	r3, r0
 801b986:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b988:	7ffb      	ldrb	r3, [r7, #31]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d132      	bne.n	801b9f4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	009b      	lsls	r3, r3, #2
 801b99e:	68fa      	ldr	r2, [r7, #12]
 801b9a0:	8992      	ldrh	r2, [r2, #12]
 801b9a2:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9a6:	fb00 f202 	mul.w	r2, r0, r2
 801b9aa:	1a9b      	subs	r3, r3, r2
 801b9ac:	440b      	add	r3, r1
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7ff fae4 	bl	801af7c <ld_dword>
 801b9b4:	4603      	mov	r3, r0
 801b9b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b9ba:	4323      	orrs	r3, r4
 801b9bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	009b      	lsls	r3, r3, #2
 801b9c8:	68fa      	ldr	r2, [r7, #12]
 801b9ca:	8992      	ldrh	r2, [r2, #12]
 801b9cc:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9d0:	fb00 f202 	mul.w	r2, r0, r2
 801b9d4:	1a9b      	subs	r3, r3, r2
 801b9d6:	440b      	add	r3, r1
 801b9d8:	6879      	ldr	r1, [r7, #4]
 801b9da:	4618      	mov	r0, r3
 801b9dc:	f7ff fb0c 	bl	801aff8 <st_dword>
			fs->wflag = 1;
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	2201      	movs	r2, #1
 801b9e4:	70da      	strb	r2, [r3, #3]
			break;
 801b9e6:	e006      	b.n	801b9f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9e8:	bf00      	nop
 801b9ea:	e004      	b.n	801b9f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9ec:	bf00      	nop
 801b9ee:	e002      	b.n	801b9f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9f0:	bf00      	nop
 801b9f2:	e000      	b.n	801b9f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9f4:	bf00      	nop
		}
	}
	return res;
 801b9f6:	7ffb      	ldrb	r3, [r7, #31]
}
 801b9f8:	4618      	mov	r0, r3
 801b9fa:	3724      	adds	r7, #36	@ 0x24
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	bd90      	pop	{r4, r7, pc}

0801ba00 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b088      	sub	sp, #32
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	60f8      	str	r0, [r7, #12]
 801ba08:	60b9      	str	r1, [r7, #8]
 801ba0a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801ba16:	68bb      	ldr	r3, [r7, #8]
 801ba18:	2b01      	cmp	r3, #1
 801ba1a:	d904      	bls.n	801ba26 <remove_chain+0x26>
 801ba1c:	69bb      	ldr	r3, [r7, #24]
 801ba1e:	69db      	ldr	r3, [r3, #28]
 801ba20:	68ba      	ldr	r2, [r7, #8]
 801ba22:	429a      	cmp	r2, r3
 801ba24:	d301      	bcc.n	801ba2a <remove_chain+0x2a>
 801ba26:	2302      	movs	r3, #2
 801ba28:	e04b      	b.n	801bac2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d00c      	beq.n	801ba4a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801ba30:	f04f 32ff 	mov.w	r2, #4294967295
 801ba34:	6879      	ldr	r1, [r7, #4]
 801ba36:	69b8      	ldr	r0, [r7, #24]
 801ba38:	f7ff fec8 	bl	801b7cc <put_fat>
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801ba40:	7ffb      	ldrb	r3, [r7, #31]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d001      	beq.n	801ba4a <remove_chain+0x4a>
 801ba46:	7ffb      	ldrb	r3, [r7, #31]
 801ba48:	e03b      	b.n	801bac2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801ba4a:	68b9      	ldr	r1, [r7, #8]
 801ba4c:	68f8      	ldr	r0, [r7, #12]
 801ba4e:	f7ff fdea 	bl	801b626 <get_fat>
 801ba52:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ba54:	697b      	ldr	r3, [r7, #20]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d031      	beq.n	801babe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ba5a:	697b      	ldr	r3, [r7, #20]
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	d101      	bne.n	801ba64 <remove_chain+0x64>
 801ba60:	2302      	movs	r3, #2
 801ba62:	e02e      	b.n	801bac2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba6a:	d101      	bne.n	801ba70 <remove_chain+0x70>
 801ba6c:	2301      	movs	r3, #1
 801ba6e:	e028      	b.n	801bac2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ba70:	2200      	movs	r2, #0
 801ba72:	68b9      	ldr	r1, [r7, #8]
 801ba74:	69b8      	ldr	r0, [r7, #24]
 801ba76:	f7ff fea9 	bl	801b7cc <put_fat>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ba7e:	7ffb      	ldrb	r3, [r7, #31]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d001      	beq.n	801ba88 <remove_chain+0x88>
 801ba84:	7ffb      	ldrb	r3, [r7, #31]
 801ba86:	e01c      	b.n	801bac2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801ba88:	69bb      	ldr	r3, [r7, #24]
 801ba8a:	699a      	ldr	r2, [r3, #24]
 801ba8c:	69bb      	ldr	r3, [r7, #24]
 801ba8e:	69db      	ldr	r3, [r3, #28]
 801ba90:	3b02      	subs	r3, #2
 801ba92:	429a      	cmp	r2, r3
 801ba94:	d20b      	bcs.n	801baae <remove_chain+0xae>
			fs->free_clst++;
 801ba96:	69bb      	ldr	r3, [r7, #24]
 801ba98:	699b      	ldr	r3, [r3, #24]
 801ba9a:	1c5a      	adds	r2, r3, #1
 801ba9c:	69bb      	ldr	r3, [r7, #24]
 801ba9e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801baa0:	69bb      	ldr	r3, [r7, #24]
 801baa2:	791b      	ldrb	r3, [r3, #4]
 801baa4:	f043 0301 	orr.w	r3, r3, #1
 801baa8:	b2da      	uxtb	r2, r3
 801baaa:	69bb      	ldr	r3, [r7, #24]
 801baac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801baae:	697b      	ldr	r3, [r7, #20]
 801bab0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bab2:	69bb      	ldr	r3, [r7, #24]
 801bab4:	69db      	ldr	r3, [r3, #28]
 801bab6:	68ba      	ldr	r2, [r7, #8]
 801bab8:	429a      	cmp	r2, r3
 801baba:	d3c6      	bcc.n	801ba4a <remove_chain+0x4a>
 801babc:	e000      	b.n	801bac0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801babe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bac0:	2300      	movs	r3, #0
}
 801bac2:	4618      	mov	r0, r3
 801bac4:	3720      	adds	r7, #32
 801bac6:	46bd      	mov	sp, r7
 801bac8:	bd80      	pop	{r7, pc}

0801baca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801baca:	b580      	push	{r7, lr}
 801bacc:	b088      	sub	sp, #32
 801bace:	af00      	add	r7, sp, #0
 801bad0:	6078      	str	r0, [r7, #4]
 801bad2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bada:	683b      	ldr	r3, [r7, #0]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d10d      	bne.n	801bafc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bae0:	693b      	ldr	r3, [r7, #16]
 801bae2:	695b      	ldr	r3, [r3, #20]
 801bae4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bae6:	69bb      	ldr	r3, [r7, #24]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d004      	beq.n	801baf6 <create_chain+0x2c>
 801baec:	693b      	ldr	r3, [r7, #16]
 801baee:	69db      	ldr	r3, [r3, #28]
 801baf0:	69ba      	ldr	r2, [r7, #24]
 801baf2:	429a      	cmp	r2, r3
 801baf4:	d31b      	bcc.n	801bb2e <create_chain+0x64>
 801baf6:	2301      	movs	r3, #1
 801baf8:	61bb      	str	r3, [r7, #24]
 801bafa:	e018      	b.n	801bb2e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bafc:	6839      	ldr	r1, [r7, #0]
 801bafe:	6878      	ldr	r0, [r7, #4]
 801bb00:	f7ff fd91 	bl	801b626 <get_fat>
 801bb04:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	2b01      	cmp	r3, #1
 801bb0a:	d801      	bhi.n	801bb10 <create_chain+0x46>
 801bb0c:	2301      	movs	r3, #1
 801bb0e:	e070      	b.n	801bbf2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb16:	d101      	bne.n	801bb1c <create_chain+0x52>
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	e06a      	b.n	801bbf2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bb1c:	693b      	ldr	r3, [r7, #16]
 801bb1e:	69db      	ldr	r3, [r3, #28]
 801bb20:	68fa      	ldr	r2, [r7, #12]
 801bb22:	429a      	cmp	r2, r3
 801bb24:	d201      	bcs.n	801bb2a <create_chain+0x60>
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	e063      	b.n	801bbf2 <create_chain+0x128>
		scl = clst;
 801bb2a:	683b      	ldr	r3, [r7, #0]
 801bb2c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bb2e:	69bb      	ldr	r3, [r7, #24]
 801bb30:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bb32:	69fb      	ldr	r3, [r7, #28]
 801bb34:	3301      	adds	r3, #1
 801bb36:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bb38:	693b      	ldr	r3, [r7, #16]
 801bb3a:	69db      	ldr	r3, [r3, #28]
 801bb3c:	69fa      	ldr	r2, [r7, #28]
 801bb3e:	429a      	cmp	r2, r3
 801bb40:	d307      	bcc.n	801bb52 <create_chain+0x88>
				ncl = 2;
 801bb42:	2302      	movs	r3, #2
 801bb44:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bb46:	69fa      	ldr	r2, [r7, #28]
 801bb48:	69bb      	ldr	r3, [r7, #24]
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	d901      	bls.n	801bb52 <create_chain+0x88>
 801bb4e:	2300      	movs	r3, #0
 801bb50:	e04f      	b.n	801bbf2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bb52:	69f9      	ldr	r1, [r7, #28]
 801bb54:	6878      	ldr	r0, [r7, #4]
 801bb56:	f7ff fd66 	bl	801b626 <get_fat>
 801bb5a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d00e      	beq.n	801bb80 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	2b01      	cmp	r3, #1
 801bb66:	d003      	beq.n	801bb70 <create_chain+0xa6>
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb6e:	d101      	bne.n	801bb74 <create_chain+0xaa>
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	e03e      	b.n	801bbf2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bb74:	69fa      	ldr	r2, [r7, #28]
 801bb76:	69bb      	ldr	r3, [r7, #24]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d1da      	bne.n	801bb32 <create_chain+0x68>
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	e038      	b.n	801bbf2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bb80:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bb82:	f04f 32ff 	mov.w	r2, #4294967295
 801bb86:	69f9      	ldr	r1, [r7, #28]
 801bb88:	6938      	ldr	r0, [r7, #16]
 801bb8a:	f7ff fe1f 	bl	801b7cc <put_fat>
 801bb8e:	4603      	mov	r3, r0
 801bb90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bb92:	7dfb      	ldrb	r3, [r7, #23]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d109      	bne.n	801bbac <create_chain+0xe2>
 801bb98:	683b      	ldr	r3, [r7, #0]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d006      	beq.n	801bbac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bb9e:	69fa      	ldr	r2, [r7, #28]
 801bba0:	6839      	ldr	r1, [r7, #0]
 801bba2:	6938      	ldr	r0, [r7, #16]
 801bba4:	f7ff fe12 	bl	801b7cc <put_fat>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bbac:	7dfb      	ldrb	r3, [r7, #23]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d116      	bne.n	801bbe0 <create_chain+0x116>
		fs->last_clst = ncl;
 801bbb2:	693b      	ldr	r3, [r7, #16]
 801bbb4:	69fa      	ldr	r2, [r7, #28]
 801bbb6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	699a      	ldr	r2, [r3, #24]
 801bbbc:	693b      	ldr	r3, [r7, #16]
 801bbbe:	69db      	ldr	r3, [r3, #28]
 801bbc0:	3b02      	subs	r3, #2
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	d804      	bhi.n	801bbd0 <create_chain+0x106>
 801bbc6:	693b      	ldr	r3, [r7, #16]
 801bbc8:	699b      	ldr	r3, [r3, #24]
 801bbca:	1e5a      	subs	r2, r3, #1
 801bbcc:	693b      	ldr	r3, [r7, #16]
 801bbce:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bbd0:	693b      	ldr	r3, [r7, #16]
 801bbd2:	791b      	ldrb	r3, [r3, #4]
 801bbd4:	f043 0301 	orr.w	r3, r3, #1
 801bbd8:	b2da      	uxtb	r2, r3
 801bbda:	693b      	ldr	r3, [r7, #16]
 801bbdc:	711a      	strb	r2, [r3, #4]
 801bbde:	e007      	b.n	801bbf0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bbe0:	7dfb      	ldrb	r3, [r7, #23]
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	d102      	bne.n	801bbec <create_chain+0x122>
 801bbe6:	f04f 33ff 	mov.w	r3, #4294967295
 801bbea:	e000      	b.n	801bbee <create_chain+0x124>
 801bbec:	2301      	movs	r3, #1
 801bbee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bbf0:	69fb      	ldr	r3, [r7, #28]
}
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	3720      	adds	r7, #32
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	bd80      	pop	{r7, pc}

0801bbfa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bbfa:	b480      	push	{r7}
 801bbfc:	b087      	sub	sp, #28
 801bbfe:	af00      	add	r7, sp, #0
 801bc00:	6078      	str	r0, [r7, #4]
 801bc02:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc0e:	3304      	adds	r3, #4
 801bc10:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	899b      	ldrh	r3, [r3, #12]
 801bc16:	461a      	mov	r2, r3
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc1e:	68fa      	ldr	r2, [r7, #12]
 801bc20:	8952      	ldrh	r2, [r2, #10]
 801bc22:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bc28:	693b      	ldr	r3, [r7, #16]
 801bc2a:	1d1a      	adds	r2, r3, #4
 801bc2c:	613a      	str	r2, [r7, #16]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d101      	bne.n	801bc3c <clmt_clust+0x42>
 801bc38:	2300      	movs	r3, #0
 801bc3a:	e010      	b.n	801bc5e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bc3c:	697a      	ldr	r2, [r7, #20]
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	429a      	cmp	r2, r3
 801bc42:	d307      	bcc.n	801bc54 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bc44:	697a      	ldr	r2, [r7, #20]
 801bc46:	68bb      	ldr	r3, [r7, #8]
 801bc48:	1ad3      	subs	r3, r2, r3
 801bc4a:	617b      	str	r3, [r7, #20]
 801bc4c:	693b      	ldr	r3, [r7, #16]
 801bc4e:	3304      	adds	r3, #4
 801bc50:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bc52:	e7e9      	b.n	801bc28 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bc54:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bc56:	693b      	ldr	r3, [r7, #16]
 801bc58:	681a      	ldr	r2, [r3, #0]
 801bc5a:	697b      	ldr	r3, [r7, #20]
 801bc5c:	4413      	add	r3, r2
}
 801bc5e:	4618      	mov	r0, r3
 801bc60:	371c      	adds	r7, #28
 801bc62:	46bd      	mov	sp, r7
 801bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc68:	4770      	bx	lr

0801bc6a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bc6a:	b580      	push	{r7, lr}
 801bc6c:	b086      	sub	sp, #24
 801bc6e:	af00      	add	r7, sp, #0
 801bc70:	6078      	str	r0, [r7, #4]
 801bc72:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bc7a:	683b      	ldr	r3, [r7, #0]
 801bc7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bc80:	d204      	bcs.n	801bc8c <dir_sdi+0x22>
 801bc82:	683b      	ldr	r3, [r7, #0]
 801bc84:	f003 031f 	and.w	r3, r3, #31
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d001      	beq.n	801bc90 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bc8c:	2302      	movs	r3, #2
 801bc8e:	e071      	b.n	801bd74 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	683a      	ldr	r2, [r7, #0]
 801bc94:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	689b      	ldr	r3, [r3, #8]
 801bc9a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bc9c:	697b      	ldr	r3, [r7, #20]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d106      	bne.n	801bcb0 <dir_sdi+0x46>
 801bca2:	693b      	ldr	r3, [r7, #16]
 801bca4:	781b      	ldrb	r3, [r3, #0]
 801bca6:	2b02      	cmp	r3, #2
 801bca8:	d902      	bls.n	801bcb0 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bcaa:	693b      	ldr	r3, [r7, #16]
 801bcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bcb0:	697b      	ldr	r3, [r7, #20]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d10c      	bne.n	801bcd0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bcb6:	683b      	ldr	r3, [r7, #0]
 801bcb8:	095b      	lsrs	r3, r3, #5
 801bcba:	693a      	ldr	r2, [r7, #16]
 801bcbc:	8912      	ldrh	r2, [r2, #8]
 801bcbe:	4293      	cmp	r3, r2
 801bcc0:	d301      	bcc.n	801bcc6 <dir_sdi+0x5c>
 801bcc2:	2302      	movs	r3, #2
 801bcc4:	e056      	b.n	801bd74 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bcc6:	693b      	ldr	r3, [r7, #16]
 801bcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	61da      	str	r2, [r3, #28]
 801bcce:	e02d      	b.n	801bd2c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bcd0:	693b      	ldr	r3, [r7, #16]
 801bcd2:	895b      	ldrh	r3, [r3, #10]
 801bcd4:	461a      	mov	r2, r3
 801bcd6:	693b      	ldr	r3, [r7, #16]
 801bcd8:	899b      	ldrh	r3, [r3, #12]
 801bcda:	fb02 f303 	mul.w	r3, r2, r3
 801bcde:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bce0:	e019      	b.n	801bd16 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	6979      	ldr	r1, [r7, #20]
 801bce6:	4618      	mov	r0, r3
 801bce8:	f7ff fc9d 	bl	801b626 <get_fat>
 801bcec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcf4:	d101      	bne.n	801bcfa <dir_sdi+0x90>
 801bcf6:	2301      	movs	r3, #1
 801bcf8:	e03c      	b.n	801bd74 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	2b01      	cmp	r3, #1
 801bcfe:	d904      	bls.n	801bd0a <dir_sdi+0xa0>
 801bd00:	693b      	ldr	r3, [r7, #16]
 801bd02:	69db      	ldr	r3, [r3, #28]
 801bd04:	697a      	ldr	r2, [r7, #20]
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d301      	bcc.n	801bd0e <dir_sdi+0xa4>
 801bd0a:	2302      	movs	r3, #2
 801bd0c:	e032      	b.n	801bd74 <dir_sdi+0x10a>
			ofs -= csz;
 801bd0e:	683a      	ldr	r2, [r7, #0]
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	1ad3      	subs	r3, r2, r3
 801bd14:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd16:	683a      	ldr	r2, [r7, #0]
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	429a      	cmp	r2, r3
 801bd1c:	d2e1      	bcs.n	801bce2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bd1e:	6979      	ldr	r1, [r7, #20]
 801bd20:	6938      	ldr	r0, [r7, #16]
 801bd22:	f7ff fc61 	bl	801b5e8 <clust2sect>
 801bd26:	4602      	mov	r2, r0
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	697a      	ldr	r2, [r7, #20]
 801bd30:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	69db      	ldr	r3, [r3, #28]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d101      	bne.n	801bd3e <dir_sdi+0xd4>
 801bd3a:	2302      	movs	r3, #2
 801bd3c:	e01a      	b.n	801bd74 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	69da      	ldr	r2, [r3, #28]
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	899b      	ldrh	r3, [r3, #12]
 801bd46:	4619      	mov	r1, r3
 801bd48:	683b      	ldr	r3, [r7, #0]
 801bd4a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd4e:	441a      	add	r2, r3
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	899b      	ldrh	r3, [r3, #12]
 801bd5e:	461a      	mov	r2, r3
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	fbb3 f0f2 	udiv	r0, r3, r2
 801bd66:	fb00 f202 	mul.w	r2, r0, r2
 801bd6a:	1a9b      	subs	r3, r3, r2
 801bd6c:	18ca      	adds	r2, r1, r3
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bd72:	2300      	movs	r3, #0
}
 801bd74:	4618      	mov	r0, r3
 801bd76:	3718      	adds	r7, #24
 801bd78:	46bd      	mov	sp, r7
 801bd7a:	bd80      	pop	{r7, pc}

0801bd7c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b086      	sub	sp, #24
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
 801bd84:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	695b      	ldr	r3, [r3, #20]
 801bd90:	3320      	adds	r3, #32
 801bd92:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	69db      	ldr	r3, [r3, #28]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d003      	beq.n	801bda4 <dir_next+0x28>
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bda2:	d301      	bcc.n	801bda8 <dir_next+0x2c>
 801bda4:	2304      	movs	r3, #4
 801bda6:	e0bb      	b.n	801bf20 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	899b      	ldrh	r3, [r3, #12]
 801bdac:	461a      	mov	r2, r3
 801bdae:	68bb      	ldr	r3, [r7, #8]
 801bdb0:	fbb3 f1f2 	udiv	r1, r3, r2
 801bdb4:	fb01 f202 	mul.w	r2, r1, r2
 801bdb8:	1a9b      	subs	r3, r3, r2
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	f040 809d 	bne.w	801befa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	69db      	ldr	r3, [r3, #28]
 801bdc4:	1c5a      	adds	r2, r3, #1
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	699b      	ldr	r3, [r3, #24]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d10b      	bne.n	801bdea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bdd2:	68bb      	ldr	r3, [r7, #8]
 801bdd4:	095b      	lsrs	r3, r3, #5
 801bdd6:	68fa      	ldr	r2, [r7, #12]
 801bdd8:	8912      	ldrh	r2, [r2, #8]
 801bdda:	4293      	cmp	r3, r2
 801bddc:	f0c0 808d 	bcc.w	801befa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	2200      	movs	r2, #0
 801bde4:	61da      	str	r2, [r3, #28]
 801bde6:	2304      	movs	r3, #4
 801bde8:	e09a      	b.n	801bf20 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	899b      	ldrh	r3, [r3, #12]
 801bdee:	461a      	mov	r2, r3
 801bdf0:	68bb      	ldr	r3, [r7, #8]
 801bdf2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bdf6:	68fa      	ldr	r2, [r7, #12]
 801bdf8:	8952      	ldrh	r2, [r2, #10]
 801bdfa:	3a01      	subs	r2, #1
 801bdfc:	4013      	ands	r3, r2
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d17b      	bne.n	801befa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	699b      	ldr	r3, [r3, #24]
 801be08:	4619      	mov	r1, r3
 801be0a:	4610      	mov	r0, r2
 801be0c:	f7ff fc0b 	bl	801b626 <get_fat>
 801be10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	2b01      	cmp	r3, #1
 801be16:	d801      	bhi.n	801be1c <dir_next+0xa0>
 801be18:	2302      	movs	r3, #2
 801be1a:	e081      	b.n	801bf20 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801be1c:	697b      	ldr	r3, [r7, #20]
 801be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be22:	d101      	bne.n	801be28 <dir_next+0xac>
 801be24:	2301      	movs	r3, #1
 801be26:	e07b      	b.n	801bf20 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	69db      	ldr	r3, [r3, #28]
 801be2c:	697a      	ldr	r2, [r7, #20]
 801be2e:	429a      	cmp	r2, r3
 801be30:	d359      	bcc.n	801bee6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801be32:	683b      	ldr	r3, [r7, #0]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d104      	bne.n	801be42 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	2200      	movs	r2, #0
 801be3c:	61da      	str	r2, [r3, #28]
 801be3e:	2304      	movs	r3, #4
 801be40:	e06e      	b.n	801bf20 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801be42:	687a      	ldr	r2, [r7, #4]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	699b      	ldr	r3, [r3, #24]
 801be48:	4619      	mov	r1, r3
 801be4a:	4610      	mov	r0, r2
 801be4c:	f7ff fe3d 	bl	801baca <create_chain>
 801be50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801be52:	697b      	ldr	r3, [r7, #20]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d101      	bne.n	801be5c <dir_next+0xe0>
 801be58:	2307      	movs	r3, #7
 801be5a:	e061      	b.n	801bf20 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801be5c:	697b      	ldr	r3, [r7, #20]
 801be5e:	2b01      	cmp	r3, #1
 801be60:	d101      	bne.n	801be66 <dir_next+0xea>
 801be62:	2302      	movs	r3, #2
 801be64:	e05c      	b.n	801bf20 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be6c:	d101      	bne.n	801be72 <dir_next+0xf6>
 801be6e:	2301      	movs	r3, #1
 801be70:	e056      	b.n	801bf20 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801be72:	68f8      	ldr	r0, [r7, #12]
 801be74:	f7ff fad6 	bl	801b424 <sync_window>
 801be78:	4603      	mov	r3, r0
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d001      	beq.n	801be82 <dir_next+0x106>
 801be7e:	2301      	movs	r3, #1
 801be80:	e04e      	b.n	801bf20 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	899b      	ldrh	r3, [r3, #12]
 801be8c:	461a      	mov	r2, r3
 801be8e:	2100      	movs	r1, #0
 801be90:	f7ff f8ff 	bl	801b092 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801be94:	2300      	movs	r3, #0
 801be96:	613b      	str	r3, [r7, #16]
 801be98:	6979      	ldr	r1, [r7, #20]
 801be9a:	68f8      	ldr	r0, [r7, #12]
 801be9c:	f7ff fba4 	bl	801b5e8 <clust2sect>
 801bea0:	4602      	mov	r2, r0
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	635a      	str	r2, [r3, #52]	@ 0x34
 801bea6:	e012      	b.n	801bece <dir_next+0x152>
						fs->wflag = 1;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	2201      	movs	r2, #1
 801beac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801beae:	68f8      	ldr	r0, [r7, #12]
 801beb0:	f7ff fab8 	bl	801b424 <sync_window>
 801beb4:	4603      	mov	r3, r0
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d001      	beq.n	801bebe <dir_next+0x142>
 801beba:	2301      	movs	r3, #1
 801bebc:	e030      	b.n	801bf20 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bebe:	693b      	ldr	r3, [r7, #16]
 801bec0:	3301      	adds	r3, #1
 801bec2:	613b      	str	r3, [r7, #16]
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bec8:	1c5a      	adds	r2, r3, #1
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	635a      	str	r2, [r3, #52]	@ 0x34
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	895b      	ldrh	r3, [r3, #10]
 801bed2:	461a      	mov	r2, r3
 801bed4:	693b      	ldr	r3, [r7, #16]
 801bed6:	4293      	cmp	r3, r2
 801bed8:	d3e6      	bcc.n	801bea8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bede:	693b      	ldr	r3, [r7, #16]
 801bee0:	1ad2      	subs	r2, r2, r3
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	697a      	ldr	r2, [r7, #20]
 801beea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801beec:	6979      	ldr	r1, [r7, #20]
 801beee:	68f8      	ldr	r0, [r7, #12]
 801bef0:	f7ff fb7a 	bl	801b5e8 <clust2sect>
 801bef4:	4602      	mov	r2, r0
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	68ba      	ldr	r2, [r7, #8]
 801befe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	899b      	ldrh	r3, [r3, #12]
 801bf0a:	461a      	mov	r2, r3
 801bf0c:	68bb      	ldr	r3, [r7, #8]
 801bf0e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bf12:	fb00 f202 	mul.w	r2, r0, r2
 801bf16:	1a9b      	subs	r3, r3, r2
 801bf18:	18ca      	adds	r2, r1, r3
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bf1e:	2300      	movs	r3, #0
}
 801bf20:	4618      	mov	r0, r3
 801bf22:	3718      	adds	r7, #24
 801bf24:	46bd      	mov	sp, r7
 801bf26:	bd80      	pop	{r7, pc}

0801bf28 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b086      	sub	sp, #24
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
 801bf30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bf38:	2100      	movs	r1, #0
 801bf3a:	6878      	ldr	r0, [r7, #4]
 801bf3c:	f7ff fe95 	bl	801bc6a <dir_sdi>
 801bf40:	4603      	mov	r3, r0
 801bf42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bf44:	7dfb      	ldrb	r3, [r7, #23]
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d12b      	bne.n	801bfa2 <dir_alloc+0x7a>
		n = 0;
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	69db      	ldr	r3, [r3, #28]
 801bf52:	4619      	mov	r1, r3
 801bf54:	68f8      	ldr	r0, [r7, #12]
 801bf56:	f7ff faa9 	bl	801b4ac <move_window>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bf5e:	7dfb      	ldrb	r3, [r7, #23]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d11d      	bne.n	801bfa0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	6a1b      	ldr	r3, [r3, #32]
 801bf68:	781b      	ldrb	r3, [r3, #0]
 801bf6a:	2be5      	cmp	r3, #229	@ 0xe5
 801bf6c:	d004      	beq.n	801bf78 <dir_alloc+0x50>
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6a1b      	ldr	r3, [r3, #32]
 801bf72:	781b      	ldrb	r3, [r3, #0]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d107      	bne.n	801bf88 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bf78:	693b      	ldr	r3, [r7, #16]
 801bf7a:	3301      	adds	r3, #1
 801bf7c:	613b      	str	r3, [r7, #16]
 801bf7e:	693a      	ldr	r2, [r7, #16]
 801bf80:	683b      	ldr	r3, [r7, #0]
 801bf82:	429a      	cmp	r2, r3
 801bf84:	d102      	bne.n	801bf8c <dir_alloc+0x64>
 801bf86:	e00c      	b.n	801bfa2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bf88:	2300      	movs	r3, #0
 801bf8a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bf8c:	2101      	movs	r1, #1
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f7ff fef4 	bl	801bd7c <dir_next>
 801bf94:	4603      	mov	r3, r0
 801bf96:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bf98:	7dfb      	ldrb	r3, [r7, #23]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d0d7      	beq.n	801bf4e <dir_alloc+0x26>
 801bf9e:	e000      	b.n	801bfa2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bfa0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bfa2:	7dfb      	ldrb	r3, [r7, #23]
 801bfa4:	2b04      	cmp	r3, #4
 801bfa6:	d101      	bne.n	801bfac <dir_alloc+0x84>
 801bfa8:	2307      	movs	r3, #7
 801bfaa:	75fb      	strb	r3, [r7, #23]
	return res;
 801bfac:	7dfb      	ldrb	r3, [r7, #23]
}
 801bfae:	4618      	mov	r0, r3
 801bfb0:	3718      	adds	r7, #24
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	bd80      	pop	{r7, pc}

0801bfb6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bfb6:	b580      	push	{r7, lr}
 801bfb8:	b084      	sub	sp, #16
 801bfba:	af00      	add	r7, sp, #0
 801bfbc:	6078      	str	r0, [r7, #4]
 801bfbe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bfc0:	683b      	ldr	r3, [r7, #0]
 801bfc2:	331a      	adds	r3, #26
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f7fe ffc1 	bl	801af4c <ld_word>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	781b      	ldrb	r3, [r3, #0]
 801bfd2:	2b03      	cmp	r3, #3
 801bfd4:	d109      	bne.n	801bfea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	3314      	adds	r3, #20
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7fe ffb6 	bl	801af4c <ld_word>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	041b      	lsls	r3, r3, #16
 801bfe4:	68fa      	ldr	r2, [r7, #12]
 801bfe6:	4313      	orrs	r3, r2
 801bfe8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bfea:	68fb      	ldr	r3, [r7, #12]
}
 801bfec:	4618      	mov	r0, r3
 801bfee:	3710      	adds	r7, #16
 801bff0:	46bd      	mov	sp, r7
 801bff2:	bd80      	pop	{r7, pc}

0801bff4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b084      	sub	sp, #16
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	331a      	adds	r3, #26
 801c004:	687a      	ldr	r2, [r7, #4]
 801c006:	b292      	uxth	r2, r2
 801c008:	4611      	mov	r1, r2
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7fe ffd9 	bl	801afc2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	781b      	ldrb	r3, [r3, #0]
 801c014:	2b03      	cmp	r3, #3
 801c016:	d109      	bne.n	801c02c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	f103 0214 	add.w	r2, r3, #20
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	0c1b      	lsrs	r3, r3, #16
 801c022:	b29b      	uxth	r3, r3
 801c024:	4619      	mov	r1, r3
 801c026:	4610      	mov	r0, r2
 801c028:	f7fe ffcb 	bl	801afc2 <st_word>
	}
}
 801c02c:	bf00      	nop
 801c02e:	3710      	adds	r7, #16
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}

0801c034 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c034:	b590      	push	{r4, r7, lr}
 801c036:	b087      	sub	sp, #28
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
 801c03c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c03e:	683b      	ldr	r3, [r7, #0]
 801c040:	331a      	adds	r3, #26
 801c042:	4618      	mov	r0, r3
 801c044:	f7fe ff82 	bl	801af4c <ld_word>
 801c048:	4603      	mov	r3, r0
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d001      	beq.n	801c052 <cmp_lfn+0x1e>
 801c04e:	2300      	movs	r3, #0
 801c050:	e059      	b.n	801c106 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c052:	683b      	ldr	r3, [r7, #0]
 801c054:	781b      	ldrb	r3, [r3, #0]
 801c056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c05a:	1e5a      	subs	r2, r3, #1
 801c05c:	4613      	mov	r3, r2
 801c05e:	005b      	lsls	r3, r3, #1
 801c060:	4413      	add	r3, r2
 801c062:	009b      	lsls	r3, r3, #2
 801c064:	4413      	add	r3, r2
 801c066:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c068:	2301      	movs	r3, #1
 801c06a:	81fb      	strh	r3, [r7, #14]
 801c06c:	2300      	movs	r3, #0
 801c06e:	613b      	str	r3, [r7, #16]
 801c070:	e033      	b.n	801c0da <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c072:	4a27      	ldr	r2, [pc, #156]	@ (801c110 <cmp_lfn+0xdc>)
 801c074:	693b      	ldr	r3, [r7, #16]
 801c076:	4413      	add	r3, r2
 801c078:	781b      	ldrb	r3, [r3, #0]
 801c07a:	461a      	mov	r2, r3
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	4413      	add	r3, r2
 801c080:	4618      	mov	r0, r3
 801c082:	f7fe ff63 	bl	801af4c <ld_word>
 801c086:	4603      	mov	r3, r0
 801c088:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c08a:	89fb      	ldrh	r3, [r7, #14]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d01a      	beq.n	801c0c6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c090:	697b      	ldr	r3, [r7, #20]
 801c092:	2bfe      	cmp	r3, #254	@ 0xfe
 801c094:	d812      	bhi.n	801c0bc <cmp_lfn+0x88>
 801c096:	89bb      	ldrh	r3, [r7, #12]
 801c098:	4618      	mov	r0, r3
 801c09a:	f001 ff71 	bl	801df80 <ff_wtoupper>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	461c      	mov	r4, r3
 801c0a2:	697b      	ldr	r3, [r7, #20]
 801c0a4:	1c5a      	adds	r2, r3, #1
 801c0a6:	617a      	str	r2, [r7, #20]
 801c0a8:	005b      	lsls	r3, r3, #1
 801c0aa:	687a      	ldr	r2, [r7, #4]
 801c0ac:	4413      	add	r3, r2
 801c0ae:	881b      	ldrh	r3, [r3, #0]
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	f001 ff65 	bl	801df80 <ff_wtoupper>
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	429c      	cmp	r4, r3
 801c0ba:	d001      	beq.n	801c0c0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c0bc:	2300      	movs	r3, #0
 801c0be:	e022      	b.n	801c106 <cmp_lfn+0xd2>
			}
			wc = uc;
 801c0c0:	89bb      	ldrh	r3, [r7, #12]
 801c0c2:	81fb      	strh	r3, [r7, #14]
 801c0c4:	e006      	b.n	801c0d4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c0c6:	89bb      	ldrh	r3, [r7, #12]
 801c0c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c0cc:	4293      	cmp	r3, r2
 801c0ce:	d001      	beq.n	801c0d4 <cmp_lfn+0xa0>
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	e018      	b.n	801c106 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c0d4:	693b      	ldr	r3, [r7, #16]
 801c0d6:	3301      	adds	r3, #1
 801c0d8:	613b      	str	r3, [r7, #16]
 801c0da:	693b      	ldr	r3, [r7, #16]
 801c0dc:	2b0c      	cmp	r3, #12
 801c0de:	d9c8      	bls.n	801c072 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	781b      	ldrb	r3, [r3, #0]
 801c0e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d00b      	beq.n	801c104 <cmp_lfn+0xd0>
 801c0ec:	89fb      	ldrh	r3, [r7, #14]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d008      	beq.n	801c104 <cmp_lfn+0xd0>
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	005b      	lsls	r3, r3, #1
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	4413      	add	r3, r2
 801c0fa:	881b      	ldrh	r3, [r3, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d001      	beq.n	801c104 <cmp_lfn+0xd0>
 801c100:	2300      	movs	r3, #0
 801c102:	e000      	b.n	801c106 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c104:	2301      	movs	r3, #1
}
 801c106:	4618      	mov	r0, r3
 801c108:	371c      	adds	r7, #28
 801c10a:	46bd      	mov	sp, r7
 801c10c:	bd90      	pop	{r4, r7, pc}
 801c10e:	bf00      	nop
 801c110:	0801ec1c 	.word	0x0801ec1c

0801c114 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c114:	b580      	push	{r7, lr}
 801c116:	b086      	sub	sp, #24
 801c118:	af00      	add	r7, sp, #0
 801c11a:	6078      	str	r0, [r7, #4]
 801c11c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c11e:	683b      	ldr	r3, [r7, #0]
 801c120:	331a      	adds	r3, #26
 801c122:	4618      	mov	r0, r3
 801c124:	f7fe ff12 	bl	801af4c <ld_word>
 801c128:	4603      	mov	r3, r0
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d001      	beq.n	801c132 <pick_lfn+0x1e>
 801c12e:	2300      	movs	r3, #0
 801c130:	e04d      	b.n	801c1ce <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c132:	683b      	ldr	r3, [r7, #0]
 801c134:	781b      	ldrb	r3, [r3, #0]
 801c136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c13a:	1e5a      	subs	r2, r3, #1
 801c13c:	4613      	mov	r3, r2
 801c13e:	005b      	lsls	r3, r3, #1
 801c140:	4413      	add	r3, r2
 801c142:	009b      	lsls	r3, r3, #2
 801c144:	4413      	add	r3, r2
 801c146:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c148:	2301      	movs	r3, #1
 801c14a:	81fb      	strh	r3, [r7, #14]
 801c14c:	2300      	movs	r3, #0
 801c14e:	613b      	str	r3, [r7, #16]
 801c150:	e028      	b.n	801c1a4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c152:	4a21      	ldr	r2, [pc, #132]	@ (801c1d8 <pick_lfn+0xc4>)
 801c154:	693b      	ldr	r3, [r7, #16]
 801c156:	4413      	add	r3, r2
 801c158:	781b      	ldrb	r3, [r3, #0]
 801c15a:	461a      	mov	r2, r3
 801c15c:	683b      	ldr	r3, [r7, #0]
 801c15e:	4413      	add	r3, r2
 801c160:	4618      	mov	r0, r3
 801c162:	f7fe fef3 	bl	801af4c <ld_word>
 801c166:	4603      	mov	r3, r0
 801c168:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c16a:	89fb      	ldrh	r3, [r7, #14]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d00f      	beq.n	801c190 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	2bfe      	cmp	r3, #254	@ 0xfe
 801c174:	d901      	bls.n	801c17a <pick_lfn+0x66>
 801c176:	2300      	movs	r3, #0
 801c178:	e029      	b.n	801c1ce <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c17a:	89bb      	ldrh	r3, [r7, #12]
 801c17c:	81fb      	strh	r3, [r7, #14]
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	1c5a      	adds	r2, r3, #1
 801c182:	617a      	str	r2, [r7, #20]
 801c184:	005b      	lsls	r3, r3, #1
 801c186:	687a      	ldr	r2, [r7, #4]
 801c188:	4413      	add	r3, r2
 801c18a:	89fa      	ldrh	r2, [r7, #14]
 801c18c:	801a      	strh	r2, [r3, #0]
 801c18e:	e006      	b.n	801c19e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c190:	89bb      	ldrh	r3, [r7, #12]
 801c192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c196:	4293      	cmp	r3, r2
 801c198:	d001      	beq.n	801c19e <pick_lfn+0x8a>
 801c19a:	2300      	movs	r3, #0
 801c19c:	e017      	b.n	801c1ce <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c19e:	693b      	ldr	r3, [r7, #16]
 801c1a0:	3301      	adds	r3, #1
 801c1a2:	613b      	str	r3, [r7, #16]
 801c1a4:	693b      	ldr	r3, [r7, #16]
 801c1a6:	2b0c      	cmp	r3, #12
 801c1a8:	d9d3      	bls.n	801c152 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c1aa:	683b      	ldr	r3, [r7, #0]
 801c1ac:	781b      	ldrb	r3, [r3, #0]
 801c1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d00a      	beq.n	801c1cc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c1b6:	697b      	ldr	r3, [r7, #20]
 801c1b8:	2bfe      	cmp	r3, #254	@ 0xfe
 801c1ba:	d901      	bls.n	801c1c0 <pick_lfn+0xac>
 801c1bc:	2300      	movs	r3, #0
 801c1be:	e006      	b.n	801c1ce <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c1c0:	697b      	ldr	r3, [r7, #20]
 801c1c2:	005b      	lsls	r3, r3, #1
 801c1c4:	687a      	ldr	r2, [r7, #4]
 801c1c6:	4413      	add	r3, r2
 801c1c8:	2200      	movs	r2, #0
 801c1ca:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c1cc:	2301      	movs	r3, #1
}
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	3718      	adds	r7, #24
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	bd80      	pop	{r7, pc}
 801c1d6:	bf00      	nop
 801c1d8:	0801ec1c 	.word	0x0801ec1c

0801c1dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b088      	sub	sp, #32
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	60f8      	str	r0, [r7, #12]
 801c1e4:	60b9      	str	r1, [r7, #8]
 801c1e6:	4611      	mov	r1, r2
 801c1e8:	461a      	mov	r2, r3
 801c1ea:	460b      	mov	r3, r1
 801c1ec:	71fb      	strb	r3, [r7, #7]
 801c1ee:	4613      	mov	r3, r2
 801c1f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c1f2:	68bb      	ldr	r3, [r7, #8]
 801c1f4:	330d      	adds	r3, #13
 801c1f6:	79ba      	ldrb	r2, [r7, #6]
 801c1f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c1fa:	68bb      	ldr	r3, [r7, #8]
 801c1fc:	330b      	adds	r3, #11
 801c1fe:	220f      	movs	r2, #15
 801c200:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c202:	68bb      	ldr	r3, [r7, #8]
 801c204:	330c      	adds	r3, #12
 801c206:	2200      	movs	r2, #0
 801c208:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c20a:	68bb      	ldr	r3, [r7, #8]
 801c20c:	331a      	adds	r3, #26
 801c20e:	2100      	movs	r1, #0
 801c210:	4618      	mov	r0, r3
 801c212:	f7fe fed6 	bl	801afc2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c216:	79fb      	ldrb	r3, [r7, #7]
 801c218:	1e5a      	subs	r2, r3, #1
 801c21a:	4613      	mov	r3, r2
 801c21c:	005b      	lsls	r3, r3, #1
 801c21e:	4413      	add	r3, r2
 801c220:	009b      	lsls	r3, r3, #2
 801c222:	4413      	add	r3, r2
 801c224:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c226:	2300      	movs	r3, #0
 801c228:	82fb      	strh	r3, [r7, #22]
 801c22a:	2300      	movs	r3, #0
 801c22c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c22e:	8afb      	ldrh	r3, [r7, #22]
 801c230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c234:	4293      	cmp	r3, r2
 801c236:	d007      	beq.n	801c248 <put_lfn+0x6c>
 801c238:	69fb      	ldr	r3, [r7, #28]
 801c23a:	1c5a      	adds	r2, r3, #1
 801c23c:	61fa      	str	r2, [r7, #28]
 801c23e:	005b      	lsls	r3, r3, #1
 801c240:	68fa      	ldr	r2, [r7, #12]
 801c242:	4413      	add	r3, r2
 801c244:	881b      	ldrh	r3, [r3, #0]
 801c246:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c248:	4a17      	ldr	r2, [pc, #92]	@ (801c2a8 <put_lfn+0xcc>)
 801c24a:	69bb      	ldr	r3, [r7, #24]
 801c24c:	4413      	add	r3, r2
 801c24e:	781b      	ldrb	r3, [r3, #0]
 801c250:	461a      	mov	r2, r3
 801c252:	68bb      	ldr	r3, [r7, #8]
 801c254:	4413      	add	r3, r2
 801c256:	8afa      	ldrh	r2, [r7, #22]
 801c258:	4611      	mov	r1, r2
 801c25a:	4618      	mov	r0, r3
 801c25c:	f7fe feb1 	bl	801afc2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c260:	8afb      	ldrh	r3, [r7, #22]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d102      	bne.n	801c26c <put_lfn+0x90>
 801c266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c26a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c26c:	69bb      	ldr	r3, [r7, #24]
 801c26e:	3301      	adds	r3, #1
 801c270:	61bb      	str	r3, [r7, #24]
 801c272:	69bb      	ldr	r3, [r7, #24]
 801c274:	2b0c      	cmp	r3, #12
 801c276:	d9da      	bls.n	801c22e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c278:	8afb      	ldrh	r3, [r7, #22]
 801c27a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c27e:	4293      	cmp	r3, r2
 801c280:	d006      	beq.n	801c290 <put_lfn+0xb4>
 801c282:	69fb      	ldr	r3, [r7, #28]
 801c284:	005b      	lsls	r3, r3, #1
 801c286:	68fa      	ldr	r2, [r7, #12]
 801c288:	4413      	add	r3, r2
 801c28a:	881b      	ldrh	r3, [r3, #0]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d103      	bne.n	801c298 <put_lfn+0xbc>
 801c290:	79fb      	ldrb	r3, [r7, #7]
 801c292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c296:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	79fa      	ldrb	r2, [r7, #7]
 801c29c:	701a      	strb	r2, [r3, #0]
}
 801c29e:	bf00      	nop
 801c2a0:	3720      	adds	r7, #32
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	bd80      	pop	{r7, pc}
 801c2a6:	bf00      	nop
 801c2a8:	0801ec1c 	.word	0x0801ec1c

0801c2ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b08c      	sub	sp, #48	@ 0x30
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	60f8      	str	r0, [r7, #12]
 801c2b4:	60b9      	str	r1, [r7, #8]
 801c2b6:	607a      	str	r2, [r7, #4]
 801c2b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c2ba:	220b      	movs	r2, #11
 801c2bc:	68b9      	ldr	r1, [r7, #8]
 801c2be:	68f8      	ldr	r0, [r7, #12]
 801c2c0:	f7fe fec6 	bl	801b050 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c2c4:	683b      	ldr	r3, [r7, #0]
 801c2c6:	2b05      	cmp	r3, #5
 801c2c8:	d929      	bls.n	801c31e <gen_numname+0x72>
		sr = seq;
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c2ce:	e020      	b.n	801c312 <gen_numname+0x66>
			wc = *lfn++;
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	1c9a      	adds	r2, r3, #2
 801c2d4:	607a      	str	r2, [r7, #4]
 801c2d6:	881b      	ldrh	r3, [r3, #0]
 801c2d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c2da:	2300      	movs	r3, #0
 801c2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c2de:	e015      	b.n	801c30c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c2e0:	69fb      	ldr	r3, [r7, #28]
 801c2e2:	005a      	lsls	r2, r3, #1
 801c2e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2e6:	f003 0301 	and.w	r3, r3, #1
 801c2ea:	4413      	add	r3, r2
 801c2ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c2ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2f0:	085b      	lsrs	r3, r3, #1
 801c2f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c2f4:	69fb      	ldr	r3, [r7, #28]
 801c2f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d003      	beq.n	801c306 <gen_numname+0x5a>
 801c2fe:	69fa      	ldr	r2, [r7, #28]
 801c300:	4b30      	ldr	r3, [pc, #192]	@ (801c3c4 <gen_numname+0x118>)
 801c302:	4053      	eors	r3, r2
 801c304:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c308:	3301      	adds	r3, #1
 801c30a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c30e:	2b0f      	cmp	r3, #15
 801c310:	d9e6      	bls.n	801c2e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	881b      	ldrh	r3, [r3, #0]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d1da      	bne.n	801c2d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c31a:	69fb      	ldr	r3, [r7, #28]
 801c31c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c31e:	2307      	movs	r3, #7
 801c320:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c322:	683b      	ldr	r3, [r7, #0]
 801c324:	b2db      	uxtb	r3, r3
 801c326:	f003 030f 	and.w	r3, r3, #15
 801c32a:	b2db      	uxtb	r3, r3
 801c32c:	3330      	adds	r3, #48	@ 0x30
 801c32e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c336:	2b39      	cmp	r3, #57	@ 0x39
 801c338:	d904      	bls.n	801c344 <gen_numname+0x98>
 801c33a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c33e:	3307      	adds	r3, #7
 801c340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c346:	1e5a      	subs	r2, r3, #1
 801c348:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c34a:	3330      	adds	r3, #48	@ 0x30
 801c34c:	443b      	add	r3, r7
 801c34e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c352:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	091b      	lsrs	r3, r3, #4
 801c35a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d1df      	bne.n	801c322 <gen_numname+0x76>
	ns[i] = '~';
 801c362:	f107 0214 	add.w	r2, r7, #20
 801c366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c368:	4413      	add	r3, r2
 801c36a:	227e      	movs	r2, #126	@ 0x7e
 801c36c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c36e:	2300      	movs	r3, #0
 801c370:	627b      	str	r3, [r7, #36]	@ 0x24
 801c372:	e002      	b.n	801c37a <gen_numname+0xce>
 801c374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c376:	3301      	adds	r3, #1
 801c378:	627b      	str	r3, [r7, #36]	@ 0x24
 801c37a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c37e:	429a      	cmp	r2, r3
 801c380:	d205      	bcs.n	801c38e <gen_numname+0xe2>
 801c382:	68fa      	ldr	r2, [r7, #12]
 801c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c386:	4413      	add	r3, r2
 801c388:	781b      	ldrb	r3, [r3, #0]
 801c38a:	2b20      	cmp	r3, #32
 801c38c:	d1f2      	bne.n	801c374 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c390:	2b07      	cmp	r3, #7
 801c392:	d807      	bhi.n	801c3a4 <gen_numname+0xf8>
 801c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c396:	1c5a      	adds	r2, r3, #1
 801c398:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c39a:	3330      	adds	r3, #48	@ 0x30
 801c39c:	443b      	add	r3, r7
 801c39e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c3a2:	e000      	b.n	801c3a6 <gen_numname+0xfa>
 801c3a4:	2120      	movs	r1, #32
 801c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3a8:	1c5a      	adds	r2, r3, #1
 801c3aa:	627a      	str	r2, [r7, #36]	@ 0x24
 801c3ac:	68fa      	ldr	r2, [r7, #12]
 801c3ae:	4413      	add	r3, r2
 801c3b0:	460a      	mov	r2, r1
 801c3b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3b6:	2b07      	cmp	r3, #7
 801c3b8:	d9e9      	bls.n	801c38e <gen_numname+0xe2>
}
 801c3ba:	bf00      	nop
 801c3bc:	bf00      	nop
 801c3be:	3730      	adds	r7, #48	@ 0x30
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	00011021 	.word	0x00011021

0801c3c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c3c8:	b480      	push	{r7}
 801c3ca:	b085      	sub	sp, #20
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c3d4:	230b      	movs	r3, #11
 801c3d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c3d8:	7bfb      	ldrb	r3, [r7, #15]
 801c3da:	b2da      	uxtb	r2, r3
 801c3dc:	0852      	lsrs	r2, r2, #1
 801c3de:	01db      	lsls	r3, r3, #7
 801c3e0:	4313      	orrs	r3, r2
 801c3e2:	b2da      	uxtb	r2, r3
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	1c59      	adds	r1, r3, #1
 801c3e8:	6079      	str	r1, [r7, #4]
 801c3ea:	781b      	ldrb	r3, [r3, #0]
 801c3ec:	4413      	add	r3, r2
 801c3ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	3b01      	subs	r3, #1
 801c3f4:	60bb      	str	r3, [r7, #8]
 801c3f6:	68bb      	ldr	r3, [r7, #8]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d1ed      	bne.n	801c3d8 <sum_sfn+0x10>
	return sum;
 801c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3fe:	4618      	mov	r0, r3
 801c400:	3714      	adds	r7, #20
 801c402:	46bd      	mov	sp, r7
 801c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c408:	4770      	bx	lr

0801c40a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c40a:	b580      	push	{r7, lr}
 801c40c:	b086      	sub	sp, #24
 801c40e:	af00      	add	r7, sp, #0
 801c410:	6078      	str	r0, [r7, #4]
 801c412:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c414:	2304      	movs	r3, #4
 801c416:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c41e:	23ff      	movs	r3, #255	@ 0xff
 801c420:	757b      	strb	r3, [r7, #21]
 801c422:	23ff      	movs	r3, #255	@ 0xff
 801c424:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c426:	e081      	b.n	801c52c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	69db      	ldr	r3, [r3, #28]
 801c42c:	4619      	mov	r1, r3
 801c42e:	6938      	ldr	r0, [r7, #16]
 801c430:	f7ff f83c 	bl	801b4ac <move_window>
 801c434:	4603      	mov	r3, r0
 801c436:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c438:	7dfb      	ldrb	r3, [r7, #23]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d17c      	bne.n	801c538 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	6a1b      	ldr	r3, [r3, #32]
 801c442:	781b      	ldrb	r3, [r3, #0]
 801c444:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c446:	7dbb      	ldrb	r3, [r7, #22]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d102      	bne.n	801c452 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c44c:	2304      	movs	r3, #4
 801c44e:	75fb      	strb	r3, [r7, #23]
 801c450:	e077      	b.n	801c542 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	6a1b      	ldr	r3, [r3, #32]
 801c456:	330b      	adds	r3, #11
 801c458:	781b      	ldrb	r3, [r3, #0]
 801c45a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c45e:	73fb      	strb	r3, [r7, #15]
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	7bfa      	ldrb	r2, [r7, #15]
 801c464:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c466:	7dbb      	ldrb	r3, [r7, #22]
 801c468:	2be5      	cmp	r3, #229	@ 0xe5
 801c46a:	d00e      	beq.n	801c48a <dir_read+0x80>
 801c46c:	7dbb      	ldrb	r3, [r7, #22]
 801c46e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c470:	d00b      	beq.n	801c48a <dir_read+0x80>
 801c472:	7bfb      	ldrb	r3, [r7, #15]
 801c474:	f023 0320 	bic.w	r3, r3, #32
 801c478:	2b08      	cmp	r3, #8
 801c47a:	bf0c      	ite	eq
 801c47c:	2301      	moveq	r3, #1
 801c47e:	2300      	movne	r3, #0
 801c480:	b2db      	uxtb	r3, r3
 801c482:	461a      	mov	r2, r3
 801c484:	683b      	ldr	r3, [r7, #0]
 801c486:	4293      	cmp	r3, r2
 801c488:	d002      	beq.n	801c490 <dir_read+0x86>
				ord = 0xFF;
 801c48a:	23ff      	movs	r3, #255	@ 0xff
 801c48c:	757b      	strb	r3, [r7, #21]
 801c48e:	e044      	b.n	801c51a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c490:	7bfb      	ldrb	r3, [r7, #15]
 801c492:	2b0f      	cmp	r3, #15
 801c494:	d12f      	bne.n	801c4f6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c496:	7dbb      	ldrb	r3, [r7, #22]
 801c498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d00d      	beq.n	801c4bc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	6a1b      	ldr	r3, [r3, #32]
 801c4a4:	7b5b      	ldrb	r3, [r3, #13]
 801c4a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c4a8:	7dbb      	ldrb	r3, [r7, #22]
 801c4aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c4ae:	75bb      	strb	r3, [r7, #22]
 801c4b0:	7dbb      	ldrb	r3, [r7, #22]
 801c4b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	695a      	ldr	r2, [r3, #20]
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c4bc:	7dba      	ldrb	r2, [r7, #22]
 801c4be:	7d7b      	ldrb	r3, [r7, #21]
 801c4c0:	429a      	cmp	r2, r3
 801c4c2:	d115      	bne.n	801c4f0 <dir_read+0xe6>
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	6a1b      	ldr	r3, [r3, #32]
 801c4c8:	330d      	adds	r3, #13
 801c4ca:	781b      	ldrb	r3, [r3, #0]
 801c4cc:	7d3a      	ldrb	r2, [r7, #20]
 801c4ce:	429a      	cmp	r2, r3
 801c4d0:	d10e      	bne.n	801c4f0 <dir_read+0xe6>
 801c4d2:	693b      	ldr	r3, [r7, #16]
 801c4d4:	691a      	ldr	r2, [r3, #16]
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	6a1b      	ldr	r3, [r3, #32]
 801c4da:	4619      	mov	r1, r3
 801c4dc:	4610      	mov	r0, r2
 801c4de:	f7ff fe19 	bl	801c114 <pick_lfn>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d003      	beq.n	801c4f0 <dir_read+0xe6>
 801c4e8:	7d7b      	ldrb	r3, [r7, #21]
 801c4ea:	3b01      	subs	r3, #1
 801c4ec:	b2db      	uxtb	r3, r3
 801c4ee:	e000      	b.n	801c4f2 <dir_read+0xe8>
 801c4f0:	23ff      	movs	r3, #255	@ 0xff
 801c4f2:	757b      	strb	r3, [r7, #21]
 801c4f4:	e011      	b.n	801c51a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c4f6:	7d7b      	ldrb	r3, [r7, #21]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d109      	bne.n	801c510 <dir_read+0x106>
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	6a1b      	ldr	r3, [r3, #32]
 801c500:	4618      	mov	r0, r3
 801c502:	f7ff ff61 	bl	801c3c8 <sum_sfn>
 801c506:	4603      	mov	r3, r0
 801c508:	461a      	mov	r2, r3
 801c50a:	7d3b      	ldrb	r3, [r7, #20]
 801c50c:	4293      	cmp	r3, r2
 801c50e:	d015      	beq.n	801c53c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	f04f 32ff 	mov.w	r2, #4294967295
 801c516:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c518:	e010      	b.n	801c53c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c51a:	2100      	movs	r1, #0
 801c51c:	6878      	ldr	r0, [r7, #4]
 801c51e:	f7ff fc2d 	bl	801bd7c <dir_next>
 801c522:	4603      	mov	r3, r0
 801c524:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c526:	7dfb      	ldrb	r3, [r7, #23]
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d109      	bne.n	801c540 <dir_read+0x136>
	while (dp->sect) {
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	69db      	ldr	r3, [r3, #28]
 801c530:	2b00      	cmp	r3, #0
 801c532:	f47f af79 	bne.w	801c428 <dir_read+0x1e>
 801c536:	e004      	b.n	801c542 <dir_read+0x138>
		if (res != FR_OK) break;
 801c538:	bf00      	nop
 801c53a:	e002      	b.n	801c542 <dir_read+0x138>
					break;
 801c53c:	bf00      	nop
 801c53e:	e000      	b.n	801c542 <dir_read+0x138>
		if (res != FR_OK) break;
 801c540:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c542:	7dfb      	ldrb	r3, [r7, #23]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d002      	beq.n	801c54e <dir_read+0x144>
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	2200      	movs	r2, #0
 801c54c:	61da      	str	r2, [r3, #28]
	return res;
 801c54e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c550:	4618      	mov	r0, r3
 801c552:	3718      	adds	r7, #24
 801c554:	46bd      	mov	sp, r7
 801c556:	bd80      	pop	{r7, pc}

0801c558 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c558:	b580      	push	{r7, lr}
 801c55a:	b086      	sub	sp, #24
 801c55c:	af00      	add	r7, sp, #0
 801c55e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c566:	2100      	movs	r1, #0
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7ff fb7e 	bl	801bc6a <dir_sdi>
 801c56e:	4603      	mov	r3, r0
 801c570:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c572:	7dfb      	ldrb	r3, [r7, #23]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d001      	beq.n	801c57c <dir_find+0x24>
 801c578:	7dfb      	ldrb	r3, [r7, #23]
 801c57a:	e0a9      	b.n	801c6d0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c57c:	23ff      	movs	r3, #255	@ 0xff
 801c57e:	753b      	strb	r3, [r7, #20]
 801c580:	7d3b      	ldrb	r3, [r7, #20]
 801c582:	757b      	strb	r3, [r7, #21]
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	f04f 32ff 	mov.w	r2, #4294967295
 801c58a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	69db      	ldr	r3, [r3, #28]
 801c590:	4619      	mov	r1, r3
 801c592:	6938      	ldr	r0, [r7, #16]
 801c594:	f7fe ff8a 	bl	801b4ac <move_window>
 801c598:	4603      	mov	r3, r0
 801c59a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c59c:	7dfb      	ldrb	r3, [r7, #23]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	f040 8090 	bne.w	801c6c4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	6a1b      	ldr	r3, [r3, #32]
 801c5a8:	781b      	ldrb	r3, [r3, #0]
 801c5aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c5ac:	7dbb      	ldrb	r3, [r7, #22]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d102      	bne.n	801c5b8 <dir_find+0x60>
 801c5b2:	2304      	movs	r3, #4
 801c5b4:	75fb      	strb	r3, [r7, #23]
 801c5b6:	e08a      	b.n	801c6ce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	6a1b      	ldr	r3, [r3, #32]
 801c5bc:	330b      	adds	r3, #11
 801c5be:	781b      	ldrb	r3, [r3, #0]
 801c5c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c5c4:	73fb      	strb	r3, [r7, #15]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	7bfa      	ldrb	r2, [r7, #15]
 801c5ca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c5cc:	7dbb      	ldrb	r3, [r7, #22]
 801c5ce:	2be5      	cmp	r3, #229	@ 0xe5
 801c5d0:	d007      	beq.n	801c5e2 <dir_find+0x8a>
 801c5d2:	7bfb      	ldrb	r3, [r7, #15]
 801c5d4:	f003 0308 	and.w	r3, r3, #8
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d009      	beq.n	801c5f0 <dir_find+0x98>
 801c5dc:	7bfb      	ldrb	r3, [r7, #15]
 801c5de:	2b0f      	cmp	r3, #15
 801c5e0:	d006      	beq.n	801c5f0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c5e2:	23ff      	movs	r3, #255	@ 0xff
 801c5e4:	757b      	strb	r3, [r7, #21]
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	f04f 32ff 	mov.w	r2, #4294967295
 801c5ec:	631a      	str	r2, [r3, #48]	@ 0x30
 801c5ee:	e05e      	b.n	801c6ae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c5f0:	7bfb      	ldrb	r3, [r7, #15]
 801c5f2:	2b0f      	cmp	r3, #15
 801c5f4:	d136      	bne.n	801c664 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c600:	2b00      	cmp	r3, #0
 801c602:	d154      	bne.n	801c6ae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c604:	7dbb      	ldrb	r3, [r7, #22]
 801c606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d00d      	beq.n	801c62a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	6a1b      	ldr	r3, [r3, #32]
 801c612:	7b5b      	ldrb	r3, [r3, #13]
 801c614:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c616:	7dbb      	ldrb	r3, [r7, #22]
 801c618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c61c:	75bb      	strb	r3, [r7, #22]
 801c61e:	7dbb      	ldrb	r3, [r7, #22]
 801c620:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	695a      	ldr	r2, [r3, #20]
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c62a:	7dba      	ldrb	r2, [r7, #22]
 801c62c:	7d7b      	ldrb	r3, [r7, #21]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d115      	bne.n	801c65e <dir_find+0x106>
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	6a1b      	ldr	r3, [r3, #32]
 801c636:	330d      	adds	r3, #13
 801c638:	781b      	ldrb	r3, [r3, #0]
 801c63a:	7d3a      	ldrb	r2, [r7, #20]
 801c63c:	429a      	cmp	r2, r3
 801c63e:	d10e      	bne.n	801c65e <dir_find+0x106>
 801c640:	693b      	ldr	r3, [r7, #16]
 801c642:	691a      	ldr	r2, [r3, #16]
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6a1b      	ldr	r3, [r3, #32]
 801c648:	4619      	mov	r1, r3
 801c64a:	4610      	mov	r0, r2
 801c64c:	f7ff fcf2 	bl	801c034 <cmp_lfn>
 801c650:	4603      	mov	r3, r0
 801c652:	2b00      	cmp	r3, #0
 801c654:	d003      	beq.n	801c65e <dir_find+0x106>
 801c656:	7d7b      	ldrb	r3, [r7, #21]
 801c658:	3b01      	subs	r3, #1
 801c65a:	b2db      	uxtb	r3, r3
 801c65c:	e000      	b.n	801c660 <dir_find+0x108>
 801c65e:	23ff      	movs	r3, #255	@ 0xff
 801c660:	757b      	strb	r3, [r7, #21]
 801c662:	e024      	b.n	801c6ae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c664:	7d7b      	ldrb	r3, [r7, #21]
 801c666:	2b00      	cmp	r3, #0
 801c668:	d109      	bne.n	801c67e <dir_find+0x126>
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	6a1b      	ldr	r3, [r3, #32]
 801c66e:	4618      	mov	r0, r3
 801c670:	f7ff feaa 	bl	801c3c8 <sum_sfn>
 801c674:	4603      	mov	r3, r0
 801c676:	461a      	mov	r2, r3
 801c678:	7d3b      	ldrb	r3, [r7, #20]
 801c67a:	4293      	cmp	r3, r2
 801c67c:	d024      	beq.n	801c6c8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c684:	f003 0301 	and.w	r3, r3, #1
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d10a      	bne.n	801c6a2 <dir_find+0x14a>
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	6a18      	ldr	r0, [r3, #32]
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	3324      	adds	r3, #36	@ 0x24
 801c694:	220b      	movs	r2, #11
 801c696:	4619      	mov	r1, r3
 801c698:	f7fe fd16 	bl	801b0c8 <mem_cmp>
 801c69c:	4603      	mov	r3, r0
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d014      	beq.n	801c6cc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c6a2:	23ff      	movs	r3, #255	@ 0xff
 801c6a4:	757b      	strb	r3, [r7, #21]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	f04f 32ff 	mov.w	r2, #4294967295
 801c6ac:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c6ae:	2100      	movs	r1, #0
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f7ff fb63 	bl	801bd7c <dir_next>
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c6ba:	7dfb      	ldrb	r3, [r7, #23]
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	f43f af65 	beq.w	801c58c <dir_find+0x34>
 801c6c2:	e004      	b.n	801c6ce <dir_find+0x176>
		if (res != FR_OK) break;
 801c6c4:	bf00      	nop
 801c6c6:	e002      	b.n	801c6ce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c6c8:	bf00      	nop
 801c6ca:	e000      	b.n	801c6ce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c6cc:	bf00      	nop

	return res;
 801c6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	3718      	adds	r7, #24
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd80      	pop	{r7, pc}

0801c6d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b08c      	sub	sp, #48	@ 0x30
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c6ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d001      	beq.n	801c6f8 <dir_register+0x20>
 801c6f4:	2306      	movs	r3, #6
 801c6f6:	e0e0      	b.n	801c8ba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	627b      	str	r3, [r7, #36]	@ 0x24
 801c6fc:	e002      	b.n	801c704 <dir_register+0x2c>
 801c6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c700:	3301      	adds	r3, #1
 801c702:	627b      	str	r3, [r7, #36]	@ 0x24
 801c704:	69fb      	ldr	r3, [r7, #28]
 801c706:	691a      	ldr	r2, [r3, #16]
 801c708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c70a:	005b      	lsls	r3, r3, #1
 801c70c:	4413      	add	r3, r2
 801c70e:	881b      	ldrh	r3, [r3, #0]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d1f4      	bne.n	801c6fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c71a:	f107 030c 	add.w	r3, r7, #12
 801c71e:	220c      	movs	r2, #12
 801c720:	4618      	mov	r0, r3
 801c722:	f7fe fc95 	bl	801b050 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c726:	7dfb      	ldrb	r3, [r7, #23]
 801c728:	f003 0301 	and.w	r3, r3, #1
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d032      	beq.n	801c796 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2240      	movs	r2, #64	@ 0x40
 801c734:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c738:	2301      	movs	r3, #1
 801c73a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c73c:	e016      	b.n	801c76c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c744:	69fb      	ldr	r3, [r7, #28]
 801c746:	691a      	ldr	r2, [r3, #16]
 801c748:	f107 010c 	add.w	r1, r7, #12
 801c74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c74e:	f7ff fdad 	bl	801c2ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	f7ff ff00 	bl	801c558 <dir_find>
 801c758:	4603      	mov	r3, r0
 801c75a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c75e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c762:	2b00      	cmp	r3, #0
 801c764:	d106      	bne.n	801c774 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c768:	3301      	adds	r3, #1
 801c76a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c76e:	2b63      	cmp	r3, #99	@ 0x63
 801c770:	d9e5      	bls.n	801c73e <dir_register+0x66>
 801c772:	e000      	b.n	801c776 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c774:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c778:	2b64      	cmp	r3, #100	@ 0x64
 801c77a:	d101      	bne.n	801c780 <dir_register+0xa8>
 801c77c:	2307      	movs	r3, #7
 801c77e:	e09c      	b.n	801c8ba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c780:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c784:	2b04      	cmp	r3, #4
 801c786:	d002      	beq.n	801c78e <dir_register+0xb6>
 801c788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c78c:	e095      	b.n	801c8ba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c78e:	7dfa      	ldrb	r2, [r7, #23]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c796:	7dfb      	ldrb	r3, [r7, #23]
 801c798:	f003 0302 	and.w	r3, r3, #2
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d007      	beq.n	801c7b0 <dir_register+0xd8>
 801c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7a2:	330c      	adds	r3, #12
 801c7a4:	4a47      	ldr	r2, [pc, #284]	@ (801c8c4 <dir_register+0x1ec>)
 801c7a6:	fba2 2303 	umull	r2, r3, r2, r3
 801c7aa:	089b      	lsrs	r3, r3, #2
 801c7ac:	3301      	adds	r3, #1
 801c7ae:	e000      	b.n	801c7b2 <dir_register+0xda>
 801c7b0:	2301      	movs	r3, #1
 801c7b2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c7b4:	6a39      	ldr	r1, [r7, #32]
 801c7b6:	6878      	ldr	r0, [r7, #4]
 801c7b8:	f7ff fbb6 	bl	801bf28 <dir_alloc>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d148      	bne.n	801c85c <dir_register+0x184>
 801c7ca:	6a3b      	ldr	r3, [r7, #32]
 801c7cc:	3b01      	subs	r3, #1
 801c7ce:	623b      	str	r3, [r7, #32]
 801c7d0:	6a3b      	ldr	r3, [r7, #32]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d042      	beq.n	801c85c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	695a      	ldr	r2, [r3, #20]
 801c7da:	6a3b      	ldr	r3, [r7, #32]
 801c7dc:	015b      	lsls	r3, r3, #5
 801c7de:	1ad3      	subs	r3, r2, r3
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	6878      	ldr	r0, [r7, #4]
 801c7e4:	f7ff fa41 	bl	801bc6a <dir_sdi>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d132      	bne.n	801c85c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	3324      	adds	r3, #36	@ 0x24
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f7ff fde4 	bl	801c3c8 <sum_sfn>
 801c800:	4603      	mov	r3, r0
 801c802:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	69db      	ldr	r3, [r3, #28]
 801c808:	4619      	mov	r1, r3
 801c80a:	69f8      	ldr	r0, [r7, #28]
 801c80c:	f7fe fe4e 	bl	801b4ac <move_window>
 801c810:	4603      	mov	r3, r0
 801c812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d11d      	bne.n	801c85a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c81e:	69fb      	ldr	r3, [r7, #28]
 801c820:	6918      	ldr	r0, [r3, #16]
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	6a19      	ldr	r1, [r3, #32]
 801c826:	6a3b      	ldr	r3, [r7, #32]
 801c828:	b2da      	uxtb	r2, r3
 801c82a:	7efb      	ldrb	r3, [r7, #27]
 801c82c:	f7ff fcd6 	bl	801c1dc <put_lfn>
				fs->wflag = 1;
 801c830:	69fb      	ldr	r3, [r7, #28]
 801c832:	2201      	movs	r2, #1
 801c834:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c836:	2100      	movs	r1, #0
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f7ff fa9f 	bl	801bd7c <dir_next>
 801c83e:	4603      	mov	r3, r0
 801c840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d107      	bne.n	801c85c <dir_register+0x184>
 801c84c:	6a3b      	ldr	r3, [r7, #32]
 801c84e:	3b01      	subs	r3, #1
 801c850:	623b      	str	r3, [r7, #32]
 801c852:	6a3b      	ldr	r3, [r7, #32]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d1d5      	bne.n	801c804 <dir_register+0x12c>
 801c858:	e000      	b.n	801c85c <dir_register+0x184>
				if (res != FR_OK) break;
 801c85a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c85c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c860:	2b00      	cmp	r3, #0
 801c862:	d128      	bne.n	801c8b6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	69db      	ldr	r3, [r3, #28]
 801c868:	4619      	mov	r1, r3
 801c86a:	69f8      	ldr	r0, [r7, #28]
 801c86c:	f7fe fe1e 	bl	801b4ac <move_window>
 801c870:	4603      	mov	r3, r0
 801c872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d11b      	bne.n	801c8b6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	6a1b      	ldr	r3, [r3, #32]
 801c882:	2220      	movs	r2, #32
 801c884:	2100      	movs	r1, #0
 801c886:	4618      	mov	r0, r3
 801c888:	f7fe fc03 	bl	801b092 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	6a18      	ldr	r0, [r3, #32]
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	3324      	adds	r3, #36	@ 0x24
 801c894:	220b      	movs	r2, #11
 801c896:	4619      	mov	r1, r3
 801c898:	f7fe fbda 	bl	801b050 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	6a1b      	ldr	r3, [r3, #32]
 801c8a6:	330c      	adds	r3, #12
 801c8a8:	f002 0218 	and.w	r2, r2, #24
 801c8ac:	b2d2      	uxtb	r2, r2
 801c8ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c8b0:	69fb      	ldr	r3, [r7, #28]
 801c8b2:	2201      	movs	r2, #1
 801c8b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	3730      	adds	r7, #48	@ 0x30
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	bd80      	pop	{r7, pc}
 801c8c2:	bf00      	nop
 801c8c4:	4ec4ec4f 	.word	0x4ec4ec4f

0801c8c8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b086      	sub	sp, #24
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	695b      	ldr	r3, [r3, #20]
 801c8da:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8e4:	d007      	beq.n	801c8f6 <dir_remove+0x2e>
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8ea:	4619      	mov	r1, r3
 801c8ec:	6878      	ldr	r0, [r7, #4]
 801c8ee:	f7ff f9bc 	bl	801bc6a <dir_sdi>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	e000      	b.n	801c8f8 <dir_remove+0x30>
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c8fa:	7dfb      	ldrb	r3, [r7, #23]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d128      	bne.n	801c952 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	69db      	ldr	r3, [r3, #28]
 801c904:	4619      	mov	r1, r3
 801c906:	6938      	ldr	r0, [r7, #16]
 801c908:	f7fe fdd0 	bl	801b4ac <move_window>
 801c90c:	4603      	mov	r3, r0
 801c90e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c910:	7dfb      	ldrb	r3, [r7, #23]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d115      	bne.n	801c942 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	6a1b      	ldr	r3, [r3, #32]
 801c91a:	22e5      	movs	r2, #229	@ 0xe5
 801c91c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c91e:	693b      	ldr	r3, [r7, #16]
 801c920:	2201      	movs	r2, #1
 801c922:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	695b      	ldr	r3, [r3, #20]
 801c928:	68fa      	ldr	r2, [r7, #12]
 801c92a:	429a      	cmp	r2, r3
 801c92c:	d90b      	bls.n	801c946 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c92e:	2100      	movs	r1, #0
 801c930:	6878      	ldr	r0, [r7, #4]
 801c932:	f7ff fa23 	bl	801bd7c <dir_next>
 801c936:	4603      	mov	r3, r0
 801c938:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c93a:	7dfb      	ldrb	r3, [r7, #23]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d0df      	beq.n	801c900 <dir_remove+0x38>
 801c940:	e002      	b.n	801c948 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c942:	bf00      	nop
 801c944:	e000      	b.n	801c948 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c946:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c948:	7dfb      	ldrb	r3, [r7, #23]
 801c94a:	2b04      	cmp	r3, #4
 801c94c:	d101      	bne.n	801c952 <dir_remove+0x8a>
 801c94e:	2302      	movs	r3, #2
 801c950:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c952:	7dfb      	ldrb	r3, [r7, #23]
}
 801c954:	4618      	mov	r0, r3
 801c956:	3718      	adds	r7, #24
 801c958:	46bd      	mov	sp, r7
 801c95a:	bd80      	pop	{r7, pc}

0801c95c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b08a      	sub	sp, #40	@ 0x28
 801c960:	af00      	add	r7, sp, #0
 801c962:	6078      	str	r0, [r7, #4]
 801c964:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	613b      	str	r3, [r7, #16]
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	691b      	ldr	r3, [r3, #16]
 801c972:	60fb      	str	r3, [r7, #12]
 801c974:	2300      	movs	r3, #0
 801c976:	617b      	str	r3, [r7, #20]
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c97c:	69bb      	ldr	r3, [r7, #24]
 801c97e:	1c5a      	adds	r2, r3, #1
 801c980:	61ba      	str	r2, [r7, #24]
 801c982:	693a      	ldr	r2, [r7, #16]
 801c984:	4413      	add	r3, r2
 801c986:	781b      	ldrb	r3, [r3, #0]
 801c988:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c98a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c98c:	2b1f      	cmp	r3, #31
 801c98e:	d940      	bls.n	801ca12 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c990:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c992:	2b2f      	cmp	r3, #47	@ 0x2f
 801c994:	d006      	beq.n	801c9a4 <create_name+0x48>
 801c996:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c998:	2b5c      	cmp	r3, #92	@ 0x5c
 801c99a:	d110      	bne.n	801c9be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c99c:	e002      	b.n	801c9a4 <create_name+0x48>
 801c99e:	69bb      	ldr	r3, [r7, #24]
 801c9a0:	3301      	adds	r3, #1
 801c9a2:	61bb      	str	r3, [r7, #24]
 801c9a4:	693a      	ldr	r2, [r7, #16]
 801c9a6:	69bb      	ldr	r3, [r7, #24]
 801c9a8:	4413      	add	r3, r2
 801c9aa:	781b      	ldrb	r3, [r3, #0]
 801c9ac:	2b2f      	cmp	r3, #47	@ 0x2f
 801c9ae:	d0f6      	beq.n	801c99e <create_name+0x42>
 801c9b0:	693a      	ldr	r2, [r7, #16]
 801c9b2:	69bb      	ldr	r3, [r7, #24]
 801c9b4:	4413      	add	r3, r2
 801c9b6:	781b      	ldrb	r3, [r3, #0]
 801c9b8:	2b5c      	cmp	r3, #92	@ 0x5c
 801c9ba:	d0f0      	beq.n	801c99e <create_name+0x42>
			break;
 801c9bc:	e02a      	b.n	801ca14 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	2bfe      	cmp	r3, #254	@ 0xfe
 801c9c2:	d901      	bls.n	801c9c8 <create_name+0x6c>
 801c9c4:	2306      	movs	r3, #6
 801c9c6:	e17d      	b.n	801ccc4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c9c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9ca:	b2db      	uxtb	r3, r3
 801c9cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c9ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9d0:	2101      	movs	r1, #1
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f001 fa98 	bl	801df08 <ff_convert>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c9dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d101      	bne.n	801c9e6 <create_name+0x8a>
 801c9e2:	2306      	movs	r3, #6
 801c9e4:	e16e      	b.n	801ccc4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c9e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9e8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c9ea:	d809      	bhi.n	801ca00 <create_name+0xa4>
 801c9ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9ee:	4619      	mov	r1, r3
 801c9f0:	488d      	ldr	r0, [pc, #564]	@ (801cc28 <create_name+0x2cc>)
 801c9f2:	f7fe fb90 	bl	801b116 <chk_chr>
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d001      	beq.n	801ca00 <create_name+0xa4>
 801c9fc:	2306      	movs	r3, #6
 801c9fe:	e161      	b.n	801ccc4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ca00:	697b      	ldr	r3, [r7, #20]
 801ca02:	1c5a      	adds	r2, r3, #1
 801ca04:	617a      	str	r2, [r7, #20]
 801ca06:	005b      	lsls	r3, r3, #1
 801ca08:	68fa      	ldr	r2, [r7, #12]
 801ca0a:	4413      	add	r3, r2
 801ca0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ca10:	e7b4      	b.n	801c97c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ca12:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ca14:	693a      	ldr	r2, [r7, #16]
 801ca16:	69bb      	ldr	r3, [r7, #24]
 801ca18:	441a      	add	r2, r3
 801ca1a:	683b      	ldr	r3, [r7, #0]
 801ca1c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ca1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca20:	2b1f      	cmp	r3, #31
 801ca22:	d801      	bhi.n	801ca28 <create_name+0xcc>
 801ca24:	2304      	movs	r3, #4
 801ca26:	e000      	b.n	801ca2a <create_name+0xce>
 801ca28:	2300      	movs	r3, #0
 801ca2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ca2e:	e011      	b.n	801ca54 <create_name+0xf8>
		w = lfn[di - 1];
 801ca30:	697a      	ldr	r2, [r7, #20]
 801ca32:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ca36:	4413      	add	r3, r2
 801ca38:	005b      	lsls	r3, r3, #1
 801ca3a:	68fa      	ldr	r2, [r7, #12]
 801ca3c:	4413      	add	r3, r2
 801ca3e:	881b      	ldrh	r3, [r3, #0]
 801ca40:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801ca42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca44:	2b20      	cmp	r3, #32
 801ca46:	d002      	beq.n	801ca4e <create_name+0xf2>
 801ca48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca4a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca4c:	d106      	bne.n	801ca5c <create_name+0x100>
		di--;
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	3b01      	subs	r3, #1
 801ca52:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ca54:	697b      	ldr	r3, [r7, #20]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d1ea      	bne.n	801ca30 <create_name+0xd4>
 801ca5a:	e000      	b.n	801ca5e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801ca5c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801ca5e:	697b      	ldr	r3, [r7, #20]
 801ca60:	005b      	lsls	r3, r3, #1
 801ca62:	68fa      	ldr	r2, [r7, #12]
 801ca64:	4413      	add	r3, r2
 801ca66:	2200      	movs	r2, #0
 801ca68:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ca6a:	697b      	ldr	r3, [r7, #20]
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d101      	bne.n	801ca74 <create_name+0x118>
 801ca70:	2306      	movs	r3, #6
 801ca72:	e127      	b.n	801ccc4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	3324      	adds	r3, #36	@ 0x24
 801ca78:	220b      	movs	r2, #11
 801ca7a:	2120      	movs	r1, #32
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	f7fe fb08 	bl	801b092 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ca82:	2300      	movs	r3, #0
 801ca84:	61bb      	str	r3, [r7, #24]
 801ca86:	e002      	b.n	801ca8e <create_name+0x132>
 801ca88:	69bb      	ldr	r3, [r7, #24]
 801ca8a:	3301      	adds	r3, #1
 801ca8c:	61bb      	str	r3, [r7, #24]
 801ca8e:	69bb      	ldr	r3, [r7, #24]
 801ca90:	005b      	lsls	r3, r3, #1
 801ca92:	68fa      	ldr	r2, [r7, #12]
 801ca94:	4413      	add	r3, r2
 801ca96:	881b      	ldrh	r3, [r3, #0]
 801ca98:	2b20      	cmp	r3, #32
 801ca9a:	d0f5      	beq.n	801ca88 <create_name+0x12c>
 801ca9c:	69bb      	ldr	r3, [r7, #24]
 801ca9e:	005b      	lsls	r3, r3, #1
 801caa0:	68fa      	ldr	r2, [r7, #12]
 801caa2:	4413      	add	r3, r2
 801caa4:	881b      	ldrh	r3, [r3, #0]
 801caa6:	2b2e      	cmp	r3, #46	@ 0x2e
 801caa8:	d0ee      	beq.n	801ca88 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801caaa:	69bb      	ldr	r3, [r7, #24]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d009      	beq.n	801cac4 <create_name+0x168>
 801cab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cab4:	f043 0303 	orr.w	r3, r3, #3
 801cab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cabc:	e002      	b.n	801cac4 <create_name+0x168>
 801cabe:	697b      	ldr	r3, [r7, #20]
 801cac0:	3b01      	subs	r3, #1
 801cac2:	617b      	str	r3, [r7, #20]
 801cac4:	697b      	ldr	r3, [r7, #20]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d009      	beq.n	801cade <create_name+0x182>
 801caca:	697a      	ldr	r2, [r7, #20]
 801cacc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cad0:	4413      	add	r3, r2
 801cad2:	005b      	lsls	r3, r3, #1
 801cad4:	68fa      	ldr	r2, [r7, #12]
 801cad6:	4413      	add	r3, r2
 801cad8:	881b      	ldrh	r3, [r3, #0]
 801cada:	2b2e      	cmp	r3, #46	@ 0x2e
 801cadc:	d1ef      	bne.n	801cabe <create_name+0x162>

	i = b = 0; ni = 8;
 801cade:	2300      	movs	r3, #0
 801cae0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cae4:	2300      	movs	r3, #0
 801cae6:	623b      	str	r3, [r7, #32]
 801cae8:	2308      	movs	r3, #8
 801caea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801caec:	69bb      	ldr	r3, [r7, #24]
 801caee:	1c5a      	adds	r2, r3, #1
 801caf0:	61ba      	str	r2, [r7, #24]
 801caf2:	005b      	lsls	r3, r3, #1
 801caf4:	68fa      	ldr	r2, [r7, #12]
 801caf6:	4413      	add	r3, r2
 801caf8:	881b      	ldrh	r3, [r3, #0]
 801cafa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cafc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	f000 8090 	beq.w	801cc24 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cb04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb06:	2b20      	cmp	r3, #32
 801cb08:	d006      	beq.n	801cb18 <create_name+0x1bc>
 801cb0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb0c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb0e:	d10a      	bne.n	801cb26 <create_name+0x1ca>
 801cb10:	69ba      	ldr	r2, [r7, #24]
 801cb12:	697b      	ldr	r3, [r7, #20]
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d006      	beq.n	801cb26 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cb18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb1c:	f043 0303 	orr.w	r3, r3, #3
 801cb20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cb24:	e07d      	b.n	801cc22 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cb26:	6a3a      	ldr	r2, [r7, #32]
 801cb28:	69fb      	ldr	r3, [r7, #28]
 801cb2a:	429a      	cmp	r2, r3
 801cb2c:	d203      	bcs.n	801cb36 <create_name+0x1da>
 801cb2e:	69ba      	ldr	r2, [r7, #24]
 801cb30:	697b      	ldr	r3, [r7, #20]
 801cb32:	429a      	cmp	r2, r3
 801cb34:	d123      	bne.n	801cb7e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cb36:	69fb      	ldr	r3, [r7, #28]
 801cb38:	2b0b      	cmp	r3, #11
 801cb3a:	d106      	bne.n	801cb4a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb40:	f043 0303 	orr.w	r3, r3, #3
 801cb44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cb48:	e075      	b.n	801cc36 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cb4a:	69ba      	ldr	r2, [r7, #24]
 801cb4c:	697b      	ldr	r3, [r7, #20]
 801cb4e:	429a      	cmp	r2, r3
 801cb50:	d005      	beq.n	801cb5e <create_name+0x202>
 801cb52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb56:	f043 0303 	orr.w	r3, r3, #3
 801cb5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cb5e:	69ba      	ldr	r2, [r7, #24]
 801cb60:	697b      	ldr	r3, [r7, #20]
 801cb62:	429a      	cmp	r2, r3
 801cb64:	d866      	bhi.n	801cc34 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cb66:	697b      	ldr	r3, [r7, #20]
 801cb68:	61bb      	str	r3, [r7, #24]
 801cb6a:	2308      	movs	r3, #8
 801cb6c:	623b      	str	r3, [r7, #32]
 801cb6e:	230b      	movs	r3, #11
 801cb70:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cb72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cb76:	009b      	lsls	r3, r3, #2
 801cb78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb7c:	e051      	b.n	801cc22 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cb7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb80:	2b7f      	cmp	r3, #127	@ 0x7f
 801cb82:	d914      	bls.n	801cbae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cb84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb86:	2100      	movs	r1, #0
 801cb88:	4618      	mov	r0, r3
 801cb8a:	f001 f9bd 	bl	801df08 <ff_convert>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cb92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d004      	beq.n	801cba2 <create_name+0x246>
 801cb98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb9a:	3b80      	subs	r3, #128	@ 0x80
 801cb9c:	4a23      	ldr	r2, [pc, #140]	@ (801cc2c <create_name+0x2d0>)
 801cb9e:	5cd3      	ldrb	r3, [r2, r3]
 801cba0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cba6:	f043 0302 	orr.w	r3, r3, #2
 801cbaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cbae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d007      	beq.n	801cbc4 <create_name+0x268>
 801cbb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	481d      	ldr	r0, [pc, #116]	@ (801cc30 <create_name+0x2d4>)
 801cbba:	f7fe faac 	bl	801b116 <chk_chr>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d008      	beq.n	801cbd6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cbc4:	235f      	movs	r3, #95	@ 0x5f
 801cbc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbcc:	f043 0303 	orr.w	r3, r3, #3
 801cbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbd4:	e01b      	b.n	801cc0e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cbd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbd8:	2b40      	cmp	r3, #64	@ 0x40
 801cbda:	d909      	bls.n	801cbf0 <create_name+0x294>
 801cbdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbde:	2b5a      	cmp	r3, #90	@ 0x5a
 801cbe0:	d806      	bhi.n	801cbf0 <create_name+0x294>
					b |= 2;
 801cbe2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbe6:	f043 0302 	orr.w	r3, r3, #2
 801cbea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cbee:	e00e      	b.n	801cc0e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cbf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbf2:	2b60      	cmp	r3, #96	@ 0x60
 801cbf4:	d90b      	bls.n	801cc0e <create_name+0x2b2>
 801cbf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbf8:	2b7a      	cmp	r3, #122	@ 0x7a
 801cbfa:	d808      	bhi.n	801cc0e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cbfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc00:	f043 0301 	orr.w	r3, r3, #1
 801cc04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc0a:	3b20      	subs	r3, #32
 801cc0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cc0e:	6a3b      	ldr	r3, [r7, #32]
 801cc10:	1c5a      	adds	r2, r3, #1
 801cc12:	623a      	str	r2, [r7, #32]
 801cc14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cc16:	b2d1      	uxtb	r1, r2
 801cc18:	687a      	ldr	r2, [r7, #4]
 801cc1a:	4413      	add	r3, r2
 801cc1c:	460a      	mov	r2, r1
 801cc1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801cc22:	e763      	b.n	801caec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801cc24:	bf00      	nop
 801cc26:	e006      	b.n	801cc36 <create_name+0x2da>
 801cc28:	0801eb04 	.word	0x0801eb04
 801cc2c:	0801eb9c 	.word	0x0801eb9c
 801cc30:	0801eb10 	.word	0x0801eb10
			if (si > di) break;			/* No extension */
 801cc34:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801cc3c:	2be5      	cmp	r3, #229	@ 0xe5
 801cc3e:	d103      	bne.n	801cc48 <create_name+0x2ec>
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	2205      	movs	r2, #5
 801cc44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801cc48:	69fb      	ldr	r3, [r7, #28]
 801cc4a:	2b08      	cmp	r3, #8
 801cc4c:	d104      	bne.n	801cc58 <create_name+0x2fc>
 801cc4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc52:	009b      	lsls	r3, r3, #2
 801cc54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801cc58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc5c:	f003 030c 	and.w	r3, r3, #12
 801cc60:	2b0c      	cmp	r3, #12
 801cc62:	d005      	beq.n	801cc70 <create_name+0x314>
 801cc64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc68:	f003 0303 	and.w	r3, r3, #3
 801cc6c:	2b03      	cmp	r3, #3
 801cc6e:	d105      	bne.n	801cc7c <create_name+0x320>
 801cc70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc74:	f043 0302 	orr.w	r3, r3, #2
 801cc78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801cc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc80:	f003 0302 	and.w	r3, r3, #2
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d117      	bne.n	801ccb8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cc88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc8c:	f003 0303 	and.w	r3, r3, #3
 801cc90:	2b01      	cmp	r3, #1
 801cc92:	d105      	bne.n	801cca0 <create_name+0x344>
 801cc94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc98:	f043 0310 	orr.w	r3, r3, #16
 801cc9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cca4:	f003 030c 	and.w	r3, r3, #12
 801cca8:	2b04      	cmp	r3, #4
 801ccaa:	d105      	bne.n	801ccb8 <create_name+0x35c>
 801ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccb0:	f043 0308 	orr.w	r3, r3, #8
 801ccb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ccbe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ccc2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ccc4:	4618      	mov	r0, r3
 801ccc6:	3728      	adds	r7, #40	@ 0x28
 801ccc8:	46bd      	mov	sp, r7
 801ccca:	bd80      	pop	{r7, pc}

0801cccc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b086      	sub	sp, #24
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	6078      	str	r0, [r7, #4]
 801ccd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ccda:	693b      	ldr	r3, [r7, #16]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cce0:	e002      	b.n	801cce8 <follow_path+0x1c>
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	3301      	adds	r3, #1
 801cce6:	603b      	str	r3, [r7, #0]
 801cce8:	683b      	ldr	r3, [r7, #0]
 801ccea:	781b      	ldrb	r3, [r3, #0]
 801ccec:	2b2f      	cmp	r3, #47	@ 0x2f
 801ccee:	d0f8      	beq.n	801cce2 <follow_path+0x16>
 801ccf0:	683b      	ldr	r3, [r7, #0]
 801ccf2:	781b      	ldrb	r3, [r3, #0]
 801ccf4:	2b5c      	cmp	r3, #92	@ 0x5c
 801ccf6:	d0f4      	beq.n	801cce2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ccf8:	693b      	ldr	r3, [r7, #16]
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ccfe:	683b      	ldr	r3, [r7, #0]
 801cd00:	781b      	ldrb	r3, [r3, #0]
 801cd02:	2b1f      	cmp	r3, #31
 801cd04:	d80a      	bhi.n	801cd1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	2280      	movs	r2, #128	@ 0x80
 801cd0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cd0e:	2100      	movs	r1, #0
 801cd10:	6878      	ldr	r0, [r7, #4]
 801cd12:	f7fe ffaa 	bl	801bc6a <dir_sdi>
 801cd16:	4603      	mov	r3, r0
 801cd18:	75fb      	strb	r3, [r7, #23]
 801cd1a:	e048      	b.n	801cdae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cd1c:	463b      	mov	r3, r7
 801cd1e:	4619      	mov	r1, r3
 801cd20:	6878      	ldr	r0, [r7, #4]
 801cd22:	f7ff fe1b 	bl	801c95c <create_name>
 801cd26:	4603      	mov	r3, r0
 801cd28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cd2a:	7dfb      	ldrb	r3, [r7, #23]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d139      	bne.n	801cda4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cd30:	6878      	ldr	r0, [r7, #4]
 801cd32:	f7ff fc11 	bl	801c558 <dir_find>
 801cd36:	4603      	mov	r3, r0
 801cd38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cd40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cd42:	7dfb      	ldrb	r3, [r7, #23]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d00a      	beq.n	801cd5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cd48:	7dfb      	ldrb	r3, [r7, #23]
 801cd4a:	2b04      	cmp	r3, #4
 801cd4c:	d12c      	bne.n	801cda8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cd4e:	7afb      	ldrb	r3, [r7, #11]
 801cd50:	f003 0304 	and.w	r3, r3, #4
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d127      	bne.n	801cda8 <follow_path+0xdc>
 801cd58:	2305      	movs	r3, #5
 801cd5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cd5c:	e024      	b.n	801cda8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cd5e:	7afb      	ldrb	r3, [r7, #11]
 801cd60:	f003 0304 	and.w	r3, r3, #4
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d121      	bne.n	801cdac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cd68:	693b      	ldr	r3, [r7, #16]
 801cd6a:	799b      	ldrb	r3, [r3, #6]
 801cd6c:	f003 0310 	and.w	r3, r3, #16
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d102      	bne.n	801cd7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cd74:	2305      	movs	r3, #5
 801cd76:	75fb      	strb	r3, [r7, #23]
 801cd78:	e019      	b.n	801cdae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	695b      	ldr	r3, [r3, #20]
 801cd84:	68fa      	ldr	r2, [r7, #12]
 801cd86:	8992      	ldrh	r2, [r2, #12]
 801cd88:	fbb3 f0f2 	udiv	r0, r3, r2
 801cd8c:	fb00 f202 	mul.w	r2, r0, r2
 801cd90:	1a9b      	subs	r3, r3, r2
 801cd92:	440b      	add	r3, r1
 801cd94:	4619      	mov	r1, r3
 801cd96:	68f8      	ldr	r0, [r7, #12]
 801cd98:	f7ff f90d 	bl	801bfb6 <ld_clust>
 801cd9c:	4602      	mov	r2, r0
 801cd9e:	693b      	ldr	r3, [r7, #16]
 801cda0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cda2:	e7bb      	b.n	801cd1c <follow_path+0x50>
			if (res != FR_OK) break;
 801cda4:	bf00      	nop
 801cda6:	e002      	b.n	801cdae <follow_path+0xe2>
				break;
 801cda8:	bf00      	nop
 801cdaa:	e000      	b.n	801cdae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cdac:	bf00      	nop
			}
		}
	}

	return res;
 801cdae:	7dfb      	ldrb	r3, [r7, #23]
}
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	3718      	adds	r7, #24
 801cdb4:	46bd      	mov	sp, r7
 801cdb6:	bd80      	pop	{r7, pc}

0801cdb8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801cdb8:	b480      	push	{r7}
 801cdba:	b087      	sub	sp, #28
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801cdc0:	f04f 33ff 	mov.w	r3, #4294967295
 801cdc4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d031      	beq.n	801ce32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	617b      	str	r3, [r7, #20]
 801cdd4:	e002      	b.n	801cddc <get_ldnumber+0x24>
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	3301      	adds	r3, #1
 801cdda:	617b      	str	r3, [r7, #20]
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	781b      	ldrb	r3, [r3, #0]
 801cde0:	2b1f      	cmp	r3, #31
 801cde2:	d903      	bls.n	801cdec <get_ldnumber+0x34>
 801cde4:	697b      	ldr	r3, [r7, #20]
 801cde6:	781b      	ldrb	r3, [r3, #0]
 801cde8:	2b3a      	cmp	r3, #58	@ 0x3a
 801cdea:	d1f4      	bne.n	801cdd6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801cdec:	697b      	ldr	r3, [r7, #20]
 801cdee:	781b      	ldrb	r3, [r3, #0]
 801cdf0:	2b3a      	cmp	r3, #58	@ 0x3a
 801cdf2:	d11c      	bne.n	801ce2e <get_ldnumber+0x76>
			tp = *path;
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	1c5a      	adds	r2, r3, #1
 801cdfe:	60fa      	str	r2, [r7, #12]
 801ce00:	781b      	ldrb	r3, [r3, #0]
 801ce02:	3b30      	subs	r3, #48	@ 0x30
 801ce04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ce06:	68bb      	ldr	r3, [r7, #8]
 801ce08:	2b09      	cmp	r3, #9
 801ce0a:	d80e      	bhi.n	801ce2a <get_ldnumber+0x72>
 801ce0c:	68fa      	ldr	r2, [r7, #12]
 801ce0e:	697b      	ldr	r3, [r7, #20]
 801ce10:	429a      	cmp	r2, r3
 801ce12:	d10a      	bne.n	801ce2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d107      	bne.n	801ce2a <get_ldnumber+0x72>
					vol = (int)i;
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ce1e:	697b      	ldr	r3, [r7, #20]
 801ce20:	3301      	adds	r3, #1
 801ce22:	617b      	str	r3, [r7, #20]
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	697a      	ldr	r2, [r7, #20]
 801ce28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ce2a:	693b      	ldr	r3, [r7, #16]
 801ce2c:	e002      	b.n	801ce34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ce2e:	2300      	movs	r3, #0
 801ce30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ce32:	693b      	ldr	r3, [r7, #16]
}
 801ce34:	4618      	mov	r0, r3
 801ce36:	371c      	adds	r7, #28
 801ce38:	46bd      	mov	sp, r7
 801ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce3e:	4770      	bx	lr

0801ce40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ce40:	b580      	push	{r7, lr}
 801ce42:	b082      	sub	sp, #8
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
 801ce48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	2200      	movs	r2, #0
 801ce4e:	70da      	strb	r2, [r3, #3]
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	f04f 32ff 	mov.w	r2, #4294967295
 801ce56:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ce58:	6839      	ldr	r1, [r7, #0]
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f7fe fb26 	bl	801b4ac <move_window>
 801ce60:	4603      	mov	r3, r0
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d001      	beq.n	801ce6a <check_fs+0x2a>
 801ce66:	2304      	movs	r3, #4
 801ce68:	e038      	b.n	801cedc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	3338      	adds	r3, #56	@ 0x38
 801ce6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ce72:	4618      	mov	r0, r3
 801ce74:	f7fe f86a 	bl	801af4c <ld_word>
 801ce78:	4603      	mov	r3, r0
 801ce7a:	461a      	mov	r2, r3
 801ce7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801ce80:	429a      	cmp	r2, r3
 801ce82:	d001      	beq.n	801ce88 <check_fs+0x48>
 801ce84:	2303      	movs	r3, #3
 801ce86:	e029      	b.n	801cedc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ce8e:	2be9      	cmp	r3, #233	@ 0xe9
 801ce90:	d009      	beq.n	801cea6 <check_fs+0x66>
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ce98:	2beb      	cmp	r3, #235	@ 0xeb
 801ce9a:	d11e      	bne.n	801ceda <check_fs+0x9a>
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cea2:	2b90      	cmp	r3, #144	@ 0x90
 801cea4:	d119      	bne.n	801ceda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	3338      	adds	r3, #56	@ 0x38
 801ceaa:	3336      	adds	r3, #54	@ 0x36
 801ceac:	4618      	mov	r0, r3
 801ceae:	f7fe f865 	bl	801af7c <ld_dword>
 801ceb2:	4603      	mov	r3, r0
 801ceb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801ceb8:	4a0a      	ldr	r2, [pc, #40]	@ (801cee4 <check_fs+0xa4>)
 801ceba:	4293      	cmp	r3, r2
 801cebc:	d101      	bne.n	801cec2 <check_fs+0x82>
 801cebe:	2300      	movs	r3, #0
 801cec0:	e00c      	b.n	801cedc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	3338      	adds	r3, #56	@ 0x38
 801cec6:	3352      	adds	r3, #82	@ 0x52
 801cec8:	4618      	mov	r0, r3
 801ceca:	f7fe f857 	bl	801af7c <ld_dword>
 801cece:	4603      	mov	r3, r0
 801ced0:	4a05      	ldr	r2, [pc, #20]	@ (801cee8 <check_fs+0xa8>)
 801ced2:	4293      	cmp	r3, r2
 801ced4:	d101      	bne.n	801ceda <check_fs+0x9a>
 801ced6:	2300      	movs	r3, #0
 801ced8:	e000      	b.n	801cedc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801ceda:	2302      	movs	r3, #2
}
 801cedc:	4618      	mov	r0, r3
 801cede:	3708      	adds	r7, #8
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd80      	pop	{r7, pc}
 801cee4:	00544146 	.word	0x00544146
 801cee8:	33544146 	.word	0x33544146

0801ceec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b096      	sub	sp, #88	@ 0x58
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	60f8      	str	r0, [r7, #12]
 801cef4:	60b9      	str	r1, [r7, #8]
 801cef6:	4613      	mov	r3, r2
 801cef8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cefa:	68bb      	ldr	r3, [r7, #8]
 801cefc:	2200      	movs	r2, #0
 801cefe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cf00:	68f8      	ldr	r0, [r7, #12]
 801cf02:	f7ff ff59 	bl	801cdb8 <get_ldnumber>
 801cf06:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cf08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	da01      	bge.n	801cf12 <find_volume+0x26>
 801cf0e:	230b      	movs	r3, #11
 801cf10:	e265      	b.n	801d3de <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cf12:	4a9f      	ldr	r2, [pc, #636]	@ (801d190 <find_volume+0x2a4>)
 801cf14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cf1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d101      	bne.n	801cf26 <find_volume+0x3a>
 801cf22:	230c      	movs	r3, #12
 801cf24:	e25b      	b.n	801d3de <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cf26:	68bb      	ldr	r3, [r7, #8]
 801cf28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cf2c:	79fb      	ldrb	r3, [r7, #7]
 801cf2e:	f023 0301 	bic.w	r3, r3, #1
 801cf32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cf34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf36:	781b      	ldrb	r3, [r3, #0]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d01a      	beq.n	801cf72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf3e:	785b      	ldrb	r3, [r3, #1]
 801cf40:	4618      	mov	r0, r3
 801cf42:	f7fd ff63 	bl	801ae0c <disk_status>
 801cf46:	4603      	mov	r3, r0
 801cf48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cf4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf50:	f003 0301 	and.w	r3, r3, #1
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d10c      	bne.n	801cf72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cf58:	79fb      	ldrb	r3, [r7, #7]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d007      	beq.n	801cf6e <find_volume+0x82>
 801cf5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf62:	f003 0304 	and.w	r3, r3, #4
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d001      	beq.n	801cf6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cf6a:	230a      	movs	r3, #10
 801cf6c:	e237      	b.n	801d3de <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cf6e:	2300      	movs	r3, #0
 801cf70:	e235      	b.n	801d3de <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf74:	2200      	movs	r2, #0
 801cf76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cf78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf7a:	b2da      	uxtb	r2, r3
 801cf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf82:	785b      	ldrb	r3, [r3, #1]
 801cf84:	4618      	mov	r0, r3
 801cf86:	f7fd ff5b 	bl	801ae40 <disk_initialize>
 801cf8a:	4603      	mov	r3, r0
 801cf8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cf90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf94:	f003 0301 	and.w	r3, r3, #1
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d001      	beq.n	801cfa0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cf9c:	2303      	movs	r3, #3
 801cf9e:	e21e      	b.n	801d3de <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cfa0:	79fb      	ldrb	r3, [r7, #7]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d007      	beq.n	801cfb6 <find_volume+0xca>
 801cfa6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfaa:	f003 0304 	and.w	r3, r3, #4
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d001      	beq.n	801cfb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cfb2:	230a      	movs	r3, #10
 801cfb4:	e213      	b.n	801d3de <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb8:	7858      	ldrb	r0, [r3, #1]
 801cfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbc:	330c      	adds	r3, #12
 801cfbe:	461a      	mov	r2, r3
 801cfc0:	2102      	movs	r1, #2
 801cfc2:	f7fd ffa5 	bl	801af10 <disk_ioctl>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d001      	beq.n	801cfd0 <find_volume+0xe4>
 801cfcc:	2301      	movs	r3, #1
 801cfce:	e206      	b.n	801d3de <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd2:	899b      	ldrh	r3, [r3, #12]
 801cfd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cfd8:	d80d      	bhi.n	801cff6 <find_volume+0x10a>
 801cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfdc:	899b      	ldrh	r3, [r3, #12]
 801cfde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cfe2:	d308      	bcc.n	801cff6 <find_volume+0x10a>
 801cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfe6:	899b      	ldrh	r3, [r3, #12]
 801cfe8:	461a      	mov	r2, r3
 801cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfec:	899b      	ldrh	r3, [r3, #12]
 801cfee:	3b01      	subs	r3, #1
 801cff0:	4013      	ands	r3, r2
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d001      	beq.n	801cffa <find_volume+0x10e>
 801cff6:	2301      	movs	r3, #1
 801cff8:	e1f1      	b.n	801d3de <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801cffa:	2300      	movs	r3, #0
 801cffc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801cffe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d000:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d002:	f7ff ff1d 	bl	801ce40 <check_fs>
 801d006:	4603      	mov	r3, r0
 801d008:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d00c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d010:	2b02      	cmp	r3, #2
 801d012:	d149      	bne.n	801d0a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d014:	2300      	movs	r3, #0
 801d016:	643b      	str	r3, [r7, #64]	@ 0x40
 801d018:	e01e      	b.n	801d058 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d01c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d022:	011b      	lsls	r3, r3, #4
 801d024:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d028:	4413      	add	r3, r2
 801d02a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d02e:	3304      	adds	r3, #4
 801d030:	781b      	ldrb	r3, [r3, #0]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d006      	beq.n	801d044 <find_volume+0x158>
 801d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d038:	3308      	adds	r3, #8
 801d03a:	4618      	mov	r0, r3
 801d03c:	f7fd ff9e 	bl	801af7c <ld_dword>
 801d040:	4602      	mov	r2, r0
 801d042:	e000      	b.n	801d046 <find_volume+0x15a>
 801d044:	2200      	movs	r2, #0
 801d046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d048:	009b      	lsls	r3, r3, #2
 801d04a:	3358      	adds	r3, #88	@ 0x58
 801d04c:	443b      	add	r3, r7
 801d04e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d054:	3301      	adds	r3, #1
 801d056:	643b      	str	r3, [r7, #64]	@ 0x40
 801d058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d05a:	2b03      	cmp	r3, #3
 801d05c:	d9dd      	bls.n	801d01a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d05e:	2300      	movs	r3, #0
 801d060:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d064:	2b00      	cmp	r3, #0
 801d066:	d002      	beq.n	801d06e <find_volume+0x182>
 801d068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d06a:	3b01      	subs	r3, #1
 801d06c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d06e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d070:	009b      	lsls	r3, r3, #2
 801d072:	3358      	adds	r3, #88	@ 0x58
 801d074:	443b      	add	r3, r7
 801d076:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d07a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d07c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d005      	beq.n	801d08e <find_volume+0x1a2>
 801d082:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d084:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d086:	f7ff fedb 	bl	801ce40 <check_fs>
 801d08a:	4603      	mov	r3, r0
 801d08c:	e000      	b.n	801d090 <find_volume+0x1a4>
 801d08e:	2303      	movs	r3, #3
 801d090:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d098:	2b01      	cmp	r3, #1
 801d09a:	d905      	bls.n	801d0a8 <find_volume+0x1bc>
 801d09c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d09e:	3301      	adds	r3, #1
 801d0a0:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0a4:	2b03      	cmp	r3, #3
 801d0a6:	d9e2      	bls.n	801d06e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0ac:	2b04      	cmp	r3, #4
 801d0ae:	d101      	bne.n	801d0b4 <find_volume+0x1c8>
 801d0b0:	2301      	movs	r3, #1
 801d0b2:	e194      	b.n	801d3de <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d0b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0b8:	2b01      	cmp	r3, #1
 801d0ba:	d901      	bls.n	801d0c0 <find_volume+0x1d4>
 801d0bc:	230d      	movs	r3, #13
 801d0be:	e18e      	b.n	801d3de <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0c2:	3338      	adds	r3, #56	@ 0x38
 801d0c4:	330b      	adds	r3, #11
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	f7fd ff40 	bl	801af4c <ld_word>
 801d0cc:	4603      	mov	r3, r0
 801d0ce:	461a      	mov	r2, r3
 801d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d2:	899b      	ldrh	r3, [r3, #12]
 801d0d4:	429a      	cmp	r2, r3
 801d0d6:	d001      	beq.n	801d0dc <find_volume+0x1f0>
 801d0d8:	230d      	movs	r3, #13
 801d0da:	e180      	b.n	801d3de <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0de:	3338      	adds	r3, #56	@ 0x38
 801d0e0:	3316      	adds	r3, #22
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7fd ff32 	bl	801af4c <ld_word>
 801d0e8:	4603      	mov	r3, r0
 801d0ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d106      	bne.n	801d100 <find_volume+0x214>
 801d0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0f4:	3338      	adds	r3, #56	@ 0x38
 801d0f6:	3324      	adds	r3, #36	@ 0x24
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7fd ff3f 	bl	801af7c <ld_dword>
 801d0fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d104:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d108:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d10e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d112:	789b      	ldrb	r3, [r3, #2]
 801d114:	2b01      	cmp	r3, #1
 801d116:	d005      	beq.n	801d124 <find_volume+0x238>
 801d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d11a:	789b      	ldrb	r3, [r3, #2]
 801d11c:	2b02      	cmp	r3, #2
 801d11e:	d001      	beq.n	801d124 <find_volume+0x238>
 801d120:	230d      	movs	r3, #13
 801d122:	e15c      	b.n	801d3de <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d126:	789b      	ldrb	r3, [r3, #2]
 801d128:	461a      	mov	r2, r3
 801d12a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d12c:	fb02 f303 	mul.w	r3, r2, r3
 801d130:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d134:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d138:	461a      	mov	r2, r3
 801d13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d13c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d140:	895b      	ldrh	r3, [r3, #10]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d008      	beq.n	801d158 <find_volume+0x26c>
 801d146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d148:	895b      	ldrh	r3, [r3, #10]
 801d14a:	461a      	mov	r2, r3
 801d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d14e:	895b      	ldrh	r3, [r3, #10]
 801d150:	3b01      	subs	r3, #1
 801d152:	4013      	ands	r3, r2
 801d154:	2b00      	cmp	r3, #0
 801d156:	d001      	beq.n	801d15c <find_volume+0x270>
 801d158:	230d      	movs	r3, #13
 801d15a:	e140      	b.n	801d3de <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d15e:	3338      	adds	r3, #56	@ 0x38
 801d160:	3311      	adds	r3, #17
 801d162:	4618      	mov	r0, r3
 801d164:	f7fd fef2 	bl	801af4c <ld_word>
 801d168:	4603      	mov	r3, r0
 801d16a:	461a      	mov	r2, r3
 801d16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d16e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d172:	891b      	ldrh	r3, [r3, #8]
 801d174:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d176:	8992      	ldrh	r2, [r2, #12]
 801d178:	0952      	lsrs	r2, r2, #5
 801d17a:	b292      	uxth	r2, r2
 801d17c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d180:	fb01 f202 	mul.w	r2, r1, r2
 801d184:	1a9b      	subs	r3, r3, r2
 801d186:	b29b      	uxth	r3, r3
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d003      	beq.n	801d194 <find_volume+0x2a8>
 801d18c:	230d      	movs	r3, #13
 801d18e:	e126      	b.n	801d3de <find_volume+0x4f2>
 801d190:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d196:	3338      	adds	r3, #56	@ 0x38
 801d198:	3313      	adds	r3, #19
 801d19a:	4618      	mov	r0, r3
 801d19c:	f7fd fed6 	bl	801af4c <ld_word>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d1a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d106      	bne.n	801d1b8 <find_volume+0x2cc>
 801d1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ac:	3338      	adds	r3, #56	@ 0x38
 801d1ae:	3320      	adds	r3, #32
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f7fd fee3 	bl	801af7c <ld_dword>
 801d1b6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ba:	3338      	adds	r3, #56	@ 0x38
 801d1bc:	330e      	adds	r3, #14
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f7fd fec4 	bl	801af4c <ld_word>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d1c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d101      	bne.n	801d1d2 <find_volume+0x2e6>
 801d1ce:	230d      	movs	r3, #13
 801d1d0:	e105      	b.n	801d3de <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d1d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1d6:	4413      	add	r3, r2
 801d1d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1da:	8911      	ldrh	r1, [r2, #8]
 801d1dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1de:	8992      	ldrh	r2, [r2, #12]
 801d1e0:	0952      	lsrs	r2, r2, #5
 801d1e2:	b292      	uxth	r2, r2
 801d1e4:	fbb1 f2f2 	udiv	r2, r1, r2
 801d1e8:	b292      	uxth	r2, r2
 801d1ea:	4413      	add	r3, r2
 801d1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d1ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1f2:	429a      	cmp	r2, r3
 801d1f4:	d201      	bcs.n	801d1fa <find_volume+0x30e>
 801d1f6:	230d      	movs	r3, #13
 801d1f8:	e0f1      	b.n	801d3de <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d1fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1fe:	1ad3      	subs	r3, r2, r3
 801d200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d202:	8952      	ldrh	r2, [r2, #10]
 801d204:	fbb3 f3f2 	udiv	r3, r3, r2
 801d208:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d101      	bne.n	801d214 <find_volume+0x328>
 801d210:	230d      	movs	r3, #13
 801d212:	e0e4      	b.n	801d3de <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d214:	2303      	movs	r3, #3
 801d216:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d21c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d220:	4293      	cmp	r3, r2
 801d222:	d802      	bhi.n	801d22a <find_volume+0x33e>
 801d224:	2302      	movs	r3, #2
 801d226:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d22c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d230:	4293      	cmp	r3, r2
 801d232:	d802      	bhi.n	801d23a <find_volume+0x34e>
 801d234:	2301      	movs	r3, #1
 801d236:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d23c:	1c9a      	adds	r2, r3, #2
 801d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d240:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d244:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d246:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d248:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d24a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d24c:	441a      	add	r2, r3
 801d24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d250:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d256:	441a      	add	r2, r3
 801d258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d25a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d25c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d260:	2b03      	cmp	r3, #3
 801d262:	d11e      	bne.n	801d2a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d266:	3338      	adds	r3, #56	@ 0x38
 801d268:	332a      	adds	r3, #42	@ 0x2a
 801d26a:	4618      	mov	r0, r3
 801d26c:	f7fd fe6e 	bl	801af4c <ld_word>
 801d270:	4603      	mov	r3, r0
 801d272:	2b00      	cmp	r3, #0
 801d274:	d001      	beq.n	801d27a <find_volume+0x38e>
 801d276:	230d      	movs	r3, #13
 801d278:	e0b1      	b.n	801d3de <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d27c:	891b      	ldrh	r3, [r3, #8]
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d001      	beq.n	801d286 <find_volume+0x39a>
 801d282:	230d      	movs	r3, #13
 801d284:	e0ab      	b.n	801d3de <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d288:	3338      	adds	r3, #56	@ 0x38
 801d28a:	332c      	adds	r3, #44	@ 0x2c
 801d28c:	4618      	mov	r0, r3
 801d28e:	f7fd fe75 	bl	801af7c <ld_dword>
 801d292:	4602      	mov	r2, r0
 801d294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d296:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d29a:	69db      	ldr	r3, [r3, #28]
 801d29c:	009b      	lsls	r3, r3, #2
 801d29e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d2a0:	e01f      	b.n	801d2e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2a4:	891b      	ldrh	r3, [r3, #8]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d101      	bne.n	801d2ae <find_volume+0x3c2>
 801d2aa:	230d      	movs	r3, #13
 801d2ac:	e097      	b.n	801d3de <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2b4:	441a      	add	r2, r3
 801d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2b8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d2ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2be:	2b02      	cmp	r3, #2
 801d2c0:	d103      	bne.n	801d2ca <find_volume+0x3de>
 801d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2c4:	69db      	ldr	r3, [r3, #28]
 801d2c6:	005b      	lsls	r3, r3, #1
 801d2c8:	e00a      	b.n	801d2e0 <find_volume+0x3f4>
 801d2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2cc:	69da      	ldr	r2, [r3, #28]
 801d2ce:	4613      	mov	r3, r2
 801d2d0:	005b      	lsls	r3, r3, #1
 801d2d2:	4413      	add	r3, r2
 801d2d4:	085a      	lsrs	r2, r3, #1
 801d2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d8:	69db      	ldr	r3, [r3, #28]
 801d2da:	f003 0301 	and.w	r3, r3, #1
 801d2de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d2e0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e4:	6a1a      	ldr	r2, [r3, #32]
 801d2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e8:	899b      	ldrh	r3, [r3, #12]
 801d2ea:	4619      	mov	r1, r3
 801d2ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d2ee:	440b      	add	r3, r1
 801d2f0:	3b01      	subs	r3, #1
 801d2f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d2f4:	8989      	ldrh	r1, [r1, #12]
 801d2f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801d2fa:	429a      	cmp	r2, r3
 801d2fc:	d201      	bcs.n	801d302 <find_volume+0x416>
 801d2fe:	230d      	movs	r3, #13
 801d300:	e06d      	b.n	801d3de <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d304:	f04f 32ff 	mov.w	r2, #4294967295
 801d308:	619a      	str	r2, [r3, #24]
 801d30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d30c:	699a      	ldr	r2, [r3, #24]
 801d30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d310:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d314:	2280      	movs	r2, #128	@ 0x80
 801d316:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d318:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d31c:	2b03      	cmp	r3, #3
 801d31e:	d149      	bne.n	801d3b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d322:	3338      	adds	r3, #56	@ 0x38
 801d324:	3330      	adds	r3, #48	@ 0x30
 801d326:	4618      	mov	r0, r3
 801d328:	f7fd fe10 	bl	801af4c <ld_word>
 801d32c:	4603      	mov	r3, r0
 801d32e:	2b01      	cmp	r3, #1
 801d330:	d140      	bne.n	801d3b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d334:	3301      	adds	r3, #1
 801d336:	4619      	mov	r1, r3
 801d338:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d33a:	f7fe f8b7 	bl	801b4ac <move_window>
 801d33e:	4603      	mov	r3, r0
 801d340:	2b00      	cmp	r3, #0
 801d342:	d137      	bne.n	801d3b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d346:	2200      	movs	r2, #0
 801d348:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d34c:	3338      	adds	r3, #56	@ 0x38
 801d34e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d352:	4618      	mov	r0, r3
 801d354:	f7fd fdfa 	bl	801af4c <ld_word>
 801d358:	4603      	mov	r3, r0
 801d35a:	461a      	mov	r2, r3
 801d35c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d360:	429a      	cmp	r2, r3
 801d362:	d127      	bne.n	801d3b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d366:	3338      	adds	r3, #56	@ 0x38
 801d368:	4618      	mov	r0, r3
 801d36a:	f7fd fe07 	bl	801af7c <ld_dword>
 801d36e:	4603      	mov	r3, r0
 801d370:	4a1d      	ldr	r2, [pc, #116]	@ (801d3e8 <find_volume+0x4fc>)
 801d372:	4293      	cmp	r3, r2
 801d374:	d11e      	bne.n	801d3b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d378:	3338      	adds	r3, #56	@ 0x38
 801d37a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d37e:	4618      	mov	r0, r3
 801d380:	f7fd fdfc 	bl	801af7c <ld_dword>
 801d384:	4603      	mov	r3, r0
 801d386:	4a19      	ldr	r2, [pc, #100]	@ (801d3ec <find_volume+0x500>)
 801d388:	4293      	cmp	r3, r2
 801d38a:	d113      	bne.n	801d3b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d38e:	3338      	adds	r3, #56	@ 0x38
 801d390:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d394:	4618      	mov	r0, r3
 801d396:	f7fd fdf1 	bl	801af7c <ld_dword>
 801d39a:	4602      	mov	r2, r0
 801d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d39e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a2:	3338      	adds	r3, #56	@ 0x38
 801d3a4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f7fd fde7 	bl	801af7c <ld_dword>
 801d3ae:	4602      	mov	r2, r0
 801d3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3b6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d3ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d3bc:	4b0c      	ldr	r3, [pc, #48]	@ (801d3f0 <find_volume+0x504>)
 801d3be:	881b      	ldrh	r3, [r3, #0]
 801d3c0:	3301      	adds	r3, #1
 801d3c2:	b29a      	uxth	r2, r3
 801d3c4:	4b0a      	ldr	r3, [pc, #40]	@ (801d3f0 <find_volume+0x504>)
 801d3c6:	801a      	strh	r2, [r3, #0]
 801d3c8:	4b09      	ldr	r3, [pc, #36]	@ (801d3f0 <find_volume+0x504>)
 801d3ca:	881a      	ldrh	r2, [r3, #0]
 801d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3d2:	4a08      	ldr	r2, [pc, #32]	@ (801d3f4 <find_volume+0x508>)
 801d3d4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d3d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3d8:	f7fe f800 	bl	801b3dc <clear_lock>
#endif
	return FR_OK;
 801d3dc:	2300      	movs	r3, #0
}
 801d3de:	4618      	mov	r0, r3
 801d3e0:	3758      	adds	r7, #88	@ 0x58
 801d3e2:	46bd      	mov	sp, r7
 801d3e4:	bd80      	pop	{r7, pc}
 801d3e6:	bf00      	nop
 801d3e8:	41615252 	.word	0x41615252
 801d3ec:	61417272 	.word	0x61417272
 801d3f0:	24000554 	.word	0x24000554
 801d3f4:	24000568 	.word	0x24000568

0801d3f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d3f8:	b580      	push	{r7, lr}
 801d3fa:	b084      	sub	sp, #16
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d402:	2309      	movs	r3, #9
 801d404:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d01c      	beq.n	801d446 <validate+0x4e>
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	2b00      	cmp	r3, #0
 801d412:	d018      	beq.n	801d446 <validate+0x4e>
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	781b      	ldrb	r3, [r3, #0]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d013      	beq.n	801d446 <validate+0x4e>
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	889a      	ldrh	r2, [r3, #4]
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	88db      	ldrh	r3, [r3, #6]
 801d428:	429a      	cmp	r2, r3
 801d42a:	d10c      	bne.n	801d446 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	785b      	ldrb	r3, [r3, #1]
 801d432:	4618      	mov	r0, r3
 801d434:	f7fd fcea 	bl	801ae0c <disk_status>
 801d438:	4603      	mov	r3, r0
 801d43a:	f003 0301 	and.w	r3, r3, #1
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d101      	bne.n	801d446 <validate+0x4e>
			res = FR_OK;
 801d442:	2300      	movs	r3, #0
 801d444:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d446:	7bfb      	ldrb	r3, [r7, #15]
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d102      	bne.n	801d452 <validate+0x5a>
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	e000      	b.n	801d454 <validate+0x5c>
 801d452:	2300      	movs	r3, #0
 801d454:	683a      	ldr	r2, [r7, #0]
 801d456:	6013      	str	r3, [r2, #0]
	return res;
 801d458:	7bfb      	ldrb	r3, [r7, #15]
}
 801d45a:	4618      	mov	r0, r3
 801d45c:	3710      	adds	r7, #16
 801d45e:	46bd      	mov	sp, r7
 801d460:	bd80      	pop	{r7, pc}
	...

0801d464 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d464:	b580      	push	{r7, lr}
 801d466:	b088      	sub	sp, #32
 801d468:	af00      	add	r7, sp, #0
 801d46a:	60f8      	str	r0, [r7, #12]
 801d46c:	60b9      	str	r1, [r7, #8]
 801d46e:	4613      	mov	r3, r2
 801d470:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d472:	68bb      	ldr	r3, [r7, #8]
 801d474:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d476:	f107 0310 	add.w	r3, r7, #16
 801d47a:	4618      	mov	r0, r3
 801d47c:	f7ff fc9c 	bl	801cdb8 <get_ldnumber>
 801d480:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d482:	69fb      	ldr	r3, [r7, #28]
 801d484:	2b00      	cmp	r3, #0
 801d486:	da01      	bge.n	801d48c <f_mount+0x28>
 801d488:	230b      	movs	r3, #11
 801d48a:	e02b      	b.n	801d4e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d48c:	4a17      	ldr	r2, [pc, #92]	@ (801d4ec <f_mount+0x88>)
 801d48e:	69fb      	ldr	r3, [r7, #28]
 801d490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d494:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d496:	69bb      	ldr	r3, [r7, #24]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d005      	beq.n	801d4a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d49c:	69b8      	ldr	r0, [r7, #24]
 801d49e:	f7fd ff9d 	bl	801b3dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d4a2:	69bb      	ldr	r3, [r7, #24]
 801d4a4:	2200      	movs	r2, #0
 801d4a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d002      	beq.n	801d4b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d4b4:	68fa      	ldr	r2, [r7, #12]
 801d4b6:	490d      	ldr	r1, [pc, #52]	@ (801d4ec <f_mount+0x88>)
 801d4b8:	69fb      	ldr	r3, [r7, #28]
 801d4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d002      	beq.n	801d4ca <f_mount+0x66>
 801d4c4:	79fb      	ldrb	r3, [r7, #7]
 801d4c6:	2b01      	cmp	r3, #1
 801d4c8:	d001      	beq.n	801d4ce <f_mount+0x6a>
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	e00a      	b.n	801d4e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d4ce:	f107 010c 	add.w	r1, r7, #12
 801d4d2:	f107 0308 	add.w	r3, r7, #8
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f7ff fd07 	bl	801ceec <find_volume>
 801d4de:	4603      	mov	r3, r0
 801d4e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	3720      	adds	r7, #32
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	bd80      	pop	{r7, pc}
 801d4ec:	24000550 	.word	0x24000550

0801d4f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b09a      	sub	sp, #104	@ 0x68
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	60f8      	str	r0, [r7, #12]
 801d4f8:	60b9      	str	r1, [r7, #8]
 801d4fa:	4613      	mov	r3, r2
 801d4fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	2b00      	cmp	r3, #0
 801d502:	d101      	bne.n	801d508 <f_open+0x18>
 801d504:	2309      	movs	r3, #9
 801d506:	e1b7      	b.n	801d878 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d508:	79fb      	ldrb	r3, [r7, #7]
 801d50a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d50e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d510:	79fa      	ldrb	r2, [r7, #7]
 801d512:	f107 0114 	add.w	r1, r7, #20
 801d516:	f107 0308 	add.w	r3, r7, #8
 801d51a:	4618      	mov	r0, r3
 801d51c:	f7ff fce6 	bl	801ceec <find_volume>
 801d520:	4603      	mov	r3, r0
 801d522:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d526:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	f040 819b 	bne.w	801d866 <f_open+0x376>
		dj.obj.fs = fs;
 801d530:	697b      	ldr	r3, [r7, #20]
 801d532:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d534:	68ba      	ldr	r2, [r7, #8]
 801d536:	f107 0318 	add.w	r3, r7, #24
 801d53a:	4611      	mov	r1, r2
 801d53c:	4618      	mov	r0, r3
 801d53e:	f7ff fbc5 	bl	801cccc <follow_path>
 801d542:	4603      	mov	r3, r0
 801d544:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d548:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d118      	bne.n	801d582 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d550:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d554:	b25b      	sxtb	r3, r3
 801d556:	2b00      	cmp	r3, #0
 801d558:	da03      	bge.n	801d562 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d55a:	2306      	movs	r3, #6
 801d55c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d560:	e00f      	b.n	801d582 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d562:	79fb      	ldrb	r3, [r7, #7]
 801d564:	2b01      	cmp	r3, #1
 801d566:	bf8c      	ite	hi
 801d568:	2301      	movhi	r3, #1
 801d56a:	2300      	movls	r3, #0
 801d56c:	b2db      	uxtb	r3, r3
 801d56e:	461a      	mov	r2, r3
 801d570:	f107 0318 	add.w	r3, r7, #24
 801d574:	4611      	mov	r1, r2
 801d576:	4618      	mov	r0, r3
 801d578:	f7fd fde8 	bl	801b14c <chk_lock>
 801d57c:	4603      	mov	r3, r0
 801d57e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d582:	79fb      	ldrb	r3, [r7, #7]
 801d584:	f003 031c 	and.w	r3, r3, #28
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d07f      	beq.n	801d68c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d58c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d590:	2b00      	cmp	r3, #0
 801d592:	d017      	beq.n	801d5c4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d594:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d598:	2b04      	cmp	r3, #4
 801d59a:	d10e      	bne.n	801d5ba <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d59c:	f7fd fe32 	bl	801b204 <enq_lock>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d006      	beq.n	801d5b4 <f_open+0xc4>
 801d5a6:	f107 0318 	add.w	r3, r7, #24
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7ff f894 	bl	801c6d8 <dir_register>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	e000      	b.n	801d5b6 <f_open+0xc6>
 801d5b4:	2312      	movs	r3, #18
 801d5b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d5ba:	79fb      	ldrb	r3, [r7, #7]
 801d5bc:	f043 0308 	orr.w	r3, r3, #8
 801d5c0:	71fb      	strb	r3, [r7, #7]
 801d5c2:	e010      	b.n	801d5e6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d5c4:	7fbb      	ldrb	r3, [r7, #30]
 801d5c6:	f003 0311 	and.w	r3, r3, #17
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d003      	beq.n	801d5d6 <f_open+0xe6>
					res = FR_DENIED;
 801d5ce:	2307      	movs	r3, #7
 801d5d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5d4:	e007      	b.n	801d5e6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d5d6:	79fb      	ldrb	r3, [r7, #7]
 801d5d8:	f003 0304 	and.w	r3, r3, #4
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d002      	beq.n	801d5e6 <f_open+0xf6>
 801d5e0:	2308      	movs	r3, #8
 801d5e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d5e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d168      	bne.n	801d6c0 <f_open+0x1d0>
 801d5ee:	79fb      	ldrb	r3, [r7, #7]
 801d5f0:	f003 0308 	and.w	r3, r3, #8
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d063      	beq.n	801d6c0 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d5f8:	f7fd fbaa 	bl	801ad50 <get_fattime>
 801d5fc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d600:	330e      	adds	r3, #14
 801d602:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d604:	4618      	mov	r0, r3
 801d606:	f7fd fcf7 	bl	801aff8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d60c:	3316      	adds	r3, #22
 801d60e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d610:	4618      	mov	r0, r3
 801d612:	f7fd fcf1 	bl	801aff8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d618:	330b      	adds	r3, #11
 801d61a:	2220      	movs	r2, #32
 801d61c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d61e:	697b      	ldr	r3, [r7, #20]
 801d620:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d622:	4611      	mov	r1, r2
 801d624:	4618      	mov	r0, r3
 801d626:	f7fe fcc6 	bl	801bfb6 <ld_clust>
 801d62a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d62c:	697b      	ldr	r3, [r7, #20]
 801d62e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d630:	2200      	movs	r2, #0
 801d632:	4618      	mov	r0, r3
 801d634:	f7fe fcde 	bl	801bff4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d63a:	331c      	adds	r3, #28
 801d63c:	2100      	movs	r1, #0
 801d63e:	4618      	mov	r0, r3
 801d640:	f7fd fcda 	bl	801aff8 <st_dword>
					fs->wflag = 1;
 801d644:	697b      	ldr	r3, [r7, #20]
 801d646:	2201      	movs	r2, #1
 801d648:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d037      	beq.n	801d6c0 <f_open+0x1d0>
						dw = fs->winsect;
 801d650:	697b      	ldr	r3, [r7, #20]
 801d652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d654:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d656:	f107 0318 	add.w	r3, r7, #24
 801d65a:	2200      	movs	r2, #0
 801d65c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d65e:	4618      	mov	r0, r3
 801d660:	f7fe f9ce 	bl	801ba00 <remove_chain>
 801d664:	4603      	mov	r3, r0
 801d666:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d66a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d126      	bne.n	801d6c0 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d672:	697b      	ldr	r3, [r7, #20]
 801d674:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d676:	4618      	mov	r0, r3
 801d678:	f7fd ff18 	bl	801b4ac <move_window>
 801d67c:	4603      	mov	r3, r0
 801d67e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d682:	697b      	ldr	r3, [r7, #20]
 801d684:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d686:	3a01      	subs	r2, #1
 801d688:	615a      	str	r2, [r3, #20]
 801d68a:	e019      	b.n	801d6c0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d68c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d690:	2b00      	cmp	r3, #0
 801d692:	d115      	bne.n	801d6c0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d694:	7fbb      	ldrb	r3, [r7, #30]
 801d696:	f003 0310 	and.w	r3, r3, #16
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d003      	beq.n	801d6a6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d69e:	2304      	movs	r3, #4
 801d6a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d6a4:	e00c      	b.n	801d6c0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d6a6:	79fb      	ldrb	r3, [r7, #7]
 801d6a8:	f003 0302 	and.w	r3, r3, #2
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	d007      	beq.n	801d6c0 <f_open+0x1d0>
 801d6b0:	7fbb      	ldrb	r3, [r7, #30]
 801d6b2:	f003 0301 	and.w	r3, r3, #1
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d002      	beq.n	801d6c0 <f_open+0x1d0>
						res = FR_DENIED;
 801d6ba:	2307      	movs	r3, #7
 801d6bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d6c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d126      	bne.n	801d716 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d6c8:	79fb      	ldrb	r3, [r7, #7]
 801d6ca:	f003 0308 	and.w	r3, r3, #8
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d003      	beq.n	801d6da <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d6d2:	79fb      	ldrb	r3, [r7, #7]
 801d6d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d6d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d6da:	697b      	ldr	r3, [r7, #20]
 801d6dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d6e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d6e8:	79fb      	ldrb	r3, [r7, #7]
 801d6ea:	2b01      	cmp	r3, #1
 801d6ec:	bf8c      	ite	hi
 801d6ee:	2301      	movhi	r3, #1
 801d6f0:	2300      	movls	r3, #0
 801d6f2:	b2db      	uxtb	r3, r3
 801d6f4:	461a      	mov	r2, r3
 801d6f6:	f107 0318 	add.w	r3, r7, #24
 801d6fa:	4611      	mov	r1, r2
 801d6fc:	4618      	mov	r0, r3
 801d6fe:	f7fd fda3 	bl	801b248 <inc_lock>
 801d702:	4602      	mov	r2, r0
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	691b      	ldr	r3, [r3, #16]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d102      	bne.n	801d716 <f_open+0x226>
 801d710:	2302      	movs	r3, #2
 801d712:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d716:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	f040 80a3 	bne.w	801d866 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d720:	697b      	ldr	r3, [r7, #20]
 801d722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d724:	4611      	mov	r1, r2
 801d726:	4618      	mov	r0, r3
 801d728:	f7fe fc45 	bl	801bfb6 <ld_clust>
 801d72c:	4602      	mov	r2, r0
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d734:	331c      	adds	r3, #28
 801d736:	4618      	mov	r0, r3
 801d738:	f7fd fc20 	bl	801af7c <ld_dword>
 801d73c:	4602      	mov	r2, r0
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	2200      	movs	r2, #0
 801d746:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d748:	697a      	ldr	r2, [r7, #20]
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d74e:	697b      	ldr	r3, [r7, #20]
 801d750:	88da      	ldrh	r2, [r3, #6]
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	79fa      	ldrb	r2, [r7, #7]
 801d75a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	2200      	movs	r2, #0
 801d760:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	2200      	movs	r2, #0
 801d766:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	2200      	movs	r2, #0
 801d76c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	3330      	adds	r3, #48	@ 0x30
 801d772:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d776:	2100      	movs	r1, #0
 801d778:	4618      	mov	r0, r3
 801d77a:	f7fd fc8a 	bl	801b092 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d77e:	79fb      	ldrb	r3, [r7, #7]
 801d780:	f003 0320 	and.w	r3, r3, #32
 801d784:	2b00      	cmp	r3, #0
 801d786:	d06e      	beq.n	801d866 <f_open+0x376>
 801d788:	68fb      	ldr	r3, [r7, #12]
 801d78a:	68db      	ldr	r3, [r3, #12]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d06a      	beq.n	801d866 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	68da      	ldr	r2, [r3, #12]
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d798:	697b      	ldr	r3, [r7, #20]
 801d79a:	895b      	ldrh	r3, [r3, #10]
 801d79c:	461a      	mov	r2, r3
 801d79e:	697b      	ldr	r3, [r7, #20]
 801d7a0:	899b      	ldrh	r3, [r3, #12]
 801d7a2:	fb02 f303 	mul.w	r3, r2, r3
 801d7a6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	689b      	ldr	r3, [r3, #8]
 801d7ac:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	68db      	ldr	r3, [r3, #12]
 801d7b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d7b4:	e016      	b.n	801d7e4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d7b6:	68fb      	ldr	r3, [r7, #12]
 801d7b8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f7fd ff33 	bl	801b626 <get_fat>
 801d7c0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d7c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d7c4:	2b01      	cmp	r3, #1
 801d7c6:	d802      	bhi.n	801d7ce <f_open+0x2de>
 801d7c8:	2302      	movs	r3, #2
 801d7ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d7ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7d4:	d102      	bne.n	801d7dc <f_open+0x2ec>
 801d7d6:	2301      	movs	r3, #1
 801d7d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d7dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7e0:	1ad3      	subs	r3, r2, r3
 801d7e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d7e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d103      	bne.n	801d7f4 <f_open+0x304>
 801d7ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d7ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7f0:	429a      	cmp	r2, r3
 801d7f2:	d8e0      	bhi.n	801d7b6 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d7f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d7fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d131      	bne.n	801d866 <f_open+0x376>
 801d802:	697b      	ldr	r3, [r7, #20]
 801d804:	899b      	ldrh	r3, [r3, #12]
 801d806:	461a      	mov	r2, r3
 801d808:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d80a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d80e:	fb01 f202 	mul.w	r2, r1, r2
 801d812:	1a9b      	subs	r3, r3, r2
 801d814:	2b00      	cmp	r3, #0
 801d816:	d026      	beq.n	801d866 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d818:	697b      	ldr	r3, [r7, #20]
 801d81a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d81c:	4618      	mov	r0, r3
 801d81e:	f7fd fee3 	bl	801b5e8 <clust2sect>
 801d822:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d826:	2b00      	cmp	r3, #0
 801d828:	d103      	bne.n	801d832 <f_open+0x342>
						res = FR_INT_ERR;
 801d82a:	2302      	movs	r3, #2
 801d82c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d830:	e019      	b.n	801d866 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d832:	697b      	ldr	r3, [r7, #20]
 801d834:	899b      	ldrh	r3, [r3, #12]
 801d836:	461a      	mov	r2, r3
 801d838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d83a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d83e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d840:	441a      	add	r2, r3
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d846:	697b      	ldr	r3, [r7, #20]
 801d848:	7858      	ldrb	r0, [r3, #1]
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	6a1a      	ldr	r2, [r3, #32]
 801d854:	2301      	movs	r3, #1
 801d856:	f7fd fb1b 	bl	801ae90 <disk_read>
 801d85a:	4603      	mov	r3, r0
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d002      	beq.n	801d866 <f_open+0x376>
 801d860:	2301      	movs	r3, #1
 801d862:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d866:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d002      	beq.n	801d874 <f_open+0x384>
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	2200      	movs	r2, #0
 801d872:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d874:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d878:	4618      	mov	r0, r3
 801d87a:	3768      	adds	r7, #104	@ 0x68
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bd80      	pop	{r7, pc}

0801d880 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d880:	b580      	push	{r7, lr}
 801d882:	b08c      	sub	sp, #48	@ 0x30
 801d884:	af00      	add	r7, sp, #0
 801d886:	60f8      	str	r0, [r7, #12]
 801d888:	60b9      	str	r1, [r7, #8]
 801d88a:	607a      	str	r2, [r7, #4]
 801d88c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d88e:	68bb      	ldr	r3, [r7, #8]
 801d890:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d892:	683b      	ldr	r3, [r7, #0]
 801d894:	2200      	movs	r2, #0
 801d896:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	f107 0210 	add.w	r2, r7, #16
 801d89e:	4611      	mov	r1, r2
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	f7ff fda9 	bl	801d3f8 <validate>
 801d8a6:	4603      	mov	r3, r0
 801d8a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d8ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d107      	bne.n	801d8c4 <f_write+0x44>
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	7d5b      	ldrb	r3, [r3, #21]
 801d8b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d8bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d002      	beq.n	801d8ca <f_write+0x4a>
 801d8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d8c8:	e16a      	b.n	801dba0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	7d1b      	ldrb	r3, [r3, #20]
 801d8ce:	f003 0302 	and.w	r3, r3, #2
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d101      	bne.n	801d8da <f_write+0x5a>
 801d8d6:	2307      	movs	r3, #7
 801d8d8:	e162      	b.n	801dba0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	699a      	ldr	r2, [r3, #24]
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	441a      	add	r2, r3
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	699b      	ldr	r3, [r3, #24]
 801d8e6:	429a      	cmp	r2, r3
 801d8e8:	f080 814c 	bcs.w	801db84 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	699b      	ldr	r3, [r3, #24]
 801d8f0:	43db      	mvns	r3, r3
 801d8f2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d8f4:	e146      	b.n	801db84 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	699b      	ldr	r3, [r3, #24]
 801d8fa:	693a      	ldr	r2, [r7, #16]
 801d8fc:	8992      	ldrh	r2, [r2, #12]
 801d8fe:	fbb3 f1f2 	udiv	r1, r3, r2
 801d902:	fb01 f202 	mul.w	r2, r1, r2
 801d906:	1a9b      	subs	r3, r3, r2
 801d908:	2b00      	cmp	r3, #0
 801d90a:	f040 80f1 	bne.w	801daf0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	699b      	ldr	r3, [r3, #24]
 801d912:	693a      	ldr	r2, [r7, #16]
 801d914:	8992      	ldrh	r2, [r2, #12]
 801d916:	fbb3 f3f2 	udiv	r3, r3, r2
 801d91a:	693a      	ldr	r2, [r7, #16]
 801d91c:	8952      	ldrh	r2, [r2, #10]
 801d91e:	3a01      	subs	r2, #1
 801d920:	4013      	ands	r3, r2
 801d922:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d924:	69bb      	ldr	r3, [r7, #24]
 801d926:	2b00      	cmp	r3, #0
 801d928:	d143      	bne.n	801d9b2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	699b      	ldr	r3, [r3, #24]
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d10c      	bne.n	801d94c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	689b      	ldr	r3, [r3, #8]
 801d936:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d11a      	bne.n	801d974 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	2100      	movs	r1, #0
 801d942:	4618      	mov	r0, r3
 801d944:	f7fe f8c1 	bl	801baca <create_chain>
 801d948:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d94a:	e013      	b.n	801d974 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d950:	2b00      	cmp	r3, #0
 801d952:	d007      	beq.n	801d964 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d954:	68fb      	ldr	r3, [r7, #12]
 801d956:	699b      	ldr	r3, [r3, #24]
 801d958:	4619      	mov	r1, r3
 801d95a:	68f8      	ldr	r0, [r7, #12]
 801d95c:	f7fe f94d 	bl	801bbfa <clmt_clust>
 801d960:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d962:	e007      	b.n	801d974 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d964:	68fa      	ldr	r2, [r7, #12]
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	69db      	ldr	r3, [r3, #28]
 801d96a:	4619      	mov	r1, r3
 801d96c:	4610      	mov	r0, r2
 801d96e:	f7fe f8ac 	bl	801baca <create_chain>
 801d972:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d976:	2b00      	cmp	r3, #0
 801d978:	f000 8109 	beq.w	801db8e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d97e:	2b01      	cmp	r3, #1
 801d980:	d104      	bne.n	801d98c <f_write+0x10c>
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	2202      	movs	r2, #2
 801d986:	755a      	strb	r2, [r3, #21]
 801d988:	2302      	movs	r3, #2
 801d98a:	e109      	b.n	801dba0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d992:	d104      	bne.n	801d99e <f_write+0x11e>
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	2201      	movs	r2, #1
 801d998:	755a      	strb	r2, [r3, #21]
 801d99a:	2301      	movs	r3, #1
 801d99c:	e100      	b.n	801dba0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	689b      	ldr	r3, [r3, #8]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d102      	bne.n	801d9b2 <f_write+0x132>
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	7d1b      	ldrb	r3, [r3, #20]
 801d9b6:	b25b      	sxtb	r3, r3
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	da18      	bge.n	801d9ee <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d9bc:	693b      	ldr	r3, [r7, #16]
 801d9be:	7858      	ldrb	r0, [r3, #1]
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d9c6:	68fb      	ldr	r3, [r7, #12]
 801d9c8:	6a1a      	ldr	r2, [r3, #32]
 801d9ca:	2301      	movs	r3, #1
 801d9cc:	f7fd fa80 	bl	801aed0 <disk_write>
 801d9d0:	4603      	mov	r3, r0
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d004      	beq.n	801d9e0 <f_write+0x160>
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	2201      	movs	r2, #1
 801d9da:	755a      	strb	r2, [r3, #21]
 801d9dc:	2301      	movs	r3, #1
 801d9de:	e0df      	b.n	801dba0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	7d1b      	ldrb	r3, [r3, #20]
 801d9e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d9e8:	b2da      	uxtb	r2, r3
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d9ee:	693a      	ldr	r2, [r7, #16]
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	69db      	ldr	r3, [r3, #28]
 801d9f4:	4619      	mov	r1, r3
 801d9f6:	4610      	mov	r0, r2
 801d9f8:	f7fd fdf6 	bl	801b5e8 <clust2sect>
 801d9fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d9fe:	697b      	ldr	r3, [r7, #20]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d104      	bne.n	801da0e <f_write+0x18e>
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	2202      	movs	r2, #2
 801da08:	755a      	strb	r2, [r3, #21]
 801da0a:	2302      	movs	r3, #2
 801da0c:	e0c8      	b.n	801dba0 <f_write+0x320>
			sect += csect;
 801da0e:	697a      	ldr	r2, [r7, #20]
 801da10:	69bb      	ldr	r3, [r7, #24]
 801da12:	4413      	add	r3, r2
 801da14:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801da16:	693b      	ldr	r3, [r7, #16]
 801da18:	899b      	ldrh	r3, [r3, #12]
 801da1a:	461a      	mov	r2, r3
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	fbb3 f3f2 	udiv	r3, r3, r2
 801da22:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801da24:	6a3b      	ldr	r3, [r7, #32]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d043      	beq.n	801dab2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801da2a:	69ba      	ldr	r2, [r7, #24]
 801da2c:	6a3b      	ldr	r3, [r7, #32]
 801da2e:	4413      	add	r3, r2
 801da30:	693a      	ldr	r2, [r7, #16]
 801da32:	8952      	ldrh	r2, [r2, #10]
 801da34:	4293      	cmp	r3, r2
 801da36:	d905      	bls.n	801da44 <f_write+0x1c4>
					cc = fs->csize - csect;
 801da38:	693b      	ldr	r3, [r7, #16]
 801da3a:	895b      	ldrh	r3, [r3, #10]
 801da3c:	461a      	mov	r2, r3
 801da3e:	69bb      	ldr	r3, [r7, #24]
 801da40:	1ad3      	subs	r3, r2, r3
 801da42:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da44:	693b      	ldr	r3, [r7, #16]
 801da46:	7858      	ldrb	r0, [r3, #1]
 801da48:	6a3b      	ldr	r3, [r7, #32]
 801da4a:	697a      	ldr	r2, [r7, #20]
 801da4c:	69f9      	ldr	r1, [r7, #28]
 801da4e:	f7fd fa3f 	bl	801aed0 <disk_write>
 801da52:	4603      	mov	r3, r0
 801da54:	2b00      	cmp	r3, #0
 801da56:	d004      	beq.n	801da62 <f_write+0x1e2>
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	2201      	movs	r2, #1
 801da5c:	755a      	strb	r2, [r3, #21]
 801da5e:	2301      	movs	r3, #1
 801da60:	e09e      	b.n	801dba0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	6a1a      	ldr	r2, [r3, #32]
 801da66:	697b      	ldr	r3, [r7, #20]
 801da68:	1ad3      	subs	r3, r2, r3
 801da6a:	6a3a      	ldr	r2, [r7, #32]
 801da6c:	429a      	cmp	r2, r3
 801da6e:	d918      	bls.n	801daa2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	6a1a      	ldr	r2, [r3, #32]
 801da7a:	697b      	ldr	r3, [r7, #20]
 801da7c:	1ad3      	subs	r3, r2, r3
 801da7e:	693a      	ldr	r2, [r7, #16]
 801da80:	8992      	ldrh	r2, [r2, #12]
 801da82:	fb02 f303 	mul.w	r3, r2, r3
 801da86:	69fa      	ldr	r2, [r7, #28]
 801da88:	18d1      	adds	r1, r2, r3
 801da8a:	693b      	ldr	r3, [r7, #16]
 801da8c:	899b      	ldrh	r3, [r3, #12]
 801da8e:	461a      	mov	r2, r3
 801da90:	f7fd fade 	bl	801b050 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	7d1b      	ldrb	r3, [r3, #20]
 801da98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da9c:	b2da      	uxtb	r2, r3
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801daa2:	693b      	ldr	r3, [r7, #16]
 801daa4:	899b      	ldrh	r3, [r3, #12]
 801daa6:	461a      	mov	r2, r3
 801daa8:	6a3b      	ldr	r3, [r7, #32]
 801daaa:	fb02 f303 	mul.w	r3, r2, r3
 801daae:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801dab0:	e04b      	b.n	801db4a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	6a1b      	ldr	r3, [r3, #32]
 801dab6:	697a      	ldr	r2, [r7, #20]
 801dab8:	429a      	cmp	r2, r3
 801daba:	d016      	beq.n	801daea <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801dabc:	68fb      	ldr	r3, [r7, #12]
 801dabe:	699a      	ldr	r2, [r3, #24]
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801dac4:	429a      	cmp	r2, r3
 801dac6:	d210      	bcs.n	801daea <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801dac8:	693b      	ldr	r3, [r7, #16]
 801daca:	7858      	ldrb	r0, [r3, #1]
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dad2:	2301      	movs	r3, #1
 801dad4:	697a      	ldr	r2, [r7, #20]
 801dad6:	f7fd f9db 	bl	801ae90 <disk_read>
 801dada:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d004      	beq.n	801daea <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	2201      	movs	r2, #1
 801dae4:	755a      	strb	r2, [r3, #21]
 801dae6:	2301      	movs	r3, #1
 801dae8:	e05a      	b.n	801dba0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	697a      	ldr	r2, [r7, #20]
 801daee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801daf0:	693b      	ldr	r3, [r7, #16]
 801daf2:	899b      	ldrh	r3, [r3, #12]
 801daf4:	4618      	mov	r0, r3
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	699b      	ldr	r3, [r3, #24]
 801dafa:	693a      	ldr	r2, [r7, #16]
 801dafc:	8992      	ldrh	r2, [r2, #12]
 801dafe:	fbb3 f1f2 	udiv	r1, r3, r2
 801db02:	fb01 f202 	mul.w	r2, r1, r2
 801db06:	1a9b      	subs	r3, r3, r2
 801db08:	1ac3      	subs	r3, r0, r3
 801db0a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801db0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	429a      	cmp	r2, r3
 801db12:	d901      	bls.n	801db18 <f_write+0x298>
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	699b      	ldr	r3, [r3, #24]
 801db22:	693a      	ldr	r2, [r7, #16]
 801db24:	8992      	ldrh	r2, [r2, #12]
 801db26:	fbb3 f0f2 	udiv	r0, r3, r2
 801db2a:	fb00 f202 	mul.w	r2, r0, r2
 801db2e:	1a9b      	subs	r3, r3, r2
 801db30:	440b      	add	r3, r1
 801db32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db34:	69f9      	ldr	r1, [r7, #28]
 801db36:	4618      	mov	r0, r3
 801db38:	f7fd fa8a 	bl	801b050 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	7d1b      	ldrb	r3, [r3, #20]
 801db40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801db44:	b2da      	uxtb	r2, r3
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801db4a:	69fa      	ldr	r2, [r7, #28]
 801db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db4e:	4413      	add	r3, r2
 801db50:	61fb      	str	r3, [r7, #28]
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	699a      	ldr	r2, [r3, #24]
 801db56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db58:	441a      	add	r2, r3
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	619a      	str	r2, [r3, #24]
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	68da      	ldr	r2, [r3, #12]
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	699b      	ldr	r3, [r3, #24]
 801db66:	429a      	cmp	r2, r3
 801db68:	bf38      	it	cc
 801db6a:	461a      	movcc	r2, r3
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	60da      	str	r2, [r3, #12]
 801db70:	683b      	ldr	r3, [r7, #0]
 801db72:	681a      	ldr	r2, [r3, #0]
 801db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db76:	441a      	add	r2, r3
 801db78:	683b      	ldr	r3, [r7, #0]
 801db7a:	601a      	str	r2, [r3, #0]
 801db7c:	687a      	ldr	r2, [r7, #4]
 801db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db80:	1ad3      	subs	r3, r2, r3
 801db82:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	2b00      	cmp	r3, #0
 801db88:	f47f aeb5 	bne.w	801d8f6 <f_write+0x76>
 801db8c:	e000      	b.n	801db90 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801db8e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	7d1b      	ldrb	r3, [r3, #20]
 801db94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db98:	b2da      	uxtb	r2, r3
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801db9e:	2300      	movs	r3, #0
}
 801dba0:	4618      	mov	r0, r3
 801dba2:	3730      	adds	r7, #48	@ 0x30
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}

0801dba8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b086      	sub	sp, #24
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f107 0208 	add.w	r2, r7, #8
 801dbb6:	4611      	mov	r1, r2
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f7ff fc1d 	bl	801d3f8 <validate>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dbc2:	7dfb      	ldrb	r3, [r7, #23]
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d168      	bne.n	801dc9a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	7d1b      	ldrb	r3, [r3, #20]
 801dbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d062      	beq.n	801dc9a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	7d1b      	ldrb	r3, [r3, #20]
 801dbd8:	b25b      	sxtb	r3, r3
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	da15      	bge.n	801dc0a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dbde:	68bb      	ldr	r3, [r7, #8]
 801dbe0:	7858      	ldrb	r0, [r3, #1]
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	6a1a      	ldr	r2, [r3, #32]
 801dbec:	2301      	movs	r3, #1
 801dbee:	f7fd f96f 	bl	801aed0 <disk_write>
 801dbf2:	4603      	mov	r3, r0
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d001      	beq.n	801dbfc <f_sync+0x54>
 801dbf8:	2301      	movs	r3, #1
 801dbfa:	e04f      	b.n	801dc9c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	7d1b      	ldrb	r3, [r3, #20]
 801dc00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc04:	b2da      	uxtb	r2, r3
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dc0a:	f7fd f8a1 	bl	801ad50 <get_fattime>
 801dc0e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dc10:	68ba      	ldr	r2, [r7, #8]
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc16:	4619      	mov	r1, r3
 801dc18:	4610      	mov	r0, r2
 801dc1a:	f7fd fc47 	bl	801b4ac <move_window>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dc22:	7dfb      	ldrb	r3, [r7, #23]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d138      	bne.n	801dc9a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc2c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	330b      	adds	r3, #11
 801dc32:	781a      	ldrb	r2, [r3, #0]
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	330b      	adds	r3, #11
 801dc38:	f042 0220 	orr.w	r2, r2, #32
 801dc3c:	b2d2      	uxtb	r2, r2
 801dc3e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	6818      	ldr	r0, [r3, #0]
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	689b      	ldr	r3, [r3, #8]
 801dc48:	461a      	mov	r2, r3
 801dc4a:	68f9      	ldr	r1, [r7, #12]
 801dc4c:	f7fe f9d2 	bl	801bff4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	f103 021c 	add.w	r2, r3, #28
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	68db      	ldr	r3, [r3, #12]
 801dc5a:	4619      	mov	r1, r3
 801dc5c:	4610      	mov	r0, r2
 801dc5e:	f7fd f9cb 	bl	801aff8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	3316      	adds	r3, #22
 801dc66:	6939      	ldr	r1, [r7, #16]
 801dc68:	4618      	mov	r0, r3
 801dc6a:	f7fd f9c5 	bl	801aff8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dc6e:	68fb      	ldr	r3, [r7, #12]
 801dc70:	3312      	adds	r3, #18
 801dc72:	2100      	movs	r1, #0
 801dc74:	4618      	mov	r0, r3
 801dc76:	f7fd f9a4 	bl	801afc2 <st_word>
					fs->wflag = 1;
 801dc7a:	68bb      	ldr	r3, [r7, #8]
 801dc7c:	2201      	movs	r2, #1
 801dc7e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dc80:	68bb      	ldr	r3, [r7, #8]
 801dc82:	4618      	mov	r0, r3
 801dc84:	f7fd fc40 	bl	801b508 <sync_fs>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	7d1b      	ldrb	r3, [r3, #20]
 801dc90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dc94:	b2da      	uxtb	r2, r3
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc9c:	4618      	mov	r0, r3
 801dc9e:	3718      	adds	r7, #24
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd80      	pop	{r7, pc}

0801dca4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dca4:	b580      	push	{r7, lr}
 801dca6:	b084      	sub	sp, #16
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dcac:	6878      	ldr	r0, [r7, #4]
 801dcae:	f7ff ff7b 	bl	801dba8 <f_sync>
 801dcb2:	4603      	mov	r3, r0
 801dcb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dcb6:	7bfb      	ldrb	r3, [r7, #15]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d118      	bne.n	801dcee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	f107 0208 	add.w	r2, r7, #8
 801dcc2:	4611      	mov	r1, r2
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f7ff fb97 	bl	801d3f8 <validate>
 801dcca:	4603      	mov	r3, r0
 801dccc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dcce:	7bfb      	ldrb	r3, [r7, #15]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d10c      	bne.n	801dcee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	691b      	ldr	r3, [r3, #16]
 801dcd8:	4618      	mov	r0, r3
 801dcda:	f7fd fb43 	bl	801b364 <dec_lock>
 801dcde:	4603      	mov	r3, r0
 801dce0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dce2:	7bfb      	ldrb	r3, [r7, #15]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d102      	bne.n	801dcee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	2200      	movs	r2, #0
 801dcec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dcee:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	3710      	adds	r7, #16
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	bd80      	pop	{r7, pc}

0801dcf8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b0a0      	sub	sp, #128	@ 0x80
 801dcfc:	af00      	add	r7, sp, #0
 801dcfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dd00:	2300      	movs	r3, #0
 801dd02:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dd04:	f107 010c 	add.w	r1, r7, #12
 801dd08:	1d3b      	adds	r3, r7, #4
 801dd0a:	2202      	movs	r2, #2
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7ff f8ed 	bl	801ceec <find_volume>
 801dd12:	4603      	mov	r3, r0
 801dd14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801dd1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	f040 808e 	bne.w	801de42 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801dd26:	687a      	ldr	r2, [r7, #4]
 801dd28:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dd2c:	4611      	mov	r1, r2
 801dd2e:	4618      	mov	r0, r3
 801dd30:	f7fe ffcc 	bl	801cccc <follow_path>
 801dd34:	4603      	mov	r3, r0
 801dd36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801dd3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d108      	bne.n	801dd54 <f_unlink+0x5c>
 801dd42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dd46:	2102      	movs	r1, #2
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7fd f9ff 	bl	801b14c <chk_lock>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801dd54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d172      	bne.n	801de42 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dd5c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dd60:	b25b      	sxtb	r3, r3
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	da03      	bge.n	801dd6e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dd66:	2306      	movs	r3, #6
 801dd68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801dd6c:	e008      	b.n	801dd80 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801dd6e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dd72:	f003 0301 	and.w	r3, r3, #1
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d002      	beq.n	801dd80 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801dd7a:	2307      	movs	r3, #7
 801dd7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801dd80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d134      	bne.n	801ddf2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801dd8c:	4611      	mov	r1, r2
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7fe f911 	bl	801bfb6 <ld_clust>
 801dd94:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801dd96:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dd9a:	f003 0310 	and.w	r3, r3, #16
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	d027      	beq.n	801ddf2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801dda6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dda8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801ddaa:	f107 0310 	add.w	r3, r7, #16
 801ddae:	2100      	movs	r1, #0
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f7fd ff5a 	bl	801bc6a <dir_sdi>
 801ddb6:	4603      	mov	r3, r0
 801ddb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801ddbc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d116      	bne.n	801ddf2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801ddc4:	f107 0310 	add.w	r3, r7, #16
 801ddc8:	2100      	movs	r1, #0
 801ddca:	4618      	mov	r0, r3
 801ddcc:	f7fe fb1d 	bl	801c40a <dir_read>
 801ddd0:	4603      	mov	r3, r0
 801ddd2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801ddd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d102      	bne.n	801dde4 <f_unlink+0xec>
 801ddde:	2307      	movs	r3, #7
 801dde0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801dde4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dde8:	2b04      	cmp	r3, #4
 801ddea:	d102      	bne.n	801ddf2 <f_unlink+0xfa>
 801ddec:	2300      	movs	r3, #0
 801ddee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801ddf2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d123      	bne.n	801de42 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801ddfa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddfe:	4618      	mov	r0, r3
 801de00:	f7fe fd62 	bl	801c8c8 <dir_remove>
 801de04:	4603      	mov	r3, r0
 801de06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801de0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d10c      	bne.n	801de2c <f_unlink+0x134>
 801de12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de14:	2b00      	cmp	r3, #0
 801de16:	d009      	beq.n	801de2c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801de18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de1c:	2200      	movs	r2, #0
 801de1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801de20:	4618      	mov	r0, r3
 801de22:	f7fd fded 	bl	801ba00 <remove_chain>
 801de26:	4603      	mov	r3, r0
 801de28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801de2c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de30:	2b00      	cmp	r3, #0
 801de32:	d106      	bne.n	801de42 <f_unlink+0x14a>
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	4618      	mov	r0, r3
 801de38:	f7fd fb66 	bl	801b508 <sync_fs>
 801de3c:	4603      	mov	r3, r0
 801de3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801de42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801de46:	4618      	mov	r0, r3
 801de48:	3780      	adds	r7, #128	@ 0x80
 801de4a:	46bd      	mov	sp, r7
 801de4c:	bd80      	pop	{r7, pc}
	...

0801de50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801de50:	b480      	push	{r7}
 801de52:	b087      	sub	sp, #28
 801de54:	af00      	add	r7, sp, #0
 801de56:	60f8      	str	r0, [r7, #12]
 801de58:	60b9      	str	r1, [r7, #8]
 801de5a:	4613      	mov	r3, r2
 801de5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801de5e:	2301      	movs	r3, #1
 801de60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801de62:	2300      	movs	r3, #0
 801de64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801de66:	4b1f      	ldr	r3, [pc, #124]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de68:	7a5b      	ldrb	r3, [r3, #9]
 801de6a:	b2db      	uxtb	r3, r3
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d131      	bne.n	801ded4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801de70:	4b1c      	ldr	r3, [pc, #112]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de72:	7a5b      	ldrb	r3, [r3, #9]
 801de74:	b2db      	uxtb	r3, r3
 801de76:	461a      	mov	r2, r3
 801de78:	4b1a      	ldr	r3, [pc, #104]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de7a:	2100      	movs	r1, #0
 801de7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801de7e:	4b19      	ldr	r3, [pc, #100]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de80:	7a5b      	ldrb	r3, [r3, #9]
 801de82:	b2db      	uxtb	r3, r3
 801de84:	4a17      	ldr	r2, [pc, #92]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de86:	009b      	lsls	r3, r3, #2
 801de88:	4413      	add	r3, r2
 801de8a:	68fa      	ldr	r2, [r7, #12]
 801de8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801de8e:	4b15      	ldr	r3, [pc, #84]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de90:	7a5b      	ldrb	r3, [r3, #9]
 801de92:	b2db      	uxtb	r3, r3
 801de94:	461a      	mov	r2, r3
 801de96:	4b13      	ldr	r3, [pc, #76]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801de98:	4413      	add	r3, r2
 801de9a:	79fa      	ldrb	r2, [r7, #7]
 801de9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801de9e:	4b11      	ldr	r3, [pc, #68]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801dea0:	7a5b      	ldrb	r3, [r3, #9]
 801dea2:	b2db      	uxtb	r3, r3
 801dea4:	1c5a      	adds	r2, r3, #1
 801dea6:	b2d1      	uxtb	r1, r2
 801dea8:	4a0e      	ldr	r2, [pc, #56]	@ (801dee4 <FATFS_LinkDriverEx+0x94>)
 801deaa:	7251      	strb	r1, [r2, #9]
 801deac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801deae:	7dbb      	ldrb	r3, [r7, #22]
 801deb0:	3330      	adds	r3, #48	@ 0x30
 801deb2:	b2da      	uxtb	r2, r3
 801deb4:	68bb      	ldr	r3, [r7, #8]
 801deb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801deb8:	68bb      	ldr	r3, [r7, #8]
 801deba:	3301      	adds	r3, #1
 801debc:	223a      	movs	r2, #58	@ 0x3a
 801debe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dec0:	68bb      	ldr	r3, [r7, #8]
 801dec2:	3302      	adds	r3, #2
 801dec4:	222f      	movs	r2, #47	@ 0x2f
 801dec6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dec8:	68bb      	ldr	r3, [r7, #8]
 801deca:	3303      	adds	r3, #3
 801decc:	2200      	movs	r2, #0
 801dece:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801ded0:	2300      	movs	r3, #0
 801ded2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801ded4:	7dfb      	ldrb	r3, [r7, #23]
}
 801ded6:	4618      	mov	r0, r3
 801ded8:	371c      	adds	r7, #28
 801deda:	46bd      	mov	sp, r7
 801dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dee0:	4770      	bx	lr
 801dee2:	bf00      	nop
 801dee4:	24000768 	.word	0x24000768

0801dee8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
 801def0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801def2:	2200      	movs	r2, #0
 801def4:	6839      	ldr	r1, [r7, #0]
 801def6:	6878      	ldr	r0, [r7, #4]
 801def8:	f7ff ffaa 	bl	801de50 <FATFS_LinkDriverEx>
 801defc:	4603      	mov	r3, r0
}
 801defe:	4618      	mov	r0, r3
 801df00:	3708      	adds	r7, #8
 801df02:	46bd      	mov	sp, r7
 801df04:	bd80      	pop	{r7, pc}
	...

0801df08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801df08:	b480      	push	{r7}
 801df0a:	b085      	sub	sp, #20
 801df0c:	af00      	add	r7, sp, #0
 801df0e:	4603      	mov	r3, r0
 801df10:	6039      	str	r1, [r7, #0]
 801df12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801df14:	88fb      	ldrh	r3, [r7, #6]
 801df16:	2b7f      	cmp	r3, #127	@ 0x7f
 801df18:	d802      	bhi.n	801df20 <ff_convert+0x18>
		c = chr;
 801df1a:	88fb      	ldrh	r3, [r7, #6]
 801df1c:	81fb      	strh	r3, [r7, #14]
 801df1e:	e025      	b.n	801df6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801df20:	683b      	ldr	r3, [r7, #0]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d00b      	beq.n	801df3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801df26:	88fb      	ldrh	r3, [r7, #6]
 801df28:	2bff      	cmp	r3, #255	@ 0xff
 801df2a:	d805      	bhi.n	801df38 <ff_convert+0x30>
 801df2c:	88fb      	ldrh	r3, [r7, #6]
 801df2e:	3b80      	subs	r3, #128	@ 0x80
 801df30:	4a12      	ldr	r2, [pc, #72]	@ (801df7c <ff_convert+0x74>)
 801df32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801df36:	e000      	b.n	801df3a <ff_convert+0x32>
 801df38:	2300      	movs	r3, #0
 801df3a:	81fb      	strh	r3, [r7, #14]
 801df3c:	e016      	b.n	801df6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801df3e:	2300      	movs	r3, #0
 801df40:	81fb      	strh	r3, [r7, #14]
 801df42:	e009      	b.n	801df58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801df44:	89fb      	ldrh	r3, [r7, #14]
 801df46:	4a0d      	ldr	r2, [pc, #52]	@ (801df7c <ff_convert+0x74>)
 801df48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801df4c:	88fa      	ldrh	r2, [r7, #6]
 801df4e:	429a      	cmp	r2, r3
 801df50:	d006      	beq.n	801df60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801df52:	89fb      	ldrh	r3, [r7, #14]
 801df54:	3301      	adds	r3, #1
 801df56:	81fb      	strh	r3, [r7, #14]
 801df58:	89fb      	ldrh	r3, [r7, #14]
 801df5a:	2b7f      	cmp	r3, #127	@ 0x7f
 801df5c:	d9f2      	bls.n	801df44 <ff_convert+0x3c>
 801df5e:	e000      	b.n	801df62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801df60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801df62:	89fb      	ldrh	r3, [r7, #14]
 801df64:	3380      	adds	r3, #128	@ 0x80
 801df66:	b29b      	uxth	r3, r3
 801df68:	b2db      	uxtb	r3, r3
 801df6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801df6c:	89fb      	ldrh	r3, [r7, #14]
}
 801df6e:	4618      	mov	r0, r3
 801df70:	3714      	adds	r7, #20
 801df72:	46bd      	mov	sp, r7
 801df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df78:	4770      	bx	lr
 801df7a:	bf00      	nop
 801df7c:	0801ec2c 	.word	0x0801ec2c

0801df80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801df80:	b480      	push	{r7}
 801df82:	b087      	sub	sp, #28
 801df84:	af00      	add	r7, sp, #0
 801df86:	4603      	mov	r3, r0
 801df88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801df8a:	88fb      	ldrh	r3, [r7, #6]
 801df8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801df90:	d201      	bcs.n	801df96 <ff_wtoupper+0x16>
 801df92:	4b3e      	ldr	r3, [pc, #248]	@ (801e08c <ff_wtoupper+0x10c>)
 801df94:	e000      	b.n	801df98 <ff_wtoupper+0x18>
 801df96:	4b3e      	ldr	r3, [pc, #248]	@ (801e090 <ff_wtoupper+0x110>)
 801df98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801df9a:	697b      	ldr	r3, [r7, #20]
 801df9c:	1c9a      	adds	r2, r3, #2
 801df9e:	617a      	str	r2, [r7, #20]
 801dfa0:	881b      	ldrh	r3, [r3, #0]
 801dfa2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dfa4:	8a7b      	ldrh	r3, [r7, #18]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d068      	beq.n	801e07c <ff_wtoupper+0xfc>
 801dfaa:	88fa      	ldrh	r2, [r7, #6]
 801dfac:	8a7b      	ldrh	r3, [r7, #18]
 801dfae:	429a      	cmp	r2, r3
 801dfb0:	d364      	bcc.n	801e07c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dfb2:	697b      	ldr	r3, [r7, #20]
 801dfb4:	1c9a      	adds	r2, r3, #2
 801dfb6:	617a      	str	r2, [r7, #20]
 801dfb8:	881b      	ldrh	r3, [r3, #0]
 801dfba:	823b      	strh	r3, [r7, #16]
 801dfbc:	8a3b      	ldrh	r3, [r7, #16]
 801dfbe:	0a1b      	lsrs	r3, r3, #8
 801dfc0:	81fb      	strh	r3, [r7, #14]
 801dfc2:	8a3b      	ldrh	r3, [r7, #16]
 801dfc4:	b2db      	uxtb	r3, r3
 801dfc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dfc8:	88fa      	ldrh	r2, [r7, #6]
 801dfca:	8a79      	ldrh	r1, [r7, #18]
 801dfcc:	8a3b      	ldrh	r3, [r7, #16]
 801dfce:	440b      	add	r3, r1
 801dfd0:	429a      	cmp	r2, r3
 801dfd2:	da49      	bge.n	801e068 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dfd4:	89fb      	ldrh	r3, [r7, #14]
 801dfd6:	2b08      	cmp	r3, #8
 801dfd8:	d84f      	bhi.n	801e07a <ff_wtoupper+0xfa>
 801dfda:	a201      	add	r2, pc, #4	@ (adr r2, 801dfe0 <ff_wtoupper+0x60>)
 801dfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dfe0:	0801e005 	.word	0x0801e005
 801dfe4:	0801e017 	.word	0x0801e017
 801dfe8:	0801e02d 	.word	0x0801e02d
 801dfec:	0801e035 	.word	0x0801e035
 801dff0:	0801e03d 	.word	0x0801e03d
 801dff4:	0801e045 	.word	0x0801e045
 801dff8:	0801e04d 	.word	0x0801e04d
 801dffc:	0801e055 	.word	0x0801e055
 801e000:	0801e05d 	.word	0x0801e05d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e004:	88fa      	ldrh	r2, [r7, #6]
 801e006:	8a7b      	ldrh	r3, [r7, #18]
 801e008:	1ad3      	subs	r3, r2, r3
 801e00a:	005b      	lsls	r3, r3, #1
 801e00c:	697a      	ldr	r2, [r7, #20]
 801e00e:	4413      	add	r3, r2
 801e010:	881b      	ldrh	r3, [r3, #0]
 801e012:	80fb      	strh	r3, [r7, #6]
 801e014:	e027      	b.n	801e066 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e016:	88fa      	ldrh	r2, [r7, #6]
 801e018:	8a7b      	ldrh	r3, [r7, #18]
 801e01a:	1ad3      	subs	r3, r2, r3
 801e01c:	b29b      	uxth	r3, r3
 801e01e:	f003 0301 	and.w	r3, r3, #1
 801e022:	b29b      	uxth	r3, r3
 801e024:	88fa      	ldrh	r2, [r7, #6]
 801e026:	1ad3      	subs	r3, r2, r3
 801e028:	80fb      	strh	r3, [r7, #6]
 801e02a:	e01c      	b.n	801e066 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e02c:	88fb      	ldrh	r3, [r7, #6]
 801e02e:	3b10      	subs	r3, #16
 801e030:	80fb      	strh	r3, [r7, #6]
 801e032:	e018      	b.n	801e066 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e034:	88fb      	ldrh	r3, [r7, #6]
 801e036:	3b20      	subs	r3, #32
 801e038:	80fb      	strh	r3, [r7, #6]
 801e03a:	e014      	b.n	801e066 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e03c:	88fb      	ldrh	r3, [r7, #6]
 801e03e:	3b30      	subs	r3, #48	@ 0x30
 801e040:	80fb      	strh	r3, [r7, #6]
 801e042:	e010      	b.n	801e066 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e044:	88fb      	ldrh	r3, [r7, #6]
 801e046:	3b1a      	subs	r3, #26
 801e048:	80fb      	strh	r3, [r7, #6]
 801e04a:	e00c      	b.n	801e066 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e04c:	88fb      	ldrh	r3, [r7, #6]
 801e04e:	3308      	adds	r3, #8
 801e050:	80fb      	strh	r3, [r7, #6]
 801e052:	e008      	b.n	801e066 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e054:	88fb      	ldrh	r3, [r7, #6]
 801e056:	3b50      	subs	r3, #80	@ 0x50
 801e058:	80fb      	strh	r3, [r7, #6]
 801e05a:	e004      	b.n	801e066 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e05c:	88fb      	ldrh	r3, [r7, #6]
 801e05e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e062:	80fb      	strh	r3, [r7, #6]
 801e064:	bf00      	nop
			}
			break;
 801e066:	e008      	b.n	801e07a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e068:	89fb      	ldrh	r3, [r7, #14]
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d195      	bne.n	801df9a <ff_wtoupper+0x1a>
 801e06e:	8a3b      	ldrh	r3, [r7, #16]
 801e070:	005b      	lsls	r3, r3, #1
 801e072:	697a      	ldr	r2, [r7, #20]
 801e074:	4413      	add	r3, r2
 801e076:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e078:	e78f      	b.n	801df9a <ff_wtoupper+0x1a>
			break;
 801e07a:	bf00      	nop
	}

	return chr;
 801e07c:	88fb      	ldrh	r3, [r7, #6]
}
 801e07e:	4618      	mov	r0, r3
 801e080:	371c      	adds	r7, #28
 801e082:	46bd      	mov	sp, r7
 801e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e088:	4770      	bx	lr
 801e08a:	bf00      	nop
 801e08c:	0801ed2c 	.word	0x0801ed2c
 801e090:	0801ef20 	.word	0x0801ef20

0801e094 <memset>:
 801e094:	4402      	add	r2, r0
 801e096:	4603      	mov	r3, r0
 801e098:	4293      	cmp	r3, r2
 801e09a:	d100      	bne.n	801e09e <memset+0xa>
 801e09c:	4770      	bx	lr
 801e09e:	f803 1b01 	strb.w	r1, [r3], #1
 801e0a2:	e7f9      	b.n	801e098 <memset+0x4>

0801e0a4 <__errno>:
 801e0a4:	4b01      	ldr	r3, [pc, #4]	@ (801e0ac <__errno+0x8>)
 801e0a6:	6818      	ldr	r0, [r3, #0]
 801e0a8:	4770      	bx	lr
 801e0aa:	bf00      	nop
 801e0ac:	24000028 	.word	0x24000028

0801e0b0 <__libc_init_array>:
 801e0b0:	b570      	push	{r4, r5, r6, lr}
 801e0b2:	4d0d      	ldr	r5, [pc, #52]	@ (801e0e8 <__libc_init_array+0x38>)
 801e0b4:	4c0d      	ldr	r4, [pc, #52]	@ (801e0ec <__libc_init_array+0x3c>)
 801e0b6:	1b64      	subs	r4, r4, r5
 801e0b8:	10a4      	asrs	r4, r4, #2
 801e0ba:	2600      	movs	r6, #0
 801e0bc:	42a6      	cmp	r6, r4
 801e0be:	d109      	bne.n	801e0d4 <__libc_init_array+0x24>
 801e0c0:	4d0b      	ldr	r5, [pc, #44]	@ (801e0f0 <__libc_init_array+0x40>)
 801e0c2:	4c0c      	ldr	r4, [pc, #48]	@ (801e0f4 <__libc_init_array+0x44>)
 801e0c4:	f000 fd00 	bl	801eac8 <_init>
 801e0c8:	1b64      	subs	r4, r4, r5
 801e0ca:	10a4      	asrs	r4, r4, #2
 801e0cc:	2600      	movs	r6, #0
 801e0ce:	42a6      	cmp	r6, r4
 801e0d0:	d105      	bne.n	801e0de <__libc_init_array+0x2e>
 801e0d2:	bd70      	pop	{r4, r5, r6, pc}
 801e0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0d8:	4798      	blx	r3
 801e0da:	3601      	adds	r6, #1
 801e0dc:	e7ee      	b.n	801e0bc <__libc_init_array+0xc>
 801e0de:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0e2:	4798      	blx	r3
 801e0e4:	3601      	adds	r6, #1
 801e0e6:	e7f2      	b.n	801e0ce <__libc_init_array+0x1e>
 801e0e8:	08020910 	.word	0x08020910
 801e0ec:	08020910 	.word	0x08020910
 801e0f0:	08020910 	.word	0x08020910
 801e0f4:	08020914 	.word	0x08020914

0801e0f8 <atan2>:
 801e0f8:	f000 baaa 	b.w	801e650 <__ieee754_atan2>
 801e0fc:	0000      	movs	r0, r0
	...

0801e100 <sqrt>:
 801e100:	b508      	push	{r3, lr}
 801e102:	ed2d 8b04 	vpush	{d8-d9}
 801e106:	eeb0 8b40 	vmov.f64	d8, d0
 801e10a:	f000 fa9d 	bl	801e648 <__ieee754_sqrt>
 801e10e:	eeb4 8b48 	vcmp.f64	d8, d8
 801e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e116:	d60c      	bvs.n	801e132 <sqrt+0x32>
 801e118:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e138 <sqrt+0x38>
 801e11c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e124:	d505      	bpl.n	801e132 <sqrt+0x32>
 801e126:	f7ff ffbd 	bl	801e0a4 <__errno>
 801e12a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e12e:	2321      	movs	r3, #33	@ 0x21
 801e130:	6003      	str	r3, [r0, #0]
 801e132:	ecbd 8b04 	vpop	{d8-d9}
 801e136:	bd08      	pop	{r3, pc}
	...

0801e140 <checkint>:
 801e140:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e144:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e148:	429a      	cmp	r2, r3
 801e14a:	b570      	push	{r4, r5, r6, lr}
 801e14c:	dd2a      	ble.n	801e1a4 <checkint+0x64>
 801e14e:	f240 4333 	movw	r3, #1075	@ 0x433
 801e152:	429a      	cmp	r2, r3
 801e154:	dc24      	bgt.n	801e1a0 <checkint+0x60>
 801e156:	1a9b      	subs	r3, r3, r2
 801e158:	f1a3 0620 	sub.w	r6, r3, #32
 801e15c:	f04f 32ff 	mov.w	r2, #4294967295
 801e160:	fa02 f403 	lsl.w	r4, r2, r3
 801e164:	fa02 f606 	lsl.w	r6, r2, r6
 801e168:	f1c3 0520 	rsb	r5, r3, #32
 801e16c:	fa22 f505 	lsr.w	r5, r2, r5
 801e170:	4334      	orrs	r4, r6
 801e172:	432c      	orrs	r4, r5
 801e174:	409a      	lsls	r2, r3
 801e176:	ea20 0202 	bic.w	r2, r0, r2
 801e17a:	ea21 0404 	bic.w	r4, r1, r4
 801e17e:	4322      	orrs	r2, r4
 801e180:	f1a3 0420 	sub.w	r4, r3, #32
 801e184:	f1c3 0220 	rsb	r2, r3, #32
 801e188:	d10c      	bne.n	801e1a4 <checkint+0x64>
 801e18a:	40d8      	lsrs	r0, r3
 801e18c:	fa01 f302 	lsl.w	r3, r1, r2
 801e190:	4318      	orrs	r0, r3
 801e192:	40e1      	lsrs	r1, r4
 801e194:	4308      	orrs	r0, r1
 801e196:	f000 0001 	and.w	r0, r0, #1
 801e19a:	f1d0 0002 	rsbs	r0, r0, #2
 801e19e:	bd70      	pop	{r4, r5, r6, pc}
 801e1a0:	2002      	movs	r0, #2
 801e1a2:	e7fc      	b.n	801e19e <checkint+0x5e>
 801e1a4:	2000      	movs	r0, #0
 801e1a6:	e7fa      	b.n	801e19e <checkint+0x5e>

0801e1a8 <pow>:
 801e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1ac:	ee10 4a90 	vmov	r4, s1
 801e1b0:	ed2d 8b0a 	vpush	{d8-d12}
 801e1b4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e1b8:	ee11 aa90 	vmov	sl, s3
 801e1bc:	f108 32ff 	add.w	r2, r8, #4294967295
 801e1c0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e1c4:	429a      	cmp	r2, r3
 801e1c6:	ee10 5a10 	vmov	r5, s0
 801e1ca:	ee11 0a10 	vmov	r0, s2
 801e1ce:	b087      	sub	sp, #28
 801e1d0:	46c4      	mov	ip, r8
 801e1d2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e1d6:	d806      	bhi.n	801e1e6 <pow+0x3e>
 801e1d8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e1dc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e1e0:	2b7f      	cmp	r3, #127	@ 0x7f
 801e1e2:	f240 8157 	bls.w	801e494 <pow+0x2ec>
 801e1e6:	1802      	adds	r2, r0, r0
 801e1e8:	eb4a 010a 	adc.w	r1, sl, sl
 801e1ec:	f06f 0b01 	mvn.w	fp, #1
 801e1f0:	1e57      	subs	r7, r2, #1
 801e1f2:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e1f6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e1fa:	45bb      	cmp	fp, r7
 801e1fc:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e200:	d242      	bcs.n	801e288 <pow+0xe0>
 801e202:	ea52 0301 	orrs.w	r3, r2, r1
 801e206:	f04f 0300 	mov.w	r3, #0
 801e20a:	d10c      	bne.n	801e226 <pow+0x7e>
 801e20c:	196d      	adds	r5, r5, r5
 801e20e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e212:	4164      	adcs	r4, r4
 801e214:	42ab      	cmp	r3, r5
 801e216:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e21a:	41a3      	sbcs	r3, r4
 801e21c:	f0c0 808f 	bcc.w	801e33e <pow+0x196>
 801e220:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e224:	e02b      	b.n	801e27e <pow+0xd6>
 801e226:	4ed4      	ldr	r6, [pc, #848]	@ (801e578 <pow+0x3d0>)
 801e228:	42b4      	cmp	r4, r6
 801e22a:	bf08      	it	eq
 801e22c:	429d      	cmpeq	r5, r3
 801e22e:	d109      	bne.n	801e244 <pow+0x9c>
 801e230:	1800      	adds	r0, r0, r0
 801e232:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e236:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e23a:	4283      	cmp	r3, r0
 801e23c:	4bcf      	ldr	r3, [pc, #828]	@ (801e57c <pow+0x3d4>)
 801e23e:	eb73 030a 	sbcs.w	r3, r3, sl
 801e242:	e7eb      	b.n	801e21c <pow+0x74>
 801e244:	196d      	adds	r5, r5, r5
 801e246:	48ce      	ldr	r0, [pc, #824]	@ (801e580 <pow+0x3d8>)
 801e248:	4164      	adcs	r4, r4
 801e24a:	42ab      	cmp	r3, r5
 801e24c:	eb70 0604 	sbcs.w	r6, r0, r4
 801e250:	d375      	bcc.n	801e33e <pow+0x196>
 801e252:	4281      	cmp	r1, r0
 801e254:	bf08      	it	eq
 801e256:	429a      	cmpeq	r2, r3
 801e258:	d171      	bne.n	801e33e <pow+0x196>
 801e25a:	4aca      	ldr	r2, [pc, #808]	@ (801e584 <pow+0x3dc>)
 801e25c:	4294      	cmp	r4, r2
 801e25e:	bf08      	it	eq
 801e260:	429d      	cmpeq	r5, r3
 801e262:	d0dd      	beq.n	801e220 <pow+0x78>
 801e264:	4294      	cmp	r4, r2
 801e266:	ea6f 0a0a 	mvn.w	sl, sl
 801e26a:	bf34      	ite	cc
 801e26c:	2400      	movcc	r4, #0
 801e26e:	2401      	movcs	r4, #1
 801e270:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e274:	4554      	cmp	r4, sl
 801e276:	f040 81dc 	bne.w	801e632 <pow+0x48a>
 801e27a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e27e:	b007      	add	sp, #28
 801e280:	ecbd 8b0a 	vpop	{d8-d12}
 801e284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e288:	196f      	adds	r7, r5, r5
 801e28a:	eb44 0904 	adc.w	r9, r4, r4
 801e28e:	1e7a      	subs	r2, r7, #1
 801e290:	f169 0300 	sbc.w	r3, r9, #0
 801e294:	4593      	cmp	fp, r2
 801e296:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e29a:	d225      	bcs.n	801e2e8 <pow+0x140>
 801e29c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e2a0:	2c00      	cmp	r4, #0
 801e2a2:	da13      	bge.n	801e2cc <pow+0x124>
 801e2a4:	4651      	mov	r1, sl
 801e2a6:	f7ff ff4b 	bl	801e140 <checkint>
 801e2aa:	2801      	cmp	r0, #1
 801e2ac:	d10e      	bne.n	801e2cc <pow+0x124>
 801e2ae:	eeb1 0b40 	vneg.f64	d0, d0
 801e2b2:	ea57 0909 	orrs.w	r9, r7, r9
 801e2b6:	d10b      	bne.n	801e2d0 <pow+0x128>
 801e2b8:	f1ba 0f00 	cmp.w	sl, #0
 801e2bc:	dadf      	bge.n	801e27e <pow+0xd6>
 801e2be:	b007      	add	sp, #28
 801e2c0:	ecbd 8b0a 	vpop	{d8-d12}
 801e2c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2c8:	f000 bbba 	b.w	801ea40 <__math_divzero>
 801e2cc:	2000      	movs	r0, #0
 801e2ce:	e7f0      	b.n	801e2b2 <pow+0x10a>
 801e2d0:	f1ba 0f00 	cmp.w	sl, #0
 801e2d4:	dad3      	bge.n	801e27e <pow+0xd6>
 801e2d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e2da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e2de:	ed8d 7b00 	vstr	d7, [sp]
 801e2e2:	ed9d 0b00 	vldr	d0, [sp]
 801e2e6:	e7ca      	b.n	801e27e <pow+0xd6>
 801e2e8:	2c00      	cmp	r4, #0
 801e2ea:	da2b      	bge.n	801e344 <pow+0x19c>
 801e2ec:	4651      	mov	r1, sl
 801e2ee:	f7ff ff27 	bl	801e140 <checkint>
 801e2f2:	b930      	cbnz	r0, 801e302 <pow+0x15a>
 801e2f4:	b007      	add	sp, #28
 801e2f6:	ecbd 8b0a 	vpop	{d8-d12}
 801e2fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2fe:	f000 bbb7 	b.w	801ea70 <__math_invalid>
 801e302:	1e41      	subs	r1, r0, #1
 801e304:	4248      	negs	r0, r1
 801e306:	4148      	adcs	r0, r1
 801e308:	0480      	lsls	r0, r0, #18
 801e30a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e30e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e312:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e316:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e31a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e31c:	d92d      	bls.n	801e37a <pow+0x1d2>
 801e31e:	4b96      	ldr	r3, [pc, #600]	@ (801e578 <pow+0x3d0>)
 801e320:	2000      	movs	r0, #0
 801e322:	429c      	cmp	r4, r3
 801e324:	bf08      	it	eq
 801e326:	4285      	cmpeq	r5, r0
 801e328:	f43f af7a 	beq.w	801e220 <pow+0x78>
 801e32c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e330:	428a      	cmp	r2, r1
 801e332:	d80c      	bhi.n	801e34e <pow+0x1a6>
 801e334:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e338:	42a8      	cmp	r0, r5
 801e33a:	41a3      	sbcs	r3, r4
 801e33c:	d204      	bcs.n	801e348 <pow+0x1a0>
 801e33e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e342:	e79c      	b.n	801e27e <pow+0xd6>
 801e344:	2000      	movs	r0, #0
 801e346:	e7e4      	b.n	801e312 <pow+0x16a>
 801e348:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e34c:	e797      	b.n	801e27e <pow+0xd6>
 801e34e:	2d01      	cmp	r5, #1
 801e350:	eb74 0303 	sbcs.w	r3, r4, r3
 801e354:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e358:	bf34      	ite	cc
 801e35a:	2301      	movcc	r3, #1
 801e35c:	2300      	movcs	r3, #0
 801e35e:	4296      	cmp	r6, r2
 801e360:	bf8c      	ite	hi
 801e362:	2600      	movhi	r6, #0
 801e364:	2601      	movls	r6, #1
 801e366:	42b3      	cmp	r3, r6
 801e368:	f000 809c 	beq.w	801e4a4 <pow+0x2fc>
 801e36c:	b007      	add	sp, #28
 801e36e:	ecbd 8b0a 	vpop	{d8-d12}
 801e372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e376:	f000 bb5b 	b.w	801ea30 <__math_oflow>
 801e37a:	f1bc 0f00 	cmp.w	ip, #0
 801e37e:	d10a      	bne.n	801e396 <pow+0x1ee>
 801e380:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e568 <pow+0x3c0>
 801e384:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e388:	ec53 2b17 	vmov	r2, r3, d7
 801e38c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e390:	4615      	mov	r5, r2
 801e392:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e396:	4a7c      	ldr	r2, [pc, #496]	@ (801e588 <pow+0x3e0>)
 801e398:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e39c:	4422      	add	r2, r4
 801e39e:	1513      	asrs	r3, r2, #20
 801e3a0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e3a4:	ee03 3a10 	vmov	s6, r3
 801e3a8:	0d12      	lsrs	r2, r2, #20
 801e3aa:	4b78      	ldr	r3, [pc, #480]	@ (801e58c <pow+0x3e4>)
 801e3ac:	0512      	lsls	r2, r2, #20
 801e3ae:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e3b2:	1aa7      	subs	r7, r4, r2
 801e3b4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e3b8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e3bc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e3c0:	1e2e      	subs	r6, r5, #0
 801e3c2:	ec47 6b14 	vmov	d4, r6, r7
 801e3c6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e3ca:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e3ce:	ed93 5b00 	vldr	d5, [r3]
 801e3d2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e3d6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e3da:	ed93 5b02 	vldr	d5, [r3, #8]
 801e3de:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e3e2:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e3e6:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e3ea:	ed93 5b04 	vldr	d5, [r3, #16]
 801e3ee:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e3f2:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e3f6:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e3fa:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e3fe:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e402:	eeb0 9b40 	vmov.f64	d9, d0
 801e406:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e40a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e40e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e412:	ed93 5b06 	vldr	d5, [r3, #24]
 801e416:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e41a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e41e:	ed93 4b08 	vldr	d4, [r3, #32]
 801e422:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e426:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e42a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e42e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e432:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e436:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e43a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e43e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e442:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e446:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e44a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e44e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e452:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e456:	ee16 3a90 	vmov	r3, s13
 801e45a:	eeb0 5b46 	vmov.f64	d5, d6
 801e45e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e462:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e466:	18b2      	adds	r2, r6, r2
 801e468:	2a3e      	cmp	r2, #62	@ 0x3e
 801e46a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e46e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e472:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e476:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e47a:	d91b      	bls.n	801e4b4 <pow+0x30c>
 801e47c:	2a00      	cmp	r2, #0
 801e47e:	da0b      	bge.n	801e498 <pow+0x2f0>
 801e480:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e484:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e488:	2800      	cmp	r0, #0
 801e48a:	f43f aef8 	beq.w	801e27e <pow+0xd6>
 801e48e:	eeb1 0b40 	vneg.f64	d0, d0
 801e492:	e6f4      	b.n	801e27e <pow+0xd6>
 801e494:	2000      	movs	r0, #0
 801e496:	e77e      	b.n	801e396 <pow+0x1ee>
 801e498:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e49c:	d909      	bls.n	801e4b2 <pow+0x30a>
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	f6bf af64 	bge.w	801e36c <pow+0x1c4>
 801e4a4:	b007      	add	sp, #28
 801e4a6:	ecbd 8b0a 	vpop	{d8-d12}
 801e4aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ae:	f000 bab7 	b.w	801ea20 <__math_uflow>
 801e4b2:	2600      	movs	r6, #0
 801e4b4:	4936      	ldr	r1, [pc, #216]	@ (801e590 <pow+0x3e8>)
 801e4b6:	ed91 4b02 	vldr	d4, [r1, #8]
 801e4ba:	ed91 3b00 	vldr	d3, [r1]
 801e4be:	eeb0 7b44 	vmov.f64	d7, d4
 801e4c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e4c6:	ee17 5a10 	vmov	r5, s14
 801e4ca:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e4ce:	ed91 4b04 	vldr	d4, [r1, #16]
 801e4d2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e4d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e4da:	ed91 4b06 	vldr	d4, [r1, #24]
 801e4de:	18dc      	adds	r4, r3, r3
 801e4e0:	f104 030f 	add.w	r3, r4, #15
 801e4e4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e4e8:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e4ec:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e4f0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e4f4:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e4f8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e4fc:	ed91 4b08 	vldr	d4, [r1, #32]
 801e500:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e504:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e508:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e50c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e510:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e514:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e518:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e51c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e520:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e524:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e528:	1940      	adds	r0, r0, r5
 801e52a:	2700      	movs	r7, #0
 801e52c:	eb17 020c 	adds.w	r2, r7, ip
 801e530:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e534:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e538:	2e00      	cmp	r6, #0
 801e53a:	d175      	bne.n	801e628 <pow+0x480>
 801e53c:	42bd      	cmp	r5, r7
 801e53e:	db29      	blt.n	801e594 <pow+0x3ec>
 801e540:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e544:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e548:	4610      	mov	r0, r2
 801e54a:	ec41 0b10 	vmov	d0, r0, r1
 801e54e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e552:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e570 <pow+0x3c8>
 801e556:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e55a:	b007      	add	sp, #28
 801e55c:	ecbd 8b0a 	vpop	{d8-d12}
 801e560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e564:	f000 ba9c 	b.w	801eaa0 <__math_check_oflow>
 801e568:	00000000 	.word	0x00000000
 801e56c:	43300000 	.word	0x43300000
 801e570:	00000000 	.word	0x00000000
 801e574:	7f000000 	.word	0x7f000000
 801e578:	3ff00000 	.word	0x3ff00000
 801e57c:	fff00000 	.word	0xfff00000
 801e580:	ffe00000 	.word	0xffe00000
 801e584:	7fe00000 	.word	0x7fe00000
 801e588:	c0196aab 	.word	0xc0196aab
 801e58c:	0801efe0 	.word	0x0801efe0
 801e590:	08020098 	.word	0x08020098
 801e594:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e598:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e59c:	4610      	mov	r0, r2
 801e59e:	ec41 0b15 	vmov	d5, r0, r1
 801e5a2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e5a6:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e5aa:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e5ae:	eeb0 4bc7 	vabs.f64	d4, d7
 801e5b2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e638 <pow+0x490>
 801e5be:	d52a      	bpl.n	801e616 <pow+0x46e>
 801e5c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e5c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5cc:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e5d0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e5d4:	bf58      	it	pl
 801e5d6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e5da:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e5de:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e5e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e5e6:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e5ea:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e5ee:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e5f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5fa:	d104      	bne.n	801e606 <pow+0x45e>
 801e5fc:	4632      	mov	r2, r6
 801e5fe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e602:	ec43 2b17 	vmov	d7, r2, r3
 801e606:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e60a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e60e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e612:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e616:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e61a:	b007      	add	sp, #28
 801e61c:	ecbd 8b0a 	vpop	{d8-d12}
 801e620:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e624:	f000 ba33 	b.w	801ea8e <__math_check_uflow>
 801e628:	ec43 2b10 	vmov	d0, r2, r3
 801e62c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e630:	e625      	b.n	801e27e <pow+0xd6>
 801e632:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e640 <pow+0x498>
 801e636:	e622      	b.n	801e27e <pow+0xd6>
 801e638:	00000000 	.word	0x00000000
 801e63c:	00100000 	.word	0x00100000
	...

0801e648 <__ieee754_sqrt>:
 801e648:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e64c:	4770      	bx	lr
	...

0801e650 <__ieee754_atan2>:
 801e650:	ee11 1a10 	vmov	r1, s2
 801e654:	eeb0 7b40 	vmov.f64	d7, d0
 801e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e65a:	ee11 5a90 	vmov	r5, s3
 801e65e:	424b      	negs	r3, r1
 801e660:	4f59      	ldr	r7, [pc, #356]	@ (801e7c8 <__ieee754_atan2+0x178>)
 801e662:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e666:	430b      	orrs	r3, r1
 801e668:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e66c:	42bb      	cmp	r3, r7
 801e66e:	d80d      	bhi.n	801e68c <__ieee754_atan2+0x3c>
 801e670:	ee10 ca10 	vmov	ip, s0
 801e674:	ee17 6a90 	vmov	r6, s15
 801e678:	f1cc 0000 	rsb	r0, ip, #0
 801e67c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e680:	ea40 000c 	orr.w	r0, r0, ip
 801e684:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e688:	42b8      	cmp	r0, r7
 801e68a:	d904      	bls.n	801e696 <__ieee754_atan2+0x46>
 801e68c:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e690:	eeb0 0b47 	vmov.f64	d0, d7
 801e694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e696:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e69a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e69e:	4308      	orrs	r0, r1
 801e6a0:	d103      	bne.n	801e6aa <__ieee754_atan2+0x5a>
 801e6a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e6a6:	f000 b897 	b.w	801e7d8 <atan>
 801e6aa:	17ac      	asrs	r4, r5, #30
 801e6ac:	f004 0402 	and.w	r4, r4, #2
 801e6b0:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e6b4:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e6b8:	d107      	bne.n	801e6ca <__ieee754_atan2+0x7a>
 801e6ba:	2c02      	cmp	r4, #2
 801e6bc:	d05c      	beq.n	801e778 <__ieee754_atan2+0x128>
 801e6be:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e790 <__ieee754_atan2+0x140>
 801e6c2:	2c03      	cmp	r4, #3
 801e6c4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e6c8:	e7e2      	b.n	801e690 <__ieee754_atan2+0x40>
 801e6ca:	4311      	orrs	r1, r2
 801e6cc:	d107      	bne.n	801e6de <__ieee754_atan2+0x8e>
 801e6ce:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e798 <__ieee754_atan2+0x148>
 801e6d2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e7a0 <__ieee754_atan2+0x150>
 801e6d6:	2e00      	cmp	r6, #0
 801e6d8:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e6dc:	e7d8      	b.n	801e690 <__ieee754_atan2+0x40>
 801e6de:	42ba      	cmp	r2, r7
 801e6e0:	d10f      	bne.n	801e702 <__ieee754_atan2+0xb2>
 801e6e2:	4293      	cmp	r3, r2
 801e6e4:	f104 34ff 	add.w	r4, r4, #4294967295
 801e6e8:	d107      	bne.n	801e6fa <__ieee754_atan2+0xaa>
 801e6ea:	2c02      	cmp	r4, #2
 801e6ec:	d847      	bhi.n	801e77e <__ieee754_atan2+0x12e>
 801e6ee:	4b37      	ldr	r3, [pc, #220]	@ (801e7cc <__ieee754_atan2+0x17c>)
 801e6f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e6f4:	ed93 7b00 	vldr	d7, [r3]
 801e6f8:	e7ca      	b.n	801e690 <__ieee754_atan2+0x40>
 801e6fa:	2c02      	cmp	r4, #2
 801e6fc:	d842      	bhi.n	801e784 <__ieee754_atan2+0x134>
 801e6fe:	4b34      	ldr	r3, [pc, #208]	@ (801e7d0 <__ieee754_atan2+0x180>)
 801e700:	e7f6      	b.n	801e6f0 <__ieee754_atan2+0xa0>
 801e702:	42bb      	cmp	r3, r7
 801e704:	d0e3      	beq.n	801e6ce <__ieee754_atan2+0x7e>
 801e706:	1a9b      	subs	r3, r3, r2
 801e708:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e70c:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e710:	da1a      	bge.n	801e748 <__ieee754_atan2+0xf8>
 801e712:	2d00      	cmp	r5, #0
 801e714:	da01      	bge.n	801e71a <__ieee754_atan2+0xca>
 801e716:	323c      	adds	r2, #60	@ 0x3c
 801e718:	db19      	blt.n	801e74e <__ieee754_atan2+0xfe>
 801e71a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e71e:	f000 f955 	bl	801e9cc <fabs>
 801e722:	f000 f859 	bl	801e7d8 <atan>
 801e726:	eeb0 7b40 	vmov.f64	d7, d0
 801e72a:	2c01      	cmp	r4, #1
 801e72c:	d012      	beq.n	801e754 <__ieee754_atan2+0x104>
 801e72e:	2c02      	cmp	r4, #2
 801e730:	d019      	beq.n	801e766 <__ieee754_atan2+0x116>
 801e732:	2c00      	cmp	r4, #0
 801e734:	d0ac      	beq.n	801e690 <__ieee754_atan2+0x40>
 801e736:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e7a8 <__ieee754_atan2+0x158>
 801e73a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e73e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e7b0 <__ieee754_atan2+0x160>
 801e742:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e746:	e7a3      	b.n	801e690 <__ieee754_atan2+0x40>
 801e748:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e798 <__ieee754_atan2+0x148>
 801e74c:	e7ed      	b.n	801e72a <__ieee754_atan2+0xda>
 801e74e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e7b8 <__ieee754_atan2+0x168>
 801e752:	e7ea      	b.n	801e72a <__ieee754_atan2+0xda>
 801e754:	ee17 1a90 	vmov	r1, s15
 801e758:	ec53 2b17 	vmov	r2, r3, d7
 801e75c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e760:	ec43 2b17 	vmov	d7, r2, r3
 801e764:	e794      	b.n	801e690 <__ieee754_atan2+0x40>
 801e766:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e7a8 <__ieee754_atan2+0x158>
 801e76a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e76e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e7b0 <__ieee754_atan2+0x160>
 801e772:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e776:	e78b      	b.n	801e690 <__ieee754_atan2+0x40>
 801e778:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e7b0 <__ieee754_atan2+0x160>
 801e77c:	e788      	b.n	801e690 <__ieee754_atan2+0x40>
 801e77e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e7c0 <__ieee754_atan2+0x170>
 801e782:	e785      	b.n	801e690 <__ieee754_atan2+0x40>
 801e784:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e7b8 <__ieee754_atan2+0x168>
 801e788:	e782      	b.n	801e690 <__ieee754_atan2+0x40>
 801e78a:	bf00      	nop
 801e78c:	f3af 8000 	nop.w
 801e790:	54442d18 	.word	0x54442d18
 801e794:	c00921fb 	.word	0xc00921fb
 801e798:	54442d18 	.word	0x54442d18
 801e79c:	3ff921fb 	.word	0x3ff921fb
 801e7a0:	54442d18 	.word	0x54442d18
 801e7a4:	bff921fb 	.word	0xbff921fb
 801e7a8:	33145c07 	.word	0x33145c07
 801e7ac:	3ca1a626 	.word	0x3ca1a626
 801e7b0:	54442d18 	.word	0x54442d18
 801e7b4:	400921fb 	.word	0x400921fb
	...
 801e7c0:	54442d18 	.word	0x54442d18
 801e7c4:	3fe921fb 	.word	0x3fe921fb
 801e7c8:	7ff00000 	.word	0x7ff00000
 801e7cc:	08020040 	.word	0x08020040
 801e7d0:	08020028 	.word	0x08020028
 801e7d4:	00000000 	.word	0x00000000

0801e7d8 <atan>:
 801e7d8:	b538      	push	{r3, r4, r5, lr}
 801e7da:	eeb0 7b40 	vmov.f64	d7, d0
 801e7de:	ee17 5a90 	vmov	r5, s15
 801e7e2:	4b73      	ldr	r3, [pc, #460]	@ (801e9b0 <atan+0x1d8>)
 801e7e4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e7e8:	429c      	cmp	r4, r3
 801e7ea:	d913      	bls.n	801e814 <atan+0x3c>
 801e7ec:	4b71      	ldr	r3, [pc, #452]	@ (801e9b4 <atan+0x1dc>)
 801e7ee:	429c      	cmp	r4, r3
 801e7f0:	d803      	bhi.n	801e7fa <atan+0x22>
 801e7f2:	d107      	bne.n	801e804 <atan+0x2c>
 801e7f4:	ee10 3a10 	vmov	r3, s0
 801e7f8:	b123      	cbz	r3, 801e804 <atan+0x2c>
 801e7fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e7fe:	eeb0 0b47 	vmov.f64	d0, d7
 801e802:	bd38      	pop	{r3, r4, r5, pc}
 801e804:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e940 <atan+0x168>
 801e808:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e948 <atan+0x170>
 801e80c:	2d00      	cmp	r5, #0
 801e80e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e812:	e7f4      	b.n	801e7fe <atan+0x26>
 801e814:	4b68      	ldr	r3, [pc, #416]	@ (801e9b8 <atan+0x1e0>)
 801e816:	429c      	cmp	r4, r3
 801e818:	d811      	bhi.n	801e83e <atan+0x66>
 801e81a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e81e:	429c      	cmp	r4, r3
 801e820:	d80a      	bhi.n	801e838 <atan+0x60>
 801e822:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e826:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e950 <atan+0x178>
 801e82a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e82e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e836:	dce2      	bgt.n	801e7fe <atan+0x26>
 801e838:	f04f 33ff 	mov.w	r3, #4294967295
 801e83c:	e013      	b.n	801e866 <atan+0x8e>
 801e83e:	f000 f8c5 	bl	801e9cc <fabs>
 801e842:	4b5e      	ldr	r3, [pc, #376]	@ (801e9bc <atan+0x1e4>)
 801e844:	429c      	cmp	r4, r3
 801e846:	d84f      	bhi.n	801e8e8 <atan+0x110>
 801e848:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e84c:	429c      	cmp	r4, r3
 801e84e:	d841      	bhi.n	801e8d4 <atan+0xfc>
 801e850:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e854:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e858:	2300      	movs	r3, #0
 801e85a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e85e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e862:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e866:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e958 <atan+0x180>
 801e86a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e86e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e872:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e960 <atan+0x188>
 801e876:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e87a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e968 <atan+0x190>
 801e87e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e882:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e970 <atan+0x198>
 801e886:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e88a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e978 <atan+0x1a0>
 801e88e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e892:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e980 <atan+0x1a8>
 801e896:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e988 <atan+0x1b0>
 801e89a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e89e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e990 <atan+0x1b8>
 801e8a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e8a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e998 <atan+0x1c0>
 801e8aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e8ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e9a0 <atan+0x1c8>
 801e8b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e8b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e9a8 <atan+0x1d0>
 801e8ba:	1c5a      	adds	r2, r3, #1
 801e8bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e8c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e8c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e8c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e8cc:	d121      	bne.n	801e912 <atan+0x13a>
 801e8ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e8d2:	e794      	b.n	801e7fe <atan+0x26>
 801e8d4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e8d8:	2301      	movs	r3, #1
 801e8da:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e8de:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e8e2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e8e6:	e7be      	b.n	801e866 <atan+0x8e>
 801e8e8:	4b35      	ldr	r3, [pc, #212]	@ (801e9c0 <atan+0x1e8>)
 801e8ea:	429c      	cmp	r4, r3
 801e8ec:	d20b      	bcs.n	801e906 <atan+0x12e>
 801e8ee:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e8f2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e8f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e8fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e8fe:	2302      	movs	r3, #2
 801e900:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e904:	e7af      	b.n	801e866 <atan+0x8e>
 801e906:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e90a:	2303      	movs	r3, #3
 801e90c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e910:	e7a9      	b.n	801e866 <atan+0x8e>
 801e912:	4a2c      	ldr	r2, [pc, #176]	@ (801e9c4 <atan+0x1ec>)
 801e914:	492c      	ldr	r1, [pc, #176]	@ (801e9c8 <atan+0x1f0>)
 801e916:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e91a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e91e:	ed93 5b00 	vldr	d5, [r3]
 801e922:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e926:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e92a:	ed92 7b00 	vldr	d7, [r2]
 801e92e:	2d00      	cmp	r5, #0
 801e930:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e934:	bfb8      	it	lt
 801e936:	eeb1 7b47 	vneglt.f64	d7, d7
 801e93a:	e760      	b.n	801e7fe <atan+0x26>
 801e93c:	f3af 8000 	nop.w
 801e940:	54442d18 	.word	0x54442d18
 801e944:	bff921fb 	.word	0xbff921fb
 801e948:	54442d18 	.word	0x54442d18
 801e94c:	3ff921fb 	.word	0x3ff921fb
 801e950:	8800759c 	.word	0x8800759c
 801e954:	7e37e43c 	.word	0x7e37e43c
 801e958:	e322da11 	.word	0xe322da11
 801e95c:	3f90ad3a 	.word	0x3f90ad3a
 801e960:	24760deb 	.word	0x24760deb
 801e964:	3fa97b4b 	.word	0x3fa97b4b
 801e968:	a0d03d51 	.word	0xa0d03d51
 801e96c:	3fb10d66 	.word	0x3fb10d66
 801e970:	c54c206e 	.word	0xc54c206e
 801e974:	3fb745cd 	.word	0x3fb745cd
 801e978:	920083ff 	.word	0x920083ff
 801e97c:	3fc24924 	.word	0x3fc24924
 801e980:	5555550d 	.word	0x5555550d
 801e984:	3fd55555 	.word	0x3fd55555
 801e988:	52defd9a 	.word	0x52defd9a
 801e98c:	bfadde2d 	.word	0xbfadde2d
 801e990:	2c6a6c2f 	.word	0x2c6a6c2f
 801e994:	bfa2b444 	.word	0xbfa2b444
 801e998:	af749a6d 	.word	0xaf749a6d
 801e99c:	bfb3b0f2 	.word	0xbfb3b0f2
 801e9a0:	fe231671 	.word	0xfe231671
 801e9a4:	bfbc71c6 	.word	0xbfbc71c6
 801e9a8:	9998ebc4 	.word	0x9998ebc4
 801e9ac:	bfc99999 	.word	0xbfc99999
 801e9b0:	440fffff 	.word	0x440fffff
 801e9b4:	7ff00000 	.word	0x7ff00000
 801e9b8:	3fdbffff 	.word	0x3fdbffff
 801e9bc:	3ff2ffff 	.word	0x3ff2ffff
 801e9c0:	40038000 	.word	0x40038000
 801e9c4:	08020078 	.word	0x08020078
 801e9c8:	08020058 	.word	0x08020058

0801e9cc <fabs>:
 801e9cc:	ec51 0b10 	vmov	r0, r1, d0
 801e9d0:	4602      	mov	r2, r0
 801e9d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e9d6:	ec43 2b10 	vmov	d0, r2, r3
 801e9da:	4770      	bx	lr

0801e9dc <with_errno>:
 801e9dc:	b510      	push	{r4, lr}
 801e9de:	ed2d 8b02 	vpush	{d8}
 801e9e2:	eeb0 8b40 	vmov.f64	d8, d0
 801e9e6:	4604      	mov	r4, r0
 801e9e8:	f7ff fb5c 	bl	801e0a4 <__errno>
 801e9ec:	eeb0 0b48 	vmov.f64	d0, d8
 801e9f0:	ecbd 8b02 	vpop	{d8}
 801e9f4:	6004      	str	r4, [r0, #0]
 801e9f6:	bd10      	pop	{r4, pc}

0801e9f8 <xflow>:
 801e9f8:	b082      	sub	sp, #8
 801e9fa:	b158      	cbz	r0, 801ea14 <xflow+0x1c>
 801e9fc:	eeb1 7b40 	vneg.f64	d7, d0
 801ea00:	ed8d 7b00 	vstr	d7, [sp]
 801ea04:	ed9d 7b00 	vldr	d7, [sp]
 801ea08:	2022      	movs	r0, #34	@ 0x22
 801ea0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ea0e:	b002      	add	sp, #8
 801ea10:	f7ff bfe4 	b.w	801e9dc <with_errno>
 801ea14:	eeb0 7b40 	vmov.f64	d7, d0
 801ea18:	e7f2      	b.n	801ea00 <xflow+0x8>
 801ea1a:	0000      	movs	r0, r0
 801ea1c:	0000      	movs	r0, r0
	...

0801ea20 <__math_uflow>:
 801ea20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ea28 <__math_uflow+0x8>
 801ea24:	f7ff bfe8 	b.w	801e9f8 <xflow>
 801ea28:	00000000 	.word	0x00000000
 801ea2c:	10000000 	.word	0x10000000

0801ea30 <__math_oflow>:
 801ea30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ea38 <__math_oflow+0x8>
 801ea34:	f7ff bfe0 	b.w	801e9f8 <xflow>
 801ea38:	00000000 	.word	0x00000000
 801ea3c:	70000000 	.word	0x70000000

0801ea40 <__math_divzero>:
 801ea40:	b082      	sub	sp, #8
 801ea42:	2800      	cmp	r0, #0
 801ea44:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801ea48:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801ea4c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801ea50:	ed8d 7b00 	vstr	d7, [sp]
 801ea54:	ed9d 0b00 	vldr	d0, [sp]
 801ea58:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801ea68 <__math_divzero+0x28>
 801ea5c:	2022      	movs	r0, #34	@ 0x22
 801ea5e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801ea62:	b002      	add	sp, #8
 801ea64:	f7ff bfba 	b.w	801e9dc <with_errno>
	...

0801ea70 <__math_invalid>:
 801ea70:	eeb0 7b40 	vmov.f64	d7, d0
 801ea74:	eeb4 7b47 	vcmp.f64	d7, d7
 801ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea7c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801ea80:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801ea84:	d602      	bvs.n	801ea8c <__math_invalid+0x1c>
 801ea86:	2021      	movs	r0, #33	@ 0x21
 801ea88:	f7ff bfa8 	b.w	801e9dc <with_errno>
 801ea8c:	4770      	bx	lr

0801ea8e <__math_check_uflow>:
 801ea8e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea96:	d102      	bne.n	801ea9e <__math_check_uflow+0x10>
 801ea98:	2022      	movs	r0, #34	@ 0x22
 801ea9a:	f7ff bf9f 	b.w	801e9dc <with_errno>
 801ea9e:	4770      	bx	lr

0801eaa0 <__math_check_oflow>:
 801eaa0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801eac0 <__math_check_oflow+0x20>
 801eaa4:	eeb0 7bc0 	vabs.f64	d7, d0
 801eaa8:	eeb4 7b46 	vcmp.f64	d7, d6
 801eaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eab0:	dd02      	ble.n	801eab8 <__math_check_oflow+0x18>
 801eab2:	2022      	movs	r0, #34	@ 0x22
 801eab4:	f7ff bf92 	b.w	801e9dc <with_errno>
 801eab8:	4770      	bx	lr
 801eaba:	bf00      	nop
 801eabc:	f3af 8000 	nop.w
 801eac0:	ffffffff 	.word	0xffffffff
 801eac4:	7fefffff 	.word	0x7fefffff

0801eac8 <_init>:
 801eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaca:	bf00      	nop
 801eacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eace:	bc08      	pop	{r3}
 801ead0:	469e      	mov	lr, r3
 801ead2:	4770      	bx	lr

0801ead4 <_fini>:
 801ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ead6:	bf00      	nop
 801ead8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eada:	bc08      	pop	{r3}
 801eadc:	469e      	mov	lr, r3
 801eade:	4770      	bx	lr
